From 3614307c979a6d37d452ae82b38ff361e64a2089 Mon Sep 17 00:00:00 2001
From: Michael Achenbach <machenbach@chromium.org>
Date: Tue, 16 May 2023 09:25:16 +0200
Subject: [PATCH] [test] Move convenience status-file variables into BUILD.gn

This creates the composed properties used for convenience already
in BUILD.gn and drops logic need for those in the test framework.
Maintaining build-flags from the build config is now much simpler
in the test framework.

This also:
- Adds a meaningful exception and early checking to all places
where a build flag might be missed. Previously it was confusing
to find the right place where to add it.
- Refactors _no_simd_hardware (leftover from last review).
- Removes unused build flags like mips_arch and write_barriers,
only used in other compounds.
- Uses positive expression for no_js_shared_memory ->
not js_shared_memory, as in all other flags.

Bug: chromium:1132088
Change-Id: Iedeb8c54a396bd099e9e8b22bece5ac10cd63ea9
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4531908
Reviewed-by: Liviu Rau <liviurau@google.com>
Commit-Queue: Michael Achenbach <machenbach@chromium.org>
Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
Cr-Commit-Position: refs/heads/main@{#87687}
---
 BUILD.gn                                      | 22 +++++-
 test/mjsunit/mjsunit.status                   |  4 +-
 tools/testrunner/base_runner.py               | 40 ++++++-----
 tools/testrunner/build_config.py              | 71 ++++---------------
 tools/testrunner/local/statusfile.py          |  4 +-
 tools/testrunner/local/variants.py            |  5 ++
 tools/testrunner/standard_runner_test.py      | 30 ++++----
 .../testrunner/testdata/v8_build_config.json  |  9 +--
 tools/testrunner/utils/test_utils.py          |  6 +-
 9 files changed, 89 insertions(+), 102 deletions(-)

diff --git a/BUILD.gn b/BUILD.gn
index fe2b9dd658..f4fda5d360 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -2406,15 +2406,27 @@ action("v8_dump_build_config") {
   outputs = [ "$root_out_dir/v8_build_config.json" ]
   is_DEBUG_defined = v8_enable_debugging_features || dcheck_always_on
   is_full_debug = v8_enable_debugging_features && !v8_optimized_debug
-  write_barriers = !v8_disable_write_barriers
+
+  arch = v8_target_cpu
+  if (v8_target_cpu == "x86") {
+    arch = "ia32"
+  }
 
   mips_arch_variant_var = ""
   mips_use_msa_var = false
-  if (v8_current_cpu == "mips64" || v8_current_cpu == "mips64el") {
+  if (arch == "mips64" || arch == "mips64el") {
     mips_arch_variant_var = mips_arch_variant
     mips_use_msa_var = mips_use_msa
   }
 
+  js_shared_memory =
+      v8_enable_shared_ro_heap && (!v8_enable_pointer_compression ||
+                                   v8_enable_pointer_compression_shared_cage) &&
+      !v8_disable_write_barriers
+  simd_mips = mips_arch_variant_var == "r6" && mips_use_msa
+  simulator_run = target_cpu != v8_target_cpu
+  use_sanitizer = is_asan || is_cfi || is_msan || is_tsan || is_ubsan
+
   # This lists all build-time switches consumed by the test framework. All
   # switches can be used automatically in the status files as is - no
   # further files need to be modified.
@@ -2427,6 +2439,7 @@ action("v8_dump_build_config") {
   # v8_cfi disambiguates from the global cfi flag.
   args = [
     rebase_path("$root_out_dir/v8_build_config.json", root_build_dir),
+    "arch=\"$arch\"",
     "asan=$is_asan",
     "atomic_object_field_writes=$v8_enable_atomic_object_field_writes",
     "cet_shadow_stack=$v8_enable_cet_shadow_stack",
@@ -2454,6 +2467,7 @@ action("v8_dump_build_config") {
     "i18n=$v8_enable_i18n_support",
     "is_android=$is_android",
     "is_ios=$is_ios",
+    "js_shared_memory=$js_shared_memory",
     "lite_mode=$v8_enable_lite_mode",
     "mips_arch_variant=\"$mips_arch_variant_var\"",
     "mips_use_msa=$mips_use_msa_var",
@@ -2464,19 +2478,21 @@ action("v8_dump_build_config") {
     "runtime_call_stats=$v8_enable_runtime_call_stats",
     "sandbox=$v8_enable_sandbox",
     "shared_ro_heap=$v8_enable_shared_ro_heap",
+    "simd_mips=$simd_mips",
+    "simulator_run=$simulator_run",
     "single_generation=$v8_enable_single_generation",
     "slow_dchecks=$v8_enable_slow_dchecks",
     "target_cpu=\"$target_cpu\"",
     "third_party_heap=$v8_enable_third_party_heap",
     "tsan=$is_tsan",
     "ubsan=$is_ubsan",
+    "use_sanitizer=$use_sanitizer",
     "v8_cfi=$v8_control_flow_integrity",
     "v8_current_cpu=\"$v8_current_cpu\"",
     "v8_target_cpu=\"$v8_target_cpu\"",
     "verify_csa=$v8_enable_verify_csa",
     "verify_heap=$v8_enable_verify_heap",
     "verify_predictable=$v8_enable_verify_predictable",
-    "write_barriers=$write_barriers",
   ]
 }
 
diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
index c7e4568604..4fd4b1ca39 100644
--- a/test/mjsunit/mjsunit.status
+++ b/test/mjsunit/mjsunit.status
@@ -1907,11 +1907,11 @@
 }], # variant == google3_nociu
 
 # Tests that cannot run without JS shared memory
-['no_js_shared_memory', {
+['not js_shared_memory', {
   'shared-memory/*': [SKIP],
   'regress/regress-crbug-1394741': [SKIP],
   'regress/regress-crbug-1395117': [SKIP],
-}],  # 'no_js_shared_memory'
+}],  # 'not js_shared_memory'
 
 ##############################################################################
 ['variant == always_sparkplug', {
diff --git a/tools/testrunner/base_runner.py b/tools/testrunner/base_runner.py
index 8dbcc3e80c..b604816b6e 100644
--- a/tools/testrunner/base_runner.py
+++ b/tools/testrunner/base_runner.py
@@ -18,6 +18,7 @@ import traceback
 from testrunner.build_config import BuildConfig
 from testrunner.local import testsuite
 from testrunner.local import utils
+from testrunner.local.variants import REQUIRED_BUILD_VARIABLES
 from testrunner.local.context import os_context
 from testrunner.test_config import TestConfig
 from testrunner.testproc import util
@@ -334,6 +335,9 @@ class BaseTestRunner(object):
     else:
       self.target_os = utils.GuessOS()
 
+    # Verify integrity between build variables and variant configs.
+    self.build_config.ensure_vars(REQUIRED_BUILD_VARIABLES)
+
   def _do_load_build_config(self, outdir):
     build_config_path = os.path.join(outdir, "v8_build_config.json")
     if not os.path.exists(build_config_path):
@@ -545,34 +549,36 @@ class BaseTestRunner(object):
 
   @property
   def _no_simd_hardware(self):
-    # TODO(liviurau): Add some tests and refactor the logic here.
+    # TODO(liviurau): Add some tests.
     # We try to find all the reasons why we have no_simd.
-    no_simd_hardware = any(i in self.options.extra_flags for i in [
+    if any(i in self.options.extra_flags for i in [
         '--noenable-sse3', '--no-enable-sse3', '--noenable-ssse3',
         '--no-enable-ssse3', '--noenable-sse4-1', '--no-enable-sse4_1'
-    ])
+    ]):
+      return True
 
     # Set no_simd_hardware on architectures without Simd enabled.
-    if self.build_config.arch == 'mips64el':
-      no_simd_hardware = not self.build_config.simd_mips
+    if (self.build_config.arch == 'mips64el' and
+        not self.build_config.simd_mips):
+      return True
 
-    if self.build_config.arch == 'loong64'  or \
-       self.build_config.arch == 'riscv32':
-      no_simd_hardware = True
+    if (self.build_config.arch == 'loong64' or
+        self.build_config.arch == 'riscv32'):
+      return True
 
     # S390 hosts without VEF1 do not support Simd.
-    if self.build_config.arch == 's390x' and \
-       not self.build_config.simulator_run and \
-       not utils.IsS390SimdSupported():
-      no_simd_hardware = True
+    if (self.build_config.arch == 's390x' and
+        not self.build_config.simulator_run and
+        not utils.IsS390SimdSupported()):
+      return True
 
     # Ppc64 processors earlier than POWER9 do not support Simd instructions
-    if self.build_config.arch == 'ppc64' and \
-       not self.build_config.simulator_run and \
-       utils.GuessPowerProcessorVersion() < 9:
-      no_simd_hardware = True
+    if (self.build_config.arch == 'ppc64' and
+        not self.build_config.simulator_run and
+        utils.GuessPowerProcessorVersion() < 9):
+      return True
 
-    return no_simd_hardware
+    return False
 
   def _get_statusfile_variables(self):
     """Returns all attributes accessible in status files.
diff --git a/tools/testrunner/build_config.py b/tools/testrunner/build_config.py
index 1099be1e45..9da2df8759 100644
--- a/tools/testrunner/build_config.py
+++ b/tools/testrunner/build_config.py
@@ -18,54 +18,12 @@ SCALE_FACTOR = dict(
 )
 
 INITIALIZATION_ERROR = f"""
-Error initializing property '%s'. It depends on a build flag of V8's
-build config. If you see this error in testing, you might need to add
-the dependencies to tools/testrunner/testdata/v8_build_config.json. If
-you see this error in production, ensure to add the dependences to the
+Missing property '%s'. If you see this error in testing, you might need
+to add the property to tools/testrunner/testdata/v8_build_config.json. If
+you see this error in production, ensure to add the property to the
 v8_dump_build_config action in V8's top-level BUILD.gn file.
 """
 
-class _BuildConfigInternal(object):
-  """Placeholder for all attributes and properties of the build config.
-
-  It's initialized with all attributes of the v8_dump_build_config action
-  in V8's top-level BUILD.gn file. Additionally, this defines read-only
-  properties using other attributes for convenience.
-  """
-
-  def __init__(self, build_config):
-    for key, value in build_config.items():
-      setattr(self, key, value)
-
-  @property
-  def arch(self):
-    # In V8 land, GN's x86 is called ia32.
-    return 'ia32' if self.v8_target_cpu == 'x86' else self.v8_target_cpu
-
-  @property
-  def simulator_run(self):
-    return self.target_cpu != self.v8_target_cpu
-
-  @property
-  def use_sanitizer(self):
-    return self.asan or self.cfi or self.msan or self.tsan or self.ubsan
-
-  @property
-  def no_js_shared_memory(self):
-    return (
-        not self.shared_ro_heap
-        or self.pointer_compression and not self.pointer_compression_shared_cage
-        or not self.write_barriers)
-
-  @property
-  def mips_arch(self):
-    return self.arch in ['mips64', 'mips64el']
-
-  @property
-  def simd_mips(self):
-    return (self.mips_arch and self.mips_arch_variant == "r6" and
-            self.mips_use_msa)
-
 
 class BuildConfig(object):
   """Enables accessing all build-time flags as set in V8's BUILD.gn file.
@@ -75,13 +33,10 @@ class BuildConfig(object):
   """
 
   def __init__(self, build_config):
-    self.internal = _BuildConfigInternal(build_config)
+    for key, value in build_config.items():
+      setattr(self, key, value)
 
-    for key in self.keys():
-      try:
-        setattr(self, key, getattr(self.internal, key))
-      except AttributeError as e:
-        raise Exception(INITIALIZATION_ERROR % key)
+    self.keys = list(build_config.keys())
 
     bool_options = [key for key, value in self.items() if value is True]
     string_options = [
@@ -89,15 +44,15 @@ class BuildConfig(object):
       for key, value in self.items() if value and isinstance(value, str)]
     self._str_rep = ', '.join(sorted(bool_options + string_options))
 
-  def keys(self):
-    for key in dir(self.internal):
-      if not key.startswith('_'):
-        yield key
-
   def items(self):
-    for key in self.keys():
+    for key in self.keys:
       yield key, getattr(self, key)
 
+  def ensure_vars(self, build_vars):
+    for var in build_vars:
+      if var not in self.keys:
+        raise Exception(INITIALIZATION_ERROR % var)
+
   def timeout_scalefactor(self, initial_factor):
     """Increases timeout for slow build configurations."""
     result = initial_factor
@@ -106,7 +61,7 @@ class BuildConfig(object):
         if getattr(self, key):
           result *= value
       except AttributeError:
-        raise Exception(INITIALIZATION_ERROR % k)
+        raise Exception(INITIALIZATION_ERROR % key)
     if self.arch in SLOW_ARCHS:
       result *= 4.5
     return result
diff --git a/tools/testrunner/local/statusfile.py b/tools/testrunner/local/statusfile.py
index 04485936b6..e2aeaf5dc7 100644
--- a/tools/testrunner/local/statusfile.py
+++ b/tools/testrunner/local/statusfile.py
@@ -28,6 +28,7 @@
 import os
 import re
 
+from testrunner.build_config import INITIALIZATION_ERROR
 from testrunner.local.variants import ALL_VARIANTS
 from testrunner.local.utils import Freeze
 
@@ -162,7 +163,8 @@ def _EvalExpression(exp, variables):
     return eval(exp, variables)
   except NameError as e:
     identifier = re.match("name '(.*)' is not defined", str(e)).group(1)
-    assert identifier == "variant", "Unknown identifier: %s" % identifier
+    # If it's not a variant expression, it points to a missing build flag.
+    assert identifier == "variant", INITIALIZATION_ERROR % identifier
     return VARIANT_EXPRESSION
 
 
diff --git a/tools/testrunner/local/variants.py b/tools/testrunner/local/variants.py
index 3727ae1c4b..2fc7d80603 100644
--- a/tools/testrunner/local/variants.py
+++ b/tools/testrunner/local/variants.py
@@ -233,6 +233,11 @@ def _variant_order_key(v):
 ALL_VARIANTS = sorted(ALL_VARIANT_FLAGS.keys(),
                       key=_variant_order_key)
 
+# For internal integrity checking.
+REQUIRED_BUILD_VARIABLES = [
+    var.lstrip('!') for var in INCOMPATIBLE_FLAGS_PER_BUILD_VARIABLE.keys()
+]
+
 # Check {SLOW,FAST}_VARIANTS entries
 for variants in [SLOW_VARIANTS, FAST_VARIANTS]:
   for v in variants:
diff --git a/tools/testrunner/standard_runner_test.py b/tools/testrunner/standard_runner_test.py
index a49f7ab16f..78a4363c6c 100644
--- a/tools/testrunner/standard_runner_test.py
+++ b/tools/testrunner/standard_runner_test.py
@@ -221,21 +221,23 @@ class StandardRunnerTest(TestRunnerTest):
         '--variants=default',
         'sweet/bananas',
         config_overrides=dict(
-            asan=True, cfi=True, dcheck_always_on=True, has_webassembly=True,
-            i18n=True, msan=True, target_cpu='x86', tsan=True,
-            ubsan=True, v8_target_cpu='x86',
-        )
-    )
+            arch="ia32",
+            asan=True,
+            cfi=True,
+            dcheck_always_on=True,
+            has_webassembly=True,
+            msan=True,
+            target_cpu='x86',
+            tsan=True,
+            ubsan=True,
+            use_sanitizer=True,
+            v8_target_cpu='x86',
+        ))
     result.stdout_includes('>>> Autodetected:')
-    result.stdout_includes('asan')
-    result.stdout_includes('cfi')
-    result.stdout_includes('dcheck_always_on')
-    result.stdout_includes('i18n')
-    result.stdout_includes('msan')
-    result.stdout_includes('tsan')
-    result.stdout_includes('ubsan')
-    result.stdout_includes('use_sanitizer')
-    result.stdout_includes('has_webassembly')
+    result.stdout_includes(
+        'arch="ia32", asan, cfi, dcheck_always_on, has_webassembly, i18n, '
+        'msan, target_cpu="x86", tsan, ubsan, use_sanitizer, '
+        'v8_target_cpu="x86"')
     result.stdout_includes('>>> Running tests for ia32.release')
     result.has_returncode(0)
     # TODO(machenbach): Test some more implications of the auto-detected
diff --git a/tools/testrunner/testdata/v8_build_config.json b/tools/testrunner/testdata/v8_build_config.json
index 69da39481f..0ab720e82c 100644
--- a/tools/testrunner/testdata/v8_build_config.json
+++ b/tools/testrunner/testdata/v8_build_config.json
@@ -1,4 +1,5 @@
 {
+  "arch": "x64",
   "asan": false,
   "cfi": false,
   "dcheck_always_on": false,
@@ -7,11 +8,11 @@
   "i18n": true,
   "is_android": false,
   "is_ios": false,
+  "lite_mode": false,
   "msan": false,
-  "shared_ro_heap": false,
-  "target_cpu": "x64",
+  "simulator_run": false,
   "tsan": false,
   "ubsan": false,
-  "verify_predictable": false,
-  "v8_target_cpu": "x64"
+  "use_sanitizer": false,
+  "verify_predictable": false
 }
diff --git a/tools/testrunner/utils/test_utils.py b/tools/testrunner/utils/test_utils.py
index c7b8ed002a..3e8fa693c3 100644
--- a/tools/testrunner/utils/test_utils.py
+++ b/tools/testrunner/utils/test_utils.py
@@ -21,7 +21,7 @@ from testrunner.local.command import BaseCommand
 from testrunner.objects import output
 from testrunner.local.context import DefaultOSContext
 from testrunner.local.pool import SingleThreadedExecutionPool
-from testrunner.local.variants import INCOMPATIBLE_FLAGS_PER_BUILD_VARIABLE
+from testrunner.local.variants import REQUIRED_BUILD_VARIABLES
 
 TOOLS_ROOT = up(up(up(os.path.abspath(__file__))))
 sys.path.append(TOOLS_ROOT)
@@ -122,8 +122,8 @@ def setup_build_config(basedir, outdir):
     config = json.load(f)
 
   # Add defaults for all variables used in variant configs.
-  for key in INCOMPATIBLE_FLAGS_PER_BUILD_VARIABLE.keys():
-    config[key.lstrip('!')] = False
+  for key in REQUIRED_BUILD_VARIABLES:
+    config[key] = False
 
   os.makedirs(os.path.dirname(path), exist_ok=True)
   with open(path, 'w') as f:
-- 
2.35.1

