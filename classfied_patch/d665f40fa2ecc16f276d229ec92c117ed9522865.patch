From d665f40fa2ecc16f276d229ec92c117ed9522865 Mon Sep 17 00:00:00 2001
From: Clemens Backes <clemensb@chromium.org>
Date: Fri, 30 Apr 2021 14:01:34 +0200
Subject: [PATCH] [cleanup][execution] Remove redundant NOLINT annotations

cpplint rules change over time, and we change the exact rules we enable
for v8. This CL removes NOLINT annotations which are not needed
according to the currently enabled rules.

R=jkummerow@chromium.org

Bug: v8:11717
Change-Id: I29e8dfca88f871b5d6b4c6422d036157021514da
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/2862762
Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
Commit-Queue: Clemens Backes <clemensb@chromium.org>
Cr-Commit-Position: refs/heads/master@{#74302}
---
 src/execution/arm/simulator-arm.cc         |  2 +-
 src/execution/arm64/simulator-arm64.cc     |  2 +-
 src/execution/frame-constants.h            | 18 +++++++++---------
 src/execution/frames.h                     |  2 --
 src/execution/isolate.cc                   |  5 ++---
 src/execution/isolate.h                    |  3 +--
 src/execution/local-isolate.h              |  3 +--
 src/execution/mips/simulator-mips.cc       |  2 +-
 src/execution/mips64/simulator-mips64.cc   |  2 +-
 src/execution/ppc/simulator-ppc.cc         |  4 ++--
 src/execution/riscv64/simulator-riscv64.cc |  2 +-
 src/execution/s390/simulator-s390.cc       |  4 ++--
 12 files changed, 22 insertions(+), 27 deletions(-)

diff --git a/src/execution/arm/simulator-arm.cc b/src/execution/arm/simulator-arm.cc
index a2ddb856a7..ca7d709fbb 100644
--- a/src/execution/arm/simulator-arm.cc
+++ b/src/execution/arm/simulator-arm.cc
@@ -42,7 +42,7 @@ DEFINE_LAZY_LEAKY_OBJECT_GETTER(Simulator::GlobalMonitor,
 // SScanF not being implemented in a platform independent way through
 // ::v8::internal::OS in the same way as SNPrintF is that the
 // Windows C Run-Time Library does not provide vsscanf.
-#define SScanF sscanf  // NOLINT
+#define SScanF sscanf
 
 // The ArmDebugger class is used by the simulator while debugging simulated ARM
 // code.
diff --git a/src/execution/arm64/simulator-arm64.cc b/src/execution/arm64/simulator-arm64.cc
index 23a03848ad..3853316a80 100644
--- a/src/execution/arm64/simulator-arm64.cc
+++ b/src/execution/arm64/simulator-arm64.cc
@@ -34,7 +34,7 @@ namespace internal {
 // SScanF not being implemented in a platform independent way through
 // ::v8::internal::OS in the same way as SNPrintF is that the
 // Windows C Run-Time Library does not provide vsscanf.
-#define SScanF sscanf  // NOLINT
+#define SScanF sscanf
 
 // Helpers for colors.
 #define COLOUR(colour_code) "\033[0;" colour_code "m"
diff --git a/src/execution/frame-constants.h b/src/execution/frame-constants.h
index 10cdff5c0f..1148a94212 100644
--- a/src/execution/frame-constants.h
+++ b/src/execution/frame-constants.h
@@ -390,23 +390,23 @@ inline static int FrameSlotToFPOffset(int slot) {
 }  // namespace v8
 
 #if V8_TARGET_ARCH_IA32
-#include "src/execution/ia32/frame-constants-ia32.h"  // NOLINT
+#include "src/execution/ia32/frame-constants-ia32.h"
 #elif V8_TARGET_ARCH_X64
-#include "src/execution/x64/frame-constants-x64.h"  // NOLINT
+#include "src/execution/x64/frame-constants-x64.h"
 #elif V8_TARGET_ARCH_ARM64
-#include "src/execution/arm64/frame-constants-arm64.h"  // NOLINT
+#include "src/execution/arm64/frame-constants-arm64.h"
 #elif V8_TARGET_ARCH_ARM
-#include "src/execution/arm/frame-constants-arm.h"  // NOLINT
+#include "src/execution/arm/frame-constants-arm.h"
 #elif V8_TARGET_ARCH_PPC || V8_TARGET_ARCH_PPC64
-#include "src/execution/ppc/frame-constants-ppc.h"  // NOLINT
+#include "src/execution/ppc/frame-constants-ppc.h"
 #elif V8_TARGET_ARCH_MIPS
-#include "src/execution/mips/frame-constants-mips.h"  // NOLINT
+#include "src/execution/mips/frame-constants-mips.h"
 #elif V8_TARGET_ARCH_MIPS64
-#include "src/execution/mips64/frame-constants-mips64.h"  // NOLINT
+#include "src/execution/mips64/frame-constants-mips64.h"
 #elif V8_TARGET_ARCH_S390
-#include "src/execution/s390/frame-constants-s390.h"  // NOLINT
+#include "src/execution/s390/frame-constants-s390.h"
 #elif V8_TARGET_ARCH_RISCV64
-#include "src/execution/riscv64/frame-constants-riscv64.h"  // NOLINT
+#include "src/execution/riscv64/frame-constants-riscv64.h"
 #else
 #error Unsupported target architecture.
 #endif
diff --git a/src/execution/frames.h b/src/execution/frames.h
index 32157b4cc1..a0e9e6a638 100644
--- a/src/execution/frames.h
+++ b/src/execution/frames.h
@@ -138,9 +138,7 @@ class StackFrame {
     INNER_JSENTRY_FRAME = (0 << kSmiTagSize) | kSmiTag,
     OUTERMOST_JSENTRY_FRAME = (1 << kSmiTagSize) | kSmiTag
   };
-  // NOLINTNEXTLINE(runtime/references) (false positive)
   STATIC_ASSERT((INNER_JSENTRY_FRAME & kHeapObjectTagMask) != kHeapObjectTag);
-  // NOLINTNEXTLINE(runtime/references) (false positive)
   STATIC_ASSERT((OUTERMOST_JSENTRY_FRAME & kHeapObjectTagMask) !=
                 kHeapObjectTag);
 
diff --git a/src/execution/isolate.cc b/src/execution/isolate.cc
index 1e054d084f..64efb1ce9c 100644
--- a/src/execution/isolate.cc
+++ b/src/execution/isolate.cc
@@ -7,7 +7,7 @@
 #include <stdlib.h>
 
 #include <atomic>
-#include <fstream>  // NOLINT(readability/streams)
+#include <fstream>
 #include <memory>
 #include <sstream>
 #include <string>
@@ -2709,7 +2709,6 @@ void Isolate::AddSharedWasmMemory(Handle<WasmMemoryObject> memory_object) {
 }
 #endif  // V8_ENABLE_WEBASSEMBLY
 
-// NOLINTNEXTLINE
 Isolate::PerIsolateThreadData::~PerIsolateThreadData() {
 #if defined(USE_SIMULATOR)
   delete simulator_;
@@ -3585,7 +3584,7 @@ bool Isolate::Init(SnapshotData* startup_snapshot_data,
 
   metrics_recorder_ = std::make_shared<metrics::Recorder>();
 
-  {  // NOLINT
+  {
     // Ensure that the thread has a valid stack guard.  The v8::Locker object
     // will ensure this too, but we don't have to use lockers if we are only
     // using one thread.
diff --git a/src/execution/isolate.h b/src/execution/isolate.h
index bfdee773ec..8ec9c4afbc 100644
--- a/src/execution/isolate.h
+++ b/src/execution/isolate.h
@@ -1205,8 +1205,7 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
   v8::internal::Factory* factory() {
     // Upcast to the privately inherited base-class using c-style casts to avoid
     // undefined behavior (as static_cast cannot cast across private bases).
-    // NOLINTNEXTLINE (google-readability-casting)
-    return (v8::internal::Factory*)this;  // NOLINT(readability/casting)
+    return (v8::internal::Factory*)this;
   }
 
   static const int kJSRegexpStaticOffsetsVectorSize = 128;
diff --git a/src/execution/local-isolate.h b/src/execution/local-isolate.h
index fb63a707bd..5392534d66 100644
--- a/src/execution/local-isolate.h
+++ b/src/execution/local-isolate.h
@@ -62,8 +62,7 @@ class V8_EXPORT_PRIVATE LocalIsolate final : private HiddenLocalFactory {
   v8::internal::LocalFactory* factory() {
     // Upcast to the privately inherited base-class using c-style casts to avoid
     // undefined behavior (as static_cast cannot cast across private bases).
-    // NOLINTNEXTLINE (google-readability-casting)
-    return (v8::internal::LocalFactory*)this;  // NOLINT(readability/casting)
+    return (v8::internal::LocalFactory*)this;
   }
 
   bool has_pending_exception() const { return false; }
diff --git a/src/execution/mips/simulator-mips.cc b/src/execution/mips/simulator-mips.cc
index ca402dca04..3c9c252310 100644
--- a/src/execution/mips/simulator-mips.cc
+++ b/src/execution/mips/simulator-mips.cc
@@ -47,7 +47,7 @@ uint32_t get_fcsr_condition_bit(uint32_t cc) {
 // SScanF not being implemented in a platform independent was through
 // ::v8::internal::OS in the same way as SNPrintF is that the Windows C Run-Time
 // Library does not provide vsscanf.
-#define SScanF sscanf  // NOLINT
+#define SScanF sscanf
 
 // The MipsDebugger class is used by the simulator while debugging simulated
 // code.
diff --git a/src/execution/mips64/simulator-mips64.cc b/src/execution/mips64/simulator-mips64.cc
index 198022b3a4..2ab945f88d 100644
--- a/src/execution/mips64/simulator-mips64.cc
+++ b/src/execution/mips64/simulator-mips64.cc
@@ -64,7 +64,7 @@ static int64_t MultiplyHighSigned(int64_t u, int64_t v) {
 // SScanF not being implemented in a platform independent was through
 // ::v8::internal::OS in the same way as SNPrintF is that the Windows C Run-Time
 // Library does not provide vsscanf.
-#define SScanF sscanf  // NOLINT
+#define SScanF sscanf
 
 // The MipsDebugger class is used by the simulator while debugging simulated
 // code.
diff --git a/src/execution/ppc/simulator-ppc.cc b/src/execution/ppc/simulator-ppc.cc
index cc2dd1482e..5d7b8b77d3 100644
--- a/src/execution/ppc/simulator-ppc.cc
+++ b/src/execution/ppc/simulator-ppc.cc
@@ -39,7 +39,7 @@ DEFINE_LAZY_LEAKY_OBJECT_GETTER(Simulator::GlobalMonitor,
 // SScanF not being implemented in a platform independent way through
 // ::v8::internal::OS in the same way as SNPrintF is that the
 // Windows C Run-Time Library does not provide vsscanf.
-#define SScanF sscanf  // NOLINT
+#define SScanF sscanf
 
 // The PPCDebugger class is used by the simulator while debugging simulated
 // PowerPC code.
@@ -4928,7 +4928,7 @@ void Simulator::ExecuteGeneric(Instruction* instr) {
       break;
     }
   }
-}  // NOLINT
+}
 
 void Simulator::Trace(Instruction* instr) {
   disasm::NameConverter converter;
diff --git a/src/execution/riscv64/simulator-riscv64.cc b/src/execution/riscv64/simulator-riscv64.cc
index acdb7c0465..3cf4fe7f8b 100644
--- a/src/execution/riscv64/simulator-riscv64.cc
+++ b/src/execution/riscv64/simulator-riscv64.cc
@@ -93,7 +93,7 @@ static inline int32_t get_ebreak_code(Instruction* instr) {
 // SScanF not being implemented in a platform independent was through
 // ::v8::internal::OS in the same way as SNPrintF is that the Windows C Run-Time
 // Library does not provide vsscanf.
-#define SScanF sscanf  // NOLINT
+#define SScanF sscanf
 
 // The RiscvDebugger class is used by the simulator while debugging simulated
 // code.
diff --git a/src/execution/s390/simulator-s390.cc b/src/execution/s390/simulator-s390.cc
index 4f25ac5634..4aa1c0c727 100644
--- a/src/execution/s390/simulator-s390.cc
+++ b/src/execution/s390/simulator-s390.cc
@@ -34,7 +34,7 @@ namespace internal {
 // SScanF not being implemented in a platform independent way through
 // ::v8::internal::OS in the same way as SNPrintF is that the
 // Windows C Run-Time Library does not provide vsscanf.
-#define SScanF sscanf  // NOLINT
+#define SScanF sscanf
 
 const Simulator::fpr_t Simulator::fp_zero;
 
@@ -1560,7 +1560,7 @@ void Simulator::EvalTableInit() {
   EvalTable[CZXT] = &Simulator::Evaluate_CZXT;
   EvalTable[CDZT] = &Simulator::Evaluate_CDZT;
   EvalTable[CXZT] = &Simulator::Evaluate_CXZT;
-}  // NOLINT
+}
 
 Simulator::Simulator(Isolate* isolate) : isolate_(isolate) {
   static base::OnceType once = V8_ONCE_INIT;
-- 
2.35.1

