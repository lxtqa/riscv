From 0bfae5d1657d078b3596856536a1803944474af4 Mon Sep 17 00:00:00 2001
From: Thibaud Michaud <thibaudm@chromium.org>
Date: Thu, 19 Jan 2023 14:45:16 +0100
Subject: [PATCH] [gap-resolver] Emit move based on destination representation

If the phi moves are the same for all predecessors, the move optimizer
will merge them by picking an arbitrary move among them,
moving it to the phi's block, and eliminating the moves in the
predecessor blocks.
However, phi inputs may have different width, and this can result in a
mismatch between the source and destination representation.
Always emit gap moves based on the destination operand's
representation, to ensure that in this case the wider phi inputs are not
truncated.

R=tebbi@chromium.org
CC=dmercadier@chromium.org

Bug: chromium:1407571
Change-Id: I0263cd5024e8e1340fb971267b133a2a91090f8f
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4178824
Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
Reviewed-by: Tobias Tebbi <tebbi@chromium.org>
Cr-Commit-Position: refs/heads/main@{#85403}
---
 src/compiler/backend/arm/code-generator-arm.cc         | 4 ++--
 src/compiler/backend/arm64/code-generator-arm64.cc     | 4 ++--
 src/compiler/backend/code-generator.h                  | 3 ++-
 src/compiler/backend/gap-resolver.cc                   | 4 ++--
 src/compiler/backend/gap-resolver.h                    | 3 ++-
 src/compiler/backend/ia32/code-generator-ia32.cc       | 4 ++--
 src/compiler/backend/loong64/code-generator-loong64.cc | 4 ++--
 src/compiler/backend/mips64/code-generator-mips64.cc   | 4 ++--
 src/compiler/backend/ppc/code-generator-ppc.cc         | 4 ++--
 src/compiler/backend/riscv/code-generator-riscv.cc     | 4 ++--
 src/compiler/backend/s390/code-generator-s390.cc       | 4 ++--
 src/compiler/backend/x64/code-generator-x64.cc         | 4 ++--
 test/cctest/compiler/test-gap-resolver.cc              | 3 ++-
 13 files changed, 26 insertions(+), 23 deletions(-)

diff --git a/src/compiler/backend/arm/code-generator-arm.cc b/src/compiler/backend/arm/code-generator-arm.cc
index fd4f92fe51..4d7ab00bce 100644
--- a/src/compiler/backend/arm/code-generator-arm.cc
+++ b/src/compiler/backend/arm/code-generator-arm.cc
@@ -4107,9 +4107,9 @@ void CodeGenerator::PopTempStackSlots() {
   }
 }
 
-void CodeGenerator::MoveToTempLocation(InstructionOperand* source) {
+void CodeGenerator::MoveToTempLocation(InstructionOperand* source,
+                                       MachineRepresentation rep) {
   // Must be kept in sync with {MoveTempLocationTo}.
-  auto rep = LocationOperand::cast(source)->representation();
   move_cycle_.temps.emplace(tasm());
   auto& temps = *move_cycle_.temps;
   // Temporarily exclude the reserved scratch registers while we pick a
diff --git a/src/compiler/backend/arm64/code-generator-arm64.cc b/src/compiler/backend/arm64/code-generator-arm64.cc
index ed49faa7ce..52d199ac2b 100644
--- a/src/compiler/backend/arm64/code-generator-arm64.cc
+++ b/src/compiler/backend/arm64/code-generator-arm64.cc
@@ -3456,10 +3456,10 @@ void CodeGenerator::PopTempStackSlots() {
   }
 }
 
-void CodeGenerator::MoveToTempLocation(InstructionOperand* source) {
+void CodeGenerator::MoveToTempLocation(InstructionOperand* source,
+                                       MachineRepresentation rep) {
   // Must be kept in sync with {MoveTempLocationTo}.
   DCHECK(!source->IsImmediate());
-  auto rep = LocationOperand::cast(source)->representation();
   move_cycle_.temps.emplace(tasm());
   auto& temps = *move_cycle_.temps;
   // Temporarily exclude the reserved scratch registers while we pick one to
diff --git a/src/compiler/backend/code-generator.h b/src/compiler/backend/code-generator.h
index 5fcf189406..288d67f4df 100644
--- a/src/compiler/backend/code-generator.h
+++ b/src/compiler/backend/code-generator.h
@@ -378,7 +378,8 @@ class V8_EXPORT_PRIVATE CodeGenerator final : public GapResolver::Assembler {
   AllocatedOperand Push(InstructionOperand* src) final;
   void Pop(InstructionOperand* src, MachineRepresentation rep) final;
   void PopTempStackSlots() final;
-  void MoveToTempLocation(InstructionOperand* src) final;
+  void MoveToTempLocation(InstructionOperand* src,
+                          MachineRepresentation rep) final;
   void MoveTempLocationTo(InstructionOperand* dst,
                           MachineRepresentation rep) final;
   void SetPendingMove(MoveOperands* move) final;
diff --git a/src/compiler/backend/gap-resolver.cc b/src/compiler/backend/gap-resolver.cc
index ea2aa5b78f..e5d479e824 100644
--- a/src/compiler/backend/gap-resolver.cc
+++ b/src/compiler/backend/gap-resolver.cc
@@ -110,11 +110,11 @@ void GapResolver::PerformCycle(const std::vector<MoveOperands*>& cycle) {
   // {SetPendingMove}, which marks the registers needed for the given moves.
   // {MoveToTempLocation} will then choose the location accordingly.
   MachineRepresentation rep =
-      LocationOperand::cast(move1->source()).representation();
+      LocationOperand::cast(move1->destination()).representation();
   for (size_t i = 0; i < cycle.size() - 1; ++i) {
     assembler_->SetPendingMove(cycle[i]);
   }
-  assembler_->MoveToTempLocation(&move1->source());
+  assembler_->MoveToTempLocation(&move1->source(), rep);
   InstructionOperand destination = move1->destination();
   move1->Eliminate();
   for (size_t i = 0; i < cycle.size() - 1; ++i) {
diff --git a/src/compiler/backend/gap-resolver.h b/src/compiler/backend/gap-resolver.h
index 1d3989e090..7c17d0d977 100644
--- a/src/compiler/backend/gap-resolver.h
+++ b/src/compiler/backend/gap-resolver.h
@@ -40,7 +40,8 @@ class GapResolver final {
     virtual AllocatedOperand Push(InstructionOperand* src) = 0;
     virtual void Pop(InstructionOperand* dest, MachineRepresentation rep) = 0;
     virtual void PopTempStackSlots() = 0;
-    virtual void MoveToTempLocation(InstructionOperand* src) = 0;
+    virtual void MoveToTempLocation(InstructionOperand* src,
+                                    MachineRepresentation rep) = 0;
     virtual void MoveTempLocationTo(InstructionOperand* dst,
                                     MachineRepresentation rep) = 0;
     virtual void SetPendingMove(MoveOperands* move) = 0;
diff --git a/src/compiler/backend/ia32/code-generator-ia32.cc b/src/compiler/backend/ia32/code-generator-ia32.cc
index bf3b44fc98..4c9724a3a8 100644
--- a/src/compiler/backend/ia32/code-generator-ia32.cc
+++ b/src/compiler/backend/ia32/code-generator-ia32.cc
@@ -4295,10 +4295,10 @@ void CodeGenerator::PopTempStackSlots() {
   }
 }
 
-void CodeGenerator::MoveToTempLocation(InstructionOperand* source) {
+void CodeGenerator::MoveToTempLocation(InstructionOperand* source,
+                                       MachineRepresentation rep) {
   // Must be kept in sync with {MoveTempLocationTo}.
   DCHECK(!source->IsImmediate());
-  auto rep = LocationOperand::cast(source)->representation();
   if ((IsFloatingPoint(rep) &&
        !move_cycle_.pending_double_scratch_register_use)) {
     // The scratch double register is available.
diff --git a/src/compiler/backend/loong64/code-generator-loong64.cc b/src/compiler/backend/loong64/code-generator-loong64.cc
index c5215bc51b..b047a0cd13 100644
--- a/src/compiler/backend/loong64/code-generator-loong64.cc
+++ b/src/compiler/backend/loong64/code-generator-loong64.cc
@@ -2493,10 +2493,10 @@ void CodeGenerator::PopTempStackSlots() {
   }
 }
 
-void CodeGenerator::MoveToTempLocation(InstructionOperand* source) {
+void CodeGenerator::MoveToTempLocation(InstructionOperand* source,
+                                       MachineRepresentation rep) {
   // Must be kept in sync with {MoveTempLocationTo}.
   DCHECK(!source->IsImmediate());
-  auto rep = LocationOperand::cast(source)->representation();
   move_cycle_.temps.emplace(tasm());
   auto& temps = *move_cycle_.temps;
   // Temporarily exclude the reserved scratch registers while we pick one to
diff --git a/src/compiler/backend/mips64/code-generator-mips64.cc b/src/compiler/backend/mips64/code-generator-mips64.cc
index cad4d6ef45..42caf8a84e 100644
--- a/src/compiler/backend/mips64/code-generator-mips64.cc
+++ b/src/compiler/backend/mips64/code-generator-mips64.cc
@@ -4433,10 +4433,10 @@ void CodeGenerator::PopTempStackSlots() {
   }
 }
 
-void CodeGenerator::MoveToTempLocation(InstructionOperand* source) {
+void CodeGenerator::MoveToTempLocation(InstructionOperand* source,
+                                       MachineRepresentation rep) {
   // Must be kept in sync with {MoveTempLocationTo}.
   DCHECK(!source->IsImmediate());
-  auto rep = LocationOperand::cast(source)->representation();
   move_cycle_.temps.emplace(tasm());
   auto& temps = *move_cycle_.temps;
   // Temporarily exclude the reserved scratch registers while we pick one to
diff --git a/src/compiler/backend/ppc/code-generator-ppc.cc b/src/compiler/backend/ppc/code-generator-ppc.cc
index ccdd3dde6a..ac4d8aa11e 100644
--- a/src/compiler/backend/ppc/code-generator-ppc.cc
+++ b/src/compiler/backend/ppc/code-generator-ppc.cc
@@ -3447,9 +3447,9 @@ void CodeGenerator::PopTempStackSlots() {
   }
 }
 
-void CodeGenerator::MoveToTempLocation(InstructionOperand* source) {
+void CodeGenerator::MoveToTempLocation(InstructionOperand* source,
+                                       MachineRepresentation rep) {
   // Must be kept in sync with {MoveTempLocationTo}.
-  auto rep = LocationOperand::cast(source)->representation();
   if (!IsFloatingPoint(rep) ||
       ((IsFloatingPoint(rep) &&
         !move_cycle_.pending_double_scratch_register_use))) {
diff --git a/src/compiler/backend/riscv/code-generator-riscv.cc b/src/compiler/backend/riscv/code-generator-riscv.cc
index 873588777d..5672db9c7c 100644
--- a/src/compiler/backend/riscv/code-generator-riscv.cc
+++ b/src/compiler/backend/riscv/code-generator-riscv.cc
@@ -4370,10 +4370,10 @@ void CodeGenerator::PrepareForDeoptimizationExits(
   __ CheckTrampolinePoolQuick(total_size);
 }
 
-void CodeGenerator::MoveToTempLocation(InstructionOperand* source) {
+void CodeGenerator::MoveToTempLocation(InstructionOperand* source,
+                                       MachineRepresentation rep) {
   // Must be kept in sync with {MoveTempLocationTo}.
   DCHECK(!source->IsImmediate());
-  auto rep = LocationOperand::cast(source)->representation();
   move_cycle_.temps.emplace(tasm());
   auto& temps = *move_cycle_.temps;
   // Temporarily exclude the reserved scratch registers while we pick one to
diff --git a/src/compiler/backend/s390/code-generator-s390.cc b/src/compiler/backend/s390/code-generator-s390.cc
index 9d4de8a41a..93b240a863 100644
--- a/src/compiler/backend/s390/code-generator-s390.cc
+++ b/src/compiler/backend/s390/code-generator-s390.cc
@@ -3651,9 +3651,9 @@ void CodeGenerator::PopTempStackSlots() {
   }
 }
 
-void CodeGenerator::MoveToTempLocation(InstructionOperand* source) {
+void CodeGenerator::MoveToTempLocation(InstructionOperand* source,
+                                       MachineRepresentation rep) {
   // Must be kept in sync with {MoveTempLocationTo}.
-  auto rep = LocationOperand::cast(source)->representation();
   if (!IsFloatingPoint(rep) ||
       ((IsFloatingPoint(rep) &&
         !move_cycle_.pending_double_scratch_register_use))) {
diff --git a/src/compiler/backend/x64/code-generator-x64.cc b/src/compiler/backend/x64/code-generator-x64.cc
index 2c8130569d..6390e33583 100644
--- a/src/compiler/backend/x64/code-generator-x64.cc
+++ b/src/compiler/backend/x64/code-generator-x64.cc
@@ -5167,10 +5167,10 @@ void CodeGenerator::PopTempStackSlots() {
   }
 }
 
-void CodeGenerator::MoveToTempLocation(InstructionOperand* source) {
+void CodeGenerator::MoveToTempLocation(InstructionOperand* source,
+                                       MachineRepresentation rep) {
   // Must be kept in sync with {MoveTempLocationTo}.
   DCHECK(!source->IsImmediate());
-  auto rep = LocationOperand::cast(source)->representation();
   if ((IsFloatingPoint(rep) &&
        !move_cycle_.pending_double_scratch_register_use) ||
       (!IsFloatingPoint(rep) && !move_cycle_.pending_scratch_register_use)) {
diff --git a/test/cctest/compiler/test-gap-resolver.cc b/test/cctest/compiler/test-gap-resolver.cc
index 34efe3199b..e79ccec7ec 100644
--- a/test/cctest/compiler/test-gap-resolver.cc
+++ b/test/cctest/compiler/test-gap-resolver.cc
@@ -269,7 +269,8 @@ class MoveInterpreter : public GapResolver::Assembler {
     state_.ClearTemps();
   }
 
-  void MoveToTempLocation(InstructionOperand* source) final {
+  void MoveToTempLocation(InstructionOperand* source,
+                          MachineRepresentation rep) final {
     state_.MoveToTempLocation(*source);
   }
   void MoveTempLocationTo(InstructionOperand* dest,
-- 
2.35.1

