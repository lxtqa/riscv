--- ./benchmark/89/test2.cc	2024-03-04 15:35:43
+++ ./benchmark/89/test2_.cc	2024-03-04 15:36:06
@@ -473,10 +473,8 @@ void LiftoffAssembler::ResetOSRTarget() {}
 
 void LiftoffAssembler::ResetOSRTarget() {}
 
-void LiftoffAssembler::FillInstanceInto(Register dst) {
-  Ld(dst, liftoff::GetInstanceOperand());
-}
 
+
 void LiftoffAssembler::LoadTaggedPointer(Register dst, Register src_addr,
                                          Register offset_reg,
                                          int32_t offset_imm,
@@ -1166,6 +1164,8 @@ I32_BINOP(or, or_)
 I32_BINOP(sub, subw)
 I32_BINOP(and, and_)
 I32_BINOP(or, or_)
+
+I32_BINOP_I(i32_and, And)
 I32_BINOP(xor, xor_)
 // clang-format on
 
@@ -1178,10 +1178,14 @@ I32_BINOP(xor, xor_)
   }
 
 // clang-format off
-I32_BINOP_I(add, Add32)
+
+
+I32_SHIFTOP(i32_shl, Lsl)
 I32_BINOP_I(sub, Sub32)
 I32_BINOP_I(and, And)
-I32_BINOP_I(or, Or)
+
+
+I32_BINOP_I(i32_add, Add)
 I32_BINOP_I(xor, Xor)
 // clang-format on
 
@@ -1211,17 +1215,19 @@ bool LiftoffAssembler::emit_i32_popcnt(Register dst, R
     instruction(dst, src, amount & 31);                                 \
   }
 
-I32_SHIFTOP(shl, sllw)
+
+I64_BINOP_I(i64_and, And)
+
 I32_SHIFTOP(sar, sraw)
+
+I64_BINOP(i64_add, Add)
 I32_SHIFTOP(shr, srlw)
 
 I32_SHIFTOP_I(shl, slliw)
+
+FP_UNOP(f64_add, Fadd)
 I32_SHIFTOP_I(sar, sraiw)
-I32_SHIFTOP_I(shr, srliw)
 
-#undef I32_SHIFTOP
-#undef I32_SHIFTOP_I
-
 void LiftoffAssembler::emit_i64_mul(LiftoffRegister dst, LiftoffRegister lhs,
                                     LiftoffRegister rhs) {
   TurboAssembler::Mul64(dst.gp(), lhs.gp(), rhs.gp());
@@ -1276,7 +1282,9 @@ bool LiftoffAssembler::emit_i64_remu(LiftoffRegister d
   }
 
 // clang-format off
-I64_BINOP(add, add)
+
+
+I64_SHIFTOP(i64_shl, Lsl)
 I64_BINOP(sub, sub)
 I64_BINOP(and, and_)
 I64_BINOP(or, or_)
@@ -1292,8 +1300,10 @@ I64_BINOP(xor, xor_)
   }
 
 // clang-format off
-I64_BINOP_I(and, And)
+
 I64_BINOP_I(or, Or)
+
+I32_SHIFTOP_I(f32_add, Fadd)
 I64_BINOP_I(xor, Xor)
 // clang-format on
 
@@ -1311,12 +1321,12 @@ I64_BINOP_I(xor, Xor)
     instruction(dst.gp(), src.gp(), amount);                                   \
   }
 
-I64_SHIFTOP(shl, sll)
+
 I64_SHIFTOP(sar, sra)
 I64_SHIFTOP(shr, srl)
 
 I64_SHIFTOP_I(shl, slli)
-I64_SHIFTOP_I(sar, srai)
+
 I64_SHIFTOP_I(shr, srli)
 
 #undef I64_SHIFTOP
@@ -1386,22 +1396,30 @@ FP_BINOP(f32_mul, fmul_s)
 FP_BINOP(f32_add, fadd_s)
 FP_BINOP(f32_sub, fsub_s)
 FP_BINOP(f32_mul, fmul_s)
-FP_BINOP(f32_div, fdiv_s)
-FP_UNOP(f32_abs, fabs_s)
+
+
 FP_UNOP_RETURN_TRUE(f32_ceil, Ceil_s_s)
 FP_UNOP_RETURN_TRUE(f32_floor, Floor_s_s)
 FP_UNOP_RETURN_TRUE(f32_trunc, Trunc_s_s)
 FP_UNOP_RETURN_TRUE(f32_nearest_int, Round_s_s)
 FP_UNOP(f32_sqrt, fsqrt_s)
 FP_BINOP(f64_add, fadd_d)
-FP_BINOP(f64_sub, fsub_d)
+
+
+FP_BINOP(f64_neg, Fneg)
+
+I64_SHIFTOP_I(f64_ceil, Frintp)
 FP_BINOP(f64_mul, fmul_d)
 FP_BINOP(f64_div, fdiv_d)
 FP_UNOP(f64_abs, fabs_d)
 FP_UNOP_RETURN_TRUE(f64_ceil, Ceil_d_d)
-FP_UNOP_RETURN_TRUE(f64_floor, Floor_d_d)
+
 FP_UNOP_RETURN_TRUE(f64_trunc, Trunc_d_d)
 FP_UNOP_RETURN_TRUE(f64_nearest_int, Round_d_d)
+
+FP_UNOP_RETURN_TRUE(f32_neg, Fneg)
+
+FP_BINOP(f32_ceil, Frintp)
 FP_UNOP(f64_sqrt, fsqrt_d)
 
 #undef FP_BINOP
