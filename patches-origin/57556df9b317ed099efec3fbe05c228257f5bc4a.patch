From 57556df9b317ed099efec3fbe05c228257f5bc4a Mon Sep 17 00:00:00 2001
From: Frank Tang <ftang@chromium.org>
Date: Mon, 31 Jan 2022 23:52:42 -0800
Subject: [PATCH] Fix RISC-V build problem and mark N5X test skip

Fix build breakage of
https://ci.chromium.org/p/v8/builders/ci/V8%20Linux%20-%20riscv64%20-%20sim%20-%20builder/7023
and
Mark some test SKIP on arm64 for
https://ci.chromium.org/p/v8/builders/ci/V8%20Android%20Arm64%20-%20N5X/17069

Bug: v8:10776
Change-Id: Ia24d7b7397bd48599a63b3a674312b09d1f65ee6
Cq-Include-Trybots: luci.v8.try:v8_linux64_riscv64_rel_ng,v8_android_arm64_n5x_rel_ng
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3427297
Reviewed-by: Shu-yu Guo <syg@chromium.org>
Commit-Queue: Frank Tang <ftang@chromium.org>
Cr-Commit-Position: refs/heads/main@{#78894}
---
 src/objects/js-number-format.cc | 46 ++++++++++++++++++---------------
 test/test262/test262.status     |  8 ++++++
 2 files changed, 33 insertions(+), 21 deletions(-)

diff --git a/src/objects/js-number-format.cc b/src/objects/js-number-format.cc
index 2d50d8e25fe..5630891f671 100644
--- a/src/objects/js-number-format.cc
+++ b/src/objects/js-number-format.cc
@@ -102,7 +102,9 @@ enum class SignDisplay {
 // [[RoundingMode]] is one of the String values "ceil", "floor", "expand",
 // "trunc", "halfCeil", "halfFloor", "halfExpand", "halfTrunc", or "halfEven",
 // specifying the rounding strategy for the number.
-enum class RoundingMode {
+// Note: To avoid name conflict with RoundingMode defined in other places,
+// prefix with Intl as IntlRoundingMode
+enum class IntlRoundingMode {
   CEIL,
   FLOOR,
   EXPAND,
@@ -207,25 +209,25 @@ icu::number::Notation ToICUNotation(Notation notation,
 }
 
 UNumberFormatRoundingMode ToUNumberFormatRoundingMode(
-    RoundingMode rounding_mode) {
+    IntlRoundingMode rounding_mode) {
   switch (rounding_mode) {
-    case RoundingMode::CEIL:
+    case IntlRoundingMode::CEIL:
       return UNumberFormatRoundingMode::UNUM_ROUND_CEILING;
-    case RoundingMode::FLOOR:
+    case IntlRoundingMode::FLOOR:
       return UNumberFormatRoundingMode::UNUM_ROUND_FLOOR;
-    case RoundingMode::EXPAND:
+    case IntlRoundingMode::EXPAND:
       return UNumberFormatRoundingMode::UNUM_ROUND_UP;
-    case RoundingMode::TRUNC:
+    case IntlRoundingMode::TRUNC:
       return UNumberFormatRoundingMode::UNUM_ROUND_DOWN;
-    case RoundingMode::HALF_CEIL:
+    case IntlRoundingMode::HALF_CEIL:
       return UNumberFormatRoundingMode::UNUM_ROUND_HALF_CEILING;
-    case RoundingMode::HALF_FLOOR:
+    case IntlRoundingMode::HALF_FLOOR:
       return UNumberFormatRoundingMode::UNUM_ROUND_HALF_FLOOR;
-    case RoundingMode::HALF_EXPAND:
+    case IntlRoundingMode::HALF_EXPAND:
       return UNumberFormatRoundingMode::UNUM_ROUND_HALFUP;
-    case RoundingMode::HALF_TRUNC:
+    case IntlRoundingMode::HALF_TRUNC:
       return UNumberFormatRoundingMode::UNUM_ROUND_HALFDOWN;
-    case RoundingMode::HALF_EVEN:
+    case IntlRoundingMode::HALF_EVEN:
       return UNumberFormatRoundingMode::UNUM_ROUND_HALFEVEN;
   }
 }
@@ -1412,17 +1414,19 @@ MaybeHandle<JSNumberFormat> JSNumberFormat::New(Isolate* isolate,
     // « "ceil", "floor", "expand", "trunc", "halfCeil", "halfFloor",
     // "halfExpand", "halfTrunc", "halfEven" »,
     // "halfExpand").
-    Maybe<RoundingMode> maybe_rounding_mode = GetStringOption<RoundingMode>(
-        isolate, options, "roundingMode", service,
-        {"ceil", "floor", "expand", "trunc", "halfCeil", "halfFloor",
-         "halfExpand", "halfTrunc", "halfEven"},
-        {RoundingMode::CEIL, RoundingMode::FLOOR, RoundingMode::EXPAND,
-         RoundingMode::TRUNC, RoundingMode::HALF_CEIL, RoundingMode::HALF_FLOOR,
-         RoundingMode::HALF_EXPAND, RoundingMode::HALF_TRUNC,
-         RoundingMode::HALF_EVEN},
-        RoundingMode::HALF_EXPAND);
+    Maybe<IntlRoundingMode> maybe_rounding_mode =
+        GetStringOption<IntlRoundingMode>(
+            isolate, options, "roundingMode", service,
+            {"ceil", "floor", "expand", "trunc", "halfCeil", "halfFloor",
+             "halfExpand", "halfTrunc", "halfEven"},
+            {IntlRoundingMode::CEIL, IntlRoundingMode::FLOOR,
+             IntlRoundingMode::EXPAND, IntlRoundingMode::TRUNC,
+             IntlRoundingMode::HALF_CEIL, IntlRoundingMode::HALF_FLOOR,
+             IntlRoundingMode::HALF_EXPAND, IntlRoundingMode::HALF_TRUNC,
+             IntlRoundingMode::HALF_EVEN},
+            IntlRoundingMode::HALF_EXPAND);
     MAYBE_RETURN(maybe_rounding_mode, MaybeHandle<JSNumberFormat>());
-    RoundingMode rounding_mode = maybe_rounding_mode.FromJust();
+    IntlRoundingMode rounding_mode = maybe_rounding_mode.FromJust();
     settings =
         settings.roundingMode(ToUNumberFormatRoundingMode(rounding_mode));
   }
diff --git a/test/test262/test262.status b/test/test262/test262.status
index 5ecaa8c5066..00297065ce8 100644
--- a/test/test262/test262.status
+++ b/test/test262/test262.status
@@ -2799,6 +2799,14 @@
   'language/identifiers/start-unicode-9*': [FAIL],
 }],  # no_i18n == True
 
+['arch == arm64', {
+  # Problem in V8 Android Arm64 - N5X
+  'intl402/NumberFormat/prototype/format/format-rounding-increment-1000': [SKIP],
+  'intl402/NumberFormat/prototype/format/format-rounding-increment-2000': [SKIP],
+  'intl402/NumberFormat/prototype/format/format-rounding-increment-2500': [SKIP],
+  'intl402/NumberFormat/prototype/format/format-rounding-increment-5000': [SKIP],
+}],  # 'arch == arm64'
+
 ['arch == arm or arch == mipsel or arch == mips or arch == arm64 or arch == mips64 or arch == mips64el', {
 
   # Causes stack overflow on simulators due to eager compilation of
-- 
2.35.1

