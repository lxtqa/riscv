From bac017fdc9183cd338424dbe98111c2267504f06 Mon Sep 17 00:00:00 2001
From: Lu Yahan <yahan@iscas.ac.cn>
Date: Fri, 18 Aug 2023 15:57:02 +0800
Subject: [PATCH] [riscv] Fix errors about redefine in SSA

Change-Id: I10e16944c657eac0b3ee95483a6edf630f193735
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4792106
Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#89555}
---
 .../backend/riscv/code-generator-riscv.cc     |  4 ++++
 .../backend/riscv/instruction-codes-riscv.h   |  1 -
 .../riscv/instruction-scheduler-riscv.cc      |  1 -
 .../riscv/instruction-selector-riscv.h        | 24 ++++++++++++++-----
 4 files changed, 22 insertions(+), 8 deletions(-)

diff --git a/src/compiler/backend/riscv/code-generator-riscv.cc b/src/compiler/backend/riscv/code-generator-riscv.cc
index 9845e3734e4..bf8702e8a61 100644
--- a/src/compiler/backend/riscv/code-generator-riscv.cc
+++ b/src/compiler/backend/riscv/code-generator-riscv.cc
@@ -3279,6 +3279,10 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
     }
     case kRiscvVmslt: {
       __ VU.set(kScratchReg, i.InputInt8(2), i.InputInt8(3));
+      if (i.InputInt8(4)) {
+        DCHECK(i.OutputSimd128Register() != i.InputSimd128Register(0));
+        __ vmv_vx(i.OutputSimd128Register(), zero_reg);
+      }
       if (instr->InputAt(1)->IsRegister()) {
         __ vmslt_vx(i.OutputSimd128Register(), i.InputSimd128Register(0),
                     i.InputRegister(1));
diff --git a/src/compiler/backend/riscv/instruction-codes-riscv.h b/src/compiler/backend/riscv/instruction-codes-riscv.h
index d70840e0678..0cd555a44d5 100644
--- a/src/compiler/backend/riscv/instruction-codes-riscv.h
+++ b/src/compiler/backend/riscv/instruction-codes-riscv.h
@@ -321,7 +321,6 @@ namespace compiler {
   V(RiscvI32x4UConvertI16x8Low)           \
   V(RiscvI32x4UConvertI16x8High)          \
   V(RiscvI16x8SConvertI8x16Low)           \
-  V(RiscvI16x8SConvertI8x16High)          \
   V(RiscvVmv)                             \
   V(RiscvVandVv)                          \
   V(RiscvVnotVv)                          \
diff --git a/src/compiler/backend/riscv/instruction-scheduler-riscv.cc b/src/compiler/backend/riscv/instruction-scheduler-riscv.cc
index 7a091f57f2a..e72096db824 100644
--- a/src/compiler/backend/riscv/instruction-scheduler-riscv.cc
+++ b/src/compiler/backend/riscv/instruction-scheduler-riscv.cc
@@ -159,7 +159,6 @@ int InstructionScheduler::GetTargetInstructionFlags(
     case kRiscvI16x8ExtractLaneU:
     case kRiscvI16x8ExtractLaneS:
     case kRiscvI16x8ReplaceLane:
-    case kRiscvI16x8SConvertI8x16High:
     case kRiscvI16x8SConvertI8x16Low:
     case kRiscvI16x8Shl:
     case kRiscvI16x8ShrS:
diff --git a/src/compiler/backend/riscv/instruction-selector-riscv.h b/src/compiler/backend/riscv/instruction-selector-riscv.h
index f1fe1fc61ac..43f2c045b1b 100644
--- a/src/compiler/backend/riscv/instruction-selector-riscv.h
+++ b/src/compiler/backend/riscv/instruction-selector-riscv.h
@@ -1130,7 +1130,6 @@ void InstructionSelectorT<Adapter>::VisitI16x8ExtAddPairwiseI8x16U(Node* node) {
   V(I32x4TruncSatF64x2SZero, kRiscvI32x4TruncSatF64x2SZero)     \
   V(I32x4TruncSatF64x2UZero, kRiscvI32x4TruncSatF64x2UZero)     \
   V(I16x8SConvertI8x16Low, kRiscvI16x8SConvertI8x16Low)         \
-  V(I16x8SConvertI8x16High, kRiscvI16x8SConvertI8x16High)       \
   V(I8x16Popcnt, kRiscvI8x16Popcnt)                             \
   V(S128Not, kRiscvVnot)                                        \
   V(V128AnyTrue, kRiscvV128AnyTrue)
@@ -1347,6 +1346,16 @@ VISIT_SIMD_QFMOP(F32x4Qfma, kRiscvF32x4Qfma)
 VISIT_SIMD_QFMOP(F32x4Qfms, kRiscvF32x4Qfms)
 #undef VISIT_SIMD_QFMOP
 
+template <typename Adapter>
+void InstructionSelectorT<Adapter>::VisitI16x8SConvertI8x16High(Node* node) {
+  RiscvOperandGeneratorT<Adapter> g(this);
+  InstructionOperand temp1 = g.TempFpRegister(v0);
+  Emit(kRiscvVslidedown, temp1, g.UseRegister(node->InputAt(0)),
+       g.UseImmediate(8), g.UseImmediate(E8), g.UseImmediate(m1));
+  Emit(kRiscvVsextVf2, g.DefineAsRegister(node), temp1, g.UseImmediate(E16),
+       g.UseImmediate(m1));
+}
+
 template <typename Adapter>
 void InstructionSelectorT<Adapter>::VisitF32x4Min(Node* node) {
   RiscvOperandGeneratorT<Adapter> g(this);
@@ -1552,13 +1561,14 @@ void InstructionSelectorT<Adapter>::VisitI16x8UConvertI32x4(Node* node) {
   RiscvOperandGeneratorT<Adapter> g(this);
   InstructionOperand temp = g.TempFpRegister(v26);
   InstructionOperand temp2 = g.TempFpRegister(v27);
+  InstructionOperand temp3 = g.TempFpRegister(v26);
   this->Emit(kRiscvVmv, temp, g.UseRegister(node->InputAt(0)),
              g.UseImmediate(E32), g.UseImmediate(m1));
   this->Emit(kRiscvVmv, temp2, g.UseRegister(node->InputAt(1)),
              g.UseImmediate(E32), g.UseImmediate(m1));
-  this->Emit(kRiscvVmax, temp, temp, g.UseImmediate(0), g.UseImmediate(E32),
+  this->Emit(kRiscvVmax, temp3, temp, g.UseImmediate(0), g.UseImmediate(E32),
              g.UseImmediate(m2));
-  this->Emit(kRiscvVnclipu, g.DefineAsRegister(node), temp, g.UseImmediate(0),
+  this->Emit(kRiscvVnclipu, g.DefineAsRegister(node), temp3, g.UseImmediate(0),
              g.UseImmediate(E16), g.UseImmediate(m1),
              g.UseImmediate(FPURoundingMode::RNE));
 }
@@ -1577,7 +1587,8 @@ void InstructionSelectorT<Adapter>::VisitI8x16RoundingAverageU(Node* node) {
   this->Emit(kRiscvVdivu, temp3, temp2, g.UseImmediate(2), g.UseImmediate(E16),
              g.UseImmediate(m2));
   this->Emit(kRiscvVnclipu, g.DefineAsRegister(node), temp3, g.UseImmediate(0),
-             g.UseImmediate(E8), g.UseImmediate(m1));
+             g.UseImmediate(E8), g.UseImmediate(m1),
+             g.UseImmediate(FPURoundingMode::RNE));
 }
 
 template <typename Adapter>
@@ -1599,13 +1610,14 @@ void InstructionSelectorT<Adapter>::VisitI8x16UConvertI16x8(Node* node) {
   RiscvOperandGeneratorT<Adapter> g(this);
   InstructionOperand temp = g.TempFpRegister(v26);
   InstructionOperand temp2 = g.TempFpRegister(v27);
+  InstructionOperand temp3 = g.TempFpRegister(v26);
   this->Emit(kRiscvVmv, temp, g.UseRegister(node->InputAt(0)),
              g.UseImmediate(E16), g.UseImmediate(m1));
   this->Emit(kRiscvVmv, temp2, g.UseRegister(node->InputAt(1)),
              g.UseImmediate(E16), g.UseImmediate(m1));
-  this->Emit(kRiscvVmax, temp, temp, g.UseImmediate(0), g.UseImmediate(E16),
+  this->Emit(kRiscvVmax, temp3, temp, g.UseImmediate(0), g.UseImmediate(E16),
              g.UseImmediate(m2));
-  this->Emit(kRiscvVnclipu, g.DefineAsRegister(node), temp, g.UseImmediate(0),
+  this->Emit(kRiscvVnclipu, g.DefineAsRegister(node), temp3, g.UseImmediate(0),
              g.UseImmediate(E8), g.UseImmediate(m1),
              g.UseImmediate(FPURoundingMode::RNE));
 }
-- 
2.35.1

