From ee6c6a2f1c16f6db69cfbbf38dcdaeafeff7afca Mon Sep 17 00:00:00 2001
From: QiuJi <qiuji@iscas.ac.cn>
Date: Thu, 26 May 2022 09:31:06 +0800
Subject: [PATCH] [riscv64] Using SystemPointerSize to index address for
 PrologueFillFrame

Also remove useless comment in test-assembler-riscv64

Change-Id: I28451386449f15542b02383d8bf1aa9c4539469c
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3669660
Auto-Submit: ji qiu <qiuji@iscas.ac.cn>
Reviewed-by: Yahan Lu <yahan@iscas.ac.cn>
Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#80768}
---
 src/baseline/riscv64/baseline-compiler-riscv64-inl.h | 9 ++++++---
 test/cctest/test-assembler-riscv64.cc                | 1 -
 2 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/baseline/riscv64/baseline-compiler-riscv64-inl.h b/src/baseline/riscv64/baseline-compiler-riscv64-inl.h
index 1fbdaa0761..16e178b106 100644
--- a/src/baseline/riscv64/baseline-compiler-riscv64-inl.h
+++ b/src/baseline/riscv64/baseline-compiler-riscv64-inl.h
@@ -41,7 +41,8 @@ void BaselineCompiler::PrologueFillFrame() {
     DCHECK_LE(new_target_index, register_count);
     __ masm()->Add64(sp, sp, Operand(-(kPointerSize * new_target_index)));
     for (int i = 0; i < new_target_index; i++) {
-      __ masm()->Sd(kInterpreterAccumulatorRegister, MemOperand(sp, i * 8));
+      __ masm()->Sd(kInterpreterAccumulatorRegister,
+                    MemOperand(sp, i * kSystemPointerSize));
     }
     // Push new_target_or_generator.
     __ Push(kJavaScriptCallNewTargetRegister);
@@ -51,12 +52,14 @@ void BaselineCompiler::PrologueFillFrame() {
     // If the frame is small enough, just unroll the frame fill completely.
     __ masm()->Add64(sp, sp, Operand(-(kPointerSize * register_count)));
     for (int i = 0; i < register_count; ++i) {
-      __ masm()->Sd(kInterpreterAccumulatorRegister, MemOperand(sp, i * 8));
+      __ masm()->Sd(kInterpreterAccumulatorRegister,
+                    MemOperand(sp, i * kSystemPointerSize));
     }
   } else {
     __ masm()->Add64(sp, sp, Operand(-(kPointerSize * register_count)));
     for (int i = 0; i < register_count; ++i) {
-      __ masm()->Sd(kInterpreterAccumulatorRegister, MemOperand(sp, i * 8));
+      __ masm()->Sd(kInterpreterAccumulatorRegister,
+                    MemOperand(sp, i * kSystemPointerSize));
     }
   }
 }
diff --git a/test/cctest/test-assembler-riscv64.cc b/test/cctest/test-assembler-riscv64.cc
index d9288bc825..dd35958b93 100644
--- a/test/cctest/test-assembler-riscv64.cc
+++ b/test/cctest/test-assembler-riscv64.cc
@@ -1962,7 +1962,6 @@ TEST(li_estimate) {
       -256,      -255,          0,         255,        8192,      0x7FFFFFFF,
       INT32_MIN, INT32_MAX / 2, INT32_MAX, UINT32_MAX, INT64_MAX, INT64_MAX / 2,
       INT64_MIN};
-  // Test jump tables with backward jumps and embedded heap objects.
   CcTest::InitializeVM();
   Isolate* isolate = CcTest::i_isolate();
   HandleScope scope(isolate);
-- 
2.35.1

