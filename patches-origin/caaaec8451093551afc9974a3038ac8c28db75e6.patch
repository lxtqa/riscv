From caaaec8451093551afc9974a3038ac8c28db75e6 Mon Sep 17 00:00:00 2001
From: Thibaud Michaud <thibaudm@chromium.org>
Date: Thu, 27 Oct 2022 14:29:38 +0200
Subject: [PATCH] [wasm-relaxed-simd] Fix Liftoff FMA dst register

R=clemensb@chromium.org

Change-Id: Ib65dc59d3c68fd563953a1ee8ec50d9c54310747
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3985845
Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
Reviewed-by: Andreas Haas <ahaas@chromium.org>
Cr-Commit-Position: refs/heads/main@{#83957}
---
 src/wasm/baseline/liftoff-compiler.cc         |  2 +-
 test/cctest/cctest.status                     |  1 +
 .../cctest/wasm/test-run-wasm-relaxed-simd.cc | 30 +++++++++++++++++++
 3 files changed, 32 insertions(+), 1 deletion(-)

diff --git a/src/wasm/baseline/liftoff-compiler.cc b/src/wasm/baseline/liftoff-compiler.cc
index 485837efa2e..67147175d24 100644
--- a/src/wasm/baseline/liftoff-compiler.cc
+++ b/src/wasm/baseline/liftoff-compiler.cc
@@ -3714,7 +3714,7 @@ class LiftoffCompiler {
     RegClass dst_rc = reg_class_for(kS128);
     LiftoffRegister dst = __ GetUnusedRegister(dst_rc, {});
     (asm_.*emit_fn)(dst, src1, src2, src3);
-    __ PushRegister(kS128, src1);
+    __ PushRegister(kS128, dst);
     return;
   }
 
diff --git a/test/cctest/cctest.status b/test/cctest/cctest.status
index 0508e83a926..15556d36c28 100644
--- a/test/cctest/cctest.status
+++ b/test/cctest/cctest.status
@@ -1095,6 +1095,7 @@
   'test-run-wasm-relaxed-simd/RunWasm_F32x4Qfms_liftoff': [SKIP],
   'test-run-wasm-relaxed-simd/RunWasm_F64x2Qfma_liftoff': [SKIP],
   'test-run-wasm-relaxed-simd/RunWasm_F64x2Qfms_liftoff': [SKIP],
+  'test-run-wasm-relaxed-simd/RunWasm_RegressFmaReg_liftoff': [SKIP],
 }],
 
 ]
diff --git a/test/cctest/wasm/test-run-wasm-relaxed-simd.cc b/test/cctest/wasm/test-run-wasm-relaxed-simd.cc
index 0493fad74a9..41f4fa4cf08 100644
--- a/test/cctest/wasm/test-run-wasm-relaxed-simd.cc
+++ b/test/cctest/wasm/test-run-wasm-relaxed-simd.cc
@@ -226,6 +226,36 @@ WASM_RELAXED_SIMD_TEST(F64x2Qfms) {
     }
   }
 }
+
+TEST(RunWasm_RegressFmaReg_liftoff) {
+  EXPERIMENTAL_FLAG_SCOPE(relaxed_simd);
+  FLAG_SCOPE(liftoff_only);
+  TestExecutionTier execution_tier = TestExecutionTier::kLiftoff;
+  WasmRunner<int32_t, float, float, float> r(execution_tier);
+  byte local = r.AllocateLocal(kWasmS128);
+  float* g = r.builder().AddGlobal<float>(kWasmS128);
+  byte value1 = 0, value2 = 1, value3 = 2;
+  BUILD(r,
+        // Get the first arg from a local so that the register is blocked even
+        // after the arguments have been popped off the stack. This ensures that
+        // the first source register is not also the destination.
+        WASM_LOCAL_SET(local, WASM_SIMD_F32x4_SPLAT(WASM_LOCAL_GET(value1))),
+        WASM_GLOBAL_SET(0, WASM_SIMD_F32x4_QFMA(
+                               WASM_LOCAL_GET(local),
+                               WASM_SIMD_F32x4_SPLAT(WASM_LOCAL_GET(value2)),
+                               WASM_SIMD_F32x4_SPLAT(WASM_LOCAL_GET(value3)))),
+        WASM_ONE);
+
+  for (FMOperation<float> x : qfma_vector<float>()) {
+    r.Call(x.a, x.b, x.c);
+    float expected =
+        ExpectFused(execution_tier) ? x.fused_result : x.unfused_result;
+    for (int i = 0; i < 4; i++) {
+      float actual = LANE(g, i);
+      CheckFloatResult(x.a, x.b, expected, actual, true /* exact */);
+    }
+  }
+}
 #endif  // V8_TARGET_ARCH_X64 || V8_TARGET_ARCH_ARM64 || V8_TARGET_ARCH_S390X ||
         // V8_TARGET_ARCH_PPC64 || V8_TARGET_ARCH_IA32 || V8_TARGET_ARCH_RISCV64
 
-- 
2.35.1

