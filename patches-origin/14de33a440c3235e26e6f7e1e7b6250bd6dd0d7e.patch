From 14de33a440c3235e26e6f7e1e7b6250bd6dd0d7e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hu=C3=A1ng=20J=C3=B9nli=C3=A0ng?= <jlhwung@gmail.com>
Date: Fri, 13 Jan 2023 12:33:28 -0500
Subject: [PATCH] [class] set function name for computed fields

- Introduce a new SetFunctionName runtime
- Call SetFunctionName in DefineKeyedOwnIC to handle function name for initializers of computed class fields
- Ensure that we don't set function name twice in the case '({ ['c']: class { static x = this.name; static name = 'd' } })', which would incorrectly reconfigure the defined own property `name`

Bug: v8:13451
Change-Id: I10dcb858a65c6e59cba6bae94b8e63a78e44778b
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4035497
Reviewed-by: Maya Lekova <mslekova@chromium.org>
Reviewed-by: Shu-yu Guo <syg@chromium.org>
Reviewed-by: Leszek Swirski <leszeks@chromium.org>
Commit-Queue: Shu-yu Guo <syg@chromium.org>
Cr-Commit-Position: refs/heads/main@{#85444}
---
 src/baseline/baseline-compiler.cc             |  3 +-
 src/builtins/builtins-definitions.h           |  6 +-
 .../arm/interface-descriptors-arm-inl.h       |  3 +
 .../arm64/interface-descriptors-arm64-inl.h   |  3 +
 .../ia32/interface-descriptors-ia32-inl.h     |  3 +
 src/codegen/interface-descriptors-inl.h       | 23 +++++
 src/codegen/interface-descriptors.h           | 51 ++++++++++
 .../interface-descriptors-loong64-inl.h       |  3 +
 .../mips64/interface-descriptors-mips64-inl.h |  3 +
 .../ppc/interface-descriptors-ppc-inl.h       |  3 +
 .../riscv/interface-descriptors-riscv-inl.h   |  3 +
 .../s390/interface-descriptors-s390-inl.h     |  3 +
 .../x64/interface-descriptors-x64-inl.h       |  3 +
 src/common/globals.h                          |  7 ++
 src/compiler/bytecode-graph-builder.cc        |  9 +-
 src/compiler/js-generic-lowering.cc           |  6 +-
 src/compiler/js-operator.cc                   |  2 +-
 src/compiler/js-operator.h                    |  3 +-
 src/ic/accessor-assembler.cc                  | 52 ++++++++---
 src/ic/accessor-assembler.h                   |  8 +-
 src/ic/keyed-store-generic.cc                 |  9 +-
 src/interpreter/bytecode-array-builder.cc     |  5 +-
 src/interpreter/bytecode-array-builder.h      |  5 +-
 src/interpreter/bytecode-generator.cc         | 92 ++++++++++---------
 src/interpreter/bytecodes.h                   |  3 +-
 src/interpreter/interpreter-generator.cc      | 11 ++-
 src/maglev/maglev-graph-builder.cc            |  7 +-
 src/maglev/maglev-ir.cc                       |  6 +-
 src/maglev/maglev-ir.h                        |  9 +-
 src/runtime/runtime-object.cc                 | 32 ++++++-
 src/runtime/runtime.h                         |  1 +
 .../harmony/public-instance-class-fields.js   | 10 ++
 .../harmony/public-static-class-fields.js     | 40 ++++++++
 .../bytecode-array-builder-unittest.cc        |  3 +-
 .../ObjectLiterals.golden                     |  4 +-
 .../PrivateAccessorAccess.golden              | 20 ++--
 .../PrivateClassFields.golden                 |  9 +-
 .../PrivateMethodAccess.golden                | 16 ++--
 .../PublicClassFields.golden                  |  9 +-
 .../StaticClassFields.golden                  | 33 +++----
 40 files changed, 373 insertions(+), 148 deletions(-)

diff --git a/src/baseline/baseline-compiler.cc b/src/baseline/baseline-compiler.cc
index 25123cb7cd..c38905f947 100644
--- a/src/baseline/baseline-compiler.cc
+++ b/src/baseline/baseline-compiler.cc
@@ -942,7 +942,8 @@ void BaselineCompiler::VisitDefineKeyedOwnProperty() {
       RegisterOperand(0),               // object
       RegisterOperand(1),               // key
       kInterpreterAccumulatorRegister,  // value
-      IndexAsTagged(2));                // slot
+      Flag8AsSmi(2),                    // flags
+      IndexAsTagged(3));                // slot
 }
 
 void BaselineCompiler::VisitStaInArrayLiteral() {
diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h
index 8c432526f4..0ca201fc61 100644
--- a/src/builtins/builtins-definitions.h
+++ b/src/builtins/builtins-definitions.h
@@ -656,9 +656,9 @@ namespace internal {
   TFH(KeyedStoreIC, StoreWithVector)                                           \
   TFH(KeyedStoreICTrampoline, Store)                                           \
   TFH(KeyedStoreICBaseline, StoreBaseline)                                     \
-  TFH(DefineKeyedOwnIC, StoreWithVector)                                       \
-  TFH(DefineKeyedOwnICTrampoline, Store)                                       \
-  TFH(DefineKeyedOwnICBaseline, StoreBaseline)                                 \
+  TFH(DefineKeyedOwnIC, DefineKeyedOwnWithVector)                              \
+  TFH(DefineKeyedOwnICTrampoline, DefineKeyedOwn)                              \
+  TFH(DefineKeyedOwnICBaseline, DefineKeyedOwnBaseline)                        \
   TFH(StoreInArrayLiteralIC, StoreWithVector)                                  \
   TFH(StoreInArrayLiteralICBaseline, StoreBaseline)                            \
   TFH(LookupContextTrampoline, LookupTrampoline)                               \
diff --git a/src/codegen/arm/interface-descriptors-arm-inl.h b/src/codegen/arm/interface-descriptors-arm-inl.h
index 23d4b31bc0..f1affc1bee 100644
--- a/src/codegen/arm/interface-descriptors-arm-inl.h
+++ b/src/codegen/arm/interface-descriptors-arm-inl.h
@@ -99,6 +99,9 @@ constexpr Register StoreDescriptor::SlotRegister() { return r4; }
 // static
 constexpr Register StoreWithVectorDescriptor::VectorRegister() { return r3; }
 
+// static
+constexpr Register DefineKeyedOwnDescriptor::FlagsRegister() { return r5; }
+
 // static
 constexpr Register StoreTransitionDescriptor::MapRegister() { return r5; }
 
diff --git a/src/codegen/arm64/interface-descriptors-arm64-inl.h b/src/codegen/arm64/interface-descriptors-arm64-inl.h
index 3b1801e031..78027177da 100644
--- a/src/codegen/arm64/interface-descriptors-arm64-inl.h
+++ b/src/codegen/arm64/interface-descriptors-arm64-inl.h
@@ -100,6 +100,9 @@ constexpr Register StoreDescriptor::SlotRegister() { return x4; }
 // static
 constexpr Register StoreWithVectorDescriptor::VectorRegister() { return x3; }
 
+// static
+constexpr Register DefineKeyedOwnDescriptor::FlagsRegister() { return x5; }
+
 // static
 constexpr Register StoreTransitionDescriptor::MapRegister() { return x5; }
 
diff --git a/src/codegen/ia32/interface-descriptors-ia32-inl.h b/src/codegen/ia32/interface-descriptors-ia32-inl.h
index 9902cc1e2b..d3f6101f4e 100644
--- a/src/codegen/ia32/interface-descriptors-ia32-inl.h
+++ b/src/codegen/ia32/interface-descriptors-ia32-inl.h
@@ -95,6 +95,9 @@ constexpr Register StoreWithVectorDescriptor::VectorRegister() {
   return no_reg;
 }
 
+// static
+constexpr Register DefineKeyedOwnDescriptor::FlagsRegister() { return no_reg; }
+
 // static
 constexpr Register StoreTransitionDescriptor::MapRegister() { return edi; }
 
diff --git a/src/codegen/interface-descriptors-inl.h b/src/codegen/interface-descriptors-inl.h
index 543a577f2a..045986da55 100644
--- a/src/codegen/interface-descriptors-inl.h
+++ b/src/codegen/interface-descriptors-inl.h
@@ -328,6 +328,20 @@ constexpr auto StoreGlobalBaselineDescriptor::registers() {
   return StoreGlobalDescriptor::registers();
 }
 
+// static
+constexpr auto DefineKeyedOwnDescriptor::registers() {
+  return RegisterArray(StoreDescriptor::ReceiverRegister(),
+                       StoreDescriptor::NameRegister(),
+                       StoreDescriptor::ValueRegister(),
+                       DefineKeyedOwnDescriptor::FlagsRegister(),
+                       StoreDescriptor::SlotRegister());
+}
+
+// static
+constexpr auto DefineKeyedOwnBaselineDescriptor::registers() {
+  return DefineKeyedOwnDescriptor::registers();
+}
+
 // static
 constexpr auto LoadWithReceiverBaselineDescriptor::registers() {
   return RegisterArray(
@@ -526,6 +540,15 @@ constexpr auto StoreWithVectorDescriptor::registers() {
                        StoreDescriptor::SlotRegister(), VectorRegister());
 }
 
+// static
+constexpr auto DefineKeyedOwnWithVectorDescriptor::registers() {
+  return RegisterArray(StoreDescriptor::ReceiverRegister(),
+                       StoreDescriptor::NameRegister(),
+                       StoreDescriptor::ValueRegister(),
+                       DefineKeyedOwnDescriptor::FlagsRegister(),
+                       StoreDescriptor::SlotRegister());
+}
+
 // static
 constexpr auto ApiGetterDescriptor::registers() {
   return RegisterArray(ReceiverRegister(), HolderRegister(),
diff --git a/src/codegen/interface-descriptors.h b/src/codegen/interface-descriptors.h
index 2bf80f89fe..10c8955b1a 100644
--- a/src/codegen/interface-descriptors.h
+++ b/src/codegen/interface-descriptors.h
@@ -73,6 +73,9 @@ namespace internal {
   V(CopyDataPropertiesWithExcludedPropertiesOnStack) \
   V(CppBuiltinAdaptor)                               \
   V(DataViewGetVariableLength)                       \
+  V(DefineKeyedOwn)                                  \
+  V(DefineKeyedOwnBaseline)                          \
+  V(DefineKeyedOwnWithVector)                        \
   V(FastNewObject)                                   \
   V(FindNonDefaultConstructorOrConstruct)            \
   V(ForInPrepare)                                    \
@@ -967,6 +970,54 @@ class StoreGlobalWithVectorDescriptor
   static constexpr auto registers();
 };
 
+class DefineKeyedOwnDescriptor
+    : public StaticCallInterfaceDescriptor<DefineKeyedOwnDescriptor> {
+ public:
+  DEFINE_PARAMETERS(kReceiver, kName, kValue, kFlags, kSlot)
+  DEFINE_PARAMETER_TYPES(MachineType::AnyTagged(),     // kReceiver
+                         MachineType::AnyTagged(),     // kName
+                         MachineType::AnyTagged(),     // kValue
+                         MachineType::TaggedSigned(),  // kFlags
+                         MachineType::TaggedSigned())  // kSlot
+  DECLARE_DESCRIPTOR(DefineKeyedOwnDescriptor)
+
+  static constexpr inline Register FlagsRegister();
+
+  static constexpr auto registers();
+};
+
+class DefineKeyedOwnBaselineDescriptor
+    : public StaticCallInterfaceDescriptor<DefineKeyedOwnBaselineDescriptor> {
+ public:
+  DEFINE_PARAMETERS_NO_CONTEXT(kReceiver, kName, kValue, kFlags, kSlot)
+  DEFINE_PARAMETER_TYPES(MachineType::AnyTagged(),     // kReceiver
+                         MachineType::AnyTagged(),     // kName
+                         MachineType::AnyTagged(),     // kValue
+                         MachineType::TaggedSigned(),  // kFlags
+                         MachineType::TaggedSigned())  // kSlot
+  DECLARE_DESCRIPTOR(DefineKeyedOwnBaselineDescriptor)
+
+  static constexpr auto registers();
+};
+
+class DefineKeyedOwnWithVectorDescriptor
+    : public StaticCallInterfaceDescriptor<DefineKeyedOwnWithVectorDescriptor> {
+ public:
+  DEFINE_PARAMETERS(kReceiver, kName, kValue, kFlags,
+                    kSlot,   // register argument
+                    kVector  // stack argument
+  )
+  DEFINE_PARAMETER_TYPES(MachineType::AnyTagged(),     // kReceiver
+                         MachineType::AnyTagged(),     // kName
+                         MachineType::AnyTagged(),     // kValue
+                         MachineType::TaggedSigned(),  // kFlags
+                         MachineType::TaggedSigned(),  // kSlot
+                         MachineType::AnyTagged())     // kVector
+  DECLARE_DESCRIPTOR(DefineKeyedOwnWithVectorDescriptor)
+
+  static constexpr auto registers();
+};
+
 class LoadWithVectorDescriptor
     : public StaticCallInterfaceDescriptor<LoadWithVectorDescriptor> {
  public:
diff --git a/src/codegen/loong64/interface-descriptors-loong64-inl.h b/src/codegen/loong64/interface-descriptors-loong64-inl.h
index a260c78190..b039a5b3de 100644
--- a/src/codegen/loong64/interface-descriptors-loong64-inl.h
+++ b/src/codegen/loong64/interface-descriptors-loong64-inl.h
@@ -99,6 +99,9 @@ constexpr Register StoreDescriptor::SlotRegister() { return a4; }
 // static
 constexpr Register StoreWithVectorDescriptor::VectorRegister() { return a3; }
 
+// static
+constexpr Register DefineKeyedOwnDescriptor::FlagsRegister() { return a5; }
+
 // static
 constexpr Register StoreTransitionDescriptor::MapRegister() { return a5; }
 
diff --git a/src/codegen/mips64/interface-descriptors-mips64-inl.h b/src/codegen/mips64/interface-descriptors-mips64-inl.h
index 3c0e0dc27f..2965a5bc13 100644
--- a/src/codegen/mips64/interface-descriptors-mips64-inl.h
+++ b/src/codegen/mips64/interface-descriptors-mips64-inl.h
@@ -99,6 +99,9 @@ constexpr Register StoreDescriptor::SlotRegister() { return a4; }
 // static
 constexpr Register StoreWithVectorDescriptor::VectorRegister() { return a3; }
 
+// static
+constexpr Register DefineKeyedOwnDescriptor::FlagsRegister() { return a5; }
+
 // static
 constexpr Register StoreTransitionDescriptor::MapRegister() { return a5; }
 
diff --git a/src/codegen/ppc/interface-descriptors-ppc-inl.h b/src/codegen/ppc/interface-descriptors-ppc-inl.h
index b7b1ea515a..a60716648c 100644
--- a/src/codegen/ppc/interface-descriptors-ppc-inl.h
+++ b/src/codegen/ppc/interface-descriptors-ppc-inl.h
@@ -99,6 +99,9 @@ constexpr Register StoreDescriptor::SlotRegister() { return r7; }
 // static
 constexpr Register StoreWithVectorDescriptor::VectorRegister() { return r6; }
 
+// static
+constexpr Register DefineKeyedOwnDescriptor::FlagsRegister() { return r8; }
+
 // static
 constexpr Register StoreTransitionDescriptor::MapRegister() { return r8; }
 
diff --git a/src/codegen/riscv/interface-descriptors-riscv-inl.h b/src/codegen/riscv/interface-descriptors-riscv-inl.h
index f379d82914..dfda1ef720 100644
--- a/src/codegen/riscv/interface-descriptors-riscv-inl.h
+++ b/src/codegen/riscv/interface-descriptors-riscv-inl.h
@@ -99,6 +99,9 @@ constexpr Register StoreDescriptor::SlotRegister() { return a4; }
 // static
 constexpr Register StoreWithVectorDescriptor::VectorRegister() { return a3; }
 
+// static
+constexpr Register DefineKeyedOwnDescriptor::FlagsRegister() { return a5; }
+
 // static
 constexpr Register StoreTransitionDescriptor::MapRegister() { return a5; }
 
diff --git a/src/codegen/s390/interface-descriptors-s390-inl.h b/src/codegen/s390/interface-descriptors-s390-inl.h
index cf92bbff00..f2a406394b 100644
--- a/src/codegen/s390/interface-descriptors-s390-inl.h
+++ b/src/codegen/s390/interface-descriptors-s390-inl.h
@@ -99,6 +99,9 @@ constexpr Register StoreDescriptor::SlotRegister() { return r6; }
 // static
 constexpr Register StoreWithVectorDescriptor::VectorRegister() { return r5; }
 
+// static
+constexpr Register DefineKeyedOwnDescriptor::FlagsRegister() { return r7; }
+
 // static
 constexpr Register StoreTransitionDescriptor::MapRegister() { return r7; }
 
diff --git a/src/codegen/x64/interface-descriptors-x64-inl.h b/src/codegen/x64/interface-descriptors-x64-inl.h
index 39f190747d..cc662c4899 100644
--- a/src/codegen/x64/interface-descriptors-x64-inl.h
+++ b/src/codegen/x64/interface-descriptors-x64-inl.h
@@ -111,6 +111,9 @@ constexpr Register StoreDescriptor::SlotRegister() { return rdi; }
 // static
 constexpr Register StoreWithVectorDescriptor::VectorRegister() { return rbx; }
 
+// static
+constexpr Register DefineKeyedOwnDescriptor::FlagsRegister() { return r11; }
+
 // static
 constexpr Register StoreTransitionDescriptor::MapRegister() { return r11; }
 
diff --git a/src/common/globals.h b/src/common/globals.h
index db8e5a35b4..d379cbfc61 100644
--- a/src/common/globals.h
+++ b/src/common/globals.h
@@ -1851,6 +1851,13 @@ using DefineKeyedOwnPropertyInLiteralFlags =
     base::Flags<DefineKeyedOwnPropertyInLiteralFlag>;
 DEFINE_OPERATORS_FOR_FLAGS(DefineKeyedOwnPropertyInLiteralFlags)
 
+enum class DefineKeyedOwnPropertyFlag {
+  kNoFlags = 0,
+  kSetFunctionName = 1 << 0
+};
+using DefineKeyedOwnPropertyFlags = base::Flags<DefineKeyedOwnPropertyFlag>;
+DEFINE_OPERATORS_FOR_FLAGS(DefineKeyedOwnPropertyFlags)
+
 enum ExternalArrayType {
   kExternalInt8Array = 1,
   kExternalUint8Array,
diff --git a/src/compiler/bytecode-graph-builder.cc b/src/compiler/bytecode-graph-builder.cc
index 1be5d16a77..f704f264f9 100644
--- a/src/compiler/bytecode-graph-builder.cc
+++ b/src/compiler/bytecode-graph-builder.cc
@@ -2135,8 +2135,9 @@ void BytecodeGraphBuilder::VisitDefineKeyedOwnProperty() {
       environment()->LookupRegister(bytecode_iterator().GetRegisterOperand(0));
   Node* key =
       environment()->LookupRegister(bytecode_iterator().GetRegisterOperand(1));
+  int flags = bytecode_iterator().GetFlag8Operand(2);
   FeedbackSource source =
-      CreateFeedbackSource(bytecode_iterator().GetIndexOperand(2));
+      CreateFeedbackSource(bytecode_iterator().GetIndexOperand(3));
   LanguageMode language_mode =
       GetLanguageModeFromSlotKind(broker()->GetFeedbackSlotKind(source));
 
@@ -2155,9 +2156,11 @@ void BytecodeGraphBuilder::VisitDefineKeyedOwnProperty() {
     static_assert(JSDefineKeyedOwnPropertyNode::ObjectIndex() == 0);
     static_assert(JSDefineKeyedOwnPropertyNode::KeyIndex() == 1);
     static_assert(JSDefineKeyedOwnPropertyNode::ValueIndex() == 2);
-    static_assert(JSDefineKeyedOwnPropertyNode::FeedbackVectorIndex() == 3);
+    static_assert(JSDefineKeyedOwnPropertyNode::FlagsIndex() == 3);
+    static_assert(JSDefineKeyedOwnPropertyNode::FeedbackVectorIndex() == 4);
     DCHECK(IrOpcode::IsFeedbackCollectingOpcode(op->opcode()));
-    node = NewNode(op, object, key, value, feedback_vector_node());
+    node = NewNode(op, object, key, value, jsgraph()->Constant(flags),
+                   feedback_vector_node());
   }
 
   environment()->RecordAfterState(node, Environment::kAttachFrameState);
diff --git a/src/compiler/js-generic-lowering.cc b/src/compiler/js-generic-lowering.cc
index f975b45895..1627e8f674 100644
--- a/src/compiler/js-generic-lowering.cc
+++ b/src/compiler/js-generic-lowering.cc
@@ -427,14 +427,14 @@ void JSGenericLowering::LowerJSDefineKeyedOwnProperty(Node* node) {
   const PropertyAccess& p = n.Parameters();
   FrameState frame_state = n.frame_state();
   Node* outer_state = frame_state.outer_frame_state();
-  static_assert(n.FeedbackVectorIndex() == 3);
+  static_assert(n.FeedbackVectorIndex() == 4);
   if (outer_state->opcode() != IrOpcode::kFrameState) {
     n->RemoveInput(n.FeedbackVectorIndex());
-    node->InsertInput(zone(), 3,
+    node->InsertInput(zone(), 4,
                       jsgraph()->TaggedIndexConstant(p.feedback().index()));
     ReplaceWithBuiltinCall(node, Builtin::kDefineKeyedOwnICTrampoline);
   } else {
-    node->InsertInput(zone(), 3,
+    node->InsertInput(zone(), 4,
                       jsgraph()->TaggedIndexConstant(p.feedback().index()));
     ReplaceWithBuiltinCall(node, Builtin::kDefineKeyedOwnIC);
   }
diff --git a/src/compiler/js-operator.cc b/src/compiler/js-operator.cc
index 19dfda825d..297365c84e 100644
--- a/src/compiler/js-operator.cc
+++ b/src/compiler/js-operator.cc
@@ -1133,7 +1133,7 @@ const Operator* JSOperatorBuilder::DefineKeyedOwnProperty(
   return zone()->New<Operator1<PropertyAccess>>(                     // --
       IrOpcode::kJSDefineKeyedOwnProperty, Operator::kNoProperties,  // opcode
       "JSDefineKeyedOwnProperty",                                    // name
-      4, 1, 1, 0, 1, 2,                                              // counts
+      5, 1, 1, 0, 1, 2,                                              // counts
       access);  // parameter
 }
 
diff --git a/src/compiler/js-operator.h b/src/compiler/js-operator.h
index 5af25d8245..c4b3303683 100644
--- a/src/compiler/js-operator.h
+++ b/src/compiler/js-operator.h
@@ -1341,7 +1341,8 @@ class JSDefineKeyedOwnPropertyNode final : public JSNodeWrapperBase {
   V(Object, object, 0, Object) \
   V(Key, key, 1, Object)       \
   V(Value, value, 2, Object)   \
-  V(FeedbackVector, feedback_vector, 3, HeapObject)
+  V(Flags, flags, 3, Object)   \
+  V(FeedbackVector, feedback_vector, 4, HeapObject)
   INPUTS(DEFINE_INPUT_ACCESSORS)
 #undef INPUTS
 };
diff --git a/src/ic/accessor-assembler.cc b/src/ic/accessor-assembler.cc
index cdc497744a..34b8c16010 100644
--- a/src/ic/accessor-assembler.cc
+++ b/src/ic/accessor-assembler.cc
@@ -3799,11 +3799,12 @@ void AccessorAssembler::StoreGlobalIC(const StoreICParameters* pp) {
       GotoIf(TaggedEqual(handler, UninitializedSymbolConstant()), &miss);
 
       DCHECK(pp->receiver_is_null());
+      DCHECK(pp->flags_is_null());
       TNode<NativeContext> native_context = LoadNativeContext(pp->context());
       StoreICParameters p(
           pp->context(),
           LoadContextElement(native_context, Context::GLOBAL_PROXY_INDEX),
-          pp->name(), pp->value(), pp->slot(), pp->vector(),
+          pp->name(), pp->value(), base::nullopt, pp->slot(), pp->vector(),
           StoreICMode::kDefault);
 
       HandleStoreICHandlerCase(&p, handler, &miss, ICMode::kGlobalIC);
@@ -3982,6 +3983,25 @@ void AccessorAssembler::KeyedStoreIC(const StoreICParameters* p) {
 void AccessorAssembler::DefineKeyedOwnIC(const StoreICParameters* p) {
   Label miss(this, Label::kDeferred);
   {
+    {
+      // TODO(v8:13451): Port SetFunctionName to an ic so that we can remove
+      // the runtime call here. Potentially we may also remove the
+      // StoreICParameters flags and have builtins:kDefineKeyedOwnIC reusing
+      // StoreWithVectorDescriptor again.
+      Label did_set_function_name_if_needed(this);
+      TNode<Int32T> needs_set_function_name = Word32And(
+          SmiToInt32(p->flags()),
+          Int32Constant(
+              static_cast<int>(DefineKeyedOwnPropertyFlag::kSetFunctionName)));
+      GotoIfNot(needs_set_function_name, &did_set_function_name_if_needed);
+
+      Comment("DefineKeyedOwnIC_set_function_name");
+      CallRuntime(Runtime::kSetFunctionName, p->context(), p->value(),
+                  p->name());
+
+      Goto(&did_set_function_name_if_needed);
+      BIND(&did_set_function_name_if_needed);
+    }
     TVARIABLE(MaybeObject, var_handler);
 
     Label if_handler(this, &var_handler),
@@ -4552,10 +4572,11 @@ void AccessorAssembler::GenerateStoreGlobalIC() {
   auto name = Parameter<Object>(Descriptor::kName);
   auto value = Parameter<Object>(Descriptor::kValue);
   auto slot = Parameter<TaggedIndex>(Descriptor::kSlot);
+  auto flags = base::nullopt;
   auto vector = Parameter<HeapObject>(Descriptor::kVector);
   auto context = Parameter<Context>(Descriptor::kContext);
 
-  StoreICParameters p(context, base::nullopt, name, value, slot, vector,
+  StoreICParameters p(context, base::nullopt, name, value, flags, slot, vector,
                       StoreICMode::kDefault);
   StoreGlobalIC(&p);
 }
@@ -4590,11 +4611,12 @@ void AccessorAssembler::GenerateStoreIC() {
   auto receiver = Parameter<Object>(Descriptor::kReceiver);
   auto name = Parameter<Object>(Descriptor::kName);
   auto value = Parameter<Object>(Descriptor::kValue);
+  auto flags = base::nullopt;
   auto slot = Parameter<TaggedIndex>(Descriptor::kSlot);
   auto vector = Parameter<HeapObject>(Descriptor::kVector);
   auto context = Parameter<Context>(Descriptor::kContext);
 
-  StoreICParameters p(context, receiver, name, value, slot, vector,
+  StoreICParameters p(context, receiver, name, value, flags, slot, vector,
                       StoreICMode::kDefault);
   StoreIC(&p);
 }
@@ -4633,11 +4655,12 @@ void AccessorAssembler::GenerateDefineNamedOwnIC() {
   auto receiver = Parameter<Object>(Descriptor::kReceiver);
   auto name = Parameter<Object>(Descriptor::kName);
   auto value = Parameter<Object>(Descriptor::kValue);
+  auto flags = base::nullopt;
   auto slot = Parameter<TaggedIndex>(Descriptor::kSlot);
   auto vector = Parameter<HeapObject>(Descriptor::kVector);
   auto context = Parameter<Context>(Descriptor::kContext);
 
-  StoreICParameters p(context, receiver, name, value, slot, vector,
+  StoreICParameters p(context, receiver, name, value, flags, slot, vector,
                       StoreICMode::kDefineNamedOwn);
   // StoreIC is a generic helper than handle both set and define own
   // named stores.
@@ -4678,11 +4701,12 @@ void AccessorAssembler::GenerateKeyedStoreIC() {
   auto receiver = Parameter<Object>(Descriptor::kReceiver);
   auto name = Parameter<Object>(Descriptor::kName);
   auto value = Parameter<Object>(Descriptor::kValue);
+  auto flags = base::nullopt;
   auto slot = Parameter<TaggedIndex>(Descriptor::kSlot);
   auto vector = Parameter<HeapObject>(Descriptor::kVector);
   auto context = Parameter<Context>(Descriptor::kContext);
 
-  StoreICParameters p(context, receiver, name, value, slot, vector,
+  StoreICParameters p(context, receiver, name, value, flags, slot, vector,
                       StoreICMode::kDefault);
   KeyedStoreIC(&p);
 }
@@ -4716,46 +4740,49 @@ void AccessorAssembler::GenerateKeyedStoreICBaseline() {
 }
 
 void AccessorAssembler::GenerateDefineKeyedOwnIC() {
-  using Descriptor = StoreWithVectorDescriptor;
+  using Descriptor = DefineKeyedOwnWithVectorDescriptor;
 
   auto receiver = Parameter<Object>(Descriptor::kReceiver);
   auto name = Parameter<Object>(Descriptor::kName);
   auto value = Parameter<Object>(Descriptor::kValue);
+  auto flags = Parameter<Smi>(Descriptor::kFlags);
   auto slot = Parameter<TaggedIndex>(Descriptor::kSlot);
   auto vector = Parameter<HeapObject>(Descriptor::kVector);
   auto context = Parameter<Context>(Descriptor::kContext);
 
-  StoreICParameters p(context, receiver, name, value, slot, vector,
+  StoreICParameters p(context, receiver, name, value, flags, slot, vector,
                       StoreICMode::kDefineKeyedOwn);
   DefineKeyedOwnIC(&p);
 }
 
 void AccessorAssembler::GenerateDefineKeyedOwnICTrampoline() {
-  using Descriptor = StoreDescriptor;
+  using Descriptor = DefineKeyedOwnDescriptor;
 
   auto receiver = Parameter<Object>(Descriptor::kReceiver);
   auto name = Parameter<Object>(Descriptor::kName);
   auto value = Parameter<Object>(Descriptor::kValue);
+  auto flags = Parameter<Smi>(Descriptor::kFlags);
   auto slot = Parameter<TaggedIndex>(Descriptor::kSlot);
   auto context = Parameter<Context>(Descriptor::kContext);
   TNode<FeedbackVector> vector = LoadFeedbackVectorForStub();
 
   TailCallBuiltin(Builtin::kDefineKeyedOwnIC, context, receiver, name, value,
-                  slot, vector);
+                  flags, slot, vector);
 }
 
 void AccessorAssembler::GenerateDefineKeyedOwnICBaseline() {
-  using Descriptor = StoreBaselineDescriptor;
+  using Descriptor = DefineKeyedOwnBaselineDescriptor;
 
   auto receiver = Parameter<Object>(Descriptor::kReceiver);
   auto name = Parameter<Object>(Descriptor::kName);
   auto value = Parameter<Object>(Descriptor::kValue);
+  auto flags = Parameter<Smi>(Descriptor::kFlags);
   auto slot = Parameter<TaggedIndex>(Descriptor::kSlot);
   TNode<FeedbackVector> vector = LoadFeedbackVectorFromBaseline();
   TNode<Context> context = LoadContextFromBaseline();
 
   TailCallBuiltin(Builtin::kDefineKeyedOwnIC, context, receiver, name, value,
-                  slot, vector);
+                  flags, slot, vector);
 }
 
 void AccessorAssembler::GenerateStoreInArrayLiteralIC() {
@@ -4764,11 +4791,12 @@ void AccessorAssembler::GenerateStoreInArrayLiteralIC() {
   auto array = Parameter<Object>(Descriptor::kReceiver);
   auto index = Parameter<Object>(Descriptor::kName);
   auto value = Parameter<Object>(Descriptor::kValue);
+  auto flags = base::nullopt;
   auto slot = Parameter<TaggedIndex>(Descriptor::kSlot);
   auto vector = Parameter<HeapObject>(Descriptor::kVector);
   auto context = Parameter<Context>(Descriptor::kContext);
 
-  StoreICParameters p(context, array, index, value, slot, vector,
+  StoreICParameters p(context, array, index, value, flags, slot, vector,
                       StoreICMode::kDefault);
   StoreInArrayLiteralIC(&p);
 }
diff --git a/src/ic/accessor-assembler.h b/src/ic/accessor-assembler.h
index 32438c8d45..f8a6f094d1 100644
--- a/src/ic/accessor-assembler.h
+++ b/src/ic/accessor-assembler.h
@@ -209,12 +209,13 @@ class V8_EXPORT_PRIVATE AccessorAssembler : public CodeStubAssembler {
     StoreICParameters(TNode<Context> context,
                       base::Optional<TNode<Object>> receiver,
                       TNode<Object> name, TNode<Object> value,
-                      TNode<TaggedIndex> slot, TNode<HeapObject> vector,
-                      StoreICMode mode)
+                      base::Optional<TNode<Smi>> flags, TNode<TaggedIndex> slot,
+                      TNode<HeapObject> vector, StoreICMode mode)
         : context_(context),
           receiver_(receiver),
           name_(name),
           value_(value),
+          flags_(flags),
           slot_(slot),
           vector_(vector),
           mode_(mode) {}
@@ -223,12 +224,14 @@ class V8_EXPORT_PRIVATE AccessorAssembler : public CodeStubAssembler {
     TNode<Object> receiver() const { return receiver_.value(); }
     TNode<Object> name() const { return name_; }
     TNode<Object> value() const { return value_; }
+    TNode<Smi> flags() const { return flags_.value(); }
     TNode<TaggedIndex> slot() const { return slot_; }
     TNode<HeapObject> vector() const { return vector_; }
 
     TNode<Object> lookup_start_object() const { return receiver(); }
 
     bool receiver_is_null() const { return !receiver_.has_value(); }
+    bool flags_is_null() const { return !flags_.has_value(); }
 
     bool IsDefineNamedOwn() const {
       return mode_ == StoreICMode::kDefineNamedOwn;
@@ -245,6 +248,7 @@ class V8_EXPORT_PRIVATE AccessorAssembler : public CodeStubAssembler {
     base::Optional<TNode<Object>> receiver_;
     TNode<Object> name_;
     TNode<Object> value_;
+    base::Optional<TNode<Smi>> flags_;
     TNode<TaggedIndex> slot_;
     TNode<HeapObject> vector_;
     StoreICMode mode_;
diff --git a/src/ic/keyed-store-generic.cc b/src/ic/keyed-store-generic.cc
index 1d35d82154..b1b9b55b3e 100644
--- a/src/ic/keyed-store-generic.cc
+++ b/src/ic/keyed-store-generic.cc
@@ -1119,8 +1119,9 @@ void KeyedStoreGenericAssembler::KeyedStoreGeneric(
   BIND(&if_unique_name);
   {
     Comment("key is unique name");
-    StoreICParameters p(context, receiver, var_unique.value(), value, {},
-                        UndefinedConstant(), StoreICMode::kDefault);
+    StoreICParameters p(context, receiver, var_unique.value(), value,
+                        base::nullopt, {}, UndefinedConstant(),
+                        StoreICMode::kDefault);
     ExitPoint direct_exit(this);
     EmitGenericPropertyStore(CAST(receiver), receiver_map, instance_type, &p,
                              &direct_exit, &slow, language_mode);
@@ -1195,7 +1196,7 @@ void KeyedStoreGenericAssembler::StoreIC_NoFeedback() {
     // checks, strings and string wrappers, proxies) are handled in the runtime.
     GotoIf(IsSpecialReceiverInstanceType(instance_type), &miss);
     {
-      StoreICParameters p(context, receiver, name, value, slot,
+      StoreICParameters p(context, receiver, name, value, base::nullopt, slot,
                           UndefinedConstant(),
                           IsDefineNamedOwn() ? StoreICMode::kDefineNamedOwn
                                              : StoreICMode::kDefault);
@@ -1219,7 +1220,7 @@ void KeyedStoreGenericAssembler::StoreProperty(TNode<Context> context,
                                                TNode<Name> unique_name,
                                                TNode<Object> value,
                                                LanguageMode language_mode) {
-  StoreICParameters p(context, receiver, unique_name, value, {},
+  StoreICParameters p(context, receiver, unique_name, value, base::nullopt, {},
                       UndefinedConstant(), StoreICMode::kDefault);
 
   Label done(this), slow(this, Label::kDeferred);
diff --git a/src/interpreter/bytecode-array-builder.cc b/src/interpreter/bytecode-array-builder.cc
index 784d88a9a8..fa9d21627d 100644
--- a/src/interpreter/bytecode-array-builder.cc
+++ b/src/interpreter/bytecode-array-builder.cc
@@ -922,13 +922,14 @@ BytecodeArrayBuilder& BytecodeArrayBuilder::SetKeyedProperty(
 }
 
 BytecodeArrayBuilder& BytecodeArrayBuilder::DefineKeyedOwnProperty(
-    Register object, Register key, int feedback_slot) {
+    Register object, Register key, DefineKeyedOwnPropertyFlags flags,
+    int feedback_slot) {
   // Ensure that the IC uses a strict language mode, as this is the only
   // supported mode for this use case.
   DCHECK_EQ(GetLanguageModeFromSlotKind(feedback_vector_spec()->GetKind(
                 FeedbackVector::ToSlot(feedback_slot))),
             LanguageMode::kStrict);
-  OutputDefineKeyedOwnProperty(object, key, feedback_slot);
+  OutputDefineKeyedOwnProperty(object, key, flags, feedback_slot);
   return *this;
 }
 
diff --git a/src/interpreter/bytecode-array-builder.h b/src/interpreter/bytecode-array-builder.h
index a9d2199840..cf75af4273 100644
--- a/src/interpreter/bytecode-array-builder.h
+++ b/src/interpreter/bytecode-array-builder.h
@@ -191,8 +191,9 @@ class V8_EXPORT_PRIVATE BytecodeArrayBuilder final {
   // Define an own property keyed by a value in a register, trigger the
   // defineProperty traps if necessary. The value to be defined should be
   // in the accumulator.
-  BytecodeArrayBuilder& DefineKeyedOwnProperty(Register object, Register key,
-                                               int feedback_slot);
+  BytecodeArrayBuilder& DefineKeyedOwnProperty(
+      Register object, Register key, DefineKeyedOwnPropertyFlags flags,
+      int feedback_slot);
 
   // Store an own element in an array literal. The value to be stored should be
   // in the accumulator.
diff --git a/src/interpreter/bytecode-generator.cc b/src/interpreter/bytecode-generator.cc
index 7b4103d172..e8bb3c2bc3 100644
--- a/src/interpreter/bytecode-generator.cc
+++ b/src/interpreter/bytecode-generator.cc
@@ -2747,13 +2747,11 @@ void BytecodeGenerator::BuildClassLiteral(ClassLiteral* expr, Register name) {
   }
 
   if (expr->instance_members_initializer_function() != nullptr) {
-    Register initializer =
-        VisitForRegisterValue(expr->instance_members_initializer_function());
+    VisitForAccumulatorValue(expr->instance_members_initializer_function());
 
     FeedbackSlot slot = feedback_spec()->AddStoreICSlot(language_mode());
     builder()
-        ->LoadAccumulatorWithRegister(initializer)
-        .StoreClassFieldsInitializer(class_constructor, feedback_index(slot))
+        ->StoreClassFieldsInitializer(class_constructor, feedback_index(slot))
         .LoadAccumulatorWithRegister(class_constructor);
   }
 
@@ -2762,23 +2760,18 @@ void BytecodeGenerator::BuildClassLiteral(ClassLiteral* expr, Register name) {
     // class boilerplate in the future. The name argument can be
     // passed to the DefineClass runtime function and have it set
     // there.
+    // TODO(v8:13451): Alternatively, port SetFunctionName to an ic so that we
+    // can replace the runtime call to a dedicate bytecode here.
     if (name.is_valid()) {
-      Register key = register_allocator()->NewRegister();
-      builder()
-          ->LoadLiteral(ast_string_constants()->name_string())
-          .StoreAccumulatorInRegister(key);
-
-      DefineKeyedOwnPropertyInLiteralFlags data_property_flags =
-          DefineKeyedOwnPropertyInLiteralFlag::kNoFlags;
-      FeedbackSlot slot =
-          feedback_spec()->AddDefineKeyedOwnPropertyInLiteralICSlot();
+      RegisterAllocationScope inner_register_scope(this);
+      RegisterList args = register_allocator()->NewRegisterList(2);
       builder()
-          ->LoadAccumulatorWithRegister(name)
-          .DefineKeyedOwnPropertyInLiteral(class_constructor, key,
-                                           data_property_flags,
-                                           feedback_index(slot));
+          ->MoveRegister(class_constructor, args[0])
+          .MoveRegister(name, args[1])
+          .CallRuntime(Runtime::kSetFunctionName, args);
     }
 
+    RegisterAllocationScope inner_register_scope(this);
     RegisterList args = register_allocator()->NewRegisterList(1);
     Register initializer = VisitForRegisterValue(expr->static_initializer());
 
@@ -2855,17 +2848,33 @@ void BytecodeGenerator::BuildClassProperty(ClassLiteral::Property* property) {
   }
 
   builder()->SetExpressionAsStatementPosition(property->value());
-  VisitForAccumulatorValue(property->value());
 
   if (is_literal_store) {
+    VisitForAccumulatorValue(property->value());
     FeedbackSlot slot = feedback_spec()->AddDefineNamedOwnICSlot();
     builder()->DefineNamedOwnProperty(
         builder()->Receiver(),
         property->key()->AsLiteral()->AsRawPropertyName(),
         feedback_index(slot));
   } else {
+    DefineKeyedOwnPropertyFlags flags = DefineKeyedOwnPropertyFlag::kNoFlags;
+    if (property->NeedsSetFunctionName()) {
+      // Static class fields require the name property to be set on
+      // the class, meaning we can't wait until the
+      // DefineKeyedOwnProperty call later to set the name.
+      if (property->value()->IsClassLiteral() &&
+          property->value()->AsClassLiteral()->static_initializer() !=
+              nullptr) {
+        VisitClassLiteral(property->value()->AsClassLiteral(), key);
+      } else {
+        VisitForAccumulatorValue(property->value());
+        flags |= DefineKeyedOwnPropertyFlag::kSetFunctionName;
+      }
+    } else {
+      VisitForAccumulatorValue(property->value());
+    }
     FeedbackSlot slot = feedback_spec()->AddDefineKeyedOwnICSlot();
-    builder()->DefineKeyedOwnProperty(builder()->Receiver(), key,
+    builder()->DefineKeyedOwnProperty(builder()->Receiver(), key, flags,
                                       feedback_index(slot));
   }
 }
@@ -2917,7 +2926,9 @@ void BytecodeGenerator::BuildPrivateBrandInitialization(Register receiver,
     builder()
         ->StoreAccumulatorInRegister(brand_reg)
         .LoadAccumulatorWithRegister(class_context->reg())
-        .DefineKeyedOwnProperty(receiver, brand_reg, feedback_index(slot));
+        .DefineKeyedOwnProperty(receiver, brand_reg,
+                                DefineKeyedOwnPropertyFlag::kNoFlags,
+                                feedback_index(slot));
   } else {
     // We are in the slow case where super() is called from a nested
     // arrow function or a eval(), so the class scope context isn't
@@ -3135,8 +3146,9 @@ void BytecodeGenerator::VisitObjectLiteral(ObjectLiteral* expr) {
                                               feedback_index(slot));
           } else {
             FeedbackSlot slot = feedback_spec()->AddDefineKeyedOwnICSlot();
-            builder()->DefineKeyedOwnProperty(literal, key_reg,
-                                              feedback_index(slot));
+            builder()->DefineKeyedOwnProperty(
+                literal, key_reg, DefineKeyedOwnPropertyFlag::kNoFlags,
+                feedback_index(slot));
           }
         } else {
           VisitForEffect(property->value());
@@ -3233,34 +3245,30 @@ void BytecodeGenerator::VisitObjectLiteral(ObjectLiteral* expr) {
         object_literal_context_scope.SetEnteredIf(
             should_be_in_object_literal_scope);
         builder()->SetExpressionPosition(property->value());
-        Register value;
-
-        // Static class fields require the name property to be set on
-        // the class, meaning we can't wait until the
-        // DefineKeyedOwnPropertyInLiteral call later to set the name.
-        if (property->value()->IsClassLiteral() &&
-            property->value()->AsClassLiteral()->static_initializer() !=
-                nullptr) {
-          value = register_allocator()->NewRegister();
-          VisitClassLiteral(property->value()->AsClassLiteral(), key);
-          builder()->StoreAccumulatorInRegister(value);
-        } else {
-          value = VisitForRegisterValue(property->value());
-        }
 
         DefineKeyedOwnPropertyInLiteralFlags data_property_flags =
             DefineKeyedOwnPropertyInLiteralFlag::kNoFlags;
         if (property->NeedsSetFunctionName()) {
-          data_property_flags |=
-              DefineKeyedOwnPropertyInLiteralFlag::kSetFunctionName;
+          // Static class fields require the name property to be set on
+          // the class, meaning we can't wait until the
+          // DefineKeyedOwnPropertyInLiteral call later to set the name.
+          if (property->value()->IsClassLiteral() &&
+              property->value()->AsClassLiteral()->static_initializer() !=
+                  nullptr) {
+            VisitClassLiteral(property->value()->AsClassLiteral(), key);
+          } else {
+            data_property_flags |=
+                DefineKeyedOwnPropertyInLiteralFlag::kSetFunctionName;
+            VisitForAccumulatorValue(property->value());
+          }
+        } else {
+          VisitForAccumulatorValue(property->value());
         }
 
         FeedbackSlot slot =
             feedback_spec()->AddDefineKeyedOwnPropertyInLiteralICSlot();
-        builder()
-            ->LoadAccumulatorWithRegister(value)
-            .DefineKeyedOwnPropertyInLiteral(literal, key, data_property_flags,
-                                             feedback_index(slot));
+        builder()->DefineKeyedOwnPropertyInLiteral(
+            literal, key, data_property_flags, feedback_index(slot));
         break;
       }
       case ObjectLiteral::Property::GETTER:
diff --git a/src/interpreter/bytecodes.h b/src/interpreter/bytecodes.h
index 3919daeb20..9e1146ebb7 100644
--- a/src/interpreter/bytecodes.h
+++ b/src/interpreter/bytecodes.h
@@ -151,7 +151,8 @@ namespace interpreter {
   V(SetKeyedProperty, ImplicitRegisterUse::kReadWriteAccumulator,              \
     OperandType::kReg, OperandType::kReg, OperandType::kIdx)                   \
   V(DefineKeyedOwnProperty, ImplicitRegisterUse::kReadWriteAccumulator,        \
-    OperandType::kReg, OperandType::kReg, OperandType::kIdx)                   \
+    OperandType::kReg, OperandType::kReg, OperandType::kFlag8,                 \
+    OperandType::kIdx)                                                         \
   V(StaInArrayLiteral, ImplicitRegisterUse::kReadWriteAccumulator,             \
     OperandType::kReg, OperandType::kReg, OperandType::kIdx)                   \
   V(DefineKeyedOwnPropertyInLiteral, ImplicitRegisterUse::kReadAccumulator,    \
diff --git a/src/interpreter/interpreter-generator.cc b/src/interpreter/interpreter-generator.cc
index 95e05136b4..a5d738acec 100644
--- a/src/interpreter/interpreter-generator.cc
+++ b/src/interpreter/interpreter-generator.cc
@@ -667,10 +667,11 @@ IGNITION_HANDLER(SetKeyedProperty, InterpreterAssembler) {
   Dispatch();
 }
 
-// DefineKeyedOwnProperty <object> <key> <slot>
+// DefineKeyedOwnProperty <object> <key> <flags> <slot>
 //
 // Calls the DefineKeyedOwnIC at FeedbackVector slot <slot> for <object> and
-// the key <key> with the value in the accumulator.
+// the key <key> with the value in the accumulator. Whether set_function_name
+// is stored in DefineKeyedOwnPropertyFlags <flags>.
 //
 // This is similar to SetKeyedProperty, but avoids checking the prototype
 // chain, and in the case of private names, throws if the private name already
@@ -679,13 +680,15 @@ IGNITION_HANDLER(DefineKeyedOwnProperty, InterpreterAssembler) {
   TNode<Object> object = LoadRegisterAtOperandIndex(0);
   TNode<Object> name = LoadRegisterAtOperandIndex(1);
   TNode<Object> value = GetAccumulator();
-  TNode<TaggedIndex> slot = BytecodeOperandIdxTaggedIndex(2);
+  TNode<Smi> flags =
+      SmiFromInt32(UncheckedCast<Int32T>(BytecodeOperandFlag8(2)));
+  TNode<TaggedIndex> slot = BytecodeOperandIdxTaggedIndex(3);
   TNode<HeapObject> maybe_vector = LoadFeedbackVector();
   TNode<Context> context = GetContext();
 
   TVARIABLE(Object, var_result);
   var_result = CallBuiltin(Builtin::kDefineKeyedOwnIC, context, object, name,
-                           value, slot, maybe_vector);
+                           value, flags, slot, maybe_vector);
   // To avoid special logic in the deoptimizer to re-materialize the value in
   // the accumulator, we overwrite the accumulator after the IC call. It
   // doesn't really matter what we write to the accumulator here, since we
diff --git a/src/maglev/maglev-graph-builder.cc b/src/maglev/maglev-graph-builder.cc
index a6795173d4..e692272147 100644
--- a/src/maglev/maglev-graph-builder.cc
+++ b/src/maglev/maglev-graph-builder.cc
@@ -2697,10 +2697,11 @@ void MaglevGraphBuilder::VisitSetKeyedProperty() {
 }
 
 void MaglevGraphBuilder::VisitDefineKeyedOwnProperty() {
-  // DefineKeyedOwnProperty <object> <key> <slot>
+  // DefineKeyedOwnProperty <object> <key> <flags> <slot>
   ValueNode* object = LoadRegisterTagged(0);
   ValueNode* key = LoadRegisterTagged(1);
-  FeedbackSlot slot = GetSlotOperand(2);
+  ValueNode* flags = GetSmiConstant(GetFlag8Operand(2));
+  FeedbackSlot slot = GetSlotOperand(3);
   compiler::FeedbackSource feedback_source{feedback(), slot};
 
   // TODO(victorgomes): Add monomorphic fast path.
@@ -2709,7 +2710,7 @@ void MaglevGraphBuilder::VisitDefineKeyedOwnProperty() {
   ValueNode* context = GetContext();
   ValueNode* value = GetAccumulatorTagged();
   SetAccumulator(AddNewNode<DefineKeyedOwnGeneric>(
-      {context, object, key, value}, feedback_source));
+      {context, object, key, value, flags}, feedback_source));
 }
 
 void MaglevGraphBuilder::VisitStaInArrayLiteral() {
diff --git a/src/maglev/maglev-ir.cc b/src/maglev/maglev-ir.cc
index 7c65f5a1fe..16725710fa 100644
--- a/src/maglev/maglev-ir.cc
+++ b/src/maglev/maglev-ir.cc
@@ -1438,11 +1438,12 @@ int DefineKeyedOwnGeneric::MaxCallStackArgs() const {
   return D::GetStackParameterCount();
 }
 void DefineKeyedOwnGeneric::SetValueLocationConstraints() {
-  using D = CallInterfaceDescriptorFor<Builtin::kKeyedStoreIC>::type;
+  using D = CallInterfaceDescriptorFor<Builtin::kDefineKeyedOwnIC>::type;
   UseFixed(context(), kContextRegister);
   UseFixed(object_input(), D::GetRegisterParameter(D::kReceiver));
   UseFixed(key_input(), D::GetRegisterParameter(D::kName));
   UseFixed(value_input(), D::GetRegisterParameter(D::kValue));
+  UseFixed(flags_input(), D::GetRegisterParameter(D::kFlags));
   DefineAsFixed(this, kReturnRegister0);
 }
 void DefineKeyedOwnGeneric::GenerateCode(MaglevAssembler* masm,
@@ -1452,9 +1453,10 @@ void DefineKeyedOwnGeneric::GenerateCode(MaglevAssembler* masm,
   DCHECK_EQ(ToRegister(object_input()), D::GetRegisterParameter(D::kReceiver));
   DCHECK_EQ(ToRegister(key_input()), D::GetRegisterParameter(D::kName));
   DCHECK_EQ(ToRegister(value_input()), D::GetRegisterParameter(D::kValue));
+  DCHECK_EQ(ToRegister(flags_input()), D::GetRegisterParameter(D::kFlags));
   __ Move(D::GetRegisterParameter(D::kSlot),
           TaggedIndex::FromIntptr(feedback().index()));
-  __ Move(D::GetRegisterParameter(D::kVector), feedback().vector);
+  __ Push(feedback().vector);
   __ CallBuiltin(Builtin::kDefineKeyedOwnIC);
   masm->DefineExceptionHandlerAndLazyDeoptPoint(this);
 }
diff --git a/src/maglev/maglev-ir.h b/src/maglev/maglev-ir.h
index 4ac5ebd2ef..d653a62846 100644
--- a/src/maglev/maglev-ir.h
+++ b/src/maglev/maglev-ir.h
@@ -4797,8 +4797,8 @@ class SetKeyedGeneric : public FixedInputValueNodeT<4, SetKeyedGeneric> {
 };
 
 class DefineKeyedOwnGeneric
-    : public FixedInputValueNodeT<4, DefineKeyedOwnGeneric> {
-  using Base = FixedInputValueNodeT<4, DefineKeyedOwnGeneric>;
+    : public FixedInputValueNodeT<5, DefineKeyedOwnGeneric> {
+  using Base = FixedInputValueNodeT<5, DefineKeyedOwnGeneric>;
 
  public:
   explicit DefineKeyedOwnGeneric(uint64_t bitfield,
@@ -4809,7 +4809,8 @@ class DefineKeyedOwnGeneric
   static constexpr OpProperties kProperties = OpProperties::JSCall();
   static constexpr typename Base::InputTypes kInputTypes{
       ValueRepresentation::kTagged, ValueRepresentation::kTagged,
-      ValueRepresentation::kTagged, ValueRepresentation::kTagged};
+      ValueRepresentation::kTagged, ValueRepresentation::kTagged,
+      ValueRepresentation::kTagged};
 
   compiler::FeedbackSource feedback() const { return feedback_; }
 
@@ -4817,10 +4818,12 @@ class DefineKeyedOwnGeneric
   static constexpr int kObjectIndex = 1;
   static constexpr int kKeyIndex = 2;
   static constexpr int kValueIndex = 3;
+  static constexpr int kFlagsIndex = 4;
   Input& context() { return input(kContextIndex); }
   Input& object_input() { return input(kObjectIndex); }
   Input& key_input() { return input(kKeyIndex); }
   Input& value_input() { return input(kValueIndex); }
+  Input& flags_input() { return input(kFlagsIndex); }
 
   int MaxCallStackArgs() const;
   void SetValueLocationConstraints();
diff --git a/src/runtime/runtime-object.cc b/src/runtime/runtime-object.cc
index 325b0aff4f..c192598e9e 100644
--- a/src/runtime/runtime-object.cc
+++ b/src/runtime/runtime-object.cc
@@ -1115,6 +1115,25 @@ RUNTIME_FUNCTION(Runtime_DefineAccessorPropertyUnchecked) {
   return ReadOnlyRoots(isolate).undefined_value();
 }
 
+RUNTIME_FUNCTION(Runtime_SetFunctionName) {
+  HandleScope scope(isolate);
+  DCHECK_EQ(2, args.length());
+  Handle<Object> value = args.at(0);
+  Handle<Name> name = args.at<Name>(1);
+  DCHECK(value->IsJSFunction());
+  Handle<JSFunction> function = Handle<JSFunction>::cast(value);
+  DCHECK(!function->shared().HasSharedName());
+  Handle<Map> function_map(function->map(), isolate);
+  if (!JSFunction::SetName(function, name,
+                           isolate->factory()->empty_string())) {
+    return ReadOnlyRoots(isolate).exception();
+  }
+  // Class constructors do not reserve in-object space for name field.
+  DCHECK_IMPLIES(!IsClassConstructor(function->shared().kind()),
+                 *function_map == function->map());
+  return *value;
+}
+
 RUNTIME_FUNCTION(Runtime_DefineKeyedOwnPropertyInLiteral) {
   HandleScope scope(isolate);
   DCHECK_EQ(6, args.length());
@@ -1159,17 +1178,20 @@ RUNTIME_FUNCTION(Runtime_DefineKeyedOwnPropertyInLiteral) {
       return ReadOnlyRoots(isolate).exception();
     }
     // Class constructors do not reserve in-object space for name field.
-    CHECK_IMPLIES(!IsClassConstructor(function->shared().kind()),
-                  *function_map == function->map());
+    DCHECK_IMPLIES(!IsClassConstructor(function->shared().kind()),
+                   *function_map == function->map());
   }
 
   PropertyKey key(isolate, name);
   LookupIterator it(isolate, object, key, object, LookupIterator::OWN);
+
+  Maybe<bool> result = JSObject::DefineOwnPropertyIgnoreAttributes(
+      &it, value, attrs, Just(kDontThrow));
   // Cannot fail since this should only be called when
   // creating an object literal.
-  CHECK(JSObject::DefineOwnPropertyIgnoreAttributes(&it, value, attrs,
-                                                    Just(kDontThrow))
-            .IsJust());
+  RETURN_FAILURE_IF_SCHEDULED_EXCEPTION(isolate);
+  DCHECK(result.IsJust());
+  USE(result);
 
   // Return the value so that
   // BaselineCompiler::VisitDefineKeyedOwnPropertyInLiteral doesn't have to
diff --git a/src/runtime/runtime.h b/src/runtime/runtime.h
index 2c572b0222..2b778aec7e 100644
--- a/src/runtime/runtime.h
+++ b/src/runtime/runtime.h
@@ -346,6 +346,7 @@ namespace internal {
   F(ObjectValuesSkipFastPath, 1, 1)                                    \
   F(OptimizeObjectForAddingMultipleProperties, 2, 1)                   \
   F(SetDataProperties, 2, 1)                                           \
+  F(SetFunctionName, 2, 1)                                             \
   F(SetKeyedProperty, 3, 1)                                            \
   F(DefineObjectOwnProperty, 3, 1)                                     \
   F(SetNamedProperty, 3, 1)                                            \
diff --git a/test/mjsunit/harmony/public-instance-class-fields.js b/test/mjsunit/harmony/public-instance-class-fields.js
index 8ab1e31848..d732f73568 100644
--- a/test/mjsunit/harmony/public-instance-class-fields.js
+++ b/test/mjsunit/harmony/public-instance-class-fields.js
@@ -165,6 +165,16 @@
   assertEquals('c', c.c.name);
 }
 
+{
+  let x = 'c';
+  class C {
+    [x] = function() { return 1 };
+  }
+
+  let c = new C;
+  assertEquals('c', c.c.name);
+}
+
 {
   let d = function() { return new.target; }
   class C {
diff --git a/test/mjsunit/harmony/public-static-class-fields.js b/test/mjsunit/harmony/public-static-class-fields.js
index 0c7a3e5516..aa4918ae0c 100644
--- a/test/mjsunit/harmony/public-static-class-fields.js
+++ b/test/mjsunit/harmony/public-static-class-fields.js
@@ -143,6 +143,15 @@
   assertEquals('c', C.c.name);
 }
 
+{
+  let x = 'c';
+  class C {
+    static [x] = function() { return 1 };
+  }
+
+  assertEquals('c', C.c.name);
+}
+
 {
   let d = function() { return new.target; }
   class C {
@@ -463,8 +472,39 @@ y()();
   let q = { ["z"]: class { static y = this.name } }
   assertEquals(q.z.y, 'z');
 
+  let r = { ["z"]: class { static y = this.name; static name = "zz" } }
+  let r_z_name_desc = Object.getOwnPropertyDescriptor(r.z, "name");
+  assertEquals(r.z.y, 'z');
+  assertEquals(r_z_name_desc, {
+    value: 'zz', enumerable: true, writable: true, configurable: true
+  });
+
+  let s = { ["z"]: class Y { static y = this.name } }
+  assertEquals(s.z.y, 'Y');
+
   const C = class {
     static x = this.name;
   }
   assertEquals(C.x, 'C');
 }
+
+{
+  let p = class { static z = class { static y = this.name } }
+  assertEquals(p.z.y, 'z');
+
+  let q = class { static ["z"] = class { static y = this.name } }
+  assertEquals(q.z.y, 'z');
+
+  let r = class {
+    static ["z"] =
+      class { static y = this.name; static name = "zz" }
+  }
+  let r_z_name_desc = Object.getOwnPropertyDescriptor(r.z, "name");
+  assertEquals(r.z.y, 'z');
+  assertEquals(r_z_name_desc, {
+    value: 'zz', enumerable: true, writable: true, configurable: true
+  });
+
+  let s = class { static ["z"] = class Y { static y = this.name } }
+  assertEquals(s.z.y, 'Y');
+}
diff --git a/test/unittests/interpreter/bytecode-array-builder-unittest.cc b/test/unittests/interpreter/bytecode-array-builder-unittest.cc
index 2a0770a90c..ecd874ee5a 100644
--- a/test/unittests/interpreter/bytecode-array-builder-unittest.cc
+++ b/test/unittests/interpreter/bytecode-array-builder-unittest.cc
@@ -151,7 +151,8 @@ TEST_F(BytecodeArrayBuilderTest, AllBytecodesGenerated) {
       .SetKeyedProperty(reg, reg, strict_keyed_store_slot.ToInt(),
                         LanguageMode::kStrict)
       .DefineNamedOwnProperty(reg, name, define_named_own_slot.ToInt())
-      .DefineKeyedOwnProperty(reg, reg, define_named_own_slot.ToInt())
+      .DefineKeyedOwnProperty(reg, reg, DefineKeyedOwnPropertyFlag::kNoFlags,
+                              define_named_own_slot.ToInt())
       .StoreInArrayLiteral(reg, reg, store_array_element_slot.ToInt());
 
   // Emit Iterator-protocol operations
diff --git a/test/unittests/interpreter/bytecode_expectations/ObjectLiterals.golden b/test/unittests/interpreter/bytecode_expectations/ObjectLiterals.golden
index 606a6ad481..fe3dd9a4d6 100644
--- a/test/unittests/interpreter/bytecode_expectations/ObjectLiterals.golden
+++ b/test/unittests/interpreter/bytecode_expectations/ObjectLiterals.golden
@@ -233,7 +233,7 @@ snippet: "
 "
 frame size: 3
 parameter count: 1
-bytecode array length: 20
+bytecode array length: 21
 bytecodes: [
   /*   42 S> */ B(LdaSmi), I8(1),
                 B(Star0),
@@ -242,7 +242,7 @@ bytecodes: [
                 B(LdaSmi), I8(1),
                 B(Star2),
                 B(Ldar), R(0),
-  /*   57 E> */ B(DefineKeyedOwnProperty), R(1), R(2), U8(1),
+  /*   57 E> */ B(DefineKeyedOwnProperty), R(1), R(2), U8(0), U8(1),
                 B(Ldar), R(1),
   /*   61 S> */ B(Return),
 ]
diff --git a/test/unittests/interpreter/bytecode_expectations/PrivateAccessorAccess.golden b/test/unittests/interpreter/bytecode_expectations/PrivateAccessorAccess.golden
index c83f3d98cb..56cc83f41a 100644
--- a/test/unittests/interpreter/bytecode_expectations/PrivateAccessorAccess.golden
+++ b/test/unittests/interpreter/bytecode_expectations/PrivateAccessorAccess.golden
@@ -23,12 +23,12 @@ snippet: "
 "
 frame size: 5
 parameter count: 1
-bytecode array length: 82
+bytecode array length: 83
 bytecodes: [
                 B(LdaImmutableCurrentContextSlot), U8(3),
                 B(Star0),
                 B(Ldar), R(context),
-  /*   67 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0),
+  /*   67 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0), U8(0),
   /*   76 S> */ B(LdaImmutableCurrentContextSlot), U8(2),
                 B(Star2),
                 B(LdaImmutableCurrentContextSlot), U8(3),
@@ -75,12 +75,12 @@ snippet: "
 "
 frame size: 4
 parameter count: 1
-bytecode array length: 28
+bytecode array length: 29
 bytecodes: [
                 B(LdaImmutableCurrentContextSlot), U8(3),
                 B(Star0),
                 B(Ldar), R(context),
-  /*   48 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0),
+  /*   48 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0), U8(0),
   /*   53 S> */ B(LdaImmutableCurrentContextSlot), U8(3),
   /*   58 E> */ B(GetKeyedProperty), R(this), U8(2),
                 B(Wide), B(LdaSmi), I16(310),
@@ -107,12 +107,12 @@ snippet: "
 "
 frame size: 4
 parameter count: 1
-bytecode array length: 28
+bytecode array length: 29
 bytecodes: [
                 B(LdaImmutableCurrentContextSlot), U8(3),
                 B(Star0),
                 B(Ldar), R(context),
-  /*   41 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0),
+  /*   41 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0), U8(0),
   /*   46 S> */ B(LdaImmutableCurrentContextSlot), U8(3),
   /*   51 E> */ B(GetKeyedProperty), R(this), U8(2),
                 B(Wide), B(LdaSmi), I16(309),
@@ -139,12 +139,12 @@ snippet: "
 "
 frame size: 5
 parameter count: 1
-bytecode array length: 31
+bytecode array length: 32
 bytecodes: [
                 B(LdaImmutableCurrentContextSlot), U8(3),
                 B(Star0),
                 B(Ldar), R(context),
-  /*   48 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0),
+  /*   48 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0), U8(0),
   /*   53 S> */ B(LdaImmutableCurrentContextSlot), U8(2),
                 B(Star2),
                 B(LdaImmutableCurrentContextSlot), U8(3),
@@ -173,12 +173,12 @@ snippet: "
 "
 frame size: 4
 parameter count: 1
-bytecode array length: 28
+bytecode array length: 29
 bytecodes: [
                 B(LdaImmutableCurrentContextSlot), U8(3),
                 B(Star0),
                 B(Ldar), R(context),
-  /*   41 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0),
+  /*   41 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0), U8(0),
   /*   46 S> */ B(LdaImmutableCurrentContextSlot), U8(3),
   /*   51 E> */ B(GetKeyedProperty), R(this), U8(2),
                 B(Wide), B(LdaSmi), I16(309),
diff --git a/test/unittests/interpreter/bytecode_expectations/PrivateClassFields.golden b/test/unittests/interpreter/bytecode_expectations/PrivateClassFields.golden
index 195e64c76a..5f1727548b 100644
--- a/test/unittests/interpreter/bytecode_expectations/PrivateClassFields.golden
+++ b/test/unittests/interpreter/bytecode_expectations/PrivateClassFields.golden
@@ -24,7 +24,7 @@ snippet: "
 "
 frame size: 7
 parameter count: 1
-bytecode array length: 114
+bytecode array length: 112
 bytecodes: [
   /*   30 E> */ B(CreateBlockContext), U8(0),
                 B(PushContext), R(2),
@@ -43,7 +43,6 @@ bytecodes: [
                 B(Mov), R(3), R(5),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(4), U8(3),
                 B(CreateClosure), U8(4), U8(1), U8(2),
-                B(Star4),
                 B(SetNamedProperty), R(3), U8(5), U8(0),
                 B(PopContext), R(2),
                 B(Mov), R(5), R(0),
@@ -64,7 +63,6 @@ bytecodes: [
                 B(Mov), R(3), R(5),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(4), U8(3),
                 B(CreateClosure), U8(9), U8(3), U8(2),
-                B(Star4),
                 B(SetNamedProperty), R(3), U8(5), U8(2),
                 B(PopContext), R(2),
                 B(Mov), R(5), R(1),
@@ -127,7 +125,7 @@ snippet: "
 "
 frame size: 12
 parameter count: 1
-bytecode array length: 232
+bytecode array length: 229
 bytecodes: [
   /*   30 E> */ B(CreateBlockContext), U8(0),
                 B(PushContext), R(3),
@@ -153,7 +151,6 @@ bytecodes: [
                 B(Mov), R(10), R(7),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(5), U8(3),
                 B(CreateClosure), U8(6), U8(2), U8(2),
-                B(Star5),
                 B(SetNamedProperty), R(4), U8(7), U8(0),
                 B(PopContext), R(3),
                 B(Mov), R(6), R(0),
@@ -191,7 +188,6 @@ bytecodes: [
                 B(Mov), R(10), R(7),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(5), U8(5),
                 B(CreateClosure), U8(16), U8(7), U8(2),
-                B(Star5),
                 B(SetNamedProperty), R(4), U8(7), U8(2),
                 B(PopContext), R(3),
                 B(Mov), R(6), R(1),
@@ -211,7 +207,6 @@ bytecodes: [
                 B(Mov), R(1), R(7),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(5), U8(3),
                 B(CreateClosure), U8(20), U8(9), U8(2),
-                B(Star5),
                 B(SetNamedProperty), R(4), U8(7), U8(4),
                 B(PopContext), R(3),
                 B(Mov), R(6), R(2),
diff --git a/test/unittests/interpreter/bytecode_expectations/PrivateMethodAccess.golden b/test/unittests/interpreter/bytecode_expectations/PrivateMethodAccess.golden
index 86596d0d5d..14d694f019 100644
--- a/test/unittests/interpreter/bytecode_expectations/PrivateMethodAccess.golden
+++ b/test/unittests/interpreter/bytecode_expectations/PrivateMethodAccess.golden
@@ -18,12 +18,12 @@ snippet: "
 "
 frame size: 2
 parameter count: 1
-bytecode array length: 23
+bytecode array length: 24
 bytecodes: [
                 B(LdaImmutableCurrentContextSlot), U8(3),
                 B(Star0),
                 B(Ldar), R(context),
-  /*   44 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0),
+  /*   44 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0), U8(0),
   /*   49 S> */ B(LdaImmutableCurrentContextSlot), U8(3),
   /*   61 E> */ B(GetKeyedProperty), R(this), U8(2),
                 B(LdaImmutableCurrentContextSlot), U8(2),
@@ -48,12 +48,12 @@ snippet: "
 "
 frame size: 5
 parameter count: 1
-bytecode array length: 31
+bytecode array length: 32
 bytecodes: [
                 B(LdaImmutableCurrentContextSlot), U8(3),
                 B(Star0),
                 B(Ldar), R(context),
-  /*   44 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0),
+  /*   44 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0), U8(0),
   /*   49 S> */ B(LdaImmutableCurrentContextSlot), U8(2),
                 B(Star2),
                 B(LdaImmutableCurrentContextSlot), U8(3),
@@ -83,12 +83,12 @@ snippet: "
 "
 frame size: 4
 parameter count: 1
-bytecode array length: 28
+bytecode array length: 29
 bytecodes: [
                 B(LdaImmutableCurrentContextSlot), U8(3),
                 B(Star0),
                 B(Ldar), R(context),
-  /*   44 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0),
+  /*   44 E> */ B(DefineKeyedOwnProperty), R(this), R(0), U8(0), U8(0),
   /*   49 S> */ B(LdaImmutableCurrentContextSlot), U8(3),
   /*   54 E> */ B(GetKeyedProperty), R(this), U8(2),
                 B(Wide), B(LdaSmi), I16(308),
@@ -116,7 +116,7 @@ snippet: "
 "
 frame size: 4
 parameter count: 1
-bytecode array length: 48
+bytecode array length: 49
 bytecodes: [
   /*   44 E> */ B(CreateFunctionContext), U8(0), U8(1),
                 B(PushContext), R(0),
@@ -125,7 +125,7 @@ bytecodes: [
                 B(LdaImmutableContextSlot), R(0), U8(3), U8(0),
                 B(Star1),
                 B(Ldar), R(0),
-                B(DefineKeyedOwnProperty), R(this), R(1), U8(0),
+                B(DefineKeyedOwnProperty), R(this), R(1), U8(0), U8(0),
   /*   49 S> */ B(CreateClosure), U8(1), U8(0), U8(2),
                 B(Star3),
   /*   61 E> */ B(CallUndefinedReceiver0), R(3), U8(2),
diff --git a/test/unittests/interpreter/bytecode_expectations/PublicClassFields.golden b/test/unittests/interpreter/bytecode_expectations/PublicClassFields.golden
index 43e40974f9..c814f8489d 100644
--- a/test/unittests/interpreter/bytecode_expectations/PublicClassFields.golden
+++ b/test/unittests/interpreter/bytecode_expectations/PublicClassFields.golden
@@ -23,7 +23,7 @@ snippet: "
 "
 frame size: 8
 parameter count: 1
-bytecode array length: 104
+bytecode array length: 102
 bytecodes: [
   /*   30 E> */ B(CreateBlockContext), U8(0),
                 B(PushContext), R(2),
@@ -41,7 +41,6 @@ bytecodes: [
                 B(Mov), R(3), R(5),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(4), U8(4),
                 B(CreateClosure), U8(4), U8(1), U8(2),
-                B(Star4),
                 B(SetNamedProperty), R(3), U8(5), U8(0),
                 B(PopContext), R(2),
                 B(Mov), R(5), R(0),
@@ -61,7 +60,6 @@ bytecodes: [
                 B(Mov), R(3), R(5),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(4), U8(4),
                 B(CreateClosure), U8(9), U8(3), U8(2),
-                B(Star4),
                 B(SetNamedProperty), R(3), U8(5), U8(2),
                 B(PopContext), R(2),
                 B(Mov), R(5), R(1),
@@ -119,7 +117,7 @@ snippet: "
 "
 frame size: 12
 parameter count: 1
-bytecode array length: 199
+bytecode array length: 196
 bytecodes: [
   /*   30 E> */ B(CreateBlockContext), U8(0),
                 B(PushContext), R(3),
@@ -144,7 +142,6 @@ bytecodes: [
                 B(Mov), R(10), R(7),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(5), U8(4),
                 B(CreateClosure), U8(6), U8(2), U8(2),
-                B(Star5),
                 B(SetNamedProperty), R(4), U8(7), U8(0),
                 B(PopContext), R(3),
                 B(Mov), R(6), R(0),
@@ -173,7 +170,6 @@ bytecodes: [
                 B(Mov), R(10), R(7),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(5), U8(5),
                 B(CreateClosure), U8(14), U8(6), U8(2),
-                B(Star5),
                 B(SetNamedProperty), R(4), U8(7), U8(2),
                 B(PopContext), R(3),
                 B(Mov), R(6), R(1),
@@ -192,7 +188,6 @@ bytecodes: [
                 B(Mov), R(1), R(7),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(5), U8(4),
                 B(CreateClosure), U8(18), U8(8), U8(2),
-                B(Star5),
                 B(SetNamedProperty), R(4), U8(7), U8(4),
                 B(PopContext), R(3),
                 B(Mov), R(6), R(2),
diff --git a/test/unittests/interpreter/bytecode_expectations/StaticClassFields.golden b/test/unittests/interpreter/bytecode_expectations/StaticClassFields.golden
index 559afa2fa0..439c0eb00b 100644
--- a/test/unittests/interpreter/bytecode_expectations/StaticClassFields.golden
+++ b/test/unittests/interpreter/bytecode_expectations/StaticClassFields.golden
@@ -27,7 +27,7 @@ snippet: "
 "
 frame size: 9
 parameter count: 1
-bytecode array length: 166
+bytecode array length: 164
 bytecodes: [
   /*   30 E> */ B(CreateBlockContext), U8(0),
                 B(PushContext), R(2),
@@ -55,11 +55,10 @@ bytecodes: [
                 B(StaCurrentContextSlot), U8(3),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(4), U8(5),
                 B(CreateClosure), U8(6), U8(1), U8(2),
-                B(Star4),
                 B(SetNamedProperty), R(3), U8(7), U8(1),
                 B(CreateClosure), U8(8), U8(2), U8(2),
-                B(Star6),
-                B(CallProperty0), R(6), R(3), U8(3),
+                B(Star5),
+                B(CallProperty0), R(5), R(3), U8(3),
                 B(PopContext), R(2),
                 B(Mov), R(3), R(0),
   /*   38 E> */ B(CreateBlockContext), U8(9),
@@ -88,11 +87,10 @@ bytecodes: [
                 B(StaCurrentContextSlot), U8(3),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(4), U8(5),
                 B(CreateClosure), U8(12), U8(4), U8(2),
-                B(Star4),
                 B(SetNamedProperty), R(3), U8(7), U8(5),
                 B(CreateClosure), U8(13), U8(5), U8(2),
-                B(Star6),
-                B(CallProperty0), R(6), R(3), U8(7),
+                B(Star5),
+                B(CallProperty0), R(5), R(3), U8(7),
                 B(PopContext), R(2),
                 B(Mov), R(3), R(1),
   /*  197 S> */ B(Ldar), R(0),
@@ -159,7 +157,7 @@ snippet: "
 "
 frame size: 12
 parameter count: 1
-bytecode array length: 298
+bytecode array length: 295
 bytecodes: [
   /*   30 E> */ B(CreateBlockContext), U8(0),
                 B(PushContext), R(3),
@@ -194,11 +192,10 @@ bytecodes: [
                 B(StaCurrentContextSlot), U8(3),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(5), U8(5),
                 B(CreateClosure), U8(8), U8(2), U8(2),
-                B(Star5),
                 B(SetNamedProperty), R(4), U8(9), U8(1),
                 B(CreateClosure), U8(10), U8(3), U8(2),
-                B(Star7),
-                B(CallProperty0), R(7), R(4), U8(3),
+                B(Star6),
+                B(CallProperty0), R(6), R(4), U8(3),
                 B(PopContext), R(3),
                 B(Mov), R(4), R(0),
   /*   38 E> */ B(CreateBlockContext), U8(11),
@@ -226,8 +223,8 @@ bytecodes: [
                 B(Star9),
                 B(LdaConstant), U8(7),
                 B(TestEqualStrict), R(9), U8(0),
-                B(Mov), R(10), R(7),
                 B(Mov), R(4), R(6),
+                B(Mov), R(10), R(7),
                 B(JumpIfFalse), U8(7),
                 B(CallRuntime), U16(Runtime::kThrowStaticPrototypeError), R(0), U8(0),
                 B(Ldar), R(9),
@@ -236,11 +233,10 @@ bytecodes: [
                 B(Star10),
                 B(CallRuntime), U16(Runtime::kDefineClass), R(5), U8(6),
                 B(CreateClosure), U8(17), U8(7), U8(2),
-                B(Star5),
                 B(SetNamedProperty), R(4), U8(9), U8(5),
                 B(CreateClosure), U8(18), U8(8), U8(2),
-                B(Star7),
-                B(CallProperty0), R(7), R(4), U8(7),
+                B(Star6),
+                B(CallProperty0), R(6), R(4), U8(7),
                 B(PopContext), R(3),
                 B(Mov), R(4), R(1),
   /*  122 E> */ B(CreateBlockContext), U8(19),
@@ -260,8 +256,8 @@ bytecodes: [
                 B(Star9),
                 B(LdaConstant), U8(7),
                 B(TestEqualStrict), R(9), U8(0),
-                B(Mov), R(1), R(7),
                 B(Mov), R(4), R(6),
+                B(Mov), R(1), R(7),
                 B(JumpIfFalse), U8(7),
                 B(CallRuntime), U16(Runtime::kThrowStaticPrototypeError), R(0), U8(0),
                 B(Ldar), R(9),
@@ -271,11 +267,10 @@ bytecodes: [
                 B(Ldar), R(4),
                 B(StaCurrentContextSlot), U8(5),
                 B(CreateClosure), U8(22), U8(10), U8(2),
-                B(Star5),
                 B(SetNamedProperty), R(4), U8(9), U8(9),
                 B(CreateClosure), U8(23), U8(11), U8(2),
-                B(Star7),
-                B(CallProperty0), R(7), R(4), U8(11),
+                B(Star6),
+                B(CallProperty0), R(6), R(4), U8(11),
                 B(PopContext), R(3),
                 B(Mov), R(4), R(2),
   /*  456 S> */ B(Ldar), R(0),
-- 
2.35.1

