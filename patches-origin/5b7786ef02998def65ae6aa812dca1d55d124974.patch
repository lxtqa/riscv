From 5b7786ef02998def65ae6aa812dca1d55d124974 Mon Sep 17 00:00:00 2001
From: Lu Yahan <yahan@iscas.ac.cn>
Date: Thu, 6 Apr 2023 12:47:43 +0800
Subject: [PATCH] [riscv][code] Merge kind_specific_flags with flags

Port commit cb8be519f0add9b76d2bd542f0924004fdb2c16c

Original commit message:
.. and other minor refactors:

- There's no reason to keep kind_specific_flags and flags separate,
  merge them into one field to reduce complexity.
- Remove the is_promise_rejection bit since it can be deduced from
  the builtin_id.
- Move DeoptimizableCodeIterator to deoptimizer.cc and rename it from
  OptimizedCodeIterator since that better reflects its behavior.
- Split out builtin_id initialization from its inappropriate spot in
  initialize_flags.
- More consistent names for header offset markers:
  kStartOfStrongFieldsOffset,
  kEndOfStrongFieldsWithMainCageBaseOffset,
  kEndOfStrongFieldsOffset.

Bug: v8:13789

Change-Id: I4d44bfd38a9b21b3af1d46ffcaf738538b288f81
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4405040
Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#86955}
---
 src/baseline/riscv/baseline-assembler-riscv-inl.h  | 5 ++---
 src/codegen/riscv/macro-assembler-riscv.cc         | 2 +-
 src/compiler/backend/riscv/code-generator-riscv.cc | 3 +--
 3 files changed, 4 insertions(+), 6 deletions(-)

diff --git a/src/baseline/riscv/baseline-assembler-riscv-inl.h b/src/baseline/riscv/baseline-assembler-riscv-inl.h
index f40f71136df..1a354a25e13 100644
--- a/src/baseline/riscv/baseline-assembler-riscv-inl.h
+++ b/src/baseline/riscv/baseline-assembler-riscv-inl.h
@@ -506,18 +506,17 @@ void BaselineAssembler::Switch(Register reg, int case_value_base,
   __ addi(t6, t6, Lo12);  // jump PC + Hi20 + Lo12
 
   int entry_size_log2 = 3;
+  __ BlockTrampolinePoolFor(num_labels * 2 + 5);
   __ CalcScaledAddress(t6, t6, reg, entry_size_log2);
   __ Jump(t6);
   {
-    MacroAssembler::BlockTrampolinePoolScope(masm());
-    __ BlockTrampolinePoolFor(num_labels * kInstrSize * 2);
     __ bind(&table);
     for (int i = 0; i < num_labels; ++i) {
       __ BranchLong(labels[i]);
     }
     DCHECK_EQ(num_labels * 2, __ InstructionsGeneratedSince(&table));
-    __ bind(&fallthrough);
   }
+  __ bind(&fallthrough);
 }
 
 #undef __
diff --git a/src/codegen/riscv/macro-assembler-riscv.cc b/src/codegen/riscv/macro-assembler-riscv.cc
index 159c761023c..ad46d833077 100644
--- a/src/codegen/riscv/macro-assembler-riscv.cc
+++ b/src/codegen/riscv/macro-assembler-riscv.cc
@@ -5755,7 +5755,7 @@ void MacroAssembler::JumpIfSmi(Register value, Label* smi_label,
 
 void MacroAssembler::JumpIfCodeIsMarkedForDeoptimization(
     Register code, Register scratch, Label* if_marked_for_deoptimization) {
-  Load32U(scratch, FieldMemOperand(code, Code::kKindSpecificFlagsOffset));
+  Load32U(scratch, FieldMemOperand(code, Code::kFlagsOffset));
   And(scratch, scratch, Operand(1 << Code::kMarkedForDeoptimizationBit));
   Branch(if_marked_for_deoptimization, ne, scratch, Operand(zero_reg));
 }
diff --git a/src/compiler/backend/riscv/code-generator-riscv.cc b/src/compiler/backend/riscv/code-generator-riscv.cc
index 6c37b3e1995..6e07d855b31 100644
--- a/src/compiler/backend/riscv/code-generator-riscv.cc
+++ b/src/compiler/backend/riscv/code-generator-riscv.cc
@@ -629,8 +629,7 @@ void CodeGenerator::BailoutIfDeoptimized() {
   int offset = InstructionStream::kCodeOffset - InstructionStream::kHeaderSize;
   __ LoadTaggedField(kScratchReg,
                      MemOperand(kJavaScriptCallCodeStartRegister, offset));
-  __ Lw(kScratchReg,
-        FieldMemOperand(kScratchReg, Code::kKindSpecificFlagsOffset));
+  __ Lw(kScratchReg, FieldMemOperand(kScratchReg, Code::kFlagsOffset));
   __ And(kScratchReg, kScratchReg,
          Operand(1 << Code::kMarkedForDeoptimizationBit));
   __ Jump(BUILTIN_CODE(isolate(), CompileLazyDeoptimizedCode),
-- 
2.35.1

