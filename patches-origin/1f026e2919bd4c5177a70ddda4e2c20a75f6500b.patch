From 1f026e2919bd4c5177a70ddda4e2c20a75f6500b Mon Sep 17 00:00:00 2001
From: Lu Yahan <yahan@iscas.ac.cn>
Date: Mon, 23 Oct 2023 14:58:22 +0800
Subject: [PATCH] [riscv][wasm][liftoff] Use root register for stack checks

Change-Id: Ic87bf01fdda02da8128aaa2377aa087ccb63b380
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4961064
Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#90527}
---
 src/codegen/riscv/macro-assembler-riscv.cc          | 13 +++----------
 .../baseline/riscv/liftoff-assembler-riscv-inl.h    | 11 +++++------
 2 files changed, 8 insertions(+), 16 deletions(-)

diff --git a/src/codegen/riscv/macro-assembler-riscv.cc b/src/codegen/riscv/macro-assembler-riscv.cc
index 4ab069f9d23..e62f97899e7 100644
--- a/src/codegen/riscv/macro-assembler-riscv.cc
+++ b/src/codegen/riscv/macro-assembler-riscv.cc
@@ -4903,16 +4903,9 @@ void MacroAssembler::MovToFloatParameters(DoubleRegister src1,
 
 void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {
   DCHECK(root_array_available());
-  Isolate* isolate = this->isolate();
-  ExternalReference limit =
-      kind == StackLimitKind::kRealStackLimit
-          ? ExternalReference::address_of_real_jslimit(isolate)
-          : ExternalReference::address_of_jslimit(isolate);
-  DCHECK(MacroAssembler::IsAddressableThroughRootRegister(isolate, limit));
-
-  intptr_t offset =
-      MacroAssembler::RootRegisterOffsetForExternalReference(isolate, limit);
-  CHECK(is_int32(offset));
+  intptr_t offset = kind == StackLimitKind::kRealStackLimit
+                        ? IsolateData::real_jslimit_offset()
+                        : IsolateData::jslimit_offset();
   LoadWord(destination,
            MemOperand(kRootRegister, static_cast<int32_t>(offset)));
 }
diff --git a/src/wasm/baseline/riscv/liftoff-assembler-riscv-inl.h b/src/wasm/baseline/riscv/liftoff-assembler-riscv-inl.h
index 59481e75ccd..cf8f4350ac4 100644
--- a/src/wasm/baseline/riscv/liftoff-assembler-riscv-inl.h
+++ b/src/wasm/baseline/riscv/liftoff-assembler-riscv-inl.h
@@ -137,10 +137,7 @@ void LiftoffAssembler::PatchPrepareStackFrame(
   Label continuation;
   if (frame_size < v8_flags.stack_size * 1024) {
     Register stack_limit = kScratchReg;
-    LoadWord(stack_limit,
-             FieldMemOperand(kWasmInstanceRegister,
-                             WasmInstanceObject::kRealStackLimitAddressOffset));
-    LoadWord(stack_limit, MemOperand(stack_limit));
+    LoadStackLimit(stack_limit, StackLimitKind::kRealStackLimit);
     AddWord(stack_limit, stack_limit, Operand(frame_size));
     Branch(&continuation, uge, sp, Operand(stack_limit));
   }
@@ -2206,8 +2203,10 @@ void LiftoffAssembler::emit_f64x2_qfms(LiftoffRegister dst,
   vmv_vv(dst.fp().toV(), src1.fp().toV());
 }
 
-void LiftoffAssembler::StackCheck(Label* ool_code, Register limit_address) {
-  MacroAssembler::LoadWord(limit_address, MemOperand(limit_address));
+void LiftoffAssembler::StackCheck(Label* ool_code) {
+  UseScratchRegisterScope temps(this);
+  Register limit_address = temps.Acquire();
+  LoadStackLimit(limit_address, StackLimitKind::kInterruptStackLimit);
   MacroAssembler::Branch(ool_code, ule, sp, Operand(limit_address));
 }
 
-- 
2.35.1

