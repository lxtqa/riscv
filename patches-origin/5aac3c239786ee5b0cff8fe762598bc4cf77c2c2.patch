From 5aac3c239786ee5b0cff8fe762598bc4cf77c2c2 Mon Sep 17 00:00:00 2001
From: Jakob Linke <jgruber@chromium.org>
Date: Thu, 11 May 2023 09:59:54 +0000
Subject: [PATCH] Revert "[osr] Avoid handling interrupts in the middle of OSR"

This reverts commit 33db04dc7e11b9ac13444454e725e12b04dc174c.

Reason for revert: Reverting in favor of crrev.com/c/4518604

Original change's description:
> [osr] Avoid handling interrupts in the middle of OSR
>
> .. since interrupts may trigger code deoptimization, which in turn
> invalidates assumptions we've already checked at the beginning of
> OnStackReplacement.
>
> This CL removes the problematic interrupt budget updates around OSR.
>
> Fixed: chromium:1432470,chromium:1442603
> Change-Id: I035acb8f6cc677917e82d3a7ad1082a5c7128904
> Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4518765
> Reviewed-by: Toon Verwaest <verwaest@chromium.org>
> Auto-Submit: Jakob Linke <jgruber@chromium.org>
> Commit-Queue: Toon Verwaest <verwaest@chromium.org>
> Cr-Commit-Position: refs/heads/main@{#87570}

Change-Id: I0d51aadecdc9371a935d060de8ce1c492edffed5
No-Presubmit: true
No-Tree-Checks: true
No-Try: true
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4521026
Reviewed-by: Toon Verwaest <verwaest@chromium.org>
Auto-Submit: Jakob Linke <jgruber@chromium.org>
Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
Commit-Queue: Toon Verwaest <verwaest@chromium.org>
Cr-Commit-Position: refs/heads/main@{#87588}
---
 src/baseline/baseline-compiler.cc        |  7 +++-
 src/interpreter/interpreter-assembler.cc |  9 +++-
 test/mjsunit/mjsunit.status              |  3 --
 test/mjsunit/regress/regress-1432470.js  | 39 -----------------
 test/mjsunit/regress/regress-1442603.js  | 53 ------------------------
 5 files changed, 12 insertions(+), 99 deletions(-)
 delete mode 100644 test/mjsunit/regress/regress-1432470.js
 delete mode 100644 test/mjsunit/regress/regress-1442603.js

diff --git a/src/baseline/baseline-compiler.cc b/src/baseline/baseline-compiler.cc
index db592ffe4a..30e2baf446 100644
--- a/src/baseline/baseline-compiler.cc
+++ b/src/baseline/baseline-compiler.cc
@@ -1943,9 +1943,12 @@ void BaselineCompiler::VisitJumpLoop() {
     }
 
     __ Bind(&osr);
-    // Note: skipping the interrupt_budget update here to avoid handling
-    // interrupts in the middle of the OSR sequence.
+    Label do_osr;
+    int weight = bytecode_->length() * v8_flags.osr_to_tierup;
+    UpdateInterruptBudgetAndJumpToLabel(-weight, nullptr, &do_osr);
+    __ Bind(&do_osr);
     CallBuiltin<Builtin::kBaselineOnStackReplacement>(maybe_target_code);
+    __ AddToInterruptBudgetAndJumpIfNotExceeded(weight, nullptr);
     __ Jump(&osr_not_armed, Label::kNear);
   }
 #endif  // !V8_JITLESS
diff --git a/src/interpreter/interpreter-assembler.cc b/src/interpreter/interpreter-assembler.cc
index b55d4071d6..b5b117892a 100644
--- a/src/interpreter/interpreter-assembler.cc
+++ b/src/interpreter/interpreter-assembler.cc
@@ -1410,10 +1410,15 @@ void InterpreterAssembler::OnStackReplacement(
 
   BIND(&osr_to_turbofan);
   {
-    // Note: skipping the interrupt_budget update here to avoid handling
-    // interrupts in the middle of the OSR sequence.
+    TNode<IntPtrT> length =
+        LoadAndUntagFixedArrayBaseLength(BytecodeArrayTaggedPointer());
+    TNode<IntPtrT> weight =
+        IntPtrMul(length, IntPtrConstant(v8_flags.osr_to_tierup));
+    DecreaseInterruptBudget(TruncateWordToInt32(weight));
     Callable callable = CodeFactory::InterpreterOnStackReplacement(isolate());
     CallStub(callable, context, maybe_target_code.value());
+    UpdateInterruptBudget(
+        Int32Mul(TruncateWordToInt32(weight), Int32Constant(-1)));
     JumpBackward(relative_jump);
   }
 
diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
index 84c714b1a2..676ad4890c 100644
--- a/test/mjsunit/mjsunit.status
+++ b/test/mjsunit/mjsunit.status
@@ -569,9 +569,6 @@
   'wasm/bigint-opt': [SKIP],
   'wasm/simd-lane-memory64': [SKIP],
   'regress/regress-1320641': [SKIP],
-
-  # Needs a huge Uint8Array.
-  'regress/regress-1432470': [SKIP],
 }],  # 'arch in (ia32, arm, riscv32)'
 
 ##############################################################################
diff --git a/test/mjsunit/regress/regress-1432470.js b/test/mjsunit/regress/regress-1432470.js
deleted file mode 100644
index 3915ca4fe6..0000000000
--- a/test/mjsunit/regress/regress-1432470.js
+++ /dev/null
@@ -1,39 +0,0 @@
-// Copyright 2023 the V8 project authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-const v2 = new Uint8ClampedArray(216);
-const v5 = new BigInt64Array(5);
-const v8 = new Uint32Array(2);
-for (let v9 = 0; v9 < 5; v9++) {
-  const v12 = new Float32Array(4096);
-  function f13() {
-    return f13;
-  }
-  const v14 = f13();
-  const v16 = 7 * v14;
-  const v17 = +v16;
-  const v18 = 4096 + v14;
-  const v19 = v18 * v17;
-  class C21 extends Array {
-    constructor(a23, a24, a25, a26) {
-      super();
-      v18.toLowerCase(a24, 7, 7, f13);
-    }
-  }
-  const v28 = new C21(v19, v16, 7, C21);
-  const v31 = new Uint8Array(1073741824);
-  for (let i = 0; i < 25; i++) {
-    let v36 = ("valueOf")[216];
-    for (let v37 = 0; v37 < 50; v37++) {
-      for (let v38 = 0; v38 < 50; v38++) {
-        v36 % (4096 >>> 4096);
-        v36++;
-      }
-      0 == 99;
-      class C45 {
-      }
-    }
-  }
-  Array(56393);
-}
diff --git a/test/mjsunit/regress/regress-1442603.js b/test/mjsunit/regress/regress-1442603.js
deleted file mode 100644
index 6bb7c78377..0000000000
--- a/test/mjsunit/regress/regress-1442603.js
+++ /dev/null
@@ -1,53 +0,0 @@
-// Copyright 2023 the V8 project authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// Flags: --expose-gc --stress-flush-code
-// Flags: --always-turbofan --always-osr --osr-to-tierup=200
-
-function main() {
-  function f0() {
-    try {
-      var v0 = 0;
-    } catch (v3) { }
-    try {
-      var v1 = new Array(23);
-    } catch (v4) { }
-    try {
-      for (; v0 < v1.length; v0++) {
-        v1[v0] = new Uint32Array(262142);
-        v1[v0] = new Uint32Array(262139);
-        v1[v0] = new Uint32Array(262139);
-      }
-    } catch (v5) { }
-    v0 = -13;
-    try {
-      var v2 = [];
-    } catch (v6) { }
-    try {
-      var v1 = new Array(23);
-    } catch (v7) { }
-    try {
-      v2.xxx = "xxx";
-    } catch (e) { }
-    try {
-      for (var v0 = 0; v0 < 1024; v0++) {
-        v2[v0] = new Array(v0);
-        v2[v0] = new Array(v0);
-        v2[v0] = new Array(v0);
-        v2[v0].xxx = "xxx " + v0;
-        v2[v0].xxx = "xxx " + v0;
-        v2[v0].xxx = "xxx " + v0;
-      }
-    } catch (v8) { }
-    try {
-      gc();
-      a(900000)[b(b(900000), 900000)] = 900000;
-    } catch (v9) { }
-  }
-  gc();
-  f0();
-}
-main();
-main();
-main();
-- 
2.35.1

