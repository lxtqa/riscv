From 35e6a1107a07aa1ea26f64a8d55cee8a86becddc Mon Sep 17 00:00:00 2001
From: Lu Yahan <yahan@iscas.ac.cn>
Date: Tue, 8 Mar 2022 16:23:28 +0800
Subject: [PATCH] [riscv64] add a7 into wasm-linkage

and delete extra asm_comment

Change-Id: Ia22f4bc622387e7c9a1c830b9f213d9554f0029e
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3507121
Reviewed-by: Clemens Backes <clemensb@chromium.org>
Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#79401}
---
 src/builtins/riscv64/builtins-riscv64.cc        | 5 ++++-
 src/codegen/riscv64/macro-assembler-riscv64.cc  | 1 -
 src/execution/riscv64/frame-constants-riscv64.h | 2 +-
 src/wasm/wasm-linkage.h                         | 2 +-
 4 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/builtins/riscv64/builtins-riscv64.cc b/src/builtins/riscv64/builtins-riscv64.cc
index 5a9e26fce6..9d41647613 100644
--- a/src/builtins/riscv64/builtins-riscv64.cc
+++ b/src/builtins/riscv64/builtins-riscv64.cc
@@ -2772,6 +2772,9 @@ void Builtins::Generate_WasmCompileLazy(MacroAssembler* masm) {
     }
     // Also push a1, because we must push multiples of 16 bytes (see
     // {TurboAssembler::PushCPURegList}.
+    CHECK_EQ(1, NumRegs(gp_regs) % 2);
+    gp_regs |= a1.bit();
+    // Ensure that A1 will not be repeated.
     CHECK_EQ(0, NumRegs(gp_regs) % 2);
 
     RegList fp_regs = 0;
@@ -2779,7 +2782,7 @@ void Builtins::Generate_WasmCompileLazy(MacroAssembler* masm) {
       fp_regs |= fp_param_reg.bit();
     }
 
-    CHECK_EQ(NumRegs(gp_regs), arraysize(wasm::kGpParamRegisters));
+    CHECK_EQ(NumRegs(gp_regs), arraysize(wasm::kGpParamRegisters) + 1);
     CHECK_EQ(NumRegs(fp_regs), arraysize(wasm::kFpParamRegisters));
     CHECK_EQ(WasmCompileLazyFrameConstants::kNumberOfSavedGpParamRegs,
              NumRegs(gp_regs));
diff --git a/src/codegen/riscv64/macro-assembler-riscv64.cc b/src/codegen/riscv64/macro-assembler-riscv64.cc
index fcf7256d29..ad7d446c73 100644
--- a/src/codegen/riscv64/macro-assembler-riscv64.cc
+++ b/src/codegen/riscv64/macro-assembler-riscv64.cc
@@ -4675,7 +4675,6 @@ void MacroAssembler::AssertFunction(Register object) {
 void MacroAssembler::AssertCallableFunction(Register object) {
   if (!FLAG_debug_code) return;
   ASM_CODE_COMMENT(this);
-  ASM_CODE_COMMENT(this);
   STATIC_ASSERT(kSmiTag == 0);
   AssertNotSmi(object, AbortReason::kOperandIsASmiAndNotAFunction);
   push(object);
diff --git a/src/execution/riscv64/frame-constants-riscv64.h b/src/execution/riscv64/frame-constants-riscv64.h
index ab9de0528e..a92f3dd3d8 100644
--- a/src/execution/riscv64/frame-constants-riscv64.h
+++ b/src/execution/riscv64/frame-constants-riscv64.h
@@ -24,7 +24,7 @@ class EntryFrameConstants : public AllStatic {
 class WasmCompileLazyFrameConstants : public TypedFrameConstants {
  public:
   static constexpr int kNumberOfSavedGpParamRegs =
-      arraysize(wasm::kGpParamRegisters);
+      arraysize(wasm::kGpParamRegisters) + 1;
   static constexpr int kNumberOfSavedFpParamRegs =
       arraysize(wasm::kFpParamRegisters);
   static constexpr int kNumberOfSavedAllParamRegs =
diff --git a/src/wasm/wasm-linkage.h b/src/wasm/wasm-linkage.h
index ecf59f9ed5..77ed549c90 100644
--- a/src/wasm/wasm-linkage.h
+++ b/src/wasm/wasm-linkage.h
@@ -122,7 +122,7 @@ constexpr DoubleRegister kFpReturnRegisters[] = {d0, d2};
 // ===========================================================================
 // Note that kGpParamRegisters and kFpParamRegisters are used in
 // Builtins::Generate_WasmCompileLazy (builtins-riscv64.cc)
-constexpr Register kGpParamRegisters[] = {a0, a2, a3, a4, a5, a6};
+constexpr Register kGpParamRegisters[] = {a0, a2, a3, a4, a5, a6, a7};
 constexpr Register kGpReturnRegisters[] = {a0, a1};
 constexpr DoubleRegister kFpParamRegisters[] = {fa0, fa1, fa2, fa3,
                                                 fa4, fa5, fa6};
-- 
2.35.1

