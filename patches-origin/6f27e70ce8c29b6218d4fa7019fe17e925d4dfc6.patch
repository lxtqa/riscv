From 6f27e70ce8c29b6218d4fa7019fe17e925d4dfc6 Mon Sep 17 00:00:00 2001
From: Michael Achenbach <machenbach@chromium.org>
Date: Sat, 13 May 2023 15:06:20 +0200
Subject: [PATCH] Reland "[test] Align GN switches and test-runner status
 entries"

This is a reland of commit 00a2e27aa196887b92e6233d31c966cec4d34d70

Unchanged, but requires https://crrev.com/c/4529785 to land first.

Original change's description:
> [V8] Align GN switches and test-runner status entries
>
> This aligns all build-time flag names set in V8's BUILD.gn file, with
> their respective counterparts in the test framework mainly used in
> test-status files.
>
> We keep names short and drop redundant qualifiers like 'v8_enable_'
> where not needed. A few places where qualifiers are needed:
> - has_turbofan disambiguates from the turbofan runtime variant
> - is_android disambiguates from the android keyword in status files
> - v8_cfi disambiguates from the global cfi flag
>
> This prepares the follow up CL where we automatically generate the
> test-framework counterparts of the build-flags, which makes adding
> such a switch a one-line change instead of >10 lines in >10 files
> as in https://crrev.com/c/4521710.
>
> Cq-Include-Trybots: luci.v8.try:v8_numfuzz_dbg
> Cq-Include-Trybots: luci.v8.try:v8_numfuzz_rel
> Cq-Include-Trybots: luci.v8.try:v8_numfuzz_tsan_rel
> Cq-Include-Trybots: luci.v8.try:v8_linux_noi18n_rel
> Cq-Include-Trybots: luci.v8.try:v8_android_arm64_n5x_rel
> Cq-Include-Trybots: luci.v8.try:v8_linux64_msan_rel
> Cq-Include-Trybots: luci.v8.try:v8_linux64_ubsan_rel
> Bug: chromium:1132088
> Change-Id: If1956745cc77618f577e509efbf449eb9da55292
> Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4526136
> Reviewed-by: Liviu Rau <liviurau@google.com>
> Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
> Commit-Queue: Michael Achenbach <machenbach@chromium.org>
> Cr-Commit-Position: refs/heads/main@{#87660}

Bug: chromium:1132088
Change-Id: Id33cc669148864cc4bf95a527a50643c747ab322
Cq-Include-Trybots: luci.v8.try:v8_numfuzz_dbg
Cq-Include-Trybots: luci.v8.try:v8_numfuzz_rel
Cq-Include-Trybots: luci.v8.try:v8_numfuzz_tsan_rel
Cq-Include-Trybots: luci.v8.try:v8_linux_noi18n_rel
Cq-Include-Trybots: luci.v8.try:v8_android_arm64_n5x_rel
Cq-Include-Trybots: luci.v8.try:v8_linux64_msan_rel
Cq-Include-Trybots: luci.v8.try:v8_linux64_ubsan_rel
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4529150
Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
Commit-Queue: Michael Achenbach <machenbach@chromium.org>
Cr-Commit-Position: refs/heads/main@{#87666}
---
 BUILD.gn                                      | 103 ++++++------
 test/benchmarks/benchmarks.status             |   4 +-
 test/cctest/cctest.status                     |  16 +-
 test/debugger/debugger.status                 |   4 +-
 test/inspector/inspector.status               |   4 +-
 test/intl/intl.status                         |   4 +-
 test/message/message.status                   |   4 +-
 test/mjsunit/mjsunit.status                   |  40 ++---
 test/mozilla/mozilla.status                   |  14 +-
 test/test262/test262.status                   |   4 +-
 test/unittests/unittests.status               |  18 +--
 test/webkit/webkit.status                     |   6 +-
 tools/testrunner/base_runner.py               |  65 ++++----
 tools/testrunner/build_config.py              | 151 +++++++++---------
 tools/testrunner/local/variants.py            |   6 +-
 tools/testrunner/standard_runner.py           |   8 +-
 tools/testrunner/standard_runner_test.py      |  26 +--
 .../testroot1/out/build/v8_build_config.json  |  78 ++++-----
 .../testroot2/out/build/v8_build_config.json  |  78 ++++-----
 .../testroot3/out/build/v8_build_config.json  |  78 ++++-----
 .../out.gn/build/v8_build_config.json         |  78 ++++-----
 .../testroot6/out/build/v8_build_config.json  |  78 ++++-----
 22 files changed, 436 insertions(+), 431 deletions(-)

diff --git a/BUILD.gn b/BUILD.gn
index 4754e117863..b3fa22644a8 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -2406,67 +2406,68 @@ action("v8_dump_build_config") {
   outputs = [ "$root_out_dir/v8_build_config.json" ]
   is_DEBUG_defined = v8_enable_debugging_features || dcheck_always_on
   is_full_debug = v8_enable_debugging_features && !v8_optimized_debug
+  write_barriers = !v8_disable_write_barriers
+
+  mips_arch_variant_var = ""
+  mips_use_msa_var = false
+  if (v8_current_cpu == "mips64" || v8_current_cpu == "mips64el") {
+    mips_arch_variant_var = mips_arch_variant
+    mips_use_msa_var = mips_use_msa
+  }
+
   args = [
     rebase_path("$root_out_dir/v8_build_config.json", root_build_dir),
     "current_cpu=\"$current_cpu\"",
     "dcheck_always_on=$dcheck_always_on",
     "is_android=$is_android",
-    "is_asan=$is_asan",
-    "is_cfi=$is_cfi",
-    "is_clang=$is_clang",
-    "is_clang_coverage=$use_clang_coverage",
-    "is_component_build=$is_component_build",
-    "is_debug=$v8_enable_debugging_features",
-    "is_DEBUG_defined=$is_DEBUG_defined",
-    "is_full_debug=$is_full_debug",
+    "asan=$is_asan",
+    "cfi=$is_cfi",
+    "clang=$is_clang",
+    "clang_coverage=$use_clang_coverage",
+    "component_build=$is_component_build",
+    "debugging_features=$v8_enable_debugging_features",
+    "DEBUG_defined=$is_DEBUG_defined",
+    "full_debug=$is_full_debug",
     "is_ios=$is_ios",
-    "is_msan=$is_msan",
-    "is_official_build=$is_official_build",
-    "is_tsan=$is_tsan",
-    "is_ubsan_vptr=$is_ubsan_vptr",
+    "msan=$is_msan",
+    "official_build=$is_official_build",
+    "tsan=$is_tsan",
+    "ubsan=$is_ubsan",
     "target_cpu=\"$target_cpu\"",
-    "v8_code_comments=$v8_code_comments",
-    "v8_control_flow_integrity=$v8_control_flow_integrity",
+    "code_comments=$v8_code_comments",
+    "v8_cfi=$v8_control_flow_integrity",
     "v8_current_cpu=\"$v8_current_cpu\"",
-    "v8_dict_property_const_tracking=$v8_dict_property_const_tracking",
-    "v8_disable_write_barriers=$v8_disable_write_barriers",
-    "v8_enable_atomic_object_field_writes=" +
-        "$v8_enable_atomic_object_field_writes",
-    "v8_enable_cet_shadow_stack=$v8_enable_cet_shadow_stack",
-    "v8_enable_concurrent_marking=$v8_enable_concurrent_marking",
-    "v8_enable_conservative_stack_scanning=" +
-        "$v8_enable_conservative_stack_scanning",
-    "v8_enable_debug_code=$v8_enable_debug_code",
-    "v8_enable_direct_local=$v8_enable_direct_local",
-    "v8_enable_disassembler=$v8_enable_disassembler",
-    "v8_enable_gdbjit=$v8_enable_gdbjit",
-    "v8_enable_i18n_support=$v8_enable_i18n_support",
-    "v8_enable_lite_mode=$v8_enable_lite_mode",
-    "v8_enable_maglev=$v8_enable_maglev",
-    "v8_enable_pointer_compression=$v8_enable_pointer_compression",
-    "v8_enable_pointer_compression_shared_cage=" +
-        "$v8_enable_pointer_compression_shared_cage",
-    "v8_enable_runtime_call_stats=$v8_enable_runtime_call_stats",
-    "v8_enable_sandbox=$v8_enable_sandbox",
-    "v8_enable_shared_ro_heap=$v8_enable_shared_ro_heap",
-    "v8_enable_single_generation=$v8_enable_single_generation",
-    "v8_enable_slow_dchecks=$v8_enable_slow_dchecks",
-    "v8_enable_third_party_heap=$v8_enable_third_party_heap",
-    "v8_enable_turbofan=$v8_enable_turbofan",
-    "v8_enable_verify_csa=$v8_enable_verify_csa",
-    "v8_enable_verify_heap=$v8_enable_verify_heap",
-    "v8_enable_verify_predictable=$v8_enable_verify_predictable",
-    "v8_enable_webassembly=$v8_enable_webassembly",
-    "v8_jitless=$v8_jitless",
+    "dict_property_const_tracking=$v8_dict_property_const_tracking",
+    "write_barriers=$write_barriers",
+    "atomic_object_field_writes=$v8_enable_atomic_object_field_writes",
+    "cet_shadow_stack=$v8_enable_cet_shadow_stack",
+    "concurrent_marking=$v8_enable_concurrent_marking",
+    "conservative_stack_scanning=$v8_enable_conservative_stack_scanning",
+    "debug_code=$v8_enable_debug_code",
+    "direct_local=$v8_enable_direct_local",
+    "disassembler=$v8_enable_disassembler",
+    "gdbjit=$v8_enable_gdbjit",
+    "i18n=$v8_enable_i18n_support",
+    "lite_mode=$v8_enable_lite_mode",
+    "has_maglev=$v8_enable_maglev",
+    "pointer_compression=$v8_enable_pointer_compression",
+    "pointer_compression_shared_cage=$v8_enable_pointer_compression_shared_cage",
+    "runtime_call_stats=$v8_enable_runtime_call_stats",
+    "sandbox=$v8_enable_sandbox",
+    "shared_ro_heap=$v8_enable_shared_ro_heap",
+    "single_generation=$v8_enable_single_generation",
+    "slow_dchecks=$v8_enable_slow_dchecks",
+    "third_party_heap=$v8_enable_third_party_heap",
+    "has_turbofan=$v8_enable_turbofan",
+    "verify_csa=$v8_enable_verify_csa",
+    "verify_heap=$v8_enable_verify_heap",
+    "verify_predictable=$v8_enable_verify_predictable",
+    "has_webassembly=$v8_enable_webassembly",
+    "has_jitless=$v8_jitless",
     "v8_target_cpu=\"$v8_target_cpu\"",
+    "mips_arch_variant=\"$mips_arch_variant_var\"",
+    "mips_use_msa=$mips_use_msa_var",
   ]
-
-  if (v8_current_cpu == "mips64" || v8_current_cpu == "mips64el") {
-    args += [
-      "mips_arch_variant=\"$mips_arch_variant\"",
-      "mips_use_msa=$mips_use_msa",
-    ]
-  }
 }
 
 ###############################################################################
diff --git a/test/benchmarks/benchmarks.status b/test/benchmarks/benchmarks.status
index 663f2acc282..acf6f70e50b 100644
--- a/test/benchmarks/benchmarks.status
+++ b/test/benchmarks/benchmarks.status
@@ -115,14 +115,14 @@
   'octane/gbemu-part1': [SKIP],
 }], # gc_fuzzer or deopt_fuzzer
 
-['predictable', {
+['verify_predictable', {
   # https://crbug.com/v8/8537
   'octane/typescript': [SKIP],
 
   # https://crbug.com/v8/13234
   'octane/box2d': [SKIP],
   'octane/earley-boyer': [SKIP],
-}],  # 'predictable'
+}],  # 'verify_predictable'
 
 ['variant == stress_snapshot', {
   '*': [SKIP],  # only relevant for mjsunit tests.
diff --git a/test/cctest/cctest.status b/test/cctest/cctest.status
index bb93bc1d1ed..bfb98a4eb2d 100644
--- a/test/cctest/cctest.status
+++ b/test/cctest/cctest.status
@@ -35,12 +35,12 @@
   # These tests always fail.  They are here to test test.py.  If
   # they don't fail then test.py has failed.
   #
-  # With the is_official_build flag CHECK failures and UNREACHABLE do not pass
+  # With the official_build flag CHECK failures and UNREACHABLE do not pass
   # through the normal V8_Fatal and we can't distinguish FAIL from CRASH.
   # TODO(v8:13945, olivf) We could make FAILs in official builds
   #                       distinguishable from crashes and improve the test
   #                       runner. So far, it only affects very few tests.
-  'test-serialize/TestCheckThatAlwaysFails': [FAIL, ['is_official_build', CRASH]],
+  'test-serialize/TestCheckThatAlwaysFails': [FAIL, ['official_build', CRASH]],
   'test-serialize/TestFatal': [FAIL],
   'test-api/SealHandleScope': [FAIL],
 
@@ -93,8 +93,8 @@
   'test-serialize/SnapshotCreatorNoExternalReferencesCustomFail2': [FAIL],
 
   # Test that misuse of PopAndReturn does not compile.
-  'test-code-stub-assembler/PopAndReturnFromJSBuiltinWithStackParameters' : [FAIL, ['is_official_build', CRASH]],
-  'test-code-stub-assembler/PopAndReturnFromTFCBuiltinWithStackParameters' : [FAIL, ['is_official_build', CRASH]],
+  'test-code-stub-assembler/PopAndReturnFromJSBuiltinWithStackParameters' : [FAIL, ['official_build', CRASH]],
+  'test-code-stub-assembler/PopAndReturnFromTFCBuiltinWithStackParameters' : [FAIL, ['official_build', CRASH]],
 
   # Slow tests.
   'test-api/InternalFieldsSubclassing': [PASS, SLOW],
@@ -255,12 +255,12 @@
 }],  # 'tsan == True'
 
 ##############################################################################
-['is_full_debug', {
+['full_debug', {
   # Tests too slow in non-optimized debug mode.
   'test-api/InternalFieldsSubclassing': [SKIP],
   'test-concurrent-allocation/ConcurrentAllocationInLargeSpace': [SKIP],
   'test-heap/TestInternalWeakLists': [SKIP],
-}],  # 'is_full_debug'
+}],  # 'full_debug'
 
 ##############################################################################
 ['byteorder == big', {
@@ -567,14 +567,14 @@
 }], # lite_mode or variant == jitless
 
 ##############################################################################
-['jitless_build_mode', {
+['has_jitless', {
   # invocation_count maintenance is disabled.
   'test-debug/DebugCoverage*': [SKIP],
   # Feedback collection maintenance is (mostly) disabled.
   'test-heap/IncrementalMarkingPreservesMonomorphicCallIC': [SKIP],
   # WebAssembly not included.
   'test-api/Threading8': [SKIP],
-}],  # jitless_build_mode
+}],  # has_jitless
 
 ##############################################################################
 ['lite_mode', {
diff --git a/test/debugger/debugger.status b/test/debugger/debugger.status
index 0fccc7f1f37..da77cbf09c5 100644
--- a/test/debugger/debugger.status
+++ b/test/debugger/debugger.status
@@ -72,7 +72,7 @@
 }],  # 'gc_fuzzer'
 
 ##############################################################################
-['predictable == True', {
+['verify_predictable', {
   # https://crbug.com/v8/8147
   'debug/debug-liveedit-*': [SKIP],
   'debug/debug-set-variable-value': [SKIP],
@@ -81,7 +81,7 @@
   'debug/regress/regress-opt-after-debug-deopt': [SKIP],
   'debug/regress/regress-prepare-break-while-recompile': [SKIP],
   'regress/regress-7421': [SKIP],
-}],  # 'predictable == True'
+}],  # 'verify_predictable'
 
 ##############################################################################
 ['variant == no_wasm_traps', {
diff --git a/test/inspector/inspector.status b/test/inspector/inspector.status
index 454b0ca3750..fd1f3e7d1f0 100644
--- a/test/inspector/inspector.status
+++ b/test/inspector/inspector.status
@@ -533,9 +533,9 @@
 }],  # tsan and not concurrent_marking
 
 ##############################################################################
-['no_i18n == True', {
+['not i18n', {
   'runtime/evaluate-without-side-effects-i18n': [SKIP],
-}],  # no_i18n == True
+}],  # not i18n
 
 ##############################################################################
 ['lite_mode or variant in (nooptimization, jitless, assert_types)', {
diff --git a/test/intl/intl.status b/test/intl/intl.status
index 6dbb9d3e834..6b84727b814 100644
--- a/test/intl/intl.status
+++ b/test/intl/intl.status
@@ -40,9 +40,9 @@
 }],  # mode == debug
 
 ##############################################################################
-['no_i18n', {
+['not i18n', {
   'string-localecompare': [SKIP],
-}],  # no_i18n
+}],  # not i18n
 
 ################################################################################
 ['gc_stress', {
diff --git a/test/message/message.status b/test/message/message.status
index f04aff4cf98..2fcc62723ec 100644
--- a/test/message/message.status
+++ b/test/message/message.status
@@ -50,11 +50,11 @@
   '*': [SKIP],
 }],  # variant == code_serializer
 
-['no_i18n == True', {
+['not i18n', {
   'fail/list-format*': [SKIP],
   # Needs the StringPrototypeToLowerCaseIntl builtin.
   'wasm-recognize-imports': [SKIP],
-}],  # no_i18n == True
+}],  # not i18n
 
 ################################################################################
 ['mode == release', {
diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
index ee59fa368d7..e7f7aeec453 100644
--- a/test/mjsunit/mjsunit.status
+++ b/test/mjsunit/mjsunit.status
@@ -107,9 +107,9 @@
   ##############################################################################
   # Tests verifying CHECK and ASSERT.
   #
-  # With the is_official_build flag CHECK failures can't be distinguished from
+  # With the official_build flag CHECK failures can't be distinguished from
   # CRASH. See cctest.status for details (v8:13945).
-  'verify-check-false': [FAIL, NO_VARIANTS, ['is_official_build', CRASH]],
+  'verify-check-false': [FAIL, NO_VARIANTS, ['official_build', CRASH]],
   'verify-assert-false': [NO_VARIANTS, ['mode == release and dcheck_always_on == False', PASS], ['mode == debug', FAIL]],
 
   ##############################################################################
@@ -160,7 +160,7 @@
   'wasm/compare-exchange-stress': [PASS, SLOW, NO_VARIANTS],
   'wasm/compare-exchange64-stress': [PASS, SLOW, NO_VARIANTS],
   'wasm/code-space-overflow': [PASS, SLOW, NO_VARIANTS, ['gc_stress == True or (simulator_run and mode == debug)', SKIP]],
-  'wasm/max-wasm-functions': [PASS, SLOW, ['mode != release or dcheck_always_on or simulator_run or predictable', SKIP], ['tsan', SKIP]],
+  'wasm/max-wasm-functions': [PASS, SLOW, ['mode != release or dcheck_always_on or simulator_run or verify_predictable', SKIP], ['tsan', SKIP]],
 
   # Very slow on ARM, MIPS, RISCV and LOONG, contains no architecture dependent code.
   'unicode-case-overoptimization0': [PASS, NO_VARIANTS, ['arch in (arm, arm64, mips64el, mips64, riscv64, riscv32, loong64)', SKIP]],
@@ -179,11 +179,11 @@
 
   # OOM with too many isolates/memory objects (https://crbug.com/1010272)
   # Predictable tests fail due to race between postMessage and GrowMemory
-  'regress/wasm/regress-1010272': [PASS, HEAVY, NO_VARIANTS, ['system == android', SKIP], ['predictable', SKIP]],
+  'regress/wasm/regress-1010272': [PASS, HEAVY, NO_VARIANTS, ['system == android', SKIP], ['verify_predictable', SKIP]],
 
-  # Only makes sense in the no_i18n variant.
+  # Only makes sense without i18n.
   'es6/unicode-regexp-ignore-case-noi18n':
-      [['no_i18n == True', PASS], ['no_i18n == False', FAIL]],
+      [['not i18n', PASS], ['i18n', FAIL]],
 
   # Needs to be adapted after changes to Function constructor. chromium:1065094
   'cross-realm-filtering': [SKIP],
@@ -447,10 +447,10 @@
 }],  # not has_webassembly or variant == jitless
 
 ##############################################################################
-['jitless_build_mode', {
+['has_jitless', {
   # invocation_count maintenance is disabled.
   'code-coverage*': [SKIP],
-}],  # jitless_build_mode
+}],  # has_jitless
 
 ##############################################################################
 ['lite_mode or variant == jitless', {
@@ -492,7 +492,7 @@
 }],  # 'lite_mode or variant == jitless'
 
 ##############################################################################
-['no_i18n', {
+['not i18n', {
   # Case-insensitive unicode regexp relies on case mapping provided by ICU.
   'es6/unicode-regexp-ignore-case': [FAIL],
   'es7/regexp-ui-word': [FAIL],
@@ -527,27 +527,27 @@
   'regress/regress-crbug-1052647': [PASS,FAIL],
   'regress/regress-1409058': [SKIP],
 
-  # Temporal intl tests won't work in no_i18n
+  # Temporal intl tests won't work without i18n
   'temporal/function-exist': [FAIL],
   'temporal/plain-date-get-era': [FAIL],
   'temporal/plain-date-get-eraYear': [FAIL],
   'temporal/plain-date-time-get-era': [FAIL],
   'temporal/plain-date-time-get-eraYear': [FAIL],
 
-  # Non-BMP characters currently aren't considered identifiers in no_i18n
+  # Non-BMP characters currently aren't considered identifiers without i18n
   'harmony/private-name-surrogate-pair': [PASS,FAIL],
 
   # Tests ICU-specific behavior.
   'regress/regress-crbug-1414292': [SKIP],
-}],  # 'no_i18n'
+}],  # 'not i18n'
 
 ##############################################################################
-['is_full_debug', {
+['full_debug', {
   # Tests too slow in non-optimized debug mode.
   'regress/regress-2790': [SKIP],
   'regress/regress-740784': [SKIP],
   'regress/regress-992389': [SKIP],
-}],  # 'is_full_debug'
+}],  # 'full_debug'
 
 ##############################################################################
 ['byteorder == big', {
@@ -1222,7 +1222,7 @@
 }],  # 'endurance_fuzzer'
 
 ##############################################################################
-['predictable == True', {
+['verify_predictable', {
 
   # Skip tests that are known to be non-deterministic.
   'd8/d8-worker-sharedarraybuffer': [SKIP],
@@ -1254,8 +1254,8 @@
   # BUG(v8:9975).
   'es6/typedarray-copywithin': [SKIP],
 
-  # BUG(v8:11858): Deadlocks in predictable mode when waiting for the native
-  # module cache entry to be completed.
+  # BUG(v8:11858): Deadlocks in verify_predictable mode when waiting for the
+  # native module cache entry to be completed.
   'regress/wasm/regress-709684': [SKIP],
 
   # The test triggers profiling, which can trigger non-deterministic
@@ -1268,7 +1268,7 @@
   # BUG(v8:13234)
   'wasm/shared-memory-worker-gc-stress': [SKIP],
   'object-literal': [SKIP],
-}],  # 'predictable == True'
+}],  # 'verify_predictable'
 
 ##############################################################################
 ['simulator_run and (arch in [ppc64, s390x])', {
@@ -1982,10 +1982,10 @@
 }], # variant == stress_maglev or variant == stress_maglev_future
 
 ##############################################################################
-['is_clang_coverage and mode == debug', {
+['clang_coverage and mode == debug', {
   # Too slow tests.
   'asm/poppler/poppler': [SKIP],
   'wasm/shared-memory-worker-gc': [SKIP],
-}],  # 'is_clang_coverage and mode == debug'
+}],  # 'clang_coverage and mode == debug'
 
 ]
diff --git a/test/mozilla/mozilla.status b/test/mozilla/mozilla.status
index 9ab6b62f01c..a1fcf8546d5 100644
--- a/test/mozilla/mozilla.status
+++ b/test/mozilla/mozilla.status
@@ -124,7 +124,7 @@
 
   # Georgina is bicameral as of Unicode 11, but the test assumes that it's unicameral.
   # no_i18n build has an old ICU data and Georgian is treated as unicameral.
-  'ecma/String/15.5.4.12-3': [FAIL, ['no_i18n == True', PASS]],
+  'ecma/String/15.5.4.12-3': [FAIL, ['not i18n', PASS]],
 
   # Expecations in this test don't match the spec.
   # See also https://bugs.chromium.org/p/v8/issues/detail?id=9446
@@ -266,12 +266,12 @@
   # TODO(jshin): Add equivalent tests with a specific timezone using TZ variable
   # on Linux to mjsunit.
 
-  'ecma/Date/15.9.5.16': [PASS,  ['no_i18n == False', FAIL]],
-  'ecma/Date/15.9.5.18': [PASS,  ['no_i18n == False', FAIL]],
-  'ecma/Date/15.9.5.22-1': [PASS, ['no_i18n == False', FAIL]],
+  'ecma/Date/15.9.5.16': [PASS,  ['i18n', FAIL]],
+  'ecma/Date/15.9.5.18': [PASS,  ['i18n', FAIL]],
+  'ecma/Date/15.9.5.22-1': [PASS, ['i18n', FAIL]],
 
   # 1050186: Arm vm is broken;  probably unrelated to dates
-  'ecma/Date/15.9.5.22-2': [PASS, ['no_i18n == False or arch == arm', FAIL]],
+  'ecma/Date/15.9.5.22-2': [PASS, ['i18n or arch == arm', FAIL]],
 
   # Flaky test that fails due to what appears to be a bug in the test.
   # Occurs depending on current time
@@ -925,13 +925,13 @@
 }],  # ALWAYS
 
 
-['no_i18n == True and mode == debug', {
+['not i18n and mode == debug', {
   # Tests too slow for no18n debug.
   'ecma_3/Statements/regress-302439': [PASS, NO_VARIANTS],
   'js1_5/Regress/regress-98901': [SKIP],
   'ecma_3/RegExp/perlstress-001': [PASS, NO_VARIANTS],
   'js1_5/extensions/regress-311161': [FAIL_OK, NO_VARIANTS],
-}],  # 'no_i18n == True and mode == debug'
+}],  # 'not i18n and mode == debug'
 
 
 ['arch == arm or arch == arm64', {
diff --git a/test/test262/test262.status b/test/test262/test262.status
index 336f8abbe35..f1b12841c63 100644
--- a/test/test262/test262.status
+++ b/test/test262/test262.status
@@ -1187,7 +1187,7 @@
 
 }],  # ALWAYS
 
-['no_i18n == True', {
+['not i18n', {
   # Unicode canonicalization is not available with i18n turned off.
   'built-ins/String/prototype/localeCompare/15.5.4.9_CE': [SKIP],
 
@@ -1301,7 +1301,7 @@
   'staging/Temporal/TimeZone/old/getInstantFor': [FAIL],
   'staging/Temporal/TimeZone/old/getNextTransition': [FAIL],
   'staging/Temporal/ZonedDateTime/old/construction-and-properties': [FAIL],
-}],  # no_i18n == True
+}],  # not i18n
 
 ['arch == arm or arch == arm64 or arch == mips64 or arch == mips64el', {
 
diff --git a/test/unittests/unittests.status b/test/unittests/unittests.status
index 02dddfd9beb..84c982b9802 100644
--- a/test/unittests/unittests.status
+++ b/test/unittests/unittests.status
@@ -18,7 +18,7 @@
   'PersistentHandlesTest.DereferencePersistentHandleFailsWhenDisallowed': [SKIP, ['mode == debug', FAIL]],
 
   # https://crbug.com/v8/8919
-  'PlatformTest.StackAlignment': [PASS, ['not is_clang', SKIP]],
+  'PlatformTest.StackAlignment': [PASS, ['not clang', SKIP]],
 
   # We do not yet shrink weak maps after they have been emptied by the GC
   'WeakMapsTest.Shrinking': [SKIP],
@@ -180,7 +180,7 @@
 }],
 
 ################################################################################
-['is_clang == False and (arch == riscv64 or arch == riscv32)',{
+['not clang and (arch == riscv64 or arch == riscv32)',{
   'LoggingTest.SourceLocation':[SKIP]  # issue-174
 }],
 
@@ -204,7 +204,7 @@
 }], # jitless
 
 ##############################################################################
-['jitless_build_mode', {
+['has_jitless', {
   # Feedback collection maintenance is (mostly) disabled.
   'FeedbackVectorTest.Vector*': [SKIP],
   'InterpreterTest.InterpreterBigIntComparisons': [SKIP],
@@ -220,7 +220,7 @@
   'InterpreterTest.InterpreterBitwiseTypeFeedback': [SKIP],
   # These require executable code space.
   'AssemblerX64Test.*': [SKIP],
-}],  # jitless_build_mode
+}],  # has_jitless
 
 ################################################################################
 ['third_party_heap', {
@@ -342,9 +342,9 @@
 }],  # variant == no_wasm_traps
 
 ##############################################################################
-['no_i18n == True', {
+['not i18n', {
   'RegExpTestWithContext.UnicodePropertyEscapeCodeSize': [SKIP],
-}],  # no_i18n == True
+}],  # not i18n
 
 ##############################################################################
 ['no_simd_hardware == True', {
@@ -355,15 +355,15 @@
   'LazyCompileDispatcherTest.CompileLazy2FinishesDispatcherJob': [SKIP],
 }],
 
-# With the is_official_build flag exceptions are disabled. Therefore torque
+# With the official_build flag exceptions are disabled. Therefore torque
 # tests fail that rely on catching them (v8:13945).
-['is_official_build', {
+['official_build', {
   'LanguageServerJson.ParserError': [FAIL],
   'FlagDefinitionsTest.FreezeFlags': [FAIL],
   'LanguageServerJson.LexerError': [FAIL],
   'Torque.DoubleUnderScorePrefixIllegalForIdentifiers': [FAIL],
   'Torque.ImportNonExistentFile': [FAIL],
   'Torque.Enums': [FAIL],
-}],  # 'is_official_build'
+}],  # 'official_build'
 
 ]
diff --git a/test/webkit/webkit.status b/test/webkit/webkit.status
index 7fa7bfdf849..5749eea05d5 100644
--- a/test/webkit/webkit.status
+++ b/test/webkit/webkit.status
@@ -45,7 +45,7 @@
   'dfg-double-vote-fuzz': [PASS, SLOW],
   'dfg-int-overflow-in-loop': [PASS, SLOW],
 }],  # ALWAYS
-['system == windows and not is_clang', {
+['system == windows and not clang', {
   # Exceeds call stack on windows after MSVS2017 switch.
   'fast/js/excessive-comma-usage': [SKIP],
   'run-json-stringify': [SKIP],
@@ -123,9 +123,9 @@
 }],  # variant == no_wasm_traps
 
 ##############################################################################
-['no_i18n == True', {
+['not i18n', {
   'fast/js/string-capitalization': [FAIL],
-}],  # variant == no_wasm_traps
+}],  # not i18n
 
 ################################################################################
 ['variant == stress_snapshot', {
diff --git a/tools/testrunner/base_runner.py b/tools/testrunner/base_runner.py
index 7302c7b1d4b..2f148414f28 100644
--- a/tools/testrunner/base_runner.py
+++ b/tools/testrunner/base_runner.py
@@ -398,7 +398,7 @@ class BaseTestRunner(object):
     )
 
   def _process_default_options(self):
-    if self.build_config.is_debug:
+    if self.build_config.debugging_features:
       self.mode_options = self._custom_debug_mode()
     elif self.build_config.dcheck_always_on:
       self.mode_options = TRY_RELEASE_MODE
@@ -452,7 +452,7 @@ class BaseTestRunner(object):
         asan_options.append('detect_stack_use_after_return=0')
       os.environ['ASAN_OPTIONS'] = ":".join(asan_options)
 
-    if self.build_config.cfi_vptr:
+    if self.build_config.cfi:
       os.environ['UBSAN_OPTIONS'] = ":".join([
         'print_stacktrace=1',
         'print_summary=1',
@@ -460,7 +460,7 @@ class BaseTestRunner(object):
         symbolizer_option,
       ])
 
-    if self.build_config.ubsan_vptr:
+    if self.build_config.ubsan:
       os.environ['UBSAN_OPTIONS'] = ":".join([
         'print_stacktrace=1',
         symbolizer_option,
@@ -551,16 +551,16 @@ class BaseTestRunner(object):
             self.build_config.asan,
         "byteorder":
             sys.byteorder,
-        "cfi_vptr":
-            self.build_config.cfi_vptr,
+        "cfi":
+            self.build_config.cfi,
         "code_comments":
             self.build_config.code_comments,
         "component_build":
             self.build_config.component_build,
         "conservative_stack_scanning":
             self.build_config.conservative_stack_scanning,
-        "control_flow_integrity":
-            self.build_config.control_flow_integrity,
+        "v8_cfi":
+            self.build_config.v8_cfi,
         "concurrent_marking":
             self.build_config.concurrent_marking,
         "single_generation":
@@ -583,33 +583,30 @@ class BaseTestRunner(object):
             False,
         "gdbjit":
             self.build_config.gdbjit,
-        # TODO(jgruber): Note this rename from maglev to has_maglev is required
-        # to avoid a name clash with the "maglev" variant. See also the TODO in
-        # statusfile.py (this really shouldn't be needed).
         "has_maglev":
-            self.build_config.maglev,
+            self.build_config.has_maglev,
         "has_turbofan":
-            self.build_config.turbofan,
+            self.build_config.has_turbofan,
         "has_webassembly":
-            self.build_config.webassembly,
+            self.build_config.has_webassembly,
         "isolates":
             self.options.isolates,
-        "is_clang":
-            self.build_config.is_clang,
-        "is_clang_coverage":
-            self.build_config.is_clang_coverage,
-        "is_debug":
-            self.build_config.is_debug,
-        "is_DEBUG_defined":
-            self.build_config.is_DEBUG_defined,
-        "is_full_debug":
-            self.build_config.is_full_debug,
-        "is_official_build":
-            self.build_config.is_official_build,
+        "clang":
+            self.build_config.clang,
+        "clang_coverage":
+            self.build_config.clang_coverage,
+        "debugging_features":
+            self.build_config.debugging_features,
+        "DEBUG_defined":
+            self.build_config.DEBUG_defined,
+        "full_debug":
+            self.build_config.full_debug,
+        "official_build":
+            self.build_config.official_build,
         "interrupt_fuzzer":
             False,
-        "jitless_build_mode":
-            self.build_config.jitless_build_mode,
+        "has_jitless":
+            self.build_config.has_jitless,
         "mips_arch_variant":
             self.build_config.mips_arch_variant,
         "mode":
@@ -618,16 +615,16 @@ class BaseTestRunner(object):
             self.build_config.msan,
         "no_harness":
             self.options.no_harness,
-        "no_i18n":
-            self.build_config.no_i18n,
+        "i18n":
+            self.build_config.i18n,
         "no_simd_hardware":
             self.build_config.no_simd_hardware,
         "novfp3":
             False,
         "optimize_for_size":
             "--optimize-for-size" in self.options.extra_flags,
-        "predictable":
-            self.build_config.predictable,
+        "verify_predictable":
+            self.build_config.verify_predictable,
         "simd_mips":
             self.build_config.simd_mips,
         "simulator_run":
@@ -641,8 +638,8 @@ class BaseTestRunner(object):
             self.build_config.third_party_heap,
         "tsan":
             self.build_config.tsan,
-        "ubsan_vptr":
-            self.build_config.ubsan_vptr,
+        "ubsan":
+            self.build_config.ubsan,
         "verify_csa":
             self.build_config.verify_csa,
         "verify_heap":
@@ -676,7 +673,7 @@ class BaseTestRunner(object):
         isolates=self.options.isolates,
         mode_flags=self.mode_options.flags + self._runner_flags(),
         no_harness=self.options.no_harness,
-        noi18n=self.build_config.no_i18n,
+        noi18n=not self.build_config.i18n,
         random_seed=self.options.random_seed,
         run_skipped=self.options.run_skipped,
         shard_count=shard_count,
diff --git a/tools/testrunner/build_config.py b/tools/testrunner/build_config.py
index 38022785eaa..03cb50acd7f 100644
--- a/tools/testrunner/build_config.py
+++ b/tools/testrunner/build_config.py
@@ -15,90 +15,87 @@ class BuildConfig(object):
 
   def __init__(self, build_config, options):
     self.options = options
-    # In V8 land, GN's x86 is called ia32.
-    if build_config['v8_target_cpu'] == 'x86':
-      self.arch = 'ia32'
-    else:
-      self.arch = build_config['v8_target_cpu']
-
-    self.asan = build_config['is_asan']
-    self.cfi_vptr = build_config['is_cfi']
-    self.code_comments = build_config['v8_code_comments']
-    self.component_build = build_config['is_component_build']
-    self.concurrent_marking = build_config['v8_enable_concurrent_marking']
+
+    self.asan = build_config['asan']
+    self.cfi = build_config['cfi']
+    self.code_comments = build_config['code_comments']
+    self.component_build = build_config['component_build']
+    self.concurrent_marking = build_config['concurrent_marking']
     self.conservative_stack_scanning = build_config[
-        'v8_enable_conservative_stack_scanning']
-    self.control_flow_integrity = build_config['v8_control_flow_integrity']
+        'conservative_stack_scanning']
+    self.current_cpu = build_config['current_cpu']
+    self.v8_cfi = build_config['v8_cfi']
     self.dcheck_always_on = build_config['dcheck_always_on']
-    self.debug_code = build_config['v8_enable_debug_code']
+    self.debug_code = build_config['debug_code']
     self.dict_property_const_tracking = build_config[
-        'v8_dict_property_const_tracking']
-    self.direct_local = build_config['v8_enable_direct_local']
-    self.disassembler = build_config['v8_enable_disassembler']
-    self.gdbjit = build_config['v8_enable_gdbjit']
+        'dict_property_const_tracking']
+    self.direct_local = build_config['direct_local']
+    self.disassembler = build_config['disassembler']
+    self.gdbjit = build_config['gdbjit']
     self.is_android = build_config['is_android']
-    self.is_clang = build_config['is_clang']
-    self.is_clang_coverage = build_config['is_clang_coverage']
-    self.is_debug = build_config['is_debug']
-    self.is_DEBUG_defined = build_config['is_DEBUG_defined']
-    self.is_full_debug = build_config['is_full_debug']
+    self.clang = build_config['clang']
+    self.clang_coverage = build_config['clang_coverage']
+    self.debugging_features = build_config['debugging_features']
+    self.DEBUG_defined = build_config['DEBUG_defined']
+    self.full_debug = build_config['full_debug']
     self.is_ios = build_config['is_ios']
-    self.is_official_build = build_config['is_official_build']
-    self.lite_mode = build_config['v8_enable_lite_mode']
-    self.maglev = build_config['v8_enable_maglev']
-    self.msan = build_config['is_msan']
-    self.no_i18n = not build_config['v8_enable_i18n_support']
-    self.pointer_compression = build_config['v8_enable_pointer_compression']
+    self.official_build = build_config['official_build']
+    self.lite_mode = build_config['lite_mode']
+    self.has_maglev = build_config['has_maglev']
+    self.msan = build_config['msan']
+    self.i18n = build_config['i18n']
+    self.pointer_compression = build_config['pointer_compression']
     self.pointer_compression_shared_cage = build_config[
-        'v8_enable_pointer_compression_shared_cage']
-    self.predictable = build_config['v8_enable_verify_predictable']
-    self.sandbox = build_config['v8_enable_sandbox']
-    self.shared_ro_heap = build_config['v8_enable_shared_ro_heap']
-    self.simulator_run = (
-        build_config['target_cpu'] != build_config['v8_target_cpu'])
-    self.single_generation = build_config['v8_enable_single_generation']
-    self.slow_dchecks = build_config['v8_enable_slow_dchecks']
-    self.third_party_heap = build_config['v8_enable_third_party_heap']
-    self.tsan = build_config['is_tsan']
-    self.turbofan = build_config['v8_enable_turbofan']
-    # TODO(machenbach): We only have ubsan not ubsan_vptr.
-    self.ubsan_vptr = build_config['is_ubsan_vptr']
-    self.verify_csa = build_config['v8_enable_verify_csa']
-    self.verify_heap = build_config['v8_enable_verify_heap']
-    self.webassembly = build_config['v8_enable_webassembly']
-    self.write_barriers = not build_config['v8_disable_write_barriers']
-    # TODO(jgruber): Don't rename once it's no longer necessary to avoid
-    # conflicts with test variant names.
-    self.jitless_build_mode = build_config['v8_jitless']
-    # Export only for MIPS target
-    if self.arch in ['mips64', 'mips64el']:
-      self._mips_arch_variant = build_config['mips_arch_variant']
-      self.mips_use_msa = build_config['mips_use_msa']
+        'pointer_compression_shared_cage']
+    self.verify_predictable = build_config['verify_predictable']
+    self.sandbox = build_config['sandbox']
+    self.shared_ro_heap = build_config['shared_ro_heap']
+    self.single_generation = build_config['single_generation']
+    self.slow_dchecks = build_config['slow_dchecks']
+    self.third_party_heap = build_config['third_party_heap']
+    self.tsan = build_config['tsan']
+    self.has_turbofan = build_config['has_turbofan']
+    self.ubsan = build_config['ubsan']
+    self.verify_csa = build_config['verify_csa']
+    self.verify_heap = build_config['verify_heap']
+    self.has_webassembly = build_config['has_webassembly']
+    self.write_barriers = build_config['write_barriers']
+    self.has_jitless = build_config['has_jitless']
+    self.target_cpu = build_config['target_cpu']
+    self.v8_current_cpu = build_config['v8_current_cpu']
+    self.v8_target_cpu = build_config['v8_target_cpu']
+    self.mips_arch_variant = build_config['mips_arch_variant']
+    self.mips_use_msa = build_config['mips_use_msa']
+
+  @property
+  def arch(self):
+    # In V8 land, GN's x86 is called ia32.
+    return 'ia32' if self.v8_target_cpu == 'x86' else self.v8_target_cpu
+
+  @property
+  def simulator_run(self):
+    return self.target_cpu != self.v8_target_cpu
 
   @property
   def use_sanitizer(self):
-    return (self.asan or self.cfi_vptr or self.msan or self.tsan or
-            self.ubsan_vptr)
+    return self.asan or self.cfi or self.msan or self.tsan or self.ubsan
 
   @property
   def no_js_shared_memory(self):
-    return (not self.shared_ro_heap) or (
-        self.pointer_compression and
-        not self.pointer_compression_shared_cage) or (not self.write_barriers)
+    return (
+        not self.shared_ro_heap
+        or self.pointer_compression and not self.pointer_compression_shared_cage
+        or not self.write_barriers)
 
   @property
-  def is_mips_arch(self):
+  def mips_arch(self):
     return self.arch in ['mips64', 'mips64el']
 
   @property
   def simd_mips(self):
-    return (self.is_mips_arch and self._mips_arch_variant == "r6" and
+    return (self.mips_arch and self.mips_arch_variant == "r6" and
             self.mips_use_msa)
 
-  @property
-  def mips_arch_variant(self):
-    return (self.is_mips_arch and self._mips_arch_variant)
-
   @property
   def no_simd_hardware(self):
     # TODO(liviurau): Add some tests and refactor the logic here.
@@ -134,10 +131,10 @@ class BuildConfig(object):
     """Increases timeout for slow build configurations."""
     factors = dict(
         lite_mode=2,
-        predictable=4,
+        verify_predictable=4,
         tsan=2,
         use_sanitizer=1.5,
-        is_full_debug=4,
+        full_debug=4,
     )
     result = initial_factor
     for k, v in factors.items():
@@ -150,33 +147,33 @@ class BuildConfig(object):
   def __str__(self):
     attrs = [
         'asan',
-        'cfi_vptr',
+        'cfi',
         'code_comments',
-        'control_flow_integrity',
+        'v8_cfi',
         'dcheck_always_on',
         'debug_code',
         'dict_property_const_tracking',
         'disassembler',
         'gdbjit',
-        'is_debug',
-        'is_DEBUG_defined',
-        'jitless_build_mode',
+        'debugging_features',
+        'DEBUG_defined',
+        'has_jitless',
         'lite_mode',
-        'maglev',
+        'has_maglev',
         'msan',
-        'no_i18n',
+        'i18n',
         'pointer_compression',
         'pointer_compression_shared_cage',
-        'predictable',
+        'verify_predictable',
         'sandbox',
         'slow_dchecks',
         'third_party_heap',
         'tsan',
-        'turbofan',
-        'ubsan_vptr',
+        'has_turbofan',
+        'ubsan',
         'verify_csa',
         'verify_heap',
-        'webassembly',
+        'has_webassembly',
     ]
     detected_options = [attr for attr in attrs if getattr(self, attr, False)]
     return ', '.join(detected_options)
diff --git a/tools/testrunner/local/variants.py b/tools/testrunner/local/variants.py
index c06252e42b7..3727ae1c4ba 100644
--- a/tools/testrunner/local/variants.py
+++ b/tools/testrunner/local/variants.py
@@ -136,7 +136,7 @@ INCOMPATIBLE_FLAGS_PER_VARIANT = {
 # applies when the code_comments build variable is NOT set.
 INCOMPATIBLE_FLAGS_PER_BUILD_VARIABLE = {
     "!code_comments": ["--code-comments"],
-    "!is_DEBUG_defined": [
+    "!DEBUG_defined": [
         "--check_handle_count",
         "--code_stats",
         "--dump_wasm_module",
@@ -177,11 +177,11 @@ INCOMPATIBLE_FLAGS_PER_BUILD_VARIABLE = {
     "!has_maglev": ["--maglev"],
     "!has_turbofan":
         kIncompatibleFlagsForNoTurbofan,
-    "jitless_build_mode":
+    "has_jitless":
         INCOMPATIBLE_FLAGS_PER_VARIANT["jitless"],
     "lite_mode": ["--max-semi-space-size=*"] +
                  INCOMPATIBLE_FLAGS_PER_VARIANT["jitless"],
-    "predictable": [
+    "verify_predictable": [
         "--parallel-compile-tasks-for-eager-toplevel",
         "--parallel-compile-tasks-for-lazy", "--concurrent-recompilation",
         "--stress-concurrent-allocation", "--stress-concurrent-inlining"
diff --git a/tools/testrunner/standard_runner.py b/tools/testrunner/standard_runner.py
index 3723d734c80..0300e26d55e 100755
--- a/tools/testrunner/standard_runner.py
+++ b/tools/testrunner/standard_runner.py
@@ -194,7 +194,7 @@ class StandardTestRunner(base_runner.BaseTestRunner):
       self.options.slow_tests = 'skip'
       self.options.pass_fail_tests = 'skip'
 
-    if self.build_config.predictable:
+    if self.build_config.verify_predictable:
       self.options.variants = 'default'
       self.options.extra_flags.append('--predictable')
       self.options.extra_flags.append('--verify-predictable')
@@ -219,7 +219,7 @@ class StandardTestRunner(base_runner.BaseTestRunner):
         raise base_runner.TestRunnerError()
     CheckTestMode('slow test', self.options.slow_tests)
     CheckTestMode('pass|fail test', self.options.pass_fail_tests)
-    if self.build_config.no_i18n:
+    if not self.build_config.i18n:
       base_runner.TEST_MAP['bot_default'].remove('intl')
       base_runner.TEST_MAP['default'].remove('intl')
       # TODO(machenbach): uncomment after infra side lands.
@@ -290,7 +290,7 @@ class StandardTestRunner(base_runner.BaseTestRunner):
     loader = LoadProc(tests, initial_batch_size=self.options.j * 2)
     results = ResultsTracker.create(self.options)
     outproc_factory = None
-    if self.build_config.predictable:
+    if self.build_config.verify_predictable:
       outproc_factory = predictable.get_outproc
     execproc = ExecutionProc(ctx, jobs, outproc_factory)
     sigproc = self._create_signal_proc()
@@ -366,7 +366,7 @@ class StandardTestRunner(base_runner.BaseTestRunner):
     print("\n".join(lines))
 
   def _create_predictable_filter(self):
-    if not self.build_config.predictable:
+    if not self.build_config.verify_predictable:
       return None
     return predictable.PredictableFilterProc()
 
diff --git a/tools/testrunner/standard_runner_test.py b/tools/testrunner/standard_runner_test.py
index 770a29bf889..8f062a1e07a 100644
--- a/tools/testrunner/standard_runner_test.py
+++ b/tools/testrunner/standard_runner_test.py
@@ -221,24 +221,24 @@ class StandardRunnerTest(TestRunnerTest):
         '--variants=default',
         'sweet/bananas',
         config_overrides=dict(
-          dcheck_always_on=True, is_asan=True, is_cfi=True,
-          is_msan=True, is_tsan=True, is_ubsan_vptr=True, target_cpu='x86',
-          v8_enable_i18n_support=False, v8_target_cpu='x86',
-          v8_enable_verify_csa=False, v8_enable_lite_mode=False,
-          v8_enable_pointer_compression=False,
-          v8_enable_pointer_compression_shared_cage=False,
-          v8_enable_shared_ro_heap=False,
-          v8_enable_sandbox=False
+          dcheck_always_on=True, asan=True, cfi=True,
+          msan=True, tsan=True, ubsan=True, target_cpu='x86',
+          i18n=True, v8_target_cpu='x86',
+          verify_csa=False, lite_mode=False,
+          pointer_compression=False,
+          pointer_compression_shared_cage=False,
+          shared_ro_heap=False,
+          sandbox=False
         )
     )
     result.stdout_includes('>>> Autodetected:')
     result.stdout_includes('asan')
-    result.stdout_includes('cfi_vptr')
+    result.stdout_includes('cfi')
     result.stdout_includes('dcheck_always_on')
+    result.stdout_includes('i18n')
     result.stdout_includes('msan')
-    result.stdout_includes('no_i18n')
     result.stdout_includes('tsan')
-    result.stdout_includes('ubsan_vptr')
+    result.stdout_includes('ubsan')
     result.stdout_includes('webassembly')
     result.stdout_includes('>>> Running tests for ia32.release')
     result.has_returncode(0)
@@ -349,7 +349,7 @@ class StandardRunnerTest(TestRunnerTest):
         '--variants=default',
         'sweet/bananas',
         infra_staging=False,
-        config_overrides=dict(v8_enable_verify_predictable=True),
+        config_overrides=dict(verify_predictable=True),
     )
     result.stdout_includes('1 tests ran')
     result.stdout_includes('sweet/bananas default: FAIL')
@@ -408,7 +408,7 @@ class StandardRunnerTest(TestRunnerTest):
         '--variants=default,stress',
         'sweet/bananas',
         'sweet/raspberries',
-        config_overrides=dict(is_asan=True),
+        config_overrides=dict(asan=True),
     )
     # Both tests are either marked as running in only default or only
     # slow variant.
diff --git a/tools/testrunner/testdata/testroot1/out/build/v8_build_config.json b/tools/testrunner/testdata/testroot1/out/build/v8_build_config.json
index 580b0fb2781..5c3c584dca9 100644
--- a/tools/testrunner/testdata/testroot1/out/build/v8_build_config.json
+++ b/tools/testrunner/testdata/testroot1/out/build/v8_build_config.json
@@ -2,46 +2,48 @@
   "current_cpu": "x64",
   "dcheck_always_on": false,
   "is_android": false,
-  "is_asan": false,
-  "is_cfi": false,
-  "is_clang": true,
-  "is_clang_coverage": false,
-  "is_component_build": false,
-  "is_debug": false,
-  "is_full_debug": false,
+  "asan": false,
+  "cfi": false,
+  "clang": true,
+  "clang_coverage": false,
+  "component_build": false,
+  "debugging_features": false,
+  "full_debug": false,
   "is_ios": false,
-  "is_official_build": false,
-  "is_ubsan_vptr": false,
-  "is_msan": false,
-  "is_tsan": false,
+  "official_build": false,
+  "ubsan": false,
+  "msan": false,
+  "tsan": false,
   "target_cpu": "x64",
   "v8_current_cpu": "x64",
-  "v8_enable_i18n_support": true,
-  "v8_enable_verify_predictable": false,
+  "i18n": true,
+  "verify_predictable": false,
   "v8_target_cpu": "x64",
-  "v8_enable_conservative_stack_scanning": false,
-  "v8_enable_concurrent_marking": true,
-  "v8_enable_direct_local": false,
-  "v8_enable_lite_mode": false,
-  "v8_enable_pointer_compression": true,
-  "v8_enable_pointer_compression_shared_cage": true,
-  "v8_enable_sandbox": false,
-  "v8_enable_shared_ro_heap": true,
-  "v8_disable_write_barriers": false,
-  "v8_control_flow_integrity": false,
-  "v8_enable_single_generation": false,
-  "v8_enable_third_party_heap": false,
-  "v8_enable_webassembly": true,
-  "v8_dict_property_const_tracking": false,
-  "v8_code_comments": false,
-  "v8_enable_debug_code": false,
-  "v8_enable_verify_csa": false,
-  "v8_enable_verify_heap": false,
-  "v8_enable_slow_dchecks": false,
-  "v8_enable_maglev": false,
-  "v8_enable_disassembler": false,
-  "is_DEBUG_defined": false,
-  "v8_enable_turbofan": false,
-  "v8_jitless": false,
-  "v8_enable_gdbjit": false
+  "conservative_stack_scanning": false,
+  "concurrent_marking": true,
+  "direct_local": false,
+  "lite_mode": false,
+  "pointer_compression": true,
+  "pointer_compression_shared_cage": true,
+  "sandbox": false,
+  "shared_ro_heap": true,
+  "write_barriers": true,
+  "v8_cfi": false,
+  "single_generation": false,
+  "third_party_heap": false,
+  "has_webassembly": true,
+  "dict_property_const_tracking": false,
+  "code_comments": false,
+  "debug_code": false,
+  "verify_csa": false,
+  "verify_heap": false,
+  "slow_dchecks": false,
+  "has_maglev": false,
+  "disassembler": false,
+  "DEBUG_defined": false,
+  "has_turbofan": false,
+  "has_jitless": false,
+  "gdbjit": false,
+  "mips_arch_variant": "",
+  "mips_use_msa": false
 }
diff --git a/tools/testrunner/testdata/testroot2/out/build/v8_build_config.json b/tools/testrunner/testdata/testroot2/out/build/v8_build_config.json
index ec33ed40aca..9dd776ffed7 100644
--- a/tools/testrunner/testdata/testroot2/out/build/v8_build_config.json
+++ b/tools/testrunner/testdata/testroot2/out/build/v8_build_config.json
@@ -2,46 +2,48 @@
   "current_cpu": "x64",
   "dcheck_always_on": false,
   "is_android": false,
-  "is_asan": false,
-  "is_cfi": false,
-  "is_clang": true,
-  "is_clang_coverage": false,
-  "is_component_build": false,
-  "is_debug": false,
-  "is_full_debug": false,
+  "asan": false,
+  "cfi": false,
+  "clang": true,
+  "clang_coverage": false,
+  "component_build": false,
+  "debugging_features": false,
+  "full_debug": false,
   "is_ios": false,
-  "is_official_build": false,
-  "is_ubsan_vptr": false,
-  "is_msan": false,
-  "is_tsan": false,
+  "official_build": false,
+  "ubsan": false,
+  "msan": false,
+  "tsan": false,
   "target_cpu": "x64",
   "v8_current_cpu": "x64",
-  "v8_enable_i18n_support": true,
-  "v8_enable_verify_predictable": false,
+  "i18n": true,
+  "verify_predictable": false,
   "v8_target_cpu": "x64",
-  "v8_enable_conservative_stack_scanning": false,
-  "v8_enable_concurrent_marking": true,
-  "v8_enable_direct_local": false,
-  "v8_enable_lite_mode": false,
-  "v8_enable_pointer_compression": false,
-  "v8_enable_pointer_compression_shared_cage": false,
-  "v8_enable_sandbox": false,
-  "v8_enable_shared_ro_heap": false,
-  "v8_disable_write_barriers": false,
-  "v8_control_flow_integrity": false,
-  "v8_enable_single_generation": false,
-  "v8_enable_third_party_heap": false,
-  "v8_enable_webassembly": true,
-  "v8_dict_property_const_tracking": false,
-  "v8_code_comments": false,
-  "v8_enable_debug_code": false,
-  "v8_enable_verify_csa": false,
-  "v8_enable_verify_heap": false,
-  "v8_enable_slow_dchecks": false,
-  "v8_enable_maglev": false,
-  "v8_enable_disassembler": false,
-  "is_DEBUG_defined": false,
-  "v8_enable_turbofan": false,
-  "v8_jitless": false,
-  "v8_enable_gdbjit": false
+  "conservative_stack_scanning": false,
+  "concurrent_marking": true,
+  "direct_local": false,
+  "lite_mode": false,
+  "pointer_compression": false,
+  "pointer_compression_shared_cage": false,
+  "sandbox": false,
+  "shared_ro_heap": false,
+  "write_barriers": true,
+  "v8_cfi": false,
+  "single_generation": false,
+  "third_party_heap": false,
+  "has_webassembly": true,
+  "dict_property_const_tracking": false,
+  "code_comments": false,
+  "debug_code": false,
+  "verify_csa": false,
+  "verify_heap": false,
+  "slow_dchecks": false,
+  "has_maglev": false,
+  "disassembler": false,
+  "DEBUG_defined": false,
+  "has_turbofan": false,
+  "has_jitless": false,
+  "gdbjit": false,
+  "mips_arch_variant": "",
+  "mips_use_msa": false
 }
diff --git a/tools/testrunner/testdata/testroot3/out/build/v8_build_config.json b/tools/testrunner/testdata/testroot3/out/build/v8_build_config.json
index 580b0fb2781..5c3c584dca9 100644
--- a/tools/testrunner/testdata/testroot3/out/build/v8_build_config.json
+++ b/tools/testrunner/testdata/testroot3/out/build/v8_build_config.json
@@ -2,46 +2,48 @@
   "current_cpu": "x64",
   "dcheck_always_on": false,
   "is_android": false,
-  "is_asan": false,
-  "is_cfi": false,
-  "is_clang": true,
-  "is_clang_coverage": false,
-  "is_component_build": false,
-  "is_debug": false,
-  "is_full_debug": false,
+  "asan": false,
+  "cfi": false,
+  "clang": true,
+  "clang_coverage": false,
+  "component_build": false,
+  "debugging_features": false,
+  "full_debug": false,
   "is_ios": false,
-  "is_official_build": false,
-  "is_ubsan_vptr": false,
-  "is_msan": false,
-  "is_tsan": false,
+  "official_build": false,
+  "ubsan": false,
+  "msan": false,
+  "tsan": false,
   "target_cpu": "x64",
   "v8_current_cpu": "x64",
-  "v8_enable_i18n_support": true,
-  "v8_enable_verify_predictable": false,
+  "i18n": true,
+  "verify_predictable": false,
   "v8_target_cpu": "x64",
-  "v8_enable_conservative_stack_scanning": false,
-  "v8_enable_concurrent_marking": true,
-  "v8_enable_direct_local": false,
-  "v8_enable_lite_mode": false,
-  "v8_enable_pointer_compression": true,
-  "v8_enable_pointer_compression_shared_cage": true,
-  "v8_enable_sandbox": false,
-  "v8_enable_shared_ro_heap": true,
-  "v8_disable_write_barriers": false,
-  "v8_control_flow_integrity": false,
-  "v8_enable_single_generation": false,
-  "v8_enable_third_party_heap": false,
-  "v8_enable_webassembly": true,
-  "v8_dict_property_const_tracking": false,
-  "v8_code_comments": false,
-  "v8_enable_debug_code": false,
-  "v8_enable_verify_csa": false,
-  "v8_enable_verify_heap": false,
-  "v8_enable_slow_dchecks": false,
-  "v8_enable_maglev": false,
-  "v8_enable_disassembler": false,
-  "is_DEBUG_defined": false,
-  "v8_enable_turbofan": false,
-  "v8_jitless": false,
-  "v8_enable_gdbjit": false
+  "conservative_stack_scanning": false,
+  "concurrent_marking": true,
+  "direct_local": false,
+  "lite_mode": false,
+  "pointer_compression": true,
+  "pointer_compression_shared_cage": true,
+  "sandbox": false,
+  "shared_ro_heap": true,
+  "write_barriers": true,
+  "v8_cfi": false,
+  "single_generation": false,
+  "third_party_heap": false,
+  "has_webassembly": true,
+  "dict_property_const_tracking": false,
+  "code_comments": false,
+  "debug_code": false,
+  "verify_csa": false,
+  "verify_heap": false,
+  "slow_dchecks": false,
+  "has_maglev": false,
+  "disassembler": false,
+  "DEBUG_defined": false,
+  "has_turbofan": false,
+  "has_jitless": false,
+  "gdbjit": false,
+  "mips_arch_variant": "",
+  "mips_use_msa": false
 }
diff --git a/tools/testrunner/testdata/testroot5/out.gn/build/v8_build_config.json b/tools/testrunner/testdata/testroot5/out.gn/build/v8_build_config.json
index 580b0fb2781..5c3c584dca9 100644
--- a/tools/testrunner/testdata/testroot5/out.gn/build/v8_build_config.json
+++ b/tools/testrunner/testdata/testroot5/out.gn/build/v8_build_config.json
@@ -2,46 +2,48 @@
   "current_cpu": "x64",
   "dcheck_always_on": false,
   "is_android": false,
-  "is_asan": false,
-  "is_cfi": false,
-  "is_clang": true,
-  "is_clang_coverage": false,
-  "is_component_build": false,
-  "is_debug": false,
-  "is_full_debug": false,
+  "asan": false,
+  "cfi": false,
+  "clang": true,
+  "clang_coverage": false,
+  "component_build": false,
+  "debugging_features": false,
+  "full_debug": false,
   "is_ios": false,
-  "is_official_build": false,
-  "is_ubsan_vptr": false,
-  "is_msan": false,
-  "is_tsan": false,
+  "official_build": false,
+  "ubsan": false,
+  "msan": false,
+  "tsan": false,
   "target_cpu": "x64",
   "v8_current_cpu": "x64",
-  "v8_enable_i18n_support": true,
-  "v8_enable_verify_predictable": false,
+  "i18n": true,
+  "verify_predictable": false,
   "v8_target_cpu": "x64",
-  "v8_enable_conservative_stack_scanning": false,
-  "v8_enable_concurrent_marking": true,
-  "v8_enable_direct_local": false,
-  "v8_enable_lite_mode": false,
-  "v8_enable_pointer_compression": true,
-  "v8_enable_pointer_compression_shared_cage": true,
-  "v8_enable_sandbox": false,
-  "v8_enable_shared_ro_heap": true,
-  "v8_disable_write_barriers": false,
-  "v8_control_flow_integrity": false,
-  "v8_enable_single_generation": false,
-  "v8_enable_third_party_heap": false,
-  "v8_enable_webassembly": true,
-  "v8_dict_property_const_tracking": false,
-  "v8_code_comments": false,
-  "v8_enable_debug_code": false,
-  "v8_enable_verify_csa": false,
-  "v8_enable_verify_heap": false,
-  "v8_enable_slow_dchecks": false,
-  "v8_enable_maglev": false,
-  "v8_enable_disassembler": false,
-  "is_DEBUG_defined": false,
-  "v8_enable_turbofan": false,
-  "v8_jitless": false,
-  "v8_enable_gdbjit": false
+  "conservative_stack_scanning": false,
+  "concurrent_marking": true,
+  "direct_local": false,
+  "lite_mode": false,
+  "pointer_compression": true,
+  "pointer_compression_shared_cage": true,
+  "sandbox": false,
+  "shared_ro_heap": true,
+  "write_barriers": true,
+  "v8_cfi": false,
+  "single_generation": false,
+  "third_party_heap": false,
+  "has_webassembly": true,
+  "dict_property_const_tracking": false,
+  "code_comments": false,
+  "debug_code": false,
+  "verify_csa": false,
+  "verify_heap": false,
+  "slow_dchecks": false,
+  "has_maglev": false,
+  "disassembler": false,
+  "DEBUG_defined": false,
+  "has_turbofan": false,
+  "has_jitless": false,
+  "gdbjit": false,
+  "mips_arch_variant": "",
+  "mips_use_msa": false
 }
diff --git a/tools/testrunner/testdata/testroot6/out/build/v8_build_config.json b/tools/testrunner/testdata/testroot6/out/build/v8_build_config.json
index 580b0fb2781..5c3c584dca9 100644
--- a/tools/testrunner/testdata/testroot6/out/build/v8_build_config.json
+++ b/tools/testrunner/testdata/testroot6/out/build/v8_build_config.json
@@ -2,46 +2,48 @@
   "current_cpu": "x64",
   "dcheck_always_on": false,
   "is_android": false,
-  "is_asan": false,
-  "is_cfi": false,
-  "is_clang": true,
-  "is_clang_coverage": false,
-  "is_component_build": false,
-  "is_debug": false,
-  "is_full_debug": false,
+  "asan": false,
+  "cfi": false,
+  "clang": true,
+  "clang_coverage": false,
+  "component_build": false,
+  "debugging_features": false,
+  "full_debug": false,
   "is_ios": false,
-  "is_official_build": false,
-  "is_ubsan_vptr": false,
-  "is_msan": false,
-  "is_tsan": false,
+  "official_build": false,
+  "ubsan": false,
+  "msan": false,
+  "tsan": false,
   "target_cpu": "x64",
   "v8_current_cpu": "x64",
-  "v8_enable_i18n_support": true,
-  "v8_enable_verify_predictable": false,
+  "i18n": true,
+  "verify_predictable": false,
   "v8_target_cpu": "x64",
-  "v8_enable_conservative_stack_scanning": false,
-  "v8_enable_concurrent_marking": true,
-  "v8_enable_direct_local": false,
-  "v8_enable_lite_mode": false,
-  "v8_enable_pointer_compression": true,
-  "v8_enable_pointer_compression_shared_cage": true,
-  "v8_enable_sandbox": false,
-  "v8_enable_shared_ro_heap": true,
-  "v8_disable_write_barriers": false,
-  "v8_control_flow_integrity": false,
-  "v8_enable_single_generation": false,
-  "v8_enable_third_party_heap": false,
-  "v8_enable_webassembly": true,
-  "v8_dict_property_const_tracking": false,
-  "v8_code_comments": false,
-  "v8_enable_debug_code": false,
-  "v8_enable_verify_csa": false,
-  "v8_enable_verify_heap": false,
-  "v8_enable_slow_dchecks": false,
-  "v8_enable_maglev": false,
-  "v8_enable_disassembler": false,
-  "is_DEBUG_defined": false,
-  "v8_enable_turbofan": false,
-  "v8_jitless": false,
-  "v8_enable_gdbjit": false
+  "conservative_stack_scanning": false,
+  "concurrent_marking": true,
+  "direct_local": false,
+  "lite_mode": false,
+  "pointer_compression": true,
+  "pointer_compression_shared_cage": true,
+  "sandbox": false,
+  "shared_ro_heap": true,
+  "write_barriers": true,
+  "v8_cfi": false,
+  "single_generation": false,
+  "third_party_heap": false,
+  "has_webassembly": true,
+  "dict_property_const_tracking": false,
+  "code_comments": false,
+  "debug_code": false,
+  "verify_csa": false,
+  "verify_heap": false,
+  "slow_dchecks": false,
+  "has_maglev": false,
+  "disassembler": false,
+  "DEBUG_defined": false,
+  "has_turbofan": false,
+  "has_jitless": false,
+  "gdbjit": false,
+  "mips_arch_variant": "",
+  "mips_use_msa": false
 }
-- 
2.35.1

