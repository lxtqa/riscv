From 9ce00925dbe45e75815a54a38bedbea4d770c023 Mon Sep 17 00:00:00 2001
From: Igor Sheludko <ishell@chromium.org>
Date: Wed, 5 Jul 2023 17:21:02 +0200
Subject: [PATCH] [builtins] Record context in CallApiCallbackGeneric builtin

... so that the Api function can be instantiated in the correct context
in case it should be shown in exception stack trace.

Bug: v8:13825
Change-Id: Ifc00305ffa58b022e3ba31654c5bc7dc5f80d705
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4664651
Reviewed-by: Jakob Linke <jgruber@chromium.org>
Commit-Queue: Igor Sheludko <ishell@chromium.org>
Cr-Commit-Position: refs/heads/main@{#88698}
---
 src/builtins/arm/builtins-arm.cc              | 20 ++++++--
 src/builtins/arm64/builtins-arm64.cc          | 21 ++++++--
 src/builtins/ia32/builtins-ia32.cc            | 18 +++++--
 src/builtins/loong64/builtins-loong64.cc      | 20 ++++++--
 src/builtins/mips64/builtins-mips64.cc        | 20 ++++++--
 src/builtins/ppc/builtins-ppc.cc              | 20 ++++++--
 src/builtins/riscv/builtins-riscv.cc          | 20 ++++++--
 src/builtins/s390/builtins-s390.cc            | 20 ++++++--
 src/builtins/x64/builtins-x64.cc              | 26 +++++++---
 src/execution/frame-constants.h               | 17 ++++++-
 src/execution/frames-inl.h                    |  4 ++
 src/execution/frames.cc                       | 11 ++--
 src/execution/frames.h                        |  1 +
 .../stack-trace-cpp-function-template-2.js    |  2 +
 .../stack-trace-cpp-function-template-3.js    | 50 +++++++++++++++++++
 15 files changed, 218 insertions(+), 52 deletions(-)
 create mode 100644 test/mjsunit/stack-trace-cpp-function-template-3.js

diff --git a/src/builtins/arm/builtins-arm.cc b/src/builtins/arm/builtins-arm.cc
index 8fbf1175a4b..66a65dc34dd 100644
--- a/src/builtins/arm/builtins-arm.cc
+++ b/src/builtins/arm/builtins-arm.cc
@@ -3446,13 +3446,23 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   static_assert(FCI::kImplicitArgsOffset == 0);
   static_assert(FCI::kValuesOffset == 1 * kPointerSize);
   static_assert(FCI::kLengthOffset == 2 * kPointerSize);
-  const int exit_frame_params_size =
-      mode == CallApiCallbackMode::kGeneric ? 2 : 0;
+  const int exit_frame_params_count =
+      mode == CallApiCallbackMode::kGeneric
+          ? ApiCallbackExitFrameConstants::kAdditionalParametersCount
+          : 0;
 
   FrameScope frame_scope(masm, StackFrame::MANUAL);
   if (mode == CallApiCallbackMode::kGeneric) {
     ASM_CODE_COMMENT_STRING(masm, "Push API_CALLBACK_EXIT frame arguments");
-    __ AllocateStackSpace(exit_frame_params_size * kSystemPointerSize);
+    __ AllocateStackSpace(exit_frame_params_count * kSystemPointerSize);
+
+    // No padding is required.
+    static_assert(ApiCallbackExitFrameConstants::kOptionalPaddingSize == 0);
+
+    // Context parameter.
+    static_assert(ApiCallbackExitFrameConstants::kContextOffset ==
+                  4 * kSystemPointerSize);
+    __ str(kContextRegister, MemOperand(sp, 2 * kSystemPointerSize));
 
     // Argc parameter as a Smi.
     static_assert(ApiCallbackExitFrameConstants::kArgcOffset ==
@@ -3497,7 +3507,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   MemOperand stack_space_operand =
       ExitFrameStackSlotOperand(FCI::kLengthOffset + kSlotsToDropOnStackSize);
   __ mov(scratch, Operand((FCA::kArgsLength + 1 /* receiver */ +
-                           exit_frame_params_size) *
+                           exit_frame_params_count) *
                           kPointerSize));
   __ add(scratch, scratch, Operand(argc, LSL, kPointerSizeLog2));
   __ str(scratch, stack_space_operand);
@@ -3514,7 +3524,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   Register thunk_arg = api_function_address;
 
   MemOperand return_value_operand = ExitFrameCallerStackSlotOperand(
-      FCA::kReturnValueIndex + exit_frame_params_size);
+      FCA::kReturnValueIndex + exit_frame_params_count);
   static constexpr int kUseStackSpaceOperand = 0;
 
   CallApiFunctionAndReturn(masm, api_function_address, thunk_ref, thunk_arg,
diff --git a/src/builtins/arm64/builtins-arm64.cc b/src/builtins/arm64/builtins-arm64.cc
index 803eb771cc1..a06bc083ba0 100644
--- a/src/builtins/arm64/builtins-arm64.cc
+++ b/src/builtins/arm64/builtins-arm64.cc
@@ -5641,13 +5641,24 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   static_assert(FCI::kImplicitArgsOffset == 0);
   static_assert(FCI::kValuesOffset == 1 * kSystemPointerSize);
   static_assert(FCI::kLengthOffset == 2 * kSystemPointerSize);
-  const int exit_frame_params_size =
-      mode == CallApiCallbackMode::kGeneric ? 2 : 0;
+  const int exit_frame_params_count =
+      mode == CallApiCallbackMode::kGeneric
+          ? ApiCallbackExitFrameConstants::kAdditionalParametersCount
+          : 0;
 
   FrameScope frame_scope(masm, StackFrame::MANUAL);
   if (mode == CallApiCallbackMode::kGeneric) {
     ASM_CODE_COMMENT_STRING(masm, "Push API_CALLBACK_EXIT frame arguments");
-    __ Claim(exit_frame_params_size, kSystemPointerSize);
+    __ Claim(exit_frame_params_count, kSystemPointerSize);
+
+    // Context parameter and padding.
+    static_assert(ApiCallbackExitFrameConstants::kOptionalPaddingSize ==
+                  kSystemPointerSize);
+    static_assert(ApiCallbackExitFrameConstants::kOptionalPaddingOffset ==
+                  5 * kSystemPointerSize);
+    static_assert(ApiCallbackExitFrameConstants::kContextOffset ==
+                  4 * kSystemPointerSize);
+    __ Stp(kContextRegister, xzr, MemOperand(sp, 2 * kSystemPointerSize));
 
     // Argc parameter as a Smi.
     static_assert(ApiCallbackExitFrameConstants::kArgcOffset ==
@@ -5699,7 +5710,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   MemOperand stack_space_operand =
       ExitFrameStackSlotOperand(FCI::kLengthOffset + kSlotsToDropOnStackSize);
   __ Add(scratch, argc,
-         Operand(FCA::kArgsLengthWithReceiver + exit_frame_params_size));
+         Operand(FCA::kArgsLengthWithReceiver + exit_frame_params_count));
   __ Str(scratch, stack_space_operand);
 
   __ RecordComment("v8::FunctionCallback's argument.");
@@ -5718,7 +5729,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   DCHECK_EQ(FCA::kArgsLength % 2, 0);
 
   MemOperand return_value_operand = ExitFrameCallerStackSlotOperand(
-      FCA::kReturnValueIndex + exit_frame_params_size);
+      FCA::kReturnValueIndex + exit_frame_params_count);
   static constexpr int kUseStackSpaceOperand = 0;
 
   CallApiFunctionAndReturn(masm, api_function_address, thunk_ref, thunk_arg,
diff --git a/src/builtins/ia32/builtins-ia32.cc b/src/builtins/ia32/builtins-ia32.cc
index 9d1eb5d1e54..1e42a2518bd 100644
--- a/src/builtins/ia32/builtins-ia32.cc
+++ b/src/builtins/ia32/builtins-ia32.cc
@@ -3666,14 +3666,24 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   // from the stack after the callback in non-GCed space of the exit frame.
   static constexpr int kApiStackSpace = 4;
   static_assert((kApiStackSpace - 1) * kSystemPointerSize == sizeof(FCI));
-  const int exit_frame_params_size =
-      mode == CallApiCallbackMode::kGeneric ? 2 : 0;
+  const int exit_frame_params_count =
+      mode == CallApiCallbackMode::kGeneric
+          ? ApiCallbackExitFrameConstants::kAdditionalParametersCount
+          : 0;
 
   if (mode == CallApiCallbackMode::kGeneric) {
     ASM_CODE_COMMENT_STRING(masm, "Push API_CALLBACK_EXIT frame arguments");
     // Reload argc from xmm0.
     __ movd(api_function_address, xmm0);
 
+    // No padding is required.
+    static_assert(ApiCallbackExitFrameConstants::kOptionalPaddingSize == 0);
+
+    // Context parameter.
+    static_assert(ApiCallbackExitFrameConstants::kContextOffset ==
+                  4 * kSystemPointerSize);
+    __ Push(kContextRegister);
+
     // Argc parameter as a Smi.
     static_assert(ApiCallbackExitFrameConstants::kArgcOffset ==
                   3 * kSystemPointerSize);
@@ -3726,7 +3736,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   // from the API function here.
   __ lea(scratch, Operand(argc, times_system_pointer_size,
                           (FCA::kArgsLength + 1 /* receiver */ +
-                           exit_frame_params_size) *
+                           exit_frame_params_count) *
                               kSystemPointerSize));
   __ mov(ApiParameterOperand(kApiArgc + 3), scratch);
 
@@ -3741,7 +3751,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   Register thunk_arg = api_function_address;
 
   Operand return_value_operand = ExitFrameCallerStackSlotOperand(
-      FCA::kReturnValueIndex + exit_frame_params_size);
+      FCA::kReturnValueIndex + exit_frame_params_count);
   static constexpr int kUseStackSpaceOperand = 0;
   Operand stack_space_operand = ApiParameterOperand(kApiArgc + 3);
 
diff --git a/src/builtins/loong64/builtins-loong64.cc b/src/builtins/loong64/builtins-loong64.cc
index 12bff7a795d..4befd18bb3a 100644
--- a/src/builtins/loong64/builtins-loong64.cc
+++ b/src/builtins/loong64/builtins-loong64.cc
@@ -3328,13 +3328,23 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   static_assert(FCI::kImplicitArgsOffset == 0);
   static_assert(FCI::kValuesOffset == 1 * kSystemPointerSize);
   static_assert(FCI::kLengthOffset == 2 * kSystemPointerSize);
-  const int exit_frame_params_size =
-      mode == CallApiCallbackMode::kGeneric ? 2 : 0;
+  const int exit_frame_params_count =
+      mode == CallApiCallbackMode::kGeneric
+          ? ApiCallbackExitFrameConstants::kAdditionalParametersCount
+          : 0;
 
   FrameScope frame_scope(masm, StackFrame::MANUAL);
   if (mode == CallApiCallbackMode::kGeneric) {
     ASM_CODE_COMMENT_STRING(masm, "Push API_CALLBACK_EXIT frame arguments");
-    __ AllocateStackSpace(exit_frame_params_size * kSystemPointerSize);
+    __ AllocateStackSpace(exit_frame_params_count * kSystemPointerSize);
+
+    // No padding is required.
+    static_assert(ApiCallbackExitFrameConstants::kOptionalPaddingSize == 0);
+
+    // Context parameter.
+    static_assert(ApiCallbackExitFrameConstants::kContextOffset ==
+                  4 * kSystemPointerSize);
+    __ St_d(kContextRegister, MemOperand(sp, 2 * kSystemPointerSize));
 
     // Argc parameter as a Smi.
     static_assert(ApiCallbackExitFrameConstants::kArgcOffset ==
@@ -3387,7 +3397,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   MemOperand stack_space_operand =
       ExitFrameStackSlotOperand(FCI::kLengthOffset + kSlotsToDropOnStackSize);
   __ Add_d(scratch, argc,
-           Operand(FCA::kArgsLengthWithReceiver + exit_frame_params_size));
+           Operand(FCA::kArgsLengthWithReceiver + exit_frame_params_count));
   __ St_d(scratch, stack_space_operand);
 
   __ RecordComment("v8::FunctionCallback's argument.");
@@ -3404,7 +3414,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   Register thunk_arg = api_function_address;
 
   MemOperand return_value_operand = ExitFrameCallerStackSlotOperand(
-      FCA::kReturnValueIndex + exit_frame_params_size);
+      FCA::kReturnValueIndex + exit_frame_params_count);
 
   static constexpr int kUseStackSpaceOperand = 0;
 
diff --git a/src/builtins/mips64/builtins-mips64.cc b/src/builtins/mips64/builtins-mips64.cc
index 692e9e828fc..64aadf4f8ae 100644
--- a/src/builtins/mips64/builtins-mips64.cc
+++ b/src/builtins/mips64/builtins-mips64.cc
@@ -3365,13 +3365,23 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   static_assert(FCI::kImplicitArgsOffset == 0);
   static_assert(FCI::kValuesOffset == 1 * kSystemPointerSize);
   static_assert(FCI::kLengthOffset == 2 * kSystemPointerSize);
-  const int exit_frame_params_size =
-      mode == CallApiCallbackMode::kGeneric ? 2 : 0;
+  const int exit_frame_params_count =
+      mode == CallApiCallbackMode::kGeneric
+          ? ApiCallbackExitFrameConstants::kAdditionalParametersCount
+          : 0;
 
   FrameScope frame_scope(masm, StackFrame::MANUAL);
   if (mode == CallApiCallbackMode::kGeneric) {
     ASM_CODE_COMMENT_STRING(masm, "Push API_CALLBACK_EXIT frame arguments");
-    __ AllocateStackSpace(exit_frame_params_size * kSystemPointerSize);
+    __ AllocateStackSpace(exit_frame_params_count * kSystemPointerSize);
+
+    // No padding is required.
+    static_assert(ApiCallbackExitFrameConstants::kOptionalPaddingSize == 0);
+
+    // Context parameter.
+    static_assert(ApiCallbackExitFrameConstants::kContextOffset ==
+                  4 * kSystemPointerSize);
+    __ Sd(kContextRegister, MemOperand(sp, 2 * kSystemPointerSize));
 
     // Argc parameter as a Smi.
     static_assert(ApiCallbackExitFrameConstants::kArgcOffset ==
@@ -3421,7 +3431,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   MemOperand stack_space_operand =
       ExitFrameStackSlotOperand(FCI::kLengthOffset + kSlotsToDropOnStackSize);
   __ Daddu(scratch, argc,
-           Operand(FCA::kArgsLengthWithReceiver + exit_frame_params_size));
+           Operand(FCA::kArgsLengthWithReceiver + exit_frame_params_count));
   __ Sd(scratch, stack_space_operand);
 
   __ RecordComment("v8::FunctionCallback's argument.");
@@ -3440,7 +3450,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   Register thunk_arg = api_function_address;
 
   MemOperand return_value_operand = ExitFrameCallerStackSlotOperand(
-      FCA::kReturnValueIndex + exit_frame_params_size);
+      FCA::kReturnValueIndex + exit_frame_params_count);
 
   static constexpr int kUseStackSpaceOperand = 0;
 
diff --git a/src/builtins/ppc/builtins-ppc.cc b/src/builtins/ppc/builtins-ppc.cc
index 1329ab5a559..dcd23ccc2c2 100644
--- a/src/builtins/ppc/builtins-ppc.cc
+++ b/src/builtins/ppc/builtins-ppc.cc
@@ -3578,13 +3578,23 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   static_assert(FCI::kImplicitArgsOffset == 0);
   static_assert(FCI::kValuesOffset == 1 * kSystemPointerSize);
   static_assert(FCI::kLengthOffset == 2 * kSystemPointerSize);
-  const int exit_frame_params_size =
-      mode == CallApiCallbackMode::kGeneric ? 2 : 0;
+  const int exit_frame_params_count =
+      mode == CallApiCallbackMode::kGeneric
+          ? ApiCallbackExitFrameConstants::kAdditionalParametersCount
+          : 0;
 
   FrameScope frame_scope(masm, StackFrame::MANUAL);
   if (mode == CallApiCallbackMode::kGeneric) {
     ASM_CODE_COMMENT_STRING(masm, "Push API_CALLBACK_EXIT frame arguments");
-    __ AllocateStackSpace(exit_frame_params_size * kSystemPointerSize);
+    __ AllocateStackSpace(exit_frame_params_count * kSystemPointerSize);
+
+    // No padding is required.
+    static_assert(ApiCallbackExitFrameConstants::kOptionalPaddingSize == 0);
+
+    // Context parameter.
+    static_assert(ApiCallbackExitFrameConstants::kContextOffset ==
+                  4 * kSystemPointerSize);
+    __ StoreU64(kContextRegister, MemOperand(sp, 2 * kSystemPointerSize));
 
     // Argc parameter as a Smi.
     static_assert(ApiCallbackExitFrameConstants::kArgcOffset ==
@@ -3631,7 +3641,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   MemOperand stack_space_operand =
       ExitFrameStackSlotOperand(FCI::kLengthOffset + kSlotsToDropOnStackSize);
   __ mov(scratch, Operand((FCA::kArgsLength + 1 /* receiver */ +
-                           exit_frame_params_size) *
+                           exit_frame_params_count) *
                           kSystemPointerSize));
   __ ShiftLeftU64(ip, argc, Operand(kSystemPointerSizeLog2));
   __ add(scratch, scratch, ip);
@@ -3650,7 +3660,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   Register thunk_arg = api_function_address;
 
   MemOperand return_value_operand = ExitFrameCallerStackSlotOperand(
-      FCA::kReturnValueIndex + exit_frame_params_size);
+      FCA::kReturnValueIndex + exit_frame_params_count);
   static constexpr int kUseStackSpaceOperand = 0;
 
   CallApiFunctionAndReturn(masm, api_function_address, thunk_ref, thunk_arg,
diff --git a/src/builtins/riscv/builtins-riscv.cc b/src/builtins/riscv/builtins-riscv.cc
index eb4e3385f34..bb1b4a9a0bc 100644
--- a/src/builtins/riscv/builtins-riscv.cc
+++ b/src/builtins/riscv/builtins-riscv.cc
@@ -3422,13 +3422,23 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   static_assert(FCI::kImplicitArgsOffset == 0);
   static_assert(FCI::kValuesOffset == 1 * kSystemPointerSize);
   static_assert(FCI::kLengthOffset == 2 * kSystemPointerSize);
-  const int exit_frame_params_size =
-      mode == CallApiCallbackMode::kGeneric ? 2 : 0;
+  const int exit_frame_params_count =
+      mode == CallApiCallbackMode::kGeneric
+          ? ApiCallbackExitFrameConstants::kAdditionalParametersCount
+          : 0;
 
   FrameScope frame_scope(masm, StackFrame::MANUAL);
   if (mode == CallApiCallbackMode::kGeneric) {
     ASM_CODE_COMMENT_STRING(masm, "Push API_CALLBACK_EXIT frame arguments");
-    __ AllocateStackSpace(exit_frame_params_size * kSystemPointerSize);
+    __ AllocateStackSpace(exit_frame_params_count * kSystemPointerSize);
+
+    // No padding is required.
+    static_assert(ApiCallbackExitFrameConstants::kOptionalPaddingSize == 0);
+
+    // Context parameter.
+    static_assert(ApiCallbackExitFrameConstants::kContextOffset ==
+                  4 * kSystemPointerSize);
+    __ StoreWord(kContextRegister, MemOperand(sp, 2 * kSystemPointerSize));
 
     // Argc parameter as a Smi.
     static_assert(ApiCallbackExitFrameConstants::kArgcOffset ==
@@ -3480,7 +3490,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   MemOperand stack_space_operand =
       ExitFrameStackSlotOperand(FCI::kLengthOffset + kSlotsToDropOnStackSize);
   __ AddWord(scratch, argc,
-             Operand(FCA::kArgsLengthWithReceiver + exit_frame_params_size));
+             Operand(FCA::kArgsLengthWithReceiver + exit_frame_params_count));
   __ StoreWord(scratch, stack_space_operand);
 
   __ RecordComment("v8::FunctionCallback's argument.");
@@ -3493,7 +3503,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
       ExternalReference::invoke_function_callback(mode);
 
   MemOperand return_value_operand = ExitFrameCallerStackSlotOperand(
-      FCA::kReturnValueIndex + exit_frame_params_size);
+      FCA::kReturnValueIndex + exit_frame_params_count);
 
   // Pass api function address to thunk wrapper in case profiler or side-effect
   // checking is enabled.
diff --git a/src/builtins/s390/builtins-s390.cc b/src/builtins/s390/builtins-s390.cc
index 59615ccbf2c..97f01eab3c0 100644
--- a/src/builtins/s390/builtins-s390.cc
+++ b/src/builtins/s390/builtins-s390.cc
@@ -3558,13 +3558,23 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   static_assert(FCI::kImplicitArgsOffset == 0);
   static_assert(FCI::kValuesOffset == 1 * kSystemPointerSize);
   static_assert(FCI::kLengthOffset == 2 * kSystemPointerSize);
-  const int exit_frame_params_size =
-      mode == CallApiCallbackMode::kGeneric ? 2 : 0;
+  const int exit_frame_params_count =
+      mode == CallApiCallbackMode::kGeneric
+          ? ApiCallbackExitFrameConstants::kAdditionalParametersCount
+          : 0;
 
   FrameScope frame_scope(masm, StackFrame::MANUAL);
   if (mode == CallApiCallbackMode::kGeneric) {
     ASM_CODE_COMMENT_STRING(masm, "Push API_CALLBACK_EXIT frame arguments");
-    __ AllocateStackSpace(exit_frame_params_size * kSystemPointerSize);
+    __ AllocateStackSpace(exit_frame_params_count * kSystemPointerSize);
+
+    // No padding is required.
+    static_assert(ApiCallbackExitFrameConstants::kOptionalPaddingSize == 0);
+
+    // Context parameter.
+    static_assert(ApiCallbackExitFrameConstants::kContextOffset ==
+                  4 * kSystemPointerSize);
+    __ StoreU64(kContextRegister, MemOperand(sp, 2 * kSystemPointerSize));
 
     // Argc parameter as a Smi.
     static_assert(ApiCallbackExitFrameConstants::kArgcOffset ==
@@ -3610,7 +3620,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   MemOperand stack_space_operand =
       ExitFrameStackSlotOperand(FCI::kLengthOffset + kSlotsToDropOnStackSize);
   __ mov(scratch, Operand((FCA::kArgsLength + 1 /* receiver */ +
-                           exit_frame_params_size) *
+                           exit_frame_params_count) *
                           kSystemPointerSize));
   __ ShiftLeftU64(r1, argc, Operand(kSystemPointerSizeLog2));
   __ AddS64(scratch, r1);
@@ -3629,7 +3639,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   Register thunk_arg = api_function_address;
 
   MemOperand return_value_operand = ExitFrameCallerStackSlotOperand(
-      FCA::kReturnValueIndex + exit_frame_params_size);
+      FCA::kReturnValueIndex + exit_frame_params_count);
   static constexpr int kUseStackSpaceOperand = 0;
 
   CallApiFunctionAndReturn(masm, api_function_address, thunk_ref, thunk_arg,
diff --git a/src/builtins/x64/builtins-x64.cc b/src/builtins/x64/builtins-x64.cc
index 74f02a47e96..d8fa3562f71 100644
--- a/src/builtins/x64/builtins-x64.cc
+++ b/src/builtins/x64/builtins-x64.cc
@@ -5084,12 +5084,22 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   // from the stack after the callback in non-GCed space of the exit frame.
   static constexpr int kApiStackSpace = 4;
   static_assert((kApiStackSpace - 1) * kSystemPointerSize == sizeof(FCI));
-  const int exit_frame_params_size =
-      mode == CallApiCallbackMode::kGeneric ? 2 : 0;
+  const int exit_frame_params_count =
+      mode == CallApiCallbackMode::kGeneric
+          ? ApiCallbackExitFrameConstants::kAdditionalParametersCount
+          : 0;
 
   if (mode == CallApiCallbackMode::kGeneric) {
     ASM_CODE_COMMENT_STRING(masm, "Push API_CALLBACK_EXIT frame arguments");
 
+    // No padding is required.
+    static_assert(ApiCallbackExitFrameConstants::kOptionalPaddingSize == 0);
+
+    // Context parameter.
+    static_assert(ApiCallbackExitFrameConstants::kContextOffset ==
+                  4 * kSystemPointerSize);
+    __ Push(kContextRegister);
+
     // Argc parameter as a Smi.
     static_assert(ApiCallbackExitFrameConstants::kArgcOffset ==
                   3 * kSystemPointerSize);
@@ -5143,11 +5153,11 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   // from the API function here.
   constexpr int kBytesToDropOffset = kLengthOffset + 1;
   static_assert(kBytesToDropOffset == kApiStackSpace - 1);
-  __ leaq(
-      kScratchRegister,
-      Operand(argc, times_system_pointer_size,
-              (FCA::kArgsLength + exit_frame_params_size) * kSystemPointerSize +
-                  kReceiverOnStackSize));
+  __ leaq(kScratchRegister,
+          Operand(argc, times_system_pointer_size,
+                  (FCA::kArgsLength + exit_frame_params_count) *
+                          kSystemPointerSize +
+                      kReceiverOnStackSize));
   __ movq(ExitFrameStackSlotOperand(kBytesToDropOffset), kScratchRegister);
 
   __ RecordComment("v8::FunctionCallback's argument.");
@@ -5163,7 +5173,7 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   Register thunk_arg = api_function_address;
 
   Operand return_value_operand = ExitFrameCallerStackSlotOperand(
-      FCA::kReturnValueIndex + exit_frame_params_size);
+      FCA::kReturnValueIndex + exit_frame_params_count);
   static constexpr int kUseExitFrameStackSlotOperand = 0;
   Operand stack_space_operand = ExitFrameStackSlotOperand(kBytesToDropOffset);
 
diff --git a/src/execution/frame-constants.h b/src/execution/frame-constants.h
index 982bc49308c..cd090ccf78b 100644
--- a/src/execution/frame-constants.h
+++ b/src/execution/frame-constants.h
@@ -346,12 +346,25 @@ class ApiCallbackExitFrameConstants : public ExitFrameConstants {
   static constexpr int kFunctionCallbackInfoNewTargetIndex = 5;
   static constexpr int kFunctionCallbackInfoArgsLength = 6;
 
-  // Target and argc.
+  // Target, argc, context and optional padding (for arm64).
   static constexpr int kTargetOffset = kCallerPCOffset + 1 * kSystemPointerSize;
   static constexpr int kArgcOffset = kTargetOffset + 1 * kSystemPointerSize;
+  static constexpr int kContextOffset = kArgcOffset + 1 * kSystemPointerSize;
+  static constexpr int kOptionalPaddingOffset =
+      kContextOffset + 1 * kSystemPointerSize;
+
+#if V8_TARGET_ARCH_ARM64
+  // Padding is required to keep the stack 16-byte aligned.
+  static constexpr int kOptionalPaddingSize = kSystemPointerSize;
+  static constexpr int kAdditionalParametersCount = 4;
+#else
+  static constexpr int kOptionalPaddingSize = 0;
+  static constexpr int kAdditionalParametersCount = 3;
+#endif  // V8_TARGET_ARCH_ARM64
+
   // FunctionCallbackInfo.
   static constexpr int kFunctionCallbackInfoOffset =
-      kArgcOffset + 1 * kSystemPointerSize;
+      kOptionalPaddingOffset + kOptionalPaddingSize;
   static constexpr int kNewTargetOffset =
       kFunctionCallbackInfoOffset +
       kFunctionCallbackInfoNewTargetIndex * kSystemPointerSize;
diff --git a/src/execution/frames-inl.h b/src/execution/frames-inl.h
index c10e62c5c0f..0eba31e065c 100644
--- a/src/execution/frames-inl.h
+++ b/src/execution/frames-inl.h
@@ -170,6 +170,10 @@ inline FullObjectSlot ApiCallbackExitFrame::argc_slot() const {
   return FullObjectSlot(fp() + ApiCallbackExitFrameConstants::kArgcOffset);
 }
 
+inline FullObjectSlot ApiCallbackExitFrame::context_slot() const {
+  return FullObjectSlot(fp() + ApiCallbackExitFrameConstants::kContextOffset);
+}
+
 inline FullObjectSlot ApiCallbackExitFrame::target_slot() const {
   return FullObjectSlot(fp() + ApiCallbackExitFrameConstants::kTargetOffset);
 }
diff --git a/src/execution/frames.cc b/src/execution/frames.cc
index 295d80c89b3..e28635a9c2a 100644
--- a/src/execution/frames.cc
+++ b/src/execution/frames.cc
@@ -1075,14 +1075,19 @@ void ApiCallbackExitFrame::set_target(HeapObject function) const {
 Handle<JSFunction> ApiCallbackExitFrame::GetFunction() const {
   HeapObject maybe_function = target();
   if (maybe_function.IsJSFunction()) {
-    return Handle<JSFunction>(
-        reinterpret_cast<Address*>(target_slot().address()));
+    return Handle<JSFunction>(target_slot().location());
   }
   DCHECK(maybe_function.IsFunctionTemplateInfo());
   Handle<FunctionTemplateInfo> function_template_info(
       FunctionTemplateInfo::cast(maybe_function), isolate());
+
+  // Instantiate function for the correct context.
+  DCHECK((*context_slot()).IsContext());
+  Handle<NativeContext> native_context(
+      Context::cast(*context_slot()).native_context(), isolate());
+
   Handle<JSFunction> function =
-      ApiNatives::InstantiateFunction(isolate(), isolate()->native_context(),
+      ApiNatives::InstantiateFunction(isolate(), native_context,
                                       function_template_info)
           .ToHandleChecked();
 
diff --git a/src/execution/frames.h b/src/execution/frames.h
index b049982d3a3..5e70c541aaa 100644
--- a/src/execution/frames.h
+++ b/src/execution/frames.h
@@ -905,6 +905,7 @@ class ApiCallbackExitFrame : public ExitFrame {
 
   inline FullObjectSlot receiver_slot() const;
   inline FullObjectSlot argc_slot() const;
+  inline FullObjectSlot context_slot() const;
   inline FullObjectSlot target_slot() const;
   inline FullObjectSlot new_target_slot() const;
 
diff --git a/test/mjsunit/stack-trace-cpp-function-template-2.js b/test/mjsunit/stack-trace-cpp-function-template-2.js
index 7c9a4966a2f..bd45c5e11dd 100644
--- a/test/mjsunit/stack-trace-cpp-function-template-2.js
+++ b/test/mjsunit/stack-trace-cpp-function-template-2.js
@@ -20,6 +20,8 @@ Error.prepareStackTrace = (e, frames) => {
   assertEquals(foo, frames[0].getFunction());
   assertEquals(object.toString, frames[1].getFunction());
   assertEquals("print", frames[2].getFunctionName());
+  // Ensure print function in instantiated for the correct context.
+  assertEquals(print, frames[2].getFunction());
   assertEquals(bar, frames[3].getFunction());
   return frames;
 };
diff --git a/test/mjsunit/stack-trace-cpp-function-template-3.js b/test/mjsunit/stack-trace-cpp-function-template-3.js
new file mode 100644
index 00000000000..24503d03edb
--- /dev/null
+++ b/test/mjsunit/stack-trace-cpp-function-template-3.js
@@ -0,0 +1,50 @@
+// Copyright 2023 the V8 project authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// Flags: --allow-natives-syntax --turbofan --experimental-stack-trace-frames
+
+// Verifies that "print" shows up in Error.stack when "bar" is optimized
+// by Turbofan and that the "print" function belongs to the correct context:
+// Error
+//     at foo (...)
+//     at Object.toString (...)
+//     at print (<anonymous>)
+//     at bar (...)
+//     at (...)
+let realm = Realm.createAllowCrossRealmAccess();
+let remote_print = Realm.eval(realm, `print`);
+
+let prepareStackTraceCalled = false;
+Error.prepareStackTrace = (e, frames) => {
+  prepareStackTraceCalled = true;
+  assertEquals(5, frames.length);
+
+  assertEquals(foo, frames[0].getFunction());
+  assertEquals(object.toString, frames[1].getFunction());
+  assertEquals("print", frames[2].getFunctionName());
+  // Ensure print function in instantiated for the correct context.
+  assertEquals(remote_print, frames[2].getFunction());
+  assertEquals(bar, frames[3].getFunction());
+  return frames;
+};
+
+function foo() { throw new Error(); }
+const object = { toString: () => { return foo(); } };
+
+function bar() {
+  remote_print(object);
+}
+
+%PrepareFunctionForOptimization(bar);
+try { bar(); } catch (e) {}
+try { bar(); } catch (e) {}
+%OptimizeFunctionOnNextCall(bar);
+
+try { bar(); } catch(e) {
+  // Trigger prepareStackTrace.
+  e.stack;
+}
+
+assertOptimized(bar);
+assertTrue(prepareStackTraceCalled);
-- 
2.35.1

