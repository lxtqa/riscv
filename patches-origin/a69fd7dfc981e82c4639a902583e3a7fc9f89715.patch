From a69fd7dfc981e82c4639a902583e3a7fc9f89715 Mon Sep 17 00:00:00 2001
From: Lu Yahan <yahan@iscas.ac.cn>
Date: Mon, 21 Aug 2023 11:28:43 +0800
Subject: [PATCH] [riscv] Reduce the vector arch code (Part 7)

Change-Id: I4ed86ab8d3b27a53f0ab34cf4873daca151ffccb
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4795894
Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#89560}
---
 .../backend/riscv/code-generator-riscv.cc     | 39 ----------
 .../backend/riscv/instruction-codes-riscv.h   |  5 --
 .../riscv/instruction-scheduler-riscv.cc      |  5 --
 .../riscv/instruction-selector-riscv.h        | 74 +++++++++++++++----
 4 files changed, 60 insertions(+), 63 deletions(-)

diff --git a/src/compiler/backend/riscv/code-generator-riscv.cc b/src/compiler/backend/riscv/code-generator-riscv.cc
index bf8702e8a61..54b75ed3cc4 100644
--- a/src/compiler/backend/riscv/code-generator-riscv.cc
+++ b/src/compiler/backend/riscv/code-generator-riscv.cc
@@ -3064,19 +3064,6 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
       __ vzext_vf2(i.OutputSimd128Register(), kSimd128ScratchReg);
       break;
     }
-    case kRiscvI32x4SConvertI16x8Low: {
-      __ VU.set(kScratchReg, E32, m1);
-      __ vmv_vv(kSimd128ScratchReg, i.InputSimd128Register(0));
-      __ vsext_vf2(i.OutputSimd128Register(), kSimd128ScratchReg);
-      break;
-    }
-    case kRiscvI32x4SConvertI16x8High: {
-      __ VU.set(kScratchReg, E16, m1);
-      __ vslidedown_vi(kSimd128ScratchReg, i.InputSimd128Register(0), 4);
-      __ VU.set(kScratchReg, E32, m1);
-      __ vsext_vf2(i.OutputSimd128Register(), kSimd128ScratchReg);
-      break;
-    }
     case kRiscvI32x4SConvertF32x4: {
       __ VU.set(kScratchReg, E32, m1);
       __ VU.set(FPURoundingMode::RTZ);
@@ -3107,32 +3094,6 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
       }
       break;
     }
-    case kRiscvI32x4UConvertI16x8Low: {
-      __ VU.set(kScratchReg, E32, m1);
-      __ vmv_vv(kSimd128ScratchReg, i.InputSimd128Register(0));
-      __ vzext_vf2(i.OutputSimd128Register(), kSimd128ScratchReg);
-      break;
-    }
-    case kRiscvI32x4UConvertI16x8High: {
-      __ VU.set(kScratchReg, E16, m1);
-      __ vslidedown_vi(kSimd128ScratchReg, i.InputSimd128Register(0), 4);
-      __ VU.set(kScratchReg, E32, m1);
-      __ vzext_vf2(i.OutputSimd128Register(), kSimd128ScratchReg);
-      break;
-    }
-    case kRiscvI16x8SConvertI8x16Low: {
-      __ VU.set(kScratchReg, E16, m1);
-      __ vmv_vv(kSimd128ScratchReg, i.InputSimd128Register(0));
-      __ vsext_vf2(i.OutputSimd128Register(), kSimd128ScratchReg);
-      break;
-    }
-    case kRiscvI16x8SConvertI8x16High: {
-      __ VU.set(kScratchReg, E8, m1);
-      __ vslidedown_vi(kSimd128ScratchReg, i.InputSimd128Register(0), 8);
-      __ VU.set(kScratchReg, E16, m1);
-      __ vsext_vf2(i.OutputSimd128Register(), kSimd128ScratchReg);
-      break;
-    }
 #if V8_TARGET_ARCH_RISCV32
     case kRiscvI64x2SplatI32Pair: {
       __ VU.set(kScratchReg, E32, m1);
diff --git a/src/compiler/backend/riscv/instruction-codes-riscv.h b/src/compiler/backend/riscv/instruction-codes-riscv.h
index 0cd555a44d5..822d5687c5c 100644
--- a/src/compiler/backend/riscv/instruction-codes-riscv.h
+++ b/src/compiler/backend/riscv/instruction-codes-riscv.h
@@ -316,11 +316,6 @@ namespace compiler {
   V(RiscvS128StoreLane)                   \
   V(RiscvRvvLd)                           \
   V(RiscvRvvSt)                           \
-  V(RiscvI32x4SConvertI16x8Low)           \
-  V(RiscvI32x4SConvertI16x8High)          \
-  V(RiscvI32x4UConvertI16x8Low)           \
-  V(RiscvI32x4UConvertI16x8High)          \
-  V(RiscvI16x8SConvertI8x16Low)           \
   V(RiscvVmv)                             \
   V(RiscvVandVv)                          \
   V(RiscvVnotVv)                          \
diff --git a/src/compiler/backend/riscv/instruction-scheduler-riscv.cc b/src/compiler/backend/riscv/instruction-scheduler-riscv.cc
index e72096db824..cae191a6b98 100644
--- a/src/compiler/backend/riscv/instruction-scheduler-riscv.cc
+++ b/src/compiler/backend/riscv/instruction-scheduler-riscv.cc
@@ -159,7 +159,6 @@ int InstructionScheduler::GetTargetInstructionFlags(
     case kRiscvI16x8ExtractLaneU:
     case kRiscvI16x8ExtractLaneS:
     case kRiscvI16x8ReplaceLane:
-    case kRiscvI16x8SConvertI8x16Low:
     case kRiscvI16x8Shl:
     case kRiscvI16x8ShrS:
     case kRiscvI16x8ShrU:
@@ -168,14 +167,10 @@ int InstructionScheduler::GetTargetInstructionFlags(
     case kRiscvI32x4ExtractLane:
     case kRiscvI32x4ReplaceLane:
     case kRiscvI32x4SConvertF32x4:
-    case kRiscvI32x4SConvertI16x8High:
-    case kRiscvI32x4SConvertI16x8Low:
     case kRiscvI32x4Shl:
     case kRiscvI32x4ShrS:
     case kRiscvI32x4ShrU:
     case kRiscvI32x4UConvertF32x4:
-    case kRiscvI32x4UConvertI16x8High:
-    case kRiscvI32x4UConvertI16x8Low:
     case kRiscvI8x16ExtractLaneU:
     case kRiscvI8x16ExtractLaneS:
     case kRiscvI8x16ReplaceLane:
diff --git a/src/compiler/backend/riscv/instruction-selector-riscv.h b/src/compiler/backend/riscv/instruction-selector-riscv.h
index 43f2c045b1b..65b3366644c 100644
--- a/src/compiler/backend/riscv/instruction-selector-riscv.h
+++ b/src/compiler/backend/riscv/instruction-selector-riscv.h
@@ -1123,13 +1123,8 @@ void InstructionSelectorT<Adapter>::VisitI16x8ExtAddPairwiseI8x16U(Node* node) {
   V(I64x2UConvertI32x4High, kRiscvI64x2UConvertI32x4High)       \
   V(I32x4SConvertF32x4, kRiscvI32x4SConvertF32x4)               \
   V(I32x4UConvertF32x4, kRiscvI32x4UConvertF32x4)               \
-  V(I32x4SConvertI16x8Low, kRiscvI32x4SConvertI16x8Low)         \
-  V(I32x4SConvertI16x8High, kRiscvI32x4SConvertI16x8High)       \
-  V(I32x4UConvertI16x8Low, kRiscvI32x4UConvertI16x8Low)         \
-  V(I32x4UConvertI16x8High, kRiscvI32x4UConvertI16x8High)       \
   V(I32x4TruncSatF64x2SZero, kRiscvI32x4TruncSatF64x2SZero)     \
   V(I32x4TruncSatF64x2UZero, kRiscvI32x4TruncSatF64x2UZero)     \
-  V(I16x8SConvertI8x16Low, kRiscvI16x8SConvertI8x16Low)         \
   V(I8x16Popcnt, kRiscvI8x16Popcnt)                             \
   V(S128Not, kRiscvVnot)                                        \
   V(V128AnyTrue, kRiscvV128AnyTrue)
@@ -1346,15 +1341,6 @@ VISIT_SIMD_QFMOP(F32x4Qfma, kRiscvF32x4Qfma)
 VISIT_SIMD_QFMOP(F32x4Qfms, kRiscvF32x4Qfms)
 #undef VISIT_SIMD_QFMOP
 
-template <typename Adapter>
-void InstructionSelectorT<Adapter>::VisitI16x8SConvertI8x16High(Node* node) {
-  RiscvOperandGeneratorT<Adapter> g(this);
-  InstructionOperand temp1 = g.TempFpRegister(v0);
-  Emit(kRiscvVslidedown, temp1, g.UseRegister(node->InputAt(0)),
-       g.UseImmediate(8), g.UseImmediate(E8), g.UseImmediate(m1));
-  Emit(kRiscvVsextVf2, g.DefineAsRegister(node), temp1, g.UseImmediate(E16),
-       g.UseImmediate(m1));
-}
 
 template <typename Adapter>
 void InstructionSelectorT<Adapter>::VisitF32x4Min(Node* node) {
@@ -1542,6 +1528,36 @@ void InstructionSelectorT<Adapter>::VisitF32x4Le(Node* node) {
              temp2, g.UseImmediate(E32), g.UseImmediate(m1));
 }
 
+template <typename Adapter>
+void InstructionSelectorT<Adapter>::VisitI32x4SConvertI16x8Low(Node* node) {
+  RiscvOperandGeneratorT<Adapter> g(this);
+  InstructionOperand temp = g.TempFpRegister(kSimd128ScratchReg);
+  this->Emit(kRiscvVmv, temp, g.UseRegister(node->InputAt(0)),
+             g.UseImmediate(E32), g.UseImmediate(m1));
+  this->Emit(kRiscvVsextVf2, g.DefineAsRegister(node), temp,
+             g.UseImmediate(E32), g.UseImmediate(m1));
+}
+
+template <typename Adapter>
+void InstructionSelectorT<Adapter>::VisitI32x4UConvertI16x8Low(Node* node) {
+  RiscvOperandGeneratorT<Adapter> g(this);
+  InstructionOperand temp = g.TempFpRegister(kSimd128ScratchReg);
+  this->Emit(kRiscvVmv, temp, g.UseRegister(node->InputAt(0)),
+             g.UseImmediate(E32), g.UseImmediate(m1));
+  this->Emit(kRiscvVzextVf2, g.DefineAsRegister(node), temp,
+             g.UseImmediate(E32), g.UseImmediate(m1));
+}
+
+template <typename Adapter>
+void InstructionSelectorT<Adapter>::VisitI16x8SConvertI8x16High(Node* node) {
+  RiscvOperandGeneratorT<Adapter> g(this);
+  InstructionOperand temp1 = g.TempFpRegister(v0);
+  Emit(kRiscvVslidedown, temp1, g.UseRegister(node->InputAt(0)),
+       g.UseImmediate(8), g.UseImmediate(E8), g.UseImmediate(m1));
+  Emit(kRiscvVsextVf2, g.DefineAsRegister(node), temp1, g.UseImmediate(E16),
+       g.UseImmediate(m1));
+}
+
 template <typename Adapter>
 void InstructionSelectorT<Adapter>::VisitI16x8SConvertI32x4(Node* node) {
   RiscvOperandGeneratorT<Adapter> g(this);
@@ -1787,6 +1803,36 @@ void InstructionSelectorT<Adapter>::VisitI8x16Swizzle(Node* node) {
 SIMD_INT_TYPE_LIST(VISIT_BIMASK)
 #undef VISIT_BIMASK
 
+template <typename Adapter>
+void InstructionSelectorT<Adapter>::VisitI32x4SConvertI16x8High(Node* node) {
+  RiscvOperandGeneratorT<Adapter> g(this);
+  InstructionOperand temp = g.TempFpRegister(kSimd128ScratchReg);
+  this->Emit(kRiscvVslidedown, temp, g.UseRegister(node->InputAt(0)),
+             g.UseImmediate(4), g.UseImmediate(E16), g.UseImmediate(m1));
+  this->Emit(kRiscvVsextVf2, g.DefineAsRegister(node), temp,
+             g.UseImmediate(E32), g.UseImmediate(m1));
+}
+
+template <typename Adapter>
+void InstructionSelectorT<Adapter>::VisitI32x4UConvertI16x8High(Node* node) {
+  RiscvOperandGeneratorT<Adapter> g(this);
+  InstructionOperand temp = g.TempFpRegister(kSimd128ScratchReg);
+  this->Emit(kRiscvVslidedown, temp, g.UseRegister(node->InputAt(0)),
+             g.UseImmediate(4), g.UseImmediate(E16), g.UseImmediate(m1));
+  this->Emit(kRiscvVzextVf2, g.DefineAsRegister(node), temp,
+             g.UseImmediate(E32), g.UseImmediate(m1));
+}
+
+template <typename Adapter>
+void InstructionSelectorT<Adapter>::VisitI16x8SConvertI8x16Low(Node* node) {
+  RiscvOperandGeneratorT<Adapter> g(this);
+  InstructionOperand temp = g.TempFpRegister(kSimd128ScratchReg);
+  this->Emit(kRiscvVmv, temp, g.UseRegister(node->InputAt(0)),
+             g.UseImmediate(E16), g.UseImmediate(m1));
+  this->Emit(kRiscvVsextVf2, g.DefineAsRegister(node), temp,
+             g.UseImmediate(E16), g.UseImmediate(m1));
+}
+
 template <typename Adapter>
 void InstructionSelectorT<Adapter>::VisitI16x8UConvertI8x16High(Node* node) {
   RiscvOperandGeneratorT<Adapter> g(this);
-- 
2.35.1

