From f5cd26c8bf02103c50b4fb0cac38643d5f30288e Mon Sep 17 00:00:00 2001
From: Andreas Haas <ahaas@chromium.org>
Date: Fri, 12 Feb 2021 11:34:52 +0100
Subject: [PATCH] [cleanup] Remove API for the WebAssembly Threads origin trial

The origin trial for WebAssembly Threads is over for quite some time,
WebAssembly Threads are enabled by default. The API can therefore be
removed now.

Bug: v8:11384
Change-Id: I3dd65ff63c1ed31d39a76e5aea08b950ef420f54
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/2690598
Reviewed-by: Ulan Degenbaev <ulan@chromium.org>
Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
Commit-Queue: Andreas Haas <ahaas@chromium.org>
Cr-Commit-Position: refs/heads/master@{#72766}
---
 include/v8.h                            |  5 ----
 src/api/api.cc                          |  3 ---
 src/execution/isolate.cc                |  8 ------
 src/execution/isolate.h                 |  2 --
 src/runtime/runtime-test.cc             | 16 ------------
 src/runtime/runtime.h                   |  1 -
 src/wasm/wasm-features.cc               |  3 ---
 test/cctest/test-api-wasm.cc            | 34 -------------------------
 test/mjsunit/mjsunit.status             |  1 -
 test/mjsunit/wasm/origin-trial-flags.js | 34 -------------------------
 10 files changed, 107 deletions(-)
 delete mode 100644 test/mjsunit/wasm/origin-trial-flags.js

diff --git a/include/v8.h b/include/v8.h
index 94057aa72f8..0a858c85c84 100644
--- a/include/v8.h
+++ b/include/v8.h
@@ -7743,9 +7743,6 @@ using ApiImplementationCallback = void (*)(const FunctionCallbackInfo<Value>&);
 // --- Callback for WebAssembly.compileStreaming ---
 using WasmStreamingCallback = void (*)(const FunctionCallbackInfo<Value>&);
 
-// --- Callback for checking if WebAssembly threads are enabled ---
-using WasmThreadsEnabledCallback = bool (*)(Local<Context> context);
-
 // --- Callback for loading source map file for Wasm profiling support
 using WasmLoadSourceMapCallback = Local<String> (*)(Isolate* isolate,
                                                     const char* name);
@@ -9652,8 +9649,6 @@ class V8_EXPORT Isolate {
 
   void SetWasmStreamingCallback(WasmStreamingCallback callback);
 
-  void SetWasmThreadsEnabledCallback(WasmThreadsEnabledCallback callback);
-
   void SetWasmLoadSourceMapCallback(WasmLoadSourceMapCallback callback);
 
   void SetWasmSimdEnabledCallback(WasmSimdEnabledCallback callback);
diff --git a/src/api/api.cc b/src/api/api.cc
index 5e70f647a40..0f6ebd24ab5 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -9026,9 +9026,6 @@ CALLBACK_SETTER(WasmInstanceCallback, ExtensionCallback, wasm_instance_callback)
 CALLBACK_SETTER(WasmStreamingCallback, WasmStreamingCallback,
                 wasm_streaming_callback)
 
-CALLBACK_SETTER(WasmThreadsEnabledCallback, WasmThreadsEnabledCallback,
-                wasm_threads_enabled_callback)
-
 CALLBACK_SETTER(WasmLoadSourceMapCallback, WasmLoadSourceMapCallback,
                 wasm_load_source_map_callback)
 
diff --git a/src/execution/isolate.cc b/src/execution/isolate.cc
index c295cbdd5af..a7f542aca7d 100644
--- a/src/execution/isolate.cc
+++ b/src/execution/isolate.cc
@@ -2529,14 +2529,6 @@ void Isolate::SetAbortOnUncaughtExceptionCallback(
   abort_on_uncaught_exception_callback_ = callback;
 }
 
-bool Isolate::AreWasmThreadsEnabled(Handle<Context> context) {
-  if (wasm_threads_enabled_callback()) {
-    v8::Local<v8::Context> api_context = v8::Utils::ToLocal(context);
-    return wasm_threads_enabled_callback()(api_context);
-  }
-  return FLAG_experimental_wasm_threads;
-}
-
 bool Isolate::IsWasmSimdEnabled(Handle<Context> context) {
   if (wasm_simd_enabled_callback()) {
     v8::Local<v8::Context> api_context = v8::Utils::ToLocal(context);
diff --git a/src/execution/isolate.h b/src/execution/isolate.h
index 151badf73f2..cf01325b547 100644
--- a/src/execution/isolate.h
+++ b/src/execution/isolate.h
@@ -430,7 +430,6 @@ using DebugObjectCache = std::vector<Handle<HeapObject>>;
   V(ExtensionCallback, wasm_module_callback, &NoExtension)                    \
   V(ExtensionCallback, wasm_instance_callback, &NoExtension)                  \
   V(WasmStreamingCallback, wasm_streaming_callback, nullptr)                  \
-  V(WasmThreadsEnabledCallback, wasm_threads_enabled_callback, nullptr)       \
   V(WasmLoadSourceMapCallback, wasm_load_source_map_callback, nullptr)        \
   V(WasmSimdEnabledCallback, wasm_simd_enabled_callback, nullptr)             \
   V(WasmExceptionsEnabledCallback, wasm_exceptions_enabled_callback, nullptr) \
@@ -671,7 +670,6 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
   inline void set_pending_exception(Object exception_obj);
   inline void clear_pending_exception();
 
-  bool AreWasmThreadsEnabled(Handle<Context> context);
   bool IsWasmSimdEnabled(Handle<Context> context);
   bool AreWasmExceptionsEnabled(Handle<Context> context);
 
diff --git a/src/runtime/runtime-test.cc b/src/runtime/runtime-test.cc
index 7139ce53aa3..98593f9c941 100644
--- a/src/runtime/runtime-test.cc
+++ b/src/runtime/runtime-test.cc
@@ -1263,22 +1263,6 @@ RUNTIME_FUNCTION(Runtime_GetWasmExceptionValues) {
   return *isolate->factory()->NewJSArrayWithElements(values);
 }
 
-namespace {
-bool EnableWasmThreads(v8::Local<v8::Context> context) { return true; }
-bool DisableWasmThreads(v8::Local<v8::Context> context) { return false; }
-}  // namespace
-
-// This runtime function enables WebAssembly threads through an embedder
-// callback and thereby bypasses the value in FLAG_experimental_wasm_threads.
-RUNTIME_FUNCTION(Runtime_SetWasmThreadsEnabled) {
-  DCHECK_EQ(1, args.length());
-  CONVERT_BOOLEAN_ARG_CHECKED(flag, 0);
-  v8::Isolate* v8_isolate = reinterpret_cast<v8::Isolate*>(isolate);
-  v8_isolate->SetWasmThreadsEnabledCallback(flag ? EnableWasmThreads
-                                                 : DisableWasmThreads);
-  return ReadOnlyRoots(isolate).undefined_value();
-}
-
 RUNTIME_FUNCTION(Runtime_RegexpHasBytecode) {
   SealHandleScope shs(isolate);
   DCHECK_EQ(2, args.length());
diff --git a/src/runtime/runtime.h b/src/runtime/runtime.h
index 0a15df03186..2166e08f2f5 100644
--- a/src/runtime/runtime.h
+++ b/src/runtime/runtime.h
@@ -543,7 +543,6 @@ namespace internal {
   F(SetIteratorProtector, 0, 1)               \
   F(SetWasmCompileControls, 2, 1)             \
   F(SetWasmInstantiateControls, 0, 1)         \
-  F(SetWasmThreadsEnabled, 1, 1)              \
   F(SimulateNewspaceFull, 0, 1)               \
   F(ScheduleGCInStackCheck, 0, 1)             \
   F(StringIteratorProtector, 0, 1)            \
diff --git a/src/wasm/wasm-features.cc b/src/wasm/wasm-features.cc
index 54f0f5c911b..c236df670c1 100644
--- a/src/wasm/wasm-features.cc
+++ b/src/wasm/wasm-features.cc
@@ -24,9 +24,6 @@ WasmFeatures WasmFeatures::FromFlags() {
 // static
 WasmFeatures WasmFeatures::FromIsolate(Isolate* isolate) {
   WasmFeatures features = WasmFeatures::FromFlags();
-  if (isolate->AreWasmThreadsEnabled(handle(isolate->context(), isolate))) {
-    features.Add(kFeature_threads);
-  }
   if (isolate->IsWasmSimdEnabled(handle(isolate->context(), isolate))) {
     features.Add(kFeature_simd);
   }
diff --git a/test/cctest/test-api-wasm.cc b/test/cctest/test-api-wasm.cc
index e78e9d6b3c1..6064f1384c7 100644
--- a/test/cctest/test-api-wasm.cc
+++ b/test/cctest/test-api-wasm.cc
@@ -129,14 +129,9 @@ TEST(WasmStreamingAbortWithoutReject) {
 
 namespace {
 
-bool wasm_threads_enabled_value = false;
 bool wasm_simd_enabled_value = false;
 bool wasm_exceptions_enabled_value = false;
 
-bool MockWasmThreadsEnabledCallback(v8::Local<v8::Context>) {
-  return wasm_threads_enabled_value;
-}
-
 bool MockWasmSimdEnabledCallback(v8::Local<v8::Context>) {
   return wasm_simd_enabled_value;
 }
@@ -147,35 +142,6 @@ bool MockWasmExceptionsEnabledCallback(v8::Local<v8::Context>) {
 
 }  // namespace
 
-TEST(TestSetWasmThreadsEnabledCallback) {
-  LocalContext env;
-  v8::Isolate* isolate = env->GetIsolate();
-  i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(isolate);
-  v8::HandleScope scope(isolate);
-  v8::Local<v8::Context> context = v8::Context::New(CcTest::isolate());
-  i::Handle<i::Context> i_context = v8::Utils::OpenHandle(*context);
-
-  // {Isolate::AreWasmThreadsEnabled} calls the callback set by the embedder if
-  // such a callback exists. Otherwise it returns
-  // {FLAG_experimental_wasm_threads}. First we test that the flag is returned
-  // correctly if no callback is set. Then we test that the flag is ignored if
-  // the callback is set.
-
-  i::FLAG_experimental_wasm_threads = false;
-  CHECK(!i_isolate->AreWasmThreadsEnabled(i_context));
-
-  i::FLAG_experimental_wasm_threads = true;
-  CHECK(i_isolate->AreWasmThreadsEnabled(i_context));
-
-  isolate->SetWasmThreadsEnabledCallback(MockWasmThreadsEnabledCallback);
-  wasm_threads_enabled_value = false;
-  CHECK(!i_isolate->AreWasmThreadsEnabled(i_context));
-
-  wasm_threads_enabled_value = true;
-  i::FLAG_experimental_wasm_threads = false;
-  CHECK(i_isolate->AreWasmThreadsEnabled(i_context));
-}
-
 TEST(TestSetWasmSimdEnabledCallback) {
   LocalContext env;
   v8::Isolate* isolate = env->GetIsolate();
diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
index 8e99ac56c02..4ac1ca3c110 100644
--- a/test/mjsunit/mjsunit.status
+++ b/test/mjsunit/mjsunit.status
@@ -850,7 +850,6 @@
   'wasm/atomics': [SKIP],
   'wasm/atomics-non-shared': [SKIP],
   'wasm/grow-shared-memory': [SKIP],
-  'wasm/origin-trial-flags': [SKIP],
   'wasm/shared-memory': [SKIP],
 
   # https://github.com/v8-riscv/v8/issues/418
diff --git a/test/mjsunit/wasm/origin-trial-flags.js b/test/mjsunit/wasm/origin-trial-flags.js
deleted file mode 100644
index eae8ceb58c6..00000000000
--- a/test/mjsunit/wasm/origin-trial-flags.js
+++ /dev/null
@@ -1,34 +0,0 @@
-// Copyright 2017 the V8 project authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// Flags: --noexperimental-wasm-threads --allow-natives-syntax
-
-load("test/mjsunit/wasm/wasm-module-builder.js");
-
-function instantiateModuleWithThreads() {
-  // Build a WebAssembly module which uses threads-features.
-  const builder = new WasmModuleBuilder();
-  const shared = true;
-  builder.addMemory(2, 10, false, shared);
-  builder.addFunction('main', kSig_i_ii)
-      .addBody([
-        kExprLocalGet, 0, kExprLocalGet, 1, kAtomicPrefix, kExprI32AtomicAdd, 2,
-        0
-      ])
-      .exportFunc();
-
-  return builder.instantiate();
-}
-
-// Disable WebAssembly threads initially.
-%SetWasmThreadsEnabled(false);
-assertThrows(instantiateModuleWithThreads, WebAssembly.CompileError);
-
-// Enable WebAssembly threads.
-%SetWasmThreadsEnabled(true);
-assertInstanceof(instantiateModuleWithThreads(), WebAssembly.Instance);
-
-// Disable WebAssembly threads.
-%SetWasmThreadsEnabled(false);
-assertThrows(instantiateModuleWithThreads, WebAssembly.CompileError);
-- 
2.35.1

