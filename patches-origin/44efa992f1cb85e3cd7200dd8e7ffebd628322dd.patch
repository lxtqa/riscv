From 44efa992f1cb85e3cd7200dd8e7ffebd628322dd Mon Sep 17 00:00:00 2001
From: Lu Yahan <yahan@iscas.ac.cn>
Date: Tue, 4 Apr 2023 14:52:11 +0800
Subject: [PATCH] [riscv] Implement Label::Distance in Baseline

Change-Id: I840ffb7a4668492a1cc94f1e28bbaed5f3e124c8
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4394982
Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#86894}
---
 .../riscv/baseline-assembler-riscv-inl.h      | 61 ++++++++++---------
 src/codegen/riscv/base-assembler-riscv.h      |  1 +
 src/codegen/riscv/macro-assembler-riscv.cc    | 16 ++---
 src/codegen/riscv/macro-assembler-riscv.h     | 28 ++++++---
 4 files changed, 59 insertions(+), 47 deletions(-)

diff --git a/src/baseline/riscv/baseline-assembler-riscv-inl.h b/src/baseline/riscv/baseline-assembler-riscv-inl.h
index 14b09eec72..f40f71136d 100644
--- a/src/baseline/riscv/baseline-assembler-riscv-inl.h
+++ b/src/baseline/riscv/baseline-assembler-riscv-inl.h
@@ -68,22 +68,22 @@ void BaselineAssembler::JumpTarget() {
 }
 
 void BaselineAssembler::Jump(Label* target, Label::Distance distance) {
-  __ jmp(target);
+  __ jmp(target, distance);
 }
 void BaselineAssembler::JumpIfRoot(Register value, RootIndex index,
-                                   Label* target, Label::Distance) {
-  __ JumpIfRoot(value, index, target);
+                                   Label* target, Label::Distance distance) {
+  __ JumpIfRoot(value, index, target, distance);
 }
 void BaselineAssembler::JumpIfNotRoot(Register value, RootIndex index,
-                                      Label* target, Label::Distance) {
-  __ JumpIfNotRoot(value, index, target);
+                                      Label* target, Label::Distance distance) {
+  __ JumpIfNotRoot(value, index, target, distance);
 }
 void BaselineAssembler::JumpIfSmi(Register value, Label* target,
-                                  Label::Distance) {
-  __ JumpIfSmi(value, target);
+                                  Label::Distance distance) {
+  __ JumpIfSmi(value, target, distance);
 }
 void BaselineAssembler::JumpIfNotSmi(Register value, Label* target,
-                                     Label::Distance) {
+                                     Label::Distance distance) {
   __ JumpIfNotSmi(value, target);
 }
 void BaselineAssembler::JumpIfImmediate(Condition cc, Register left, int right,
@@ -92,16 +92,16 @@ void BaselineAssembler::JumpIfImmediate(Condition cc, Register left, int right,
   JumpIf(cc, left, Operand(right), target, distance);
 }
 void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc,
-                                      Label* target, Label::Distance) {
+                                      Label* target, Label::Distance distance) {
   ScratchRegisterScope temps(this);
   Register tmp = temps.AcquireScratch();
   __ And(tmp, value, Operand(mask));
-  __ Branch(target, cc, tmp, Operand(zero_reg));
+  __ Branch(target, cc, tmp, Operand(zero_reg), distance);
 }
 
 void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand& rhs,
-                               Label* target, Label::Distance) {
-  __ Branch(target, cc, lhs, Operand(rhs));
+                               Label* target, Label::Distance distance) {
+  __ Branch(target, cc, lhs, Operand(rhs), distance);
 }
 void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object,
                                              InstanceType instance_type,
@@ -114,15 +114,16 @@ void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object,
 void BaselineAssembler::JumpIfObjectType(Condition cc, Register object,
                                          InstanceType instance_type,
                                          Register map, Label* target,
-                                         Label::Distance) {
+                                         Label::Distance distance) {
   ScratchRegisterScope temps(this);
   Register type = temps.AcquireScratch();
   __ GetObjectType(object, map, type);
-  __ Branch(target, cc, type, Operand(instance_type));
+  __ Branch(target, cc, type, Operand(instance_type), distance);
 }
 void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map,
                                            InstanceType instance_type,
-                                           Label* target, Label::Distance) {
+                                           Label* target,
+                                           Label::Distance distance) {
   ScratchRegisterScope temps(this);
   Register type = temps.AcquireScratch();
   if (v8_flags.debug_code) {
@@ -131,52 +132,52 @@ void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map,
     __ Assert(eq, AbortReason::kUnexpectedValue, type, Operand(MAP_TYPE));
   }
   __ LoadWord(type, FieldMemOperand(map, Map::kInstanceTypeOffset));
-  __ Branch(target, cc, type, Operand(instance_type));
+  __ Branch(target, cc, type, Operand(instance_type), distance);
 }
 void BaselineAssembler::JumpIfPointer(Condition cc, Register value,
                                       MemOperand operand, Label* target,
-                                      Label::Distance) {
+                                      Label::Distance distance) {
   ScratchRegisterScope temps(this);
   Register temp = temps.AcquireScratch();
   __ LoadWord(temp, operand);
-  __ Branch(target, cc, value, Operand(temp));
+  __ Branch(target, cc, value, Operand(temp), distance);
 }
 void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi,
-                                  Label* target, Label::Distance) {
+                                  Label* target, Label::Distance distance) {
   ScratchRegisterScope temps(this);
   Register temp = temps.AcquireScratch();
   __ li(temp, Operand(smi));
   __ SmiUntag(temp);
-  __ Branch(target, cc, value, Operand(temp));
+  __ Branch(target, cc, value, Operand(temp), distance);
 }
 void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs,
-                                  Label* target, Label::Distance) {
+                                  Label* target, Label::Distance distance) {
   // todo: compress pointer
   __ AssertSmi(lhs);
   __ AssertSmi(rhs);
-  __ Branch(target, cc, lhs, Operand(rhs));
+  __ Branch(target, cc, lhs, Operand(rhs), distance);
 }
 void BaselineAssembler::JumpIfTagged(Condition cc, Register value,
                                      MemOperand operand, Label* target,
-                                     Label::Distance) {
+                                     Label::Distance distance) {
   // todo: compress pointer
   ScratchRegisterScope temps(this);
   Register scratch = temps.AcquireScratch();
   __ LoadWord(scratch, operand);
-  __ Branch(target, cc, value, Operand(scratch));
+  __ Branch(target, cc, value, Operand(scratch), distance);
 }
 void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand,
                                      Register value, Label* target,
-                                     Label::Distance) {
+                                     Label::Distance distance) {
   // todo: compress pointer
   ScratchRegisterScope temps(this);
   Register scratch = temps.AcquireScratch();
   __ LoadWord(scratch, operand);
-  __ Branch(target, cc, scratch, Operand(value));
+  __ Branch(target, cc, scratch, Operand(value), distance);
 }
 void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte,
-                                   Label* target, Label::Distance) {
-  __ Branch(target, cc, value, Operand(byte));
+                                   Label* target, Label::Distance distance) {
+  __ Branch(target, cc, value, Operand(byte), distance);
 }
 
 void BaselineAssembler::Move(interpreter::Register output, Register source) {
@@ -353,7 +354,7 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result,
                                                 Register feedback_vector,
                                                 FeedbackSlot slot,
                                                 Label* on_result,
-                                                Label::Distance) {
+                                                Label::Distance distance) {
   Label fallthrough, clear_slot;
   LoadTaggedField(scratch_and_result, feedback_vector,
                   FeedbackVector::OffsetOfElementAt(slot.ToInt()));
@@ -364,7 +365,7 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result,
     ScratchRegisterScope temps(this);
     __ JumpIfCodeIsMarkedForDeoptimization(scratch_and_result,
                                            temps.AcquireScratch(), &clear_slot);
-    Jump(on_result);
+    Jump(on_result, distance);
   }
 
   __ bind(&clear_slot);
diff --git a/src/codegen/riscv/base-assembler-riscv.h b/src/codegen/riscv/base-assembler-riscv.h
index 7c2d02b208..00662eb49d 100644
--- a/src/codegen/riscv/base-assembler-riscv.h
+++ b/src/codegen/riscv/base-assembler-riscv.h
@@ -44,6 +44,7 @@
 #include "src/codegen/constant-pool.h"
 #include "src/codegen/external-reference.h"
 #include "src/codegen/label.h"
+#include "src/codegen/machine-type.h"
 #include "src/codegen/riscv/constants-riscv.h"
 #include "src/codegen/riscv/register-riscv.h"
 #include "src/objects/contexts.h"
diff --git a/src/codegen/riscv/macro-assembler-riscv.cc b/src/codegen/riscv/macro-assembler-riscv.cc
index b0dbadc88c..159c761023 100644
--- a/src/codegen/riscv/macro-assembler-riscv.cc
+++ b/src/codegen/riscv/macro-assembler-riscv.cc
@@ -3856,7 +3856,7 @@ void MacroAssembler::Branch(int32_t offset) {
 }
 
 void MacroAssembler::Branch(int32_t offset, Condition cond, Register rs,
-                            const Operand& rt, Label::Distance near_jump) {
+                            const Operand& rt, Label::Distance distance) {
   bool is_near = BranchShortCheck(offset, nullptr, cond, rs, rt);
   DCHECK(is_near);
   USE(is_near);
@@ -3879,7 +3879,7 @@ void MacroAssembler::Branch(Label* L) {
 }
 
 void MacroAssembler::Branch(Label* L, Condition cond, Register rs,
-                            const Operand& rt, Label::Distance near_jump) {
+                            const Operand& rt, Label::Distance distance) {
   if (L->is_bound()) {
     if (!BranchShortCheck(0, L, cond, rs, rt)) {
       if (cond != cc_always) {
@@ -3894,7 +3894,7 @@ void MacroAssembler::Branch(Label* L, Condition cond, Register rs,
       }
     }
   } else {
-    if (is_trampoline_emitted() && near_jump == Label::Distance::kFar) {
+    if (is_trampoline_emitted() && distance == Label::Distance::kFar) {
       if (cond != cc_always) {
         Label skip;
         Condition neg_cond = NegateCondition(cond);
@@ -5743,13 +5743,14 @@ void MacroAssembler::SmiToInt32(Register smi) {
   SmiUntag(smi);
 }
 
-void MacroAssembler::JumpIfSmi(Register value, Label* smi_label) {
+void MacroAssembler::JumpIfSmi(Register value, Label* smi_label,
+                               Label::Distance distance) {
   ASM_CODE_COMMENT(this);
   DCHECK_EQ(0, kSmiTag);
   UseScratchRegisterScope temps(this);
   Register scratch = temps.Acquire();
   andi(scratch, value, kSmiTagMask);
-  Branch(smi_label, eq, scratch, Operand(zero_reg));
+  Branch(smi_label, eq, scratch, Operand(zero_reg), distance);
 }
 
 void MacroAssembler::JumpIfCodeIsMarkedForDeoptimization(
@@ -5764,13 +5765,14 @@ Operand MacroAssembler::ClearedValue() const {
       static_cast<int32_t>(HeapObjectReference::ClearedValue(isolate()).ptr()));
 }
 
-void MacroAssembler::JumpIfNotSmi(Register value, Label* not_smi_label) {
+void MacroAssembler::JumpIfNotSmi(Register value, Label* not_smi_label,
+                                  Label::Distance distance) {
   ASM_CODE_COMMENT(this);
   UseScratchRegisterScope temps(this);
   Register scratch = temps.Acquire();
   DCHECK_EQ(0, kSmiTag);
   andi(scratch, value, kSmiTagMask);
-  Branch(not_smi_label, ne, scratch, Operand(zero_reg));
+  Branch(not_smi_label, ne, scratch, Operand(zero_reg), distance);
 }
 
 void MacroAssembler::AssertNotSmi(Register object, AbortReason reason) {
diff --git a/src/codegen/riscv/macro-assembler-riscv.h b/src/codegen/riscv/macro-assembler-riscv.h
index 2c1cb770bf..8476fb92bd 100644
--- a/src/codegen/riscv/macro-assembler-riscv.h
+++ b/src/codegen/riscv/macro-assembler-riscv.h
@@ -117,7 +117,9 @@ class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {
   }
 
   // Jump unconditionally to given label.
-  void jmp(Label* L) { Branch(L); }
+  void jmp(Label* L, Label::Distance distance = Label::kFar) {
+    Branch(L, distance);
+  }
 
   // -------------------------------------------------------------------------
   // Debugging.
@@ -158,9 +160,12 @@ class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {
   void Branch(int32_t target);
   void BranchLong(Label* L);
   void Branch(Label* target, Condition cond, Register r1, const Operand& r2,
-              Label::Distance near_jump = Label::kFar);
+              Label::Distance distance = Label::kFar);
+  void Branch(Label* target, Label::Distance distance) {
+    Branch(target, cc_always, zero_reg, Operand(zero_reg), distance);
+  }
   void Branch(int32_t target, Condition cond, Register r1, const Operand& r2,
-              Label::Distance near_jump = Label::kFar);
+              Label::Distance distance = Label::kFar);
 #undef DECLARE_BRANCH_PROTOTYPES
 #undef COND_TYPED_ARGS
 #undef COND_ARGS
@@ -1059,7 +1064,8 @@ class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {
   void SmiTag(Register reg) { SmiTag(reg, reg); }
 
   // Jump the register contains a smi.
-  void JumpIfSmi(Register value, Label* smi_label);
+  void JumpIfSmi(Register value, Label* smi_label,
+                 Label::Distance distance = Label::kFar);
 
   void JumpIfEqual(Register a, int32_t b, Label* dest) {
     Branch(dest, eq, a, Operand(b));
@@ -1202,19 +1208,21 @@ class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {
   }
 
   // Compare the object in a register to a value and jump if they are equal.
-  void JumpIfRoot(Register with, RootIndex index, Label* if_equal) {
+  void JumpIfRoot(Register with, RootIndex index, Label* if_equal,
+                  Label::Distance distance = Label::kFar) {
     UseScratchRegisterScope temps(this);
     Register scratch = temps.Acquire();
     LoadRoot(scratch, index);
-    Branch(if_equal, eq, with, Operand(scratch));
+    Branch(if_equal, eq, with, Operand(scratch), distance);
   }
 
   // Compare the object in a register to a value and jump if they are not equal.
-  void JumpIfNotRoot(Register with, RootIndex index, Label* if_not_equal) {
+  void JumpIfNotRoot(Register with, RootIndex index, Label* if_not_equal,
+                     Label::Distance distance = Label::kFar) {
     UseScratchRegisterScope temps(this);
     Register scratch = temps.Acquire();
     LoadRoot(scratch, index);
-    Branch(if_not_equal, ne, with, Operand(scratch));
+    Branch(if_not_equal, ne, with, Operand(scratch), distance);
   }
 
   // Checks if value is in range [lower_limit, higher_limit] using a single
@@ -1420,8 +1428,8 @@ class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {
   Operand ClearedValue() const;
 
   // Jump if the register contains a non-smi.
-  void JumpIfNotSmi(Register value, Label* not_smi_label);
-
+  void JumpIfNotSmi(Register value, Label* not_smi_label,
+                    Label::Distance dist = Label::kFar);
   // Abort execution if argument is not a Constructor, enabled via --debug-code.
   void AssertConstructor(Register object);
 
-- 
2.35.1

