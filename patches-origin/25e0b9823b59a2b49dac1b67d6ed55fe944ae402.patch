From 25e0b9823b59a2b49dac1b67d6ed55fe944ae402 Mon Sep 17 00:00:00 2001
From: JiQiu <qiuji@iscas.ac.cn>
Date: Fri, 22 Sep 2023 11:41:59 +0800
Subject: [PATCH] [riscv][wasm] Use Builtin ids instead of RuntimeStubId ids
 for calls
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Port commit d371c44f54f58830fd4b69d60b25bcd7eff2a229

Fix a typo in MainAllocator::AllocateFastAligned.

Bug: v8:14108
Change-Id: I8b763e9eea70b83f5828067978f7bce379f913c2
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4884597
Auto-Submit: Ji Qiu <qiuji@iscas.ac.cn>
Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
Reviewed-by: Yahan Lu <yahan@iscas.ac.cn>
Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
Cr-Commit-Position: refs/heads/main@{#90143}
---
 src/codegen/riscv/macro-assembler-riscv.cc        | 2 +-
 src/heap/main-allocator.h                         | 4 ++--
 src/wasm/baseline/riscv/liftoff-assembler-riscv.h | 2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/codegen/riscv/macro-assembler-riscv.cc b/src/codegen/riscv/macro-assembler-riscv.cc
index 51c996824dd..e0fb13d48c6 100644
--- a/src/codegen/riscv/macro-assembler-riscv.cc
+++ b/src/codegen/riscv/macro-assembler-riscv.cc
@@ -3904,7 +3904,7 @@ void MacroAssembler::TruncateDoubleToI(Isolate* isolate, Zone* zone,
   fsd(double_input, sp, 0);
 #if V8_ENABLE_WEBASSEMBLY
   if (stub_mode == StubCallMode::kCallWasmRuntimeStub) {
-    Call(wasm::WasmCode::kDoubleToI, RelocInfo::WASM_STUB_CALL);
+    Call(static_cast<Address>(Builtin::kDoubleToI), RelocInfo::WASM_STUB_CALL);
 #else
   // For balance.
   if (false) {
diff --git a/src/heap/main-allocator.h b/src/heap/main-allocator.h
index 0447392886a..09d857b5732 100644
--- a/src/heap/main-allocator.h
+++ b/src/heap/main-allocator.h
@@ -139,9 +139,9 @@ class MainAllocator {
   // Tries to allocate an aligned object from the linear allocation area.
   // Returns nullptr if the linear allocation area does not fit the object.
   // Otherwise, returns the object pointer and writes the allocation size
-  // (object size + alignment filler size) to the size_in_bytes.
+  // (object size + alignment filler size) to the result_aligned_size_in_bytes.
   V8_WARN_UNUSED_RESULT V8_INLINE AllocationResult
-  AllocateFastAligned(int size_in_bytes, int* aligned_size_in_bytes,
+  AllocateFastAligned(int size_in_bytes, int* result_aligned_size_in_bytes,
                       AllocationAlignment alignment, AllocationOrigin origin);
 
   // Slow path of allocation function
diff --git a/src/wasm/baseline/riscv/liftoff-assembler-riscv.h b/src/wasm/baseline/riscv/liftoff-assembler-riscv.h
index a56e493b9b7..4aa3cd100ad 100644
--- a/src/wasm/baseline/riscv/liftoff-assembler-riscv.h
+++ b/src/wasm/baseline/riscv/liftoff-assembler-riscv.h
@@ -146,7 +146,7 @@ void LiftoffAssembler::PatchPrepareStackFrame(
     Branch(&continuation, uge, sp, Operand(stack_limit));
   }
 
-  Call(static_cast<Address>(wasm::kWasmStackOverflow),
+  Call(static_cast<Address>(Builtin::kWasmStackOverflow),
        RelocInfo::WASM_STUB_CALL);
   // The call will not return; just define an empty safepoint.
   safepoint_table_builder->DefineSafepoint(this);
-- 
2.35.1

