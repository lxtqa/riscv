From abf3899ccef511b200e8174c6326de290bff2cbb Mon Sep 17 00:00:00 2001
From: Michael Achenbach <machenbach@chromium.org>
Date: Sun, 14 May 2023 17:49:57 +0200
Subject: [PATCH] [test] Infer status-file variables from build flags

This auto-generates all build-time flags for status-file configuration
from the flags specified in V8's BUILD.gn file.
This makes makes adding such a flag a one-line change in the future,
instead of >10 lines in >10 files as in https://crrev.com/c/4521710.

This also raises an improved exception when a build flag is missing
either in production or in tests, showing a hint with the location
where to add it.

This also removes redundant test data and instead bootstraps V8's
build configuration for testing from a single blueprint.

Cq-Include-Trybots: luci.v8.try:v8_numfuzz_dbg
Cq-Include-Trybots: luci.v8.try:v8_numfuzz_rel
Cq-Include-Trybots: luci.v8.try:v8_numfuzz_tsan_rel
Cq-Include-Trybots: luci.v8.try:v8_linux_noi18n_rel
Cq-Include-Trybots: luci.v8.try:v8_android_arm64_n5x_rel
Cq-Include-Trybots: luci.v8.try:v8_linux64_msan_rel
Cq-Include-Trybots: luci.v8.try:v8_linux64_ubsan_rel
Bug: chromium:1132088
Change-Id: I53c002857fcacf7368c23c249209170e7af6291b
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4528239
Reviewed-by: Liviu Rau <liviurau@google.com>
Commit-Queue: Michael Achenbach <machenbach@chromium.org>
Cr-Commit-Position: refs/heads/main@{#87674}
---
 BUILD.gn                                      |  62 +++---
 tools/testrunner/base_runner.py               | 170 +++++----------
 tools/testrunner/build_config.py              | 196 ++++++------------
 tools/testrunner/standard_runner.py           |   4 +-
 tools/testrunner/standard_runner_test.py      |  20 +-
 .../testroot1/out/build/v8_build_config.json  |  49 -----
 .../testroot2/out/build/v8_build_config.json  |  49 -----
 .../testroot3/out/build/v8_build_config.json  |  49 -----
 .../out.gn/build/v8_build_config.json         |  49 -----
 .../testroot6/out/build/v8_build_config.json  |  49 -----
 .../testrunner/testdata/v8_build_config.json  |  17 ++
 tools/testrunner/utils/test_utils.py          |  28 ++-
 12 files changed, 210 insertions(+), 532 deletions(-)
 delete mode 100644 tools/testrunner/testdata/testroot1/out/build/v8_build_config.json
 delete mode 100644 tools/testrunner/testdata/testroot2/out/build/v8_build_config.json
 delete mode 100644 tools/testrunner/testdata/testroot3/out/build/v8_build_config.json
 delete mode 100644 tools/testrunner/testdata/testroot5/out.gn/build/v8_build_config.json
 delete mode 100644 tools/testrunner/testdata/testroot6/out/build/v8_build_config.json
 create mode 100644 tools/testrunner/testdata/v8_build_config.json

diff --git a/BUILD.gn b/BUILD.gn
index 44b0742bd2d..e894dfd84bc 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -2415,41 +2415,50 @@ action("v8_dump_build_config") {
     mips_use_msa_var = mips_use_msa
   }
 
+  # This lists all build-time switches consumed by the test framework. All
+  # switches can be used automatically in the status files as is - no
+  # further files need to be modified.
+  #
+  # Naming conventions: Keep switch names short and remove unnecessary
+  # qualifiers. Drop v8_enable_, v8_, is_ where possible.
+  # Keep only qualifiers that disambiguate the switches from other things.
+  # Examples: has_turbofan disambiguates from the turbofan runtime variant,
+  # is_android disambiguates from the android keyword in status files,
+  # v8_cfi disambiguates from the global cfi flag.
   args = [
     rebase_path("$root_out_dir/v8_build_config.json", root_build_dir),
-    "current_cpu=\"$current_cpu\"",
-    "dcheck_always_on=$dcheck_always_on",
-    "is_android=$is_android",
     "asan=$is_asan",
+    "atomic_object_field_writes=$v8_enable_atomic_object_field_writes",
+    "cet_shadow_stack=$v8_enable_cet_shadow_stack",
     "cfi=$is_cfi",
     "clang=$is_clang",
     "clang_coverage=$use_clang_coverage",
-    "component_build=$is_component_build",
-    "debugging_features=$v8_enable_debugging_features",
-    "DEBUG_defined=$is_DEBUG_defined",
-    "full_debug=$is_full_debug",
-    "is_ios=$is_ios",
-    "msan=$is_msan",
-    "official_build=$is_official_build",
-    "tsan=$is_tsan",
-    "ubsan=$is_ubsan",
-    "target_cpu=\"$target_cpu\"",
     "code_comments=$v8_code_comments",
-    "v8_cfi=$v8_control_flow_integrity",
-    "v8_current_cpu=\"$v8_current_cpu\"",
-    "dict_property_const_tracking=$v8_dict_property_const_tracking",
-    "write_barriers=$write_barriers",
-    "atomic_object_field_writes=$v8_enable_atomic_object_field_writes",
-    "cet_shadow_stack=$v8_enable_cet_shadow_stack",
+    "component_build=$is_component_build",
     "concurrent_marking=$v8_enable_concurrent_marking",
     "conservative_stack_scanning=$v8_enable_conservative_stack_scanning",
+    "current_cpu=\"$current_cpu\"",
+    "dcheck_always_on=$dcheck_always_on",
     "debug_code=$v8_enable_debug_code",
+    "DEBUG_defined=$is_DEBUG_defined",
+    "debugging_features=$v8_enable_debugging_features",
+    "dict_property_const_tracking=$v8_dict_property_const_tracking",
     "direct_local=$v8_enable_direct_local",
     "disassembler=$v8_enable_disassembler",
+    "full_debug=$is_full_debug",
     "gdbjit=$v8_enable_gdbjit",
+    "has_jitless=$v8_jitless",
+    "has_maglev=$v8_enable_maglev",
+    "has_turbofan=$v8_enable_turbofan",
+    "has_webassembly=$v8_enable_webassembly",
     "i18n=$v8_enable_i18n_support",
+    "is_android=$is_android",
+    "is_ios=$is_ios",
     "lite_mode=$v8_enable_lite_mode",
-    "has_maglev=$v8_enable_maglev",
+    "mips_arch_variant=\"$mips_arch_variant_var\"",
+    "mips_use_msa=$mips_use_msa_var",
+    "msan=$is_msan",
+    "official_build=$is_official_build",
     "pointer_compression=$v8_enable_pointer_compression",
     "pointer_compression_shared_cage=$v8_enable_pointer_compression_shared_cage",
     "runtime_call_stats=$v8_enable_runtime_call_stats",
@@ -2457,16 +2466,17 @@ action("v8_dump_build_config") {
     "shared_ro_heap=$v8_enable_shared_ro_heap",
     "single_generation=$v8_enable_single_generation",
     "slow_dchecks=$v8_enable_slow_dchecks",
+    "target_cpu=\"$target_cpu\"",
     "third_party_heap=$v8_enable_third_party_heap",
-    "has_turbofan=$v8_enable_turbofan",
+    "tsan=$is_tsan",
+    "ubsan=$is_ubsan",
+    "v8_cfi=$v8_control_flow_integrity",
+    "v8_current_cpu=\"$v8_current_cpu\"",
+    "v8_target_cpu=\"$v8_target_cpu\"",
     "verify_csa=$v8_enable_verify_csa",
     "verify_heap=$v8_enable_verify_heap",
     "verify_predictable=$v8_enable_verify_predictable",
-    "has_webassembly=$v8_enable_webassembly",
-    "has_jitless=$v8_jitless",
-    "v8_target_cpu=\"$v8_target_cpu\"",
-    "mips_arch_variant=\"$mips_arch_variant_var\"",
-    "mips_use_msa=$mips_use_msa_var",
+    "write_barriers=$write_barriers",
   ]
 }
 
diff --git a/tools/testrunner/base_runner.py b/tools/testrunner/base_runner.py
index 2f148414f28..8dbcc3e80c6 100644
--- a/tools/testrunner/base_runner.py
+++ b/tools/testrunner/base_runner.py
@@ -349,7 +349,7 @@ class BaseTestRunner(object):
               % build_config_path)
         raise TestRunnerError()
 
-    return BuildConfig(build_config_json, self.options)
+    return BuildConfig(build_config_json)
 
   # Returns possible build paths in order:
   # gn
@@ -543,120 +543,62 @@ class BaseTestRunner(object):
     instances (see NumFuzzer for usage)."""
     return True
 
+  @property
+  def _no_simd_hardware(self):
+    # TODO(liviurau): Add some tests and refactor the logic here.
+    # We try to find all the reasons why we have no_simd.
+    no_simd_hardware = any(i in self.options.extra_flags for i in [
+        '--noenable-sse3', '--no-enable-sse3', '--noenable-ssse3',
+        '--no-enable-ssse3', '--noenable-sse4-1', '--no-enable-sse4_1'
+    ])
+
+    # Set no_simd_hardware on architectures without Simd enabled.
+    if self.build_config.arch == 'mips64el':
+      no_simd_hardware = not self.build_config.simd_mips
+
+    if self.build_config.arch == 'loong64'  or \
+       self.build_config.arch == 'riscv32':
+      no_simd_hardware = True
+
+    # S390 hosts without VEF1 do not support Simd.
+    if self.build_config.arch == 's390x' and \
+       not self.build_config.simulator_run and \
+       not utils.IsS390SimdSupported():
+      no_simd_hardware = True
+
+    # Ppc64 processors earlier than POWER9 do not support Simd instructions
+    if self.build_config.arch == 'ppc64' and \
+       not self.build_config.simulator_run and \
+       utils.GuessPowerProcessorVersion() < 9:
+      no_simd_hardware = True
+
+    return no_simd_hardware
+
   def _get_statusfile_variables(self):
-    return {
-        "arch":
-            self.build_config.arch,
-        "asan":
-            self.build_config.asan,
-        "byteorder":
-            sys.byteorder,
-        "cfi":
-            self.build_config.cfi,
-        "code_comments":
-            self.build_config.code_comments,
-        "component_build":
-            self.build_config.component_build,
-        "conservative_stack_scanning":
-            self.build_config.conservative_stack_scanning,
-        "v8_cfi":
-            self.build_config.v8_cfi,
-        "concurrent_marking":
-            self.build_config.concurrent_marking,
-        "single_generation":
-            self.build_config.single_generation,
-        "dcheck_always_on":
-            self.build_config.dcheck_always_on,
-        "debug_code":
-            self.build_config.debug_code,
-        "deopt_fuzzer":
-            False,
-        "direct_local":
-            self.build_config.direct_local,
-        "disassembler":
-            self.build_config.disassembler,
-        "endurance_fuzzer":
-            False,
-        "gc_fuzzer":
-            False,
-        "gc_stress":
-            False,
-        "gdbjit":
-            self.build_config.gdbjit,
-        "has_maglev":
-            self.build_config.has_maglev,
-        "has_turbofan":
-            self.build_config.has_turbofan,
-        "has_webassembly":
-            self.build_config.has_webassembly,
-        "isolates":
-            self.options.isolates,
-        "clang":
-            self.build_config.clang,
-        "clang_coverage":
-            self.build_config.clang_coverage,
-        "debugging_features":
-            self.build_config.debugging_features,
-        "DEBUG_defined":
-            self.build_config.DEBUG_defined,
-        "full_debug":
-            self.build_config.full_debug,
-        "official_build":
-            self.build_config.official_build,
-        "interrupt_fuzzer":
-            False,
-        "has_jitless":
-            self.build_config.has_jitless,
-        "mips_arch_variant":
-            self.build_config.mips_arch_variant,
-        "mode":
-            self.mode_options.status_mode,
-        "msan":
-            self.build_config.msan,
-        "no_harness":
-            self.options.no_harness,
-        "i18n":
-            self.build_config.i18n,
-        "no_simd_hardware":
-            self.build_config.no_simd_hardware,
-        "novfp3":
-            False,
-        "optimize_for_size":
-            "--optimize-for-size" in self.options.extra_flags,
-        "verify_predictable":
-            self.build_config.verify_predictable,
-        "simd_mips":
-            self.build_config.simd_mips,
-        "simulator_run":
-            self.build_config.simulator_run
-            and not self.options.dont_skip_simulator_slow_tests,
-        "slow_dchecks":
-            self.build_config.slow_dchecks,
-        "system":
-            self.target_os,
-        "third_party_heap":
-            self.build_config.third_party_heap,
-        "tsan":
-            self.build_config.tsan,
-        "ubsan":
-            self.build_config.ubsan,
-        "verify_csa":
-            self.build_config.verify_csa,
-        "verify_heap":
-            self.build_config.verify_heap,
-        "lite_mode":
-            self.build_config.lite_mode,
-        "pointer_compression":
-            self.build_config.pointer_compression,
-        "pointer_compression_shared_cage":
-            self.build_config.pointer_compression_shared_cage,
-        "no_js_shared_memory":
-            self.build_config.no_js_shared_memory,
-        "sandbox":
-            self.build_config.sandbox,
-        "dict_property_const_tracking":
-            self.build_config.dict_property_const_tracking,
-    }
+    """Returns all attributes accessible in status files.
+
+    All build-time flags from V8's BUILD.gn file as defined by the action
+    v8_dump_build_config can be accessed in status files.
+    """
+    variables = dict(self.build_config.items())
+    variables.update({
+        "byteorder": sys.byteorder,
+        "deopt_fuzzer": False,
+        "endurance_fuzzer": False,
+        "gc_fuzzer": False,
+        "gc_stress": False,
+        "isolates": self.options.isolates,
+        "interrupt_fuzzer": False,
+        "mode": self.mode_options.status_mode,
+        "no_harness": self.options.no_harness,
+        "no_simd_hardware": self._no_simd_hardware,
+        "novfp3": False,
+        "optimize_for_size": "--optimize-for-size" in self.options.extra_flags,
+        "simulator_run": variables["simulator_run"]
+                         and not self.options.dont_skip_simulator_slow_tests,
+        "system": self.target_os,
+    })
+    return variables
 
   def _runner_flags(self):
     """Extra default flags specific to the test runner implementation."""
diff --git a/tools/testrunner/build_config.py b/tools/testrunner/build_config.py
index 03cb50acd7f..1099be1e45f 100644
--- a/tools/testrunner/build_config.py
+++ b/tools/testrunner/build_config.py
@@ -2,70 +2,40 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
-from testrunner.local import utils
-
 # Increase the timeout for these:
 SLOW_ARCHS = [
     "arm", "arm64", "mips64", "mips64el", "s390", "s390x", "riscv32", "riscv64",
     "loong64"
 ]
 
-
-class BuildConfig(object):
-
-  def __init__(self, build_config, options):
-    self.options = options
-
-    self.asan = build_config['asan']
-    self.cfi = build_config['cfi']
-    self.code_comments = build_config['code_comments']
-    self.component_build = build_config['component_build']
-    self.concurrent_marking = build_config['concurrent_marking']
-    self.conservative_stack_scanning = build_config[
-        'conservative_stack_scanning']
-    self.current_cpu = build_config['current_cpu']
-    self.v8_cfi = build_config['v8_cfi']
-    self.dcheck_always_on = build_config['dcheck_always_on']
-    self.debug_code = build_config['debug_code']
-    self.dict_property_const_tracking = build_config[
-        'dict_property_const_tracking']
-    self.direct_local = build_config['direct_local']
-    self.disassembler = build_config['disassembler']
-    self.gdbjit = build_config['gdbjit']
-    self.is_android = build_config['is_android']
-    self.clang = build_config['clang']
-    self.clang_coverage = build_config['clang_coverage']
-    self.debugging_features = build_config['debugging_features']
-    self.DEBUG_defined = build_config['DEBUG_defined']
-    self.full_debug = build_config['full_debug']
-    self.is_ios = build_config['is_ios']
-    self.official_build = build_config['official_build']
-    self.lite_mode = build_config['lite_mode']
-    self.has_maglev = build_config['has_maglev']
-    self.msan = build_config['msan']
-    self.i18n = build_config['i18n']
-    self.pointer_compression = build_config['pointer_compression']
-    self.pointer_compression_shared_cage = build_config[
-        'pointer_compression_shared_cage']
-    self.verify_predictable = build_config['verify_predictable']
-    self.sandbox = build_config['sandbox']
-    self.shared_ro_heap = build_config['shared_ro_heap']
-    self.single_generation = build_config['single_generation']
-    self.slow_dchecks = build_config['slow_dchecks']
-    self.third_party_heap = build_config['third_party_heap']
-    self.tsan = build_config['tsan']
-    self.has_turbofan = build_config['has_turbofan']
-    self.ubsan = build_config['ubsan']
-    self.verify_csa = build_config['verify_csa']
-    self.verify_heap = build_config['verify_heap']
-    self.has_webassembly = build_config['has_webassembly']
-    self.write_barriers = build_config['write_barriers']
-    self.has_jitless = build_config['has_jitless']
-    self.target_cpu = build_config['target_cpu']
-    self.v8_current_cpu = build_config['v8_current_cpu']
-    self.v8_target_cpu = build_config['v8_target_cpu']
-    self.mips_arch_variant = build_config['mips_arch_variant']
-    self.mips_use_msa = build_config['mips_use_msa']
+# Timeout scale factor per build flag.
+SCALE_FACTOR = dict(
+    full_debug=4,
+    lite_mode=2,
+    tsan=2,
+    use_sanitizer=1.5,
+    verify_predictable=4,
+)
+
+INITIALIZATION_ERROR = f"""
+Error initializing property '%s'. It depends on a build flag of V8's
+build config. If you see this error in testing, you might need to add
+the dependencies to tools/testrunner/testdata/v8_build_config.json. If
+you see this error in production, ensure to add the dependences to the
+v8_dump_build_config action in V8's top-level BUILD.gn file.
+"""
+
+class _BuildConfigInternal(object):
+  """Placeholder for all attributes and properties of the build config.
+
+  It's initialized with all attributes of the v8_dump_build_config action
+  in V8's top-level BUILD.gn file. Additionally, this defines read-only
+  properties using other attributes for convenience.
+  """
+
+  def __init__(self, build_config):
+    for key, value in build_config.items():
+      setattr(self, key, value)
 
   @property
   def arch(self):
@@ -96,84 +66,50 @@ class BuildConfig(object):
     return (self.mips_arch and self.mips_arch_variant == "r6" and
             self.mips_use_msa)
 
-  @property
-  def no_simd_hardware(self):
-    # TODO(liviurau): Add some tests and refactor the logic here.
-    # We try to find all the reasons why we have no_simd.
-    no_simd_hardware = any(i in self.options.extra_flags for i in [
-        '--noenable-sse3', '--no-enable-sse3', '--noenable-ssse3',
-        '--no-enable-ssse3', '--noenable-sse4-1', '--no-enable-sse4_1'
-    ])
-
-    # Set no_simd_hardware on architectures without Simd enabled.
-    if self.arch == 'mips64el':
-      no_simd_hardware = not self.simd_mips
-
-    if self.arch == 'loong64'  or \
-       self.arch == 'riscv32':
-      no_simd_hardware = True
-
-    # S390 hosts without VEF1 do not support Simd.
-    if self.arch == 's390x' and \
-       not self.simulator_run and \
-       not utils.IsS390SimdSupported():
-      no_simd_hardware = True
-
-    # Ppc64 processors earlier than POWER9 do not support Simd instructions
-    if self.arch == 'ppc64' and \
-       not self.simulator_run and \
-       utils.GuessPowerProcessorVersion() < 9:
-      no_simd_hardware = True
-
-    return no_simd_hardware
+
+class BuildConfig(object):
+  """Enables accessing all build-time flags as set in V8's BUILD.gn file.
+
+  All flags are auto-generated based on the output of V8's
+  v8_dump_build_config action.
+  """
+
+  def __init__(self, build_config):
+    self.internal = _BuildConfigInternal(build_config)
+
+    for key in self.keys():
+      try:
+        setattr(self, key, getattr(self.internal, key))
+      except AttributeError as e:
+        raise Exception(INITIALIZATION_ERROR % key)
+
+    bool_options = [key for key, value in self.items() if value is True]
+    string_options = [
+      f'{key}="{value}"'
+      for key, value in self.items() if value and isinstance(value, str)]
+    self._str_rep = ', '.join(sorted(bool_options + string_options))
+
+  def keys(self):
+    for key in dir(self.internal):
+      if not key.startswith('_'):
+        yield key
+
+  def items(self):
+    for key in self.keys():
+      yield key, getattr(self, key)
 
   def timeout_scalefactor(self, initial_factor):
     """Increases timeout for slow build configurations."""
-    factors = dict(
-        lite_mode=2,
-        verify_predictable=4,
-        tsan=2,
-        use_sanitizer=1.5,
-        full_debug=4,
-    )
     result = initial_factor
-    for k, v in factors.items():
-      if getattr(self, k, False):
-        result *= v
+    for key, value in SCALE_FACTOR.items():
+      try:
+        if getattr(self, key):
+          result *= value
+      except AttributeError:
+        raise Exception(INITIALIZATION_ERROR % k)
     if self.arch in SLOW_ARCHS:
       result *= 4.5
     return result
 
   def __str__(self):
-    attrs = [
-        'asan',
-        'cfi',
-        'code_comments',
-        'v8_cfi',
-        'dcheck_always_on',
-        'debug_code',
-        'dict_property_const_tracking',
-        'disassembler',
-        'gdbjit',
-        'debugging_features',
-        'DEBUG_defined',
-        'has_jitless',
-        'lite_mode',
-        'has_maglev',
-        'msan',
-        'i18n',
-        'pointer_compression',
-        'pointer_compression_shared_cage',
-        'verify_predictable',
-        'sandbox',
-        'slow_dchecks',
-        'third_party_heap',
-        'tsan',
-        'has_turbofan',
-        'ubsan',
-        'verify_csa',
-        'verify_heap',
-        'has_webassembly',
-    ]
-    detected_options = [attr for attr in attrs if getattr(self, attr, False)]
-    return ', '.join(detected_options)
+    return self._str_rep
diff --git a/tools/testrunner/standard_runner.py b/tools/testrunner/standard_runner.py
index 0300e26d55e..61d2ba50ed3 100755
--- a/tools/testrunner/standard_runner.py
+++ b/tools/testrunner/standard_runner.py
@@ -269,9 +269,7 @@ class StandardTestRunner(base_runner.BaseTestRunner):
       ])
 
   def _get_statusfile_variables(self):
-    variables = (
-        super(StandardTestRunner, self)._get_statusfile_variables())
-
+    variables = super(StandardTestRunner, self)._get_statusfile_variables()
     variables.update({
       'gc_stress': self.options.gc_stress or self.options.random_gc_stress,
       'gc_fuzzer': self.options.random_gc_stress,
diff --git a/tools/testrunner/standard_runner_test.py b/tools/testrunner/standard_runner_test.py
index 8f062a1e07a..a49f7ab16f0 100644
--- a/tools/testrunner/standard_runner_test.py
+++ b/tools/testrunner/standard_runner_test.py
@@ -125,8 +125,8 @@ class StandardRunnerTest(TestRunnerTest):
     result.has_returncode(1)
 
   def testGN(self):
-    """Test running only failing tests in two variants."""
-    result = self.run_tests('--gn',baseroot="testroot5")
+    """Test setup with legacy GN out dir."""
+    result = self.run_tests('--gn', baseroot="testroot5", outdir='out.gn')
     result.stdout_includes('>>> Latest GN build found: build')
     result.stdout_includes('Build found: ')
     result.stdout_includes('v8_test_/out.gn/build')
@@ -221,14 +221,9 @@ class StandardRunnerTest(TestRunnerTest):
         '--variants=default',
         'sweet/bananas',
         config_overrides=dict(
-          dcheck_always_on=True, asan=True, cfi=True,
-          msan=True, tsan=True, ubsan=True, target_cpu='x86',
-          i18n=True, v8_target_cpu='x86',
-          verify_csa=False, lite_mode=False,
-          pointer_compression=False,
-          pointer_compression_shared_cage=False,
-          shared_ro_heap=False,
-          sandbox=False
+            asan=True, cfi=True, dcheck_always_on=True, has_webassembly=True,
+            i18n=True, msan=True, target_cpu='x86', tsan=True,
+            ubsan=True, v8_target_cpu='x86',
         )
     )
     result.stdout_includes('>>> Autodetected:')
@@ -239,7 +234,8 @@ class StandardRunnerTest(TestRunnerTest):
     result.stdout_includes('msan')
     result.stdout_includes('tsan')
     result.stdout_includes('ubsan')
-    result.stdout_includes('webassembly')
+    result.stdout_includes('use_sanitizer')
+    result.stdout_includes('has_webassembly')
     result.stdout_includes('>>> Running tests for ia32.release')
     result.has_returncode(0)
     # TODO(machenbach): Test some more implications of the auto-detected
@@ -316,7 +312,7 @@ class StandardRunnerTest(TestRunnerTest):
 
   def testNoBuildConfig(self):
     """Test failing run when build config is not found."""
-    result = self.run_tests(baseroot='wrong_path')
+    result = self.run_tests(baseroot='wrong_path', with_build_config=False)
     result.stdout_includes('Failed to load build config')
     result.has_returncode(5)
 
diff --git a/tools/testrunner/testdata/testroot1/out/build/v8_build_config.json b/tools/testrunner/testdata/testroot1/out/build/v8_build_config.json
deleted file mode 100644
index 5c3c584dca9..00000000000
--- a/tools/testrunner/testdata/testroot1/out/build/v8_build_config.json
+++ /dev/null
@@ -1,49 +0,0 @@
-{
-  "current_cpu": "x64",
-  "dcheck_always_on": false,
-  "is_android": false,
-  "asan": false,
-  "cfi": false,
-  "clang": true,
-  "clang_coverage": false,
-  "component_build": false,
-  "debugging_features": false,
-  "full_debug": false,
-  "is_ios": false,
-  "official_build": false,
-  "ubsan": false,
-  "msan": false,
-  "tsan": false,
-  "target_cpu": "x64",
-  "v8_current_cpu": "x64",
-  "i18n": true,
-  "verify_predictable": false,
-  "v8_target_cpu": "x64",
-  "conservative_stack_scanning": false,
-  "concurrent_marking": true,
-  "direct_local": false,
-  "lite_mode": false,
-  "pointer_compression": true,
-  "pointer_compression_shared_cage": true,
-  "sandbox": false,
-  "shared_ro_heap": true,
-  "write_barriers": true,
-  "v8_cfi": false,
-  "single_generation": false,
-  "third_party_heap": false,
-  "has_webassembly": true,
-  "dict_property_const_tracking": false,
-  "code_comments": false,
-  "debug_code": false,
-  "verify_csa": false,
-  "verify_heap": false,
-  "slow_dchecks": false,
-  "has_maglev": false,
-  "disassembler": false,
-  "DEBUG_defined": false,
-  "has_turbofan": false,
-  "has_jitless": false,
-  "gdbjit": false,
-  "mips_arch_variant": "",
-  "mips_use_msa": false
-}
diff --git a/tools/testrunner/testdata/testroot2/out/build/v8_build_config.json b/tools/testrunner/testdata/testroot2/out/build/v8_build_config.json
deleted file mode 100644
index 9dd776ffed7..00000000000
--- a/tools/testrunner/testdata/testroot2/out/build/v8_build_config.json
+++ /dev/null
@@ -1,49 +0,0 @@
-{
-  "current_cpu": "x64",
-  "dcheck_always_on": false,
-  "is_android": false,
-  "asan": false,
-  "cfi": false,
-  "clang": true,
-  "clang_coverage": false,
-  "component_build": false,
-  "debugging_features": false,
-  "full_debug": false,
-  "is_ios": false,
-  "official_build": false,
-  "ubsan": false,
-  "msan": false,
-  "tsan": false,
-  "target_cpu": "x64",
-  "v8_current_cpu": "x64",
-  "i18n": true,
-  "verify_predictable": false,
-  "v8_target_cpu": "x64",
-  "conservative_stack_scanning": false,
-  "concurrent_marking": true,
-  "direct_local": false,
-  "lite_mode": false,
-  "pointer_compression": false,
-  "pointer_compression_shared_cage": false,
-  "sandbox": false,
-  "shared_ro_heap": false,
-  "write_barriers": true,
-  "v8_cfi": false,
-  "single_generation": false,
-  "third_party_heap": false,
-  "has_webassembly": true,
-  "dict_property_const_tracking": false,
-  "code_comments": false,
-  "debug_code": false,
-  "verify_csa": false,
-  "verify_heap": false,
-  "slow_dchecks": false,
-  "has_maglev": false,
-  "disassembler": false,
-  "DEBUG_defined": false,
-  "has_turbofan": false,
-  "has_jitless": false,
-  "gdbjit": false,
-  "mips_arch_variant": "",
-  "mips_use_msa": false
-}
diff --git a/tools/testrunner/testdata/testroot3/out/build/v8_build_config.json b/tools/testrunner/testdata/testroot3/out/build/v8_build_config.json
deleted file mode 100644
index 5c3c584dca9..00000000000
--- a/tools/testrunner/testdata/testroot3/out/build/v8_build_config.json
+++ /dev/null
@@ -1,49 +0,0 @@
-{
-  "current_cpu": "x64",
-  "dcheck_always_on": false,
-  "is_android": false,
-  "asan": false,
-  "cfi": false,
-  "clang": true,
-  "clang_coverage": false,
-  "component_build": false,
-  "debugging_features": false,
-  "full_debug": false,
-  "is_ios": false,
-  "official_build": false,
-  "ubsan": false,
-  "msan": false,
-  "tsan": false,
-  "target_cpu": "x64",
-  "v8_current_cpu": "x64",
-  "i18n": true,
-  "verify_predictable": false,
-  "v8_target_cpu": "x64",
-  "conservative_stack_scanning": false,
-  "concurrent_marking": true,
-  "direct_local": false,
-  "lite_mode": false,
-  "pointer_compression": true,
-  "pointer_compression_shared_cage": true,
-  "sandbox": false,
-  "shared_ro_heap": true,
-  "write_barriers": true,
-  "v8_cfi": false,
-  "single_generation": false,
-  "third_party_heap": false,
-  "has_webassembly": true,
-  "dict_property_const_tracking": false,
-  "code_comments": false,
-  "debug_code": false,
-  "verify_csa": false,
-  "verify_heap": false,
-  "slow_dchecks": false,
-  "has_maglev": false,
-  "disassembler": false,
-  "DEBUG_defined": false,
-  "has_turbofan": false,
-  "has_jitless": false,
-  "gdbjit": false,
-  "mips_arch_variant": "",
-  "mips_use_msa": false
-}
diff --git a/tools/testrunner/testdata/testroot5/out.gn/build/v8_build_config.json b/tools/testrunner/testdata/testroot5/out.gn/build/v8_build_config.json
deleted file mode 100644
index 5c3c584dca9..00000000000
--- a/tools/testrunner/testdata/testroot5/out.gn/build/v8_build_config.json
+++ /dev/null
@@ -1,49 +0,0 @@
-{
-  "current_cpu": "x64",
-  "dcheck_always_on": false,
-  "is_android": false,
-  "asan": false,
-  "cfi": false,
-  "clang": true,
-  "clang_coverage": false,
-  "component_build": false,
-  "debugging_features": false,
-  "full_debug": false,
-  "is_ios": false,
-  "official_build": false,
-  "ubsan": false,
-  "msan": false,
-  "tsan": false,
-  "target_cpu": "x64",
-  "v8_current_cpu": "x64",
-  "i18n": true,
-  "verify_predictable": false,
-  "v8_target_cpu": "x64",
-  "conservative_stack_scanning": false,
-  "concurrent_marking": true,
-  "direct_local": false,
-  "lite_mode": false,
-  "pointer_compression": true,
-  "pointer_compression_shared_cage": true,
-  "sandbox": false,
-  "shared_ro_heap": true,
-  "write_barriers": true,
-  "v8_cfi": false,
-  "single_generation": false,
-  "third_party_heap": false,
-  "has_webassembly": true,
-  "dict_property_const_tracking": false,
-  "code_comments": false,
-  "debug_code": false,
-  "verify_csa": false,
-  "verify_heap": false,
-  "slow_dchecks": false,
-  "has_maglev": false,
-  "disassembler": false,
-  "DEBUG_defined": false,
-  "has_turbofan": false,
-  "has_jitless": false,
-  "gdbjit": false,
-  "mips_arch_variant": "",
-  "mips_use_msa": false
-}
diff --git a/tools/testrunner/testdata/testroot6/out/build/v8_build_config.json b/tools/testrunner/testdata/testroot6/out/build/v8_build_config.json
deleted file mode 100644
index 5c3c584dca9..00000000000
--- a/tools/testrunner/testdata/testroot6/out/build/v8_build_config.json
+++ /dev/null
@@ -1,49 +0,0 @@
-{
-  "current_cpu": "x64",
-  "dcheck_always_on": false,
-  "is_android": false,
-  "asan": false,
-  "cfi": false,
-  "clang": true,
-  "clang_coverage": false,
-  "component_build": false,
-  "debugging_features": false,
-  "full_debug": false,
-  "is_ios": false,
-  "official_build": false,
-  "ubsan": false,
-  "msan": false,
-  "tsan": false,
-  "target_cpu": "x64",
-  "v8_current_cpu": "x64",
-  "i18n": true,
-  "verify_predictable": false,
-  "v8_target_cpu": "x64",
-  "conservative_stack_scanning": false,
-  "concurrent_marking": true,
-  "direct_local": false,
-  "lite_mode": false,
-  "pointer_compression": true,
-  "pointer_compression_shared_cage": true,
-  "sandbox": false,
-  "shared_ro_heap": true,
-  "write_barriers": true,
-  "v8_cfi": false,
-  "single_generation": false,
-  "third_party_heap": false,
-  "has_webassembly": true,
-  "dict_property_const_tracking": false,
-  "code_comments": false,
-  "debug_code": false,
-  "verify_csa": false,
-  "verify_heap": false,
-  "slow_dchecks": false,
-  "has_maglev": false,
-  "disassembler": false,
-  "DEBUG_defined": false,
-  "has_turbofan": false,
-  "has_jitless": false,
-  "gdbjit": false,
-  "mips_arch_variant": "",
-  "mips_use_msa": false
-}
diff --git a/tools/testrunner/testdata/v8_build_config.json b/tools/testrunner/testdata/v8_build_config.json
new file mode 100644
index 00000000000..69da39481f9
--- /dev/null
+++ b/tools/testrunner/testdata/v8_build_config.json
@@ -0,0 +1,17 @@
+{
+  "asan": false,
+  "cfi": false,
+  "dcheck_always_on": false,
+  "debugging_features": false,
+  "full_debug": false,
+  "i18n": true,
+  "is_android": false,
+  "is_ios": false,
+  "msan": false,
+  "shared_ro_heap": false,
+  "target_cpu": "x64",
+  "tsan": false,
+  "ubsan": false,
+  "verify_predictable": false,
+  "v8_target_cpu": "x64"
+}
diff --git a/tools/testrunner/utils/test_utils.py b/tools/testrunner/utils/test_utils.py
index 7ab38b0e258..c7b8ed002a5 100644
--- a/tools/testrunner/utils/test_utils.py
+++ b/tools/testrunner/utils/test_utils.py
@@ -21,11 +21,13 @@ from testrunner.local.command import BaseCommand
 from testrunner.objects import output
 from testrunner.local.context import DefaultOSContext
 from testrunner.local.pool import SingleThreadedExecutionPool
+from testrunner.local.variants import INCOMPATIBLE_FLAGS_PER_BUILD_VARIABLE
 
 TOOLS_ROOT = up(up(up(os.path.abspath(__file__))))
 sys.path.append(TOOLS_ROOT)
 
 TEST_DATA_ROOT = os.path.join(TOOLS_ROOT, 'testrunner', 'testdata')
+BUILD_CONFIG_BASE = os.path.join(TEST_DATA_ROOT, 'v8_build_config.json')
 
 from testrunner.local import command
 from testrunner.local import pool
@@ -109,6 +111,24 @@ def clean_json_output(json_path, basedir):
   json_output['slowest_tests'].sort(key=sort_key)
   return json_output
 
+def setup_build_config(basedir, outdir):
+  """Ensure a build config file exists - default or from test root."""
+  path = os.path.join(basedir, outdir, 'build', 'v8_build_config.json')
+  if os.path.exists(path):
+    return
+
+  # Use default build-config blueprint.
+  with open(BUILD_CONFIG_BASE) as f:
+    config = json.load(f)
+
+  # Add defaults for all variables used in variant configs.
+  for key in INCOMPATIBLE_FLAGS_PER_BUILD_VARIABLE.keys():
+    config[key.lstrip('!')] = False
+
+  os.makedirs(os.path.dirname(path), exist_ok=True)
+  with open(path, 'w') as f:
+    json.dump(config, f)
+
 def override_build_config(basedir, **kwargs):
   """Override the build config with new values provided as kwargs."""
   if not kwargs:
@@ -161,10 +181,14 @@ class TestRunnerTest(unittest.TestCase):
     command.setup_testing()
     pool.setup_testing()
 
-  def run_tests(self, *args, baseroot='testroot1', config_overrides={}, **kwargs):
+  def run_tests(
+      self, *args, baseroot='testroot1', config_overrides=None,
+      with_build_config=True, outdir='out', **kwargs):
     """Executes the test runner with captured output."""
     with temp_base(baseroot=baseroot) as basedir:
-      override_build_config(basedir, **config_overrides)
+      if with_build_config:
+        setup_build_config(basedir, outdir)
+      override_build_config(basedir, **(config_overrides or {}))
       json_out_path = None
       def resolve_arg(arg):
         """Some arguments come as function objects to be called (resolved)
-- 
2.35.1

