From e5c1ada31f23ab2d9e2ca8ef62a934e982fed47d Mon Sep 17 00:00:00 2001
From: Camillo Bruni <cbruni@chromium.org>
Date: Tue, 26 Apr 2022 14:54:25 +0200
Subject: [PATCH] [counters] Remove unused counters from V8
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: Iec93e286c8067453cc1f9a978fa09b8734999f83
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3596159
Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
Commit-Queue: Camillo Bruni <cbruni@chromium.org>
Reviewed-by: Jakob Linke <jgruber@chromium.org>
Reviewed-by: Marja Hölttä <marja@chromium.org>
Reviewed-by: Igor Sheludko <ishell@chromium.org>
Cr-Commit-Position: refs/heads/main@{#80236}
---
 src/builtins/arm/builtins-arm.cc            |  2 -
 src/builtins/arm64/builtins-arm64.cc        |  3 -
 src/builtins/builtins-constructor-gen.cc    |  2 -
 src/builtins/builtins-string-gen.cc         | 34 ++---------
 src/builtins/ia32/builtins-ia32.cc          |  2 -
 src/builtins/loong64/builtins-loong64.cc    |  2 -
 src/builtins/mips/builtins-mips.cc          |  2 -
 src/builtins/mips64/builtins-mips64.cc      |  2 -
 src/builtins/ppc/builtins-ppc.cc            |  2 -
 src/builtins/riscv64/builtins-riscv64.cc    |  2 -
 src/builtins/s390/builtins-s390.cc          |  2 -
 src/builtins/x64/builtins-x64.cc            |  1 -
 src/codegen/compiler.cc                     | 42 +-------------
 src/compiler/backend/code-generator.cc      |  4 --
 src/execution/frames.cc                     |  2 -
 src/heap/factory.cc                         |  1 -
 src/heap/heap-allocator.cc                  |  1 -
 src/heap/heap.cc                            |  3 -
 src/ic/accessor-assembler.cc                |  4 --
 src/init/bootstrapper.cc                    |  3 -
 src/logging/counters-definitions.h          | 62 +++------------------
 src/objects/js-objects.cc                   |  7 ---
 src/objects/map.cc                          |  1 -
 src/objects/string-table.cc                 |  7 ---
 src/objects/string-table.h                  |  1 -
 src/parsing/parser.cc                       |  2 -
 src/parsing/parsing.cc                      |  2 -
 src/runtime/runtime-strings.cc              |  2 -
 test/unittests/logging/counters-unittest.cc | 24 --------
 29 files changed, 16 insertions(+), 208 deletions(-)

diff --git a/src/builtins/arm/builtins-arm.cc b/src/builtins/arm/builtins-arm.cc
index a43ed6f1cd1..bf2d87f4244 100644
--- a/src/builtins/arm/builtins-arm.cc
+++ b/src/builtins/arm/builtins-arm.cc
@@ -209,8 +209,6 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler* masm) {
       &not_create_implicit_receiver);
 
   // If not derived class constructor: Allocate the new receiver object.
-  __ IncrementCounter(masm->isolate()->counters()->constructed_objects(), 1, r4,
-                      r5);
   __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject), RelocInfo::CODE_TARGET);
   __ b(&post_instantiation_deopt_entry);
 
diff --git a/src/builtins/arm64/builtins-arm64.cc b/src/builtins/arm64/builtins-arm64.cc
index 41bae54faa5..5dfd1fd64a6 100644
--- a/src/builtins/arm64/builtins-arm64.cc
+++ b/src/builtins/arm64/builtins-arm64.cc
@@ -250,9 +250,6 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler* masm) {
       &not_create_implicit_receiver);
 
   // If not derived class constructor: Allocate the new receiver object.
-  __ IncrementCounter(masm->isolate()->counters()->constructed_objects(), 1, x4,
-                      x5);
-
   __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject), RelocInfo::CODE_TARGET);
 
   __ B(&post_instantiation_deopt_entry);
diff --git a/src/builtins/builtins-constructor-gen.cc b/src/builtins/builtins-constructor-gen.cc
index f452f83f1af..65ee03778c8 100644
--- a/src/builtins/builtins-constructor-gen.cc
+++ b/src/builtins/builtins-constructor-gen.cc
@@ -180,8 +180,6 @@ TF_BUILTIN(FastNewClosure, ConstructorBuiltinsAssembler) {
   auto feedback_cell = Parameter<FeedbackCell>(Descriptor::kFeedbackCell);
   auto context = Parameter<Context>(Descriptor::kContext);
 
-  IncrementCounter(isolate()->counters()->fast_new_closure_total(), 1);
-
   // Bump the closure counter encoded the {feedback_cell}s map.
   {
     const TNode<Map> feedback_cell_map = LoadMap(feedback_cell);
diff --git a/src/builtins/builtins-string-gen.cc b/src/builtins/builtins-string-gen.cc
index ee89b02e5a4..882c9be6aa1 100644
--- a/src/builtins/builtins-string-gen.cc
+++ b/src/builtins/builtins-string-gen.cc
@@ -345,19 +345,18 @@ TNode<String> StringBuiltinsAssembler::StringAdd(
 
   TVARIABLE(String, result);
   Label check_right(this), runtime(this, Label::kDeferred), cons(this),
-      done(this, &result), done_native(this, &result);
-  Counters* counters = isolate()->counters();
+      done(this, &result);
 
   TNode<Uint32T> left_length = LoadStringLengthAsWord32(left);
   GotoIfNot(Word32Equal(left_length, Uint32Constant(0)), &check_right);
   result = right;
-  Goto(&done_native);
+  Goto(&done);
 
   BIND(&check_right);
   TNode<Uint32T> right_length = LoadStringLengthAsWord32(right);
   GotoIfNot(Word32Equal(right_length, Uint32Constant(0)), &cons);
   result = left;
-  Goto(&done_native);
+  Goto(&done);
 
   BIND(&cons);
   {
@@ -378,7 +377,7 @@ TNode<String> StringBuiltinsAssembler::StringAdd(
 
     result =
         AllocateConsString(new_length, var_left.value(), var_right.value());
-    Goto(&done_native);
+    Goto(&done);
 
     BIND(&non_cons);
 
@@ -412,7 +411,7 @@ TNode<String> StringBuiltinsAssembler::StringAdd(
     CopyStringCharacters(var_right.value(), result.value(), IntPtrConstant(0),
                          word_left_length, word_right_length,
                          String::ONE_BYTE_ENCODING, String::ONE_BYTE_ENCODING);
-    Goto(&done_native);
+    Goto(&done);
 
     BIND(&two_byte);
     {
@@ -426,7 +425,7 @@ TNode<String> StringBuiltinsAssembler::StringAdd(
                            word_left_length, word_right_length,
                            String::TWO_BYTE_ENCODING,
                            String::TWO_BYTE_ENCODING);
-      Goto(&done_native);
+      Goto(&done);
     }
 
     BIND(&slow);
@@ -443,12 +442,6 @@ TNode<String> StringBuiltinsAssembler::StringAdd(
     Goto(&done);
   }
 
-  BIND(&done_native);
-  {
-    IncrementCounter(counters->string_add_native(), 1);
-    Goto(&done);
-  }
-
   BIND(&done);
   return result.value();
 }
@@ -1672,10 +1665,6 @@ TNode<String> StringBuiltinsAssembler::SubString(TNode<String> string,
              &next);
 
       // Allocate new sliced string.
-
-      Counters* counters = isolate()->counters();
-      IncrementCounter(counters->sub_string_native(), 1);
-
       Label one_byte_slice(this), two_byte_slice(this);
       Branch(IsOneByteStringInstanceType(to_direct.instance_type()),
              &one_byte_slice, &two_byte_slice);
@@ -1705,10 +1694,6 @@ TNode<String> StringBuiltinsAssembler::SubString(TNode<String> string,
 
     var_result = AllocAndCopyStringCharacters(direct_string, instance_type,
                                               offset, substr_length);
-
-    Counters* counters = isolate()->counters();
-    IncrementCounter(counters->sub_string_native(), 1);
-
     Goto(&end);
   }
 
@@ -1721,9 +1706,6 @@ TNode<String> StringBuiltinsAssembler::SubString(TNode<String> string,
     var_result = AllocAndCopyStringCharacters(
         fake_sequential_string, instance_type, offset, substr_length);
 
-    Counters* counters = isolate()->counters();
-    IncrementCounter(counters->sub_string_native(), 1);
-
     Goto(&end);
   }
 
@@ -1749,10 +1731,6 @@ TNode<String> StringBuiltinsAssembler::SubString(TNode<String> string,
     GotoIf(UintPtrGreaterThan(from, IntPtrConstant(0)), &runtime);
 
     // Return the original string (substr_length == string_length).
-
-    Counters* counters = isolate()->counters();
-    IncrementCounter(counters->sub_string_native(), 1);
-
     var_result = string;
     Goto(&end);
   }
diff --git a/src/builtins/ia32/builtins-ia32.cc b/src/builtins/ia32/builtins-ia32.cc
index 1f15c318991..b2c7455ad49 100644
--- a/src/builtins/ia32/builtins-ia32.cc
+++ b/src/builtins/ia32/builtins-ia32.cc
@@ -214,8 +214,6 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler* masm) {
       &not_create_implicit_receiver, Label::kNear);
 
   // If not derived class constructor: Allocate the new receiver object.
-  __ IncrementCounter(masm->isolate()->counters()->constructed_objects(), 1,
-                      eax);
   __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject), RelocInfo::CODE_TARGET);
   __ jmp(&post_instantiation_deopt_entry, Label::kNear);
 
diff --git a/src/builtins/loong64/builtins-loong64.cc b/src/builtins/loong64/builtins-loong64.cc
index c67eeb64837..c710ec205f2 100644
--- a/src/builtins/loong64/builtins-loong64.cc
+++ b/src/builtins/loong64/builtins-loong64.cc
@@ -185,8 +185,6 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler* masm) {
       &not_create_implicit_receiver);
 
   // If not derived class constructor: Allocate the new receiver object.
-  __ IncrementCounter(masm->isolate()->counters()->constructed_objects(), 1, t2,
-                      t3);
   __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject), RelocInfo::CODE_TARGET);
   __ Branch(&post_instantiation_deopt_entry);
 
diff --git a/src/builtins/mips/builtins-mips.cc b/src/builtins/mips/builtins-mips.cc
index c0f6ff8aa6d..c747072b71b 100644
--- a/src/builtins/mips/builtins-mips.cc
+++ b/src/builtins/mips/builtins-mips.cc
@@ -185,8 +185,6 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler* masm) {
       &not_create_implicit_receiver);
 
   // If not derived class constructor: Allocate the new receiver object.
-  __ IncrementCounter(masm->isolate()->counters()->constructed_objects(), 1,
-                      t2, t3);
   __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject), RelocInfo::CODE_TARGET);
   __ Branch(&post_instantiation_deopt_entry);
 
diff --git a/src/builtins/mips64/builtins-mips64.cc b/src/builtins/mips64/builtins-mips64.cc
index 71a232f3911..184d3953a07 100644
--- a/src/builtins/mips64/builtins-mips64.cc
+++ b/src/builtins/mips64/builtins-mips64.cc
@@ -185,8 +185,6 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler* masm) {
       &not_create_implicit_receiver);
 
   // If not derived class constructor: Allocate the new receiver object.
-  __ IncrementCounter(masm->isolate()->counters()->constructed_objects(), 1,
-                      t2, t3);
   __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject),
           RelocInfo::CODE_TARGET);
   __ Branch(&post_instantiation_deopt_entry);
diff --git a/src/builtins/ppc/builtins-ppc.cc b/src/builtins/ppc/builtins-ppc.cc
index 4ba8cba3551..47e9677685a 100644
--- a/src/builtins/ppc/builtins-ppc.cc
+++ b/src/builtins/ppc/builtins-ppc.cc
@@ -504,8 +504,6 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler* masm) {
       &not_create_implicit_receiver);
 
   // If not derived class constructor: Allocate the new receiver object.
-  __ IncrementCounter(masm->isolate()->counters()->constructed_objects(), 1, r7,
-                      r8);
   __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject), RelocInfo::CODE_TARGET);
   __ b(&post_instantiation_deopt_entry);
 
diff --git a/src/builtins/riscv64/builtins-riscv64.cc b/src/builtins/riscv64/builtins-riscv64.cc
index 56d68655c1b..49432f956cf 100644
--- a/src/builtins/riscv64/builtins-riscv64.cc
+++ b/src/builtins/riscv64/builtins-riscv64.cc
@@ -195,8 +195,6 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler* masm) {
     Register scratch = func_info;
     Register scratch2 = temps.Acquire();
     // If not derived class constructor: Allocate the new receiver object.
-    __ IncrementCounter(masm->isolate()->counters()->constructed_objects(), 1,
-                        scratch, scratch2);
     __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject),
             RelocInfo::CODE_TARGET);
     __ BranchShort(&post_instantiation_deopt_entry);
diff --git a/src/builtins/s390/builtins-s390.cc b/src/builtins/s390/builtins-s390.cc
index fc842b7b66a..97ac696449d 100644
--- a/src/builtins/s390/builtins-s390.cc
+++ b/src/builtins/s390/builtins-s390.cc
@@ -486,8 +486,6 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler* masm) {
       &not_create_implicit_receiver);
 
   // If not derived class constructor: Allocate the new receiver object.
-  __ IncrementCounter(masm->isolate()->counters()->constructed_objects(), 1, r6,
-                      r7);
   __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject), RelocInfo::CODE_TARGET);
   __ b(&post_instantiation_deopt_entry);
 
diff --git a/src/builtins/x64/builtins-x64.cc b/src/builtins/x64/builtins-x64.cc
index 2dc6b1b1a3c..b2ce751125e 100644
--- a/src/builtins/x64/builtins-x64.cc
+++ b/src/builtins/x64/builtins-x64.cc
@@ -212,7 +212,6 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler* masm) {
       &not_create_implicit_receiver, Label::kNear);
 
   // If not derived class constructor: Allocate the new receiver object.
-  __ IncrementCounter(masm->isolate()->counters()->constructed_objects(), 1);
   __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject), RelocInfo::CODE_TARGET);
   __ jmp(&post_instantiation_deopt_entry, Label::kNear);
 
diff --git a/src/codegen/compiler.cc b/src/codegen/compiler.cc
index ed8c54d4765..07ea73e6085 100644
--- a/src/codegen/compiler.cc
+++ b/src/codegen/compiler.cc
@@ -389,28 +389,6 @@ CompilationJob::Status UnoptimizedCompilationJob::FinalizeJob(
 }
 
 namespace {
-
-void RecordUnoptimizedCompilationStats(Isolate* isolate,
-                                       Handle<SharedFunctionInfo> shared_info) {
-#if V8_ENABLE_WEBASSEMBLY
-  int code_size =
-      shared_info->HasBytecodeArray()
-          ? shared_info->GetBytecodeArray(isolate).SizeIncludingMetadata()
-          : shared_info->asm_wasm_data().Size();
-#else
-  int code_size =
-      shared_info->GetBytecodeArray(isolate).SizeIncludingMetadata();
-#endif  // V8_ENABLE_WEBASSEMBLY
-
-  Counters* counters = isolate->counters();
-  // TODO(4280): Rename counters from "baseline" to "unoptimized" eventually.
-  counters->total_baseline_code_size()->Increment(code_size);
-  counters->total_baseline_compile_count()->Increment(1);
-
-  // TODO(5203): Add timers for each phase of compilation.
-  // Also add total time (there's now already timer_ on the base class).
-}
-
 void RecordUnoptimizedFunctionCompilation(
     Isolate* isolate, LogEventListener::LogEventsAndTags tag,
     Handle<SharedFunctionInfo> shared, base::TimeDelta time_taken_to_execute,
@@ -678,7 +656,6 @@ void LogUnoptimizedCompilation(Isolate* isolate,
   RecordUnoptimizedFunctionCompilation(isolate, log_tag, shared_info,
                                        time_taken_to_execute,
                                        time_taken_to_finalize);
-  RecordUnoptimizedCompilationStats(isolate, shared_info);
 }
 
 template <typename IsolateT>
@@ -1837,10 +1814,6 @@ void BackgroundCompileTask::ReportStatistics(Isolate* isolate) {
   for (auto feature : use_counts_) {
     isolate->CountUsage(feature);
   }
-  if (total_preparse_skipped_ > 0) {
-    isolate->counters()->total_preparse_skipped()->Increment(
-        total_preparse_skipped_);
-  }
 }
 
 BackgroundDeserializeTask::BackgroundDeserializeTask(
@@ -2300,9 +2273,6 @@ MaybeHandle<JSFunction> Compiler::GetFunctionFromEval(
     int eval_scope_position, int eval_position,
     ParsingWhileDebugging parsing_while_debugging) {
   Isolate* isolate = context->GetIsolate();
-  int source_length = source->length();
-  isolate->counters()->total_eval_size()->Increment(source_length);
-  isolate->counters()->total_compile_size()->Increment(source_length);
 
   // The cache lookup key needs to be aware of the separation between the
   // parameters and the body to prevent this valid invocation:
@@ -2981,15 +2951,12 @@ MaybeHandle<SharedFunctionInfo> GetSharedFunctionInfoForScriptImpl(
     DCHECK(!(cached_data && deserialize_task));
     DCHECK_NULL(extension);
   }
-  int source_length = source->length();
-  isolate->counters()->total_load_size()->Increment(source_length);
-  isolate->counters()->total_compile_size()->Increment(source_length);
 
   if (V8_UNLIKELY(
           i::FLAG_experimental_web_snapshots &&
           (source->IsExternalOneByteString() || source->IsSeqOneByteString() ||
            source->IsExternalTwoByteString() || source->IsSeqTwoByteString()) &&
-          source_length > 4)) {
+          source->length() > 4)) {
     // Experimental: Treat the script as a web snapshot if it starts with the
     // magic byte sequence. TODO(v8:11525): Remove this once proper embedder
     // integration is done.
@@ -3164,9 +3131,6 @@ MaybeHandle<JSFunction> Compiler::GetWrappedFunction(
     DCHECK(cached_data);
   }
 
-  int source_length = source->length();
-  isolate->counters()->total_compile_size()->Increment(source_length);
-
   LanguageMode language_mode = construct_language_mode(FLAG_use_strict);
 
   MaybeHandle<SharedFunctionInfo> maybe_result;
@@ -3252,10 +3216,6 @@ Compiler::GetSharedFunctionInfoForStreamedScript(
       isolate, ScriptCompiler::kNoCacheBecauseStreamingSource);
   PostponeInterruptsScope postpone(isolate);
 
-  int source_length = source->length();
-  isolate->counters()->total_load_size()->Increment(source_length);
-  isolate->counters()->total_compile_size()->Increment(source_length);
-
   BackgroundCompileTask* task = streaming_data->task.get();
 
   MaybeHandle<SharedFunctionInfo> maybe_result;
diff --git a/src/compiler/backend/code-generator.cc b/src/compiler/backend/code-generator.cc
index 377a949b21c..f8d2b7643c3 100644
--- a/src/compiler/backend/code-generator.cc
+++ b/src/compiler/backend/code-generator.cc
@@ -507,10 +507,6 @@ MaybeHandle<Code> CodeGenerator::FinalizeCode() {
     return MaybeHandle<Code>();
   }
 
-  // Counts both compiled code and metadata.
-  isolate()->counters()->total_compiled_code_size()->Increment(
-      code->raw_body_size());
-
   LOG_CODE_EVENT(isolate(), CodeLinePosInfoRecordEvent(
                                 code->raw_instruction_start(),
                                 *source_positions, JitCodeEvent::JIT_CODE));
diff --git a/src/execution/frames.cc b/src/execution/frames.cc
index c40c6e68573..af0e957abda 100644
--- a/src/execution/frames.cc
+++ b/src/execution/frames.cc
@@ -2449,14 +2449,12 @@ uint32_t PcAddressForHashing(Isolate* isolate, Address address) {
 
 InnerPointerToCodeCache::InnerPointerToCodeCacheEntry*
 InnerPointerToCodeCache::GetCacheEntry(Address inner_pointer) {
-  isolate_->counters()->pc_to_code()->Increment();
   DCHECK(base::bits::IsPowerOfTwo(kInnerPointerToCodeCacheSize));
   uint32_t hash =
       ComputeUnseededHash(PcAddressForHashing(isolate_, inner_pointer));
   uint32_t index = hash & (kInnerPointerToCodeCacheSize - 1);
   InnerPointerToCodeCacheEntry* entry = cache(index);
   if (entry->inner_pointer == inner_pointer) {
-    isolate_->counters()->pc_to_code_cached()->Increment();
     DCHECK(entry->code ==
            isolate_->heap()->GcSafeFindCodeForInnerPointer(inner_pointer));
   } else {
diff --git a/src/heap/factory.cc b/src/heap/factory.cc
index cff94970c89..c85cdf63034 100644
--- a/src/heap/factory.cc
+++ b/src/heap/factory.cc
@@ -1902,7 +1902,6 @@ Map Factory::InitializeMap(Map map, InstanceType type, int instance_size,
   DCHECK(!map.is_in_retained_map_list());
   map.clear_padding();
   map.set_elements_kind(elements_kind);
-  isolate()->counters()->maps_created()->Increment();
   if (FLAG_log_maps) LOG(isolate(), MapCreate(map));
   return map;
 }
diff --git a/src/heap/heap-allocator.cc b/src/heap/heap-allocator.cc
index 2915977011d..dba6d178688 100644
--- a/src/heap/heap-allocator.cc
+++ b/src/heap/heap-allocator.cc
@@ -107,7 +107,6 @@ AllocationResult HeapAllocator::AllocateRawWithRetryOrFailSlowPath(
       AllocateRawWithLightRetrySlowPath(size, allocation, origin, alignment);
   if (!result.IsFailure()) return result;
 
-  heap_->isolate()->counters()->gc_last_resort_from_handles()->Increment();
   if (IsSharedAllocationType(allocation)) {
     heap_->CollectSharedGarbage(GarbageCollectionReason::kLastResort);
 
diff --git a/src/heap/heap.cc b/src/heap/heap.cc
index 76d322a13e6..66f1bfc499a 100644
--- a/src/heap/heap.cc
+++ b/src/heap/heap.cc
@@ -1474,8 +1474,6 @@ void Heap::GarbageCollectionEpilogue(GarbageCollector collector) {
   isolate_->counters()->alive_after_last_gc()->Set(
       static_cast<int>(SizeOfObjects()));
 
-  isolate_->string_table()->UpdateCountersIfOwnedBy(isolate_);
-
   if (CommittedMemory() > 0) {
     isolate_->counters()->external_fragmentation_total()->AddSample(
         static_cast<int>(100 - (SizeOfObjects() * 100.0) / CommittedMemory()));
@@ -3259,7 +3257,6 @@ void* Heap::AllocateExternalBackingStore(
       result = allocate(byte_length);
       if (result) return result;
     }
-    isolate()->counters()->gc_last_resort_from_handles()->Increment();
     CollectAllAvailableGarbage(
         GarbageCollectionReason::kExternalMemoryPressure);
   }
diff --git a/src/ic/accessor-assembler.cc b/src/ic/accessor-assembler.cc
index 1d4e6db1ca9..8c4bc2885ee 100644
--- a/src/ic/accessor-assembler.cc
+++ b/src/ic/accessor-assembler.cc
@@ -2632,7 +2632,6 @@ void AccessorAssembler::GenericElementLoad(
 
   // Unimplemented elements kinds fall back to a runtime call.
   Label* unimplemented_elements_kind = slow;
-  IncrementCounter(isolate()->counters()->ic_keyed_load_generic_smi(), 1);
   EmitElementLoad(lookup_start_object, elements_kind, index,
                   is_jsarray_condition, &if_element_hole, &rebox_double,
                   &var_double_value, unimplemented_elements_kind, &if_oob, slow,
@@ -2673,7 +2672,6 @@ void AccessorAssembler::GenericElementLoad(
     Comment("load string character");
     TNode<IntPtrT> length = LoadStringLengthAsWord(CAST(lookup_start_object));
     GotoIfNot(UintPtrLessThan(index, length), slow);
-    IncrementCounter(isolate()->counters()->ic_keyed_load_generic_smi(), 1);
     TailCallBuiltin(Builtin::kStringCharAt, NoContextConstant(),
                     lookup_start_object, index);
   }
@@ -2788,7 +2786,6 @@ void AccessorAssembler::GenericPropertyLoad(
     TNode<Object> value = CallGetterIfAccessor(
         var_value.value(), lookup_start_object, var_details.value(),
         p->context(), p->receiver(), p->name(), slow);
-    IncrementCounter(isolate()->counters()->ic_keyed_load_generic_symbol(), 1);
     Return(value);
   }
 
@@ -3640,7 +3637,6 @@ void AccessorAssembler::KeyedLoadICGeneric(const LoadICParameters* p) {
   BIND(&if_runtime);
   {
     Comment("KeyedLoadGeneric_slow");
-    IncrementCounter(isolate()->counters()->ic_keyed_load_generic_slow(), 1);
     // TODO(jkummerow): Should we use the GetProperty TF stub instead?
     TailCallRuntime(Runtime::kGetProperty, p->context(),
                     p->receiver_and_lookup_start_object(), var_name.value());
diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc
index 956481b1151..d79a156c7a1 100644
--- a/src/init/bootstrapper.cc
+++ b/src/init/bootstrapper.cc
@@ -6352,7 +6352,6 @@ Genesis::Genesis(
   if (!native_context().is_null()) {
     AddToWeakNativeContextList(isolate, *native_context());
     isolate->set_context(*native_context());
-    isolate->counters()->contexts_created_by_snapshot()->Increment();
 
     // If no global proxy template was passed in, simply use the global in the
     // snapshot. If a global proxy template was passed in it's used to recreate
@@ -6396,8 +6395,6 @@ Genesis::Genesis(
     if (!InstallExtrasBindings()) return;
     if (!ConfigureGlobalObject(global_proxy_template)) return;
 
-    isolate->counters()->contexts_created_from_scratch()->Increment();
-
     if (FLAG_profile_deserialization) {
       double ms = timer.Elapsed().InMillisecondsF();
       PrintF("[Initializing context from scratch took %0.3f ms]\n", ms);
diff --git a/src/logging/counters-definitions.h b/src/logging/counters-definitions.h
index 1134459a257..1e00632b4e2 100644
--- a/src/logging/counters-definitions.h
+++ b/src/logging/counters-definitions.h
@@ -281,56 +281,23 @@ namespace internal {
 // lines) rather than one macro (of length about 80 lines) to work around
 // this problem.  Please avoid using recursive macros of this length when
 // possible.
-#define STATS_COUNTER_LIST_1(SC)                                   \
-  /* Global Handle Count*/                                         \
-  SC(global_handles, V8.GlobalHandles)                             \
-  SC(maps_normalized, V8.MapsNormalized)                           \
-  SC(maps_created, V8.MapsCreated)                                 \
-  SC(elements_transitions, V8.ObjectElementsTransitions)           \
-  SC(props_to_dictionary, V8.ObjectPropertiesToDictionary)         \
-  SC(elements_to_dictionary, V8.ObjectElementsToDictionary)        \
-  SC(alive_after_last_gc, V8.AliveAfterLastGC)                     \
-  SC(objs_since_last_young, V8.ObjsSinceLastYoung)                 \
-  SC(objs_since_last_full, V8.ObjsSinceLastFull)                   \
-  SC(string_table_capacity, V8.StringTableCapacity)                \
-  SC(number_of_symbols, V8.NumberOfSymbols)                        \
-  SC(inlined_copied_elements, V8.InlinedCopiedElements)            \
-  SC(compilation_cache_hits, V8.CompilationCacheHits)              \
-  SC(compilation_cache_misses, V8.CompilationCacheMisses)          \
-  /* Amount of evaled source code. */                              \
-  SC(total_eval_size, V8.TotalEvalSize)                            \
-  /* Amount of loaded source code. */                              \
-  SC(total_load_size, V8.TotalLoadSize)                            \
-  /* Amount of parsed source code. */                              \
-  SC(total_parse_size, V8.TotalParseSize)                          \
-  /* Amount of source code skipped over using preparsing. */       \
-  SC(total_preparse_skipped, V8.TotalPreparseSkipped)              \
-  /* Amount of compiled source code. */                            \
-  SC(total_compile_size, V8.TotalCompileSize)                      \
-  /* Number of contexts created from scratch. */                   \
-  SC(contexts_created_from_scratch, V8.ContextsCreatedFromScratch) \
-  /* Number of contexts created by context snapshot. */            \
-  SC(contexts_created_by_snapshot, V8.ContextsCreatedBySnapshot)   \
-  /* Number of code objects found from pc. */                      \
-  SC(pc_to_code, V8.PcToCode)                                      \
-  SC(pc_to_code_cached, V8.PcToCodeCached)
+#define STATS_COUNTER_LIST_1(SC)                          \
+  /* Global Handle Count*/                                \
+  SC(global_handles, V8.GlobalHandles)                    \
+  SC(alive_after_last_gc, V8.AliveAfterLastGC)            \
+  SC(compilation_cache_hits, V8.CompilationCacheHits)     \
+  SC(compilation_cache_misses, V8.CompilationCacheMisses) \
+  SC(objs_since_last_young, V8.ObjsSinceLastYoung)        \
+  SC(objs_since_last_full, V8.ObjsSinceLastFull)
 
 #define STATS_COUNTER_LIST_2(SC)                                               \
-  /* Amount of (JS) compiled code. */                                          \
-  SC(total_compiled_code_size, V8.TotalCompiledCodeSize)                       \
   SC(gc_compactor_caused_by_request, V8.GCCompactorCausedByRequest)            \
   SC(gc_compactor_caused_by_promoted_data, V8.GCCompactorCausedByPromotedData) \
   SC(gc_compactor_caused_by_oldspace_exhaustion,                               \
      V8.GCCompactorCausedByOldspaceExhaustion)                                 \
-  SC(gc_last_resort_from_js, V8.GCLastResortFromJS)                            \
-  SC(gc_last_resort_from_handles, V8.GCLastResortFromHandles)                  \
-  SC(cow_arrays_converted, V8.COWArraysConverted)                              \
-  SC(constructed_objects_runtime, V8.ConstructedObjectsRuntime)                \
-  SC(megamorphic_stub_cache_updates, V8.MegamorphicStubCacheUpdates)           \
   SC(enum_cache_hits, V8.EnumCacheHits)                                        \
   SC(enum_cache_misses, V8.EnumCacheMisses)                                    \
-  SC(string_add_runtime, V8.StringAddRuntime)                                  \
-  SC(sub_string_runtime, V8.SubStringRuntime)                                  \
+  SC(megamorphic_stub_cache_updates, V8.MegamorphicStubCacheUpdates)           \
   SC(regexp_entry_runtime, V8.RegExpEntryRuntime)                              \
   SC(stack_interrupts, V8.StackInterrupts)                                     \
   SC(new_space_bytes_available, V8.MemoryNewSpaceBytesAvailable)               \
@@ -348,10 +315,6 @@ namespace internal {
   SC(lo_space_bytes_available, V8.MemoryLoSpaceBytesAvailable)                 \
   SC(lo_space_bytes_committed, V8.MemoryLoSpaceBytesCommitted)                 \
   SC(lo_space_bytes_used, V8.MemoryLoSpaceBytesUsed)                           \
-  /* Total code size (including metadata) of baseline code or bytecode. */     \
-  SC(total_baseline_code_size, V8.TotalBaselineCodeSize)                       \
-  /* Total count of functions compiled using the baseline compiler. */         \
-  SC(total_baseline_compile_count, V8.TotalBaselineCompileCount)               \
   SC(wasm_generated_code_size, V8.WasmGeneratedCodeBytes)                      \
   SC(wasm_reloc_size, V8.WasmRelocBytes)                                       \
   SC(wasm_lazily_compiled_functions, V8.WasmLazilyCompiledFunctions)
@@ -361,14 +324,7 @@ namespace internal {
 #define STATS_COUNTER_NATIVE_CODE_LIST(SC)                         \
   /* Number of write barriers executed at runtime. */              \
   SC(write_barriers, V8.WriteBarriers)                             \
-  SC(constructed_objects, V8.ConstructedObjects)                   \
-  SC(fast_new_closure_total, V8.FastNewClosureTotal)               \
   SC(regexp_entry_native, V8.RegExpEntryNative)                    \
-  SC(string_add_native, V8.StringAddNative)                        \
-  SC(sub_string_native, V8.SubStringNative)                        \
-  SC(ic_keyed_load_generic_smi, V8.ICKeyedLoadGenericSmi)          \
-  SC(ic_keyed_load_generic_symbol, V8.ICKeyedLoadGenericSymbol)    \
-  SC(ic_keyed_load_generic_slow, V8.ICKeyedLoadGenericSlow)        \
   SC(megamorphic_stub_cache_probes, V8.MegamorphicStubCacheProbes) \
   SC(megamorphic_stub_cache_misses, V8.MegamorphicStubCacheMisses)
 
diff --git a/src/objects/js-objects.cc b/src/objects/js-objects.cc
index 3a8b88958c4..674f1d8a6bd 100644
--- a/src/objects/js-objects.cc
+++ b/src/objects/js-objects.cc
@@ -2267,8 +2267,6 @@ MaybeHandle<JSObject> JSObject::New(Handle<JSFunction> constructor,
                              : NameDictionary::kInitialCapacity;
   Handle<JSObject> result = isolate->factory()->NewFastOrSlowJSObjectFromMap(
       initial_map, initial_capacity, AllocationType::kYoung, site);
-  isolate->counters()->constructed_objects()->Increment();
-  isolate->counters()->constructed_objects_runtime()->Increment();
   return result;
 }
 
@@ -2298,7 +2296,6 @@ void JSObject::EnsureWritableFastElements(Handle<JSObject> object) {
   Handle<FixedArray> writable_elems = isolate->factory()->CopyFixedArrayWithMap(
       elems, isolate->factory()->fixed_array_map());
   object->set_elements(*writable_elems);
-  isolate->counters()->cow_arrays_converted()->Increment();
 }
 
 int JSObject::GetHeaderSize(InstanceType type,
@@ -3247,8 +3244,6 @@ void MigrateFastToSlow(Isolate* isolate, Handle<JSObject> object,
     }
   }
 
-  isolate->counters()->props_to_dictionary()->Increment();
-
 #ifdef DEBUG
   if (FLAG_trace_normalization) {
     StdoutStream os;
@@ -3881,8 +3876,6 @@ Handle<NumberDictionary> JSObject::NormalizeElements(Handle<JSObject> object) {
     object->set_elements(*dictionary);
   }
 
-  isolate->counters()->elements_to_dictionary()->Increment();
-
 #ifdef DEBUG
   if (FLAG_trace_normalization) {
     StdoutStream os;
diff --git a/src/objects/map.cc b/src/objects/map.cc
index 7336fe85743..f746908e99d 100644
--- a/src/objects/map.cc
+++ b/src/objects/map.cc
@@ -1243,7 +1243,6 @@ Handle<Map> Map::Normalize(Isolate* isolate, Handle<Map> fast_map,
     new_map->set_elements_kind(new_elements_kind);
     if (use_cache) {
       cache->Set(fast_map, new_map);
-      isolate->counters()->maps_normalized()->Increment();
     }
     if (FLAG_log_maps) {
       LOG(isolate, MapEvent("Normalize", fast_map, new_map, reason));
diff --git a/src/objects/string-table.cc b/src/objects/string-table.cc
index ff0a076413c..0a3f5e14b52 100644
--- a/src/objects/string-table.cc
+++ b/src/objects/string-table.cc
@@ -817,13 +817,6 @@ void StringTable::NotifyElementsRemoved(int count) {
   data_.load(std::memory_order_relaxed)->ElementsRemoved(count);
 }
 
-void StringTable::UpdateCountersIfOwnedBy(Isolate* isolate) {
-  DCHECK_EQ(isolate->string_table(), this);
-  if (!isolate->OwnsStringTables()) return;
-  isolate->counters()->string_table_capacity()->Set(Capacity());
-  isolate->counters()->number_of_symbols()->Set(NumberOfElements());
-}
-
 class StringForwardingTable::Block {
  public:
   static std::unique_ptr<Block> New(int capacity);
diff --git a/src/objects/string-table.h b/src/objects/string-table.h
index 648a3eac4cd..918334976b3 100644
--- a/src/objects/string-table.h
+++ b/src/objects/string-table.h
@@ -82,7 +82,6 @@ class V8_EXPORT_PRIVATE StringTable {
   void NotifyElementsRemoved(int count);
 
   void VerifyIfOwnedBy(Isolate* isolate);
-  void UpdateCountersIfOwnedBy(Isolate* isolate);
 
  private:
   class Data;
diff --git a/src/parsing/parser.cc b/src/parsing/parser.cc
index 6ee70886a99..c030fa31199 100644
--- a/src/parsing/parser.cc
+++ b/src/parsing/parser.cc
@@ -3375,8 +3375,6 @@ void Parser::UpdateStatistics(Isolate* isolate, Handle<Script> script) {
       isolate->CountUsage(v8::Isolate::kHtmlCommentInExternalScript);
     }
   }
-  isolate->counters()->total_preparse_skipped()->Increment(
-      total_preparse_skipped_);
 }
 
 void Parser::UpdateStatistics(
diff --git a/src/parsing/parsing.cc b/src/parsing/parsing.cc
index add1f203f0e..8c55a6fb6ee 100644
--- a/src/parsing/parsing.cc
+++ b/src/parsing/parsing.cc
@@ -47,7 +47,6 @@ bool ParseProgram(ParseInfo* info, Handle<Script> script,
 
   // Create a character stream for the parser.
   Handle<String> source(String::cast(script->source()), isolate);
-  isolate->counters()->total_parse_size()->Increment(source->length());
   std::unique_ptr<Utf16CharacterStream> stream(
       ScannerStream::For(isolate, source));
   info->set_character_stream(std::move(stream));
@@ -77,7 +76,6 @@ bool ParseFunction(ParseInfo* info, Handle<SharedFunctionInfo> shared_info,
   // Create a character stream for the parser.
   Handle<Script> script(Script::cast(shared_info->script()), isolate);
   Handle<String> source(String::cast(script->source()), isolate);
-  isolate->counters()->total_parse_size()->Increment(source->length());
   std::unique_ptr<Utf16CharacterStream> stream(
       ScannerStream::For(isolate, source, shared_info->StartPosition(),
                          shared_info->EndPosition()));
diff --git a/src/runtime/runtime-strings.cc b/src/runtime/runtime-strings.cc
index e8ea9f1e898..e593dbfa037 100644
--- a/src/runtime/runtime-strings.cc
+++ b/src/runtime/runtime-strings.cc
@@ -154,7 +154,6 @@ RUNTIME_FUNCTION(Runtime_StringSubstring) {
   DCHECK_LE(0, start);
   DCHECK_LE(start, end);
   DCHECK_LE(end, string->length());
-  isolate->counters()->sub_string_runtime()->Increment();
   return *isolate->factory()->NewSubString(string, start, end);
 }
 
@@ -163,7 +162,6 @@ RUNTIME_FUNCTION(Runtime_StringAdd) {
   DCHECK_EQ(2, args.length());
   Handle<String> str1 = args.at<String>(0);
   Handle<String> str2 = args.at<String>(1);
-  isolate->counters()->string_add_runtime()->Increment();
   RETURN_RESULT_OR_FAILURE(isolate,
                            isolate->factory()->NewConsString(str1, str2));
 }
diff --git a/test/unittests/logging/counters-unittest.cc b/test/unittests/logging/counters-unittest.cc
index 3558f745f80..6e8a4243a3a 100644
--- a/test/unittests/logging/counters-unittest.cc
+++ b/test/unittests/logging/counters-unittest.cc
@@ -211,30 +211,6 @@ TEST_F(AggregatedMemoryHistogramTest, ManySamples2) {
   }
 }
 
-TEST_F(SnapshotNativeCounterTest, StringAddNative) {
-  RunJS("let s = 'hello, ' + 'world!'");
-
-  if (SupportsNativeCounters()) {
-    EXPECT_NE(0, string_add_native());
-  } else {
-    EXPECT_EQ(0, string_add_native());
-  }
-
-  PrintAll();
-}
-
-TEST_F(SnapshotNativeCounterTest, SubStringNative) {
-  RunJS("'hello, world!'.substring(6);");
-
-  if (SupportsNativeCounters()) {
-    EXPECT_NE(0, sub_string_native());
-  } else {
-    EXPECT_EQ(0, sub_string_native());
-  }
-
-  PrintAll();
-}
-
 TEST_F(SnapshotNativeCounterTest, WriteBarrier) {
   RunJS("let o = {a: 42};");
 
-- 
2.35.1

