From ff0432c8b001eef67bccc380948cd499ec9e5761 Mon Sep 17 00:00:00 2001
From: Pierre Langlois <pierre.langlois@arm.com>
Date: Tue, 19 Jul 2022 11:58:56 +0100
Subject: [PATCH] [baseline][arm64] Do not generate BTI instructions for every
 label.

We already generate BTI instructions with
`BaselineAssembler::JumpTarget()` on `VisitSingleBytecode()`, so we
shouldn't need to do it when binding a label.

Bug: v8:13082
Change-Id: Ie4d645a2379c3feb4909be524b42ebd85a8d35af
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3771861
Reviewed-by: Leszek Swirski <leszeks@chromium.org>
Commit-Queue: Pierre Langlois <pierre.langlois@arm.com>
Cr-Commit-Position: refs/heads/main@{#81813}
---
 src/baseline/arm/baseline-assembler-arm-inl.h         | 1 -
 src/baseline/arm64/baseline-assembler-arm64-inl.h     | 7 +------
 src/baseline/baseline-assembler.h                     | 4 ----
 src/baseline/baseline-compiler.cc                     | 4 ++--
 src/baseline/ia32/baseline-assembler-ia32-inl.h       | 1 -
 src/baseline/loong64/baseline-assembler-loong64-inl.h | 2 --
 src/baseline/mips/baseline-assembler-mips-inl.h       | 2 --
 src/baseline/mips64/baseline-assembler-mips64-inl.h   | 2 --
 src/baseline/ppc/baseline-assembler-ppc-inl.h         | 1 -
 src/baseline/riscv64/baseline-assembler-riscv64-inl.h | 2 --
 src/baseline/s390/baseline-assembler-s390-inl.h       | 1 -
 src/baseline/x64/baseline-assembler-x64-inl.h         | 1 -
 12 files changed, 3 insertions(+), 25 deletions(-)

diff --git a/src/baseline/arm/baseline-assembler-arm-inl.h b/src/baseline/arm/baseline-assembler-arm-inl.h
index f8c171608d9..c85857fe06b 100644
--- a/src/baseline/arm/baseline-assembler-arm-inl.h
+++ b/src/baseline/arm/baseline-assembler-arm-inl.h
@@ -93,7 +93,6 @@ MemOperand BaselineAssembler::FeedbackVectorOperand() {
 }
 
 void BaselineAssembler::Bind(Label* label) { __ bind(label); }
-void BaselineAssembler::BindWithoutJumpTarget(Label* label) { __ bind(label); }
 
 void BaselineAssembler::JumpTarget() {
   // NOP on arm.
diff --git a/src/baseline/arm64/baseline-assembler-arm64-inl.h b/src/baseline/arm64/baseline-assembler-arm64-inl.h
index e5a7477cb07..c7c7ef2cd73 100644
--- a/src/baseline/arm64/baseline-assembler-arm64-inl.h
+++ b/src/baseline/arm64/baseline-assembler-arm64-inl.h
@@ -88,12 +88,7 @@ MemOperand BaselineAssembler::FeedbackVectorOperand() {
   return MemOperand(fp, BaselineFrameConstants::kFeedbackVectorFromFp);
 }
 
-void BaselineAssembler::Bind(Label* label) {
-  // All baseline compiler binds on arm64 are assumed to be for jump targets.
-  __ BindJumpTarget(label);
-}
-
-void BaselineAssembler::BindWithoutJumpTarget(Label* label) { __ Bind(label); }
+void BaselineAssembler::Bind(Label* label) { __ Bind(label); }
 
 void BaselineAssembler::JumpTarget() { __ JumpTarget(); }
 
diff --git a/src/baseline/baseline-assembler.h b/src/baseline/baseline-assembler.h
index be28908a1b1..a148ea02576 100644
--- a/src/baseline/baseline-assembler.h
+++ b/src/baseline/baseline-assembler.h
@@ -44,10 +44,6 @@ class BaselineAssembler {
   inline void DecodeField(Register reg);
 
   inline void Bind(Label* label);
-  // Binds the label without marking it as a valid jump target.
-  // This is only useful, when the position is already marked as a valid jump
-  // target (i.e. at the beginning of the bytecode).
-  inline void BindWithoutJumpTarget(Label* label);
   // Marks the current position as a valid jump target on CFI enabled
   // architectures.
   inline void JumpTarget();
diff --git a/src/baseline/baseline-compiler.cc b/src/baseline/baseline-compiler.cc
index 3c486ee2e68..659dc203a71 100644
--- a/src/baseline/baseline-compiler.cc
+++ b/src/baseline/baseline-compiler.cc
@@ -472,12 +472,12 @@ void BaselineCompiler::VisitSingleBytecode() {
     // Bind labels for this offset that have already been linked to a
     // jump (i.e. forward jumps, excluding jump tables).
     for (auto&& label : labels_[offset]->linked) {
-      __ BindWithoutJumpTarget(&label->label);
+      __ Bind(&label->label);
     }
 #ifdef DEBUG
     labels_[offset]->linked.Clear();
 #endif
-    __ BindWithoutJumpTarget(&labels_[offset]->unlinked);
+    __ Bind(&labels_[offset]->unlinked);
   }
 
   // Mark position as valid jump target. This is required for the deoptimizer
diff --git a/src/baseline/ia32/baseline-assembler-ia32-inl.h b/src/baseline/ia32/baseline-assembler-ia32-inl.h
index 477e88a11a3..8335229263c 100644
--- a/src/baseline/ia32/baseline-assembler-ia32-inl.h
+++ b/src/baseline/ia32/baseline-assembler-ia32-inl.h
@@ -95,7 +95,6 @@ MemOperand BaselineAssembler::FeedbackVectorOperand() {
 }
 
 void BaselineAssembler::Bind(Label* label) { __ bind(label); }
-void BaselineAssembler::BindWithoutJumpTarget(Label* label) { __ bind(label); }
 
 void BaselineAssembler::JumpTarget() {
   // NOP on ia32.
diff --git a/src/baseline/loong64/baseline-assembler-loong64-inl.h b/src/baseline/loong64/baseline-assembler-loong64-inl.h
index 81265530a0f..26d85314bd7 100644
--- a/src/baseline/loong64/baseline-assembler-loong64-inl.h
+++ b/src/baseline/loong64/baseline-assembler-loong64-inl.h
@@ -89,8 +89,6 @@ MemOperand BaselineAssembler::FeedbackVectorOperand() {
 
 void BaselineAssembler::Bind(Label* label) { __ bind(label); }
 
-void BaselineAssembler::BindWithoutJumpTarget(Label* label) { __ bind(label); }
-
 void BaselineAssembler::JumpTarget() {
   // NOP.
 }
diff --git a/src/baseline/mips/baseline-assembler-mips-inl.h b/src/baseline/mips/baseline-assembler-mips-inl.h
index a25c1a0a715..f74ee21f98f 100644
--- a/src/baseline/mips/baseline-assembler-mips-inl.h
+++ b/src/baseline/mips/baseline-assembler-mips-inl.h
@@ -91,8 +91,6 @@ MemOperand BaselineAssembler::FeedbackVectorOperand() {
 
 void BaselineAssembler::Bind(Label* label) { __ bind(label); }
 
-void BaselineAssembler::BindWithoutJumpTarget(Label* label) { __ bind(label); }
-
 void BaselineAssembler::JumpTarget() {
   // NOP.
 }
diff --git a/src/baseline/mips64/baseline-assembler-mips64-inl.h b/src/baseline/mips64/baseline-assembler-mips64-inl.h
index aee26c391ed..69fd5eb5b83 100644
--- a/src/baseline/mips64/baseline-assembler-mips64-inl.h
+++ b/src/baseline/mips64/baseline-assembler-mips64-inl.h
@@ -89,8 +89,6 @@ MemOperand BaselineAssembler::FeedbackVectorOperand() {
 
 void BaselineAssembler::Bind(Label* label) { __ bind(label); }
 
-void BaselineAssembler::BindWithoutJumpTarget(Label* label) { __ bind(label); }
-
 void BaselineAssembler::JumpTarget() {
   // NOP.
 }
diff --git a/src/baseline/ppc/baseline-assembler-ppc-inl.h b/src/baseline/ppc/baseline-assembler-ppc-inl.h
index 25fba185a95..4702b31bd3c 100644
--- a/src/baseline/ppc/baseline-assembler-ppc-inl.h
+++ b/src/baseline/ppc/baseline-assembler-ppc-inl.h
@@ -174,7 +174,6 @@ MemOperand BaselineAssembler::FeedbackVectorOperand() {
 }
 
 void BaselineAssembler::Bind(Label* label) { __ bind(label); }
-void BaselineAssembler::BindWithoutJumpTarget(Label* label) { __ bind(label); }
 
 void BaselineAssembler::JumpTarget() {
   // NOP on arm.
diff --git a/src/baseline/riscv64/baseline-assembler-riscv64-inl.h b/src/baseline/riscv64/baseline-assembler-riscv64-inl.h
index 61c253e1c73..10823764dfd 100644
--- a/src/baseline/riscv64/baseline-assembler-riscv64-inl.h
+++ b/src/baseline/riscv64/baseline-assembler-riscv64-inl.h
@@ -87,8 +87,6 @@ MemOperand BaselineAssembler::FeedbackVectorOperand() {
 
 void BaselineAssembler::Bind(Label* label) { __ bind(label); }
 
-void BaselineAssembler::BindWithoutJumpTarget(Label* label) { __ bind(label); }
-
 void BaselineAssembler::JumpTarget() {
   // Nop
 }
diff --git a/src/baseline/s390/baseline-assembler-s390-inl.h b/src/baseline/s390/baseline-assembler-s390-inl.h
index beea3070251..29609667b7a 100644
--- a/src/baseline/s390/baseline-assembler-s390-inl.h
+++ b/src/baseline/s390/baseline-assembler-s390-inl.h
@@ -174,7 +174,6 @@ MemOperand BaselineAssembler::FeedbackVectorOperand() {
 }
 
 void BaselineAssembler::Bind(Label* label) { __ bind(label); }
-void BaselineAssembler::BindWithoutJumpTarget(Label* label) { __ bind(label); }
 
 void BaselineAssembler::JumpTarget() {
   // NOP on arm.
diff --git a/src/baseline/x64/baseline-assembler-x64-inl.h b/src/baseline/x64/baseline-assembler-x64-inl.h
index 2655d5e050b..25489752567 100644
--- a/src/baseline/x64/baseline-assembler-x64-inl.h
+++ b/src/baseline/x64/baseline-assembler-x64-inl.h
@@ -97,7 +97,6 @@ MemOperand BaselineAssembler::FeedbackVectorOperand() {
 }
 
 void BaselineAssembler::Bind(Label* label) { __ bind(label); }
-void BaselineAssembler::BindWithoutJumpTarget(Label* label) { __ bind(label); }
 
 void BaselineAssembler::JumpTarget() {
   // NOP on x64.
-- 
2.35.1

