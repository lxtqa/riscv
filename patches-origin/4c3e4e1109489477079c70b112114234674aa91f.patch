From 4c3e4e1109489477079c70b112114234674aa91f Mon Sep 17 00:00:00 2001
From: Andreas Haas <ahaas@chromium.org>
Date: Tue, 22 Nov 2022 10:51:07 +0100
Subject: [PATCH] [wasm] Add flag to allow more functions in a module

There exists a limit in the WebAssembly specification on the maximum
number of functions allowed in a module. For release builds the limit
seems high enough for now, but we got developer feedback that their
debug builds exceed this limit. To support these developers without
violating the specification this CL introduces a V8 flag that allows
to specify a custom limit. Developers can then increase this limit
locally for their debugging sessions.

R=clemensb@chromium.org

Bug: chromium:1380561
Change-Id: Ie65a47d49e9ca1d8b05617df0f46c187afef06e6
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4027963
Reviewed-by: Clemens Backes <clemensb@chromium.org>
Commit-Queue: Andreas Haas <ahaas@chromium.org>
Cr-Commit-Position: refs/heads/main@{#84417}
---
 src/flags/flag-definitions.h            |  2 ++
 src/wasm/module-decoder-impl.h          |  2 +-
 src/wasm/streaming-decoder.cc           |  2 +-
 test/mjsunit/mjsunit.status             |  1 +
 test/mjsunit/wasm/max-wasm-functions.js | 16 ++++++++++++++++
 5 files changed, 21 insertions(+), 2 deletions(-)
 create mode 100644 test/mjsunit/wasm/max-wasm-functions.js

diff --git a/src/flags/flag-definitions.h b/src/flags/flag-definitions.h
index 37d6368dd70..9b15b72d3a1 100644
--- a/src/flags/flag-definitions.h
+++ b/src/flags/flag-definitions.h
@@ -1043,6 +1043,8 @@ DEFINE_BOOL(wasm_dynamic_tiering, true,
 DEFINE_NEG_NEG_IMPLICATION(liftoff, wasm_dynamic_tiering)
 DEFINE_INT(wasm_tiering_budget, 1800000,
            "budget for dynamic tiering (rough approximation of bytes executed")
+DEFINE_INT(max_wasm_functions, wasm::kV8MaxWasmFunctions,
+           "maximum number of wasm functions supported in a module")
 DEFINE_INT(
     wasm_caching_threshold, 1000000,
     "the amount of wasm top tier code that triggers the next caching event")
diff --git a/src/wasm/module-decoder-impl.h b/src/wasm/module-decoder-impl.h
index aea9e99b782..2bfbd0f831b 100644
--- a/src/wasm/module-decoder-impl.h
+++ b/src/wasm/module-decoder-impl.h
@@ -842,7 +842,7 @@ class ModuleDecoderTemplate : public Decoder {
 
   void DecodeFunctionSection() {
     uint32_t functions_count =
-        consume_count("functions count", kV8MaxWasmFunctions);
+        consume_count("functions count", v8_flags.max_wasm_functions);
     if (counters_ != nullptr) {
       auto counter = SELECT_WASM_COUNTER(GetCounters(), origin_,
                                          wasm_functions_per, module);
diff --git a/src/wasm/streaming-decoder.cc b/src/wasm/streaming-decoder.cc
index 5d7f25fdda3..bcc933168e7 100644
--- a/src/wasm/streaming-decoder.cc
+++ b/src/wasm/streaming-decoder.cc
@@ -461,7 +461,7 @@ class AsyncStreamingDecoder::DecodeSectionPayload : public DecodingState {
 class AsyncStreamingDecoder::DecodeNumberOfFunctions : public DecodeVarInt32 {
  public:
   explicit DecodeNumberOfFunctions(SectionBuffer* section_buffer)
-      : DecodeVarInt32(kV8MaxWasmFunctions, "functions count"),
+      : DecodeVarInt32(v8_flags.max_wasm_functions, "functions count"),
         section_buffer_(section_buffer) {}
 
   std::unique_ptr<DecodingState> NextWithValue(
diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
index 4e8fdad9899..5d7a2f261e9 100644
--- a/test/mjsunit/mjsunit.status
+++ b/test/mjsunit/mjsunit.status
@@ -158,6 +158,7 @@
   'wasm/compare-exchange-stress': [PASS, SLOW, NO_VARIANTS],
   'wasm/compare-exchange64-stress': [PASS, SLOW, NO_VARIANTS],
   'wasm/code-space-overflow': [PASS, SLOW, NO_VARIANTS, ['gc_stress == True or (simulator_run and mode == debug)', SKIP]],
+  'wasm/max-wasm-functions': [PASS, SLOW, ['mode != release or dcheck_always_on', SKIP], ['tsan', SKIP]],
 
   # Very slow on ARM, MIPS, RISCV and LOONG, contains no architecture dependent code.
   'unicode-case-overoptimization0': [PASS, NO_VARIANTS, ['arch in (arm, arm64, mips64el, mips64, riscv64, riscv32, loong64)', SKIP]],
diff --git a/test/mjsunit/wasm/max-wasm-functions.js b/test/mjsunit/wasm/max-wasm-functions.js
new file mode 100644
index 00000000000..27a289fb042
--- /dev/null
+++ b/test/mjsunit/wasm/max-wasm-functions.js
@@ -0,0 +1,16 @@
+// Copyright 2022 the V8 project authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// Flags: --max-wasm-functions=1000100
+
+d8.file.execute('test/mjsunit/wasm/wasm-module-builder.js');
+
+const builder = new WasmModuleBuilder();
+const sig_index = builder.addType(makeSig([kWasmI32], [kWasmI32]));
+
+for (let j = 0; j < 1000010; ++j) {
+  builder.addFunction(undefined, sig_index)
+    .addBody([kExprLocalGet, 0]);
+}
+const instance = builder.instantiate();
-- 
2.35.1

