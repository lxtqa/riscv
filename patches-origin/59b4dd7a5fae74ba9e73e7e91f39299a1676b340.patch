From 59b4dd7a5fae74ba9e73e7e91f39299a1676b340 Mon Sep 17 00:00:00 2001
From: Victor Gomes <victorgomes@chromium.org>
Date: Wed, 8 Mar 2023 15:23:01 +0100
Subject: [PATCH] [cleanup] Rename arguments adaptor frame

The arguments adaptor frame is long gone (since 2020).
We now have a simpler translated inlined frame arguments.

Change-Id: If72c774b759051be22a4771e50bbb22ed0eaba0f
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4315773
Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
Reviewed-by: Leszek Swirski <leszeks@chromium.org>
Auto-Submit: Victor Gomes <victorgomes@chromium.org>
Commit-Queue: Victor Gomes <victorgomes@chromium.org>
Cr-Commit-Position: refs/heads/main@{#86303}
---
 src/builtins/accessors.cc            | 2 +-
 src/builtins/builtins-string-gen.cc  | 2 +-
 src/builtins/riscv/builtins-riscv.cc | 2 --
 src/compiler/js-create-lowering.cc   | 6 +++---
 src/compiler/linkage.h               | 2 +-
 src/deoptimizer/deoptimizer.cc       | 2 +-
 src/deoptimizer/translated-state.cc  | 2 +-
 src/parsing/parser-base.h            | 2 +-
 8 files changed, 9 insertions(+), 11 deletions(-)

diff --git a/src/builtins/accessors.cc b/src/builtins/accessors.cc
index bdea7b22cea..35ae7d5f38d 100644
--- a/src/builtins/accessors.cc
+++ b/src/builtins/accessors.cc
@@ -503,7 +503,7 @@ Handle<JSObject> Accessors::FunctionGetArguments(JavaScriptFrame* frame,
   Isolate* isolate = frame->isolate();
   Address requested_frame_fp = frame->fp();
   // Forward a frame iterator to the requested frame. This is needed because we
-  // potentially need for advance it to the arguments adaptor frame later.
+  // potentially need for advance it to the inlined arguments frame later.
   for (JavaScriptStackFrameIterator it(isolate); !it.done(); it.Advance()) {
     if (it.frame()->fp() != requested_frame_fp) continue;
     return GetFrameArguments(isolate, &it, inlined_jsframe_index);
diff --git a/src/builtins/builtins-string-gen.cc b/src/builtins/builtins-string-gen.cc
index 5da4f02c9f3..fee9177dade 100644
--- a/src/builtins/builtins-string-gen.cc
+++ b/src/builtins/builtins-string-gen.cc
@@ -934,7 +934,7 @@ TF_BUILTIN(StringFromCharCode, StringBuiltinsAssembler) {
   TNode<Uint32T> unsigned_argc =
       Unsigned(TruncateIntPtrToInt32(arguments.GetLengthWithoutReceiver()));
   // Check if we have exactly one argument (plus the implicit receiver), i.e.
-  // if the parent frame is not an arguments adaptor frame.
+  // if the parent frame is not an inlined arguments frame.
   Label if_oneargument(this), if_notoneargument(this);
   Branch(IntPtrEqual(arguments.GetLengthWithoutReceiver(), IntPtrConstant(1)),
          &if_oneargument, &if_notoneargument);
diff --git a/src/builtins/riscv/builtins-riscv.cc b/src/builtins/riscv/builtins-riscv.cc
index 5231fb8d3e2..78a95eefdb9 100644
--- a/src/builtins/riscv/builtins-riscv.cc
+++ b/src/builtins/riscv/builtins-riscv.cc
@@ -2215,8 +2215,6 @@ void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler* masm,
     __ bind(&new_target_constructor);
   }
 
-  // TODO(victorgomes): Remove this copy when all the arguments adaptor frame
-  // code is erased.
   __ Move(a6, fp);
   __ LoadWord(a7, MemOperand(fp, StandardFrameConstants::kArgCOffset));
 
diff --git a/src/compiler/js-create-lowering.cc b/src/compiler/js-create-lowering.cc
index 2042f0a02f8..8bb11635fd7 100644
--- a/src/compiler/js-create-lowering.cc
+++ b/src/compiler/js-create-lowering.cc
@@ -256,7 +256,7 @@ Reduction JSCreateLowering::ReduceJSCreateArguments(Node* node) {
       // TODO(turbofan): Duplicate parameters are not handled yet.
       if (shared.has_duplicate_parameters()) return NoChange();
       // Choose the correct frame state and frame state info depending on
-      // whether there conceptually is an arguments adaptor frame in the call
+      // whether there conceptually is an inlined arguments frame in the call
       // chain.
       FrameState args_state = GetArgumentsFrameState(frame_state);
       if (args_state.parameters()->opcode() == IrOpcode::kDeadValue) {
@@ -298,7 +298,7 @@ Reduction JSCreateLowering::ReduceJSCreateArguments(Node* node) {
       // (i.e. non-outermost) frames, independent of the object size.
       Node* effect = NodeProperties::GetEffectInput(node);
       // Choose the correct frame state and frame state info depending on
-      // whether there conceptually is an arguments adaptor frame in the call
+      // whether there conceptually is an inlined arguments frame in the call
       // chain.
       FrameState args_state = GetArgumentsFrameState(frame_state);
       if (args_state.parameters()->opcode() == IrOpcode::kDeadValue) {
@@ -336,7 +336,7 @@ Reduction JSCreateLowering::ReduceJSCreateArguments(Node* node) {
       // (i.e. non-outermost) frames, independent of the object size.
       Node* effect = NodeProperties::GetEffectInput(node);
       // Choose the correct frame state and frame state info depending on
-      // whether there conceptually is an arguments adaptor frame in the call
+      // whether there conceptually is an inlined arguments frame in the call
       // chain.
       FrameState args_state = GetArgumentsFrameState(frame_state);
       if (args_state.parameters()->opcode() == IrOpcode::kDeadValue) {
diff --git a/src/compiler/linkage.h b/src/compiler/linkage.h
index a80a3eca283..860a3f144da 100644
--- a/src/compiler/linkage.h
+++ b/src/compiler/linkage.h
@@ -241,7 +241,7 @@ class V8_EXPORT_PRIVATE CallDescriptor final
     // 3. JS runtime arguments are not attached as inputs to the TailCall node.
     // 4. Prior to the tail call, frame and register state is torn down to just
     //    before the caller frame was constructed.
-    // 5. Unlike normal tail calls, arguments adaptor frames (if present) are
+    // 5. Unlike normal tail calls, inlined arguments frames (if present) are
     //    *not* torn down.
     //
     // In other words, behavior is identical to a jmp instruction prior caller
diff --git a/src/deoptimizer/deoptimizer.cc b/src/deoptimizer/deoptimizer.cc
index 638ba6ad16d..64bef54dae2 100644
--- a/src/deoptimizer/deoptimizer.cc
+++ b/src/deoptimizer/deoptimizer.cc
@@ -1208,7 +1208,7 @@ void Deoptimizer::DoComputeInlinedExtraArguments(
       (std::max(0, extra_argument_count) + padding) * kSystemPointerSize;
   if (verbose_tracing_enabled()) {
     PrintF(trace_scope_->file(),
-           "  translating arguments adaptor => variable_size=%d\n",
+           "  translating inlined arguments frame => variable_size=%d\n",
            output_frame_size);
   }
 
diff --git a/src/deoptimizer/translated-state.cc b/src/deoptimizer/translated-state.cc
index 00b64e12c05..192e01cd836 100644
--- a/src/deoptimizer/translated-state.cc
+++ b/src/deoptimizer/translated-state.cc
@@ -827,7 +827,7 @@ TranslatedFrame TranslatedState::CreateNextTranslatedFrame(
       int height = iterator->NextOperand();
       if (trace_file != nullptr) {
         std::unique_ptr<char[]> name = shared_info.DebugNameCStr();
-        PrintF(trace_file, "  reading arguments adaptor frame %s", name.get());
+        PrintF(trace_file, "  reading inlined arguments frame %s", name.get());
         PrintF(trace_file, " => height=%d; inputs:\n", height);
       }
       return TranslatedFrame::InlinedExtraArguments(shared_info, height);
diff --git a/src/parsing/parser-base.h b/src/parsing/parser-base.h
index b33502c4cc7..ff5af7dfec9 100644
--- a/src/parsing/parser-base.h
+++ b/src/parsing/parser-base.h
@@ -63,7 +63,7 @@ struct FormalParametersBase {
   int num_parameters() const {
     // Don't include the rest parameter into the function's formal parameter
     // count (esp. the SharedFunctionInfo::internal_formal_parameter_count,
-    // which says whether we need to create an arguments adaptor frame).
+    // which says whether we need to create an inlined arguments frame).
     return arity - has_rest;
   }
 
-- 
2.35.1

