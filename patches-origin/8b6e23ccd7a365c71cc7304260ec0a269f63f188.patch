From 8b6e23ccd7a365c71cc7304260ec0a269f63f188 Mon Sep 17 00:00:00 2001
From: Yahan Lu <yahan@iscas.ac.cn>
Date: Fri, 26 Aug 2022 03:36:40 +0000
Subject: [PATCH] Revert "[riscv] Port [heap] Add shared barrier to RecordWrite
 builtin"

This reverts commit 59d7cf5259df9ad380574b0f3630f69d747df454.

Reason for revert: wrong port

Original change's description:
> [riscv] Port [heap] Add shared barrier to RecordWrite builtin
>
> Bug: v8:11708
>
> Change-Id: I803b5499f1bbc3f7b4e626628a73f98239df8454
> Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3854435
> Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
> Commit-Queue: ji qiu <qiuji@iscas.ac.cn>
> Reviewed-by: ji qiu <qiuji@iscas.ac.cn>
> Cr-Commit-Position: refs/heads/main@{#82710}

Bug: v8:11708
Change-Id: I0e091b2eb086c87e7c60b9840d19b7c383124e42
No-Presubmit: true
No-Tree-Checks: true
No-Try: true
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3857979
Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#82735}
---
 src/codegen/riscv/macro-assembler-riscv.cc         | 4 ++--
 src/compiler/backend/riscv/code-generator-riscv.cc | 7 +++----
 2 files changed, 5 insertions(+), 6 deletions(-)

diff --git a/src/codegen/riscv/macro-assembler-riscv.cc b/src/codegen/riscv/macro-assembler-riscv.cc
index bb3bc269eda..59115e21cc5 100644
--- a/src/codegen/riscv/macro-assembler-riscv.cc
+++ b/src/codegen/riscv/macro-assembler-riscv.cc
@@ -420,14 +420,14 @@ void MacroAssembler::RecordWrite(Register object, Operand offset,
     Register temp = temps.Acquire();
     CheckPageFlag(value,
                   temp,  // Used as scratch.
-                  MemoryChunk::kPointersToHereAreInterestingOrInSharedHeapMask,
+                  MemoryChunk::kPointersToHereAreInterestingMask,
                   eq,  // In RISC-V, it uses cc for a comparison with 0, so if
                        // no bits are set, and cc is eq, it will branch to done
                   &done);
 
     CheckPageFlag(object,
                   temp,  // Used as scratch.
-                  MemoryChunk::kPointersToHereAreInterestingOrInSharedHeapMask,
+                  MemoryChunk::kPointersFromHereAreInterestingMask,
                   eq,  // In RISC-V, it uses cc for a comparison with 0, so if
                        // no bits are set, and cc is eq, it will branch to done
                   &done);
diff --git a/src/compiler/backend/riscv/code-generator-riscv.cc b/src/compiler/backend/riscv/code-generator-riscv.cc
index 40d61e48f76..1466128e1ee 100644
--- a/src/compiler/backend/riscv/code-generator-riscv.cc
+++ b/src/compiler/backend/riscv/code-generator-riscv.cc
@@ -176,10 +176,9 @@ class OutOfLineRecordWrite final : public OutOfLineCode {
       __ DecompressTaggedPointer(value_, value_);
     }
 #endif
-    __ CheckPageFlag(
-        value_, scratch0_,
-        MemoryChunk::kPointersToHereAreInterestingOrInSharedHeapMask, eq,
-        exit());
+    __ CheckPageFlag(value_, scratch0_,
+                     MemoryChunk::kPointersToHereAreInterestingMask, eq,
+                     exit());
     __ AddWord(scratch1_, object_, index_);
     SaveFPRegsMode const save_fp_mode = frame()->DidAllocateDoubleRegisters()
                                             ? SaveFPRegsMode::kSave
-- 
2.35.1

