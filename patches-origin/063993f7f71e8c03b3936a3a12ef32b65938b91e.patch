From 063993f7f71e8c03b3936a3a12ef32b65938b91e Mon Sep 17 00:00:00 2001
From: Wez <wez@google.com>
Date: Wed, 17 May 2023 14:35:27 +0000
Subject: [PATCH] [base] Stop using ambient-replace-as-executable

Remove the v8_fuchsia_use_vmex_resource GN argument, and always
attempt to initialize a VmexResource during initialization.

Bug: chromium:1290907
Cq-Include-Trybots: luci.v8.try:v8_fuchsia_compile_rel
Change-Id: I52d294f9e17b0c51c19eff8854e0becf734b2f2f
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3827868
Reviewed-by: Victor Gomes <victorgomes@chromium.org>
Auto-Submit: Wez <wez@chromium.org>
Commit-Queue: Wez <wez@chromium.org>
Cr-Commit-Position: refs/heads/main@{#87842}
---
 BUILD.gn                              | 31 +++++++---------------
 src/base/platform/platform-fuchsia.cc | 38 ++++++++++++++-------------
 2 files changed, 30 insertions(+), 39 deletions(-)

diff --git a/BUILD.gn b/BUILD.gn
index 49c85f968ee..9a5fc15b871 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -363,13 +363,6 @@ declare_args() {
   # (incomplete and experimental).
   v8_enable_cet_shadow_stack = false
 
-  # Get VMEX priviledge at startup.
-  # It allows to run V8 without "deprecated-ambient-replace-as-executable".
-  # Sets -DV8_USE_VMEX_RESOURCE.
-  # TODO(victorgomes): Remove this flag once Chormium no longer needs
-  # the deprecated feature.
-  v8_fuchsia_use_vmex_resource = is_fuchsia && !build_with_chromium
-
   # Enables pointer compression for 8GB heaps.
   # Sets -DV8_COMPRESS_POINTERS_8GB.
   v8_enable_pointer_compression_8gb = ""
@@ -669,10 +662,6 @@ if (v8_enable_single_generation == true) {
       "Requires unconditional write barriers or none (which disables incremental marking)")
 }
 
-if (v8_fuchsia_use_vmex_resource) {
-  assert(target_os == "fuchsia", "VMEX resource only available on Fuchsia")
-}
-
 assert(!v8_enable_snapshot_compression || v8_use_zlib,
        "Snapshot compression requires zlib")
 
@@ -1134,9 +1123,6 @@ config("features") {
   if (v8_advanced_bigint_algorithms) {
     defines += [ "V8_ADVANCED_BIGINT_ALGORITHMS" ]
   }
-  if (v8_fuchsia_use_vmex_resource) {
-    defines += [ "V8_USE_VMEX_RESOURCE" ]
-  }
   if (v8_expose_memory_corruption_api) {
     defines += [ "V8_EXPOSE_MEMORY_CORRUPTION_API" ]
   }
@@ -1393,15 +1379,18 @@ config("toolchain") {
       "-Wmissing-field-initializers",
       "-Wunreachable-code",
 
-      # Google3 enables this warning, so we should also enable it to find issue
-      # earlier. See https://reviews.llvm.org/D56731 for details about this
-      # warning.
-      "-Wctad-maybe-unsupported",
-
       # TODO(v8:12245): Fix shadowing instances and remove.
       "-Wno-shadow",
     ]
 
+    # TODO(fuchsia:127411): Re-enable once FIDL bindings are compatible.
+    if (!is_fuchsia) {
+      # Google3 enables this warning, so we should also enable it to find issue
+      # earlier. See https://reviews.llvm.org/D56731 for details about this
+      # warning.
+      cflags += [ "-Wctad-maybe-unsupported" ]
+    }
+
     if (v8_current_cpu == "x64" || v8_current_cpu == "arm64" ||
         v8_current_cpu == "mips64el" || v8_current_cpu == "riscv64") {
       cflags += [ "-Wshorten-64-to-32" ]
@@ -5921,8 +5910,8 @@ v8_component("v8_libbase") {
       "src/base/platform/platform-fuchsia.cc",
     ]
     deps += [
-      "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.kernel",
-      "//third_party/fuchsia-sdk/sdk/pkg/fdio",
+      "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.kernel:fuchsia.kernel_cpp",
+      "//third_party/fuchsia-sdk/sdk/pkg/component_incoming_cpp",
       "//third_party/fuchsia-sdk/sdk/pkg/zx",
     ]
   } else if (is_mac) {
diff --git a/src/base/platform/platform-fuchsia.cc b/src/base/platform/platform-fuchsia.cc
index 885bffa3404..ad9b9dc3fc7 100644
--- a/src/base/platform/platform-fuchsia.cc
+++ b/src/base/platform/platform-fuchsia.cc
@@ -2,8 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include <fuchsia/kernel/cpp/fidl.h>
-#include <lib/fdio/directory.h>
+#include <fidl/fuchsia.kernel/cpp/fidl.h>
+#include <lib/component/incoming/cpp/protocol.h>
 #include <lib/zx/resource.h>
 #include <lib/zx/thread.h>
 #include <lib/zx/vmar.h>
@@ -24,22 +24,26 @@ static zx_handle_t g_vmex_resource = ZX_HANDLE_INVALID;
 
 static void* g_root_vmar_base = nullptr;
 
-#ifdef V8_USE_VMEX_RESOURCE
+// If VmexResource is unavailable or does not return a valid handle then
+// this will be observed as failures in vmo_replace_as_executable() calls.
 void SetVmexResource() {
   DCHECK_EQ(g_vmex_resource, ZX_HANDLE_INVALID);
-  zx::resource vmex_resource;
-  fuchsia::kernel::VmexResourceSyncPtr vmex_resource_svc;
-  zx_status_t status = fdio_service_connect(
-      "/svc/fuchsia.kernel.VmexResource",
-      vmex_resource_svc.NewRequest().TakeChannel().release());
-  DCHECK_EQ(status, ZX_OK);
-  status = vmex_resource_svc->Get(&vmex_resource);
-  USE(status);
-  DCHECK_EQ(status, ZX_OK);
-  DCHECK(vmex_resource.is_valid());
-  g_vmex_resource = vmex_resource.release();
-}
-#endif
+
+  auto vmex_resource_client =
+      component::Connect<fuchsia_kernel::VmexResource>();
+  if (vmex_resource_client.is_error()) {
+    return;
+  }
+
+  fidl::SyncClient sync_vmex_resource_client(
+      std::move(vmex_resource_client.value()));
+  auto result = sync_vmex_resource_client->Get();
+  if (result.is_error()) {
+    return;
+  }
+
+  g_vmex_resource = result->resource().release();
+}
 
 zx_vm_option_t GetProtectionFromMemoryPermission(OS::MemoryPermission access) {
   switch (access) {
@@ -246,9 +250,7 @@ void OS::Initialize(bool hard_abort, const char* const gc_fake_mmap) {
   CHECK_EQ(ZX_OK, status);
   g_root_vmar_base = reinterpret_cast<void*>(info.base);
 
-#ifdef V8_USE_VMEX_RESOURCE
   SetVmexResource();
-#endif
 }
 
 // static
-- 
2.35.1

