From 003daa7f9a560630bf183c1384cc62ee0bd8ca1a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E6=9D=A8=E6=96=87=E6=98=8E?= <yangwenming@bytedance.com>
Date: Wed, 12 Jul 2023 08:53:51 +0800
Subject: [PATCH] [riscv,wasm,atomic] use sc.d for atomic storing on riscv64.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This CL fixes the bug caused by using sc.w to store i64 values on
riscv64. Instruction sc.d is used instead now.

Bug: v8:14171
Change-Id: I32ae6f65caeb500f541b733dac74aacb752972b9
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4671891
Auto-Submit: 杨文明 <yangwenming@bytedance.com>
Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
Cr-Commit-Position: refs/heads/main@{#88855}
---
 .../riscv/liftoff-assembler-riscv64.h         |  2 +-
 test/mjsunit/mjsunit.status                   |  1 +
 test/mjsunit/regress/wasm/regress-14171.js    | 33 +++++++++++++++++++
 3 files changed, 35 insertions(+), 1 deletion(-)
 create mode 100644 test/mjsunit/regress/wasm/regress-14171.js

diff --git a/src/wasm/baseline/riscv/liftoff-assembler-riscv64.h b/src/wasm/baseline/riscv/liftoff-assembler-riscv64.h
index 0162b6e3b00..a9067a2ba80 100644
--- a/src/wasm/baseline/riscv/liftoff-assembler-riscv64.h
+++ b/src/wasm/baseline/riscv/liftoff-assembler-riscv64.h
@@ -436,7 +436,7 @@ inline void AtomicBinop(LiftoffAssembler* lasm, Register dst_addr,
       __ sc_w(false, true, store_result, actual_addr, temp);
       break;
     case StoreType::kI64Store:
-      __ sc_w(false, true, store_result, actual_addr, temp);
+      __ sc_d(false, true, store_result, actual_addr, temp);
       break;
     default:
       UNREACHABLE();
diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
index 5f38a239d92..dff06907000 100644
--- a/test/mjsunit/mjsunit.status
+++ b/test/mjsunit/mjsunit.status
@@ -974,6 +974,7 @@
 [ 'arch == riscv32' , {
 'wasm/compare-exchange64-stress':[SKIP],
 'regress/regress-crbug-781583':[SKIP],
+'regress/wasm/regress-14171':[SKIP],
 }], # 'arch == riscv32'
 
 ##############################################################################
diff --git a/test/mjsunit/regress/wasm/regress-14171.js b/test/mjsunit/regress/wasm/regress-14171.js
new file mode 100644
index 00000000000..04df63fc155
--- /dev/null
+++ b/test/mjsunit/regress/wasm/regress-14171.js
@@ -0,0 +1,33 @@
+// Copyright 2023 the V8 project authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// Flags: --liftoff --no-wasm-tier-up
+
+d8.file.execute('test/mjsunit/wasm/wasm-module-builder.js');
+
+(function () {
+  const builder = new WasmModuleBuilder();
+  builder.addImportedMemory("imports", "mem", 1);
+  builder.addType(makeSig([kWasmI32, kWasmI64], [kWasmI64]));
+  // Generate function 1 (out of 1).
+  builder.addFunction(undefined, 0 /* sig */).addBodyWithEnd([
+    kExprLocalGet, 0,
+    kExprLocalGet, 1,
+    kAtomicPrefix, kExprI64AtomicAdd, 0x03, 0x00,
+    kExprEnd
+  ]);
+  builder.addExport('atomicAddI64', 0);
+  var mem = new WebAssembly.Memory({ initial: 1 });
+
+  let i64arr = new BigUint64Array(mem.buffer);
+  i64arr[0] = 0n;
+  i64arr[1] = 0xffffffffn
+
+  const instance = builder.instantiate({ imports: { mem: mem } });
+  assertEquals(0n, instance.exports.atomicAddI64(0, 1n));
+  assertEquals(1n, instance.exports.atomicAddI64(0, 0n));
+
+  assertEquals(0xffffffffn, instance.exports.atomicAddI64(8, 1n));
+  assertEquals(0x100000000n, instance.exports.atomicAddI64(8, 0n));
+})();
-- 
2.35.1

