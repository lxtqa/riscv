From 56f5d5c23caa8169fde18c1b5f2370b283aed2cd Mon Sep 17 00:00:00 2001
From: Igor Sheludko <ishell@chromium.org>
Date: Wed, 1 Dec 2021 23:11:04 +0100
Subject: [PATCH] [ext-code-space] Rename InstructionStream to
 OffHeapInstructionStream

... as a prerequisite for adding InstructionStream heap object.

Bug: v8:11880
Change-Id: I22b4832cedd46bee4a4c5a0d7b5032eba10b2a7b
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3310900
Reviewed-by: Jakob Gruber <jgruber@chromium.org>
Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
Commit-Queue: Igor Sheludko <ishell@chromium.org>
Cr-Commit-Position: refs/heads/main@{#78204}
---
 src/builtins/builtins.cc                      |  4 ++--
 src/codegen/arm/macro-assembler-arm.cc        |  2 +-
 src/codegen/arm/macro-assembler-arm.h         |  2 +-
 src/codegen/arm64/macro-assembler-arm64.cc    |  2 +-
 src/codegen/arm64/macro-assembler-arm64.h     |  2 +-
 src/codegen/assembler.h                       |  2 +-
 src/codegen/ia32/macro-assembler-ia32.cc      |  2 +-
 src/codegen/ia32/macro-assembler-ia32.h       |  2 +-
 .../loong64/macro-assembler-loong64.cc        |  2 +-
 src/codegen/loong64/macro-assembler-loong64.h |  2 +-
 src/codegen/mips/macro-assembler-mips.cc      |  2 +-
 src/codegen/mips/macro-assembler-mips.h       |  2 +-
 src/codegen/mips64/macro-assembler-mips64.cc  |  2 +-
 src/codegen/mips64/macro-assembler-mips64.h   |  2 +-
 src/codegen/ppc/macro-assembler-ppc.cc        |  2 +-
 src/codegen/ppc/macro-assembler-ppc.h         |  2 +-
 src/codegen/reloc-info.cc                     |  2 +-
 .../riscv64/macro-assembler-riscv64.cc        |  2 +-
 src/codegen/riscv64/macro-assembler-riscv64.h |  2 +-
 src/codegen/s390/macro-assembler-s390.cc      |  2 +-
 src/codegen/s390/macro-assembler-s390.h       |  2 +-
 src/codegen/x64/macro-assembler-x64.cc        |  2 +-
 src/codegen/x64/macro-assembler-x64.h         |  2 +-
 src/debug/debug.cc                            |  2 +-
 src/deoptimizer/deoptimizer.cc                |  2 +-
 src/diagnostics/disassembler.cc               |  4 ++--
 src/diagnostics/objects-printer.cc            |  2 +-
 src/execution/frames.cc                       |  6 ++---
 src/execution/isolate.cc                      |  8 +++----
 src/heap/heap.cc                              |  5 ++--
 src/objects/code.cc                           |  3 ++-
 src/snapshot/embedded/embedded-data.cc        | 24 ++++++++-----------
 src/snapshot/embedded/embedded-data.h         | 17 +++++++------
 src/snapshot/serializer.cc                    |  2 +-
 src/wasm/jump-table-assembler.cc              |  4 ++--
 35 files changed, 64 insertions(+), 63 deletions(-)

diff --git a/src/builtins/builtins.cc b/src/builtins/builtins.cc
index d998a18166..561bca4307 100644
--- a/src/builtins/builtins.cc
+++ b/src/builtins/builtins.cc
@@ -107,7 +107,7 @@ void Builtins::TearDown() { initialized_ = false; }
 
 const char* Builtins::Lookup(Address pc) {
   // Off-heap pc's can be looked up through binary search.
-  Builtin builtin = InstructionStream::TryLookupCode(isolate_, pc);
+  Builtin builtin = OffHeapInstructionStream::TryLookupCode(isolate_, pc);
   if (Builtins::IsBuiltinId(builtin)) return name(builtin);
 
   // May be called during initialization (disassembler).
@@ -417,7 +417,7 @@ class OffHeapTrampolineGenerator {
       FrameScope scope(&masm_, StackFrame::NO_FRAME_TYPE);
       if (type == TrampolineType::kJump) {
         masm_.CodeEntry();
-        masm_.JumpToInstructionStream(off_heap_entry);
+        masm_.JumpToOffHeapInstructionStream(off_heap_entry);
       } else {
         DCHECK_EQ(type, TrampolineType::kAbort);
         masm_.Trap();
diff --git a/src/codegen/arm/macro-assembler-arm.cc b/src/codegen/arm/macro-assembler-arm.cc
index 5c46c64b3e..95eb8795e9 100644
--- a/src/codegen/arm/macro-assembler-arm.cc
+++ b/src/codegen/arm/macro-assembler-arm.cc
@@ -2022,7 +2022,7 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference& builtin,
   Jump(code, RelocInfo::CODE_TARGET);
 }
 
-void MacroAssembler::JumpToInstructionStream(Address entry) {
+void MacroAssembler::JumpToOffHeapInstructionStream(Address entry) {
   mov(kOffHeapTrampolineRegister, Operand(entry, RelocInfo::OFF_HEAP_TARGET));
   Jump(kOffHeapTrampolineRegister);
 }
diff --git a/src/codegen/arm/macro-assembler-arm.h b/src/codegen/arm/macro-assembler-arm.h
index 73efa12002..e43aec485f 100644
--- a/src/codegen/arm/macro-assembler-arm.h
+++ b/src/codegen/arm/macro-assembler-arm.h
@@ -800,7 +800,7 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
                                bool builtin_exit_frame = false);
 
   // Generates a trampoline to jump to the off-heap instruction stream.
-  void JumpToInstructionStream(Address entry);
+  void JumpToOffHeapInstructionStream(Address entry);
 
   // ---------------------------------------------------------------------------
   // In-place weak references.
diff --git a/src/codegen/arm64/macro-assembler-arm64.cc b/src/codegen/arm64/macro-assembler-arm64.cc
index bcf2e4574a..58920c343a 100644
--- a/src/codegen/arm64/macro-assembler-arm64.cc
+++ b/src/codegen/arm64/macro-assembler-arm64.cc
@@ -1655,7 +1655,7 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference& builtin,
   Jump(code, RelocInfo::CODE_TARGET);
 }
 
-void MacroAssembler::JumpToInstructionStream(Address entry) {
+void MacroAssembler::JumpToOffHeapInstructionStream(Address entry) {
   Ldr(kOffHeapTrampolineRegister, Operand(entry, RelocInfo::OFF_HEAP_TARGET));
   Br(kOffHeapTrampolineRegister);
 }
diff --git a/src/codegen/arm64/macro-assembler-arm64.h b/src/codegen/arm64/macro-assembler-arm64.h
index 165d702c31..7c972bd307 100644
--- a/src/codegen/arm64/macro-assembler-arm64.h
+++ b/src/codegen/arm64/macro-assembler-arm64.h
@@ -1911,7 +1911,7 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
                                bool builtin_exit_frame = false);
 
   // Generates a trampoline to jump to the off-heap instruction stream.
-  void JumpToInstructionStream(Address entry);
+  void JumpToOffHeapInstructionStream(Address entry);
 
   // Registers used through the invocation chain are hard-coded.
   // We force passing the parameters to ensure the contracts are correctly
diff --git a/src/codegen/assembler.h b/src/codegen/assembler.h
index 3dda71d7fc..6519520278 100644
--- a/src/codegen/assembler.h
+++ b/src/codegen/assembler.h
@@ -65,7 +65,7 @@ using base::WriteUnalignedValue;
 
 // Forward declarations.
 class EmbeddedData;
-class InstructionStream;
+class OffHeapInstructionStream;
 class Isolate;
 class SCTableReference;
 class SourcePosition;
diff --git a/src/codegen/ia32/macro-assembler-ia32.cc b/src/codegen/ia32/macro-assembler-ia32.cc
index 609b291e36..b4824736b9 100644
--- a/src/codegen/ia32/macro-assembler-ia32.cc
+++ b/src/codegen/ia32/macro-assembler-ia32.cc
@@ -1212,7 +1212,7 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference& ext,
   Jump(code, RelocInfo::CODE_TARGET);
 }
 
-void MacroAssembler::JumpToInstructionStream(Address entry) {
+void MacroAssembler::JumpToOffHeapInstructionStream(Address entry) {
   jmp(entry, RelocInfo::OFF_HEAP_TARGET);
 }
 
diff --git a/src/codegen/ia32/macro-assembler-ia32.h b/src/codegen/ia32/macro-assembler-ia32.h
index 89dd2dbcfd..e1b7e15363 100644
--- a/src/codegen/ia32/macro-assembler-ia32.h
+++ b/src/codegen/ia32/macro-assembler-ia32.h
@@ -622,7 +622,7 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
                                bool builtin_exit_frame = false);
 
   // Generates a trampoline to jump to the off-heap instruction stream.
-  void JumpToInstructionStream(Address entry);
+  void JumpToOffHeapInstructionStream(Address entry);
 
   // ---------------------------------------------------------------------------
   // Utilities
diff --git a/src/codegen/loong64/macro-assembler-loong64.cc b/src/codegen/loong64/macro-assembler-loong64.cc
index 5038891f18..9391db497b 100644
--- a/src/codegen/loong64/macro-assembler-loong64.cc
+++ b/src/codegen/loong64/macro-assembler-loong64.cc
@@ -3348,7 +3348,7 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference& builtin,
   Jump(code, RelocInfo::CODE_TARGET, al, zero_reg, Operand(zero_reg));
 }
 
-void MacroAssembler::JumpToInstructionStream(Address entry) {
+void MacroAssembler::JumpToOffHeapInstructionStream(Address entry) {
   li(kOffHeapTrampolineRegister, Operand(entry, RelocInfo::OFF_HEAP_TARGET));
   Jump(kOffHeapTrampolineRegister);
 }
diff --git a/src/codegen/loong64/macro-assembler-loong64.h b/src/codegen/loong64/macro-assembler-loong64.h
index 5d1474f0f4..3d82b87a47 100644
--- a/src/codegen/loong64/macro-assembler-loong64.h
+++ b/src/codegen/loong64/macro-assembler-loong64.h
@@ -963,7 +963,7 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
                                bool builtin_exit_frame = false);
 
   // Generates a trampoline to jump to the off-heap instruction stream.
-  void JumpToInstructionStream(Address entry);
+  void JumpToOffHeapInstructionStream(Address entry);
 
   // ---------------------------------------------------------------------------
   // In-place weak references.
diff --git a/src/codegen/mips/macro-assembler-mips.cc b/src/codegen/mips/macro-assembler-mips.cc
index 05ba98f04b..ea4639c37c 100644
--- a/src/codegen/mips/macro-assembler-mips.cc
+++ b/src/codegen/mips/macro-assembler-mips.cc
@@ -4704,7 +4704,7 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference& builtin,
   Jump(code, RelocInfo::CODE_TARGET, al, zero_reg, Operand(zero_reg), bd);
 }
 
-void MacroAssembler::JumpToInstructionStream(Address entry) {
+void MacroAssembler::JumpToOffHeapInstructionStream(Address entry) {
   li(kOffHeapTrampolineRegister, Operand(entry, RelocInfo::OFF_HEAP_TARGET));
   Jump(kOffHeapTrampolineRegister);
 }
diff --git a/src/codegen/mips/macro-assembler-mips.h b/src/codegen/mips/macro-assembler-mips.h
index ece4ec8b6f..f2491fcf19 100644
--- a/src/codegen/mips/macro-assembler-mips.h
+++ b/src/codegen/mips/macro-assembler-mips.h
@@ -1074,7 +1074,7 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
                                bool builtin_exit_frame = false);
 
   // Generates a trampoline to jump to the off-heap instruction stream.
-  void JumpToInstructionStream(Address entry);
+  void JumpToOffHeapInstructionStream(Address entry);
 
   // ---------------------------------------------------------------------------
   // In-place weak references.
diff --git a/src/codegen/mips64/macro-assembler-mips64.cc b/src/codegen/mips64/macro-assembler-mips64.cc
index 7699f11f1e..b27224b698 100644
--- a/src/codegen/mips64/macro-assembler-mips64.cc
+++ b/src/codegen/mips64/macro-assembler-mips64.cc
@@ -5233,7 +5233,7 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference& builtin,
   Jump(code, RelocInfo::CODE_TARGET, al, zero_reg, Operand(zero_reg), bd);
 }
 
-void MacroAssembler::JumpToInstructionStream(Address entry) {
+void MacroAssembler::JumpToOffHeapInstructionStream(Address entry) {
   li(kOffHeapTrampolineRegister, Operand(entry, RelocInfo::OFF_HEAP_TARGET));
   Jump(kOffHeapTrampolineRegister);
 }
diff --git a/src/codegen/mips64/macro-assembler-mips64.h b/src/codegen/mips64/macro-assembler-mips64.h
index 06ebd1c63a..bcb11adf69 100644
--- a/src/codegen/mips64/macro-assembler-mips64.h
+++ b/src/codegen/mips64/macro-assembler-mips64.h
@@ -1149,7 +1149,7 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
                                bool builtin_exit_frame = false);
 
   // Generates a trampoline to jump to the off-heap instruction stream.
-  void JumpToInstructionStream(Address entry);
+  void JumpToOffHeapInstructionStream(Address entry);
 
   // ---------------------------------------------------------------------------
   // In-place weak references.
diff --git a/src/codegen/ppc/macro-assembler-ppc.cc b/src/codegen/ppc/macro-assembler-ppc.cc
index d4de8ebac9..724cedc1c2 100644
--- a/src/codegen/ppc/macro-assembler-ppc.cc
+++ b/src/codegen/ppc/macro-assembler-ppc.cc
@@ -2020,7 +2020,7 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference& builtin,
   Jump(code, RelocInfo::CODE_TARGET);
 }
 
-void MacroAssembler::JumpToInstructionStream(Address entry) {
+void MacroAssembler::JumpToOffHeapInstructionStream(Address entry) {
   mov(kOffHeapTrampolineRegister, Operand(entry, RelocInfo::OFF_HEAP_TARGET));
   Jump(kOffHeapTrampolineRegister);
 }
diff --git a/src/codegen/ppc/macro-assembler-ppc.h b/src/codegen/ppc/macro-assembler-ppc.h
index 47cb1909a7..200015bd85 100644
--- a/src/codegen/ppc/macro-assembler-ppc.h
+++ b/src/codegen/ppc/macro-assembler-ppc.h
@@ -1261,7 +1261,7 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
                                bool builtin_exit_frame = false);
 
   // Generates a trampoline to jump to the off-heap instruction stream.
-  void JumpToInstructionStream(Address entry);
+  void JumpToOffHeapInstructionStream(Address entry);
 
   // ---------------------------------------------------------------------------
   // In-place weak references.
diff --git a/src/codegen/reloc-info.cc b/src/codegen/reloc-info.cc
index 4850cf8c03..6057eca4a1 100644
--- a/src/codegen/reloc-info.cc
+++ b/src/codegen/reloc-info.cc
@@ -522,7 +522,7 @@ void RelocInfo::Verify(Isolate* isolate) {
       Address addr = target_off_heap_target();
       CHECK_NE(addr, kNullAddress);
       CHECK(Builtins::IsBuiltinId(
-          InstructionStream::TryLookupCode(isolate, addr)));
+          OffHeapInstructionStream::TryLookupCode(isolate, addr)));
       break;
     }
     case RUNTIME_ENTRY:
diff --git a/src/codegen/riscv64/macro-assembler-riscv64.cc b/src/codegen/riscv64/macro-assembler-riscv64.cc
index d129cd08eb..ec302a8866 100644
--- a/src/codegen/riscv64/macro-assembler-riscv64.cc
+++ b/src/codegen/riscv64/macro-assembler-riscv64.cc
@@ -4155,7 +4155,7 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference& builtin,
   Jump(code, RelocInfo::CODE_TARGET, al, zero_reg, Operand(zero_reg));
 }
 
-void MacroAssembler::JumpToInstructionStream(Address entry) {
+void MacroAssembler::JumpToOffHeapInstructionStream(Address entry) {
   // Ld a Address from a constant pool.
   // Record a value into constant pool.
   if (!FLAG_riscv_constant_pool) {
diff --git a/src/codegen/riscv64/macro-assembler-riscv64.h b/src/codegen/riscv64/macro-assembler-riscv64.h
index b3a5309178..eb91fc986f 100644
--- a/src/codegen/riscv64/macro-assembler-riscv64.h
+++ b/src/codegen/riscv64/macro-assembler-riscv64.h
@@ -1195,7 +1195,7 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
                                bool builtin_exit_frame = false);
 
   // Generates a trampoline to jump to the off-heap instruction stream.
-  void JumpToInstructionStream(Address entry);
+  void JumpToOffHeapInstructionStream(Address entry);
 
   // ---------------------------------------------------------------------------
   // In-place weak references.
diff --git a/src/codegen/s390/macro-assembler-s390.cc b/src/codegen/s390/macro-assembler-s390.cc
index 5e7d209c07..7080e89eec 100644
--- a/src/codegen/s390/macro-assembler-s390.cc
+++ b/src/codegen/s390/macro-assembler-s390.cc
@@ -2024,7 +2024,7 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference& builtin,
   Jump(code, RelocInfo::CODE_TARGET);
 }
 
-void MacroAssembler::JumpToInstructionStream(Address entry) {
+void MacroAssembler::JumpToOffHeapInstructionStream(Address entry) {
   mov(kOffHeapTrampolineRegister, Operand(entry, RelocInfo::OFF_HEAP_TARGET));
   Jump(kOffHeapTrampolineRegister);
 }
diff --git a/src/codegen/s390/macro-assembler-s390.h b/src/codegen/s390/macro-assembler-s390.h
index 734e259243..aa2e0ef5b8 100644
--- a/src/codegen/s390/macro-assembler-s390.h
+++ b/src/codegen/s390/macro-assembler-s390.h
@@ -1353,7 +1353,7 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
                                bool builtin_exit_frame = false);
 
   // Generates a trampoline to jump to the off-heap instruction stream.
-  void JumpToInstructionStream(Address entry);
+  void JumpToOffHeapInstructionStream(Address entry);
 
   // Compare the object in a register to a value and jump if they are equal.
   void JumpIfRoot(Register with, RootIndex index, Label* if_equal) {
diff --git a/src/codegen/x64/macro-assembler-x64.cc b/src/codegen/x64/macro-assembler-x64.cc
index 6b8e8426b4..6ac8017ca8 100644
--- a/src/codegen/x64/macro-assembler-x64.cc
+++ b/src/codegen/x64/macro-assembler-x64.cc
@@ -1827,7 +1827,7 @@ void TurboAssembler::Jump(Handle<Code> code_object, RelocInfo::Mode rmode,
   j(cc, code_object, rmode);
 }
 
-void MacroAssembler::JumpToInstructionStream(Address entry) {
+void MacroAssembler::JumpToOffHeapInstructionStream(Address entry) {
   Move(kOffHeapTrampolineRegister, entry, RelocInfo::OFF_HEAP_TARGET);
   jmp(kOffHeapTrampolineRegister);
 }
diff --git a/src/codegen/x64/macro-assembler-x64.h b/src/codegen/x64/macro-assembler-x64.h
index 4a1ef3a5e0..262162ded0 100644
--- a/src/codegen/x64/macro-assembler-x64.h
+++ b/src/codegen/x64/macro-assembler-x64.h
@@ -775,7 +775,7 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
   void PopQuad(Operand dst);
 
   // Generates a trampoline to jump to the off-heap instruction stream.
-  void JumpToInstructionStream(Address entry);
+  void JumpToOffHeapInstructionStream(Address entry);
 
   // Compare object type for heap object.
   // Always use unsigned comparisons: above and below, not less and greater.
diff --git a/src/debug/debug.cc b/src/debug/debug.cc
index b657aa3535..4ea3bd3011 100644
--- a/src/debug/debug.cc
+++ b/src/debug/debug.cc
@@ -1330,7 +1330,7 @@ class DiscardBaselineCodeVisitor : public ThreadVisitor {
         // we deoptimized in the debugger and are stepping into it.
         JavaScriptFrame* frame = it.frame();
         Address pc = frame->pc();
-        Builtin builtin = InstructionStream::TryLookupCode(isolate, pc);
+        Builtin builtin = OffHeapInstructionStream::TryLookupCode(isolate, pc);
         if (builtin == Builtin::kBaselineOrInterpreterEnterAtBytecode ||
             builtin == Builtin::kBaselineOrInterpreterEnterAtNextBytecode) {
           Address* pc_addr = frame->pc_address();
diff --git a/src/deoptimizer/deoptimizer.cc b/src/deoptimizer/deoptimizer.cc
index 602d3d4d18..796dd072b3 100644
--- a/src/deoptimizer/deoptimizer.cc
+++ b/src/deoptimizer/deoptimizer.cc
@@ -656,7 +656,7 @@ Builtin Deoptimizer::GetDeoptimizationEntry(DeoptimizeKind kind) {
 
 bool Deoptimizer::IsDeoptimizationEntry(Isolate* isolate, Address addr,
                                         DeoptimizeKind* type_out) {
-  Builtin builtin = InstructionStream::TryLookupCode(isolate, addr);
+  Builtin builtin = OffHeapInstructionStream::TryLookupCode(isolate, addr);
   if (!Builtins::IsBuiltinId(builtin)) return false;
 
   switch (builtin) {
diff --git a/src/diagnostics/disassembler.cc b/src/diagnostics/disassembler.cc
index dca5437d16..81b5893226 100644
--- a/src/diagnostics/disassembler.cc
+++ b/src/diagnostics/disassembler.cc
@@ -302,8 +302,8 @@ static int DecodeIt(Isolate* isolate, ExternalReferenceEncoder* ref_encoder,
   CodeCommentsIterator cit(code.code_comments(), code.code_comments_size());
   // Relocation exists if we either have no isolate (wasm code),
   // or we have an isolate and it is not an off-heap instruction stream.
-  if (!isolate ||
-      !InstructionStream::PcIsOffHeap(isolate, bit_cast<Address>(begin))) {
+  if (!isolate || !OffHeapInstructionStream::PcIsOffHeap(
+                      isolate, bit_cast<Address>(begin))) {
     it = new RelocIterator(code);
   } else {
     // No relocation information when printing code stubs.
diff --git a/src/diagnostics/objects-printer.cc b/src/diagnostics/objects-printer.cc
index 10a8d4b97a..b15cb98dae 100644
--- a/src/diagnostics/objects-printer.cc
+++ b/src/diagnostics/objects-printer.cc
@@ -2811,7 +2811,7 @@ V8_EXPORT_PRIVATE extern void _v8_internal_Print_Code(void* object) {
 
   if (!isolate->heap()->InSpaceSlow(address, i::CODE_SPACE) &&
       !isolate->heap()->InSpaceSlow(address, i::CODE_LO_SPACE) &&
-      !i::InstructionStream::PcIsOffHeap(isolate, address) &&
+      !i::OffHeapInstructionStream::PcIsOffHeap(isolate, address) &&
       !i::ReadOnlyHeap::Contains(address)) {
     i::PrintF(
         "%p is not within the current isolate's code, read_only or embedded "
diff --git a/src/execution/frames.cc b/src/execution/frames.cc
index 931c9bfa04..97c7ed4993 100644
--- a/src/execution/frames.cc
+++ b/src/execution/frames.cc
@@ -249,7 +249,7 @@ namespace {
 
 bool IsInterpreterFramePc(Isolate* isolate, Address pc,
                           StackFrame::State* state) {
-  Builtin builtin = InstructionStream::TryLookupCode(isolate, pc);
+  Builtin builtin = OffHeapInstructionStream::TryLookupCode(isolate, pc);
   if (builtin != Builtin::kNoBuiltinId &&
       (builtin == Builtin::kInterpreterEntryTrampoline ||
        builtin == Builtin::kInterpreterEnterAtBytecode ||
@@ -2310,8 +2310,8 @@ namespace {
 // from the embedded builtins start or from respective MemoryChunk.
 uint32_t PcAddressForHashing(Isolate* isolate, Address address) {
   uint32_t hashable_address;
-  if (InstructionStream::TryGetAddressForHashing(isolate, address,
-                                                 &hashable_address)) {
+  if (OffHeapInstructionStream::TryGetAddressForHashing(isolate, address,
+                                                        &hashable_address)) {
     return hashable_address;
   }
   return ObjectAddressForHashing(address);
diff --git a/src/execution/isolate.cc b/src/execution/isolate.cc
index edb7626cc0..50dcd8f469 100644
--- a/src/execution/isolate.cc
+++ b/src/execution/isolate.cc
@@ -251,7 +251,7 @@ void FreeCurrentEmbeddedBlob() {
   CHECK_EQ(StickyEmbeddedBlobCode(), Isolate::CurrentEmbeddedBlobCode());
   CHECK_EQ(StickyEmbeddedBlobData(), Isolate::CurrentEmbeddedBlobData());
 
-  InstructionStream::FreeOffHeapInstructionStream(
+  OffHeapInstructionStream::FreeOffHeapOffHeapInstructionStream(
       const_cast<uint8_t*>(Isolate::CurrentEmbeddedBlobCode()),
       Isolate::CurrentEmbeddedBlobCodeSize(),
       const_cast<uint8_t*>(Isolate::CurrentEmbeddedBlobData()),
@@ -3545,8 +3545,8 @@ void Isolate::CreateAndSetEmbeddedBlob() {
     uint32_t code_size;
     uint8_t* data;
     uint32_t data_size;
-    InstructionStream::CreateOffHeapInstructionStream(this, &code, &code_size,
-                                                      &data, &data_size);
+    OffHeapInstructionStream::CreateOffHeapOffHeapInstructionStream(
+        this, &code, &code_size, &data, &data_size);
 
     CHECK_EQ(0, current_embedded_blob_refs_);
     const uint8_t* const_code = const_cast<const uint8_t*>(code);
@@ -3599,7 +3599,7 @@ void Isolate::TearDownEmbeddedBlob() {
   current_embedded_blob_refs_--;
   if (current_embedded_blob_refs_ == 0 && enable_embedded_blob_refcounting_) {
     // We own the embedded blob and are the last holder. Free it.
-    InstructionStream::FreeOffHeapInstructionStream(
+    OffHeapInstructionStream::FreeOffHeapOffHeapInstructionStream(
         const_cast<uint8_t*>(CurrentEmbeddedBlobCode()),
         embedded_blob_code_size(),
         const_cast<uint8_t*>(CurrentEmbeddedBlobData()),
diff --git a/src/heap/heap.cc b/src/heap/heap.cc
index 0a8b7e9a25..bb68cada18 100644
--- a/src/heap/heap.cc
+++ b/src/heap/heap.cc
@@ -7086,7 +7086,8 @@ Code Heap::GcSafeCastToCode(HeapObject object, Address inner_pointer) {
 bool Heap::GcSafeCodeContains(Code code, Address addr) {
   Map map = GcSafeMapOfCodeSpaceObject(code);
   DCHECK(map == ReadOnlyRoots(this).code_map());
-  Builtin maybe_builtin = InstructionStream::TryLookupCode(isolate(), addr);
+  Builtin maybe_builtin =
+      OffHeapInstructionStream::TryLookupCode(isolate(), addr);
   if (Builtins::IsBuiltinId(maybe_builtin) &&
       code.builtin_id() == maybe_builtin) {
     return true;
@@ -7098,7 +7099,7 @@ bool Heap::GcSafeCodeContains(Code code, Address addr) {
 
 Code Heap::GcSafeFindCodeForInnerPointer(Address inner_pointer) {
   Builtin maybe_builtin =
-      InstructionStream::TryLookupCode(isolate(), inner_pointer);
+      OffHeapInstructionStream::TryLookupCode(isolate(), inner_pointer);
   if (Builtins::IsBuiltinId(maybe_builtin)) {
     return isolate()->builtins()->code(maybe_builtin);
   }
diff --git a/src/objects/code.cc b/src/objects/code.cc
index 68ea3c8eca..328b3cae7c 100644
--- a/src/objects/code.cc
+++ b/src/objects/code.cc
@@ -332,7 +332,8 @@ bool Code::IsIsolateIndependent(Isolate* isolate) {
     // thus process-independent. See also: FinalizeEmbeddedCodeTargets.
     if (RelocInfo::IsCodeTargetMode(it.rinfo()->rmode())) {
       Address target_address = it.rinfo()->target_address();
-      if (InstructionStream::PcIsOffHeap(isolate, target_address)) continue;
+      if (OffHeapInstructionStream::PcIsOffHeap(isolate, target_address))
+        continue;
 
       Code target = Code::GetCodeFromTargetAddress(target_address);
       CHECK(target.IsCode());
diff --git a/src/snapshot/embedded/embedded-data.cc b/src/snapshot/embedded/embedded-data.cc
index 188ed6e879..96aa057bb6 100644
--- a/src/snapshot/embedded/embedded-data.cc
+++ b/src/snapshot/embedded/embedded-data.cc
@@ -49,7 +49,7 @@ Builtin TryLookupCode(const EmbeddedData& d, Address address) {
 }  // namespace
 
 // static
-bool InstructionStream::PcIsOffHeap(Isolate* isolate, Address pc) {
+bool OffHeapInstructionStream::PcIsOffHeap(Isolate* isolate, Address pc) {
   // Mksnapshot calls this while the embedded blob is not available yet.
   if (isolate->embedded_blob_code() == nullptr) return false;
   DCHECK_NOT_NULL(Isolate::CurrentEmbeddedBlobCode());
@@ -60,9 +60,8 @@ bool InstructionStream::PcIsOffHeap(Isolate* isolate, Address pc) {
 }
 
 // static
-bool InstructionStream::TryGetAddressForHashing(Isolate* isolate,
-                                                Address address,
-                                                uint32_t* hashable_address) {
+bool OffHeapInstructionStream::TryGetAddressForHashing(
+    Isolate* isolate, Address address, uint32_t* hashable_address) {
   // Mksnapshot calls this while the embedded blob is not available yet.
   if (isolate->embedded_blob_code() == nullptr) return false;
   DCHECK_NOT_NULL(Isolate::CurrentEmbeddedBlobCode());
@@ -84,7 +83,8 @@ bool InstructionStream::TryGetAddressForHashing(Isolate* isolate,
 }
 
 // static
-Builtin InstructionStream::TryLookupCode(Isolate* isolate, Address address) {
+Builtin OffHeapInstructionStream::TryLookupCode(Isolate* isolate,
+                                                Address address) {
   // Mksnapshot calls this while the embedded blob is not available yet.
   if (isolate->embedded_blob_code() == nullptr) return Builtin::kNoBuiltinId;
   DCHECK_NOT_NULL(Isolate::CurrentEmbeddedBlobCode());
@@ -99,11 +99,9 @@ Builtin InstructionStream::TryLookupCode(Isolate* isolate, Address address) {
 }
 
 // static
-void InstructionStream::CreateOffHeapInstructionStream(Isolate* isolate,
-                                                       uint8_t** code,
-                                                       uint32_t* code_size,
-                                                       uint8_t** data,
-                                                       uint32_t* data_size) {
+void OffHeapInstructionStream::CreateOffHeapOffHeapInstructionStream(
+    Isolate* isolate, uint8_t** code, uint32_t* code_size, uint8_t** data,
+    uint32_t* data_size) {
   // Create the embedded blob from scratch using the current Isolate's heap.
   EmbeddedData d = EmbeddedData::FromIsolate(isolate);
 
@@ -158,10 +156,8 @@ void InstructionStream::CreateOffHeapInstructionStream(Isolate* isolate,
 }
 
 // static
-void InstructionStream::FreeOffHeapInstructionStream(uint8_t* code,
-                                                     uint32_t code_size,
-                                                     uint8_t* data,
-                                                     uint32_t data_size) {
+void OffHeapInstructionStream::FreeOffHeapOffHeapInstructionStream(
+    uint8_t* code, uint32_t code_size, uint8_t* data, uint32_t data_size) {
   v8::PageAllocator* page_allocator = v8::internal::GetPlatformPageAllocator();
   const uint32_t page_size =
       static_cast<uint32_t>(page_allocator->AllocatePageSize());
diff --git a/src/snapshot/embedded/embedded-data.h b/src/snapshot/embedded/embedded-data.h
index 9ccacea24c..afe5eed2f7 100644
--- a/src/snapshot/embedded/embedded-data.h
+++ b/src/snapshot/embedded/embedded-data.h
@@ -19,7 +19,7 @@ class Isolate;
 
 // Wraps an off-heap instruction stream.
 // TODO(jgruber,v8:6666): Remove this class.
-class InstructionStream final : public AllStatic {
+class OffHeapInstructionStream final : public AllStatic {
  public:
   // Returns true, iff the given pc points into an off-heap instruction stream.
   static bool PcIsOffHeap(Isolate* isolate, Address pc);
@@ -38,12 +38,15 @@ class InstructionStream final : public AllStatic {
   // containing all off-heap code. The area is guaranteed to be contiguous.
   // Note that this only applies when building the snapshot, e.g. for
   // mksnapshot. Otherwise, off-heap code is embedded directly into the binary.
-  static void CreateOffHeapInstructionStream(Isolate* isolate, uint8_t** code,
-                                             uint32_t* code_size,
-                                             uint8_t** data,
-                                             uint32_t* data_size);
-  static void FreeOffHeapInstructionStream(uint8_t* code, uint32_t code_size,
-                                           uint8_t* data, uint32_t data_size);
+  static void CreateOffHeapOffHeapInstructionStream(Isolate* isolate,
+                                                    uint8_t** code,
+                                                    uint32_t* code_size,
+                                                    uint8_t** data,
+                                                    uint32_t* data_size);
+  static void FreeOffHeapOffHeapInstructionStream(uint8_t* code,
+                                                  uint32_t code_size,
+                                                  uint8_t* data,
+                                                  uint32_t data_size);
 };
 
 class EmbeddedData final {
diff --git a/src/snapshot/serializer.cc b/src/snapshot/serializer.cc
index fcfddb5614..478bea4d8c 100644
--- a/src/snapshot/serializer.cc
+++ b/src/snapshot/serializer.cc
@@ -1049,7 +1049,7 @@ void Serializer::ObjectSerializer::VisitOffHeapTarget(Code host,
   Address addr = rinfo->target_off_heap_target();
   CHECK_NE(kNullAddress, addr);
 
-  Builtin builtin = InstructionStream::TryLookupCode(isolate(), addr);
+  Builtin builtin = OffHeapInstructionStream::TryLookupCode(isolate(), addr);
   CHECK(Builtins::IsBuiltinId(builtin));
   CHECK(Builtins::IsIsolateIndependent(builtin));
 
diff --git a/src/wasm/jump-table-assembler.cc b/src/wasm/jump-table-assembler.cc
index 92098439be..ef79c55f1c 100644
--- a/src/wasm/jump-table-assembler.cc
+++ b/src/wasm/jump-table-assembler.cc
@@ -266,7 +266,7 @@ bool JumpTableAssembler::EmitJumpSlot(Address target) {
 }
 
 void JumpTableAssembler::EmitFarJumpSlot(Address target) {
-  JumpToInstructionStream(target);
+  JumpToOffHeapInstructionStream(target);
 }
 
 // static
@@ -299,7 +299,7 @@ bool JumpTableAssembler::EmitJumpSlot(Address target) {
   return true;
 }
 void JumpTableAssembler::EmitFarJumpSlot(Address target) {
-  JumpToInstructionStream(target);
+  JumpToOffHeapInstructionStream(target);
 }
 void JumpTableAssembler::PatchFarJumpSlot(Address slot, Address target) {
   UNREACHABLE();
-- 
2.35.1

