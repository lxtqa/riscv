From 718030c479236dd95c3e4b3a2cb066e0edb50d9a Mon Sep 17 00:00:00 2001
From: Leszek Swirski <leszeks@chromium.org>
Date: Fri, 23 Apr 2021 16:01:54 +0200
Subject: [PATCH] [sparkplug] Remove context param from some baseline builtins

Remove a couple of cases where builtins called by the baseline code
needed a context parameter, either because the interface descriptor
accidentally included the context, or by adding a trivial context load
from the frame where appropriate.

Bug: v8:11420
Change-Id: I3f34cd452f42dd876255375ae357feb245c78cdc
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/2848464
Auto-Submit: Leszek Swirski <leszeks@chromium.org>
Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
Reviewed-by: Camillo Bruni <cbruni@chromium.org>
Commit-Queue: Camillo Bruni <cbruni@chromium.org>
Cr-Commit-Position: refs/heads/master@{#74227}
---
 src/baseline/baseline-compiler.cc         |  9 ++++-----
 src/builtins/arm/builtins-arm.cc          |  2 ++
 src/builtins/arm64/builtins-arm64.cc      |  2 ++
 src/builtins/builtins-definitions.h       |  2 +-
 src/builtins/builtins-generator-gen.cc    |  2 +-
 src/builtins/constructor.tq               | 11 +++++++++++
 src/builtins/conversion.tq                |  2 +-
 src/builtins/ia32/builtins-ia32.cc        |  2 ++
 src/builtins/iterator.tq                  |  4 ++--
 src/builtins/riscv64/builtins-riscv64.cc  |  2 ++
 src/builtins/x64/builtins-x64.cc          |  2 ++
 src/codegen/interface-descriptors.h       | 22 ++++++++++++++--------
 src/compiler/effect-control-linearizer.cc |  3 +--
 13 files changed, 45 insertions(+), 20 deletions(-)

diff --git a/src/baseline/baseline-compiler.cc b/src/baseline/baseline-compiler.cc
index 525934c8908..ca1966b5450 100644
--- a/src/baseline/baseline-compiler.cc
+++ b/src/baseline/baseline-compiler.cc
@@ -1858,17 +1858,16 @@ void BaselineCompiler::VisitGetTemplateObject() {
 }
 
 void BaselineCompiler::VisitCreateClosure() {
-  using Descriptor =
-      CallInterfaceDescriptorFor<Builtins::kFastNewClosure>::type;
   Register feedback_cell =
-      Descriptor::GetRegisterParameter(Descriptor::kFeedbackCell);
+      FastNewClosureBaselineDescriptor::GetRegisterParameter(
+          FastNewClosureBaselineDescriptor::kFeedbackCell);
   LoadClosureFeedbackArray(feedback_cell);
   __ LoadFixedArrayElement(feedback_cell, feedback_cell, Index(1));
 
   uint32_t flags = Flag(2);
   if (interpreter::CreateClosureFlags::FastNewClosureBit::decode(flags)) {
-    CallBuiltin<Builtins::kFastNewClosure>(Constant<SharedFunctionInfo>(0),
-                                           feedback_cell);
+    CallBuiltin<Builtins::kFastNewClosureBaseline>(
+        Constant<SharedFunctionInfo>(0), feedback_cell);
   } else {
     Runtime::FunctionId function_id =
         interpreter::CreateClosureFlags::PretenuredBit::decode(flags)
diff --git a/src/builtins/arm/builtins-arm.cc b/src/builtins/arm/builtins-arm.cc
index fe334ead59c..68cbd0d7334 100644
--- a/src/builtins/arm/builtins-arm.cc
+++ b/src/builtins/arm/builtins-arm.cc
@@ -1842,6 +1842,8 @@ void Builtins::Generate_InterpreterOnStackReplacement(MacroAssembler* masm) {
 }
 
 void Builtins::Generate_BaselineOnStackReplacement(MacroAssembler* masm) {
+  __ ldr(kContextRegister,
+         MemOperand(fp, BaselineFrameConstants::kContextOffset));
   return OnStackReplacement(masm, false);
 }
 
diff --git a/src/builtins/arm64/builtins-arm64.cc b/src/builtins/arm64/builtins-arm64.cc
index 2bd6b8ea472..9ace3f953b7 100644
--- a/src/builtins/arm64/builtins-arm64.cc
+++ b/src/builtins/arm64/builtins-arm64.cc
@@ -2089,6 +2089,8 @@ void Builtins::Generate_InterpreterOnStackReplacement(MacroAssembler* masm) {
 }
 
 void Builtins::Generate_BaselineOnStackReplacement(MacroAssembler* masm) {
+  __ ldr(kContextRegister,
+         MemOperand(fp, BaselineFrameConstants::kContextOffset));
   return OnStackReplacement(masm, false);
 }
 
diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h
index c03ab8f2983..cea64d138b7 100644
--- a/src/builtins/builtins-definitions.h
+++ b/src/builtins/builtins-definitions.h
@@ -139,7 +139,7 @@ namespace internal {
                                                                                \
   /* Baseline Compiler */                                                      \
   ASM(BaselineOutOfLinePrologue, BaselineOutOfLinePrologue)                    \
-  ASM(BaselineOnStackReplacement, ContextOnly)                                 \
+  ASM(BaselineOnStackReplacement, Void)                                        \
   ASM(BaselineLeaveFrame, BaselineLeaveFrame)                                  \
   ASM(BaselineEnterAtBytecode, Void)                                           \
   ASM(BaselineEnterAtNextBytecode, Void)                                       \
diff --git a/src/builtins/builtins-generator-gen.cc b/src/builtins/builtins-generator-gen.cc
index 2e9d7e24e4f..b2d6e223e16 100644
--- a/src/builtins/builtins-generator-gen.cc
+++ b/src/builtins/builtins-generator-gen.cc
@@ -205,7 +205,7 @@ TF_BUILTIN(GeneratorPrototypeThrow, GeneratorBuiltinsAssembler) {
 // TODO(cbruni): Merge with corresponding bytecode handler.
 TF_BUILTIN(SuspendGeneratorBaseline, GeneratorBuiltinsAssembler) {
   auto generator = Parameter<JSGeneratorObject>(Descriptor::kGeneratorObject);
-  auto context = Parameter<Context>(Descriptor::kContext);
+  auto context = LoadContextFromBaseline();
   StoreJSGeneratorObjectContext(generator, context);
   auto suspend_id = SmiTag(UncheckedParameter<IntPtrT>(Descriptor::kSuspendId));
   StoreJSGeneratorObjectContinuation(generator, suspend_id);
diff --git a/src/builtins/constructor.tq b/src/builtins/constructor.tq
index add6db03052..d929c7f485f 100644
--- a/src/builtins/constructor.tq
+++ b/src/builtins/constructor.tq
@@ -15,6 +15,8 @@ extern runtime CreateObjectLiteral(
 
 namespace constructor {
 
+extern builtin FastNewClosure(
+    Context, SharedFunctionInfo, FeedbackCell): JSFunction;
 extern builtin FastNewObject(Context, JSFunction, JSReceiver): JSObject;
 
 extern enum AllocationSiteMode {
@@ -42,6 +44,15 @@ extern macro ConstructorBuiltinsAssembler::CreateShallowObjectLiteral(
 extern macro ConstructorBuiltinsAssembler::CreateEmptyObjectLiteral(Context):
     JSObject;
 
+extern macro LoadContextFromBaseline(): Context;
+
+builtin FastNewClosureBaseline(
+    sharedFunctionInfo: SharedFunctionInfo,
+    feedbackCell: FeedbackCell): JSFunction {
+  const context = LoadContextFromBaseline();
+  tail FastNewClosure(context, sharedFunctionInfo, feedbackCell);
+}
+
 builtin FastNewFunctionContextEval(implicit context: Context)(
     scopeInfo: ScopeInfo, slots: uint32): Context {
   return FastNewFunctionContext(scopeInfo, slots, context, kEvalScope);
diff --git a/src/builtins/conversion.tq b/src/builtins/conversion.tq
index 5a2dccd068c..e8f996557b2 100644
--- a/src/builtins/conversion.tq
+++ b/src/builtins/conversion.tq
@@ -45,7 +45,7 @@ builtin NumberToString(implicit context: Context)(input: Number): String {
 }
 
 // ES6 section 7.1.2 ToBoolean ( argument )
-builtin ToBoolean(implicit context: Context)(input: JSAny): Boolean {
+builtin ToBoolean(input: JSAny): Boolean {
   BranchIfToBooleanIsTrue(input) otherwise return TrueConstant(),
       return FalseConstant();
 }
diff --git a/src/builtins/ia32/builtins-ia32.cc b/src/builtins/ia32/builtins-ia32.cc
index 72b6a0873ed..27c65d435d4 100644
--- a/src/builtins/ia32/builtins-ia32.cc
+++ b/src/builtins/ia32/builtins-ia32.cc
@@ -2790,6 +2790,8 @@ void Builtins::Generate_InterpreterOnStackReplacement(MacroAssembler* masm) {
 }
 
 void Builtins::Generate_BaselineOnStackReplacement(MacroAssembler* masm) {
+  __ mov(kContextRegister,
+         MemOperand(ebp, BaselineFrameConstants::kContextOffset));
   return OnStackReplacement(masm, false);
 }
 
diff --git a/src/builtins/iterator.tq b/src/builtins/iterator.tq
index 05993ea6d77..99d1003eecf 100644
--- a/src/builtins/iterator.tq
+++ b/src/builtins/iterator.tq
@@ -78,8 +78,8 @@ extern macro LoadContextFromBaseline(): Context;
 extern macro LoadFeedbackVectorFromBaseline(): FeedbackVector;
 
 transitioning builtin GetIteratorBaseline(
-    context: Context, receiver: JSAny, loadSlot: TaggedIndex,
-    callSlot: TaggedIndex): JSAny {
+    receiver: JSAny, loadSlot: TaggedIndex, callSlot: TaggedIndex): JSAny {
+  const context: Context = LoadContextFromBaseline();
   const feedback: FeedbackVector = LoadFeedbackVectorFromBaseline();
   const iteratorMethod: JSAny =
       LoadIC(context, receiver, IteratorSymbolConstant(), loadSlot, feedback);
diff --git a/src/builtins/riscv64/builtins-riscv64.cc b/src/builtins/riscv64/builtins-riscv64.cc
index ae99355eee4..9159b2e1ca0 100644
--- a/src/builtins/riscv64/builtins-riscv64.cc
+++ b/src/builtins/riscv64/builtins-riscv64.cc
@@ -1814,6 +1814,8 @@ void Builtins::Generate_InterpreterOnStackReplacement(MacroAssembler* masm) {
 }
 
 void Builtins::Generate_BaselineOnStackReplacement(MacroAssembler* masm) {
+  __ Ld(kContextRegister,
+        MemOperand(fp, StandardFrameConstants::kContextOffset));
   return OnStackReplacement(masm, false);
 }
 
diff --git a/src/builtins/x64/builtins-x64.cc b/src/builtins/x64/builtins-x64.cc
index 5c3d7cd9645..37476aa93d9 100644
--- a/src/builtins/x64/builtins-x64.cc
+++ b/src/builtins/x64/builtins-x64.cc
@@ -2685,6 +2685,8 @@ void Builtins::Generate_InterpreterOnStackReplacement(MacroAssembler* masm) {
 }
 
 void Builtins::Generate_BaselineOnStackReplacement(MacroAssembler* masm) {
+  __ movq(kContextRegister,
+          MemOperand(rbp, BaselineFrameConstants::kContextOffset));
   return OnStackReplacement(masm, false);
 }
 
diff --git a/src/codegen/interface-descriptors.h b/src/codegen/interface-descriptors.h
index c788678e028..4f3d0db5909 100644
--- a/src/codegen/interface-descriptors.h
+++ b/src/codegen/interface-descriptors.h
@@ -572,6 +572,12 @@ constexpr EmptyRegisterArray RegisterArray() { return {}; }
   static constexpr StackArgumentOrder kStackArgumentOrder = \
       StackArgumentOrder::kJS;
 
+#define DEFINE_PARAMETERS_NO_CONTEXT_VARARGS(...)           \
+  DEFINE_PARAMETERS_NO_CONTEXT(__VA_ARGS__)                 \
+  static constexpr bool kAllowVarArgs = true;               \
+  static constexpr StackArgumentOrder kStackArgumentOrder = \
+      StackArgumentOrder::kJS;
+
 #define DEFINE_RESULT_AND_PARAMETERS_NO_CONTEXT(return_count, ...) \
   DEFINE_RESULT_AND_PARAMETERS(return_count, ##__VA_ARGS__)        \
   static constexpr bool kNoContext = true;
@@ -807,7 +813,7 @@ class StoreDescriptor : public StaticCallInterfaceDescriptor<StoreDescriptor> {
 };
 
 class StoreBaselineDescriptor
-    : public StaticCallInterfaceDescriptor<StoreDescriptor> {
+    : public StaticCallInterfaceDescriptor<StoreBaselineDescriptor> {
  public:
   DEFINE_PARAMETERS_NO_CONTEXT(kReceiver, kName, kValue, kSlot)
   DEFINE_PARAMETER_TYPES(MachineType::AnyTagged(),     // kReceiver
@@ -1158,7 +1164,7 @@ class CallWithSpreadDescriptor
 class CallWithSpread_BaselineDescriptor
     : public StaticCallInterfaceDescriptor<CallWithSpread_BaselineDescriptor> {
  public:
-  DEFINE_PARAMETERS_VARARGS(kTarget, kArgumentsCount, kSpread, kSlot)
+  DEFINE_PARAMETERS_NO_CONTEXT_VARARGS(kTarget, kArgumentsCount, kSpread, kSlot)
   DEFINE_PARAMETER_TYPES(MachineType::AnyTagged(),  // kTarget
                          MachineType::Int32(),      // kArgumentsCount
                          MachineType::AnyTagged(),  // kSpread
@@ -1241,7 +1247,7 @@ class ConstructWithSpread_BaselineDescriptor
  public:
   // Note: kSlot comes before kSpread since as an untagged value it must be
   // passed in a register.
-  DEFINE_JS_PARAMETERS(kSlot, kSpread)
+  DEFINE_JS_PARAMETERS_NO_CONTEXT(kSlot, kSpread)
   DEFINE_JS_PARAMETER_TYPES(MachineType::UintPtr(),    // kSlot
                             MachineType::AnyTagged())  // kSpread
   DECLARE_DESCRIPTOR(ConstructWithSpread_BaselineDescriptor)
@@ -1661,7 +1667,7 @@ class ResumeGeneratorDescriptor final
 class ResumeGeneratorBaselineDescriptor final
     : public StaticCallInterfaceDescriptor<ResumeGeneratorBaselineDescriptor> {
  public:
-  DEFINE_PARAMETERS(kGeneratorObject, kRegisterCount)
+  DEFINE_PARAMETERS_NO_CONTEXT(kGeneratorObject, kRegisterCount)
   DEFINE_RESULT_AND_PARAMETER_TYPES(
       MachineType::TaggedSigned(),  // return type
       MachineType::AnyTagged(),     // kGeneratorObject
@@ -1673,8 +1679,8 @@ class ResumeGeneratorBaselineDescriptor final
 class SuspendGeneratorBaselineDescriptor final
     : public StaticCallInterfaceDescriptor<SuspendGeneratorBaselineDescriptor> {
  public:
-  DEFINE_PARAMETERS(kGeneratorObject, kSuspendId, kBytecodeOffset,
-                    kRegisterCount)
+  DEFINE_PARAMETERS_NO_CONTEXT(kGeneratorObject, kSuspendId, kBytecodeOffset,
+                               kRegisterCount)
   DEFINE_PARAMETER_TYPES(MachineType::AnyTagged(),  // kGeneratorObject
                          MachineType::IntPtr(),     // kSuspendId
                          MachineType::IntPtr(),     // kBytecodeOffset
@@ -1847,7 +1853,7 @@ class BinaryOp_WithFeedbackDescriptor
 class CallTrampoline_BaselineDescriptor
     : public StaticCallInterfaceDescriptor<CallTrampoline_BaselineDescriptor> {
  public:
-  DEFINE_PARAMETERS_VARARGS(kFunction, kActualArgumentsCount, kSlot)
+  DEFINE_PARAMETERS_NO_CONTEXT_VARARGS(kFunction, kActualArgumentsCount, kSlot)
   DEFINE_PARAMETER_TYPES(MachineType::AnyTagged(),  // kFunction
                          MachineType::Int32(),      // kActualArgumentsCount
                          MachineType::UintPtr())    // kSlot
@@ -1921,7 +1927,7 @@ class UnaryOp_WithFeedbackDescriptor
 class UnaryOp_BaselineDescriptor
     : public StaticCallInterfaceDescriptor<UnaryOp_BaselineDescriptor> {
  public:
-  DEFINE_PARAMETERS(kValue, kSlot)
+  DEFINE_PARAMETERS_NO_CONTEXT(kValue, kSlot)
   DEFINE_PARAMETER_TYPES(MachineType::AnyTagged(),  // kValue
                          MachineType::UintPtr())    // kSlot
   DECLARE_DESCRIPTOR(UnaryOp_BaselineDescriptor)
diff --git a/src/compiler/effect-control-linearizer.cc b/src/compiler/effect-control-linearizer.cc
index 2924cda00fe..ec50c82eae8 100644
--- a/src/compiler/effect-control-linearizer.cc
+++ b/src/compiler/effect-control-linearizer.cc
@@ -3669,8 +3669,7 @@ Node* EffectControlLinearizer::LowerToBoolean(Node* node) {
   auto call_descriptor = Linkage::GetStubCallDescriptor(
       graph()->zone(), callable.descriptor(),
       callable.descriptor().GetStackParameterCount(), flags, properties);
-  return __ Call(call_descriptor, __ HeapConstant(callable.code()), obj,
-                 __ NoContextConstant());
+  return __ Call(call_descriptor, __ HeapConstant(callable.code()), obj);
 }
 
 Node* EffectControlLinearizer::LowerArgumentsLength(Node* node) {
-- 
2.35.1

