From 1e6775a539a3b88b25cc0ffdb52529c68aad2be8 Mon Sep 17 00:00:00 2001
From: Lu Yahan <yahan@iscas.ac.cn>
Date: Thu, 9 Mar 2023 17:46:00 +0800
Subject: [PATCH] [riscv][cleanup] Remove unused code for relocation

Change-Id: Ibdeacccc2168a8e42afce0b0110476a39a382bb5
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4321798
Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#86363}
---
 src/codegen/riscv/assembler-riscv.cc       | 4 +---
 src/codegen/riscv/macro-assembler-riscv.cc | 6 ------
 2 files changed, 1 insertion(+), 9 deletions(-)

diff --git a/src/codegen/riscv/assembler-riscv.cc b/src/codegen/riscv/assembler-riscv.cc
index add788ebe9..329c31c793 100644
--- a/src/codegen/riscv/assembler-riscv.cc
+++ b/src/codegen/riscv/assembler-riscv.cc
@@ -133,10 +133,8 @@ Register ToRegister(int num) {
 
 const int RelocInfo::kApplyMask =
     RelocInfo::ModeMask(RelocInfo::INTERNAL_REFERENCE) |
-    RelocInfo::ModeMask(RelocInfo::NEAR_BUILTIN_ENTRY) |
     RelocInfo::ModeMask(RelocInfo::INTERNAL_REFERENCE_ENCODED) |
-    RelocInfo::ModeMask(RelocInfo::RELATIVE_CODE_TARGET) |
-    RelocInfo::ModeMask(RelocInfo::CODE_TARGET);
+    RelocInfo::ModeMask(RelocInfo::RELATIVE_CODE_TARGET);
 
 bool RelocInfo::IsCodedSpecially() {
   // The deserializer needs to know whether a pointer is specially coded.  Being
diff --git a/src/codegen/riscv/macro-assembler-riscv.cc b/src/codegen/riscv/macro-assembler-riscv.cc
index 15fae5443c..7a54469c61 100644
--- a/src/codegen/riscv/macro-assembler-riscv.cc
+++ b/src/codegen/riscv/macro-assembler-riscv.cc
@@ -4309,9 +4309,6 @@ void MacroAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode,
   } else {
     Jump(code.address(), rmode, cond);
   }
-
-  int32_t target_index = AddCodeTarget(code);
-  Jump(static_cast<intptr_t>(target_index), rmode, cond, rs, rt);
 }
 
 void MacroAssembler::Jump(const ExternalReference& reference) {
@@ -4382,9 +4379,6 @@ void MacroAssembler::Call(Handle<Code> code, RelocInfo::Mode rmode,
   } else {
     Call(code.address(), rmode);
   }
-
-  // int32_t target_index = AddCodeTarget(code);
-  // Call(static_cast<Address>(target_index), rmode, cond, rs, rt);
 }
 
 void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin) {
-- 
2.35.1

