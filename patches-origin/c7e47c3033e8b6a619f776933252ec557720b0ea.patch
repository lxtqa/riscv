From c7e47c3033e8b6a619f776933252ec557720b0ea Mon Sep 17 00:00:00 2001
From: Jakob Gruber <jgruber@chromium.org>
Date: Wed, 23 Feb 2022 14:29:51 +0100
Subject: [PATCH] [safepoints] Various refactors

A collection of smallish cleanups and improvements for safepoints.

Maintainability:
- The class names were not very clear; move Safepoint inside
  SafepointTableBuilder to clarify that this wrapper class is used
  during codegen.
- Rename DefinePointerSlot/DefineRegister to
  DefineTaggedStackSlot/DefineTaggedRegister for clarity.
- Use named constants instead of -1.
- DefineTaggedRegister has no connection to kNoDeoptIndex, remove
  the DCHECK and comment.
- Remove the unused kNumSafepointRegisters constant + other dead code.
- Small clarifications in CommonFrame::IterateCompiledFrame.
- Rename has_safepoint_info to uses_safepoint_table and refactor s.t.
  `stack_slots` can be used when `uses_safepoint_table == false`. In
  this case it just returns 0.

Perf:
- During codegen, represent stack slots as a growable bit vector
  instead of a list of int indices. Extend GrowableBitVector
  functionality to support the above.
- Track the minimum index instead of iterating all stack slots in
  all safepoints before encoding.

Bug: v8:7700
Change-Id: If409bc42c825d47fc0074fce51e3b963fd080806
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3483659
Reviewed-by: Clemens Backes <clemensb@chromium.org>
Commit-Queue: Jakob Gruber <jgruber@chromium.org>
Cr-Commit-Position: refs/heads/main@{#79233}
---
 src/codegen/arm/assembler-arm.cc              |   2 +-
 src/codegen/arm64/assembler-arm64.cc          |   2 +-
 src/codegen/ia32/assembler-ia32.cc            |   2 +-
 src/codegen/ia32/macro-assembler-ia32.cc      |   8 --
 src/codegen/ia32/macro-assembler-ia32.h       |  11 --
 src/codegen/ia32/register-ia32.h              |   3 -
 src/codegen/loong64/assembler-loong64.cc      |   2 +-
 src/codegen/mips/assembler-mips.cc            |   2 +-
 src/codegen/mips64/assembler-mips64.cc        |   2 +-
 src/codegen/ppc/assembler-ppc.cc              |   2 +-
 src/codegen/riscv64/assembler-riscv64.cc      |   2 +-
 src/codegen/s390/assembler-s390.cc            |   2 +-
 src/codegen/safepoint-table.cc                |  75 +++++------
 src/codegen/safepoint-table.h                 | 127 +++++++++++-------
 src/codegen/x64/assembler-x64.cc              |   2 +-
 src/codegen/x64/register-x64.h                |   3 -
 src/compiler/backend/code-generator.cc        |   4 +-
 src/compiler/backend/code-generator.h         |   3 +-
 src/compiler/pipeline.cc                      |   4 +-
 src/execution/frames.cc                       |  17 ++-
 src/heap/factory.cc                           |   5 +-
 src/objects/code-inl.h                        |  10 +-
 src/objects/code.cc                           |   2 +-
 src/objects/code.h                            |   8 +-
 src/utils/bit-vector.h                        |  12 +-
 src/wasm/baseline/arm/liftoff-assembler-arm.h |   9 +-
 .../baseline/arm64/liftoff-assembler-arm64.h  |   9 +-
 .../baseline/ia32/liftoff-assembler-ia32.h    |   9 +-
 src/wasm/baseline/liftoff-assembler.cc        |  13 +-
 src/wasm/baseline/liftoff-assembler.h         |  12 +-
 src/wasm/baseline/liftoff-compiler.cc         |   8 +-
 src/wasm/baseline/x64/liftoff-assembler-x64.h |   9 +-
 src/wasm/wasm-code-manager.cc                 |   2 +-
 33 files changed, 193 insertions(+), 190 deletions(-)

diff --git a/src/codegen/arm/assembler-arm.cc b/src/codegen/arm/assembler-arm.cc
index e434cac32de..73f16dc57c3 100644
--- a/src/codegen/arm/assembler-arm.cc
+++ b/src/codegen/arm/assembler-arm.cc
@@ -594,7 +594,7 @@ void Assembler::GetCode(Isolate* isolate, CodeDesc* desc,
   const int safepoint_table_offset =
       (safepoint_table_builder == kNoSafepointTable)
           ? handler_table_offset2
-          : safepoint_table_builder->GetCodeOffset();
+          : safepoint_table_builder->safepoint_table_offset();
   const int reloc_info_offset =
       static_cast<int>(reloc_info_writer.pos() - buffer_->start());
   CodeDesc::Initialize(desc, this, safepoint_table_offset,
diff --git a/src/codegen/arm64/assembler-arm64.cc b/src/codegen/arm64/assembler-arm64.cc
index 72a57ef8b54..31fe726934d 100644
--- a/src/codegen/arm64/assembler-arm64.cc
+++ b/src/codegen/arm64/assembler-arm64.cc
@@ -420,7 +420,7 @@ void Assembler::GetCode(Isolate* isolate, CodeDesc* desc,
   const int safepoint_table_offset =
       (safepoint_table_builder == kNoSafepointTable)
           ? handler_table_offset2
-          : safepoint_table_builder->GetCodeOffset();
+          : safepoint_table_builder->safepoint_table_offset();
   const int reloc_info_offset =
       static_cast<int>(reloc_info_writer.pos() - buffer_->start());
   CodeDesc::Initialize(desc, this, safepoint_table_offset,
diff --git a/src/codegen/ia32/assembler-ia32.cc b/src/codegen/ia32/assembler-ia32.cc
index 49a92fe8c55..8a19b091d7f 100644
--- a/src/codegen/ia32/assembler-ia32.cc
+++ b/src/codegen/ia32/assembler-ia32.cc
@@ -369,7 +369,7 @@ void Assembler::GetCode(Isolate* isolate, CodeDesc* desc,
   const int safepoint_table_offset =
       (safepoint_table_builder == kNoSafepointTable)
           ? handler_table_offset2
-          : safepoint_table_builder->GetCodeOffset();
+          : safepoint_table_builder->safepoint_table_offset();
   const int reloc_info_offset =
       static_cast<int>(reloc_info_writer.pos() - buffer_->start());
   CodeDesc::Initialize(desc, this, safepoint_table_offset,
diff --git a/src/codegen/ia32/macro-assembler-ia32.cc b/src/codegen/ia32/macro-assembler-ia32.cc
index 48781324b98..de0e083c4b0 100644
--- a/src/codegen/ia32/macro-assembler-ia32.cc
+++ b/src/codegen/ia32/macro-assembler-ia32.cc
@@ -1465,14 +1465,6 @@ void MacroAssembler::LoadNativeContextSlot(Register destination, int index) {
   mov(destination, Operand(destination, Context::SlotOffset(index)));
 }
 
-int MacroAssembler::SafepointRegisterStackIndex(int reg_code) {
-  // The registers are pushed starting with the lowest encoding,
-  // which means that lowest encodings are furthest away from
-  // the stack pointer.
-  DCHECK(reg_code >= 0 && reg_code < kNumSafepointRegisters);
-  return kNumSafepointRegisters - reg_code - 1;
-}
-
 void TurboAssembler::Ret() { ret(0); }
 
 void TurboAssembler::Ret(int bytes_dropped, Register scratch) {
diff --git a/src/codegen/ia32/macro-assembler-ia32.h b/src/codegen/ia32/macro-assembler-ia32.h
index e1b7e15363e..97ab71753f8 100644
--- a/src/codegen/ia32/macro-assembler-ia32.h
+++ b/src/codegen/ia32/macro-assembler-ia32.h
@@ -655,10 +655,6 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
   void StackOverflowCheck(Register num_args, Register scratch,
                           Label* stack_overflow, bool include_receiver = false);
 
-  static int SafepointRegisterStackIndex(Register reg) {
-    return SafepointRegisterStackIndex(reg.code());
-  }
-
  private:
   // Helper functions for generating invokes.
   void InvokePrologue(Register expected_parameter_count,
@@ -670,13 +666,6 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
 
   void LeaveExitFrameEpilogue();
 
-  // Compute memory operands for safepoint stack slots.
-  static int SafepointRegisterStackIndex(int reg_code);
-
-  // Needs access to SafepointRegisterStackIndex for compiled frame
-  // traversal.
-  friend class CommonFrame;
-
   DISALLOW_IMPLICIT_CONSTRUCTORS(MacroAssembler);
 };
 
diff --git a/src/codegen/ia32/register-ia32.h b/src/codegen/ia32/register-ia32.h
index 37a5783deda..977f0910c88 100644
--- a/src/codegen/ia32/register-ia32.h
+++ b/src/codegen/ia32/register-ia32.h
@@ -120,9 +120,6 @@ constexpr RegList kJSCallerSaved =
 
 constexpr int kNumJSCallerSaved = 5;
 
-// Number of registers for which space is reserved in safepoints.
-constexpr int kNumSafepointRegisters = 8;
-
 // Define {RegisterName} methods for the register types.
 DEFINE_REGISTER_NAMES(Register, GENERAL_REGISTERS)
 DEFINE_REGISTER_NAMES(XMMRegister, DOUBLE_REGISTERS)
diff --git a/src/codegen/loong64/assembler-loong64.cc b/src/codegen/loong64/assembler-loong64.cc
index d212bec035d..ba6ce33508e 100644
--- a/src/codegen/loong64/assembler-loong64.cc
+++ b/src/codegen/loong64/assembler-loong64.cc
@@ -220,7 +220,7 @@ void Assembler::GetCode(Isolate* isolate, CodeDesc* desc,
   const int safepoint_table_offset =
       (safepoint_table_builder == kNoSafepointTable)
           ? handler_table_offset2
-          : safepoint_table_builder->GetCodeOffset();
+          : safepoint_table_builder->safepoint_table_offset();
   const int reloc_info_offset =
       static_cast<int>(reloc_info_writer.pos() - buffer_->start());
   CodeDesc::Initialize(desc, this, safepoint_table_offset,
diff --git a/src/codegen/mips/assembler-mips.cc b/src/codegen/mips/assembler-mips.cc
index 267281396a5..53511c0d782 100644
--- a/src/codegen/mips/assembler-mips.cc
+++ b/src/codegen/mips/assembler-mips.cc
@@ -344,7 +344,7 @@ void Assembler::GetCode(Isolate* isolate, CodeDesc* desc,
   const int safepoint_table_offset =
       (safepoint_table_builder == kNoSafepointTable)
           ? handler_table_offset2
-          : safepoint_table_builder->GetCodeOffset();
+          : safepoint_table_builder->safepoint_table_offset();
   const int reloc_info_offset =
       static_cast<int>(reloc_info_writer.pos() - buffer_->start());
   CodeDesc::Initialize(desc, this, safepoint_table_offset,
diff --git a/src/codegen/mips64/assembler-mips64.cc b/src/codegen/mips64/assembler-mips64.cc
index 9f5b34e956a..3701c652a92 100644
--- a/src/codegen/mips64/assembler-mips64.cc
+++ b/src/codegen/mips64/assembler-mips64.cc
@@ -321,7 +321,7 @@ void Assembler::GetCode(Isolate* isolate, CodeDesc* desc,
   const int safepoint_table_offset =
       (safepoint_table_builder == kNoSafepointTable)
           ? handler_table_offset2
-          : safepoint_table_builder->GetCodeOffset();
+          : safepoint_table_builder->safepoint_table_offset();
   const int reloc_info_offset =
       static_cast<int>(reloc_info_writer.pos() - buffer_->start());
   CodeDesc::Initialize(desc, this, safepoint_table_offset,
diff --git a/src/codegen/ppc/assembler-ppc.cc b/src/codegen/ppc/assembler-ppc.cc
index b65fe2e7290..1073679d79a 100644
--- a/src/codegen/ppc/assembler-ppc.cc
+++ b/src/codegen/ppc/assembler-ppc.cc
@@ -276,7 +276,7 @@ void Assembler::GetCode(Isolate* isolate, CodeDesc* desc,
   const int safepoint_table_offset =
       (safepoint_table_builder == kNoSafepointTable)
           ? handler_table_offset2
-          : safepoint_table_builder->GetCodeOffset();
+          : safepoint_table_builder->safepoint_table_offset();
   const int reloc_info_offset =
       static_cast<int>(reloc_info_writer.pos() - buffer_->start());
   CodeDesc::Initialize(desc, this, safepoint_table_offset,
diff --git a/src/codegen/riscv64/assembler-riscv64.cc b/src/codegen/riscv64/assembler-riscv64.cc
index be532da27f8..a6a3a6e48e2 100644
--- a/src/codegen/riscv64/assembler-riscv64.cc
+++ b/src/codegen/riscv64/assembler-riscv64.cc
@@ -271,7 +271,7 @@ void Assembler::GetCode(Isolate* isolate, CodeDesc* desc,
   const int safepoint_table_offset =
       (safepoint_table_builder == kNoSafepointTable)
           ? handler_table_offset2
-          : safepoint_table_builder->GetCodeOffset();
+          : safepoint_table_builder->safepoint_table_offset();
   const int reloc_info_offset =
       static_cast<int>(reloc_info_writer.pos() - buffer_->start());
   CodeDesc::Initialize(desc, this, safepoint_table_offset,
diff --git a/src/codegen/s390/assembler-s390.cc b/src/codegen/s390/assembler-s390.cc
index 1283c87317b..edb2acbcefb 100644
--- a/src/codegen/s390/assembler-s390.cc
+++ b/src/codegen/s390/assembler-s390.cc
@@ -414,7 +414,7 @@ void Assembler::GetCode(Isolate* isolate, CodeDesc* desc,
   const int safepoint_table_offset =
       (safepoint_table_builder == kNoSafepointTable)
           ? handler_table_offset2
-          : safepoint_table_builder->GetCodeOffset();
+          : safepoint_table_builder->safepoint_table_offset();
   const int reloc_info_offset =
       static_cast<int>(reloc_info_writer.pos() - buffer_->start());
   CodeDesc::Initialize(desc, this, safepoint_table_offset,
diff --git a/src/codegen/safepoint-table.cc b/src/codegen/safepoint-table.cc
index 1d08a3b4d74..5b7b618fd61 100644
--- a/src/codegen/safepoint-table.cc
+++ b/src/codegen/safepoint-table.cc
@@ -109,10 +109,10 @@ void SafepointTable::Print(std::ostream& os) const {
   }
 }
 
-Safepoint SafepointTableBuilder::DefineSafepoint(Assembler* assembler) {
+SafepointTableBuilder::Safepoint SafepointTableBuilder::DefineSafepoint(
+    Assembler* assembler) {
   entries_.push_back(EntryBuilder(zone_, assembler->pc_offset_for_safepoint()));
-  EntryBuilder& new_entry = entries_.back();
-  return Safepoint(new_entry.stack_indexes, &new_entry.register_indexes);
+  return SafepointTableBuilder::Safepoint(&entries_.back(), this);
 }
 
 int SafepointTableBuilder::UpdateDeoptimizationInfo(int pc, int trampoline,
@@ -131,6 +131,8 @@ int SafepointTableBuilder::UpdateDeoptimizationInfo(int pc, int trampoline,
 }
 
 void SafepointTableBuilder::Emit(Assembler* assembler, int tagged_slots_size) {
+  DCHECK_LT(max_stack_index_, tagged_slots_size);
+
 #ifdef DEBUG
   int last_pc = -1;
   int last_trampoline = -1;
@@ -151,7 +153,10 @@ void SafepointTableBuilder::Emit(Assembler* assembler, int tagged_slots_size) {
 #endif  // DEBUG
 
   RemoveDuplicates();
-  TrimEntries(&tagged_slots_size);
+
+  // The encoding is compacted by translating stack slot indices s.t. they
+  // start at 0. See also below.
+  tagged_slots_size -= min_stack_index();
 
 #if V8_TARGET_ARCH_ARM || V8_TARGET_ARCH_ARM64
   // We cannot emit a const pool within the safepoint table.
@@ -161,14 +166,14 @@ void SafepointTableBuilder::Emit(Assembler* assembler, int tagged_slots_size) {
   // Make sure the safepoint table is properly aligned. Pad with nops.
   assembler->Align(Code::kMetadataAlignment);
   assembler->RecordComment(";;; Safepoint table.");
-  offset_ = assembler->pc_offset();
+  safepoint_table_offset_ = assembler->pc_offset();
 
   // Compute the required sizes of the fields.
   int used_register_indexes = 0;
   STATIC_ASSERT(SafepointEntry::kNoTrampolinePC == -1);
-  int max_pc = -1;
+  int max_pc = SafepointEntry::kNoTrampolinePC;
   STATIC_ASSERT(SafepointEntry::kNoDeoptIndex == -1);
-  int max_deopt_index = -1;
+  int max_deopt_index = SafepointEntry::kNoDeoptIndex;
   for (const EntryBuilder& entry : entries_) {
     used_register_indexes |= entry.register_indexes;
     max_pc = std::max(max_pc, std::max(entry.pc, entry.trampoline));
@@ -186,7 +191,10 @@ void SafepointTableBuilder::Emit(Assembler* assembler, int tagged_slots_size) {
   };
   bool has_deopt_data = max_deopt_index != -1;
   int register_indexes_size = value_to_bytes(used_register_indexes);
-  // Add 1 so all values are non-negative.
+  // Add 1 so all values (including kNoDeoptIndex and kNoTrampolinePC) are
+  // non-negative.
+  STATIC_ASSERT(SafepointEntry::kNoDeoptIndex == -1);
+  STATIC_ASSERT(SafepointEntry::kNoTrampolinePC == -1);
   int pc_size = value_to_bytes(max_pc + 1);
   int deopt_index_size = value_to_bytes(max_deopt_index + 1);
   int tagged_slots_bytes =
@@ -224,22 +232,30 @@ void SafepointTableBuilder::Emit(Assembler* assembler, int tagged_slots_size) {
   for (const EntryBuilder& entry : entries_) {
     emit_bytes(entry.pc, pc_size);
     if (has_deopt_data) {
-      // Add 1 so all values are non-negative.
+      // Add 1 so all values (including kNoDeoptIndex and kNoTrampolinePC) are
+      // non-negative.
+      STATIC_ASSERT(SafepointEntry::kNoDeoptIndex == -1);
+      STATIC_ASSERT(SafepointEntry::kNoTrampolinePC == -1);
       emit_bytes(entry.deopt_index + 1, deopt_index_size);
       emit_bytes(entry.trampoline + 1, pc_size);
     }
     emit_bytes(entry.register_indexes, register_indexes_size);
   }
 
-  // Emit bitmaps of tagged stack slots.
+  // Emit bitmaps of tagged stack slots. Note the slot list is reversed in the
+  // encoding.
+  // TODO(jgruber): Avoid building a reversed copy of the bit vector.
   ZoneVector<uint8_t> bits(tagged_slots_bytes, 0, zone_);
   for (const EntryBuilder& entry : entries_) {
     std::fill(bits.begin(), bits.end(), 0);
 
     // Run through the indexes and build a bitmap.
     for (int idx : *entry.stack_indexes) {
-      DCHECK_GT(tagged_slots_size, idx);
-      int index = tagged_slots_size - 1 - idx;
+      // The encoding is compacted by translating stack slot indices s.t. they
+      // start at 0. See also above.
+      const int adjusted_idx = idx - min_stack_index();
+      DCHECK_GT(tagged_slots_size, adjusted_idx);
+      int index = tagged_slots_size - 1 - adjusted_idx;
       int byte_index = index >> kBitsPerByteLog2;
       int bit_index = index & (kBitsPerByte - 1);
       bits[byte_index] |= (1u << bit_index);
@@ -261,17 +277,8 @@ void SafepointTableBuilder::RemoveDuplicates() {
                                        const EntryBuilder& entry2) {
     if (entry1.deopt_index != entry2.deopt_index) return false;
     DCHECK_EQ(entry1.trampoline, entry2.trampoline);
-
-    ZoneChunkList<int>* indexes1 = entry1.stack_indexes;
-    ZoneChunkList<int>* indexes2 = entry2.stack_indexes;
-    if (indexes1->size() != indexes2->size()) return false;
-    if (!std::equal(indexes1->begin(), indexes1->end(), indexes2->begin())) {
-      return false;
-    }
-
-    if (entry1.register_indexes != entry2.register_indexes) return false;
-
-    return true;
+    return entry1.register_indexes == entry2.register_indexes &&
+           entry1.stack_indexes->Equals(*entry2.stack_indexes);
   };
 
   auto remaining_it = entries_.begin();
@@ -289,27 +296,5 @@ void SafepointTableBuilder::RemoveDuplicates() {
   entries_.Rewind(remaining);
 }
 
-void SafepointTableBuilder::TrimEntries(int* tagged_slots_size) {
-  int min_index = *tagged_slots_size;
-  if (min_index == 0) return;  // Early exit: nothing to trim.
-
-  for (auto& entry : entries_) {
-    for (int idx : *entry.stack_indexes) {
-      DCHECK_GT(*tagged_slots_size, idx);  // Validity check.
-      if (idx >= min_index) continue;
-      if (idx == 0) return;  // Early exit: nothing to trim.
-      min_index = idx;
-    }
-  }
-
-  DCHECK_LT(0, min_index);
-  *tagged_slots_size -= min_index;
-  for (auto& entry : entries_) {
-    for (int& idx : *entry.stack_indexes) {
-      idx -= min_index;
-    }
-  }
-}
-
 }  // namespace internal
 }  // namespace v8
diff --git a/src/codegen/safepoint-table.h b/src/codegen/safepoint-table.h
index 4201d5fc2f9..49848d56ae0 100644
--- a/src/codegen/safepoint-table.h
+++ b/src/codegen/safepoint-table.h
@@ -10,6 +10,7 @@
 #include "src/base/memory.h"
 #include "src/common/assert-scope.h"
 #include "src/utils/allocation.h"
+#include "src/utils/bit-vector.h"
 #include "src/utils/utils.h"
 #include "src/zone/zone-chunk-list.h"
 #include "src/zone/zone.h"
@@ -35,10 +36,10 @@ class SafepointEntry {
         tagged_register_indexes_(tagged_register_indexes),
         tagged_slots_(tagged_slots),
         trampoline_pc_(trampoline_pc) {
-    DCHECK(is_valid());
+    DCHECK(is_initialized());
   }
 
-  bool is_valid() const { return tagged_slots_.begin() != nullptr; }
+  bool is_initialized() const { return tagged_slots_.begin() != nullptr; }
 
   bool operator==(const SafepointEntry& other) const {
     return pc_ == other.pc_ && deopt_index_ == other.deopt_index_ &&
@@ -49,7 +50,7 @@ class SafepointEntry {
 
   void Reset() {
     *this = SafepointEntry{};
-    DCHECK(!is_valid());
+    DCHECK(!is_initialized());
   }
 
   int pc() const { return pc_; }
@@ -57,22 +58,22 @@ class SafepointEntry {
   int trampoline_pc() const { return trampoline_pc_; }
 
   bool has_deoptimization_index() const {
-    DCHECK(is_valid());
+    DCHECK(is_initialized());
     return deopt_index_ != kNoDeoptIndex;
   }
 
   int deoptimization_index() const {
-    DCHECK(is_valid() && has_deoptimization_index());
+    DCHECK(is_initialized() && has_deoptimization_index());
     return deopt_index_;
   }
 
   uint32_t tagged_register_indexes() const {
-    DCHECK(is_valid());
+    DCHECK(is_initialized());
     return tagged_register_indexes_;
   }
 
   base::Vector<const uint8_t> tagged_slots() const {
-    DCHECK(is_valid());
+    DCHECK(is_initialized());
     return tagged_slots_;
   }
 
@@ -84,6 +85,8 @@ class SafepointEntry {
   int trampoline_pc_ = kNoTrampolinePC;
 };
 
+// A wrapper class for accessing the safepoint table embedded into the Code
+// object.
 class SafepointTable {
  public:
   // The isolate and pc arguments are used for figuring out whether pc
@@ -113,6 +116,10 @@ class SafepointTable {
     int deopt_index = SafepointEntry::kNoDeoptIndex;
     int trampoline_pc = SafepointEntry::kNoTrampolinePC;
     if (has_deopt_data()) {
+      STATIC_ASSERT(SafepointEntry::kNoDeoptIndex == -1);
+      STATIC_ASSERT(SafepointEntry::kNoTrampolinePC == -1);
+      // `-1` to restore the original value, see also
+      // SafepointTableBuilder::Emit.
       deopt_index = read_bytes(&entry_ptr, deopt_index_size()) - 1;
       trampoline_pc = read_bytes(&entry_ptr, pc_size()) - 1;
       DCHECK(deopt_index >= 0 || deopt_index == SafepointEntry::kNoDeoptIndex);
@@ -196,41 +203,58 @@ class SafepointTable {
   friend class SafepointEntry;
 };
 
-class Safepoint {
- public:
-  void DefinePointerSlot(int index) { stack_indexes_->push_back(index); }
-
-  void DefineRegister(int reg_code) {
-    // Make sure the recorded index is always less than 31, so that we don't
-    // generate {kNoDeoptIndex} by accident.
-    DCHECK_LT(reg_code, 31);
-    *register_indexes_ |= 1u << reg_code;
-  }
-
+class SafepointTableBuilder {
  private:
-  Safepoint(ZoneChunkList<int>* stack_indexes, uint32_t* register_indexes)
-      : stack_indexes_(stack_indexes), register_indexes_(register_indexes) {}
-  ZoneChunkList<int>* const stack_indexes_;
-  uint32_t* register_indexes_;
-
-  friend class SafepointTableBuilder;
-};
+  struct EntryBuilder {
+    int pc;
+    int deopt_index = SafepointEntry::kNoDeoptIndex;
+    int trampoline = SafepointEntry::kNoTrampolinePC;
+    GrowableBitVector* stack_indexes;
+    uint32_t register_indexes = 0;
+    EntryBuilder(Zone* zone, int pc)
+        : pc(pc), stack_indexes(zone->New<GrowableBitVector>()) {}
+  };
 
-class SafepointTableBuilder {
  public:
   explicit SafepointTableBuilder(Zone* zone) : entries_(zone), zone_(zone) {}
 
   SafepointTableBuilder(const SafepointTableBuilder&) = delete;
   SafepointTableBuilder& operator=(const SafepointTableBuilder&) = delete;
 
-  bool emitted() const { return offset_ != -1; }
+  bool emitted() const {
+    return safepoint_table_offset_ != kNoSafepointTableOffset;
+  }
 
-  // Get the offset of the emitted safepoint table in the code.
-  int GetCodeOffset() const {
+  int safepoint_table_offset() const {
     DCHECK(emitted());
-    return offset_;
+    return safepoint_table_offset_;
   }
 
+  class Safepoint {
+   public:
+    void DefineTaggedStackSlot(int index) {
+      // Note it is only valid to specify stack slots here that are *not* in
+      // the fixed part of the frame (e.g. argc, target, context, stored rbp,
+      // return address). Frame iteration handles the fixed part of the frame
+      // with custom code, see CommonFrame::IterateCompiledFrame.
+      entry_->stack_indexes->Add(index, table_->zone_);
+      table_->UpdateMinMaxStackIndex(index);
+    }
+
+    void DefineTaggedRegister(int reg_code) {
+      DCHECK_LT(reg_code,
+                kBitsPerByte * sizeof(EntryBuilder::register_indexes));
+      entry_->register_indexes |= 1u << reg_code;
+    }
+
+   private:
+    friend class SafepointTableBuilder;
+    Safepoint(EntryBuilder* entry, SafepointTableBuilder* table)
+        : entry_(entry), table_(table) {}
+    EntryBuilder* const entry_;
+    SafepointTableBuilder* const table_;
+  };
+
   // Define a new safepoint for the current position in the body.
   Safepoint DefineSafepoint(Assembler* assembler);
 
@@ -246,32 +270,35 @@ class SafepointTableBuilder {
                                int deopt_index);
 
  private:
-  struct EntryBuilder {
-    int pc;
-    int deopt_index;
-    int trampoline;
-    ZoneChunkList<int>* stack_indexes;
-    uint32_t register_indexes;
-    EntryBuilder(Zone* zone, int pc)
-        : pc(pc),
-          deopt_index(SafepointEntry::kNoDeoptIndex),
-          trampoline(SafepointEntry::kNoTrampolinePC),
-          stack_indexes(zone->New<ZoneChunkList<int>>(
-              zone, ZoneChunkList<int>::StartMode::kSmall)),
-          register_indexes(0) {}
-  };
-
   // Remove consecutive identical entries.
   void RemoveDuplicates();
 
-  // Try to trim entries by removing trailing zeros (and shrinking
-  // {bits_per_entry}).
-  void TrimEntries(int* bits_per_entry);
+  void UpdateMinMaxStackIndex(int index) {
+#ifdef DEBUG
+    max_stack_index_ = std::max(max_stack_index_, index);
+#endif  // DEBUG
+    min_stack_index_ = std::min(min_stack_index_, index);
+  }
 
-  ZoneChunkList<EntryBuilder> entries_;
+  int min_stack_index() const {
+    return min_stack_index_ == std::numeric_limits<int>::max()
+               ? 0
+               : min_stack_index_;
+  }
+
+  static constexpr int kNoSafepointTableOffset = -1;
 
-  int offset_ = -1;
+  // Tracks the min/max stack slot index over all entries. We need the minimum
+  // index when encoding the actual table since we shift all unused lower
+  // indices out of the encoding. Tracking the indices during safepoint
+  // construction means we don't have to iterate again later.
+#ifdef DEBUG
+  int max_stack_index_ = 0;
+#endif  // DEBUG
+  int min_stack_index_ = std::numeric_limits<int>::max();
 
+  ZoneChunkList<EntryBuilder> entries_;
+  int safepoint_table_offset_ = kNoSafepointTableOffset;
   Zone* const zone_;
 };
 
diff --git a/src/codegen/x64/assembler-x64.cc b/src/codegen/x64/assembler-x64.cc
index 761aa938614..df15db18cc8 100644
--- a/src/codegen/x64/assembler-x64.cc
+++ b/src/codegen/x64/assembler-x64.cc
@@ -407,7 +407,7 @@ void Assembler::GetCode(Isolate* isolate, CodeDesc* desc,
   const int safepoint_table_offset =
       (safepoint_table_builder == kNoSafepointTable)
           ? handler_table_offset2
-          : safepoint_table_builder->GetCodeOffset();
+          : safepoint_table_builder->safepoint_table_offset();
   const int reloc_info_offset =
       static_cast<int>(reloc_info_writer.pos() - buffer_->start());
   CodeDesc::Initialize(desc, this, safepoint_table_offset,
diff --git a/src/codegen/x64/register-x64.h b/src/codegen/x64/register-x64.h
index f36763f2e48..0c95a43a047 100644
--- a/src/codegen/x64/register-x64.h
+++ b/src/codegen/x64/register-x64.h
@@ -100,9 +100,6 @@ constexpr RegList kCallerSaved =
 
 constexpr int kNumJSCallerSaved = 5;
 
-// Number of registers for which space is reserved in safepoints.
-constexpr int kNumSafepointRegisters = 16;
-
 #ifdef V8_TARGET_OS_WIN
 // Windows calling convention
 constexpr Register arg_reg_1 = rcx;
diff --git a/src/compiler/backend/code-generator.cc b/src/compiler/backend/code-generator.cc
index db96ea0ab59..e03f6d843ee 100644
--- a/src/compiler/backend/code-generator.cc
+++ b/src/compiler/backend/code-generator.cc
@@ -586,7 +586,7 @@ bool CodeGenerator::IsNextInAssemblyOrder(RpoNumber block) const {
 }
 
 void CodeGenerator::RecordSafepoint(ReferenceMap* references) {
-  Safepoint safepoint = safepoints()->DefineSafepoint(tasm());
+  auto safepoint = safepoints()->DefineSafepoint(tasm());
   int frame_header_offset = frame()->GetFixedSlotCount();
   for (const InstructionOperand& operand : references->reference_operands()) {
     if (operand.IsStackSlot()) {
@@ -598,7 +598,7 @@ void CodeGenerator::RecordSafepoint(ReferenceMap* references) {
       // we also don't need to worry about them, since the GC has special
       // knowledge about those fields anyway.
       if (index < frame_header_offset) continue;
-      safepoint.DefinePointerSlot(index);
+      safepoint.DefineTaggedStackSlot(index);
     }
   }
 }
diff --git a/src/compiler/backend/code-generator.h b/src/compiler/backend/code-generator.h
index 2cb3969900d..5fd34a41f44 100644
--- a/src/compiler/backend/code-generator.h
+++ b/src/compiler/backend/code-generator.h
@@ -165,8 +165,7 @@ class V8_EXPORT_PRIVATE CodeGenerator final : public GapResolver::Assembler {
   Zone* zone() const { return zone_; }
   TurboAssembler* tasm() { return &tasm_; }
   SafepointTableBuilder* safepoint_table_builder() { return &safepoints_; }
-  size_t GetSafepointTableOffset() const { return safepoints_.GetCodeOffset(); }
-  size_t GetHandlerTableOffset() const { return handler_table_offset_; }
+  size_t handler_table_offset() const { return handler_table_offset_; }
 
   const ZoneVector<int>& block_starts() const { return block_starts_; }
   const ZoneVector<TurbolizerInstructionStartInfo>& instr_starts() const {
diff --git a/src/compiler/pipeline.cc b/src/compiler/pipeline.cc
index 6ea2df76c86..4c80eff73f9 100644
--- a/src/compiler/pipeline.cc
+++ b/src/compiler/pipeline.cc
@@ -3039,7 +3039,7 @@ wasm::WasmCompilationResult Pipeline::GenerateCodeForWasmNativeStub(
   wasm::WasmCompilationResult result;
   code_generator->tasm()->GetCode(
       nullptr, &result.code_desc, code_generator->safepoint_table_builder(),
-      static_cast<int>(code_generator->GetHandlerTableOffset()));
+      static_cast<int>(code_generator->handler_table_offset()));
   result.instr_buffer = code_generator->tasm()->ReleaseBuffer();
   result.source_positions = code_generator->GetSourcePositionTable();
   result.protected_instructions_data =
@@ -3161,7 +3161,7 @@ void Pipeline::GenerateCodeForWasmFunction(
   CodeGenerator* code_generator = pipeline.code_generator();
   code_generator->tasm()->GetCode(
       nullptr, &result->code_desc, code_generator->safepoint_table_builder(),
-      static_cast<int>(code_generator->GetHandlerTableOffset()));
+      static_cast<int>(code_generator->handler_table_offset()));
 
   result->instr_buffer = code_generator->tasm()->ReleaseBuffer();
   result->frame_slot_count = code_generator->frame()->GetTotalFrameSlotCount();
diff --git a/src/execution/frames.cc b/src/execution/frames.cc
index 0b6742dbc04..96a81a2bb0c 100644
--- a/src/execution/frames.cc
+++ b/src/execution/frames.cc
@@ -1060,10 +1060,10 @@ void CommonFrame::IterateCompiledFrame(RootVisitor* v) const {
   if (!is_wasm) {
     InnerPointerToCodeCache::InnerPointerToCodeCacheEntry* entry =
         isolate()->inner_pointer_to_code_cache()->GetCacheEntry(inner_pointer);
-    if (!entry->safepoint_entry.is_valid()) {
+    if (!entry->safepoint_entry.is_initialized()) {
       entry->safepoint_entry =
           entry->code.GetSafepointEntry(isolate(), inner_pointer);
-      DCHECK(entry->safepoint_entry.is_valid());
+      DCHECK(entry->safepoint_entry.is_initialized());
     } else {
       DCHECK_EQ(entry->safepoint_entry,
                 entry->code.GetSafepointEntry(isolate(), inner_pointer));
@@ -1085,7 +1085,6 @@ void CommonFrame::IterateCompiledFrame(RootVisitor* v) const {
     if (is_wasm_call) has_tagged_outgoing_params = false;
 #endif  // V8_ENABLE_WEBASSEMBLY
   }
-  uint32_t slot_space = stack_slots * kSystemPointerSize;
 
   // Determine the fixed header and spill slot area size.
   int frame_header_size = StandardFrameConstants::kFixedFrameSizeFromFp;
@@ -1143,14 +1142,22 @@ void CommonFrame::IterateCompiledFrame(RootVisitor* v) const {
         UNREACHABLE();
     }
   }
-  slot_space -=
+
+  // slot_space holds the actual number of spill slots, without fixed frame
+  // slots.
+  const uint32_t slot_space =
+      stack_slots * kSystemPointerSize -
       (frame_header_size + StandardFrameConstants::kFixedFrameSizeAboveFp);
 
+  // base <= limit.
+  // Fixed frame slots.
   FullObjectSlot frame_header_base(&Memory<Address>(fp() - frame_header_size));
   FullObjectSlot frame_header_limit(
       &Memory<Address>(fp() - StandardFrameConstants::kCPSlotSize));
+  // Parameters passed to the callee.
   FullObjectSlot parameters_base(&Memory<Address>(sp()));
   FullObjectSlot parameters_limit(frame_header_base.address() - slot_space);
+  // Spill slots are in the region ]frame_header_base, parameters_limit];
 
   // Visit the rest of the parameters if they are tagged.
   if (has_tagged_outgoing_params) {
@@ -1165,7 +1172,7 @@ void CommonFrame::IterateCompiledFrame(RootVisitor* v) const {
   PtrComprCageBase cage_base(isolate());
   for (uint8_t bits : safepoint_entry.tagged_slots()) {
     while (bits) {
-      int bit = base::bits::CountTrailingZeros(bits);
+      const int bit = base::bits::CountTrailingZeros(bits);
       bits &= ~(1 << bit);
       FullObjectSlot spill_slot = parameters_limit + slot_offset + bit;
 #ifdef V8_COMPRESS_POINTERS
diff --git a/src/heap/factory.cc b/src/heap/factory.cc
index c84993bf289..b5e3cbf604c 100644
--- a/src/heap/factory.cc
+++ b/src/heap/factory.cc
@@ -2312,10 +2312,9 @@ Handle<Code> Factory::NewOffHeapTrampolineFor(Handle<Code> code,
     Code raw_result = *result;
 
     const bool set_is_off_heap_trampoline = true;
-    const int stack_slots =
-        raw_code.has_safepoint_info() ? raw_code.stack_slots() : 0;
     raw_result.initialize_flags(raw_code.kind(), raw_code.is_turbofanned(),
-                                stack_slots, set_is_off_heap_trampoline);
+                                raw_code.stack_slots(),
+                                set_is_off_heap_trampoline);
     raw_result.set_builtin_id(raw_code.builtin_id());
     raw_result.set_handler_table_offset(raw_code.handler_table_offset());
     raw_result.set_constant_pool_offset(raw_code.constant_pool_offset());
diff --git a/src/objects/code-inl.h b/src/objects/code-inl.h
index 6d3dcf2a34a..c21e92a896e 100644
--- a/src/objects/code-inl.h
+++ b/src/objects/code-inl.h
@@ -558,7 +558,8 @@ void Code::initialize_flags(CodeKind kind, bool is_turbofanned, int stack_slots,
                    IsOffHeapTrampoline::encode(is_off_heap_trampoline);
   STATIC_ASSERT(FIELD_SIZE(kFlagsOffset) == kInt32Size);
   RELAXED_WRITE_UINT32_FIELD(*this, kFlagsOffset, flags);
-  DCHECK_IMPLIES(stack_slots != 0, has_safepoint_info());
+  DCHECK_IMPLIES(stack_slots != 0, uses_safepoint_table());
+  DCHECK_IMPLIES(!uses_safepoint_table(), stack_slots == 0);
 }
 
 inline bool Code::is_interpreter_trampoline_builtin() const {
@@ -670,14 +671,15 @@ void Code::set_inlined_bytecode_size(unsigned size) {
   RELAXED_WRITE_UINT_FIELD(*this, kInlinedBytecodeSizeOffset, size);
 }
 
-bool Code::has_safepoint_info() const {
+bool Code::uses_safepoint_table() const {
   return is_turbofanned() || is_wasm_code();
 }
 
 int Code::stack_slots() const {
-  DCHECK(has_safepoint_info());
   const uint32_t flags = RELAXED_READ_UINT32_FIELD(*this, kFlagsOffset);
-  return StackSlotsField::decode(flags);
+  const int slots = StackSlotsField::decode(flags);
+  DCHECK_IMPLIES(!uses_safepoint_table(), slots == 0);
+  return slots;
 }
 
 bool CodeDataContainer::marked_for_deoptimization() const {
diff --git a/src/objects/code.cc b/src/objects/code.cc
index b745e4d199f..96bda038db5 100644
--- a/src/objects/code.cc
+++ b/src/objects/code.cc
@@ -585,7 +585,7 @@ void Code::Disassemble(const char* name, std::ostream& os, Isolate* isolate,
   }
   os << "\n";
 
-  if (has_safepoint_info()) {
+  if (uses_safepoint_table()) {
     SafepointTable table(isolate, current_pc, *this);
     table.Print(os);
     os << "\n";
diff --git a/src/objects/code.h b/src/objects/code.h
index 4f259efd490..5fb6367a879 100644
--- a/src/objects/code.h
+++ b/src/objects/code.h
@@ -451,10 +451,12 @@ class Code : public HeapObject {
   inline unsigned inlined_bytecode_size() const;
   inline void set_inlined_bytecode_size(unsigned size);
 
-  inline bool has_safepoint_info() const;
+  // [uses_safepoint_table]: Whether this Code object uses safepoint tables
+  // (note the table may still be empty, see has_safepoint_table).
+  inline bool uses_safepoint_table() const;
 
-  // [stack_slots]: If {has_safepoint_info()}, the number of stack slots
-  // reserved in the code prologue.
+  // [stack_slots]: If {uses_safepoint_table()}, the number of stack slots
+  // reserved in the code prologue; otherwise 0.
   inline int stack_slots() const;
 
   // [marked_for_deoptimization]: If CodeKindCanDeoptimize(kind), tells whether
diff --git a/src/utils/bit-vector.h b/src/utils/bit-vector.h
index 4f3c6dfa4c8..fa06f9d080b 100644
--- a/src/utils/bit-vector.h
+++ b/src/utils/bit-vector.h
@@ -349,8 +349,18 @@ class GrowableBitVector {
 
   void Clear() { bits_.Clear(); }
 
+  int length() const { return bits_.length(); }
+
+  bool Equals(const GrowableBitVector& other) const {
+    return length() == other.length() && bits_.Equals(other.bits_);
+  }
+
+  BitVector::Iterator begin() const { return bits_.begin(); }
+
+  BitVector::Iterator end() const { return bits_.end(); }
+
  private:
-  static const int kInitialLength = 1024;
+  static constexpr int kInitialLength = 1024;
 
   bool InBitsRange(int value) const { return bits_.length() > value; }
 
diff --git a/src/wasm/baseline/arm/liftoff-assembler-arm.h b/src/wasm/baseline/arm/liftoff-assembler-arm.h
index 123eca2773c..54b454d7c24 100644
--- a/src/wasm/baseline/arm/liftoff-assembler-arm.h
+++ b/src/wasm/baseline/arm/liftoff-assembler-arm.h
@@ -4115,15 +4115,14 @@ void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {
   }
 }
 
-void LiftoffAssembler::RecordSpillsInSafepoint(Safepoint& safepoint,
-                                               LiftoffRegList all_spills,
-                                               LiftoffRegList ref_spills,
-                                               int spill_offset) {
+void LiftoffAssembler::RecordSpillsInSafepoint(
+    SafepointTableBuilder::Safepoint& safepoint, LiftoffRegList all_spills,
+    LiftoffRegList ref_spills, int spill_offset) {
   int spill_space_size = 0;
   while (!all_spills.is_empty()) {
     LiftoffRegister reg = all_spills.GetLastRegSet();
     if (ref_spills.has(reg)) {
-      safepoint.DefinePointerSlot(spill_offset);
+      safepoint.DefineTaggedStackSlot(spill_offset);
     }
     all_spills.clear(reg);
     ++spill_offset;
diff --git a/src/wasm/baseline/arm64/liftoff-assembler-arm64.h b/src/wasm/baseline/arm64/liftoff-assembler-arm64.h
index 674ed993011..bb1e86ed5d5 100644
--- a/src/wasm/baseline/arm64/liftoff-assembler-arm64.h
+++ b/src/wasm/baseline/arm64/liftoff-assembler-arm64.h
@@ -3138,10 +3138,9 @@ void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {
   PopCPURegList(liftoff::PadRegList(regs.GetGpList()));
 }
 
-void LiftoffAssembler::RecordSpillsInSafepoint(Safepoint& safepoint,
-                                               LiftoffRegList all_spills,
-                                               LiftoffRegList ref_spills,
-                                               int spill_offset) {
+void LiftoffAssembler::RecordSpillsInSafepoint(
+    SafepointTableBuilder::Safepoint& safepoint, LiftoffRegList all_spills,
+    LiftoffRegList ref_spills, int spill_offset) {
   int spill_space_size = 0;
   bool needs_padding =
       (base::bits::CountPopulation(all_spills.GetGpList()) & 1) != 0;
@@ -3152,7 +3151,7 @@ void LiftoffAssembler::RecordSpillsInSafepoint(Safepoint& safepoint,
   while (!all_spills.is_empty()) {
     LiftoffRegister reg = all_spills.GetLastRegSet();
     if (ref_spills.has(reg)) {
-      safepoint.DefinePointerSlot(spill_offset);
+      safepoint.DefineTaggedStackSlot(spill_offset);
     }
     all_spills.clear(reg);
     ++spill_offset;
diff --git a/src/wasm/baseline/ia32/liftoff-assembler-ia32.h b/src/wasm/baseline/ia32/liftoff-assembler-ia32.h
index 8ba56602506..1c334d87890 100644
--- a/src/wasm/baseline/ia32/liftoff-assembler-ia32.h
+++ b/src/wasm/baseline/ia32/liftoff-assembler-ia32.h
@@ -4504,15 +4504,14 @@ void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {
   }
 }
 
-void LiftoffAssembler::RecordSpillsInSafepoint(Safepoint& safepoint,
-                                               LiftoffRegList all_spills,
-                                               LiftoffRegList ref_spills,
-                                               int spill_offset) {
+void LiftoffAssembler::RecordSpillsInSafepoint(
+    SafepointTableBuilder::Safepoint& safepoint, LiftoffRegList all_spills,
+    LiftoffRegList ref_spills, int spill_offset) {
   int spill_space_size = 0;
   while (!all_spills.is_empty()) {
     LiftoffRegister reg = all_spills.GetFirstRegSet();
     if (ref_spills.has(reg)) {
-      safepoint.DefinePointerSlot(spill_offset);
+      safepoint.DefineTaggedStackSlot(spill_offset);
     }
     all_spills.clear(reg);
     ++spill_offset;
diff --git a/src/wasm/baseline/liftoff-assembler.cc b/src/wasm/baseline/liftoff-assembler.cc
index ec933b3d0c1..6691c7dd325 100644
--- a/src/wasm/baseline/liftoff-assembler.cc
+++ b/src/wasm/baseline/liftoff-assembler.cc
@@ -549,28 +549,29 @@ void LiftoffAssembler::CacheState::GetTaggedSlotsForOOLCode(
   }
 }
 
-void LiftoffAssembler::CacheState::DefineSafepoint(Safepoint& safepoint) {
+void LiftoffAssembler::CacheState::DefineSafepoint(
+    SafepointTableBuilder::Safepoint& safepoint) {
   for (const auto& slot : stack_state) {
     if (is_reference(slot.kind())) {
       DCHECK(slot.is_stack());
-      safepoint.DefinePointerSlot(GetSafepointIndexForStackSlot(slot));
+      safepoint.DefineTaggedStackSlot(GetSafepointIndexForStackSlot(slot));
     }
   }
 }
 
 void LiftoffAssembler::CacheState::DefineSafepointWithCalleeSavedRegisters(
-    Safepoint& safepoint) {
+    SafepointTableBuilder::Safepoint& safepoint) {
   for (const auto& slot : stack_state) {
     if (!is_reference(slot.kind())) continue;
     if (slot.is_stack()) {
-      safepoint.DefinePointerSlot(GetSafepointIndexForStackSlot(slot));
+      safepoint.DefineTaggedStackSlot(GetSafepointIndexForStackSlot(slot));
     } else {
       DCHECK(slot.is_reg());
-      safepoint.DefineRegister(slot.reg().gp().code());
+      safepoint.DefineTaggedRegister(slot.reg().gp().code());
     }
   }
   if (cached_instance != no_reg) {
-    safepoint.DefineRegister(cached_instance.code());
+    safepoint.DefineTaggedRegister(cached_instance.code());
   }
 }
 
diff --git a/src/wasm/baseline/liftoff-assembler.h b/src/wasm/baseline/liftoff-assembler.h
index d58329f42d9..b3cb11a61e1 100644
--- a/src/wasm/baseline/liftoff-assembler.h
+++ b/src/wasm/baseline/liftoff-assembler.h
@@ -219,9 +219,10 @@ class LiftoffAssembler : public TurboAssembler {
                                   /*out*/ LiftoffRegList* spills,
                                   SpillLocation spill_location);
 
-    void DefineSafepoint(Safepoint& safepoint);
+    void DefineSafepoint(SafepointTableBuilder::Safepoint& safepoint);
 
-    void DefineSafepointWithCalleeSavedRegisters(Safepoint& safepoint);
+    void DefineSafepointWithCalleeSavedRegisters(
+        SafepointTableBuilder::Safepoint& safepoint);
 
     base::SmallVector<VarState, 8> stack_state;
     LiftoffRegList used_registers;
@@ -1460,10 +1461,9 @@ class LiftoffAssembler : public TurboAssembler {
   inline void PushRegisters(LiftoffRegList);
   inline void PopRegisters(LiftoffRegList);
 
-  inline void RecordSpillsInSafepoint(Safepoint& safepoint,
-                                      LiftoffRegList all_spills,
-                                      LiftoffRegList ref_spills,
-                                      int spill_offset);
+  inline void RecordSpillsInSafepoint(
+      SafepointTableBuilder::Safepoint& safepoint, LiftoffRegList all_spills,
+      LiftoffRegList ref_spills, int spill_offset);
 
   inline void DropStackSlotsAndRet(uint32_t num_stack_slots);
 
diff --git a/src/wasm/baseline/liftoff-compiler.cc b/src/wasm/baseline/liftoff-compiler.cc
index e98f9382e62..b5d06e2aeb3 100644
--- a/src/wasm/baseline/liftoff-compiler.cc
+++ b/src/wasm/baseline/liftoff-compiler.cc
@@ -961,11 +961,11 @@ class LiftoffCompiler {
     source_position_table_builder_.AddPosition(
         __ pc_offset(), SourcePosition(ool->position), true);
     __ CallRuntimeStub(ool->stub);
-    Safepoint safepoint = safepoint_table_builder_.DefineSafepoint(&asm_);
+    auto safepoint = safepoint_table_builder_.DefineSafepoint(&asm_);
 
     if (ool->safepoint_info) {
       for (auto index : ool->safepoint_info->slots) {
-        safepoint.DefinePointerSlot(index);
+        safepoint.DefineTaggedStackSlot(index);
       }
 
       int total_frame_size = __ GetTotalFrameSize();
@@ -6444,12 +6444,12 @@ class LiftoffCompiler {
   }
 
   void DefineSafepoint() {
-    Safepoint safepoint = safepoint_table_builder_.DefineSafepoint(&asm_);
+    auto safepoint = safepoint_table_builder_.DefineSafepoint(&asm_);
     __ cache_state()->DefineSafepoint(safepoint);
   }
 
   void DefineSafepointWithCalleeSavedRegisters() {
-    Safepoint safepoint = safepoint_table_builder_.DefineSafepoint(&asm_);
+    auto safepoint = safepoint_table_builder_.DefineSafepoint(&asm_);
     __ cache_state()->DefineSafepointWithCalleeSavedRegisters(safepoint);
   }
 
diff --git a/src/wasm/baseline/x64/liftoff-assembler-x64.h b/src/wasm/baseline/x64/liftoff-assembler-x64.h
index 66167eccfda..30c8267b954 100644
--- a/src/wasm/baseline/x64/liftoff-assembler-x64.h
+++ b/src/wasm/baseline/x64/liftoff-assembler-x64.h
@@ -4051,15 +4051,14 @@ void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {
   }
 }
 
-void LiftoffAssembler::RecordSpillsInSafepoint(Safepoint& safepoint,
-                                               LiftoffRegList all_spills,
-                                               LiftoffRegList ref_spills,
-                                               int spill_offset) {
+void LiftoffAssembler::RecordSpillsInSafepoint(
+    SafepointTableBuilder::Safepoint& safepoint, LiftoffRegList all_spills,
+    LiftoffRegList ref_spills, int spill_offset) {
   int spill_space_size = 0;
   while (!all_spills.is_empty()) {
     LiftoffRegister reg = all_spills.GetFirstRegSet();
     if (ref_spills.has(reg)) {
-      safepoint.DefinePointerSlot(spill_offset);
+      safepoint.DefineTaggedStackSlot(spill_offset);
     }
     all_spills.clear(reg);
     ++spill_offset;
diff --git a/src/wasm/wasm-code-manager.cc b/src/wasm/wasm-code-manager.cc
index bc11974627c..f63c2f89ed1 100644
--- a/src/wasm/wasm-code-manager.cc
+++ b/src/wasm/wasm-code-manager.cc
@@ -1060,7 +1060,7 @@ WasmCode* NativeModule::AddCodeForTesting(Handle<Code> code) {
   base::Vector<const byte> instructions(
       reinterpret_cast<byte*>(code->raw_body_start()),
       static_cast<size_t>(code->raw_body_size()));
-  const int stack_slots = code->has_safepoint_info() ? code->stack_slots() : 0;
+  const int stack_slots = code->stack_slots();
 
   // Metadata offsets in Code objects are relative to the start of the metadata
   // section, whereas WasmCode expects offsets relative to InstructionStart.
-- 
2.35.1

