From 29c1a652bf080f272b9fd3661eef5424d7180d08 Mon Sep 17 00:00:00 2001
From: Lu Yahan <yahan@iscas.ac.cn>
Date: Wed, 17 May 2023 19:24:03 +0800
Subject: [PATCH] [riscv] Unify pointer size

Change-Id: Id8d6921c5b7046f870a7121d856b0ab1853e1fc7
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4541408
Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#87750}
---
 src/baseline/riscv/baseline-compiler-riscv-inl.h    | 7 ++++---
 src/builtins/riscv/builtins-riscv.cc                | 4 ++--
 src/codegen/riscv/macro-assembler-riscv.cc          | 4 ++--
 src/regexp/riscv/regexp-macro-assembler-riscv.cc    | 3 ++-
 src/wasm/baseline/riscv/liftoff-assembler-riscv64.h | 1 -
 5 files changed, 10 insertions(+), 9 deletions(-)

diff --git a/src/baseline/riscv/baseline-compiler-riscv-inl.h b/src/baseline/riscv/baseline-compiler-riscv-inl.h
index 684bf382aa9..d3b85ac4948 100644
--- a/src/baseline/riscv/baseline-compiler-riscv-inl.h
+++ b/src/baseline/riscv/baseline-compiler-riscv-inl.h
@@ -44,7 +44,8 @@ void BaselineCompiler::PrologueFillFrame() {
   const bool has_new_target = new_target_index != kMaxInt;
   if (has_new_target) {
     DCHECK_LE(new_target_index, register_count);
-    __ masm()->AddWord(sp, sp, Operand(-(kPointerSize * new_target_index)));
+    __ masm()->AddWord(sp, sp,
+                       Operand(-(kSystemPointerSize * new_target_index)));
     for (int i = 0; i < new_target_index; i++) {
       __ masm()->StoreWord(kInterpreterAccumulatorRegister,
                            MemOperand(sp, i * kSystemPointerSize));
@@ -55,13 +56,13 @@ void BaselineCompiler::PrologueFillFrame() {
   }
   if (register_count < 2 * kLoopUnrollSize) {
     // If the frame is small enough, just unroll the frame fill completely.
-    __ masm()->AddWord(sp, sp, Operand(-(kPointerSize * register_count)));
+    __ masm()->AddWord(sp, sp, Operand(-(kSystemPointerSize * register_count)));
     for (int i = 0; i < register_count; ++i) {
       __ masm()->StoreWord(kInterpreterAccumulatorRegister,
                            MemOperand(sp, i * kSystemPointerSize));
     }
   } else {
-    __ masm()->AddWord(sp, sp, Operand(-(kPointerSize * register_count)));
+    __ masm()->AddWord(sp, sp, Operand(-(kSystemPointerSize * register_count)));
     for (int i = 0; i < register_count; ++i) {
       __ masm()->StoreWord(kInterpreterAccumulatorRegister,
                            MemOperand(sp, i * kSystemPointerSize));
diff --git a/src/builtins/riscv/builtins-riscv.cc b/src/builtins/riscv/builtins-riscv.cc
index cf9a40e1bf9..0f5b3bf9f4e 100644
--- a/src/builtins/riscv/builtins-riscv.cc
+++ b/src/builtins/riscv/builtins-riscv.cc
@@ -970,7 +970,7 @@ void Builtins::Generate_BaselineOutOfLinePrologueDeopt(MacroAssembler* masm) {
 
   // Drop bytecode offset (was the feedback vector but got replaced during
   // deopt) and bytecode array.
-  __ AddWord(sp, sp, Operand(2 * kPointerSize));
+  __ AddWord(sp, sp, Operand(2 * kSystemPointerSize));
 
   // Context, closure, argc.
   __ Pop(kContextRegister, kJavaScriptCallTargetRegister,
@@ -2078,7 +2078,7 @@ void Generate_AllocateSpaceAndShiftExistingArguments(
   Register old_sp = scratch1;
   Register new_space = scratch2;
   __ mv(old_sp, sp);
-  __ slli(new_space, count, kPointerSizeLog2);
+  __ slli(new_space, count, kSystemPointerSizeLog2);
   __ SubWord(sp, sp, Operand(new_space));
 
   Register end = scratch2;
diff --git a/src/codegen/riscv/macro-assembler-riscv.cc b/src/codegen/riscv/macro-assembler-riscv.cc
index a8b349ee919..9ee9ab1dcb1 100644
--- a/src/codegen/riscv/macro-assembler-riscv.cc
+++ b/src/codegen/riscv/macro-assembler-riscv.cc
@@ -6355,13 +6355,13 @@ void MacroAssembler::DropArguments(Register count, ArgumentsCountType type,
                                    ArgumentsCountMode mode, Register scratch) {
   switch (type) {
     case kCountIsInteger: {
-      CalcScaledAddress(sp, sp, count, kPointerSizeLog2);
+      CalcScaledAddress(sp, sp, count, kSystemPointerSizeLog2);
       break;
     }
     case kCountIsSmi: {
       static_assert(kSmiTagSize == 1 && kSmiTag == 0);
       DCHECK_NE(scratch, no_reg);
-      SmiScale(scratch, count, kPointerSizeLog2);
+      SmiScale(scratch, count, kSystemPointerSizeLog2);
       AddWord(sp, sp, scratch);
       break;
     }
diff --git a/src/regexp/riscv/regexp-macro-assembler-riscv.cc b/src/regexp/riscv/regexp-macro-assembler-riscv.cc
index 37f24df9eb3..3b57e613eef 100644
--- a/src/regexp/riscv/regexp-macro-assembler-riscv.cc
+++ b/src/regexp/riscv/regexp-macro-assembler-riscv.cc
@@ -736,7 +736,8 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {
       __ Branch(&stack_limit_hit, le, a0, Operand(zero_reg));
       // Check if there is room for the variable number of registers above
       // the stack limit.
-      __ Branch(&stack_ok, uge, a0, Operand(num_registers_ * kPointerSize));
+      __ Branch(&stack_ok, uge, a0,
+                Operand(num_registers_ * kSystemPointerSize));
       // Exit with OutOfMemory exception. There is not enough space on the stack
       // for our working registers.
       __ li(a0, Operand(EXCEPTION));
diff --git a/src/wasm/baseline/riscv/liftoff-assembler-riscv64.h b/src/wasm/baseline/riscv/liftoff-assembler-riscv64.h
index 05976082377..6abf9a39a84 100644
--- a/src/wasm/baseline/riscv/liftoff-assembler-riscv64.h
+++ b/src/wasm/baseline/riscv/liftoff-assembler-riscv64.h
@@ -173,7 +173,6 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value) {
 void LiftoffAssembler::LoadTaggedPointer(Register dst, Register src_addr,
                                          Register offset_reg,
                                          int32_t offset_imm, bool needs_shift) {
-  static_assert(kTaggedSize == kInt64Size);
   unsigned shift_amount = !needs_shift ? 0 : 3;
   MemOperand src_op = liftoff::GetMemOp(this, src_addr, offset_reg, offset_imm,
                                         false, shift_amount);
-- 
2.35.1

