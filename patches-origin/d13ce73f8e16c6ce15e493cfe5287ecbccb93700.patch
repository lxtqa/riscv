From d13ce73f8e16c6ce15e493cfe5287ecbccb93700 Mon Sep 17 00:00:00 2001
From: Kevin Babbitt <kbabbitt@microsoft.com>
Date: Mon, 22 May 2023 09:58:59 -0700
Subject: [PATCH] cppgc: Get AgeTableTest compiling when young generation is
 enabled

age-table-unittest.cc is gated behind cppgc_enable_young_generation in
test/unittests/BUILD.gn. Root BUILD.gn implemented a dependency where
cppgc_enable_young_generation was set to true when the caged heap is
enabled, but that dependency was not propagating to the tests. This CL
moves the caged heap flag and the dependency to v8.gni so that it's
consistent throughout the source tree.

That change exposed a compile error in age-table-unittest.cc due to the
non-stack-allocated test fixture having a member of stack-allocated type
subtle::DisallowGarbageCollectionScope. The fix is for each test to
declare its own DisallowGarbageCollectionScope instead.

Bug: chromium:1029379, chromium:1434388
Change-Id: If3d4f8f124585f4c74637c6cf8073cdbe6a6b5a9
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4548686
Commit-Queue: Kevin Babbitt <kbabbitt@microsoft.com>
Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
Cr-Commit-Position: refs/heads/main@{#87808}
---
 BUILD.gn                                        |  8 --------
 gni/v8.gni                                      | 10 ++++++++++
 test/unittests/heap/cppgc/age-table-unittest.cc | 13 +++++++++----
 3 files changed, 19 insertions(+), 12 deletions(-)

diff --git a/BUILD.gn b/BUILD.gn
index a69e7b2edbc..155dee46feb 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -300,11 +300,6 @@ declare_args() {
       v8_current_cpu == "arm64" &&
       (target_is_simulator || arm_control_flow_integrity != "none")
 
-  # Enable heap reservation of size 4GB. Only possible for 64bit archs.
-  cppgc_enable_caged_heap =
-      v8_current_cpu == "x64" || v8_current_cpu == "arm64" ||
-      v8_current_cpu == "loong64" || v8_current_cpu == "riscv64"
-
   # Enables additional heap verification phases and checks.
   cppgc_enable_verify_heap = ""
 
@@ -901,9 +896,6 @@ if (cppgc_enable_object_names) {
 if (cppgc_enable_caged_heap) {
   enabled_external_cppgc_defines += [ "CPPGC_CAGED_HEAP" ]
 
-  # Always enable young generation compile time flag if caged heap is enabled.
-  cppgc_enable_young_generation = true
-
   # Pointer compression regresses binary size on Fuchsia by about 300K.
   # However, the change improves Oilpan memory by 15-20% (2-4% of PMF),
   # which is beneficial for memory-impoverished platforms.
diff --git a/gni/v8.gni b/gni/v8.gni
index 959afd3f8c6..fc882dde87e 100644
--- a/gni/v8.gni
+++ b/gni/v8.gni
@@ -101,6 +101,11 @@ declare_args() {
   # Enable object names in cppgc for debug purposes.
   cppgc_enable_object_names = false
 
+  # Enable heap reservation of size 4GB. Only possible for 64bit archs.
+  cppgc_enable_caged_heap =
+      v8_current_cpu == "x64" || v8_current_cpu == "arm64" ||
+      v8_current_cpu == "loong64" || v8_current_cpu == "riscv64"
+
   # Enable young generation in cppgc.
   cppgc_enable_young_generation = false
 
@@ -192,6 +197,11 @@ v8_path_prefix = get_path_info("../", "abspath")
 
 v8_inspector_js_protocol = v8_path_prefix + "/include/js_protocol.pdl"
 
+if (cppgc_enable_caged_heap) {
+  # Always enable young generation compile time flag if caged heap is enabled.
+  cppgc_enable_young_generation = true
+}
+
 ###############################################################################
 # Templates
 #
diff --git a/test/unittests/heap/cppgc/age-table-unittest.cc b/test/unittests/heap/cppgc/age-table-unittest.cc
index d616cc5adb9..ca4045f2c67 100644
--- a/test/unittests/heap/cppgc/age-table-unittest.cc
+++ b/test/unittests/heap/cppgc/age-table-unittest.cc
@@ -22,9 +22,7 @@ class AgeTableTest : public testing::TestWithHeap {
   using AdjacentCardsPolicy = AgeTable::AdjacentCardsPolicy;
   static constexpr auto kCardSizeInBytes = AgeTable::kCardSizeInBytes;
 
-  AgeTableTest()
-      : disallow_gc_(GetHeapHandle()),
-        age_table_(CagedHeapLocalData::Get().age_table) {}
+  AgeTableTest() : age_table_(CagedHeapLocalData::Get().age_table) {}
 
   ~AgeTableTest() override { age_table_.ResetForTesting(); }
 
@@ -76,7 +74,6 @@ class AgeTableTest : public testing::TestWithHeap {
   }
 
  private:
-  subtle::DisallowGarbageCollectionScope disallow_gc_;
   std::vector<std::unique_ptr<BasePage, void (*)(BasePage*)>> allocated_pages_;
   AgeTable& age_table_;
 };
@@ -84,6 +81,7 @@ class AgeTableTest : public testing::TestWithHeap {
 }  // namespace
 
 TEST_F(AgeTableTest, SetAgeForNormalPage) {
+  subtle::DisallowGarbageCollectionScope disallow_gc(*Heap::From(GetHeap()));
   auto* page = AllocateNormalPage();
   // By default, everything is old.
   AssertAgeForAddressRange(page->PayloadStart(), page->PayloadEnd(), Age::kOld);
@@ -96,6 +94,7 @@ TEST_F(AgeTableTest, SetAgeForNormalPage) {
 }
 
 TEST_F(AgeTableTest, SetAgeForLargePage) {
+  subtle::DisallowGarbageCollectionScope disallow_gc(*Heap::From(GetHeap()));
   auto* page = AllocateLargePage();
   // By default, everything is old.
   AssertAgeForAddressRange(page->PayloadStart(), page->PayloadEnd(), Age::kOld);
@@ -108,6 +107,7 @@ TEST_F(AgeTableTest, SetAgeForLargePage) {
 }
 
 TEST_F(AgeTableTest, SetAgeForSingleCardWithUnalignedAddresses) {
+  subtle::DisallowGarbageCollectionScope disallow_gc(*Heap::From(GetHeap()));
   auto* page = AllocateNormalPage();
   Address object_begin = reinterpret_cast<Address>(
       RoundUp(reinterpret_cast<uintptr_t>(page->PayloadStart()),
@@ -128,6 +128,7 @@ TEST_F(AgeTableTest, SetAgeForSingleCardWithUnalignedAddresses) {
 }
 
 TEST_F(AgeTableTest, SetAgeForSingleCardWithAlignedAddresses) {
+  subtle::DisallowGarbageCollectionScope disallow_gc(*Heap::From(GetHeap()));
   auto* page = AllocateNormalPage();
   Address object_begin = reinterpret_cast<Address>(RoundUp(
       reinterpret_cast<uintptr_t>(page->PayloadStart()), kCardSizeInBytes));
@@ -144,6 +145,7 @@ TEST_F(AgeTableTest, SetAgeForSingleCardWithAlignedAddresses) {
 }
 
 TEST_F(AgeTableTest, SetAgeForSingleCardWithAlignedBeginButUnalignedEnd) {
+  subtle::DisallowGarbageCollectionScope disallow_gc(*Heap::From(GetHeap()));
   auto* page = AllocateNormalPage();
   Address object_begin = reinterpret_cast<Address>(RoundUp(
       reinterpret_cast<uintptr_t>(page->PayloadStart()), kCardSizeInBytes));
@@ -160,6 +162,7 @@ TEST_F(AgeTableTest, SetAgeForSingleCardWithAlignedBeginButUnalignedEnd) {
 }
 
 TEST_F(AgeTableTest, SetAgeForMultipleCardsWithUnalignedAddresses) {
+  subtle::DisallowGarbageCollectionScope disallow_gc(*Heap::From(GetHeap()));
   static constexpr size_t kNumberOfCards = 4;
   auto* page = AllocateNormalPage();
   Address object_begin = reinterpret_cast<Address>(
@@ -179,6 +182,7 @@ TEST_F(AgeTableTest, SetAgeForMultipleCardsWithUnalignedAddresses) {
 }
 
 TEST_F(AgeTableTest, SetAgeForMultipleCardsConsiderAdjacentCards) {
+  subtle::DisallowGarbageCollectionScope disallow_gc(*Heap::From(GetHeap()));
   static constexpr size_t kNumberOfCards = 4;
   auto* page = AllocateNormalPage();
   Address object_begin = reinterpret_cast<Address>(
@@ -200,6 +204,7 @@ TEST_F(AgeTableTest, SetAgeForMultipleCardsConsiderAdjacentCards) {
 }
 
 TEST_F(AgeTableTest, MarkAllCardsAsYoung) {
+  subtle::DisallowGarbageCollectionScope disallow_gc(*Heap::From(GetHeap()));
   uint8_t* heap_start = reinterpret_cast<uint8_t*>(CagedHeapBase::GetBase());
   void* heap_end = heap_start + kCagedHeapReservationSize - 1;
   AssertAgeForAddressRange(heap_start, heap_end, Age::kOld);
-- 
2.35.1

