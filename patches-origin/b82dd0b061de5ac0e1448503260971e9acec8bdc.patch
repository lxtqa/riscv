From b82dd0b061de5ac0e1448503260971e9acec8bdc Mon Sep 17 00:00:00 2001
From: Clemens Backes <clemensb@chromium.org>
Date: Fri, 30 Apr 2021 12:00:17 +0200
Subject: [PATCH] [cleanup][compiler] Remove redundant NOLINT annotations

cpplint rules change over time, and we change the exact rules we enable
for v8. This CL removes NOLINT annotations which are not needed
according to the currently enabled rules.

R=mslekova@chromium.org

Bug: v8:11717
Change-Id: Ib7dc2c9dbb1710f4fe47e083df7e373e8b8aef27
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/2859956
Reviewed-by: Maya Lekova <mslekova@chromium.org>
Commit-Queue: Clemens Backes <clemensb@chromium.org>
Cr-Commit-Position: refs/heads/master@{#74353}
---
 src/compiler/backend/arm/code-generator-arm.cc         | 2 +-
 src/compiler/backend/arm64/code-generator-arm64.cc     | 2 +-
 src/compiler/backend/ia32/code-generator-ia32.cc       | 2 +-
 src/compiler/backend/mips/code-generator-mips.cc       | 2 +-
 src/compiler/backend/mips64/code-generator-mips64.cc   | 2 +-
 src/compiler/backend/ppc/code-generator-ppc.cc         | 2 +-
 src/compiler/backend/riscv64/code-generator-riscv64.cc | 2 +-
 src/compiler/backend/s390/code-generator-s390.cc       | 2 +-
 src/compiler/graph-visualizer.cc                       | 2 +-
 src/compiler/graph-visualizer.h                        | 3 ++-
 src/compiler/int64-lowering.cc                         | 2 +-
 src/compiler/js-call-reducer.cc                        | 2 +-
 src/compiler/operator.h                                | 2 +-
 src/compiler/pipeline.cc                               | 2 +-
 src/compiler/types.cc                                  | 3 +--
 src/compiler/types.h                                   | 2 +-
 src/compiler/verifier.cc                               | 2 +-
 17 files changed, 18 insertions(+), 18 deletions(-)

diff --git a/src/compiler/backend/arm/code-generator-arm.cc b/src/compiler/backend/arm/code-generator-arm.cc
index 1214cc5274f..b511403747f 100644
--- a/src/compiler/backend/arm/code-generator-arm.cc
+++ b/src/compiler/backend/arm/code-generator-arm.cc
@@ -3576,7 +3576,7 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
 #undef ASSEMBLE_SIMD_SHIFT_RIGHT
   }
   return kSuccess;
-}  // NOLINT(readability/fn_size)
+}
 
 // Assembles branches after an instruction.
 void CodeGenerator::AssembleArchBranch(Instruction* instr, BranchInfo* branch) {
diff --git a/src/compiler/backend/arm64/code-generator-arm64.cc b/src/compiler/backend/arm64/code-generator-arm64.cc
index a238530aa05..bdd5398e7c2 100644
--- a/src/compiler/backend/arm64/code-generator-arm64.cc
+++ b/src/compiler/backend/arm64/code-generator-arm64.cc
@@ -2862,7 +2862,7 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
       SIMD_REDUCE_OP_CASE(kArm64I8x16AllTrue, Uminv, kFormatB, 16B);
   }
   return kSuccess;
-}  // NOLINT(readability/fn_size)
+}
 
 #undef SIMD_UNOP_CASE
 #undef SIMD_BINOP_CASE
diff --git a/src/compiler/backend/ia32/code-generator-ia32.cc b/src/compiler/backend/ia32/code-generator-ia32.cc
index 2c779d82df7..a5b9e2acf55 100644
--- a/src/compiler/backend/ia32/code-generator-ia32.cc
+++ b/src/compiler/backend/ia32/code-generator-ia32.cc
@@ -4189,7 +4189,7 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
       break;
   }
   return kSuccess;
-}  // NOLINT(readability/fn_size)
+}
 
 static Condition FlagsConditionToCondition(FlagsCondition condition) {
   switch (condition) {
diff --git a/src/compiler/backend/mips/code-generator-mips.cc b/src/compiler/backend/mips/code-generator-mips.cc
index 03f81d7ffc4..8cddc9b8939 100644
--- a/src/compiler/backend/mips/code-generator-mips.cc
+++ b/src/compiler/backend/mips/code-generator-mips.cc
@@ -3652,7 +3652,7 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
     }
   }
   return kSuccess;
-}  // NOLINT(readability/fn_size)
+}
 
 void AssembleBranchToLabels(CodeGenerator* gen, TurboAssembler* tasm,
                             Instruction* instr, FlagsCondition condition,
diff --git a/src/compiler/backend/mips64/code-generator-mips64.cc b/src/compiler/backend/mips64/code-generator-mips64.cc
index f427e9c2361..b7fc5e3aebf 100644
--- a/src/compiler/backend/mips64/code-generator-mips64.cc
+++ b/src/compiler/backend/mips64/code-generator-mips64.cc
@@ -3817,7 +3817,7 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
     }
   }
   return kSuccess;
-}  // NOLINT(readability/fn_size)
+}
 
 #define UNSUPPORTED_COND(opcode, condition)                                    \
   StdoutStream{} << "Unsupported " << #opcode << " condition: \"" << condition \
diff --git a/src/compiler/backend/ppc/code-generator-ppc.cc b/src/compiler/backend/ppc/code-generator-ppc.cc
index d415493e6cd..64c90f1e534 100644
--- a/src/compiler/backend/ppc/code-generator-ppc.cc
+++ b/src/compiler/backend/ppc/code-generator-ppc.cc
@@ -3823,7 +3823,7 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
       UNREACHABLE();
   }
   return kSuccess;
-}  // NOLINT(readability/fn_size)
+}
 
 // Assembles branches after an instruction.
 void CodeGenerator::AssembleArchBranch(Instruction* instr, BranchInfo* branch) {
diff --git a/src/compiler/backend/riscv64/code-generator-riscv64.cc b/src/compiler/backend/riscv64/code-generator-riscv64.cc
index 608a6672942..2ad48c2f6bb 100644
--- a/src/compiler/backend/riscv64/code-generator-riscv64.cc
+++ b/src/compiler/backend/riscv64/code-generator-riscv64.cc
@@ -1849,7 +1849,7 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
       UNIMPLEMENTED();
   }
   return kSuccess;
-}  // NOLINT(readability/fn_size)
+}
 
 #define UNSUPPORTED_COND(opcode, condition)                                    \
   StdoutStream{} << "Unsupported " << #opcode << " condition: \"" << condition \
diff --git a/src/compiler/backend/s390/code-generator-s390.cc b/src/compiler/backend/s390/code-generator-s390.cc
index b698a6948af..92f3e904018 100644
--- a/src/compiler/backend/s390/code-generator-s390.cc
+++ b/src/compiler/backend/s390/code-generator-s390.cc
@@ -3875,7 +3875,7 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
       UNREACHABLE();
   }
   return kSuccess;
-}  // NOLINT(readability/fn_size)
+}
 
 // Assembles branches after an instruction.
 void CodeGenerator::AssembleArchBranch(Instruction* instr, BranchInfo* branch) {
diff --git a/src/compiler/graph-visualizer.cc b/src/compiler/graph-visualizer.cc
index e8b78e5762e..cc1d07085fe 100644
--- a/src/compiler/graph-visualizer.cc
+++ b/src/compiler/graph-visualizer.cc
@@ -421,7 +421,7 @@ std::ostream& operator<<(std::ostream& os, const GraphAsJSON& ad) {
 
 class GraphC1Visualizer {
  public:
-  GraphC1Visualizer(std::ostream& os, Zone* zone);  // NOLINT
+  GraphC1Visualizer(std::ostream& os, Zone* zone);
   GraphC1Visualizer(const GraphC1Visualizer&) = delete;
   GraphC1Visualizer& operator=(const GraphC1Visualizer&) = delete;
 
diff --git a/src/compiler/graph-visualizer.h b/src/compiler/graph-visualizer.h
index 55859330157..39a2ef50210 100644
--- a/src/compiler/graph-visualizer.h
+++ b/src/compiler/graph-visualizer.h
@@ -6,7 +6,8 @@
 #define V8_COMPILER_GRAPH_VISUALIZER_H_
 
 #include <stdio.h>
-#include <fstream>  // NOLINT(readability/streams)
+
+#include <fstream>
 #include <iosfwd>
 #include <memory>
 
diff --git a/src/compiler/int64-lowering.cc b/src/compiler/int64-lowering.cc
index 706cd7de509..69f2611a2eb 100644
--- a/src/compiler/int64-lowering.cc
+++ b/src/compiler/int64-lowering.cc
@@ -1030,7 +1030,7 @@ void Int64Lowering::LowerNode(Node* node) {
 
     default: { DefaultLowering(node); }
   }
-}  // NOLINT(readability/fn_size)
+}
 
 void Int64Lowering::LowerComparison(Node* node, const Operator* high_word_op,
                                     const Operator* low_word_op) {
diff --git a/src/compiler/js-call-reducer.cc b/src/compiler/js-call-reducer.cc
index 27fb4337e9a..c89fe97a6c6 100644
--- a/src/compiler/js-call-reducer.cc
+++ b/src/compiler/js-call-reducer.cc
@@ -43,7 +43,7 @@ namespace internal {
 namespace compiler {
 
 // Shorter lambda declarations with less visual clutter.
-#define _ [&]()  // NOLINT(whitespace/braces)
+#define _ [&]()
 
 class JSCallReducerAssembler : public JSGraphAssembler {
  protected:
diff --git a/src/compiler/operator.h b/src/compiler/operator.h
index e47441208f1..4206e753f1e 100644
--- a/src/compiler/operator.h
+++ b/src/compiler/operator.h
@@ -5,7 +5,7 @@
 #ifndef V8_COMPILER_OPERATOR_H_
 #define V8_COMPILER_OPERATOR_H_
 
-#include <ostream>  // NOLINT(readability/streams)
+#include <ostream>
 
 #include "src/base/compiler-specific.h"
 #include "src/base/flags.h"
diff --git a/src/compiler/pipeline.cc b/src/compiler/pipeline.cc
index 5fdb0f60825..87496115d36 100644
--- a/src/compiler/pipeline.cc
+++ b/src/compiler/pipeline.cc
@@ -4,7 +4,7 @@
 
 #include "src/compiler/pipeline.h"
 
-#include <fstream>  // NOLINT(readability/streams)
+#include <fstream>
 #include <iostream>
 #include <memory>
 #include <sstream>
diff --git a/src/compiler/types.cc b/src/compiler/types.cc
index 236cff3cc68..657a929e425 100644
--- a/src/compiler/types.cc
+++ b/src/compiler/types.cc
@@ -969,8 +969,7 @@ const char* BitsetType::Name(bitset bits) {
   }
 }
 
-void BitsetType::Print(std::ostream& os,  // NOLINT
-                       bitset bits) {
+void BitsetType::Print(std::ostream& os, bitset bits) {
   DisallowGarbageCollection no_gc;
   const char* name = Name(bits);
   if (name != nullptr) {
diff --git a/src/compiler/types.h b/src/compiler/types.h
index 1174551c815..a28a28c59e9 100644
--- a/src/compiler/types.h
+++ b/src/compiler/types.h
@@ -267,7 +267,7 @@ class V8_EXPORT_PRIVATE BitsetType {
   static bitset ExpandInternals(bitset bits);
 
   static const char* Name(bitset);
-  static void Print(std::ostream& os, bitset);  // NOLINT
+  static void Print(std::ostream& os, bitset);
 #ifdef DEBUG
   static void Print(bitset);
 #endif
diff --git a/src/compiler/verifier.cc b/src/compiler/verifier.cc
index b19e558f73f..9b49f357578 100644
--- a/src/compiler/verifier.cc
+++ b/src/compiler/verifier.cc
@@ -1852,7 +1852,7 @@ void Verifier::Visitor::Check(Node* node, const AllNodes& all) {
       // TODO(rossberg): Check.
       break;
   }
-}  // NOLINT(readability/fn_size)
+}
 
 void Verifier::Run(Graph* graph, Typing typing, CheckInputs check_inputs,
                    CodeType code_type) {
-- 
2.35.1

