From 52c7ab565417fffa22a7c938cbd3e42baf5410b6 Mon Sep 17 00:00:00 2001
From: Clemens Backes <clemensb@chromium.org>
Date: Thu, 29 Apr 2021 18:54:13 +0200
Subject: [PATCH] [cleanup][test] Remove redundant NOLINT annotations

cpplint rules change over time, and we change the exact rules we enable
for v8. This CL removes NOLINT annotations which are not needed
according to the currently enabled rules.

R=ahaas@chromium.org

Bug: v8:11717
Change-Id: Ica92f4ddc9c351c1c63147cbcf050086ca26cc07
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/2859854
Commit-Queue: Clemens Backes <clemensb@chromium.org>
Reviewed-by: Andreas Haas <ahaas@chromium.org>
Cr-Commit-Position: refs/heads/master@{#74297}
---
 test/cctest/cctest.cc                         |  2 +-
 test/cctest/test-allocation.cc                |  2 +-
 test/cctest/test-api.cc                       | 10 +-
 test/cctest/test-assembler-arm.cc             |  2 +-
 test/cctest/test-assembler-mips.cc            |  6 +-
 test/cctest/test-assembler-mips64.cc          |  6 +-
 test/cctest/test-assembler-riscv64.cc         |  2 +-
 test/cctest/test-compiler.cc                  |  2 +-
 test/cctest/test-double.cc                    | 15 ++-
 test/cctest/test-log-stack-tracer.cc          |  2 +-
 test/cctest/test-macro-assembler-mips.cc      |  3 +-
 test/cctest/test-macro-assembler-mips64.cc    |  3 +-
 test/cctest/test-macro-assembler-riscv64.cc   |  2 +-
 test/cctest/test-simple-riscv64.cc            |  2 +-
 test/cctest/test-strings.cc                   |  2 +-
 test/fuzzer/inspector-fuzzer.cc               |  4 +-
 test/inspector/inspector-test.cc              |  4 +-
 test/inspector/task-runner.cc                 |  4 +-
 .../base/division-by-constant-unittest.cc     |  2 +-
 .../instruction-selector-arm64-unittest.cc    |  8 +-
 .../heap/unified-heap-snapshot-unittest.cc    | 97 +++++++------------
 test/unittests/test-utils.cc                  |  2 +-
 test/unittests/test-utils.h                   |  2 +-
 test/unittests/utils/allocation-unittest.cc   |  4 +-
 24 files changed, 75 insertions(+), 113 deletions(-)

diff --git a/test/cctest/cctest.cc b/test/cctest/cctest.cc
index 7d5115697a..6707d2b83e 100644
--- a/test/cctest/cctest.cc
+++ b/test/cctest/cctest.cc
@@ -46,7 +46,7 @@
 #endif  // V8_USE_PERFETTO
 
 #if V8_OS_WIN
-#include <windows.h>  // NOLINT
+#include <windows.h>
 #if V8_CC_MSVC
 #include <crtdbg.h>
 #endif
diff --git a/test/cctest/test-allocation.cc b/test/cctest/test-allocation.cc
index d8086b2c7a..2078aeb02a 100644
--- a/test/cctest/test-allocation.cc
+++ b/test/cctest/test-allocation.cc
@@ -7,7 +7,7 @@
 #if V8_OS_POSIX
 #include <setjmp.h>
 #include <signal.h>
-#include <unistd.h>  // NOLINT
+#include <unistd.h>
 #endif
 
 #include "src/init/v8.h"
diff --git a/test/cctest/test-api.cc b/test/cctest/test-api.cc
index 71b3efbc82..f902097fc9 100644
--- a/test/cctest/test-api.cc
+++ b/test/cctest/test-api.cc
@@ -34,7 +34,7 @@
 #include <string>
 
 #if V8_OS_POSIX
-#include <unistd.h>  // NOLINT
+#include <unistd.h>
 #endif
 
 #include "include/v8-fast-api-calls.h"
@@ -8534,12 +8534,8 @@ THREADED_TEST(StringWrite) {
   CHECK_EQ(0, str->Write(isolate, nullptr, 0, 0, String::NO_NULL_TERMINATION));
 }
 
-
-static void Utf16Helper(
-    LocalContext& context,  // NOLINT
-    const char* name,
-    const char* lengths_name,
-    int len) {
+static void Utf16Helper(LocalContext& context, const char* name,
+                        const char* lengths_name, int len) {
   Local<v8::Array> a = Local<v8::Array>::Cast(
       context->Global()->Get(context.local(), v8_str(name)).ToLocalChecked());
   Local<v8::Array> alens =
diff --git a/test/cctest/test-assembler-arm.cc b/test/cctest/test-assembler-arm.cc
index 1dd4ecfbcb..475fe71e92 100644
--- a/test/cctest/test-assembler-arm.cc
+++ b/test/cctest/test-assembler-arm.cc
@@ -25,7 +25,7 @@
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-#include <iostream>  // NOLINT(readability/streams)
+#include <iostream>
 
 #include "src/base/utils/random-number-generator.h"
 #include "src/codegen/assembler-inl.h"
diff --git a/test/cctest/test-assembler-mips.cc b/test/cctest/test-assembler-mips.cc
index bb6590d0a5..50428d815f 100644
--- a/test/cctest/test-assembler-mips.cc
+++ b/test/cctest/test-assembler-mips.cc
@@ -25,9 +25,7 @@
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-#include <iostream>  // NOLINT(readability/streams)
-
-#include "src/init/v8.h"
+#include <iostream>
 
 #include "src/base/utils/random-number-generator.h"
 #include "src/codegen/assembler-inl.h"
@@ -35,7 +33,7 @@
 #include "src/diagnostics/disassembler.h"
 #include "src/execution/simulator.h"
 #include "src/heap/factory.h"
-
+#include "src/init/v8.h"
 #include "test/cctest/cctest.h"
 
 namespace v8 {
diff --git a/test/cctest/test-assembler-mips64.cc b/test/cctest/test-assembler-mips64.cc
index 9cf7404e18..7ae265e687 100644
--- a/test/cctest/test-assembler-mips64.cc
+++ b/test/cctest/test-assembler-mips64.cc
@@ -25,9 +25,7 @@
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-#include <iostream>  // NOLINT(readability/streams)
-
-#include "src/init/v8.h"
+#include <iostream>
 
 #include "src/base/utils/random-number-generator.h"
 #include "src/codegen/assembler-inl.h"
@@ -35,7 +33,7 @@
 #include "src/diagnostics/disassembler.h"
 #include "src/execution/simulator.h"
 #include "src/heap/factory.h"
-
+#include "src/init/v8.h"
 #include "test/cctest/cctest.h"
 
 namespace v8 {
diff --git a/test/cctest/test-assembler-riscv64.cc b/test/cctest/test-assembler-riscv64.cc
index c9429f2bc1..01b0efacc8 100644
--- a/test/cctest/test-assembler-riscv64.cc
+++ b/test/cctest/test-assembler-riscv64.cc
@@ -27,7 +27,7 @@
 
 #include <math.h>
 
-#include <iostream>  // NOLINT(readability/streams)
+#include <iostream>
 
 #include "src/base/utils/random-number-generator.h"
 #include "src/codegen/assembler-inl.h"
diff --git a/test/cctest/test-compiler.cc b/test/cctest/test-compiler.cc
index 6f2b95beb9..d044c7c405 100644
--- a/test/cctest/test-compiler.cc
+++ b/test/cctest/test-compiler.cc
@@ -693,7 +693,7 @@ void TestCompileFunctionInContextToStringImpl() {
     }                                                                      \
   } while (false)
 
-  {  // NOLINT
+  {
     CcTest::InitializeVM();
     v8::Isolate* isolate = CcTest::isolate();
     v8::HandleScope scope(isolate);
diff --git a/test/cctest/test-double.cc b/test/cctest/test-double.cc
index e2f2ddcbfb..8e78b63af5 100644
--- a/test/cctest/test-double.cc
+++ b/test/cctest/test-double.cc
@@ -156,7 +156,7 @@ TEST(NormalizedBoundaries) {
   // 1.5 does not have a significand of the form 2^p (for some p).
   // Therefore its boundaries are at the same distance.
   CHECK(diy_fp.f() - boundary_minus.f() == boundary_plus.f() - diy_fp.f());
-  CHECK((1 << 10) == diy_fp.f() - boundary_minus.f());  // NOLINT
+  CHECK((1 << 10) == diy_fp.f() - boundary_minus.f());
 
   diy_fp = Double(1.0).AsNormalizedDiyFp();
   Double(1.0).NormalizedBoundaries(&boundary_minus, &boundary_plus);
@@ -165,8 +165,8 @@ TEST(NormalizedBoundaries) {
   // 1.0 does have a significand of the form 2^p (for some p).
   // Therefore its lower boundary is twice as close as the upper boundary.
   CHECK_GT(boundary_plus.f() - diy_fp.f(), diy_fp.f() - boundary_minus.f());
-  CHECK((1 << 9) == diy_fp.f() - boundary_minus.f());  // NOLINT
-  CHECK((1 << 10) == boundary_plus.f() - diy_fp.f());  // NOLINT
+  CHECK((1 << 9) == diy_fp.f() - boundary_minus.f());
+  CHECK((1 << 10) == boundary_plus.f() - diy_fp.f());
 
   uint64_t min_double64 = 0x0000'0000'0000'0001;
   diy_fp = Double(min_double64).AsNormalizedDiyFp();
@@ -177,8 +177,7 @@ TEST(NormalizedBoundaries) {
   // Therefore its boundaries are at the same distance.
   CHECK(diy_fp.f() - boundary_minus.f() == boundary_plus.f() - diy_fp.f());
   // Denormals have their boundaries much closer.
-  CHECK((static_cast<uint64_t>(1) << 62) ==
-        diy_fp.f() - boundary_minus.f());  // NOLINT
+  CHECK((static_cast<uint64_t>(1) << 62) == diy_fp.f() - boundary_minus.f());
 
   uint64_t smallest_normal64 = 0x0010'0000'0000'0000;
   diy_fp = Double(smallest_normal64).AsNormalizedDiyFp();
@@ -189,7 +188,7 @@ TEST(NormalizedBoundaries) {
   // Even though the significand is of the form 2^p (for some p), its boundaries
   // are at the same distance. (This is the only exception).
   CHECK(diy_fp.f() - boundary_minus.f() == boundary_plus.f() - diy_fp.f());
-  CHECK((1 << 10) == diy_fp.f() - boundary_minus.f());  // NOLINT
+  CHECK((1 << 10) == diy_fp.f() - boundary_minus.f());
 
   uint64_t largest_denormal64 = 0x000F'FFFF'FFFF'FFFF;
   diy_fp = Double(largest_denormal64).AsNormalizedDiyFp();
@@ -198,7 +197,7 @@ TEST(NormalizedBoundaries) {
   CHECK_EQ(diy_fp.e(), boundary_minus.e());
   CHECK_EQ(diy_fp.e(), boundary_plus.e());
   CHECK(diy_fp.f() - boundary_minus.f() == boundary_plus.f() - diy_fp.f());
-  CHECK((1 << 11) == diy_fp.f() - boundary_minus.f());  // NOLINT
+  CHECK((1 << 11) == diy_fp.f() - boundary_minus.f());
 
   uint64_t max_double64 = 0x7FEF'FFFF'FFFF'FFFF;
   diy_fp = Double(max_double64).AsNormalizedDiyFp();
@@ -208,7 +207,7 @@ TEST(NormalizedBoundaries) {
   // max-value does not have a significand of the form 2^p (for some p).
   // Therefore its boundaries are at the same distance.
   CHECK(diy_fp.f() - boundary_minus.f() == boundary_plus.f() - diy_fp.f());
-  CHECK((1 << 10) == diy_fp.f() - boundary_minus.f());  // NOLINT
+  CHECK((1 << 10) == diy_fp.f() - boundary_minus.f());
 }
 
 
diff --git a/test/cctest/test-log-stack-tracer.cc b/test/cctest/test-log-stack-tracer.cc
index 0f7b9a0fcc..61e9a2b965 100644
--- a/test/cctest/test-log-stack-tracer.cc
+++ b/test/cctest/test-log-stack-tracer.cc
@@ -245,7 +245,7 @@ static void CFuncDoTrace(byte dummy_param) {
 #elif V8_CC_MSVC
   // Approximate a frame pointer address. We compile without base pointers,
   // so we can't trust ebp/rbp.
-  fp = reinterpret_cast<Address>(&dummy_param) - 2 * sizeof(void*);  // NOLINT
+  fp = reinterpret_cast<Address>(&dummy_param) - 2 * sizeof(void*);
 #else
 #error Unexpected platform.
 #endif
diff --git a/test/cctest/test-macro-assembler-mips.cc b/test/cctest/test-macro-assembler-mips.cc
index a149c0cca9..03d778ef24 100644
--- a/test/cctest/test-macro-assembler-mips.cc
+++ b/test/cctest/test-macro-assembler-mips.cc
@@ -26,7 +26,8 @@
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <stdlib.h>
-#include <iostream>  // NOLINT(readability/streams)
+
+#include <iostream>
 
 #include "src/api/api-inl.h"
 #include "src/base/utils/random-number-generator.h"
diff --git a/test/cctest/test-macro-assembler-mips64.cc b/test/cctest/test-macro-assembler-mips64.cc
index 4b91b5b0e9..69cfa0cfda 100644
--- a/test/cctest/test-macro-assembler-mips64.cc
+++ b/test/cctest/test-macro-assembler-mips64.cc
@@ -26,7 +26,8 @@
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <stdlib.h>
-#include <iostream>  // NOLINT(readability/streams)
+
+#include <iostream>
 
 #include "src/codegen/assembler-inl.h"
 #include "src/codegen/macro-assembler.h"
diff --git a/test/cctest/test-macro-assembler-riscv64.cc b/test/cctest/test-macro-assembler-riscv64.cc
index 24582bcb7f..3817026a24 100644
--- a/test/cctest/test-macro-assembler-riscv64.cc
+++ b/test/cctest/test-macro-assembler-riscv64.cc
@@ -27,7 +27,7 @@
 
 #include <stdlib.h>
 
-#include <iostream>  // NOLINT(readability/streams)
+#include <iostream>
 
 #include "src/base/utils/random-number-generator.h"
 #include "src/codegen/assembler-inl.h"
diff --git a/test/cctest/test-simple-riscv64.cc b/test/cctest/test-simple-riscv64.cc
index 991c6c09da..c5feda47df 100644
--- a/test/cctest/test-simple-riscv64.cc
+++ b/test/cctest/test-simple-riscv64.cc
@@ -25,7 +25,7 @@
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-#include <iostream>  // NOLINT(readability/streams)
+#include <iostream>
 
 #include "src/base/utils/random-number-generator.h"
 #include "src/codegen/assembler-inl.h"
diff --git a/test/cctest/test-strings.cc b/test/cctest/test-strings.cc
index 735040a4c5..7c3016eeb8 100644
--- a/test/cctest/test-strings.cc
+++ b/test/cctest/test-strings.cc
@@ -1087,7 +1087,7 @@ TEST(ExternalShortStringAdd) {
       "  var non_one_byte_chars = "
       "'\\u1234\\u1234\\u1234\\u1234\\u1234\\u1234\\u1234\\u1234\\u1234\\u1"
       "234\\u1234\\u1234\\u1234\\u1234\\u1234\\u1234\\u1234\\u1234\\u1234\\"
-      "u1234';"  // NOLINT
+      "u1234';"
       "  if (one_byte_chars.length != max_length) return 1;"
       "  if (non_one_byte_chars.length != max_length) return 2;"
       "  var one_byte = Array(max_length + 1);"
diff --git a/test/fuzzer/inspector-fuzzer.cc b/test/fuzzer/inspector-fuzzer.cc
index 26d14ff793..60d074418e 100644
--- a/test/fuzzer/inspector-fuzzer.cc
+++ b/test/fuzzer/inspector-fuzzer.cc
@@ -3,8 +3,8 @@
 // found in the LICENSE file.
 
 #if !defined(_WIN32) && !defined(_WIN64)
-#include <unistd.h>  // NOLINT
-#endif               // !defined(_WIN32) && !defined(_WIN64)
+#include <unistd.h>
+#endif  // !defined(_WIN32) && !defined(_WIN64)
 
 #include <locale.h>
 
diff --git a/test/inspector/inspector-test.cc b/test/inspector/inspector-test.cc
index e168edc998..ce3caf7661 100644
--- a/test/inspector/inspector-test.cc
+++ b/test/inspector/inspector-test.cc
@@ -3,8 +3,8 @@
 // found in the LICENSE file.
 
 #if !defined(_WIN32) && !defined(_WIN64)
-#include <unistd.h>  // NOLINT
-#endif               // !defined(_WIN32) && !defined(_WIN64)
+#include <unistd.h>
+#endif  // !defined(_WIN32) && !defined(_WIN64)
 
 #include <locale.h>
 
diff --git a/test/inspector/task-runner.cc b/test/inspector/task-runner.cc
index ebd0b6378c..f4270348de 100644
--- a/test/inspector/task-runner.cc
+++ b/test/inspector/task-runner.cc
@@ -8,8 +8,8 @@
 #include "src/flags/flags.h"
 
 #if !defined(_WIN32) && !defined(_WIN64)
-#include <unistd.h>  // NOLINT
-#endif               // !defined(_WIN32) && !defined(_WIN64)
+#include <unistd.h>
+#endif  // !defined(_WIN32) && !defined(_WIN64)
 
 namespace v8 {
 namespace internal {
diff --git a/test/unittests/base/division-by-constant-unittest.cc b/test/unittests/base/division-by-constant-unittest.cc
index 19a084c5de..8fe57c21bd 100644
--- a/test/unittests/base/division-by-constant-unittest.cc
+++ b/test/unittests/base/division-by-constant-unittest.cc
@@ -8,7 +8,7 @@
 
 #include <stdint.h>
 
-#include <ostream>  // NOLINT
+#include <ostream>
 
 #include "testing/gtest-support.h"
 
diff --git a/test/unittests/compiler/arm64/instruction-selector-arm64-unittest.cc b/test/unittests/compiler/arm64/instruction-selector-arm64-unittest.cc
index 11d5f30e10..f14f6a962e 100644
--- a/test/unittests/compiler/arm64/instruction-selector-arm64-unittest.cc
+++ b/test/unittests/compiler/arm64/instruction-selector-arm64-unittest.cc
@@ -5118,11 +5118,9 @@ namespace {
 // Builds a call with the specified signature and nodes as arguments.
 // Then checks that the correct number of kArm64Poke and kArm64PokePair were
 // generated.
-void TestPokePair(
-    InstructionSelectorTest::StreamBuilder* m,  // NOLINT(runtime/references)
-    Zone* zone,
-    MachineSignature::Builder* builder,  // NOLINT(runtime/references)
-    Node* nodes[], int num_nodes, int expected_poke_pair, int expected_poke) {
+void TestPokePair(InstructionSelectorTest::StreamBuilder* m, Zone* zone,
+                  MachineSignature::Builder* builder, Node* nodes[],
+                  int num_nodes, int expected_poke_pair, int expected_poke) {
   auto call_descriptor =
       InstructionSelectorTest::StreamBuilder::MakeSimpleCallDescriptor(
           zone, builder->Build());
diff --git a/test/unittests/heap/unified-heap-snapshot-unittest.cc b/test/unittests/heap/unified-heap-snapshot-unittest.cc
index f58569eb10..88b81eb17e 100644
--- a/test/unittests/heap/unified-heap-snapshot-unittest.cc
+++ b/test/unittests/heap/unified-heap-snapshot-unittest.cc
@@ -139,11 +139,8 @@ TEST_F(UnifiedHeapSnapshotTest, RetainedByCppRoot) {
       cppgc::MakeGarbageCollected<GCed>(allocation_handle());
   const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
   EXPECT_TRUE(IsValidSnapshot(snapshot));
-  EXPECT_TRUE(
-      ContainsRetainingPath(*snapshot, {
-                                           kExpectedCppRootsName,   // NOLINT
-                                           GetExpectedName<GCed>()  // NOLINT
-                                       }));
+  EXPECT_TRUE(ContainsRetainingPath(
+      *snapshot, {kExpectedCppRootsName, GetExpectedName<GCed>()}));
 }
 
 TEST_F(UnifiedHeapSnapshotTest, RetainedByCppCrossThreadRoot) {
@@ -152,10 +149,7 @@ TEST_F(UnifiedHeapSnapshotTest, RetainedByCppCrossThreadRoot) {
   const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
   EXPECT_TRUE(IsValidSnapshot(snapshot));
   EXPECT_TRUE(ContainsRetainingPath(
-      *snapshot, {
-                     kExpectedCppCrossThreadRootsName,  // NOLINT
-                     GetExpectedName<GCed>()            // NOLINT
-                 }));
+      *snapshot, {kExpectedCppCrossThreadRootsName, GetExpectedName<GCed>()}));
 }
 
 TEST_F(UnifiedHeapSnapshotTest, RetainingUnnamedType) {
@@ -168,10 +162,8 @@ TEST_F(UnifiedHeapSnapshotTest, RetainingUnnamedType) {
         *snapshot, {kExpectedCppRootsName, cppgc::NameProvider::kHiddenName}));
   } else {
     EXPECT_TRUE(ContainsRetainingPath(
-        *snapshot, {
-                       kExpectedCppRootsName,              // NOLINT
-                       GetExpectedName<BaseWithoutName>()  // NOLINT
-                   }));
+        *snapshot,
+        {kExpectedCppRootsName, GetExpectedName<BaseWithoutName>()}));
   }
 }
 
@@ -183,11 +175,8 @@ TEST_F(UnifiedHeapSnapshotTest, RetainingNamedThroughUnnamed) {
   const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
   EXPECT_TRUE(IsValidSnapshot(snapshot));
   EXPECT_TRUE(ContainsRetainingPath(
-      *snapshot, {
-                     kExpectedCppRootsName,               // NOLINT
-                     GetExpectedName<BaseWithoutName>(),  // NOLINT
-                     GetExpectedName<GCed>()              // NOLINT
-                 }));
+      *snapshot, {kExpectedCppRootsName, GetExpectedName<BaseWithoutName>(),
+                  GetExpectedName<GCed>()}));
 }
 
 TEST_F(UnifiedHeapSnapshotTest, PendingCallStack) {
@@ -212,14 +201,10 @@ TEST_F(UnifiedHeapSnapshotTest, PendingCallStack) {
   cppgc::Persistent<BaseWithoutName> holder(second);
   const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
   EXPECT_TRUE(IsValidSnapshot(snapshot));
-  EXPECT_TRUE(
-      ContainsRetainingPath(*snapshot,
-                            {
-                                kExpectedCppRootsName,               // NOLINT
-                                GetExpectedName<BaseWithoutName>(),  // NOLINT
-                                GetExpectedName<BaseWithoutName>(),  // NOLINT
-                                GetExpectedName<GCed>()              // NOLINT
-                            }));
+  EXPECT_TRUE(ContainsRetainingPath(
+      *snapshot,
+      {kExpectedCppRootsName, GetExpectedName<BaseWithoutName>(),
+       GetExpectedName<BaseWithoutName>(), GetExpectedName<GCed>()}));
 }
 
 TEST_F(UnifiedHeapSnapshotTest, ReferenceToFinishedSCC) {
@@ -250,15 +235,11 @@ TEST_F(UnifiedHeapSnapshotTest, ReferenceToFinishedSCC) {
   cppgc::Persistent<BaseWithoutName> holder(first);
   const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
   EXPECT_TRUE(IsValidSnapshot(snapshot));
-  EXPECT_TRUE(
-      ContainsRetainingPath(*snapshot,
-                            {
-                                kExpectedCppRootsName,               // NOLINT
-                                GetExpectedName<BaseWithoutName>(),  // NOLINT
-                                GetExpectedName<BaseWithoutName>(),  // NOLINT
-                                GetExpectedName<BaseWithoutName>(),  // NOLINT
-                                GetExpectedName<GCed>()              // NOLINT
-                            }));
+  EXPECT_TRUE(ContainsRetainingPath(
+      *snapshot,
+      {kExpectedCppRootsName, GetExpectedName<BaseWithoutName>(),
+       GetExpectedName<BaseWithoutName>(), GetExpectedName<BaseWithoutName>(),
+       GetExpectedName<GCed>()}));
 }
 
 namespace {
@@ -344,13 +325,9 @@ TEST_F(UnifiedHeapSnapshotTest, JSReferenceForcesVisibleObject) {
       testing_scope, allocation_handle(), "LeafJSObject");
   const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
   EXPECT_TRUE(IsValidSnapshot(snapshot));
-  EXPECT_TRUE(
-      ContainsRetainingPath(*snapshot,
-                            {
-                                kExpectedCppRootsName,             // NOLINT
-                                GetExpectedName<GCedWithJSRef>(),  // NOLINT
-                                "LeafJSObject"                     // NOLINT
-                            }));
+  EXPECT_TRUE(ContainsRetainingPath(
+      *snapshot, {kExpectedCppRootsName, GetExpectedName<GCedWithJSRef>(),
+                  "LeafJSObject"}));
 }
 
 TEST_F(UnifiedHeapSnapshotTest, MergedWrapperNode) {
@@ -378,12 +355,9 @@ TEST_F(UnifiedHeapSnapshotTest, MergedWrapperNode) {
   EXPECT_TRUE(IsValidSnapshot(snapshot));
   EXPECT_TRUE(ContainsRetainingPath(
       *snapshot,
-      {
-          kExpectedCppRootsName,             // NOLINT
-          GetExpectedName<GCedWithJSRef>(),  // NOLINT
-          // GCedWithJSRef is merged into MergedObject, replacing its name.
-          "NextObject"  // NOLINT
-      }));
+      {kExpectedCppRootsName, GetExpectedName<GCedWithJSRef>(),
+       // GCedWithJSRef is merged into MergedObject, replacing its name.
+       "NextObject"}));
   const size_t js_size = Utils::OpenHandle(*wrapper_object)->Size();
 #if CPPGC_SUPPORTS_OBJECT_NAMES
   const size_t cpp_size =
@@ -447,11 +421,10 @@ TEST_F(UnifiedHeapSnapshotTest, NoTriggerForClassIdZero) {
   EXPECT_EQ(0u, DetachednessHandler::callback_count);
   EXPECT_TRUE(IsValidSnapshot(snapshot));
   EXPECT_TRUE(
-      ContainsRetainingPath(*snapshot,
-                            {
-                                kExpectedCppRootsName,             // NOLINT
-                                GetExpectedName<GCedWithJSRef>(),  // NOLINT
-                            }));
+      ContainsRetainingPath(*snapshot, {
+                                           kExpectedCppRootsName,
+                                           GetExpectedName<GCedWithJSRef>(),
+                                       }));
   ForEachEntryWithName(
       snapshot, GetExpectedName<GCedWithJSRef>(), [](const HeapEntry& entry) {
         EXPECT_EQ(kExpectedDetachedValueForUnknown, entry.detachedness());
@@ -473,11 +446,10 @@ TEST_F(UnifiedHeapSnapshotTest, TriggerDetachednessCallbackSettingAttached) {
   EXPECT_EQ(1u, DetachednessHandler::callback_count);
   EXPECT_TRUE(IsValidSnapshot(snapshot));
   EXPECT_TRUE(
-      ContainsRetainingPath(*snapshot,
-                            {
-                                kExpectedCppRootsName,             // NOLINT
-                                GetExpectedName<GCedWithJSRef>(),  // NOLINT
-                            }));
+      ContainsRetainingPath(*snapshot, {
+                                           kExpectedCppRootsName,
+                                           GetExpectedName<GCedWithJSRef>(),
+                                       }));
   ForEachEntryWithName(
       snapshot, GetExpectedName<GCedWithJSRef>(), [](const HeapEntry& entry) {
         EXPECT_EQ(kExpectedDetachedValueForAttached, entry.detachedness());
@@ -499,11 +471,10 @@ TEST_F(UnifiedHeapSnapshotTest, TriggerDetachednessCallbackSettingDetached) {
   EXPECT_EQ(1u, DetachednessHandler::callback_count);
   EXPECT_TRUE(IsValidSnapshot(snapshot));
   EXPECT_TRUE(
-      ContainsRetainingPath(*snapshot,
-                            {
-                                kExpectedCppRootsName,             // NOLINT
-                                GetExpectedName<GCedWithJSRef>(),  // NOLINT
-                            }));
+      ContainsRetainingPath(*snapshot, {
+                                           kExpectedCppRootsName,
+                                           GetExpectedName<GCedWithJSRef>(),
+                                       }));
   ForEachEntryWithName(
       snapshot, GetExpectedName<GCedWithJSRef>(), [](const HeapEntry& entry) {
         EXPECT_EQ(kExpectedDetachedValueForDetached, entry.detachedness());
diff --git a/test/unittests/test-utils.cc b/test/unittests/test-utils.cc
index 80a773ed7e..4aa9628b67 100644
--- a/test/unittests/test-utils.cc
+++ b/test/unittests/test-utils.cc
@@ -68,7 +68,7 @@ namespace internal {
 SaveFlags::SaveFlags() {
   // For each flag, save the current flag value.
 #define FLAG_MODE_APPLY(ftype, ctype, nam, def, cmt) SAVED_##nam = FLAG_##nam;
-#include "src/flags/flag-definitions.h"  // NOLINT
+#include "src/flags/flag-definitions.h"
 #undef FLAG_MODE_APPLY
 }
 
diff --git a/test/unittests/test-utils.h b/test/unittests/test-utils.h
index 541574df6d..74eb1bad37 100644
--- a/test/unittests/test-utils.h
+++ b/test/unittests/test-utils.h
@@ -239,7 +239,7 @@ class V8_NODISCARD SaveFlags {
 
  private:
 #define FLAG_MODE_APPLY(ftype, ctype, nam, def, cmt) ctype SAVED_##nam;
-#include "src/flags/flag-definitions.h"  // NOLINT
+#include "src/flags/flag-definitions.h"
 #undef FLAG_MODE_APPLY
 };
 
diff --git a/test/unittests/utils/allocation-unittest.cc b/test/unittests/utils/allocation-unittest.cc
index 8110b1f2cd..ac72ab38f1 100644
--- a/test/unittests/utils/allocation-unittest.cc
+++ b/test/unittests/utils/allocation-unittest.cc
@@ -7,8 +7,8 @@
 #if V8_OS_POSIX
 #include <setjmp.h>
 #include <signal.h>
-#include <unistd.h>  // NOLINT
-#endif               // V8_OS_POSIX
+#include <unistd.h>
+#endif  // V8_OS_POSIX
 
 #include "testing/gtest/include/gtest/gtest.h"
 
-- 
2.35.1

