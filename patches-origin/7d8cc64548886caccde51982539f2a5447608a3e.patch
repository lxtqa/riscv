From 7d8cc64548886caccde51982539f2a5447608a3e Mon Sep 17 00:00:00 2001
From: jingpeiyang <jingpeiyang@eswincomputing.com>
Date: Thu, 8 Jun 2023 09:03:10 +0800
Subject: [PATCH] [riscv][simulator] Fix test error of vfwredosum in riscv32
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

1)Fix test error of vfwredosum in riscv32.
2)Modify the trace-sim of the vl/vm.
  Before： vse64.v    v0, (a0)          	0000000000000000ec06490bec06490b --> 0xffffffffffd30d88
  Now：vse64.v    v0, (a0)          	0000000000000000ec06490bec06490b    (63199)    vlen:128 --> [addr: ffd30d88]

Bug: v8:13986

Signed-off-by: jingpeiyang <jingpeiyang@eswincomputing.com>
Change-Id: I34d744e91c9a560f47c3f9f5c10ca7dc019a002e
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4596402
Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
Reviewed-by: Yahan Lu <yahan@iscas.ac.cn>
Cr-Commit-Position: refs/heads/main@{#88132}
---
 src/codegen/riscv/constant-riscv-v.h          |  4 +--
 src/codegen/riscv/extension-riscv-v.cc        |  4 +--
 src/codegen/riscv/extension-riscv-v.h         |  4 +--
 src/diagnostics/riscv/disasm-riscv.cc         | 20 ++++++------
 src/execution/riscv/simulator-riscv.cc        | 31 ++++++++++---------
 test/cctest/test-assembler-riscv32.cc         |  8 +++--
 test/cctest/test-assembler-riscv64.cc         |  8 +++--
 .../assembler/disasm-riscv-unittest.cc        | 12 +++----
 8 files changed, 51 insertions(+), 40 deletions(-)

diff --git a/src/codegen/riscv/constant-riscv-v.h b/src/codegen/riscv/constant-riscv-v.h
index 5fce946c601..4bbe096c5a7 100644
--- a/src/codegen/riscv/constant-riscv-v.h
+++ b/src/codegen/riscv/constant-riscv-v.h
@@ -444,11 +444,11 @@ constexpr Opcode RO_V_VFWSUB_W_VF =
 
 // Vector Widening Floating-Point Reduction Instructions
 constexpr Opcode VFWREDUSUM_FUNCT6 = 0b110001;
-constexpr Opcode RO_V_VFWREDUSUM_VV =
+constexpr Opcode RO_V_VFWREDUSUM_VS =
     OP_FVV | (VFWREDUSUM_FUNCT6 << kRvvFunct6Shift);
 
 constexpr Opcode VFWREDOSUM_FUNCT6 = 0b110011;
-constexpr Opcode RO_V_VFWREDOSUM_VV =
+constexpr Opcode RO_V_VFWREDOSUM_VS =
     OP_FVV | (VFWREDOSUM_FUNCT6 << kRvvFunct6Shift);
 
 // Vector Widening Floating-Point Multiply
diff --git a/src/codegen/riscv/extension-riscv-v.cc b/src/codegen/riscv/extension-riscv-v.cc
index b0c29f57d28..51f3d619700 100644
--- a/src/codegen/riscv/extension-riscv-v.cc
+++ b/src/codegen/riscv/extension-riscv-v.cc
@@ -345,8 +345,8 @@ DEFINE_OPFWV(vfwsub, VFWSUB_W_FUNCT6)
 DEFINE_OPFWF(vfwsub, VFWSUB_W_FUNCT6)
 
 // Vector Widening Floating-Point Reduction Instructions
-DEFINE_OPFVV(vfwredusum, VFWREDUSUM_FUNCT6)
-DEFINE_OPFVV(vfwredosum, VFWREDOSUM_FUNCT6)
+DEFINE_OPFRED(vfwredusum, VFWREDUSUM_FUNCT6)
+DEFINE_OPFRED(vfwredosum, VFWREDOSUM_FUNCT6)
 
 // Vector Widening Floating-Point Multiply
 DEFINE_OPFVV(vfwmul, VFWMUL_FUNCT6)
diff --git a/src/codegen/riscv/extension-riscv-v.h b/src/codegen/riscv/extension-riscv-v.h
index 6900f9b7121..5932034b111 100644
--- a/src/codegen/riscv/extension-riscv-v.h
+++ b/src/codegen/riscv/extension-riscv-v.h
@@ -282,8 +282,8 @@ class AssemblerRISCVV : public AssemblerRiscvBase {
   DEFINE_OPFWF(vfwsub, VFWSUB_W_FUNCT6)
 
   // Vector Widening Floating-Point Reduction Instructions
-  DEFINE_OPFVV(vfwredusum, VFWREDUSUM_FUNCT6)
-  DEFINE_OPFVV(vfwredosum, VFWREDOSUM_FUNCT6)
+  DEFINE_OPFRED(vfwredusum, VFWREDUSUM_FUNCT6)
+  DEFINE_OPFRED(vfwredosum, VFWREDOSUM_FUNCT6)
 
   // Vector Widening Floating-Point Multiply
   DEFINE_OPFVV(vfwmul, VFWMUL_FUNCT6)
diff --git a/src/diagnostics/riscv/disasm-riscv.cc b/src/diagnostics/riscv/disasm-riscv.cc
index 8076567ecca..99c155e21f6 100644
--- a/src/diagnostics/riscv/disasm-riscv.cc
+++ b/src/diagnostics/riscv/disasm-riscv.cc
@@ -2559,10 +2559,10 @@ void Decoder::DecodeRvvFVV(Instruction* instr) {
     case RO_V_VFWSUB_W_VV:
       Format(instr, "vfwsub.wv 'vd, 'vs2, 'vs1'vm");
       break;
-    case RO_V_VFWREDUSUM_VV:
+    case RO_V_VFWREDUSUM_VS:
       Format(instr, "vfwredusum.vs 'vd, 'vs2, 'vs1'vm");
       break;
-    case RO_V_VFWREDOSUM_VV:
+    case RO_V_VFWREDOSUM_VS:
       Format(instr, "vfwredosum.vs 'vd, 'vs2, 'vs1'vm");
       break;
     case RO_V_VFWMUL_VV:
@@ -2751,21 +2751,21 @@ void Decoder::DecodeRvvVL(Instruction* instr) {
   //      (kRvvMopMask | kRvvNfMask | kBaseOpcodeMask)) {
   if (RO_V_VL == instr_temp) {
     if (!(instr->InstructionBits() & (kRvvRs2Mask))) {
-      snprintf(str, sizeof(str), "vle%d.v       'vd, ('rs1)'vm",
+      snprintf(str, sizeof(str), "vle%d.v    'vd, ('rs1)'vm",
                instr->vl_vs_width());
       Format(instr, str);
     } else {
-      snprintf(str, sizeof(str), "vle%dff.v       'vd, ('rs1)'vm",
+      snprintf(str, sizeof(str), "vle%dff.v  'vd, ('rs1)'vm",
                instr->vl_vs_width());
       Format(instr, str);
     }
   } else if (RO_V_VLS == instr_temp) {
-    snprintf(str, sizeof(str), "vlse%d.v       'vd, ('rs1), 'rs2'vm",
+    snprintf(str, sizeof(str), "vlse%d.v   'vd, ('rs1), 'rs2'vm",
              instr->vl_vs_width());
     Format(instr, str);
 
   } else if (RO_V_VLX == instr_temp) {
-    snprintf(str, sizeof(str), "vlxei%d.v       'vd, ('rs1), 'vs2'vm",
+    snprintf(str, sizeof(str), "vlxei%d.v  'vd, ('rs1), 'vs2'vm",
              instr->vl_vs_width());
     Format(instr, str);
   } else if (RO_V_VLSEG2 == instr_temp || RO_V_VLSEG3 == instr_temp ||
@@ -2773,10 +2773,10 @@ void Decoder::DecodeRvvVL(Instruction* instr) {
              RO_V_VLSEG6 == instr_temp || RO_V_VLSEG7 == instr_temp ||
              RO_V_VLSEG8 == instr_temp) {
     if (!(instr->InstructionBits() & (kRvvRs2Mask))) {
-      snprintf(str, sizeof(str), "vlseg%de%d.v       'vd, ('rs1)'vm",
+      snprintf(str, sizeof(str), "vlseg%de%d.v  'vd, ('rs1)'vm",
                switch_nf(instr), instr->vl_vs_width());
     } else {
-      snprintf(str, sizeof(str), "vlseg%de%dff.v       'vd, ('rs1)'vm",
+      snprintf(str, sizeof(str), "vlseg%de%dff.v  'vd, ('rs1)'vm",
                switch_nf(instr), instr->vl_vs_width());
     }
     Format(instr, str);
@@ -2784,14 +2784,14 @@ void Decoder::DecodeRvvVL(Instruction* instr) {
              RO_V_VLSSEG4 == instr_temp || RO_V_VLSSEG5 == instr_temp ||
              RO_V_VLSSEG6 == instr_temp || RO_V_VLSSEG7 == instr_temp ||
              RO_V_VLSSEG8 == instr_temp) {
-    snprintf(str, sizeof(str), "vlsseg%de%d.v       'vd, ('rs1), 'rs2'vm",
+    snprintf(str, sizeof(str), "vlsseg%de%d.v  'vd, ('rs1), 'rs2'vm",
              switch_nf(instr), instr->vl_vs_width());
     Format(instr, str);
   } else if (RO_V_VLXSEG2 == instr_temp || RO_V_VLXSEG3 == instr_temp ||
              RO_V_VLXSEG4 == instr_temp || RO_V_VLXSEG5 == instr_temp ||
              RO_V_VLXSEG6 == instr_temp || RO_V_VLXSEG7 == instr_temp ||
              RO_V_VLXSEG8 == instr_temp) {
-    snprintf(str, sizeof(str), "vlxseg%dei%d.v       'vd, ('rs1), 'vs2'vm",
+    snprintf(str, sizeof(str), "vlxseg%dei%d.v  'vd, ('rs1), 'vs2'vm",
              switch_nf(instr), instr->vl_vs_width());
     Format(instr, str);
   }
diff --git a/src/execution/riscv/simulator-riscv.cc b/src/execution/riscv/simulator-riscv.cc
index 9ff0d1300bb..900946dc99e 100644
--- a/src/execution/riscv/simulator-riscv.cc
+++ b/src/execution/riscv/simulator-riscv.cc
@@ -1291,10 +1291,12 @@ struct type_sew_t<128> {
   set_rvv_vstart(0);                                                           \
   if (v8_flags.trace_sim) {                                                    \
     __int128_t value = Vregister_[rvv_vd_reg()];                               \
-    SNPrintF(trace_buf_, "%016" PRIx64 "%016" PRIx64 " <-- 0x%016" PRIx64,     \
+    SNPrintF(trace_buf_,                                                       \
+             "%016" PRIx64 "%016" PRIx64 "    (%" PRId64 ")    vlen:%" PRId64  \
+             " <-- [addr: %" REGIx_FORMAT "]",                                 \
              *(reinterpret_cast<int64_t*>(&value) + 1),                        \
-             *reinterpret_cast<int64_t*>(&value),                              \
-             (uint64_t)(get_register(rs1_reg())));                             \
+             *reinterpret_cast<int64_t*>(&value), icount_, rvv_vlen(),         \
+             (sreg_t)(get_register(rs1_reg())));                               \
   }
 
 #define RVV_VI_ST(stride, offset, elt_width, is_mask_ldst)                     \
@@ -1315,10 +1317,12 @@ struct type_sew_t<128> {
   set_rvv_vstart(0);                                                           \
   if (v8_flags.trace_sim) {                                                    \
     __int128_t value = Vregister_[rvv_vd_reg()];                               \
-    SNPrintF(trace_buf_, "%016" PRIx64 "%016" PRIx64 " --> 0x%016" PRIx64,     \
+    SNPrintF(trace_buf_,                                                       \
+             "%016" PRIx64 "%016" PRIx64 "    (%" PRId64 ")    vlen:%" PRId64  \
+             " --> [addr: %" REGIx_FORMAT "]",                                 \
              *(reinterpret_cast<int64_t*>(&value) + 1),                        \
-             *reinterpret_cast<int64_t*>(&value),                              \
-             (uint64_t)(get_register(rs1_reg())));                             \
+             *reinterpret_cast<int64_t*>(&value), icount_, rvv_vlen(),         \
+             (sreg_t)(get_register(rs1_reg())));                               \
   }
 
 #define VI_VFP_LOOP_SCALE_BASE                      \
@@ -7115,8 +7119,8 @@ void Simulator::DecodeRvvFVV() {
           },
           false)
       break;
-    case RO_V_VFWREDUSUM_VV:
-    case RO_V_VFWREDOSUM_VV:
+    case RO_V_VFWREDUSUM_VS:
+    case RO_V_VFWREDOSUM_VS:
       RVV_VI_CHECK_DSS(true);
       switch (rvv_vsew()) {
         case E16:
@@ -7149,7 +7153,7 @@ void Simulator::DecodeRvvFVV() {
           require(false);
           break;
       }
-
+      rvv_trace_vd();
       break;
     case RO_V_VFMADD_VV:
       RVV_VI_VFP_FMA_VV_LOOP({RVV_VI_VFP_FMA(float, vd, vs1, vs2)},
@@ -7205,20 +7209,19 @@ void Simulator::DecodeRvvFVV() {
           UNIMPLEMENTED();
         }
         case E32: {
-          float fs2 = Rvvelt<float>(rvv_vs2_reg(), 0);
-          set_fpu_register_float(rd_reg(), fs2);
+          uint32_t fs2 = Rvvelt<uint32_t>(rvv_vs2_reg(), 0);
+          set_frd(Float32::FromBits(fs2));
           break;
         }
         case E64: {
-          double fs2 = Rvvelt<double>(rvv_vs2_reg(), 0);
-          set_fpu_register_double(rd_reg(), fs2);
+          uint64_t fs2 = Rvvelt<uint64_t>(rvv_vs2_reg(), 0);
+          set_drd(Float64::FromBits(fs2));
           break;
         }
         default:
           require(0);
           break;
       }
-      rvv_trace_vd();
       break;
     default:
       UNSUPPORTED_RISCV();
diff --git a/test/cctest/test-assembler-riscv32.cc b/test/cctest/test-assembler-riscv32.cc
index 01e03fd7fc3..4ccc5fb2882 100644
--- a/test/cctest/test-assembler-riscv32.cc
+++ b/test/cctest/test-assembler-riscv32.cc
@@ -2515,6 +2515,10 @@ UTEST_RVV_FMA_VF_FORM_WITH_RES(vfnmsac_vf, ARRAY_FLOAT,
           (uint64_t)base::bit_cast<uint32_t>(rs1_fval) << 32 |         \
           base::bit_cast<uint32_t>(rs1_fval));                         \
       for (double val : temp_arr) {                                    \
+        if (is_invalid_fadd(expect_res, val)) {                        \
+          expect_res = std::numeric_limits<float>::quiet_NaN();        \
+          break;                                                       \
+        }                                                              \
         expect_res += val;                                             \
         if (std::isnan(expect_res)) {                                  \
           expect_res = std::numeric_limits<double>::quiet_NaN();       \
@@ -2526,8 +2530,8 @@ UTEST_RVV_FMA_VF_FORM_WITH_RES(vfnmsac_vf, ARRAY_FLOAT,
     }                                                                  \
   }
 
-UTEST_RVV_VFW_REDSUM_VV_FORM_WITH_RES(vfwredusum_vv)
-UTEST_RVV_VFW_REDSUM_VV_FORM_WITH_RES(vfwredosum_vv)
+UTEST_RVV_VFW_REDSUM_VV_FORM_WITH_RES(vfwredusum_vs)
+UTEST_RVV_VFW_REDSUM_VV_FORM_WITH_RES(vfwredosum_vs)
 
 #undef UTEST_RVV_VFW_REDSUM_VV_FORM_WITH_RES
 // calculate the value of r used in rounding
diff --git a/test/cctest/test-assembler-riscv64.cc b/test/cctest/test-assembler-riscv64.cc
index 0d1643e806a..ad317e86b02 100644
--- a/test/cctest/test-assembler-riscv64.cc
+++ b/test/cctest/test-assembler-riscv64.cc
@@ -2771,6 +2771,10 @@ UTEST_RVV_FMA_VF_FORM_WITH_RES(vfnmsac_vf, ARRAY_FLOAT,
           (uint64_t)base::bit_cast<uint32_t>(rs1_fval) << 32 |         \
           base::bit_cast<uint32_t>(rs1_fval));                         \
       for (double val : temp_arr) {                                    \
+        if (is_invalid_fadd(expect_res, val)) {                        \
+          expect_res = std::numeric_limits<float>::quiet_NaN();        \
+          break;                                                       \
+        }                                                              \
         expect_res += val;                                             \
         if (std::isnan(expect_res)) {                                  \
           expect_res = std::numeric_limits<double>::quiet_NaN();       \
@@ -2782,8 +2786,8 @@ UTEST_RVV_FMA_VF_FORM_WITH_RES(vfnmsac_vf, ARRAY_FLOAT,
     }                                                                  \
   }
 
-UTEST_RVV_VFW_REDSUM_VV_FORM_WITH_RES(vfwredusum_vv)
-UTEST_RVV_VFW_REDSUM_VV_FORM_WITH_RES(vfwredosum_vv)
+UTEST_RVV_VFW_REDSUM_VV_FORM_WITH_RES(vfwredusum_vs)
+UTEST_RVV_VFW_REDSUM_VV_FORM_WITH_RES(vfwredosum_vs)
 
 #undef UTEST_RVV_VFW_REDSUM_VV_FORM_WITH_RES
 // calculate the value of r used in rounding
diff --git a/test/unittests/assembler/disasm-riscv-unittest.cc b/test/unittests/assembler/disasm-riscv-unittest.cc
index b94a7c7a559..a4a86ee4e19 100644
--- a/test/unittests/assembler/disasm-riscv-unittest.cc
+++ b/test/unittests/assembler/disasm-riscv-unittest.cc
@@ -537,10 +537,10 @@ TEST_F(DisasmRiscv64Test, RVV) {
   SET_UP();
   COMPARE(VU.set(kScratchReg, E64, m1),
           "018079d7       vsetvli   s3, zero_reg, E64, m1");
-  COMPARE(vl(v2, a0, 0, VSew::E8), "02050107       vle8.v       v2, (a0)");
-  COMPARE(vl(v2, a0, 0, VSew::E8), "02050107       vle8.v       v2, (a0)");
-  COMPARE(vl(v2, a0, 0, VSew::E16), "02055107       vle16.v       v2, (a0)");
-  COMPARE(vl(v2, a0, 0, VSew::E32), "02056107       vle32.v       v2, (a0)");
+  COMPARE(vl(v2, a0, 0, VSew::E8), "02050107       vle8.v    v2, (a0)");
+  COMPARE(vl(v2, a0, 0, VSew::E16), "02055107       vle16.v    v2, (a0)");
+  COMPARE(vl(v2, a0, 0, VSew::E32), "02056107       vle32.v    v2, (a0)");
+  COMPARE(vl(v2, a0, 0, VSew::E64), "02057107       vle64.v    v2, (a0)");
 
   COMPARE(vadd_vv(v0, v0, v1), "02008057       vadd.vv   v0, v0, v1");
   COMPARE(vadd_vx(v0, v1, t0), "0212c057       vadd.vx   v0, v1, t0");
@@ -646,9 +646,9 @@ TEST_F(DisasmRiscv64Test, RVV) {
   COMPARE(vfwsub_wf(v17, v28, fa5), "dbc7d8d7       vfwsub.wf v17, v28, fa5");
 
   // Vector Widening Floating-Point Reduction Instructions
-  COMPARE(vfwredusum_vv(v17, v14, v28),
+  COMPARE(vfwredusum_vs(v17, v14, v28),
           "c6ee18d7       vfwredusum.vs v17, v14, v28");
-  COMPARE(vfwredosum_vv(v17, v14, v28),
+  COMPARE(vfwredosum_vs(v17, v14, v28),
           "ceee18d7       vfwredosum.vs v17, v14, v28");
 
   // Vector Widening Floating-Point Multiply
-- 
2.35.1

