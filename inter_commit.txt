{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 17) 2023}	{ [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 17) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 17) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 17) 2023}	{ [PATCH] ppc/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 16) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 16) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 16) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 16) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 15) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 14) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 13) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 13) 2023}	{ [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 13) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 13) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 12) 2023}	{ [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 12) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 12) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 12) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 10) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 10) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 10) 2023}	{ [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 8) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 8) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 8) 2023}	{ [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 7) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 8) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 7) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 7) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 7) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 6) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 5) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 6) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 5) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 6) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 5) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 4) 2023}	{ [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 4) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 4) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 4) 2023}	{ [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 3) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 3) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 3) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 3) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 2) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 2) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 2) 2023}	
{ [PATCH] [turboshaft][arm] Port InstructionSelector part 4 2023}	{ [PATCH] [loong64][turboshaft] Port InstructionSelector part 3 2023}	{ [PATCH] [turboshaft][arm] Port InstructionSelector part 3 2023}	{ [PATCH] [turboshaft][arm] Port InstructionSelector part 2 2023}	{ [PATCH] [loong64][mips64][turboshaft] Port InstructionSelector part 2 2023}	{ [PATCH] [turboshaft][arm] Port InstructionSelector part 1 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 13 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 12 2023}	{ [PATCH] [mips64][turboshaft] Port InstructionSelector part 1 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 11 2023}	{ [PATCH] [loong64][turboshaft] Port InstructionSelector part 1 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 10 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 9 2023}	{ [PATCH] [riscv][turboshaft] Port InstructionSelector part4 2023}	{ [PATCH] [riscv][turboshaft] Port InstructionSelector part 3 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 8 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 7 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 6 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 5 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 4 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 3 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 2 2023}	{ [PATCH] [turboshaft][arm64] Port InstructionSelector part 1 2023}	
{ [PATCH] [loong64][mips64] Reland^5 "[wasm][x64] Run JS imports on the central stack" 2023}	{ [PATCH] [riscv]Reland^5 "[wasm][x64] Run JS imports on the central stack" 2023}	{ [PATCH] PPC/s390: Reland^5 "[wasm][x64] Run JS imports on the central stack" 2023}	{ [PATCH] Reland^5 "[wasm][x64] Run JS imports on the central stack" 2023}	{ [PATCH] Reland^4 "[wasm][x64] Run JS imports on the central stack" 2023}	{ [PATCH] PPC/s390: Reland^3 "[wasm][x64] Run JS imports on the central stack" 2023}	{ [PATCH] Reland^3 "[wasm][x64] Run JS imports on the central stack" 2023}	{ [PATCH] Reland "[wasm][x64] Run JS imports on the central stack" 2023}	
{ [PATCH] [loong64][mips64][builtins][csa] Use CallBuiltin/TailCallBuiltin where possible, pt.6 2023}	{ [PATCH] [riscv][builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.2 2023}	{ [PATCH] PPC/s390: [builtins][csa] Use CallBuiltin/TailCallBuiltin where possible, pt.6 2023}	{ [PATCH] [builtins][csa] Use CallBuiltin/TailCallBuiltin where possible, pt.6 2023}	{ [PATCH] [loong64][mips64][builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.2 2023}	{ [PATCH] [builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.3 2023}	{ [PATCH] [builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.2 2023}	
{ [PATCH] ppc: Unify Memory Operation 7 2021}	{ [PATCH] ppc: Unify Memory Operation 6 2021}	{ [PATCH] ppc: Unify Memory Operation 5 2021}	{ [PATCH] ppc: Unify Memory Operation 4 2021}	{ [PATCH] ppc: Unify Memory Operation 3 2021}	{ [PATCH] ppc: Unify Memory Operation 2 2021}	{ [PATCH] ppc: Unify Memory Operation 1 2021}	
{ [PATCH] [wasm][liftoff][arm64] Add saturated conversion float->int 2020}	{ [PATCH] [wasm][liftoff][arm] Add saturated conversion float->int64 2020}	{ [PATCH] [wasm][liftoff][arm] Add saturated conversion float->int32 2020}	{ [PATCH] [wasm][liftoff][ia32] Add saturated conversion float->int64 2020}	{ [PATCH] [wasm][liftoff][ia32] Add saturated conversion float->int32 2020}	{ [PATCH] [wasm][liftoff][x64] Add saturated conversion float->int64 2020}	{ [PATCH] [wasm][liftoff][x64] Add saturated conversion float->int32 2020}	
{ [PATCH] [liftoff][riscv64] Add explicit stack check for large frames 2021}	{ [PATCH] [liftoff][ia32] Add explicit stack check for large frames 2021}	{ [PATCH] [liftoff][x64] Add explicit stack check for large frames 2021}	{ [PATCH] [mips][liftoff] Add explicit stack check for large frames 2021}	{ [PATCH] [liftoff][arm64] Add explicit stack check for large frames 2021}	{ [PATCH] [liftoff][arm] Add explicit stack check for large frames 2021}	
{ [PATCH] [wasm-simd][liftoff][ia32] Prototype load lane 2021}	{ [PATCH] [wasm-simd][liftoff][arm] Prototype load lane 2021}	{ [PATCH] [wasm-simd][liftoff][arm64] Prototype load lane 2021}	{ [PATCH] [mips][wasm-simd][liftoff] Prototype load lane 2021}	{ [PATCH] PPC/s390: [wasm-simd][liftoff][x64] Prototype load lane 2021}	{ [PATCH] [wasm-simd][liftoff][x64] Prototype load lane 2021}	
{ [PATCH] [wasm-simd][ia32][liftoff] Implement extended multiply 2021}	{ [PATCH] [wasm-simd][x64][liftoff] Implement extended multiply 2020}	{ [PATCH] [mips][wasm-simd][liftoff] Implement extended multiply 2020}	{ [PATCH] [wasm-simd][arm][liftoff] Implement extended multiply 2020}	{ [PATCH] PPC/s390: [wasm-simd][arm64][liftoff] Implement extended multiply 2020}	{ [PATCH] [wasm-simd][arm64][liftoff] Implement extended multiply 2020}	
{ [PATCH] PPC/s390: [wasm-simd] [liftoff] Implement ne on x64 and ia32 2020}	{ [PATCH] [wasm-simd] [liftoff] Implement ne on x64 and ia32 2020}	{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement eq on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement eq on x64 and ia32 2020}	{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement neg on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement neg on x64 and ia32 2020}	
{ [PATCH] [mips][Liftoff] Implement i64 shift with immediate 2019}	{ [PATCH] [mips][Liftoff] Implement i32 shift with immediate 2019}	{ [PATCH] PPC/s390: [Liftoff] Implement i64 shift with immediate 2019}	{ [PATCH] [Liftoff] Implement i64 shift with immediate 2019}	{ [PATCH] PPC/s390: [Liftoff] Implement i32 shift with immediate 2019}	{ [PATCH] [Liftoff] Implement i32 shift with immediate 2019}	
{ [PATCH] [mips][wasm-simd] Implement v8x16.swizzle for mips 2019}	{ [PATCH] PPC/s390: [wasm-simd] Implement v8x16.swizzle for arm 2019}	{ [PATCH] [wasm-simd] Implement v8x16.swizzle for arm 2019}	{ [PATCH] [wasm-simd] Implement v8x16.swizzle for arm64 2019}	{ [PATCH] [wasm-simd] Implement v8x16.swizzle for ia32 2019}	{ [PATCH] [wasm-simd] Implement v8x16.swizzle for x64 2019}	
{ [PATCH] [mips32][cleanup] Eliminate non-const reference parameters 2019}	{ [PATCH] [mips][cleanup] Eliminate non-const reference parameters 2019}	{ [PATCH] [cleanup] Eliminate non-const reference parameters 2019}	{ [PATCH] [cleanup] Eliminate non-const reference parameters 2019}	{ [PATCH] [mips][cleanup] Eliminate non-const reference parameters 2019}	{ [PATCH] [cleanup] Eliminate non-const reference parameters 2019}	
{ [PATCH] PPC: [turbofan] Change TruncateFloat32ToUint64 to TryTruncateFloat32ToUint64. 2015}	{ [PATCH] PPC: [turbofan] Change TruncateFloat32ToInt64 to TryTruncateFloat32ToInt64. 2015}	{ [PATCH] [turbofan] Change TruncateFloat32ToUint64 to TryTruncateFloat32ToUint64. 2015}	{ [PATCH] [turbofan] Change TruncateFloat32ToInt64 to TryTruncateFloat32ToInt64. 2015}	{ [PATCH] PPC64: [turbofan] Change TruncateFloat64ToUint64 to TryTruncateFloatToUint64. 2015}	{ [PATCH] [turbofan] Change TruncateFloat64ToUint64 to TryTruncateFloatToUint64. 2015}	
{ [PATCH] PPC: [turbofan] Implemented the TruncateFloat32ToUint64 TurboFan operator. 2015}	{ [PATCH] PPC: [turbofan] Implemented the TruncateFloat32ToInt64 TurboFan operator. 2015}	{ [PATCH] MIPS64: [turbofan] Implemented the TruncateFloat32ToUint64 TurboFan operator. 2015}	{ [PATCH] [turbofan] Implemented the TruncateFloat32ToUint64 TurboFan operator. 2015}	{ [PATCH] [turbofan] Implemented the TruncateFloat32ToInt64 TurboFan operator. 2015}	{ [PATCH] [turbofan] Implemented the TruncateFloat32ToInt64 TurboFan operator. 2015}	
{ [PATCH] [turboshaft][s390] Port InstructionSelector part 4 2024}	{ [PATCH] [turboshaft][s390] Port InstructionSelector part 3 2024}	{ [PATCH] [mips64][turboshaft] Port InstructionSelector part 3 2024}	{ [PATCH] [turboshaft][s390] Port InstructionSelector part 2 2024}	{ [PATCH] [turboshaft][s390] Port InstructionSelector part 1 2024}	
{ [PATCH] Revert "Reland^4 "[wasm][x64] Run JS imports on the central stack"" 2023}	{ [PATCH] Revert "[riscv]Reland^3 '[wasm][x64] Run JS imports on the central stack'" 2023}	{ [PATCH] Revert "PPC/s390: Reland^3 "[wasm][x64] Run JS imports on the central stack"" 2023}	{ [PATCH] Revert "Reland^3 "[wasm][x64] Run JS imports on the central stack"" 2023}	{ [PATCH] Revert "Reland "[wasm][x64] Run JS imports on the central stack"" 2023}	
{ [PATCH] [riscv][assembler] Make UseScratchRegisterScope inlinable 2023}	{ [PATCH] [arm64][assembler] Make UseScratchRegisterScope inlinable 2023}	{ [PATCH] PPC/s390: [arm][assembler] Make UseScratchRegisterScope inlinable 2023}	{ [PATCH] [loong64][mips64][assembler] Make UseScratchRegisterScope inlinable 2023}	{ [PATCH] [arm][assembler] Make UseScratchRegisterScope inlinable 2023}	
{ [PATCH] [riscv][liftoff] Emit less code for write barriers 2023}	{ [PATCH] [loong64][mips64][liftoff] Emit less code for write barriers 2023}	{ [PATCH] PPC/s390: [liftoff] Emit less code for write barriers 2023}	{ [PATCH] PPC/s390: [liftoff] Emit less code for write barriers 2023}	{ [PATCH] [liftoff] Emit less code for write barriers 2023}	
{ [PATCH] [wasm-simd][arm][liftoff] Implement extended add pairwise 2021}	{ [PATCH] [wasm-simd][arm64][liftoff] Implement extended add pairwise 2021}	{ [PATCH] [wasm-simd][ia32][liftoff] Implement extended add pairwise 2021}	{ [PATCH] PPC/s390: [wasm-simd][x64][liftoff] Implement extended add pairwise 2021}	{ [PATCH] [wasm-simd][x64][liftoff] Implement extended add pairwise 2021}	
{ [PATCH] [wasm-simd][arm][liftoff] Implement i64x2 signed compares 2021}	{ [PATCH] [wasm-simd][arm64][liftoff] Implement i64x2 signed compares 2021}	{ [PATCH] [wasm-simd][ia32][liftoff] Implement i64x2 signed compares 2021}	{ [PATCH] PPC/s390: [wasm-simd][x64][liftoff] Implement i64x2 signed compares 2021}	{ [PATCH] [wasm-simd][x64][liftoff] Implement i64x2 signed compares 2021}	
{ [PATCH] [mips][wasm-simd] Implement i64x2 signed compares 2021}	{ [PATCH] S390 [wasm-simd]: Implement i64x2 signed compares 2021}	{ [PATCH] [wasm-simd][arm] Implement i64x2 signed compares 2021}	{ [PATCH] [wasm-simd][ia32] Implement i64x2 signed compares 2021}	{ [PATCH] [wasm-simd][x64][arm64] Implement i64x2 signed compares 2021}	
{ [PATCH] [wasm-simd][liftoff][arm] Implement v64x2.alltrue and i64x2.ne 2021}	{ [PATCH] [wasm-simd][liftoff][arm64] Implement v64x2.alltrue and i64x2.ne 2021}	{ [PATCH] [wasm-simd][liftoff][ia32] Implement v64x2.alltrue and i64x2.ne 2021}	{ [PATCH] PPC/s390: [wasm-simd][liftoff][x64] Implement v64x2.alltrue and i64x2.ne 2021}	{ [PATCH] [wasm-simd][liftoff][x64] Implement v64x2.alltrue and i64x2.ne 2021}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement double precision conversions 2021}	{ [PATCH] [wasm-simd][arm][liftoff] Implement double precision conversions 2021}	{ [PATCH] [wasm-simd][arm64][liftoff] Implement double precision conversions 2021}	{ [PATCH] [wasm-simd][ia32][liftoff] Implement double precision conversions 2021}	{ [PATCH] [wasm-simd][x64][liftoff] Implement double precision conversions 2021}	
{ [PATCH] [wasm-simd][arm][liftoff] Implement store lane 2021}	{ [PATCH] [wasm-simd][arm64][liftoff] Implement store lane 2021}	{ [PATCH] [wasm-simd][ia32][liftoff] Implement store lane 2021}	{ [PATCH] PPC/s390: [wasm-simd][x64][liftoff] Implement store lane 2021}	{ [PATCH] [wasm-simd][x64][liftoff] Implement store lane 2021}	
{ [PATCH] [mips][wasm-simd] Implement saturating rounding multiply high 2021}	{ [PATCH] S390 [wasm-simd]: Implement saturating rounding multiply high 2021}	{ [PATCH] PPC [wasm-simd]: Implement saturating rounding multiply high 2021}	{ [PATCH] [wasm-simd][arm] Implement saturating rounding multiply high 2021}	{ [PATCH] [wasm-simd][ia32] Implement saturating rounding multiply high 2021}	
{ [PATCH] [mips][wasm-simd][liftoff] Implement i64x2.bitmask 2021}	{ [PATCH] [wasm-simd][liftoff][arm] Implement i64x2.bitmask 2021}	{ [PATCH] [wasm-simd][liftoff][arm64] Implement i64x2.bitmask 2021}	{ [PATCH] PPC/s390: [wasm-simd][liftoff][ia32][x64] Implement i64x2.bitmask 2021}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement i64x2.bitmask 2021}	
{ [PATCH] [mips][wasm-simd] Prototype i64x2.bitmask 2020}	{ [PATCH] PPC/S390: [wasm-simd][arm] Prototype i64x2.bitmask 2020}	{ [PATCH] [wasm-simd][ia32] Prototype i64x2.bitmask 2020}	{ [PATCH] [wasm-simd][arm] Prototype i64x2.bitmask 2020}	{ [PATCH] [wasm-simd][arm64] Prototype i64x2.bitmask 2020}	
{ [PATCH] S390: [wasm-simd] Prototype i32x4.dot_i16x8_s 2020}	{ [PATCH] [wasm-simd][arm] Prototype i32x4.dot_i16x8_s 2020}	{ [PATCH] [wasm-simd][arm64] Prototype i32x4.dot_i16x8_s 2020}	{ [PATCH] [wasm-simd][ia32] Prototype i32x4.dot_i16x8_s 2020}	{ [PATCH] [wasm-simd][x64] Prototype i32x4.dot_i16x8_s 2020}	
{ [PATCH] [mips][wasm-simd] Implement integer absolute 2020}	{ [PATCH] PPC/s390: [wasm-simd][arm] Implement integer absolute 2020}	{ [PATCH] [wasm-simd][arm] Implement integer absolute 2020}	{ [PATCH] [wasm-simd][ia32] Implement integer absolute 2020}	{ [PATCH] [wasm-simd][arm64] Implement integer absolute 2020}	
{ [PATCH] PPC/s390: PPC/s390: Reland^2 "[runtime] Move Context::native_context to the map" 2019}	{ [PATCH] [mips]Reland^2 "[runtime] Move Context::native_context to the map" 2019}	{ [PATCH] PPC/s390: Reland^2 "[runtime] Move Context::native_context to the map" 2019}	{ [PATCH] Reland^2 "[runtime] Move Context::native_context to the map" 2019}	{ [PATCH] Reland "[runtime] Move Context::native_context to the map" 2019}	
{ [PATCH] [turbofan] Masking/poisoning in codegen (optimized code, arm64) 2018}	{ [PATCH] PPC/s390: [turbofan] Masking/poisoning in codegen (optimized code, arm) 2018}	{ [PATCH] [turbofan] Masking/poisoning in codegen (optimized code, arm) 2018}	{ [PATCH] PPC/s390: [turbofan] Masking/poisoning in codegen (optimized code, x64) 2018}	{ [PATCH] [turbofan] Masking/poisoning in codegen (optimized code, x64) 2018}	
{ [PATCH] PPC: [runtime] Cleanup SharedFunctionInfo fields definitions (5). 2017}	{ [PATCH] [runtime] Cleanup SharedFunctionInfo fields definitions (6). 2017}	{ [PATCH] [runtime] Cleanup SharedFunctionInfo fields definitions (5). 2017}	{ [PATCH] [runtime] Cleanup SharedFunctionInfo fields definitions (4). 2017}	{ [PATCH] [runtime] Cleanup SharedFunctionInfo fields definitions (2). 2017}	
{ [PATCH] S390: [debug] implement intuitive semantics for stepping over await call. 2016}	{ [PATCH] MIPS64: Fix 'MIPS: Fix [debug] implement intuitive semantics for stepping over await call.' 2016}	{ [PATCH] MIPS: Fix '[debug] implement intuitive semantics for stepping over await call.' 2016}	{ [PATCH] PPC: [debug] implement intuitive semantics for stepping over await call. 2016}	{ [PATCH] [debug] implement intuitive semantics for stepping over await call. 2016}	
{ [PATCH] MIPS64: [regexp] do not assume short external strings have a minimum size. 2016}	{ [PATCH] MIPS64: [regexp] do not assume short external strings have a minimum size. 2016}	{ [PATCH] S390: [regexp] do not assume short external strings have a minimum size. 2016}	{ [PATCH] PPC: [regexp] do not assume short external strings have a minimum size. 2016}	{ [PATCH] [regexp] do not assume short external strings have a minimum size. 2016}	
{ [PATCH] S390: [Atomics] Remove Atomics code stubs; use TF ops 2016}	{ [PATCH] PPC: [Atomics] Remove Atomics code stubs; use TF ops 2016}	{ [PATCH] MIPS: [Atomics] Remove Atomics code stubs; use TF ops. 2016}	{ [PATCH] [Atomics] Remove Atomics code stubs; use TF ops 2016}	{ [PATCH] [Atomics] Remove Atomics code stubs; use TF ops 2016}	
{ [PATCH] MIPS: [compiler] Add relocatable pointer constants for wasm memory references. 2016}	{ [PATCH] S390: [compiler] Add relocatable pointer constants for wasm memory references. 2016}	{ [PATCH] PPC: [compiler] Add relocatable pointer constants for wasm memory references. 2016}	{ [PATCH] [compiler] Add relocatable pointer constants for wasm memory references. 2016}	{ [PATCH] [compiler] Add relocatable pointer constants for wasm memory references. 2016}	
{ [PATCH] PPC: Resolve references to "this" the same way as normal variables 2015}	{ [PATCH] Resolve references to "this" the same way as normal variables 2015}	{ [PATCH] PPC: Resolve references to "this" the same way as normal variables 2015}	{ [PATCH] Resolve references to "this" the same way as normal variables 2015}	{ [PATCH] Resolve references to "this" the same way as normal variables 2015}	
{ [PATCH] MIPS64: Assembler support for internal references. 2015}	{ [PATCH] MIPS: Assembler support for internal references. 2015}	{ [PATCH] [ia32] Assembler support for internal references. 2015}	{ [PATCH] [arm] Assembler support for internal references. 2015}	{ [PATCH] [arm] Assembler support for internal references. 2015}	
{ [PATCH] MIPS: ES6 computed property names. 2015}	{ [PATCH] ES6 computed property names 2015}	{ [PATCH] ES6 computed property names 2014}	{ [PATCH] ES6 computed property names 2014}	{ [PATCH] ES6 computed property names 2014}	
{ [PATCH] [loong64][mips64][deoptimizer][wasm] Support Simd128 values 2024}	{ [PATCH] [riscv][deoptimizer][wasm] Support Simd128 values 2024}	{ [PATCH] PPC/s390: [deoptimizer][wasm] Support Simd128 values 2024}	{ [PATCH] [deoptimizer][wasm] Support Simd128 values 2024}	
{ [PATCH] [loong64][mips64][codegen] Introduce MemoryRepresentation::kProtectedPointer 2024}	{ [PATCH] [riscv][codegen] Introduce MemoryRepresentation::kProtectedPointer 2024}	{ [PATCH] PPC/s390: [codegen] Introduce MemoryRepresentation::kProtectedPointer 2024}	{ [PATCH] [codegen] Introduce MemoryRepresentation::kProtectedPointer 2024}	
{ [PATCH] PPC/S390:[fastcall] Allow reentrance to JavaScript 2024}	{ [PATCH] [loong64][mips64][fastcall] Allow reentrance to JavaScript 2024}	{ [PATCH] [riscv][fastcall] Allow reentrance to JavaScript 2024}	{ [PATCH] [fastcall] Allow reentrance to JavaScript 2024}	
{ [PATCH] [loong64][mips64][turboshaft] Fix more issues in Turboshaft's builtin pipeline 2024}	{ [PATCH] [riscv][turboshaft] Fix more issues in Turboshaft's builtin pipeline 2024}	{ [PATCH] PPC/s390: [turboshaft] Fix more issues in Turboshaft's builtin pipeline 2024}	{ [PATCH] [turboshaft] Fix more issues in Turboshaft's builtin pipeline 2024}	
{ [PATCH] [loong64][mips64][interpreter] Microoptimise for-in bytecodes 2024}	{ [PATCH] [riscv][interpreter] Microoptimise for-in bytecodes 2024}	{ [PATCH] PPC/s390: [interpreter] Microoptimise for-in bytecodes 2024}	{ [PATCH] [interpreter] Microoptimise for-in bytecodes 2024}	
{ [PATCH] [turboshaft][arm64] Port ISEL unittests part 3 2024}	{ [PATCH] [riscv][turboshaft] Port ISEL unittests part 2 2024}	{ [PATCH] [loong64][mips64][turboshaft] Port ISEL unittests part 2 2024}	{ [PATCH] [turboshaft][arm64] Port ISEL unittests part 2 2024}	
{ [PATCH] [riscv][sandbox] First step towards fine-grained entrypoint tags for builtins 2024}	{ [PATCH] [loong64][mips64][sandbox] First step towards fine-grained entrypoint tags for builtins 2024}	{ [PATCH] [sandbox] First step towards fine-grained entrypoint tags for builtins 2024}	{ [PATCH] [sandbox] First step towards fine-grained entrypoint tags for builtins 2024}	
{ [PATCH] [loong64][mips64][heap] Check that we do not allocate in fast c calls 2024}	{ [PATCH] PPC/s390: [heap] Check that we do not allocate in fast c calls 2024}	{ [PATCH] [riscv][heap] Check that we do not allocate in fast c calls 2024}	{ [PATCH] [heap] Check that we do not allocate in fast c calls 2024}	
{ [PATCH] [riscv][wasm][liftoff] Optimize in-bounds atomic operations 2024}	{ [PATCH] [loong64][mips64][wasm][liftoff] Optimize in-bounds atomic operations 2024}	{ [PATCH] s390: [wasm][liftoff] Optimize in-bounds atomic operations 2024}	{ [PATCH] [wasm][liftoff] Optimize in-bounds atomic operations 2024}	
{ [PATCH] [turboshaft][ia32] Instruction Selector part 4 2024}	{ [PATCH] [turboshaft][ia32] Instruction Selector part 3 2024}	{ [PATCH] [turboshaft][ia32] Instruction Selector part 2 2024}	{ [PATCH] [turboshaft][ia32] Instruction Selector part 1 2024}	
{ [PATCH] [riscv][wasm] Introduce WasmTrustedInstanceData 2024}	{ [PATCH] [loong64][mips64][wasm] Introduce WasmTrustedInstanceData 2024}	{ [PATCH] PPC/s390: [wasm] Introduce WasmTrustedInstanceData 2024}	{ [PATCH] [wasm] Introduce WasmTrustedInstanceData 2024}	
{ [PATCH] [riscv][builtins] Track topmost script-having execution context 2023}	{ [PATCH] [loong64][mips64][builtins] Track topmost script-having execution context 2023}	{ [PATCH] PPC/s390: [builtins] Track topmost script-having execution context 2023}	{ [PATCH] [builtins] Track topmost script-having execution context 2023}	
{ [PATCH] [loong64][mips64][turboshaft] Add missing pieces to Turboshaft CSA pipeline 2023}	{ [PATCH] [riscv][turboshaft] Add missing pieces to Turboshaft CSA pipeline 2023}	{ [PATCH] PPC/s390: [turboshaft] Add missing pieces to Turboshaft CSA pipeline 2023}	{ [PATCH] [turboshaft] Add missing pieces to Turboshaft CSA pipeline 2023}	
{ [PATCH] PPC/S390: [wasm] Pass arguments directly to memory.init 2023}	{ [PATCH] [loong64][mips64][wasm] Pass arguments directly to memory.init 2023}	{ [PATCH] [riscv][wasm] Pass arguments directly to memory.init 2023}	{ [PATCH] [wasm] Pass arguments directly to memory.init 2023}	
{ [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 19) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 19) 2023}	{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 19) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 19) 2023}	
{ [PATCH] [loong64][interpreter] Skip spread machinery in default derived constructor 2023}	{ [PATCH] [riscv][interpreter] Skip spread machinery in default derived constructor 2023}	{ [PATCH] PPC/s390: [interpreter] Skip spread machinery in default derived constructor 2023}	{ [PATCH] [interpreter] Skip spread machinery in default derived constructor 2023}	
{ [PATCH] [riscv][wasm] Also load the real stack limit from the root register 2023}	{ [PATCH] [loong64][mips64][wasm] Also load the real stack limit from the root register 2023}	{ [PATCH] PPC/s390: [wasm] Also load the real stack limit from the root register 2023}	{ [PATCH] [wasm] Also load the real stack limit from the root register 2023}	
{ [PATCH] [riscv][regexp] Fix stack check in native code when interrupt was requested 2023}	{ [PATCH] [loong64][mips64][regexp] Fix stack check in native code when interrupt was requested 2023}	{ [PATCH] PPC/s390: [regexp] Fix stack check in native code when interrupt was requested 2023}	{ [PATCH] [regexp] Fix stack check in native code when interrupt was requested 2023}	
{ [PATCH] [riscv][wasm][liftoff] Use root register for stack checks 2023}	{ [PATCH] [loong64][mips64][wasm][liftoff] Use root register for stack checks 2023}	{ [PATCH] PPC/s390: [wasm][liftoff] Use root register for stack checks 2023}	{ [PATCH] [wasm][liftoff] Use root register for stack checks 2023}	
{ [PATCH] [riscv] Reland^2 "[liftoff] Add support for direct C calls" 2023}	{ [PATCH] PPC/s390: Reland^2 "[liftoff] Add support for direct C calls" 2023}	{ [PATCH] Reland^2 "[liftoff] Add support for direct C calls" 2023}	{ [PATCH] Reland "[liftoff] Add support for direct C calls" 2023}	
{ [PATCH] [riscv][baseline] Cache feedback cell in the unused slot 2023}	{ [PATCH] PPC/s390: [baseline] Cache feedback cell in the unused slot 2023}	{ [PATCH] [loong64][mips64][baseline] Cache feedback cell in the unused slot 2023}	{ [PATCH] [baseline] Cache feedback cell in the unused slot 2023}	
{ [PATCH] [riscv][interpreter] Cache FBV in the stack frame 2023}	{ [PATCH] [loong64][mips64][interpreter] Cache FBV in the stack frame 2023}	{ [PATCH] PPC/s390: [interpreter] Cache FBV in the stack frame 2023}	{ [PATCH] [interpreter] Cache FBV in the stack frame 2023}	
{ [PATCH] [riscv][wasm] Use Builtin ids instead of RuntimeStubId ids for calls 2023}	{ [PATCH] PPC/s390: [wasm] Use Builtin ids instead of RuntimeStubId ids for calls 2023}	{ [PATCH] [loong64][mips64][wasm] Use Builtin ids instead of RuntimeStubId ids for calls 2023}	{ [PATCH] [wasm] Use Builtin ids instead of RuntimeStubId ids for calls 2023}	
{ [PATCH] ppc/s390: [cfi] Split RelocIterator into ro / rw versions 2023}	{ [PATCH] [riscv][cfi] Split RelocIterator into ro / rw versions 2023}	{ [PATCH] [loong64][mips64][cfi] Split RelocIterator into ro / rw versions 2023}	{ [PATCH] [cfi] Split RelocIterator into ro / rw versions 2023}	
{ [PATCH] [loong64][mips64][liftoff][cleanup] Tighten static register type 2023}	{ [PATCH] [riscv][liftoff][cleanup] Tighten static register type 2023}	{ [PATCH] PPC/s390: [liftoff][cleanup] Tighten static register type 2023}	{ [PATCH] [liftoff][cleanup] Tighten static register type 2023}	
{ [PATCH] [riscv][tagged-ptr] Convert more Objects to Tagged<> 2023}	{ [PATCH] [loong64][mips64][tagged-ptr] Convert more Objects to Tagged<> 2023}	{ [PATCH] PPC/s390: [tagged-ptr] Convert more Objects to Tagged<> 2023}	{ [PATCH] [tagged-ptr] Convert more Objects to Tagged<> 2023}	
{ [PATCH] PPC/s390[wasm]: Fix memory.fill and memory.init with i64.const args 2023}	{ [PATCH] [loong64][mips64][wasm] Fix memory.fill and memory.init with i64.const args 2023}	{ [PATCH] [riscv][wasm] Fix memory.fill and memory.init with i64.const args 2023}	{ [PATCH] [wasm] Fix memory.fill and memory.init with i64.const args 2023}	
{ [PATCH] [riscv][sandbox] Reference Code objects (and their entrypoint) through the CPT 2023}	{ [PATCH] [loong64][mips64][sandbox] Reference Code objects (and their entrypoint) through the CPT 2023}	{ [PATCH] PPC/s390: [sandbox] Reference Code objects (and their entrypoint) through the CPT 2023}	{ [PATCH] [sandbox] Reference Code objects (and their entrypoint) through the CPT 2023}	
{ [PATCH] riscv: [tagged-ptr] Make Object methods static 2023}	{ [PATCH] [loong64][mips64][tagged-ptr] Make Object methods static 2023}	{ [PATCH] PPC/s390: [tagged-ptr] Make Object methods static 2023}	{ [PATCH] [tagged-ptr] Make Object methods static 2023}	
{ [PATCH] PPC/s390: [tagged-ptr] Change obj->IsFoo() to IsFoo(obj) 2023}	{ [PATCH] [loong64][mips64][tagged-ptr] Change obj->IsFoo() to IsFoo(obj) 2023}	{ [PATCH] [riscv][tagged-ptr] Change obj->IsFoo() to IsFoo(obj) 2023}	{ [PATCH] [tagged-ptr] Change obj->IsFoo() to IsFoo(obj) 2023}	
{ [PATCH] [riscv][ignition] Fast construct calls 2023}	{ [PATCH] [loong64][mips64][ignition] Fast construct calls 2023}	{ [PATCH] PPC/S390: [ignition] Fast construct calls 2023}	{ [PATCH] [ignition] Fast construct calls 2023}	
{ [PATCH] [loong64][mips64][builtins] Prepare Api-calls related builtins for refactoring 2023}	{ [PATCH] riscv: [builtins] Prepare Api-calls related builtins for refactoring 2023}	{ [PATCH] PPC/s390: [builtins] Prepare Api-calls related builtins for refactoring 2023}	{ [PATCH] [builtins] Prepare Api-calls related builtins for refactoring 2023}	
{ [PATCH] PPC/s390: [liftoff] Use VarState for C-Calls 2023}	{ [PATCH] [loong64][mips64][liftoff] Use VarState for C-Calls 2023}	{ [PATCH] [riscv][liftoff] Use VarState for C-Calls 2023}	{ [PATCH] [liftoff] Use VarState for C-Calls 2023}	
{ [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 1) 2023}	{ [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 1) 2023}	{ [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 1) 2023}	{ [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 1) 2023}	
{ [PATCH] [riscv][compiler] Add Adapter template argument to InstructionSelector 2023}	{ [PATCH] [loong64][mips64][compiler] Add Adapter template argument to InstructionSelector 2023}	{ [PATCH] PPC/s390: [compiler] Add Adapter template argument to InstructionSelector 2023}	{ [PATCH] [compiler] Add Adapter template argument to InstructionSelector 2023}	
{ [PATCH] [loong64][mips64][builtins] Port HandleApiCall to CSA 2023}	{ [PATCH] [riscv][builtins] Port HandleApiCall to CSA 2023}	{ [PATCH] PPC/s390: [builtins] Port HandleApiCall to CSA 2023}	{ [PATCH] [builtins] Port HandleApiCall to CSA 2023}	
{ [PATCH] [riscv][wasm-gc] Inlining into JS: Lower traps to conditional jump to trap call 2023}	{ [PATCH] [loong64][mips64][wasm-gc] Inlining into JS: Lower traps to conditional jump to trap call 2023}	{ [PATCH] PPC/s390: [wasm-gc] Inlining into JS: Lower traps to conditional jump to trap call 2023}	{ [PATCH] [wasm-gc] Inlining into JS: Lower traps to conditional jump to trap call 2023}	
{ [PATCH] [riscv][builtins] Split CallApiCallback into generic and optimized variants 2023}	{ [PATCH] PPC/s390: [builtins] Split CallApiCallback into generic and optimized variants 2023}	{ [PATCH] [loong64][mips64][builtins] Split CallApiCallback into generic and optimized variants 2023}	{ [PATCH] [builtins] Split CallApiCallback into generic and optimized variants 2023}	
{ [PATCH] [riscv][wasm-gc] Wasm into JS inlining: Get stack trace locations 2023}	{ [PATCH] PPC/s390: [wasm-gc] Wasm into JS inlining: Get stack trace locations 2023}	{ [PATCH] [loong64][mips64][wasm-gc] Wasm into JS inlining: Get stack trace locations 2023}	{ [PATCH] [wasm-gc] Wasm into JS inlining: Get stack trace locations 2023}	
{ [PATCH] [riscv][builtins] Remake Api callback thunk wrappers calling convention 2023}	{ [PATCH] [loong64][mips64][builtins] Remake Api callback thunk wrappers calling convention 2023}	{ [PATCH] PPC/s390: [builtins] Remake Api callback thunk wrappers calling convention 2023}	{ [PATCH] [builtins] Remake Api callback thunk wrappers calling convention 2023}	
{ [PATCH] [loong64][mips64][builtins] Refactor register allocation in CallApiCallback/CallApiGetter 2023}	{ [PATCH] [riscv][builtins] Refactor register allocation in CallApiCallback/CallApiGetter 2023}	{ [PATCH] PPC/s390: [builtins] Refactor register allocation in CallApiCallback/CallApiGetter 2023}	{ [PATCH] [builtins] Refactor register allocation in CallApiCallback/CallApiGetter 2023}	
{ [PATCH] [riscv][isolate]Move Isolate::handle_scope_data_ to IsolateData 2023}	{ [PATCH] [loong64][mips64][isolate] Move Isolate::handle_scope_data_ to IsolateData 2023}	{ [PATCH] PPC/s390: [isolate] Move Isolate::handle_scope_data_ to IsolateData 2023}	{ [PATCH] [isolate] Move Isolate::handle_scope_data_ to IsolateData 2023}	
{ [PATCH] [riscv] Remove code/istream fields from RelocInfo 2023}	{ [PATCH] [loong64][mips64] Remove code/istream fields from RelocInfo 2023}	{ [PATCH] PPC/s390: Remove code/istream fields from RelocInfo 2023}	{ [PATCH] Remove code/istream fields from RelocInfo 2023}	
{ [PATCH] [riscv][code] Merge kind_specific_flags with flags 2023}	{ [PATCH] [loong64][mips64][code] Merge kind_specific_flags with flags 2023}	{ [PATCH] PPC/s390: [code] Merge kind_specific_flags with flags 2023}	{ [PATCH] [code] Merge kind_specific_flags with flags 2023}	
{ [PATCH] [riscv][api] Always use the-hole as default return 2023}	{ [PATCH] [loong64][mips64][api] Always use the-hole as default return 2023}	{ [PATCH] PPC/s390: [api] Always use the-hole as default return 2023}	{ [PATCH] [api] Always use the-hole as default return 2023}	
{ [PATCH] [riscv][builtins] Link up various offset for api calls 2023}	{ [PATCH] [loong64][mips64][builtins] Link up various offset for api calls 2023}	{ [PATCH] PPC/s390: [builtins] Link up various offset for api calls 2023}	{ [PATCH] [builtins] Link up various offset for api calls 2023}	
{ [PATCH] [loong64][mips64] Remove the unused kOffHeapTrampolineRegister 2023}	{ [PATCH] [riscv] Remove the unused kOffHeapTrampolineRegister 2023}	{ [PATCH] PPC/s390: Remove the unused kOffHeapTrampolineRegister 2023}	{ [PATCH] Remove the unused kOffHeapTrampolineRegister 2023}	
{ [PATCH] [riscv]Optimizations for jitless builds 2023}	{ [PATCH] [loong64][mips64] Optimizations for jitless builds 2023}	{ [PATCH] PPC/s390: Optimizations for jitless builds 2023}	{ [PATCH] Optimizations for jitless builds 2023}	
{ [PATCH] [loong64][mips64][wasm] Load isolate root from root register 2023}	{ [PATCH] PPC/s390: [wasm] Load isolate root from root register 2023}	{ [PATCH] [riscv][wasm] Load isolate root from root register 2023}	{ [PATCH] [wasm] Load isolate root from root register 2023}	
{ [PATCH] [riscv][regexp] Add a frame marker for irregexp frames 2023}	{ [PATCH] [loong64][mips64][regexp] Add a frame marker for irregexp frames 2023}	{ [PATCH] PPC/s390: [regexp] Add a frame marker for irregexp frames 2023}	{ [PATCH] [regexp] Add a frame marker for irregexp frames 2023}	
{ [PATCH] [riscv][regexp] Fix stack iteration when -fomit-frame-pointer is enabled 2023}	{ [PATCH] [loong64][mips64][regexp] Fix stack iteration when -fomit-frame-pointer is enabled 2023}	{ [PATCH] PPC/s390: [regexp] Fix stack iteration when -fomit-frame-pointer is enabled 2023}	{ [PATCH] [regexp] Fix stack iteration when -fomit-frame-pointer is enabled 2023}	
{ [PATCH] [loong64][mips64] Rename CodeDataContainer to Code 2023}	{ [PATCH] [riscv] Rename CodeDataContainer to Code 2023}	{ [PATCH] PPC/s390: Rename CodeDataContainer to Code 2023}	{ [PATCH] Rename CodeDataContainer to Code 2023}	
{ [PATCH] [riscv][codet] Remove the CodeT=Code implementation 2023}	{ [PATCH] [loong64][mips64][codet] Remove the CodeT=Code implementation 2023}	{ [PATCH] PPC/s390: [codet] Remove the CodeT=Code implementation 2023}	{ [PATCH] [codet] Remove the CodeT=Code implementation 2023}	
{ [PATCH] [loong64][mips64][centry] Remove the unused SaveFPRegsMode parameter 2022}	{ [PATCH] [riscv][centry] Remove the unused SaveFPRegsMode parameter 2022}	{ [PATCH] PPC/s390: [centry] Remove the unused SaveFPRegsMode parameter 2022}	{ [PATCH] [centry] Remove the unused SaveFPRegsMode parameter 2022}	
{ [PATCH] [loong64][mips64][regalloc] Resolve tail-call gap moves 2022}	{ [PATCH] PPC/s390: [regalloc] Resolve tail-call gap moves 2022}	{ [PATCH] [riscv][regalloc] Resolve tail-call gap moves 2022}	{ [PATCH] [regalloc] Resolve tail-call gap moves 2022}	
{ [PATCH] [loong64][mips64][ext-code-space] Add InterpreterEntryTrampolineForProfiling builtin 2022}	{ [PATCH] PPC/s390: [ext-code-space] Add InterpreterEntryTrampolineForProfiling builtin 2022}	{ [PATCH] [riscv][ext-code-space] Add InterpreterEntryTrampolineForProfiling builtin 2022}	{ [PATCH] [ext-code-space] Add InterpreterEntryTrampolineForProfiling builtin 2022}	
{ [PATCH] [loong64][mips64][masm] Move tiering logic to macro-assembler 2022}	{ [PATCH] [riscv][masm] Move tiering logic to macro-assembler 2022}	{ [PATCH] PPC/s390: [masm] Move tiering logic to macro-assembler 2022}	{ [PATCH] [masm] Move tiering logic to macro-assembler 2022}	
{ [PATCH] [loong64][mips64][wasm][stack-switching] Support rejected promises 2022}	{ [PATCH] [riscv64] [wasm][stack-switching] Support rejected promises 2022}	{ [PATCH] PPC/s390: [wasm][stack-switching] Support rejected promises 2022}	{ [PATCH] [wasm][stack-switching] Support rejected promises 2022}	
{ [PATCH] [riscv64][heap] Remove write barrier builtin for incremental marking 2022}	{ [PATCH] PPC/s390: [heap] Remove write barrier builtin for incremental marking 2022}	{ [PATCH] [loong64][mips64][heap] Remove write barrier builtin for incremental marking 2022}	{ [PATCH] [heap] Remove write barrier builtin for incremental marking 2022}	
{ [PATCH] [loong64][mips64][wasm-simd] Prototype relaxed integer Dot product instructions 2022}	{ [PATCH] [riscv64][wasm-simd] Prototype relaxed integer Dot product instructions 2022}	{ [PATCH] PPC/s390: [wasm-simd] Prototype relaxed integer Dot product instructions 2022}	{ [PATCH] [wasm-simd] Prototype relaxed integer Dot product instructions 2022}	
{ [PATCH] [riscv64] Fix return value of lazy compile runtime function 2022}	{ [PATCH] PPC/s390: [wasm] Fix return value of lazy compile runtime function 2022}	{ [PATCH] [loong64][mips][wasm] Fix return value of lazy compile runtime function 2022}	{ [PATCH] [wasm] Fix return value of lazy compile runtime function 2022}	
{ [PATCH] [loong64][mips][wasm-relaxed-simd] Keep q15_mul emit operations consistent 2022}	{ [PATCH] [riscv64][wasm-relaxed-simd] Keep q15_mul emit operations consistent 2022}	{ [PATCH] PPC/s390: [wasm-relaxed-simd] Keep q15_mul emit operations consistent 2022}	{ [PATCH] [wasm-relaxed-simd] Keep q15_mul emit operations consistent 2022}	
{ [PATCH] [wasm-simd][Arm]Prototype Relaxed Rounding Q-format Multiplication 2022}	{ [PATCH] [loong64][mips][wasm-simd] Prototype Relaxed Rounding Q-format Multiplication 2022}	{ [PATCH] PPC/s390: [wasm-simd] Prototype Relaxed Rounding Q-format Multiplication 2022}	{ [PATCH] [wasm-simd] Prototype Relaxed Rounding Q-format Multiplication 2022}	
{ [PATCH] [riscv64] Remove the Dummy interface descriptor 2022}	{ [PATCH] [loong64][mips] Remove the Dummy interface descriptor 2022}	{ [PATCH] PPC/s390: Remove the Dummy interface descriptor 2022}	{ [PATCH] Remove the Dummy interface descriptor 2022}	
{ [PATCH] [riscv64][osr] Add an install-by-offset mechanism 2022}	{ [PATCH] [loong64][mips][osr] Add an install-by-offset mechanism 2022}	{ [PATCH] s390x/ppc64: [osr] Add an install-by-offset mechanism 2022}	{ [PATCH] [osr] Add an install-by-offset mechanism 2022}	
{ [PATCH] [loong64][mips][wasm] Count direct calls 2022}	{ [PATCH] [riscv64][wasm] Count direct calls 2022}	{ [PATCH] PPC/s390: [wasm] Count direct calls 2022}	{ [PATCH] [wasm] Count direct calls 2022}	
{ [PATCH] [loong64][mips][deoptimizer] Remove soft deopts 2022}	{ [PATCH] [riscv64] [deoptimizer] Remove soft deopts 2022}	{ [PATCH] PPC/s390: [deoptimizer] Remove soft deopts 2022}	{ [PATCH] [deoptimizer] Remove soft deopts 2022}	
{ [PATCH] [loong64][mips][deoptimizer] Remove non-fixed-size deopts 2022}	{ [PATCH] [riscv64] [deoptimizer] Remove non-fixed-size deopts 2022}	{ [PATCH] PPC/s390: [deoptimizer] Remove non-fixed-size deopts 2022}	{ [PATCH] [deoptimizer] Remove non-fixed-size deopts 2022}	
{ [PATCH] [riscv64] Remove dynamic map checks and custom deoptimization kinds 2022}	{ [PATCH] [loong64][mips] Remove dynamic map checks and custom deoptimization kinds 2022}	{ [PATCH] PPC/s390: Remove dynamic map checks and custom deoptimization kinds 2022}	{ [PATCH] Remove dynamic map checks and custom deoptimization kinds 2022}	
{ [PATCH] [riscv64][cleanup] Remove condition based on kJSArgcIncludesReceiver 2022}	{ [PATCH] [loong64][mips][cleanup] Remove condition based on kJSArgcIncludesReceiver 2022}	{ [PATCH] PPC/s390: [cleanup] Remove condition based on kJSArgcIncludesReceiver 2022}	{ [PATCH] [cleanup] Remove condition based on kJSArgcIncludesReceiver 2022}	
{ [PATCH] PPC/s390: Increase the number of args supported by the simulator to 20 2021}	{ [PATCH] [loong64][mips] Increase the number of args supported by the simulator to 20 2021}	{ [PATCH] [riscv64]Increase the number of args supported by the simulator to 20 2021}	{ [PATCH] [arm] Increase the number of args supported by the simulator to 20 2021}	
{ [PATCH] [riscv64][wasm] Execution budget based dynamic tiering 2021}	{ [PATCH] [loong64][mips][wasm] Execution budget based dynamic tiering 2021}	{ [PATCH] PPC/s390: [wasm] Execution budget based dynamic tiering 2021}	{ [PATCH] [wasm] Execution budget based dynamic tiering 2021}	
{ [PATCH] [riscv64][regexp] Compact codegen for large character classes 2021}	{ [PATCH] PPC/s390: [regexp] Compact codegen for large character classes 2021}	{ [PATCH] [loong64][mips][regexp] Compact codegen for large character classes 2021}	{ [PATCH] [regexp] Compact codegen for large character classes 2021}	
{ [PATCH] [riscv64][wasm-gc][liftoff] Reserve a stack slot for feedback 2021}	{ [PATCH] [mips][loong64][wasm-gc][liftoff] Reserve a stack slot for feedback 2021}	{ [PATCH] PPC/s390: [wasm-gc][liftoff] Reserve a stack slot for feedback 2021}	{ [PATCH] [wasm-gc][liftoff] Reserve a stack slot for feedback 2021}	
{ [PATCH] PPC/s390: [regexp] Add dedicated enums for standard character sets 2021}	{ [PATCH] [riscv64][regexp] Add dedicated enums for standard character sets 2021}	{ [PATCH] [loong64][mips][regexp] Add dedicated enums for standard character sets 2021}	{ [PATCH] [regexp] Add dedicated enums for standard character sets 2021}	
{ [PATCH] [riscv64][codegen] Remove PrepareForTailCall 2021}	{ [PATCH] [mips][codegen] Remove PrepareForTailCall 2021}	{ [PATCH] PPC/s390: [codegen] Remove PrepareForTailCall 2021}	{ [PATCH] [codegen] Remove PrepareForTailCall 2021}	
{ [PATCH] [baseline][arm] Remove initial relocation when compiling on heap 2021}	{ [PATCH] [baseline][arm64] Remove initial relocation when compiling on heap 2021}	{ [PATCH] [baseline][ia32] Remove initial relocation when compiling on heap 2021}	{ [PATCH] [baseline][x64] Remove initial relocation when compiling on heap 2021}	
{ [PATCH] PPC/s390: [runtime] Rename Builtins::Name to Builtin 2/2 2021}	{ [PATCH] [runtime] Rename Builtins::Name to Builtin 2/2 2021}	{ [PATCH] [mips][runtime] Rename Builtins::Name to Builtin 1/2 2021}	{ [PATCH] [runtime] Rename Builtins::Name to Builtin 1/2 2021}	
{ [PATCH] [mips][codegen] Assert that RegisterArray has only unique registers 2021}	{ [PATCH] [riscv64][codegen] Assert that RegisterArray has only unique registers 2021}	{ [PATCH] PPC/s390: [codegen] Assert that RegisterArray has only unique registers 2021}	{ [PATCH] [codegen] Assert that RegisterArray has only unique registers 2021}	
{ [PATCH] [mips][nowasm] Fix compile errors 2021}	{ [PATCH] PPC/s390: [nowasm] Fix compile errors 2021}	{ [PATCH] [nowasm] Fix compile errors 2021}	{ [PATCH] [nowasm] Fix compile error 2021}	
{ [PATCH] Reland^4 "[ptr-cage] Turn on shared pointer cage by default for arm64 and x64" 2021}	{ [PATCH] Reland^3 "[ptr-cage] Turn on shared pointer cage by default for arm64 and x64"" 2021}	{ [PATCH] Reland^2 "[ptr-cage] Turn on shared pointer cage by default for arm64 and x64" 2021}	{ [PATCH] Reland "[ptr-cage] Turn on shared pointer cage by default for arm64 and x64" 2021}	
{ [PATCH] [riscv64][compiler] Keep WriteBarrier Smi check on the main code path 2021}	{ [PATCH] [mips][compiler] Keep WriteBarrier Smi check on the main code path 2021}	{ [PATCH] PPC/s390: [compiler] Keep WriteBarrier Smi check on the main code path 2021}	{ [PATCH] [compiler] Keep WriteBarrier Smi check on the main code path 2021}	
{ [PATCH] [mips][wasm][x64] Fix OSR shadow stack violation 2021}	{ [PATCH] [riscv64][wasm] Fix OSR shadow stack violation 2021}	{ [PATCH] PPC/s390: [wasm][x64] Fix OSR shadow stack violation 2021}	{ [PATCH] [wasm][x64] Fix OSR shadow stack violation 2021}	
{ [PATCH] [wasm-simd][arm64][arm][liftoff] Implement i64x2.abs 2021}	{ [PATCH] PPC/s390: [wasm-simd][x64][liftoff] Implement i64x2.abs 2021}	{ [PATCH] [wasm-simd][ia32][liftoff] Implement i64x2.abs 2021}	{ [PATCH] [wasm-simd][x64][liftoff] Implement i64x2.abs 2021}	
{ [PATCH] [wasm-simd][arm] Implement i64x2.abs 2021}	{ [PATCH] [wasm-simd][arm64] Implement i64x2.abs 2021}	{ [PATCH] [wasm-simd][ia32] Implement i64x2.abs 2021}	{ [PATCH] [wasm-simd][x64] Implement i64x2.abs 2021}	
{ [PATCH] [wasm-simd][liftoff][arm64][arm] Implement i64x2 widen i32x4 2021}	{ [PATCH] PPC/s390: [wasm-simd][liftoff][x64] Implement i64x2 widen i32x4 2021}	{ [PATCH] [wasm-simd][liftoff][ia32] Implement i64x2 widen i32x4 2021}	{ [PATCH] [wasm-simd][liftoff][x64] Implement i64x2 widen i32x4 2021}	
{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement saturating rounding multiply high 2021}	{ [PATCH] PPC/s390: [wasm-simd][liftoff][x64] Implement saturating rounding multiply high 2021}	{ [PATCH] [wasm-simd][liftoff][ia32] Implement saturating rounding multiply high 2021}	{ [PATCH] [wasm-simd][liftoff][x64] Implement saturating rounding multiply high 2021}	
{ [PATCH] [mips][wasm-simd] Prototype load lane and store lane 2020}	{ [PATCH] PPC: [wasm-simd]Prototype load lane and store lane 2020}	{ [PATCH] [wasm-simd][arm] Prototype load lane and store lane 2020}	{ [PATCH] [wasm-simd][arm64] Prototype load lane and store lane 2020}	
{ [PATCH] [ppc/s390] Remove arguments adaptor frame 2020}	{ [PATCH] [arm64] Remove arguments adaptor frame 2020}	{ [PATCH] [mips] Remove arguments adaptor frame 2020}	{ [PATCH] [arm] Remove arguments adaptor frame 2020}	
{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement floating-point roundings 2020}	{ [PATCH] [mips][wasm-simd][liftoff] Implement floating-point roundings 2020}	{ [PATCH] PPC/s390: [wasm-simd][liftoff][ia32][x64] Implement floating-point roundings 2020}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement floating-point roundings 2020}	
{ [PATCH] [mips][wasm-simd] Prototype f32x4 and f64x2 rounding 2020}	{ [PATCH] [wasm-simd][ia32] Prototype f32x4 and f64x2 rounding 2020}	{ [PATCH] s390: [wasm-simd] Prototype f32x4 and f64x2 rounding 2020}	{ [PATCH] [wasm-simd][arm64] Prototype f32x4 and f64x2 rounding 2020}	
{ [PATCH] [wasm-simd][liftoff] Implement i64x2 shr_s and shr_u 2020}	{ [PATCH] [mips][wasm-simd][liftoff] Implement i64x2 shr_s and shr_u 2020}	{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement i64x2 shr_s and shr_u 2020}	{ [PATCH] [wasm-simd][liftoff] Implement i64x2 shr_s and shr_u 2020}	
{ [PATCH] [wasm-simd][x64] Bitmask instructions 2020}	{ [PATCH] [wasm-simd][ia32] Bitmask instructions 2020}	{ [PATCH] [wasm-simd][arm] Bitmask instructions 2020}	{ [PATCH] [wasm-simd][arm64] Bitmask instructions 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement max of i8x16, i16x8, i32x4 on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement max of i8x16, i16x8, i32x4 on x64 and ia32 2020}	{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement min of i8x16, i16x8, i32x4 on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement min of i8x16, i16x8, i32x4 on x64 and ia32 2020}	
{ [PATCH] [wasm-simd] Optimize codegen when shift is constant 2020}	{ [PATCH] [wasm-simd] Optimize codegen when shift is constant 2020}	{ [PATCH] [wasm-simd] Optimize codegen when shift is constant 2020}	{ [PATCH] [wasm-simd] Optimize codegen when shift is constant 2020}	
{ [PATCH] PPC/s390: [wasm-simd] Implement v128.andnot for ia32 2020}	{ [PATCH] [wasm-simd] Implement v128.andnot for ia32 2020}	{ [PATCH] [wasm-simd] Implement v128.andnot for arm 2020}	{ [PATCH] [wasm-simd] Implement v128.andnot for arm64 2020}	
{ [PATCH] PPC/s390: [wasm-simd] Implement rounding average for ia32 2020}	{ [PATCH] [wasm-simd] Implement rounding average for ia32 2020}	{ [PATCH] [wasm-simd] Implement rounding average for arm 2020}	{ [PATCH] [wasm-simd] Implement rounding average for arm64 2019}	
{ [PATCH] [mips64][liftoff] Change FillStackSlotsWithZero to use bytes 2019}	{ [PATCH] PPC/s390: [liftoff] Change FillStackSlotsWithZero to use bytes 2019}	{ [PATCH] PPC: [liftoff] Change FillStackSlotsWithZero to use bytes 2019}	{ [PATCH] [liftoff] Change FillStackSlotsWithZero to use bytes 2019}	
{ [PATCH] PPC/s390: Reland "Reland: [builtins] Move non-JS linkage builtins code objects into RO_SPACE" 2019}	{ [PATCH] Reland "Reland: [builtins] Move non-JS linkage builtins code objects into RO_SPACE" 2019}	{ [PATCH] Revert "PPC/s390: Reland: [builtins] Move non-JS linkage builtins code objects into RO_SPACE" 2019}	{ [PATCH] Revert "Reland: [builtins] Move non-JS linkage builtins code objects into RO_SPACE" 2019}	
{ [PATCH] [mips][regexp] Apply the backtrack limit in jitted code 2019}	{ [PATCH] [mips][regexp] Apply the backtrack limit in jitted code 2019}	{ [PATCH] PPC/s390: [regexp] Apply the backtrack limit in jitted code 2019}	{ [PATCH] [regexp] Apply the backtrack limit in jitted code 2019}	
{ [PATCH] [mips][wasm-simd] Implement f64x2 splat extract replace for mips 2019}	{ [PATCH] PPC/s390: [wasm-simd] Implement f64x2 splat extract replace for arm 2019}	{ [PATCH] [wasm-simd] Implement f64x2 splat extract replace for arm 2019}	{ [PATCH] [wasm-simd] Implement i64x2 splat extract replace for ia32 2019}	
{ [PATCH] [ia32][builtins] Defer throw in InterpreterEntryTrampoline 2019}	{ [PATCH] PPC/s390: PPC/s390: [builtins] Defer throw in InterpreterEntryTrampoline 2019}	{ [PATCH] PPC/s390: [builtins] Defer throw in InterpreterEntryTrampoline 2019}	{ [PATCH] [builtins] Defer throw in InterpreterEntryTrampoline 2019}	
{ [PATCH] PPC/s390: [regexp] Consolidate calls to jitted irregexp and regexp interpreter 2019}	{ [PATCH] [mips][regexp] Consolidate calls to jitted irregexp and regexp interpreter 2019}	{ [PATCH] PPC/s390: [regexp] Consolidate calls to jitted irregexp and regexp interpreter 2019}	{ [PATCH] [regexp] Consolidate calls to jitted irregexp and regexp interpreter 2019}	
{ [PATCH] Reland x6 [arraybuffer] Rearchitect backing store ownership 2019}	{ [PATCH] Reland x5 [arraybuffer] Rearchitect backing store ownership 2019}	{ [PATCH] "Reland x4 [arraybuffer] Rearchitect backing store ownership" 2019}	{ [PATCH] "Reland x3 [arraybuffer] Rearchitect backing store ownership" 2019}	
{ [PATCH] [mips32][heap] Clean-up keys of oldspace weakmaps during scavenge 2019}	{ [PATCH] [mips64][heap] Clean-up keys of oldspace weakmaps during scavenge 2019}	{ [PATCH] PPC/S390: [heap] Clean-up keys of oldspace weakmaps during scavenge 2019}	{ [PATCH] [heap] Clean-up keys of oldspace weakmaps during scavenge 2019}	
{ [PATCH] [MIPS32][liftoff] Introduce emit_{i64,i32}_add with immediate 2019}	{ [PATCH] [MIPS64][liftoff] Introduce emit_{i64,i32}_add with immediate 2019}	{ [PATCH] PPC/S390: [liftoff] Introduce emit_{i64,i32}_add with immediate 2019}	{ [PATCH] [liftoff] Introduce emit_{i64,i32}_add with immediate 2019}	
{ [PATCH] [mips][builtin] Improve CallApiCallback calling convention. 2019}	{ [PATCH] PPC/s390: [builtins] Improve CallApiCallback calling convention. 2019}	{ [PATCH] PPC/s390: [builtins] Improve CallApiCallback calling convention. 2019}	{ [PATCH] [builtins] Improve CallApiCallback calling convention. 2019}	
{ [PATCH] Update JSEntry for S390 for new parameter ordering 2019}	{ [PATCH] Update JSEntry for PPC for new parameter ordering 2019}	{ [PATCH] Update JSEntry for MIPS64 for new parameter ordering 2019}	{ [PATCH] Update JSEntry for MIPS for new parameter ordering 2019}	
{ [PATCH] PPC/s390: Reland "[cpu-profiler] Fix stack iterability for fast C calls with no exit frame" 2018}	{ [PATCH] Reland "[cpu-profiler] Fix stack iterability for fast C calls with no exit frame" 2018}	{ [PATCH] Reland "[cpu-profiler] Fix stack iterability for fast C calls with no exit frame" 2018}	{ [PATCH] Revert "[cpu-profiler] Fix stack iterability for fast C calls with no exit frame" 2018}	
{ [PATCH] MIPS64: Fix `Reland "[builtins] Introduce further constant & external reference indirections"` 2018}	{ [PATCH] PPC/s390: Reland "[builtins] Introduce further constant & external reference indirections" 2018}	{ [PATCH] Reland "[builtins] Introduce further constant & external reference indirections" 2018}	{ [PATCH] Revert "[builtins] Introduce further constant & external reference indirections" 2018}	
{ [PATCH] [mips][turbofan] Pass the slot index for the Peek instruction by operand 2018}	{ [PATCH] [ia32][turbofan] Pass the slot index for the peek instruction by operand 2018}	{ [PATCH] [arm][turbofan] Pass the slot index for the peek instruction by operand 2018}	{ [PATCH] [x64][turbofan] Pass the slot index for the peek instruction by operand 2018}	
{ [PATCH] [arm64][turbofan] Implement on-stack returns. 2018}	{ [PATCH] [mips64][turbofan] Implement on-stack returns. 2017}	{ [PATCH] [mips][turbofan] Implement on-stack returns. 2017}	{ [PATCH] [arm][turbofan] Implement on-stack returns. 2017}	
{ [PATCH] MIPS[64]: Support for some SIMD operations (8) 2017}	{ [PATCH] MIPS[64]: Support for some SIMD operations (7) 2017}	{ [PATCH] MIPS[64]: Support for some SIMD operations (6) 2017}	{ [PATCH] MIPS[64]: Support for some SIMD operations (5) 2017}	
{ [PATCH] PPC/s390: Reland: [TypeFeedbackVector] Store optimized code in the vector 2017}	{ [PATCH] Reland: [TypeFeedbackVector] Store optimized code in the vector 2017}	{ [PATCH] PPC/s390: Reland: [TypeFeedbackVector] Store optimized code in the vector 2017}	{ [PATCH] Reland: [TypeFeedbackVector] Store optimized code in the vector 2017}	
{ [PATCH] MIPS[64]: Support for some SIMD operations (4) 2017}	{ [PATCH] MIPS[64]: Support for some SIMD operations (3) 2017}	{ [PATCH] MIPS[64]: Support for some SIMD operations (2) 2017}	{ [PATCH] MIPS[64]: Support for some SIMD operations 2017}	
{ [PATCH] PPC/s390: [Turbofan] Implement call with spread bytecode in assembly code. 2017}	{ [PATCH] [Turbofan] Implement call with spread bytecode in assembly code. 2017}	{ [PATCH] PPC/s390: [Turbofan] Implement super calls with spread bytecode in assembly code. 2017}	{ [PATCH] [Turbofan] Implement super calls with spread bytecode in assembly code. 2017}	
{ [PATCH] PPC/s390: [TypeFeedbackVector] DeclareGlobals needs a literals array 2017}	{ [PATCH] [TypeFeedbackVector] DeclareGlobals needs a literals array 2017}	{ [PATCH] PPC/s390: [TypeFeedbackVector] DeclareGlobals needs a literals array 2017}	{ [PATCH] [TypeFeedbackVector] DeclareGlobals needs a literals array 2017}	
{ [PATCH] Internalize strings in-place (reland^3) 2017}	{ [PATCH] Internalize strings in-place (reland^2) 2017}	{ [PATCH] PPC/s390: Internalize strings in-place (reland) 2017}	{ [PATCH] Internalize strings in-place (reland) 2017}	
{ [PATCH] PPC/s390: Reland [heap] Avoid the use of cells to point from code to new-space objects. 2016}	{ [PATCH] Reland [heap] Avoid the use of cells to point from code to new-space objects. 2016}	{ [PATCH] Reland [heap] Avoid the use of cells to point from code to new-space objects. 2016}	{ [PATCH] [heap] Avoid the use of cells to point from code to new-space objects. 2016}	
{ [PATCH] PPC/S390: [Interpreter] Remove InterpreterExitTrampoline and replace with returning to the entry trampoline. 2016}	{ [PATCH] MIPS64: Fix '[Interpreter] Remove InterpreterExitTrampoline and replace with returning to the entry trampoline.' 2016}	{ [PATCH] [Interpreter] Remove InterpreterExitTrampoline and replace with returning to the entry trampoline. 2016}	{ [PATCH] [Interpreter] Remove InterpreterExitTrampoline and replace with returning to the entry trampoline. 2016}	
{ [PATCH] MIPS: [Atomics] Make Atomics.store a builtin using TF 2016}	{ [PATCH] S390: [Atomics] Make Atomics.store a builtin using TF 2016}	{ [PATCH] PPC: [Atomics] Make Atomics.store a builtin using TF 2016}	{ [PATCH] [Atomics] Make Atomics.store a builtin using TF 2016}	
{ [PATCH] S390: [turbofan] Run everything after representation selection concurrently. 2016}	{ [PATCH] PPC: [turbofan] Run everything after representation selection concurrently. 2016}	{ [PATCH] [turbofan] Run everything after representation selection concurrently. 2016}	{ [PATCH] [turbofan] Run everything after representation selection concurrently. 2016}	
{ [PATCH] S390: Correctly annotate eval origin. 2016}	{ [PATCH] PPC: Correctly annotate eval origin. 2016}	{ [PATCH] Correctly annotate eval origin. 2016}	{ [PATCH] Correctly annotate eval origin. 2016}	
{ [PATCH] S390: [Atomics] code stubs for atomic operations 2016}	{ [PATCH] PPC: [Atomics] code stubs for atomic operations 2016}	{ [PATCH] [Atomics] code stubs for atomic operations 2016}	{ [PATCH] [Atomics] code stubs for atomic operations 2016}	
{ [PATCH] S390: Turn StoreIC::Megamorphic into a builtin, get rid of the non-monomorphic-cache 2016}	{ [PATCH] PPC: Turn StoreIC::Megamorphic into a builtin, get rid of the non-monomorphic-cache 2016}	{ [PATCH] Turn StoreIC::Megamorphic into a builtin, get rid of the non-monomorphic-cache 2016}	{ [PATCH] Turn StoreIC::Megamorphic into a builtin, get rid of the non-monomorphic-cache 2016}	
{ [PATCH] MIPS64: Fix '[generators] Decouple generator resume from fullcodegen.' 2016}	{ [PATCH] S390: [generators] Decouple generator resume from fullcodegen. 2016}	{ [PATCH] PPC: [generators] Decouple generator resume from fullcodegen. 2016}	{ [PATCH] [generators] Decouple generator resume from fullcodegen. 2016}	
{ [PATCH] S390: Fix '[ic] Use the CallFunction builtin to invoke accessors.' 2016}	{ [PATCH] S390: [ic] Use the CallFunction builtin to invoke accessors. 2016}	{ [PATCH] PPC: [ic] Use the CallFunction builtin to invoke accessors. 2016}	{ [PATCH] [ic] Use the CallFunction builtin to invoke accessors. 2016}	
{ [PATCH] S390: [crankshaft] Fixing ES6 tail call elimination. 2016}	{ [PATCH] PPC: [crankshaft] Fixing ES6 tail call elimination. 2016}	{ [PATCH] [crankshaft] Fixing ES6 tail call elimination. 2016}	{ [PATCH] [crankshaft] Fixing ES6 tail call elimination. 2016}	
{ [PATCH] PPC: [compiler] Drop the CompareNilIC. 2016}	{ [PATCH] [compiler] Drop the CompareNilIC. 2016}	{ [PATCH] PPC: [compiler] Drop the CompareNilIC. 2016}	{ [PATCH] [compiler] Drop the CompareNilIC. 2016}	
{ [PATCH] MIPS64: Fix2 '[runtime] Introduce FastNewStrictArgumentsStub to optimize strict arguments.' 2016}	{ [PATCH] MIPS64: Fix '[runtime] Introduce FastNewStrictArgumentsStub to optimize strict arguments.' 2016}	{ [PATCH] PPC: [runtime] Introduce FastNewStrictArgumentsStub to optimize strict arguments. 2016}	{ [PATCH] [runtime] Introduce FastNewStrictArgumentsStub to optimize strict arguments. 2016}	
{ [PATCH] PPC: [runtime] Introduce dedicated JSBoundFunction to represent bound functions. 2015}	{ [PATCH] MIPS64: Fix [runtime] Introduce dedicated JSBoundFunction to represent bound functions. 2015}	{ [PATCH] [runtime] Introduce dedicated JSBoundFunction to represent bound functions. 2015}	{ [PATCH] [runtime] Introduce dedicated JSBoundFunction to represent bound functions. 2015}	
{ [PATCH] PPC: [debugger] do not predict step in target for liveedit. 2015}	{ [PATCH] [debugger] do not predict step in target for liveedit. 2015}	{ [PATCH] [debugger] do not predict step in target for liveedit. 2015}	{ [PATCH] [debugger] do not predict step in target for liveedit. 2015}	
{ [PATCH] PPC: [turbofan] Implemented the optional Float32RoundUp operator. 2015}	{ [PATCH] PPC: [turbofan] Implemented the optional Float32RoundDown operator. 2015}	{ [PATCH] [turbofan] Implemented the optional Float32RoundUp operator. 2015}	{ [PATCH] [turbofan] Implemented the optional Float32RoundDown operator. 2015}	
{ [PATCH] PPC: [Interpreter] Add CallRuntime support to the interpreter. 2015}	{ [PATCH] [Interpreter] Add CallRuntime support to the interpreter. 2015}	{ [PATCH] [Interpreter] Add CallRuntime support to the interpreter. 2015}	{ [PATCH] [Interpreter] Add CallRuntime support to the interpreter. 2015}	
{ [PATCH] Reland MIPS: Vector-ICs - speed towards the monomorphic exit as quickly as possible. 2015}	{ [PATCH] MIPS: Vector-ICs - speed towards the monomorphic exit as quickly as possible. 2015}	{ [PATCH] PPC: Vector-ICs - speed towards the monomorphic exit as quickly as possible. 2015}	{ [PATCH] Vector-ICs - speed towards the monomorphic exit as quickly as possible. 2015}	
{ [PATCH] PPC: [turbofan] Add backend support for float32 operations. 2015}	{ [PATCH] MIPS64: [turbofan] Add backend support for float32 operations. 2015}	{ [PATCH] MIPS: [turbofan] Add backend support for float32 operations. 2015}	{ [PATCH] [turbofan] Add backend support for float32 operations. 2015}	
{ [PATCH] PPC: Remove kind field from StackHandler. 2015}	{ [PATCH] MIPS: Remove kind field from StackHandler. 2015}	{ [PATCH] Remove kind field from StackHandler. 2015}	{ [PATCH] Remove kind field from StackHandler. 2015}	
{ [PATCH] Implement subclassing Arrays. 2015}	{ [PATCH] Implement subclassing Arrays. 2015}	{ [PATCH] Implement subclassing Arrays. 2015}	{ [PATCH] Implement subclassing Arrays. 2015}	
{ [PATCH] MIPS64: Externalize deoptimization reasons. 2015}	{ [PATCH] Externalize deoptimization reasons. 2015}	{ [PATCH] Externalize deoptimization reasons. 2015}	{ [PATCH] Externalize deoptimization reasons. 2015}	
{ [PATCH] MIPS: CodeStubs contain their corresponding Isolate* now. (part 2) 2014}	{ [PATCH] MIPS: CodeStubs contain their corresponding Isolate* now. (part 1) 2014}	{ [PATCH] CodeStubs contain their corresponding Isolate* now. (part 2) 2014}	{ [PATCH] CodeStubs contain their corresponding Isolate* now. (part 1) 2014}	
{ [PATCH] MIPS: Implement structural function and array types 2014}	{ [PATCH] Implement structural function and array types 2014}	{ [PATCH] Implement structural function and array types 2014}	{ [PATCH] Implement structural function and array types 2014}	
{ [PATCH] MIPS: Implement in-heap backing store for typed arrays. 2014}	{ [PATCH] Implement in-heap backing store for typed arrays. 2014}	{ [PATCH] Implement in-heap backing store for typed arrays. 2014}	{ [PATCH] Implement in-heap backing store for typed arrays. 2014}	
{ [PATCH] MIPS: Consistently use named getters for Lithium operands on ARM. 2012}	{ [PATCH] Consistently use named getters for Lithium operands on ARM. 2012}	{ [PATCH] Consistently use named getters for Lithium operands on ia32. 2012}	{ [PATCH] Consistently use named getters for Lithium operands on x64 2012}	
{ [PATCH] MIPS: Implements a new API to set a function entry hook for profiling. 2012}	{ [PATCH] Implements a new API to set a function entry hook for profiling. 2012}	{ [PATCH] Implements a new API to set a function entry hook for profiling. 2012}	{ [PATCH] Implements a new API to set a function entry hook for profiling. 2012}	
{ [PATCH] Landing for Rodolph Perfetta. 2010}	{ [PATCH] Landing for Rodolph Perfetta. 2010}	{ [PATCH] Landing for Rodolph Perfetta. 2010}	{ [PATCH] Land for Rodolph Perfetta. 2010}	
{ [PATCH] [loong64][mips64][fastapi] Set context for fast api calls 2024}	{ [PATCH] PPC/s390: [fastapi] Set context for fast api calls 2024}	{ [PATCH] [fastapi] Set context for fast api calls 2024}	
{ [PATCH] [loong64][mips64][fastcall] Support throwing exceptions 2024}	{ [PATCH] PPC/s390: [fastcall] Support throwing exceptions 2024}	{ [PATCH] [fastcall] Support throwing exceptions 2024}	
{ [PATCH] [riscv][wasm] Call on-heap import wrappers via a trampoline 2024}	{ [PATCH] [loong64][mips64][wasm] Call on-heap import wrappers via a trampoline 2024}	{ [PATCH] [wasm] Call on-heap import wrappers via a trampoline 2024}	
{ [PATCH] [turboshaft][x64] Port/enable ISEL unittests part 2 2024}	{ [PATCH] [turboshaft][x64] Port/enable ISEL unittests part 1 2024}	{ [PATCH] [turboshaft][arm64] Port/enable ISEL unittests part 1 2024}	
{ [PATCH] [riscv][sandbox] Tag entries in the TrustedPointerTable 2024}	{ [PATCH] [loong64][sandbox] Tag entries in the TrustedPointerTable 2024}	{ [PATCH] [sandbox] Tag entries in the TrustedPointerTable 2024}	
{ [PATCH] [loong64][mips64][wasm] Move WasmApiFunctionRef to trusted space 2024}	{ [PATCH] PPC/s390: [wasm] Move WasmApiFunctionRef to trusted space 2024}	{ [PATCH] [wasm] Move WasmApiFunctionRef to trusted space 2024}	
{ [PATCH] [riscv][heap] Always use MemoryChunk:: for flag names 2024}	{ [PATCH] PPC/s390: [heap] Always use MemoryChunk:: for flag names 2024}	{ [PATCH] [heap] Always use MemoryChunk:: for flag names 2024}	
{ [PATCH] [loong64][mips64][sandbox] Refactor Code::source_position_table 2024}	{ [PATCH] PPC/s390: [sandbox] Refactor Code::source_position_table 2024}	{ [PATCH] [sandbox] Refactor Code::source_position_table 2024}	
{ [PATCH] [loong64][mips64][liftoff] Use WasmDispatchTable for indirect calls 2024}	{ [PATCH] PPC/s390: [liftoff] Use WasmDispatchTable for indirect calls 2024}	{ [PATCH] [liftoff] Use WasmDispatchTable for indirect calls 2024}	
{ [PATCH] [turboshaft][ppc] Port InstructionSelector part 3 2024}	{ [PATCH] [turboshaft][ppc] Port InstructionSelector part 2 2024}	{ [PATCH] [turboshaft][ppc] Port InstructionSelector part 1 2024}	
{ [PATCH] [loong64][mips64][heap] Prepare splitting of MemoryChunk Metadata and Header 2024}	{ [PATCH] [riscv] Prepare splitting of MemoryChunk Metadata and Header 2024}	{ [PATCH] [heap] Prepare splitting of MemoryChunk Metadata and Header 2024}	
{ [PATCH] [loong64][mips64][wasm-gc][liftoff] Use trapping null 2024}	{ [PATCH] PPC/s390: [wasm-gc][liftoff] Use trapping null 2024}	{ [PATCH] [wasm-gc][liftoff] Use trapping null 2024}	
{ [PATCH] s390: Restrict bit_cast 2023}	{ [PATCH] Restrict bit_cast 2023}	{ [PATCH] Restrict bit_cast 2023}	
{ [PATCH] [wasm][jspi][arm] Run JS imports on the central stack 2023}	{ [PATCH] PPC/S390: [wasm][jspi] Run JS imports on the central stack 2023}	{ [PATCH] [wasm][jspi][ia32] Run JS imports on the central stack 2023}	
{ [PATCH] PPC/s390: [builtins][masm] Use CallBuiltin/TailCallBuiltin where possible 2023}	{ [PATCH] [riscv][builtins][masm] Use CallBuiltin/TailCallBuiltin where possible 2023}	{ [PATCH] [builtins][masm] Use CallBuiltin/TailCallBuiltin where possible 2023}	
{ [PATCH] [loong64][mips64][exceptions] Unify pending and scheduled exceptions 2023}	{ [PATCH] PPC/s390: [exceptions] Unify pending and scheduled exceptions 2023}	{ [PATCH] [exceptions] Unify pending and scheduled exceptions 2023}	
{ [PATCH] [loong64][mips64][wasm] Add platform-specific support for the wasm-to-js wrapper 2023}	{ [PATCH] PPC/s390: [wasm] Add platform-specific support for the wasm-to-js wrapper 2023}	{ [PATCH] [wasm][riscv] Add platform-specific support for the wasm-to-js wrapper 2023}	
{ [PATCH] [loong64][mips64] Add StackPointer and SetStackPointer ops 2023}	{ [PATCH] PPC/s390: Add StackPointer and SetStackPointer ops 2023}	{ [PATCH] [x64] Add StackPointer and SetStackPointer ops 2023}	
{ [PATCH] [loong64][mips64][tagged-ptr] Remove Tagged<Foo> -> Foo conversion 2023}	{ [PATCH] PPC/s390: [tagged-ptr] Remove Tagged<Foo> -> Foo conversion 2023}	{ [PATCH] [tagged-ptr] Remove Tagged<Foo> -> Foo conversion 2023}	
{ [PATCH] [riscv] Reduce the number of vector arch codes (Part 4) 2023}	{ [PATCH] [riscv] Reduce the number of  vector arch code(Part 2) 2023}	{ [PATCH] [riscv] Reduce the number of  vector arch code(Part 1) 2023}	
{ [PATCH] [wasm][ia32] Add platform-specific support for the wasm-to-js wrapper 2023}	{ [PATCH] [wasm][arm] Add platform-specific support for the wasm-to-js wrapper 2023}	{ [PATCH] [wasm][arm64] Add platform-specific support for the wasm-to-js wrapper 2023}	
{ [PATCH] [loong64][mips64][turboshaft][js] Add reducer to make int64->int32 truncations explicit 2023}	{ [PATCH] PPC/s390: [turboshaft][js] Add reducer to make int64->int32 truncations explicit 2023}	{ [PATCH] [turboshaft][js] Add reducer to make int64->int32 truncations explicit 2023}	
{ [PATCH] [loong64][mips64][liftoff] Remove signature from C calls 2023}	{ [PATCH] PPC/s390: [liftoff] Remove signature from C calls 2023}	{ [PATCH] [liftoff] Remove signature from C calls 2023}	
{ [PATCH] [loong64][mips64] Make stack switching work on the simulator and with CFI 2023}	{ [PATCH] PPC/s390: Make stack switching work on the simulator and with CFI 2023}	{ [PATCH] [arm64] Make stack switching work on the simulator and with CFI 2023}	
{ [PATCH] [loong64][mips64][wasm] Generic js-to-wasm wrapper written in Torque 2023}	{ [PATCH] PPC/s390: [wasm] Generic js-to-wasm wrapper written in Torque 2023}	{ [PATCH] [wasm] Generic js-to-wasm wrapper written in Torque 2023}	
{ [PATCH] [loong64][mips64][heap] Move age from BytecodeArray into SharedFunctionInfo 2023}	{ [PATCH] [riscv][heap] Move age from BytecodeArray into SharedFunctionInfo 2023}	{ [PATCH] [heap] Move age from BytecodeArray into SharedFunctionInfo 2023}	
{ [PATCH] PPC/s390: Reland^2 "[heap] Move age from BytecodeArray into SharedFunctionInfo" 2023}	{ [PATCH] Reland^2 "[heap] Move age from BytecodeArray into SharedFunctionInfo" 2023}	{ [PATCH] Reland "[heap] Move age from BytecodeArray into SharedFunctionInfo" 2023}	
{ [PATCH] PPC/s390: [wasm-stringrefs] Recognize a few more builtins 2023}	{ [PATCH] [loong64][mips64][wasm-stringrefs] Recognize a few more builtins 2023}	{ [PATCH] [wasm-stringrefs] Recognize a few more builtins 2023}	
{ [PATCH] [loong64][mips64] Flip the order of write barrier checks in Turbofan 2023}	{ [PATCH] PPC/s390: Flip the order of write barrier checks in Turbofan 2023}	{ [PATCH] Flip the order of write barrier checks in Turbofan 2023}	
{ [PATCH] [loong64][mips64][builtins] Clean up api callback stack access 2023}	{ [PATCH] PPC/s390: [builtins] Clean up api callback stack access 2023}	{ [PATCH] [builtins] Clean up api callback stack access 2023}	
{ [PATCH] [loong64][mips64] Allocate builtin Code objects in RO space 2023}	{ [PATCH] [riscv]Allocate builtin Code objects in RO space 2023}	{ [PATCH] Allocate builtin Code objects in RO space 2023}	
{ [PATCH] [loong64][mips64] Move data fields from InstructionStream to Code 2023}	{ [PATCH] [riscv] Move data fields from InstructionStream to Code 2023}	{ [PATCH] Move data fields from InstructionStream to Code 2023}	
{ [PATCH] [loong64][mips64][wasm-gc] Inlining of very small wasm functions into JS 2023}	{ [PATCH] [riscv][wasm-gc] Inlining of very small wasm functions into JS 2023}	{ [PATCH] [wasm-gc] Inlining of very small wasm functions into JS 2023}	
{ [PATCH] PPC/s390: [wasm-relaxed-simd] Add dot/dot_add implementations 2023}	{ [PATCH] [riscv64][wasm-relaxed-simd] Add dot/dot_add RISCV implementations 2023}	{ [PATCH] [wasm-relaxed-simd] Add dot/dot_add ARM implementations 2023}	
{ [PATCH] [loong64][mips64] Remove the AbstractCode == InstructionStream case 2023}	{ [PATCH] PPC/s390: Remove the AbstractCode == InstructionStream case 2023}	{ [PATCH] Remove the AbstractCode == InstructionStream case 2023}	
{ [PATCH] [loong64][mips64][wasm] Fix printing of wasm-to-js frames 2023}	{ [PATCH] PPC/s390: [wasm] Fix printing of wasm-to-js frames 2022}	{ [PATCH] [wasm] Fix printing of wasm-to-js frames 2022}	
{ [PATCH] [loong64][mips64][foozzie] Disable loong64/mips64-sim debugger during differential fuzzing 2022}	{ [PATCH] PPC/s390: [foozzie] Disable arm/arm64-sim debugger during differential fuzzing 2022}	{ [PATCH] [foozzie] Disable arm/arm64-sim debugger during differential fuzzing 2022}	
{ [PATCH] [riscv][wasm] Allocate feedback vectors on demand 2022}	{ [PATCH] [loong64][mips64][wasm] Allocate feedback vectors on demand 2022}	{ [PATCH] [wasm] Allocate feedback vectors on demand 2022}	
{ [PATCH] [loong64][mips64][wasm][liftoff] Fix and cleanup tracing of return value 2022}	{ [PATCH] PPC/s390: [wasm][liftoff] Fix and cleanup tracing of return value 2022}	{ [PATCH] [wasm][liftoff] Fix and cleanup tracing of return value 2022}	
{ [PATCH] [loong64][mips64][log][compiler] Enable first-execution logging 2022}	{ [PATCH] PPC/s390: [log][compiler] Enable first-execution logging 2022}	{ [PATCH] [log][compiler] Enable first-execution logging 2022}	
{ [PATCH] [loong64][mips64][maglev] Implement Maglev-to-Turbofan OSR 2022}	{ [PATCH] PPC/s390: [maglev] Implement Maglev-to-Turbofan OSR 2022}	{ [PATCH] [maglev] Implement Maglev-to-Turbofan OSR 2022}	
{ [PATCH] [loong64][mips64][sparkplug] Allow sparkplug->ignition deopt in func entry 2022}	{ [PATCH] PPC/s390: [sparkplug] Allow sparkplug->ignition deopt in func entry 2022}	{ [PATCH] [sparkplug] Allow sparkplug->ignition deopt in func entry 2022}	
{ [PATCH] [loong64][mips64][wasm] Keep call_indirect index on the stack 2022}	{ [PATCH] PPC/s390: [wasm] Keep call_indirect index on the stack 2022}	{ [PATCH] [wasm] Keep call_indirect index on the stack 2022}	
{ [PATCH] PPC/s390: [masm][cleanup] Refactor call related assembler options 2022}	{ [PATCH] [riscv][masm][cleanup] Refactor call related assembler options 2022}	{ [PATCH] [masm][cleanup] Refactor call related assembler options 2022}	
{ [PATCH] [loong64][mips64][heap] Add shared barrier to RecordWrite builtin 2022}	{ [PATCH] PPC/s390: [heap] Add shared barrier to RecordWrite builtin 2022}	{ [PATCH] [heap] Add shared barrier to RecordWrite builtin 2022}	
{ [PATCH] [loong64][mips64][codegen] Optimize out calls to TurboAssembler::Assert* 2022}	{ [PATCH] PPC/s390: [codegen] Optimize out calls to TurboAssembler::Assert* 2022}	{ [PATCH] [codegen] Optimize out calls to TurboAssembler::Assert* 2022}	
{ [PATCH] [loong64][mips64][heap] Improve verification for code write barrier 2022}	{ [PATCH] PPC/s390: [heap] Improve verification for code write barrier 2022}	{ [PATCH] [heap] Improve verification for code write barrier 2022}	
{ [PATCH] [loong64][mips64][compiler] Remove delayed string constants 2022}	{ [PATCH] PPC/s390: [compiler] Remove delayed string constants 2022}	{ [PATCH] [compiler] Remove delayed string constants 2022}	
{ [PATCH] [loong64][mips64][compiler] Merge all CompileFoo_Bar runtime functions 2022}	{ [PATCH] PPC/s390: [compiler] Merge all CompileFoo_Bar runtime functions 2022}	{ [PATCH] [compiler] Merge all CompileFoo_Bar runtime functions 2022}	
{ [PATCH] [riscv] Reland: [wasm] WasmCompileLazyFrame scanning 2022}	{ [PATCH] PPC/s390: Reland: [wasm] WasmCompileLazyFrame scanning 2022}	{ [PATCH] Reland: [wasm] WasmCompileLazyFrame scanning 2022}	
{ [PATCH] [riscv][Cleanup] Use CmpInstanceTypeRange in MacroAssembler 2022}	{ [PATCH] PPC/s390: [Cleanup] Use CmpInstanceTypeRange in MacroAssembler 2022}	{ [PATCH] [Cleanup] Use CmpInstanceTypeRange in MacroAssembler 2022}	
{ [PATCH] Remove some unused includes (4) 2022}	{ [PATCH] PPC/s390: Remove some unused includes (3) 2022}	{ [PATCH] Remove some unused includes (3) 2022}	
{ [PATCH] [loong64][mips64][fastcall] Support EnforceRange annotation 2022}	{ [PATCH] PPC/s390: [fastcall] Support EnforceRange annotation 2022}	{ [PATCH] [fastcall] Support EnforceRange annotation 2022}	
{ [PATCH] [loong64][mips64][wasm] Fix and harden all conditional tier-up checks 2022}	{ [PATCH] [riscv64][wasm] Fix and harden all conditional tier-up checks 2022}	{ [PATCH] [wasm] Fix and harden all conditional tier-up checks 2022}	
{ [PATCH] [loong64][mips64][liftoff] Fix implicit conversion to LiftoffRegList 2022}	{ [PATCH] [riscv64][liftoff] Fix implicit conversion to LiftoffRegList 2022}	{ [PATCH] [liftoff] Fix implicit conversion to LiftoffRegList 2022}	
{ [PATCH] [loong64][regalloc] Improve gap resolver algorithm 2022}	{ [PATCH] PPC/S390: [regalloc] Improve gap resolver algorithm 2022}	{ [PATCH] [regalloc] Improve gap resolver algorithm 2022}	
{ [PATCH] PPC/s390: [wasm-relaxed-simd] Add liftoff min/max operations on Arm and Arm64 2022}	{ [PATCH] [loong64][mips][wasm-relaxed-simd] Add liftoff min/max operations on Arm and Arm64 2022}	{ [PATCH] [wasm-relaxed-simd] Add liftoff min/max operations on Arm and Arm64 2022}	
{ [PATCH] [riscv64] Reland "[osr] Use the new OSR cache" 2022}	{ [PATCH] PPC/S390: Reland "[osr] Use the new OSR cache" 2022}	{ [PATCH] Reland "[osr] Use the new OSR cache" 2022}	
{ [PATCH] PPC/s390: Reland "[osr] Extract extended OSR checks to BaselineOnStackReplacement builtin" 2022}	{ [PATCH] Reland "[osr] Extract extended OSR checks to BaselineOnStackReplacement builtin" 2022}	{ [PATCH] Revert "[osr] Extract extended OSR checks to BaselineOnStackReplacement builtin" 2022}	
{ [PATCH] [loong64][mips][codegen] Change RegList into a class 2022}	{ [PATCH] PPC/s390: [codegen] Change RegList into a class 2022}	{ [PATCH] [codegen] Change RegList into a class 2022}	
{ [PATCH] [loong64][mips][compiler] Always use full version of RecordWrite builtin 2022}	{ [PATCH] PPC/s390: [compiler] Always use full version of RecordWrite builtin 2022}	{ [PATCH] [compiler] Always use full version of RecordWrite builtin 2022}	
{ [PATCH] PPC/s390: Remove ClassConstructor check from CallFunction 2022}	{ [PATCH] [loong64][mips]Remove ClassConstructor check from CallFunction 2022}	{ [PATCH] Remove ClassConstructor check from CallFunction 2022}	
{ [PATCH] [riscv64][compiler] Remove OptimizationMarker::kLogFirstExecution 2022}	{ [PATCH] [loong64][compiler] Remove OptimizationMarker::kLogFirstExecution 2022}	{ [PATCH] [compiler] Remove OptimizationMarker::kLogFirstExecution 2022}	
{ [PATCH] [riscv64] [turbofan] Handle class constructor 2021}	{ [PATCH] PPC/s390: [turbofan] Handle class constructor 2021}	{ [PATCH] [turbofan] Handle class constructor 2021}	
{ [PATCH] [x64] Verify disassembly of more AVX instructions 2021}	{ [PATCH] [x64] Verify disassembly of some AVX instructions 2021}	{ [PATCH] [x64] Verify disassembly of some AVX instructions 2021}	
{ [PATCH] [loong64][mips][regexp][cleanup] Use 'override' instead of 'virtual' 2021}	{ [PATCH] PPC/s390: [regexp][cleanup] Use 'override' instead of 'virtual' 2021}	{ [PATCH] [regexp][cleanup] Use 'override' instead of 'virtual' 2021}	
{ [PATCH] [mips][loong64][wasm] Interpret table.grow result as 32 bit 2021}	{ [PATCH] ppc/s390: [wasm] Interpret table.grow result as 32 bit 2021}	{ [PATCH] [wasm] Interpret table.grow result as 32 bit 2021}	
{ [PATCH] [riscv64] [regexp]: Allow reentrant irregexp execution 2021}	{ [PATCH] PPC/s390 [regexp]: Allow reentrant irregexp execution 2021}	{ [PATCH] [regexp] Allow reentrant irregexp execution 2021}	
{ [PATCH] [mips][loong64][compiler] Teach InstructionScheduler about protected memory accesses 2021}	{ [PATCH] PPC/s390: [compiler] Teach InstructionScheduler about protected memory accesses 2021}	{ [PATCH] [compiler] Teach InstructionScheduler about protected memory accesses 2021}	
{ [PATCH] [mips][loong64][isolate-data] Split builtin tables into tiers 2021}	{ [PATCH] ppc/s390: [isolate-data] Split builtin tables into tiers 2021}	{ [PATCH] [isolate-data] Split builtin tables into tiers 2021}	
{ [PATCH] PPC/s390: [sparkplug] Remove BaselineData, use Code directly 2021}	{ [PATCH] [mips][loong64][sparkplug] Remove BaselineData, use Code directly 2021}	{ [PATCH] [sparkplug] Remove BaselineData, use Code directly 2021}	
{ [PATCH] [riscv64][sparkplug] Clobber accumulator in StaGlobal 2021}	{ [PATCH] [mips][loong64][sparkplug] Clobber accumulator in StaGlobal 2021}	{ [PATCH] [sparkplug] Clobber accumulator in StaGlobal 2021}	
{ [PATCH] [mips][wasm] Use a consistent limit for large frames 2021}	{ [PATCH] PPC/s390: [wasm] Use a consistent limit for large frames 2021}	{ [PATCH] [wasm] Use a consistent limit for large frames 2021}	
{ [PATCH] [mips][liftoff] Push the instance as part of frame construction 2021}	{ [PATCH] PPC/s390: [liftoff] Push the instance as part of frame construction 2021}	{ [PATCH] [liftoff] Push the instance as part of frame construction 2021}	
{ [PATCH] [wasm][liftoff][mips] Detect NaNs for fuzzing 2021}	{ [PATCH] PPC/s390: [wasm][liftoff][ia32][x64] Detect NaNs for fuzzing 2021}	{ [PATCH] [wasm][liftoff][ia32][x64] Detect NaNs for fuzzing 2021}	
{ [PATCH] [compiler] Add TSAN support for generated code movl and movq 2021}	{ [PATCH] [compiler] Add TSAN support for generated code movb and movw 2021}	{ [PATCH] [compiler] Add TSAN support for generated code movq and movl 2021}	
{ [PATCH] [mips] Fix build failed 2021}	{ [PATCH] [riscv64] Fix build failed 2021}	{ [PATCH] [riscv64] Fix build failed 2021}	
{ [PATCH] Revert "Reland^3 "[ptr-cage] Turn on shared pointer cage by default for arm64 and x64""" 2021}	{ [PATCH] Revert "Reland^2 "[ptr-cage] Turn on shared pointer cage by default for arm64 and x64"" 2021}	{ [PATCH] Revert "Reland "[ptr-cage] Turn on shared pointer cage by default for arm64 and x64"" 2021}	
{ [PATCH] [riscv64][codegen] Add static interface descriptors 2021}	{ [PATCH] [mips][codegen] Add static interface descriptors 2021}	{ [PATCH] [codegen] Add static interface descriptors 2021}	
{ [PATCH] [mips] Allowing map word to be used for other state in GC header. 2021}	{ [PATCH] PPC/s390: Allowing map word to be used for other state in GC header. 2021}	{ [PATCH] Allowing map word to be used for other state in GC header. 2021}	
{ [PATCH] [mips][sparkplug][deoptimizer] Deoptimize to baseline. 2021}	{ [PATCH] PPC/s390: [sparkplug][deoptimizer] Deoptimize to baseline. 2021}	{ [PATCH] [sparkplug][deoptimizer] Deoptimize to baseline. 2021}	
{ [PATCH] [mips][wasm][liftoff][eh] Implement catch with immediate 2021}	{ [PATCH] PPC/s390x: [wasm][liftoff][eh] Implement catch with immediate 2021}	{ [PATCH] [wasm][liftoff][eh] Implement catch with immediate 2021}	
{ [PATCH] [ia32] Merge some macro-assembler functions into macro lists 2021}	{ [PATCH] [ia32] Merge some macro-assembler functions into macro lists 2021}	{ [PATCH] [ia32] Merge some macro-assembler functions into macro lists 2021}	
{ [PATCH] [mips][no-wasm] Remove wasm-specific code from codegen 2021}	{ [PATCH] PPC/s390: [no-wasm] Remove wasm-specific code from codegen 2021}	{ [PATCH] [no-wasm] Remove wasm-specific code from codegen 2021}	
{ [PATCH] PPC: Reland "Reland "[wasm][liftoff] Respect CallDescriptor linkage"" 2021}	{ [PATCH] s390x: Reland "Reland "[wasm][liftoff] Respect CallDescriptor linkage"" 2021}	{ [PATCH] Reland "Reland "[wasm][liftoff] Respect CallDescriptor linkage"" 2021}	
{ [PATCH] [mips][wasm] Rename more "type" to "kind" 2021}	{ [PATCH] PPC/s390: [wasm] Rename more "type" to "kind" 2021}	{ [PATCH] [wasm] Rename more "type" to "kind" 2021}	
{ [PATCH] [mips][wasm-simd] Remove i8x16.mul 2021}	{ [PATCH] PPC/s390: [wasm-simd] Remove i8x16.mul 2021}	{ [PATCH] [wasm-simd] Remove i8x16.mul 2021}	
{ [PATCH] [mips][Liftoff] Use ValueKind instead of ValueType 2021}	{ [PATCH] PPC/s390x:[Liftoff] Use ValueKind instead of ValueType 2021}	{ [PATCH] [Liftoff] Use ValueKind instead of ValueType 2021}	
{ [PATCH] [mips][sparkplug] Use return to jump to optimized code to keep the RSB balanced 2021}	{ [PATCH] PPC/s390: [sparkplug] Use return to jump to optimized code to keep the RSB balanced 2021}	{ [PATCH] [sparkplug] Use return to jump to optimized code to keep the RSB balanced 2021}	
{ [PATCH] [mips][wasm][debug] Implement instrumentation breakpoint 2021}	{ [PATCH] s390: [wasm][debug] Implement instrumentation breakpoints 2021}	{ [PATCH] [wasm][debug] Implement instrumentation breakpoints 2021}	
{ [PATCH] [wasm-simd][arm][arm64[liftoff] Implement i8x16.popcnt 2021}	{ [PATCH] [wasm-simd][ia32][liftoff] Implement i8x16.popcnt 2021}	{ [PATCH] [wasm-simd][x64][liftoff] Implement i8x16.popcnt 2021}	
{ [PATCH] PPC/s390: [wasm-simd][arm] Implement i64x2.ne and i64x2 all_true 2021}	{ [PATCH] [wasm-simd][arm] Implement i64x2.ne and i64x2 all_true 2021}	{ [PATCH] [wasm-simd][ia32] Implement i64x2.ne and i64x2 all_true 2021}	
{ [PATCH] PPC/s390: [wasm-simd] Implement double precision conversion 2021}	{ [PATCH] [wasm-simd][arm] Implement double precision conversion 2021}	{ [PATCH] [wasm-simd][ia32] Implement double precision conversions 2021}	
{ [PATCH] [mips][builtins] Clear c_entry_fp when entering JS and at exception path 2021}	{ [PATCH] PPC/s390: [builtins] Clear c_entry_fp when entering JS and at exception path 2021}	{ [PATCH] [builtins] Clear c_entry_fp when entering JS and at exception path 2021}	
{ [PATCH] [mips][interpreter] Encode BytecodeSizes as uint8_t for better cache locality 2021}	{ [PATCH] PPC/s390: [interpreter] Encode BytecodeSizes as uint8_t for better cache locality 2021}	{ [PATCH] [interpreter] Encode BytecodeSizes as uint8_t for better cache locality 2021}	
{ [PATCH] [mips][wasm][liftoff] Record correct offset in StoreTaggedPointer 2021}	{ [PATCH] [wasm][liftoff][arm64] Record correct offset in StoreTaggedPointer 2021}	{ [PATCH] [wasm][liftoff][arm] Record correct offset in StoreTaggedPointer 2021}	
{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement i64x2.eq 2021}	{ [PATCH] PPC/s390: [wasm-simd][liftoff][ia32][x64] Implement i64x2.eq 2021}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement i64x2.eq 2021}	
{ [PATCH] [mips][runtime] Add new instance types for constructor functions 2021}	{ [PATCH] PPC/s390: [runtime] Add new instance types for constructor functions 2021}	{ [PATCH] [runtime] Add new instance types for constructor functions 2021}	
{ [PATCH] [mips][wasm-simd] Prototype i64x2 widen i32x4 instructions 2021}	{ [PATCH] [wasm-simd][arm] Prototype i64x2 widen i32x4 instructions 2021}	{ [PATCH] [wasm-simd][ia32] Prototype i64x2 widen i32x4 instructions 2021}	
{ [PATCH] [mips][Turboprop] Support HeapObject immediate deopt args. 2021}	{ [PATCH] PPC/s390: [Turboprop] Support HeapObject immediate deopt args. 2021}	{ [PATCH] [Turboprop] Support HeapObject immediate deopt args. 2021}	
{ [PATCH] [mips][macro-assembler] Avoid using the isolate in CallRecordWriteStub 2020}	{ [PATCH] PPC/s390: [macro-assembler] Avoid using the isolate in CallRecordWriteStub 2020}	{ [PATCH] [macro-assembler] Avoid using the isolate in CallRecordWriteStub 2020}	
{ [PATCH] [mips][wasm-gc] Liftoff support part 3: arrays 2020}	{ [PATCH] PPC/s390: [wasm-gc] Liftoff support part 3: arrays 2020}	{ [PATCH] [wasm-gc] Liftoff support part 3: arrays 2020}	
{ [PATCH] [mips][wasm-gc] Liftoff support part 2 2020}	{ [PATCH] PPC/s390: [wasm-gc] Liftoff support part 2 2020}	{ [PATCH] [wasm-gc] Liftoff support part 2 2020}	
{ [PATCH] [wasm-simd][ia32] Prototype extended pairwise addition 2020}	{ [PATCH] [wasm-simd][x64] Prototype extended pairwise addition 2020}	{ [PATCH] [wasm-simd][arm] Prototype extended pairwise addition 2020}	
{ [PATCH] [wasm-simd][ia32] Prototype extended multiply 2020}	{ [PATCH] [wasm-simd][x64] Prototype extended multiply 2020}	{ [PATCH] [wasm-simd][arm] Prototype extended multiply 2020}	
{ [PATCH] [wasm-simd][arm] Prototype sign select 2020}	{ [PATCH] [wasm-simd][arm64] Prototype sign select 2020}	{ [PATCH] [wasm-simd][ia32] Prototype sign select 2020}	
{ [PATCH] [mips][cleanup][TurboProp] Unify DynamicMapChecks names. 2020}	{ [PATCH] PPC/s390: [cleanup][TurboProp] Unify DynamicMapChecks names. 2020}	{ [PATCH] [cleanup][TurboProp] Unify DynamicMapChecks names. 2020}	
{ [PATCH] PPC/s390: [Turboprop] Move deoptimizations for dynamic map checks into builtin. 2020}	{ [PATCH] [mips][Turboprop] Move deoptimizations for dynamic map checks into builtin. 2020}	{ [PATCH] [Turboprop] Move deoptimizations for dynamic map checks into builtin. 2020}	
{ [PATCH] PPC/s390: [builtins] Streamline the construct stubs 2020}	{ [PATCH] [mips][builtins] Streamline the construct stubs 2020}	{ [PATCH] [builtins] Streamline the construct stubs 2020}	
{ [PATCH] [mips][turboprop] Fix IET to check optimization marker before optimized code 2020}	{ [PATCH] PPC/s390: [turboprop] Fix IET to check optimization marker before optimized code 2020}	{ [PATCH] [turboprop] Fix IET to check optimization marker before optimized code 2020}	
{ [PATCH] [mips][turboprop] Add a slot for optimization marker in feedback vector 2020}	{ [PATCH] PPC/s390: [turboprop] Add a slot for optimization marker in feedback vector 2020}	{ [PATCH] [turboprop] Add a slot for optimization marker in feedback vector 2020}	
{ [PATCH] [mips][wasm] Use int type for small offsets 2020}	{ [PATCH] PPC/s390: [wasm] Use int type for small offsets 2020}	{ [PATCH] [wasm] Use int type for small offsets 2020}	
{ [PATCH] [mips][deoptimizer] Change deopt entries into builtins 2020}	{ [PATCH] PPC/s390: [deoptimizer] Change deopt entries into builtins 2020}	{ [PATCH] [deoptimizer] Change deopt entries into builtins 2020}	
{ [PATCH] [mips][unwinder] Restore callee saved registers after unwinding 2020}	{ [PATCH] PPC/s390: [unwinder] Restore callee saved registers after unwinding in arm32 2020}	{ [PATCH] [unwinder] Restore callee saved registers after unwinding in arm32 2020}	
{ [PATCH] PPC/s390: Reland "[TurboProp] Avoid marking the output of a call live in its catch handler" 2020}	{ [PATCH] Reland "[TurboProp] Avoid marking the output of a call live in its catch handler" 2020}	{ [PATCH] Revert "[TurboProp] Avoid marking the output of a call live in its catch handler" 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff][ia32][x64] Implement i32x4_dot_i16x8_s 2020}	{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement i32x4_dot_i16x8_s 2020}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement i32x4_dot_i16x8_s 2020}	
{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement pmin pmax 2020}	{ [PATCH] PPC/s390: [wasm-simd][liftoff][ia32][x64] Implement pmin pmax 2020}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement pmin pmax 2020}	
{ [PATCH] [mips64][wasm-simd] Support returning Simd128 on caller's stack 2020}	{ [PATCH] PPC/s390: [wasm-simd] Support returning Simd128 on caller's stack 2020}	{ [PATCH] [wasm-simd] Support returning Simd128 on caller's stack 2020}	
{ [PATCH] [mips][super property speed] Add an IC for super property loads 2020}	{ [PATCH] PPC/s390: [super property speed] Add an IC for super property loads 2020}	{ [PATCH] [super property speed] Add an IC for super property loads 2020}	
{ [PATCH] [mips][execution] Add argument count to the standard frame 2020}	{ [PATCH] PPC/S390: [execution] Add argument count to the standard frame 2020}	{ [PATCH] [execution] Add argument count to the standard frame 2020}	
{ [PATCH] [mips][wasm] Add a generic js-to-wasm wrapper 2020}	{ [PATCH] PPC/s390: [wasm] Add a generic js-to-wasm wrapper 2020}	{ [PATCH] [wasm] Add a generic js-to-wasm wrapper 2020}	
{ [PATCH] [mips][liftoff][mv] Remove multi-value overhead 2020}	{ [PATCH] PPC/s390: [liftoff][mv] Remove multi-value overhead 2020}	{ [PATCH] [liftoff][mv] Remove multi-value overhead 2020}	
{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement all_true 2020}	{ [PATCH] PPC/s390: [wasm-simd][liftoff][ia32][x64] Implement all_true 2020}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement all_true 2020}	
{ [PATCH] [wasm-simd][liftoff][arm64][arm] Implement anytrue 2020}	{ [PATCH] PPC/s390: [wasm-simd][liftoff][ia32][x64] Implement anytrue 2020}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement anytrue 2020}	
{ [PATCH] [wasm-simd][arm] Implement f32x4 f64x2 pmin pmax 2020}	{ [PATCH] [wasm-simd][arm64] Implement f32x4 f64x2 pmin pmax 2020}	{ [PATCH] [wasm-simd][ia32] Implement f32x4 f64x2 pmin pmax 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff][arm][arm64] Implement i8x16 shr 2020}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement i8x16 shr 2020}	{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement i8x16 shr 2020}	
{ [PATCH] [mips][liftoff][mv] Support multi-value returns 2020}	{ [PATCH] PPC/s390: [liftoff][mv] Support multi-value returns 2020}	{ [PATCH] [liftoff][mv] Support multi-value returns 2020}	
{ [PATCH] [mips] Add bit left-rotation machine operator 2020}	{ [PATCH] PPC/s390: Add bit left-rotation machine operator 2020}	{ [PATCH] Add bit left-rotation machine operator 2020}	
{ [PATCH] [builtins][arm64] Reverse JS arguments for arm64 2020}	{ [PATCH] [builtins][arm] Reverse JS arguments for arm 2020}	{ [PATCH] [builtins][ia32] Reverse JS arguments for ia32 2020}	
{ [PATCH] [wasm-simd][liftoff][arm64] Implement integer narrowing 2020}	{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement integer narrowing 2020}	{ [PATCH] [mips][wasm-simd][liftoff] Implement integer narrowing 2020}	
{ [PATCH] [mips][wasm-simd][liftoff] Implement ne 2020}	{ [PATCH] [mips][wasm-simd][liftoff] Implement eq 2020}	{ [PATCH] [mips][wasm-simd][liftoff] Implement neg 2020}	
{ [PATCH] [mips] cppgc: Conservative stack scanning 2020}	{ [PATCH] PPC/s390: cppgc: Conservative stack scanning 2020}	{ [PATCH] cppgc: Conservative stack scanning 2020}	
{ [PATCH] [mips][interpreter] Make IterationBody StackChecks implicit within JumpLoop 2020}	{ [PATCH] PPC/s390: [interpreter] Make IterationBody StackChecks implicit within JumpLoop 2020}	{ [PATCH] [interpreter] Make IterationBody StackChecks implicit within JumpLoop 2020}	
{ [PATCH] [mips][wasm] Load register values from DebugBreak frame 2020}	{ [PATCH] PPC/s390: [wasm] Load register values from DebugBreak frame 2020}	{ [PATCH] [wasm] Load register values from DebugBreak frame 2020}	
{ [PATCH] [mips][wasm] Fix registers spilled in DebugBreak frame 2020}	{ [PATCH] PPC/s390: [wasm] Fix registers spilled in DebugBreak frame 2020}	{ [PATCH] [wasm] Fix registers spilled in DebugBreak frame 2020}	
{ [PATCH] [mips][wasm] Turn ValueType from an enum to a class. 2020}	{ [PATCH] PPC/s390: [wasm] Turn ValueType from an enum to a class 2020}	{ [PATCH] [wasm] Turn ValueType from an enum to a class 2020}	
{ [PATCH] [mips][regexp] Always pass the isolate to CaseInsensitiveCompareUC16 2020}	{ [PATCH] PPC/s390: [regexp] Always pass the isolate to CaseInsensitiveCompareUC16 2020}	{ [PATCH] [regexp] Always pass the isolate to CaseInsensitiveCompareUC16 2020}	
{ [PATCH] [mips][interpreter] Make FunctionEntry StackCheck bytecodes implicit 2020}	{ [PATCH] PPC/s390: [interpreter] Make FunctionEntry StackCheck bytecodes implicit 2020}	{ [PATCH] [interpreter] Make FunctionEntry StackCheck bytecodes implicit 2020}	
{ [PATCH] [mips][wasm] Add builtin and runtime function for debug breaks 2020}	{ [PATCH] PPC/s390: [wasm] Add builtin and runtime function for debug breaks 2020}	{ [PATCH] [wasm] Add builtin and runtime function for debug breaks 2020}	
{ [PATCH] [mips][liftoff][wasm-simd] Specify alignment requirements 2020}	{ [PATCH] PPC/s390: [liftoff][wasm-simd] Specify alignment requirements 2020}	{ [PATCH] [liftoff][wasm-simd] Specify alignment requirements 2020}	
{ [PATCH] [mips64][turbofan][ptr-compr] Optimize Smi Tagging for 31 bit smis 2019}	{ [PATCH] PPC/s390:[turbofan][64][ptr-compr] Optimize Smi Tagging for 31 bit smis 2019}	{ [PATCH] [turbofan][64][ptr-compr] Optimize Smi Tagging for 31 bit smis 2019}	
{ [PATCH] [mips][ptr-compr] Remove CompressedSigned MachineRepresentation 2019}	{ [PATCH] PPC/s390: [ptr-compr] Remove CompressedSigned MachineRepresentation 2019}	{ [PATCH] [ptr-compr] Remove CompressedSigned MachineRepresentation 2019}	
{ [PATCH] [mips][Liftoff] Implement i64 popcnt 2019}	{ [PATCH] PPC/s390: [Liftoff] Implement i64 popcnt 2019}	{ [PATCH] [Liftoff] Implement i64 popcnt 2019}	
{ [PATCH] [mips][Liftoff] Implement i64.clz and i64.ctz 2019}	{ [PATCH] PPC/s390: [Liftoff] Implement i64.clz and i64.ctz 2019}	{ [PATCH] [Liftoff] Implement i64.clz and i64.ctz 2019}	
{ [PATCH] [mips][builtins] Remove ParameterCount uses from InvokeFunction(Code) 2019}	{ [PATCH] PPC/s390: [builtins] Remove ParameterCount uses from InvokeFunction(Code) 2019}	{ [PATCH] [builtins] Remove ParameterCount uses from InvokeFunction(Code) 2019}	
{ [PATCH] [mips] Reland "[compiler] Optionally apply an offset to stack checks" 2019}	{ [PATCH] PPC/s390: Reland "[compiler] Optionally apply an offset to stack checks" 2019}	{ [PATCH] Reland "[compiler] Optionally apply an offset to stack checks" 2019}	
{ [PATCH] PPC/s390: [codegen] Removed ParameterCount class 2019}	{ [PATCH] PPC/s390: [codegen] Removed ParameterCount class 2019}	{ [PATCH] [codegen] Removed ParameterCount class 2019}	
{ [PATCH] PPC/s390: [wasm-simd] Implement f64x2 add sub mul div for arm 2019}	{ [PATCH] [mips][wasm-simd] Implement f64x2 add sub mul div for mips 2019}	{ [PATCH] [wasm-simd] Implement f64x2 add sub mul div for arm 2019}	
{ [PATCH] [mips][wasm-simd] Implement f64x2 sqrt for mips 2019}	{ [PATCH] PPC/s390: [wasm-simd] Implement f64x2 sqrt for arm 2019}	{ [PATCH] [wasm-simd] Implement f64x2 sqrt for arm 2019}	
{ [PATCH] [mips][wasm-simd] Implement f64x2 abs neg for mips 2019}	{ [PATCH] PPC/s390: [wasm-simd] Implement f64x2 abs neg for arm 2019}	{ [PATCH] [wasm-simd] Implement f64x2 abs neg for arm 2019}	
{ [PATCH] [mips][Liftoff] Improve initialization for many locals 2019}	{ [PATCH] PPC/s390: [Liftoff] Improve initialization for many locals 2019}	{ [PATCH] [Liftoff] Improve initialization for many locals 2019}	
{ [PATCH] [ia32][builtins] Avoid reloading undefined value in InterpreterEntryTrampoline 2019}	{ [PATCH] PPC/s390: [builtins] Avoid reloading undefined value in InterpreterEntryTrampoline 2019}	{ [PATCH] [builtins] Avoid reloading undefined value in InterpreterEntryTrampoline 2019}	
{ [PATCH] PPC/s390: [ptr-compr] Switch to 31 bit Smis on 64-bit architectures 2019}	{ [PATCH] [mips64][ptr-compr] Switch to 31 bit Smis on 64-bit architectures 2019}	{ [PATCH] PPC/s390: [ptr-compr] Switch to 31 bit Smis on 64-bit architectures 2019}	
{ [PATCH] PPC/s390: [compiler] Replace remaining mutable reference arguments 2019}	{ [PATCH] [mips][compiler] Replace remaining mutable reference arguments 2019}	{ [PATCH] [compiler] Replace remaining mutable reference arguments 2019}	
{ [PATCH] [mips][regexp] Add an offset argument CheckAtStart 2019}	{ [PATCH] PPC/s390: [regexp] Add an offset argument CheckAtStart 2019}	{ [PATCH] [regexp] Add an offset argument CheckAtStart 2019}	
{ [PATCH] Revert "Reland x5 [arraybuffer] Rearchitect backing store ownership" 2019}	{ [PATCH] Revert ""Reland x4 [arraybuffer] Rearchitect backing store ownership"" 2019}	{ [PATCH] Revert ""Reland x3 [arraybuffer] Rearchitect backing store ownership"" 2019}	
{ [PATCH] PPC/s390: [deoptimizer, cleanup] Don't store values of single precision fp registers 2019}	{ [PATCH] [mips][deoptimizer][cleanup] Don't store values of single precision fp registers 2019}	{ [PATCH] [deoptimizer, cleanup] Don't store values of single precision fp registers 2019}	
{ [PATCH] [mips][wasm] Access "CEntryStub" from the root set. 2019}	{ [PATCH] PPC/s390: [wasm] Access "CEntryStub" from the root set. 2019}	{ [PATCH] [wasm] Access "CEntryStub" from the root set. 2019}	
{ [PATCH] s390: cleanup TM family instructions 2019}	{ [PATCH] s390: cleanup TM family instructions 2019}	{ [PATCH] s390: cleanup TM family instructions 2019}	
{ [PATCH] PPC/s390: [wasm] Implement "atomic.fence" operator. 2019}	{ [PATCH] [mips][wasm] Implement "atomic.fence" operator 2019}	{ [PATCH] [wasm] Implement "atomic.fence" operator. 2019}	
{ [PATCH] [ptr-compr][codegen] Combine load and Pointer decompression when possible 2019}	{ [PATCH] [ptr-compr][codegen] Combine load and Any decompression when possible 2019}	{ [PATCH] [ptr-compr][codegen] Combine load and signed decompression when possible 2019}	
{ [PATCH] [mips][wasm-c-api] Faster C-to-Wasm entry 2019}	{ [PATCH] PPC/s390: [wasm-c-api] Faster C-to-Wasm entry 2019}	{ [PATCH] [wasm-c-api] Faster C-to-Wasm entry 2019}	
{ [PATCH] [mips][builtins] Make ContinueToBuiltinHelper skip off-heap builtin trampolines 2019}	{ [PATCH] PPC/s390: [builtins] Make ContinueToBuiltinHelper skip off-heap builtin trampolines 2019}	{ [PATCH] [builtins] Make ContinueToBuiltinHelper skip off-heap builtin trampolines 2019}	
{ [PATCH] [mips][counters] Introduce proper bottleneck for FunctionCallback. 2019}	{ [PATCH] PPC/s390: [counters] Introduce proper bottleneck for FunctionCallback. 2019}	{ [PATCH] [counters] Introduce proper bottleneck for FunctionCallback. 2019}	
{ [PATCH] PPC/s390: s390: [cleanup] Avoid {Object::operator->} 2019}	{ [PATCH] s390: [cleanup] Avoid {Object::operator->} 2019}	{ [PATCH] [cleanup] Avoid {Object::operator->} 2019}	
{ [PATCH] [mips][liftoff] Optimise {i32,i64}_{and,or,xor} with immediates 2019}	{ [PATCH] PPC/s390: [liftoff] Optimise {i32,i64}_{and,or,xor} with immediates 2019}	{ [PATCH] [liftoff] Optimise {i32,i64}_{and,or,xor} with immediates 2019}	
{ [PATCH] PPC/s390: Reland "[ptr-compr] New RelocInfo for compressed pointers." 2019}	{ [PATCH] PPC/s390: Reland "[ptr-compr] New RelocInfo for compressed pointers." 2019}	{ [PATCH] Reland "[ptr-compr] New RelocInfo for compressed pointers." 2019}	
{ [PATCH] [arm64] Port the skipping of arguments adaptor frames. 2019}	{ [PATCH] PPC/s390: [arm] Port the skipping of arguments adaptor frames. 2019}	{ [PATCH] [arm] Port the skipping of arguments adaptor frames. 2019}	
{ [PATCH] PPC/s390: [ubsan] Port HeapObject to the new design 2019}	{ [PATCH] [ubsan] Port Object to the new design 2018}	{ [PATCH] [ubsan] Port HeapObject to the new design 2018}	
{ [PATCH] MIPS[64]: Check for stack overflow when pushing arguments in JSConstructStubGeneric. 2018}	{ [PATCH] PPC/s390: Check for stack overflow when pushing arguments in JSConstructStubGeneric 2018}	{ [PATCH] Check for stack overflow when pushing arguments in JSConstructStubGeneric 2018}	
{ [PATCH] PPC/s390: [turbofan] Further optimize DataView accesses. 2018}	{ [PATCH] [turbofan] Further optimize DataView accesses. 2018}	{ [PATCH] [turbofan] Further optimize DataView accesses. 2018}	
{ [PATCH] [csa][builtins] Port ArrayConstructorImpl builtin to CSA. 2018}	{ [PATCH] s390: [csa][builtin] Port ArrayConstructor builtin to CSA. 2018}	{ [PATCH] [csa][builtin] Port ArrayConstructor builtin to CSA. 2018}	
{ [PATCH] PPC/s390: [wasm] Merge the WasmContext into WasmInstanceObject 2018}	{ [PATCH] [wasm] Merge the WasmContext into WasmInstanceObject 2018}	{ [PATCH] [wasm] Merge the WasmContext into WasmInstanceObject 2018}	
{ [PATCH] PPC/s390: Reland^2: Remove SFI code field 2018}	{ [PATCH] Reland^2: Remove SFI code field 2018}	{ [PATCH] Reland: Remove SFI code field 2018}	
{ [PATCH] PPC/s390: Reland [in-place weak refs] Add in-place weak references & migrate one WeakCell to it. 2018}	{ [PATCH] Reland [in-place weak refs] Add in-place weak references & migrate one WeakCell to it. 2018}	{ [PATCH] [in-place weak refs] Add in-place weak references & migrate one WeakCell to it. 2018}	
{ [PATCH] PPC/s390: [wasm] Allow traps in tests with many parameters in cctests 2017}	{ [PATCH] MIPS: [wasm] Allow traps in tests with many parameters in cctests 2017}	{ [PATCH] [wasm] Allow traps in tests with many parameters in cctests 2017}	
{ [PATCH] s390/PPC: Remove weak-list of optimized JS functions. 2017}	{ [PATCH] Remove weak-list of optimized JS functions. 2017}	{ [PATCH] Remove weak-list of optimized JS functions. 2017}	
{ [PATCH] PPC/s390: Move TF parts of MacroAssembler into new TurboAssembler. 2017}	{ [PATCH] MIPS[64]: Move TF parts of MacroAssembler into new TurboAssembler. 2017}	{ [PATCH] Move TF parts of MacroAssembler into new TurboAssembler. 2017}	
{ [PATCH] MIPS[64]: Don't dereference handles in (macro-)assembler functions used by TF. 2017}	{ [PATCH] PPC/s390: Don't dereference handles in (macro-)assembler functions used by TF. 2017}	{ [PATCH] Don't dereference handles in (macro-)assembler functions used by TF. 2017}	
{ [PATCH] [compiler] Ask compilation info, not isolate, about source positions flag. 2017}	{ [PATCH] PPC/s390: [compiler] Ask compilation info, not isolate, about source positions flag. 2017}	{ [PATCH] [compiler] Ask compilation info, not isolate, about source positions flag. 2017}	
{ [PATCH] [debug] Untangle DebugInfo from break point support (mips,mips64) 2017}	{ [PATCH] PPC/s390: [debug] Untangle DebugInfo from break point support 2017}	{ [PATCH] [debug] Untangle DebugInfo from break point support 2017}	
{ [PATCH] [regexp] Remove remainder of native RegExpExecStub 2017}	{ [PATCH] [regexp] Remove remainder of native RegExpExecStub 2017}	{ [PATCH] [regexp] Remove remainder of native RegExpExecStub 2017}	
{ [PATCH] [wasm] Initial signal handler 2017}	{ [PATCH] [wasm] Initial signal handler 2017}	{ [PATCH] [wasm] Initial signal handler 2017}	
{ [PATCH] Remove SIMD.js from V8. 2017}	{ [PATCH] Remove SIMD.js from V8. 2017}	{ [PATCH] Remove SIMD.js from V8. 2017}	
{ [PATCH] PPC/s390: [compiler] Pass deoptimization_kind through DeoptimizeParameters and FlagsContinuation 2017}	{ [PATCH] [compiler] Pass deoptimization_kind through DeoptimizeParameters and FlagsContinuation 2017}	{ [PATCH] [compiler] Pass deoptimization_kind through DeoptimizeParameters and FlagsContinuation 2017}	
{ [PATCH] [Turbofan] Macro-ize instruction selection for x64. - Uses macros to reduce code duplication. - Uses calls to VisitRO and VisitRR to reduce code bloat. 2017}	{ [PATCH] [Turbofan] Macro-ize instruction selection for arm64. - Uses macros to reduce code duplication. - Uses calls to VisitRR and VisitRRR to reduce code bloat. 2017}	{ [PATCH] [Turbofan] Macro-ize instruction selection for x64. - Uses macros to reduce code duplication. - Uses calls to VisitRO and VisitRR to reduce code bloat. 2017}	
{ [PATCH] PPC/s390: [TypeFeedbackVector] Root literal arrays in function literals slots 2017}	{ [PATCH] [TypeFeedbackVector] Root literal arrays in function literals slots 2017}	{ [PATCH] [TypeFeedbackVector] Root literal arrays in function literals slots 2017}	
{ [PATCH] Revert of Internalize strings in-place (patchset #20 id:380001 of https://codereview.chromium.org/2549773002/ ) 2017}	{ [PATCH] Revert of Internalize strings in-place (patchset #17 id:320001 of https://codereview.chromium.org/2549773002/ ) 2017}	{ [PATCH] Revert of Internalize strings in-place (patchset #16 id:300001 of https://codereview.chromium.org/2549773002/ ) 2017}	
{ [PATCH] [wasm] TrapIf and TrapUnless TurboFan operators implemented on mips64. 2017}	{ [PATCH] [wasm] TrapIf and TrapUnless TurboFan operators implemented on mips. 2017}	{ [PATCH] [wasm] TrapIf and TrapUnless TurboFan operators implemented on arm64. 2017}	
{ [PATCH] [turbofan] Support variable size argument removal in TF-generated functions 2016}	{ [PATCH] PPC/s390: [turbofan] Support variable size argument removal in TF-generated functions 2016}	{ [PATCH] [turbofan] Support variable size argument removal in TF-generated functions 2016}	
{ [PATCH] PPC: [ic] [stubs] Don't use Code::flags in megamorphic stub cache hash computations. 2016}	{ [PATCH] [ic] [stubs] Don't use Code::flags in megamorphic stub cache hash computations. 2016}	{ [PATCH] [ic] [stubs] Don't use Code::flags in megamorphic stub cache hash computations. 2016}	
{ [PATCH] PPC: [turbofan] Introduce integer multiplication with overflow. 2016}	{ [PATCH] S390: [turbofan] Introduce integer multiplication with overflow. 2016}	{ [PATCH] [turbofan] Introduce integer multiplication with overflow. 2016}	
{ [PATCH] MIPS: [turbofan] Make sure binop results do not overwrite deoptimization inputs on arm. 2016}	{ [PATCH] s390: [turbofan] Make sure binop results do not overwrite deoptimization inputs on arm. 2016}	{ [PATCH] PPC: [turbofan] Make sure binop results do not overwrite deoptimization inputs on arm. 2016}	
{ [PATCH] PPC/s390: [turbofan]: Support using push instructions for setting up tail call parameters 2016}	{ [PATCH] MIPS: Fix '[turbofan]: Support using push instructions for setting up tail call parameters' 2016}	{ [PATCH] [turbofan]: Support using push instructions for setting up tail call parameters 2016}	
{ [PATCH] PPC/s390: [builtins] New frame type for exits to C++ builtins 2016}	{ [PATCH] [builtins] New frame type for exits to C++ builtins 2016}	{ [PATCH] [builtins] New frame type for exits to C++ builtins 2016}	
{ [PATCH] PPC/s390: [builtins] Introduce proper Float64Exp operator. 2016}	{ [PATCH] [builtins] Introduce proper Float64Exp operator. 2016}	{ [PATCH] [builtins] Introduce proper Float64Exp operator. 2016}	
{ [PATCH] S390: [wasm] Relocatable Globals. 2016}	{ [PATCH] PPC: [wasm] Relocatable Globals. 2016}	{ [PATCH] [wasm] Relocatable Globals. 2016}	
{ [PATCH] S390: [Heap] Fix comparing against new space top pointer 2016}	{ [PATCH] PPC: [Heap] Fix comparing against new space top pointer 2016}	{ [PATCH] [Heap] Fix comparing against new space top pointer 2016}	
{ [PATCH] S390: [debugger] simplify debug stepping. 2016}	{ [PATCH] PPC: [debugger] simplify debug stepping. 2016}	{ [PATCH] [debugger] simplify debug stepping. 2016}	
{ [PATCH] S390: [turbofan] Prevent storing signalling NaNs into holey double arrays. 2016}	{ [PATCH] PPC: [turbofan] Prevent storing signalling NaNs into holey double arrays. 2016}	{ [PATCH] [turbofan] Prevent storing signalling NaNs into holey double arrays. 2016}	
{ [PATCH] S390: Fix arguments object stubs for large arrays. 2016}	{ [PATCH] PPC: Fix arguments object stubs for large arrays. 2016}	{ [PATCH] Fix arguments object stubs for large arrays. 2016}	
{ [PATCH] S390: [stubs] Remove N-argument Hydrogen-based Array constructor stub 2016}	{ [PATCH] PPC: [stubs] Remove N-argument Hydrogen-based Array constructor stub 2016}	{ [PATCH] [stubs] Remove N-argument Hydrogen-based Array constructor stub 2016}	
{ [PATCH] S390: Remove more dead code now that legacy const is gone 2016}	{ [PATCH] PPC: Remove more dead code now that legacy const is gone 2016}	{ [PATCH] Remove more dead code now that legacy const is gone 2016}	
{ [PATCH] S390: [builtins] Migrate Math.log to TurboFan. 2016}	{ [PATCH] PPC: [builtins] Migrate Math.log to TurboFan. 2016}	{ [PATCH] [builtins] Migrate Math.log to TurboFan. 2016}	
{ [PATCH] S390: VectorICs: Remove special code to increment call counts by two. 2016}	{ [PATCH] PPC: VectorICs: Remove special code to increment call counts by two. 2016}	{ [PATCH] VectorICs: Remove special code to increment call counts by two. 2016}	
{ [PATCH] S390: IC: Eliminate initialization_state as a factor in IC installation. 2016}	{ [PATCH] PPC: IC: Eliminate initialization_state as a factor in IC installation. 2016}	{ [PATCH] IC: Eliminate initialization_state as a factor in IC installation. 2016}	
{ [PATCH] S390: Move of the type feedback vector to the closure. 2016}	{ [PATCH] PPC: Move of the type feedback vector to the closure. 2016}	{ [PATCH] Move of the type feedback vector to the closure. 2016}	
{ [PATCH] PPC: [build] Fix a clang warning 2016}	{ [PATCH] PPC: [build] Fix a clang warning 2016}	{ [PATCH] [build] Fix a clang warning 2016}	
{ [PATCH] S390: Collect call counts for constructor calls, too. 2016}	{ [PATCH] PPC: Collect call counts for constructor calls, too. 2016}	{ [PATCH] Collect call counts for constructor calls, too. 2016}	
{ [PATCH] S390: [stubs] Convert Internal/ArraySingleArgumentsConstructor to a TurboFan stub 2016}	{ [PATCH] PPC: [stubs] Convert Internal/ArraySingleArgumentsConstructor to a TurboFan stub 2016}	{ [PATCH] [stubs] Convert Internal/ArraySingleArgumentsConstructor to a TurboFan stub 2016}	
{ [PATCH] S390: Added 56 new instructions to the simulator EVALUATE code. 2016}	{ [PATCH] S390: Added 74 new instructions to the simulator EVALUATE code. 2016}	{ [PATCH] S390: Added 96 new instructions to the simulator EVALUATE code. 2016}	
{ [PATCH] S390: [Interpreter] Fix incorrect frame walking in arguments create stubs 2016}	{ [PATCH] PPC: [Interpreter] Fix incorrect frame walking in arguments create stubs 2016}	{ [PATCH] [Interpreter] Fix incorrect frame walking in arguments create stubs 2016}	
{ [PATCH] S390: [crankshaft] Fragmentation-free allocation folding. 2016}	{ [PATCH] PPC: [crankshaft] Fragmentation-free allocation folding. 2016}	{ [PATCH] [crankshaft] Fragmentation-free allocation folding. 2016}	
{ [PATCH] MIPS: Add new relocation type WASM_MEMORY_SIZE_REFERENCE, use relocatable pointers to update wasm memory size references in generated code. 2016}	{ [PATCH] S390: Add new relocation type WASM_MEMORY_SIZE_REFERENCE, use relocatable pointers to update wasm memory size references in generated code. 2016}	{ [PATCH] PPC: Add new relocation type WASM_MEMORY_SIZE_REFERENCE, use relocatable pointers to update wasm memory size references in generated code. 2016}	
{ [PATCH] S390: [stubs] Convert InternalArrayNoArgumentsConstructor to a TurboFan stub 2016}	{ [PATCH] PPC: [stubs] Convert InternalArrayNoArgumentsConstructor to a TurboFan stub 2016}	{ [PATCH] [stubs] Convert InternalArrayNoArgumentsConstructor to a TurboFan stub 2016}	
{ [PATCH] S390: [stubs]: Implement ArrayNoArgumentConstructor as a TF stub 2016}	{ [PATCH] PPC: [stubs]: Implement ArrayNoArgumentConstructor as a TF stub 2016}	{ [PATCH] [stubs]: Implement ArrayNoArgumentConstructor as a TF stub 2016}	
{ [PATCH] S390: [api] Expose FunctionCallbackInfo::NewTarget 2016}	{ [PATCH] PPC: [api] Expose FunctionCallbackInfo::NewTarget 2016}	{ [PATCH] [api] Expose FunctionCallbackInfo::NewTarget 2016}	
{ [PATCH] S390: Get rid of AllocationFlags::TAG_OBJECT 2016}	{ [PATCH] PPC: Get rid of AllocationFlags::TAG_OBJECT 2016}	{ [PATCH] Get rid of AllocationFlags::TAG_OBJECT 2016}	
{ [PATCH] S390: [Interpreter] Use FastNewSloppyArguments when possible. 2016}	{ [PATCH] PPC: [Interpreter] Use FastNewSloppyArguments when possible. 2016}	{ [PATCH] [Interpreter] Use FastNewSloppyArguments when possible. 2016}	
{ [PATCH] S390: [turbofan] Introduce TruncateTaggedToWord32 simplified operator. 2016}	{ [PATCH] PPC: [turbofan] Introduce TruncateTaggedToWord32 simplified operator. 2016}	{ [PATCH] [turbofan] Introduce TruncateTaggedToWord32 simplified operator. 2016}	
{ [PATCH] S390: [interpreter] Heal closures when bytecode array is gone. 2016}	{ [PATCH] PPC: [interpreter] Heal closures when bytecode array is gone. 2016}	{ [PATCH] [interpreter] Heal closures when bytecode array is gone. 2016}	
{ [PATCH] S390: [turbofan] CodeGenerator: Frame setup refactoring 2016}	{ [PATCH] PPC: [turbofan] CodeGenerator: Frame setup refactoring 2016}	{ [PATCH] [turbofan] CodeGenerator: Frame setup refactoring 2016}	
{ [PATCH] S390: Remove all non-function-name uses of CONST_LEGACY 2016}	{ [PATCH] PPC: Remove all non-function-name uses of CONST_LEGACY 2016}	{ [PATCH] Remove all non-function-name uses of CONST_LEGACY 2016}	
{ [PATCH] S390: [Interpreter] Remove register file register and replace with LoadParentFramePointer. 2016}	{ [PATCH] PPC: [Interpreter] Remove register file register and replace with LoadParentFramePointer. 2016}	{ [PATCH] [Interpreter] Remove register file register and replace with LoadParentFramePointer. 2016}	
{ [PATCH] S390: Change calling convention of CallApiGetterStub to accept the AccessorInfo 2016}	{ [PATCH] PPC: Change calling convention of CallApiGetterStub to accept the AccessorInfo 2016}	{ [PATCH] Change calling convention of CallApiGetterStub to accept the AccessorInfo 2016}	
{ [PATCH] S390: First version of the new generators implementation. 2016}	{ [PATCH] PPC: First version of the new generators implementation. 2016}	{ [PATCH] First version of the new generators implementation. 2016}	
{ [PATCH] Migrate FastCloneShallowObjectStub to TurboFan 2016}	{ [PATCH] Migrate FastCloneShallowObjectStub to TurboFan 2016}	{ [PATCH] Migrate FastCloneShallowObjectStub to TurboFan 2016}	
{ [PATCH] S390: Visit the Optimized Code Map on first call rather than closure creation. 2016}	{ [PATCH] PPC: Visit the Optimized Code Map on first call rather than closure creation. 2016}	{ [PATCH] Visit the Optimized Code Map on first call rather than closure creation. 2016}	
{ [PATCH] S390: [Interpreter] Make dispatch table point to code entry instead of code objects. 2016}	{ [PATCH] PPC: [Interpreter] Make dispatch table point to code entry instead of code objects. 2016}	{ [PATCH] [Interpreter] Make dispatch table point to code entry instead of code objects. 2016}	
{ [PATCH] Fix printf formats 2016}	{ [PATCH] Fix printf formats 2016}	{ [PATCH] Fix printf formats 2016}	
{ [PATCH] S390: [generators] Store the resume mode in the generator object. 2016}	{ [PATCH] PPC: [generators] Store the resume mode in the generator object. 2016}	{ [PATCH] [generators] Store the resume mode in the generator object. 2016}	
{ [PATCH] S390: Bugfix: assert in lithium compile for LMaybeGrowElements 2016}	{ [PATCH] PPC: Bugfix: assert in lithium compile for LMaybeGrowElements 2016}	{ [PATCH] Bugfix: assert in lithium compile for LMaybeGrowElements 2016}	
{ [PATCH] s390: Remove usages of Heap::NewSpaceStart and its external reference 2016}	{ [PATCH] PPC: Remove usages of Heap::NewSpaceStart and its external reference 2016}	{ [PATCH] Remove usages of Heap::NewSpaceStart and its external reference 2016}	
{ [PATCH] S390: [turbofan] Frame elision for code stubs. 2016}	{ [PATCH] PPC: [turbofan] Frame elision for code stubs. 2016}	{ [PATCH] [turbofan] Frame elision for code stubs. 2016}	
{ [PATCH] S390: Introduce a code stub version of Array.prototype.push 2016}	{ [PATCH] PPC: Introduce a code stub version of Array.prototype.push 2016}	{ [PATCH] Introduce a code stub version of Array.prototype.push 2016}	
{ [PATCH] S390: [es6] Faster implementation of OrdinaryHasInstance. 2016}	{ [PATCH] PPC: [es6] Faster implementation of OrdinaryHasInstance. 2016}	{ [PATCH] [es6] Faster implementation of OrdinaryHasInstance. 2016}	
{ [PATCH] S390: [stubs] Split ToNumberStub into reusable subparts. 2016}	{ [PATCH] PPC: [stubs] Split ToNumberStub into reusable subparts. 2016}	{ [PATCH] [stubs] Split ToNumberStub into reusable subparts. 2016}	
{ [PATCH] S390: Provide optimized support for the %GetOrdinaryHasInstance intrinsic. 2016}	{ [PATCH] PPC: Provide optimized support for the %GetOrdinaryHasInstance intrinsic. 2016}	{ [PATCH] Provide optimized support for the %GetOrdinaryHasInstance intrinsic. 2016}	
{ [PATCH] S390: InstanceOfStub incorrectly interprets the hole as a prototype. 2016}	{ [PATCH] PPC: InstanceOfStub incorrectly interprets the hole as a prototype. 2016}	{ [PATCH] InstanceOfStub incorrectly interprets the hole as a prototype. 2016}	
{ [PATCH] MIPS64: Fix [stubs] Introduce a dedicated FastNewObjectStub 2016}	{ [PATCH] MIPS: Fix [stubs] Introduce a dedicated FastNewObjectStub 2016}	{ [PATCH] MIPS64: Fix '[stubs] Introduce a dedicated FastNewObjectStub.' 2016}	
{ [PATCH] MIPS64: Fix '[turbofan] Introduce DeoptimizeIf And DeoptimizeUnless common operators.' 2016}	{ [PATCH] PPC: [turbofan] Introduce DeoptimizeIf And DeoptimizeUnless common operators. 2016}	{ [PATCH] [turbofan] Introduce DeoptimizeIf And DeoptimizeUnless common operators. 2016}	
{ [PATCH] PPC: More simplification and unification of frame handling 2016}	{ [PATCH] More simplification and unification of frame handling 2016}	{ [PATCH] More simplification and unification of frame handling 2016}	
{ [PATCH] PPC: [runtime] Turn ArgumentAccessStub into FastNewSloppyArgumentsStub. 2016}	{ [PATCH] [runtime] Turn ArgumentAccessStub into FastNewSloppyArgumentsStub. 2016}	{ [PATCH] [runtime] Turn ArgumentAccessStub into FastNewSloppyArgumentsStub. 2016}	
{ [PATCH] Revert of Type Feedback Vector lives in the closure (patchset #2 id:40001 of https://codereview.chromium.org/1668103002/ ) 2016}	{ [PATCH] Revert of Type Feedback Vector lives in the closure (patchset #2 id:20001 of https://codereview.chromium.org/1642613002/ ) 2016}	{ [PATCH] Revert of Type Feedback Vector lives in the closure (patchset #12 id:260001 of https://codereview.chromium.org/1563213002/ ) 2016}	
{ [PATCH] PPC: Type Feedback Vector lives in the closure 2016}	{ [PATCH] Type Feedback Vector lives in the closure 2016}	{ [PATCH] Type Feedback Vector lives in the closure 2016}	
{ [PATCH] PPC: [builtins] Make Math.max and Math.min fast by default. 2016}	{ [PATCH] MIPS: Fix '[builtins] Make Math.max and Math.min fast by default.' 2016}	{ [PATCH] [builtins] Make Math.max and Math.min fast by default. 2016}	
{ [PATCH] MIPS64: Fix 'Array length reduction should throw in strict mode if it can't delete an element.' 2016}	{ [PATCH] Array length reduction should throw in strict mode if it can't delete an element. 2016}	{ [PATCH] Array length reduction should throw in strict mode if it can't delete an element. 2016}	
{ [PATCH] PPC: [runtime] Throw exception for derived constructors in correct context. 2016}	{ [PATCH] MIPS: [runtime] Throw exception for derived constructors in correct context. 2016}	{ [PATCH] [runtime] Throw exception for derived constructors in correct context. 2016}	
{ [PATCH] MIPS: Fix `[date] Migrate Date field accessors to native builtins.' 2016}	{ [PATCH] PPC: [date] Migrate Date field accessors to native builtins. 2016}	{ [PATCH] [date] Migrate Date field accessors to native builtins. 2016}	
{ [PATCH] PPC: [es6] Correct Function.prototype.apply, Reflect.construct and Reflect.apply. 2015}	{ [PATCH] [es6] Correct Function.prototype.apply, Reflect.construct and Reflect.apply. 2015}	{ [PATCH] [es6] Correct Function.prototype.apply, Reflect.construct and Reflect.apply. 2015}	
{ [PATCH] MIPS: Fix `[proxies] fix access issue when having proxies on the prototype-chain of global objects.` 2015}	{ [PATCH] PPC: Fix "[proxies] fix access issue when having proxies on the prototype-chain of global objects." 2015}	{ [PATCH] [proxies] fix access issue when having proxies on the prototype-chain of global objects. 2015}	
{ [PATCH] PPC64: [turbofan] Changed TruncateFloat64ToInt64 to TryTruncateFloat64ToInt64. 2015}	{ [PATCH] MIPS64: [turbofan] Changed TruncateFloat64ToInt64 to TryTruncateFloat64ToInt64 2015}	{ [PATCH] [turbofan] Changed TruncateFloat64ToInt64 to TryTruncateFloat64ToInt64. 2015}	
{ [PATCH] PPC: [runtime] Replace global object link with native context link in all contexts. 2015}	{ [PATCH] [runtime] Replace global object link with native context link in all contexts. 2015}	{ [PATCH] [runtime] Replace global object link with native context link in all contexts. 2015}	
{ [PATCH] PPC: [debugger] flood function for stepping before calling it. 2015}	{ [PATCH] [debugger] flood function for stepping before calling it. 2015}	{ [PATCH] [debugger] flood function for stepping before calling it. 2015}	
{ [PATCH] PPC: [turbofan] Implemented the TruncateFloat64ToUint64 TurboFan operator. 2015}	{ [PATCH] MIPS64: [turbofan] Implemented the TruncateFloat64ToUint64 TurboFan operator. 2015}	{ [PATCH] [turbofan] Implemented the TruncateFloat64ToUint64 TurboFan operator. 2015}	
{ [PATCH] PPC: Experimental support for RegExp lookbehind. 2015}	{ [PATCH] Experimental support for RegExp lookbehind. 2015}	{ [PATCH] Experimental support for RegExp lookbehind. 2015}	
{ [PATCH] PPC: Remove receiver conversion from function prologue 2015}	{ [PATCH] MIPS64: Fix Remove receiver conversion from function prologue. 2015}	{ [PATCH] Remove receiver conversion from function prologue 2015}	
{ [PATCH] PPC: [runtime] Fix ES6 9.2.1 [[Call]] when encountering a classConstructor. 2015}	{ [PATCH] [runtime] Fix ES6 9.2.1 [[Call]] when encountering a classConstructor. 2015}	{ [PATCH] [runtime] Fix ES6 9.2.1 [[Call]] when encountering a classConstructor. 2015}	
{ [PATCH] PPC: Remove register index/code indirection 2015}	{ [PATCH] Remove register index/code indirection 2015}	{ [PATCH] Remove register index/code indirection 2015}	
{ [PATCH] PPC: [es6] Introduce spec compliant IsConstructor. 2015}	{ [PATCH] [es6] Introduce spec compliant IsConstructor. 2015}	{ [PATCH] [es6] Introduce spec compliant IsConstructor. 2015}	
{ [PATCH] PPC: [runtime] Initial step towards switching Execution::Call to callable. 2015}	{ [PATCH] [runtime] Initial step towards switching Execution::Call to callable. 2015}	{ [PATCH] [runtime] Initial step towards switching Execution::Call to callable. 2015}	
{ [PATCH] PPC: [builtins] Unify the various versions of [[Call]] with a Call builtin. 2015}	{ [PATCH] [builtins] Unify the various versions of [[Call]] with a Call builtin. 2015}	{ [PATCH] [builtins] Unify the various versions of [[Call]] with a Call builtin. 2015}	
{ [PATCH] MIPS: [builtins] Pass correct number of arguments after adapting arguments. 2015}	{ [PATCH] PPC: [builtins] Pass correct number of arguments after adapting arguments. 2015}	{ [PATCH] [builtins] Pass correct number of arguments after adapting arguments. 2015}	
{ [PATCH] PPC: Fix '[stubs] Optimize LoadGlobalViaContextStub and StoreGlobalViaContextStub.' 2015}	{ [PATCH] PPC: [stubs] Optimize LoadGlobalViaContextStub and StoreGlobalViaContextStub. 2015}	{ [PATCH] [stubs] Optimize LoadGlobalViaContextStub and StoreGlobalViaContextStub. 2015}	
{ [PATCH] PPC: Add unoptimized/optimized variants of MathFloor TF code stub 2015}	{ [PATCH] Reland: Add unoptimized/optimized variants of MathFloor TF code stub 2015}	{ [PATCH] Add unoptimized/optimized variants of MathFloor TF code stub 2015}	
{ [PATCH] PPC64: Fix "[ic] Record call counts for monomorphic calls made with an IC." 2015}	{ [PATCH] PPC: [ic] Record call counts for monomorphic calls made with an IC. 2015}	{ [PATCH] [ic] Record call counts for monomorphic calls made with an IC. 2015}	
{ [PATCH] MIPS: [turbofan] Fix implementation of Float64Min. 2015}	{ [PATCH] PPC: [turbofan] Fix implementation of Float64Min. 2015}	{ [PATCH] [arm64][turbofan] Fix implementation of Float64Min. 2015}	
{ [PATCH] Add script context with context-allocated "const this" 2015}	{ [PATCH] Add script context with context-allocated "const this" 2015}	{ [PATCH] Add script context with context-allocated "const this" 2015}	
{ [PATCH] PPC: [es6] Super call in arrows and eval 2015}	{ [PATCH] [es6] Super call in arrows and eval 2015}	{ [PATCH] [es6] Super call in arrows and eval 2015}	
{ [PATCH] PPC: Fix '[strong] Function arity check should be based on required parameters' 2015}	{ [PATCH] PPC: [strong] Function arity check should be based on required parameters 2015}	{ [PATCH] [strong] Function arity check should be based on required parameters 2015}	
{ [PATCH] MIPS: Fix Add a MathFloor stub generated with TurboFan. 2015}	{ [PATCH] PPC: Add a MathFloor stub generated with TurboFan 2015}	{ [PATCH] Add a MathFloor stub generated with TurboFan 2015}	
{ [PATCH] PPC: VectorICs: megamorphic keyed loads in crankshaft don't need a vector. 2015}	{ [PATCH] VectorICs: megamorphic keyed loads in crankshaft don't need a vector. 2015}	{ [PATCH] VectorICs: megamorphic keyed loads in crankshaft don't need a vector. 2015}	
{ [PATCH] MIPS: [turbofan] Load immortal heap objects from the heap roots. 2015}	{ [PATCH] PPC: [turbofan] Load immortal heap objects from the heap roots. 2015}	{ [PATCH] [turbofan] Load immortal heap objects from the heap roots. 2015}	
{ [PATCH] PPC: [es6] implement spread calls 2015}	{ [PATCH] MIPS64: [es6] implement spread calls 2015}	{ [PATCH] [es6] implement spread calls 2015}	
{ [PATCH] PPC: [turbofan] Materialize JSFunction from frame if possible. 2015}	{ [PATCH] MIPS: [turbofan] Materialize JSFunction from frame if possible. 2015}	{ [PATCH] [turbofan] Materialize JSFunction from frame if possible. 2015}	
{ [PATCH] PPC: [turbofan] Add new Float32Abs and Float64Abs operators. 2015}	{ [PATCH] MIPS: [turbofan] Add new Float32Abs and Float64Abs operators. 2015}	{ [PATCH] [turbofan] Add new Float32Abs and Float64Abs operators. 2015}	
{ [PATCH] PPC: Make --always-opt also optimize top-level code. 2015}	{ [PATCH] MIPS64: Make --always-opt also optimize top-level code. 2015}	{ [PATCH] Make --always-opt also optimize top-level code. 2015}	
{ [PATCH] PPC: JSEntryTrampoline: check for stack space before pushing arguments 2015}	{ [PATCH] MIPS: JSEntryTrampoline: check for stack space before pushing arguments 2015}	{ [PATCH] JSEntryTrampoline: check for stack space before pushing arguments 2015}	
{ [PATCH] PPC: Match -0 - x with sign bit flip. 2015}	{ [PATCH] [ia32] Match -0 - x with sign bit flip. 2015}	{ [PATCH] [x64] Match -0 - x with sign bit flip. 2015}	
{ [PATCH] PPC: v8:3539 - hold constructor feedback in weak cells 2015}	{ [PATCH] MIPS: v8:3539 - hold constructor feedback in weak cells 2015}	{ [PATCH] v8:3539 - hold constructor feedback in weak cells 2015}	
{ [PATCH] MIPS64: Ensure object literal element boilerplates aren't modified. 2015}	{ [PATCH] PPC: Ensure object literal element boilerplates aren't modified. 2015}	{ [PATCH] Ensure object literal element boilerplates aren't modified. 2015}	
{ [PATCH] MIPS64: [turbofan] Fix loading of JSFunction from activation in case of adapter frame. 2015}	{ [PATCH] PPC: [turbofan] Fix loading of JSFunction from activation in case of adapter frame. 2015}	{ [PATCH] [turbofan] Fix loading of JSFunction from activation in case of adapter frame. 2015}	
{ [PATCH] PPC: Switch full-codegen from StackHandlers to handler table. 2015}	{ [PATCH] MIPS: Switch full-codegen from StackHandlers to handler table. 2015}	{ [PATCH] Switch full-codegen from StackHandlers to handler table. 2015}	
{ [PATCH] PPC: VectorICs: keyed element loads were kicking out non-smi keys unnecessarily 2015}	{ [PATCH] MIPS64: VectorICs: keyed element loads were kicking out non-smi keys unnecessarily 2015}	{ [PATCH] VectorICs: keyed element loads were kicking out non-smi keys unnecessarily 2015}	
{ [PATCH] PPC: [es6] implement Reflect.apply() & Reflect.construct() 2015}	{ [PATCH] MIPS: [es6] implement Reflect.apply() & Reflect.construct() 2015}	{ [PATCH] [es6] implement Reflect.apply() & Reflect.construct() 2015}	
{ [PATCH] PPC: [turbofan] Turn Math.clz32 into an inlinable builtin. 2015}	{ [PATCH] MIPS: [turbofan] Turn Math.clz32 into an inlinable builtin. 2015}	{ [PATCH] [turbofan] Turn Math.clz32 into an inlinable builtin. 2015}	
{ [PATCH] PPC: [es6] generate rest parameters correctly for subclass constructors 2015}	{ [PATCH] MIPS: [es6] generate rest parameters correctly for subclass constructors 2015}	{ [PATCH] [es6] generate rest parameters correctly for subclass constructors 2015}	
{ [PATCH] PPC: Serializer: serialize internal references via object visitor. 2015}	{ [PATCH] MIPS: Serializer: serialize internal references via object visitor. 2015}	{ [PATCH] Serializer: serialize internal references via object visitor. 2015}	
{ [PATCH] PPC: Load from PropertyCells using PropertyCell::kValueOffset rather than Cell::kValueOffset 2015}	{ [PATCH] MIPS: Load from PropertyCells using PropertyCell::kValueOffset rather than Cell::kValueOffset 2015}	{ [PATCH] Load from PropertyCells using PropertyCell::kValueOffset rather than Cell::kValueOffset 2015}	
{ [PATCH] PPC: Disinherit PropertyCell from Cell 2015}	{ [PATCH] MIPS: Disinherit PropertyCell from Cell. 2015}	{ [PATCH] Disinherit PropertyCell from Cell 2015}	
{ [PATCH] PPC: [turbofan] Introduce optional Float64Min and Float64Max machine operators. 2015}	{ [PATCH] MIPS: [turbofan] Introduce optional Float64Min and Float64Max machine operators. 2015}	{ [PATCH] [turbofan] Introduce optional Float64Min and Float64Max machine operators. 2015}	
{ [PATCH] PPC: Simplify pending message object handling. 2015}	{ [PATCH] MIPS: Simplify pending message object handling. 2015}	{ [PATCH] Simplify pending message object handling. 2015}	
{ [PATCH] PPC: Simplify pending message script handling. 2015}	{ [PATCH] MIPS: Simplify pending message script handling. 2015}	{ [PATCH] Simplify pending message script handling. 2015}	
{ [PATCH] Fix 'MIPS: [turbofan] Support for %_DoubleHi, %_DoubleLo and %_ConstructDouble.' 2015}	{ [PATCH] MIPS: [turbofan] Support for %_DoubleHi, %_DoubleLo and %_ConstructDouble. 2015}	{ [PATCH] [turbofan] Support for %_DoubleHi, %_DoubleLo and %_ConstructDouble. 2015}	
{ [PATCH] Revert of Implement subclassing Arrays. (patchset #8 id:130001 of https://codereview.chromium.org/975463002/) 2015}	{ [PATCH] Revert of Implement subclassing Arrays. (patchset #7 id:110001 of https://codereview.chromium.org/975463002/) 2015}	{ [PATCH] Revert of Implement subclassing Arrays. (patchset #6 id:90001 of https://codereview.chromium.org/975463002/) 2015}	
{ [PATCH] MIPS64: [turbofan] Initial support for Switch. 2015}	{ [PATCH] MIPS: [turbofan] Initial support for Switch. 2015}	{ [PATCH] [turbofan] Initial support for Switch. 2015}	
{ [PATCH] MIPS: new classes: implement new.target passing to superclass constructor. 2015}	{ [PATCH] new classes: implement new.target passing to superclass constructor. 2015}	{ [PATCH] new classes: implement new.target passing to superclass constructor. 2015}	
{ [PATCH] MIPS64: [turbofan] Add checked load/store operators. 2014}	{ [PATCH] MIPS: [turbofan] Add checked load/store operators. 2014}	{ [PATCH] [turbofan] Add checked load/store operators. 2014}	
{ [PATCH] MIPS: Classes: implement 'new super'. 2014}	{ [PATCH] Classes: implement 'new super'. 2014}	{ [PATCH] Classes: implement 'new super'. 2014}	
{ [PATCH] MIPS: Never record safepoint with doubles. 2014}	{ [PATCH] ARM64: never record safepoint with doubles 2014}	{ [PATCH] ARM: never record safepoint with doubles 2014}	
{ [PATCH] MIPS: Use the same registers for StoreIC and KeyedStoreIC. 2014}	{ [PATCH] Use the same registers for StoreIC and KeyedStoreIC. 2014}	{ [PATCH] Use the same registers for StoreIC and KeyedStoreIC. 2014}	
{ [PATCH] MIPS: Only create arguments-maps in the bootstrapper, remove now obsolete ValueType flag. 2014}	{ [PATCH] Only create arguments-maps in the bootstrapper, remove now obsolete ValueType flag. 2014}	{ [PATCH] Only create arguments-maps in the bootstrapper, remove now obsolete ValueType flag. 2014}	
{ [PATCH] Reland r21442 "Inobject slack tracking is done on a per-closure basis instead of per-shared info basis." This fixes inobject slack tracking for prototype inheritance pattern that uses closures. 2014}	{ [PATCH] Reland r21346 "Inobject slack tracking is done on a per-closure basis instead of per-shared info basis." This fixes inobject slack tracking for prototype inheritance pattern that uses closures. 2014}	{ [PATCH] Inobject slack tracking is done on a per-closure basis instead of per-shared info basis. This fixes inobject slack tracking for prototype inheritance pattern that uses closures. 2014}	
{ [PATCH] Reland r20974: Unify and simplify the FastCloneShallowArrayStub 2014}	{ [PATCH] MIPS: Reland r20974: Unify and simplify the FastCloneShallowArrayStub. 2014}	{ [PATCH] Reland r20974: Unify and simplify the FastCloneShallowArrayStub 2014}	
{ [PATCH] ES6: Add support for Map/Set forEach 2014}	{ [PATCH] ES6: Add support for Map/Set forEach 2014}	{ [PATCH] ES6: Add support for Map/Set forEach 2014}	
{ [PATCH] Only assign environments when they are actually needed. (ARM and ARM64 only) 2014}	{ [PATCH] Only assign environments when they are actually needed. (x64 only) 2014}	{ [PATCH] Only assign environments when they are actually needed. (ia32 only) 2014}	
{ [PATCH] MIPS: Reland "Pass a Code object to Assembler::(set_)target_address_at for use by ool constant pool." 2014}	{ [PATCH] Reland "Pass a Code object to Assembler::(set_)target_address_at for use by ool constant pool." 2014}	{ [PATCH] Revert "Pass a Code object to Assembler::(set_)target_address_at for use by ool constant pool." 2014}	
{ [PATCH] ARM: build fix for r19380. 2014}	{ [PATCH] MIPS: build fix for r19380 2014}	{ [PATCH] build fix for r19380 2014}	
{ [PATCH] Reland [Object.observe] Don't force normalization of elements for observed objects 2013}	{ [PATCH] Reland [Object.observe] Don't force normalization of elements for observed objects 2013}	{ [PATCH] [Object.observe] Don't force normalization of elements for observed objects 2013}	
{ [PATCH] MIPS: Add new HSeqStringGetChar instruction. 2013}	{ [PATCH] Add new HSeqStringGetChar instruction. 2013}	{ [PATCH] Add new HSeqStringGetChar instruction. 2013}	
{ [PATCH] Add support to load/store byte fields. 2013}	{ [PATCH] MIPS: Add support to load/store byte fields. 2013}	{ [PATCH] Add support to load/store byte fields. 2013}	
{ [PATCH] MIPS: Refactor PropertyCallbackInfo & FunctionCallbackInfo, part 3. 2013}	{ [PATCH] Refactor PropertyCallbackInfo & FunctionCallbackInfo, part 3. 2013}	{ [PATCH] Refactor PropertyCallbackInfo & FunctionCallbackInfo, part 3. 2013}	
{ [PATCH] MIPS: Turn the NumberToStringStub into a hydrogen stub. 2013}	{ [PATCH] Turn the NumberToStringStub into a hydrogen stub. 2013}	{ [PATCH] Turn the NumberToStringStub into a hydrogen stub. 2013}	
{ [PATCH] MIPS: Refactoring PropertyCallbackInfo & FunctionCallbackInfo, step 1. 2013}	{ [PATCH] Refactoring PropertyCallbackInfo & FunctionCallbackInfo, step 1. 2013}	{ [PATCH] Refactoring PropertyCallbackInfo & FunctionCallbackInfo, step 1. 2013}	
{ [PATCH] MIPS: load ics for js api accessors. 2013}	{ [PATCH] load ics for js api accessors 2013}	{ [PATCH] load ics for js api accessors 2013}	
{ [PATCH] MIPS: Generate StoreGlobal stubs with Hydrogen. 2013}	{ [PATCH] Generate StoreGlobal stubs with Hydrogen 2013}	{ [PATCH] Generate StoreGlobal stubs with Hydrogen 2013}	
{ [PATCH] MIPS: Convert UnaryOpStub to a HydrogenCodeStub. 2013}	{ [PATCH] Convert UnaryOpStub to a HydrogenCodeStub 2013}	{ [PATCH] Convert UnaryOpStub to a HydrogenCodeStub 2013}	
{ [PATCH] MIPS: Improved function entry hook coverage. 2013}	{ [PATCH] Improved function entry hook coverage 2013}	{ [PATCH] Improved function entry hook coverage 2013}	
{ [PATCH] MIPS: Implement yield* (delegating yield) 2013}	{ [PATCH] Implement yield* (delegating yield) 2013}	{ [PATCH] Implement yield* (delegating yield) 2013}	
{ [PATCH] MIPS: Make kAsciiDataHintTag have correct semantics for all both 1 and 2 byte string types. 2012}	{ [PATCH] Make kAsciiDataHintTag have correct semantics for all both 1 and 2 byte string types. 2012}	{ [PATCH] Make kAsciiDataHintTag have correct semantics for all both 1 and 2 byte string types. 2012}	
{ [PATCH] MIPS: Do not go to slow mode and back to fast in initializer blocks. 2012}	{ [PATCH] MIPS: Do not go to slow mode and back to fast in initializer blocks. 2012}	{ [PATCH] Do not go to slow mode and back to fast in initializer blocks. 2012}	
{ [PATCH] MIPS: ARM: Ensure reload of elements pointer in StoreFastDoubleElement stub 2012}	{ [PATCH] ARM: Ensure reload of elements pointer in StoreFastDoubleElement stub 2012}	{ [PATCH] Ensure reload of elements pointer in StoreFastDoubleElement stub. 2012}	
{ [PATCH] MIPS: Make sure transitioned arrays efficiently call builtin Array functions 2012}	{ [PATCH] Make sure transitioned arrays efficiently call builtin Array functions 2012}	{ [PATCH] Make sure transitioned arrays efficiently call builtin Array functions 2012}	
{ [PATCH] MIPS: Porting r10221 to ARM (avoid bailing out to runtime for short substrings). 2011}	{ [PATCH] Porting r10221 to x64 (avoid bailing out to runtime for short substrings). 2011}	{ [PATCH] Porting r10221 to ARM (avoid bailing out to runtime for short substrings). 2011}	
{ [PATCH] MIPS: Fixing MathPowHalf on ARM. 2011}	{ [PATCH] Fixing MathPowHalf on ARM. 2011}	{ [PATCH] Fixing MathPowHalf on x64. 2011}	
{ [PATCH] MIPS: Implement code stub for object literal creation. 2011}	{ [PATCH] ARM: Implement code stub for object literal creation. 2011}	{ [PATCH] Implement code stub for object literal creation. 2011}	
{ [PATCH] MIPS: Porting r10023 and r10054 to arm (pointer cache for external strings). 2011}	{ [PATCH] Porting r10023 and r10054 to arm (pointer cache for external strings). 2011}	{ [PATCH] Porting r10023 and r10054 to x64 (pointer cache for external strings). 2011}	
{ [PATCH] MIPS: Porting r9605 to arm (elements kind conversion in generated code). 2011}	{ [PATCH] Porting r9605 to arm (elements kind conversion in generated code). 2011}	{ [PATCH] Porting r9605 to x64 (elements kind conversion in generated code). 2011}	
{ [PATCH] Cardmarking writebarrier. 2010}	{ [PATCH] Cardmarking writebarrier. 2010}	{ [PATCH] Cardmarking writebarrier. 2010}	
{ [PATCH] Fix lint error. 2009}	{ [PATCH] Fix lint error. 2009}	{ [PATCH] Fix lint error. 2009}	
{ [PATCH] Last step in allocating objects in generated code on ARM. 2009}	{ [PATCH] First step in allocating objects in generated code on ARM. 2009}	{ [PATCH] First step in allocating objects in generated code on ARM 2009}	
{ [PATCH] Add allocation support to x64 macro assembler. 2009}	{ [PATCH] Add allocation support to ia32 macro assembler. 2009}	{ [PATCH] Add allocation support to ia32 macro assembler. 2009}	
{ [PATCH] [ppc/s390][builtins] Cleanup ExitFrame related code 2024}	{ [PATCH] [arm][builtins] Cleanup ExitFrame related code 2024}	
{ [PATCH] [riscv32][turboshaft] Implement some turboshaft instr selector 2024}	{ [PATCH] [riscv][turboshaft] Implement some turboshaft instr selector 2024}	
{ [PATCH] PPC/s390: [wasm][sandbox] Fix sandbox escapes via i32 high word 2024}	{ [PATCH] [wasm][sandbox] Fix sandbox escapes via i32 high word 2024}	
{ [PATCH] PPC: [compiler][arm64] Pattern matching ccmp 2024}	{ [PATCH] [compiler][arm64] Pattern matching ccmp 2024}	
{ [PATCH] PPC/s390: [wasm][liftoff] Move frame constants to frame constants header 2024}	{ [PATCH] [wasm][liftoff] Move frame constants to frame constants header 2024}	
{ [PATCH] Reland "[loong64] Add .size for PushAllRegistersAndIterateStack" 2024}	{ [PATCH] Reland "Add .size for PushAllRegistersAndIterateStack" 2024}	
{ [PATCH] Revert "[loong64] Add .size for PushAllRegistersAndIterateStack" 2024}	{ [PATCH] Revert "Add .size for PushAllRegistersAndIterateStack" 2024}	
{ [PATCH] [loong64] Add .size for PushAllRegistersAndIterateStack 2024}	{ [PATCH] Add .size for PushAllRegistersAndIterateStack 2024}	
{ [PATCH] Reland "[turboshaft][wasm][memory64] Fix bounds check for memory64 guard region" 2024}	{ [PATCH] Revert "[turboshaft][wasm][memory64] Fix bounds check for memory64 guard region" 2024}	
{ [PATCH] PPC/s390: [wasm][x64] Fix no-sandbox ptr-compr 2024}	{ [PATCH] [wasm][x64] Fix no-sandbox ptr-compr 2024}	
{ [PATCH] PPC/s390: Reland "[wasm] Call on-heap import wrappers via a trampoline" 2024}	{ [PATCH] Reland "[wasm] Call on-heap import wrappers via a trampoline" 2024}	
{ [PATCH] PPC/s390: [turboshaft] Fix instruction selector regressions 2024}	{ [PATCH] [turboshaft] Fix instruction selector regressions 2024}	
{ [PATCH] Add .att_syntax for inline asm under windows. 2024}	{ [PATCH] Add .att_syntax for inline asm under windows x64. 2024}	
{ [PATCH] [turboshaft][x64] Add x64 instruction selector unittest (disabled) 2024}	{ [PATCH] [turboshaft][arm64] Add Arm64 instruction selector unittest (disabled) 2024}	
{ [PATCH] PPC/s390: [execution] Support stack iteration from fast C calls 2024}	{ [PATCH] [execution] Support stack iteration from fast C calls 2024}	
{ [PATCH] PPC/s390: [builtins] Do not use SetIsolateDataSlots::kYes in CEntry 2024}	{ [PATCH] [builtins] Do not use SetIsolateDataSlots::kYes in CEntry 2024}	
{ [PATCH] PPC/s390: Reland "[compiler] Add fake handles slots to safepoint table" 2024}	{ [PATCH] Reland "[compiler] Add fake handles slots to safepoint table" 2024}	
{ [PATCH] PPC/s390: [compiler] Always emit safepoint for fast C calls 2024}	{ [PATCH] [compiler] Always emit safepoint for fast C calls 2024}	
{ [PATCH] [wasm][liftoff][riscv] Fix LoadTaggedPointer 2024}	{ [PATCH] [wasm][liftoff][arm64] Fix LoadTaggedPointer 2024}	
{ [PATCH] [loong64][mips64][tagged-ptr] Make HeapNumber & BigInt layout classes 2024}	{ [PATCH] [tagged-ptr] Make HeapNumber & BigInt layout classes 2024}	
{ [PATCH] [loong64][turboshaft] Port Simd128ReverseBytes 2024}	{ [PATCH] [turboshaft] port Simd128ReverseBytes 2024}	
{ [PATCH] PPC/s390: [heap] heap_internals::MemoryChunk => MemoryChunkHeader base class 2024}	{ [PATCH] [heap] heap_internals::MemoryChunk => MemoryChunkHeader base class 2024}	
{ [PATCH] Revert "[maglev][x64] Fix for TryDoubleToUInt32" 2024}	{ [PATCH] Revert "[maglev][arm64] Fix for TryDoubleToUInt32" 2024}	
{ [PATCH] [maglev][arm64] Fix for TryDoubleToUInt32 2024}	{ [PATCH] [maglev][x64] Fix for TryDoubleToUInt32 2024}	
{ [PATCH] PPC/s390: [turboshaft] Add skeleton for graph builder from Maglev 2024}	{ [PATCH] [turboshaft] Add skeleton for graph builder from Maglev 2024}	
{ [PATCH] [loong64][codegen] Load trusted pointer table via root register 2024}	{ [PATCH] [codegen] Load trusted pointer table via root register 2023}	
{ [PATCH] PPC/s390: [sandbox] Reference Code from OSR feedback vector slots via its wrapper 2024}	{ [PATCH] [sandbox] Reference Code from OSR feedback vector slots via its wrapper 2024}	
{ [PATCH] PPC/s390: [sandbox] Reference Code from FeedbackVector via code pointer 2024}	{ [PATCH] [sandbox] Reference Code from FeedbackVector via code pointer 2023}	
{ [PATCH] PPC/s390: [cfi] use more CodeModificationForDebugging scopes 2023}	{ [PATCH] [cfi] use more CodeModificationForDebugging scopes 2023}	
{ [PATCH] PPC/s390: [exceptions] cleanup after unifying pending/scheduled exceptions 2023}	{ [PATCH] [exceptions] cleanup after unifying pending/scheduled exceptions 2023}	
{ [PATCH] Reland^2 "[sandbox] Ensure bytecode is loaded via a trusted pointer" 2023}	{ [PATCH] Reland "[sandbox] Ensure bytecode is loaded via a trusted pointer" 2023}	
{ [PATCH] [loong64][mips64][jspi] Port JS central stack switch 2023}	{ [PATCH] [riscv][jspi][arm64] Port JS central stack switch 2023}	
{ [PATCH] [riscv][turboshaft] Merge EqualOp into ComparisonOp 2023}	{ [PATCH] [turboshaft] Merge EqualOp into ComparisonOp 2023}	
{ [PATCH] PPC/s390: [wasm][memory64] Use trap handling for memory64 2023}	{ [PATCH] [wasm][memory64] Use trap handling for memory64 2023}	
{ [PATCH] PPC/s390: [codegen] Avoid redundant code comment 2023}	{ [PATCH] [codegen] Avoid redundant code comment 2023}	
{ [PATCH] [riscv] Port InstructionSelector part 3 2023}	{ [PATCH] [riscv] Port InstructionSelector part 2 2023}	
{ [PATCH] [loong64][wasm] Single landing pad for trap handlers 2023}	{ [PATCH] [wasm] Single landing pad for trap handlers 2023}	
{ [PATCH] [loong64][mips64][liftoff] Add support for direct C calls 2023}	{ [PATCH] [liftoff] Add support for direct C calls 2023}	
{ [PATCH] PPC/s390: Reland "[baseline] Use the same slot for FBV as Ignition" 2023}	{ [PATCH] Reland "[baseline] Use the same slot for FBV as Ignition" 2023}	
{ [PATCH] [loong64][mips64][baseline] Use the same slot for FBV as Ignition 2023}	{ [PATCH] [baseline] Use the same slot for FBV as Ignition 2023}	
{ [PATCH] s390: [wasm][liftoff] Fix relaxed dot product regalloc 2023}	{ [PATCH] [wasm][liftoff] Fix relaxed dot product regalloc 2023}	
{ [PATCH] [mips64][liftoff] Avoid modifying the cache state in stores 2023}	{ [PATCH] [liftoff] Avoid modifying the cache state in stores 2023}	
{ [PATCH] [Assembler][ia32] Implement special lea instruction. 2023}	{ [PATCH] [Assembler][ia32]Implement special lea instruction 2023}	
{ [PATCH] [riscv] Reduce the vector arch code (Part 8) 2023}	{ [PATCH] [riscv] Reduce the vector arch code (Part 7) 2023}	
{ [PATCH] [riscv] Reduce riscv Vector arch code(Part 6) 2023}	{ [PATCH] [riscv] Reduce riscv Vector arch code(Part 5) 2023}	
{ [PATCH] Reland^2 "[maglev] Support non-pointer-compressed builds" 2023}	{ [PATCH] Reland "[maglev] Support non-pointer-compressed builds" 2023}	
{ [PATCH] [riscv][maglev][turbofan] Use the fast construct builtin when deopting 2023}	{ [PATCH] [maglev][turbofan] Use the fast construct builtin when deopting 2023}	
{ [PATCH] [loong64][mips64][sandbox] Sandboxify WasmIndirectFunctionTable::Targets 2023}	{ [PATCH] [sandbox] Sandboxify WasmIndirectFunctionTable::Targets 2023}	
{ [PATCH] [loong64][mips64][liftoff] Make tier-up check platform specific 2023}	{ [PATCH] [liftoff] Make tier-up check platform specific 2023}	
{ [PATCH] PPC/s390: Reland "[sandbox] Sandboxify WasmIndirectFunctionTable::Targets" 2023}	{ [PATCH] Reland "[sandbox] Sandboxify WasmIndirectFunctionTable::Targets" 2023}	
{ [PATCH] PPC/s390: Reland "[liftoff] Make tier-up check platform specific" 2023}	{ [PATCH] Reland "[liftoff] Make tier-up check platform specific" 2023}	
{ [PATCH] PPC/s390: Reland "[wasm] Switching to the central stack from Wasm to Runtime calls." 2023}	{ [PATCH] Reland "[wasm] Switching to the central stack from Wasm to Runtime calls." 2023}	
{ [PATCH] [loong64][mips64][wasm] Switching to the central stack from Wasm to Runtime calls. 2023}	{ [PATCH] [wasm] Switching to the central stack from Wasm to Runtime calls. 2023}	
{ [PATCH] PPC/s390: [maglev][arm] Use SafepointTableBuilderBase in GetCode 2023}	{ [PATCH] [maglev][arm] Use SafepointTableBuilderBase in GetCode 2023}	
{ [PATCH] s390: [test] Use uint8_t instead of byte 2023}	{ [PATCH] [test] Use uint8_t instead of byte 2023}	
{ [PATCH] [loong64][mips64][wasm-stringrefs] Recognize S.p.toLocaleLowerCase 2023}	{ [PATCH] [wasm-stringrefs] Recognize S.p.toLocaleLowerCase 2023}	
{ [PATCH] PPC/s390: Reland "Cleanup memory modification scopes" 2023}	{ [PATCH] Reland "Cleanup memory modification scopes" 2023}	
{ [PATCH] PPC/s390: Reland "[wasm-stringrefs] Recognize S.p.toLocaleLowerCase" 2023}	{ [PATCH] Reland "[wasm-stringrefs] Recognize S.p.toLocaleLowerCase" 2023}	
{ [PATCH] PPC: [regexp] Fix clobbered register in global Unicode special case 2023}	{ [PATCH] [regexp] Fix clobbered register in global Unicode special case 2023}	
{ [PATCH] Revert "PPC/s390: Flip the order of write barrier checks in Turbofan" 2023}	{ [PATCH] Revert "Flip the order of write barrier checks in Turbofan" 2023}	
{ [PATCH] Reland^2 "[tiering] Don't increase budgets on forward jumps" 2023}	{ [PATCH] Reland "[tiering] Don't increase budgets on forward jumps" 2023}	
{ [PATCH] PPC/s390: Reland "Move data fields from InstructionStream to Code" 2023}	{ [PATCH] Reland "Move data fields from InstructionStream to Code" 2023}	
{ [PATCH] PPC/s390: Reland "Allocate builtin Code objects in RO space" 2023}	{ [PATCH] Reland "Allocate builtin Code objects in RO space" 2023}	
{ [PATCH] PPC/s390: Reland "[wasm-gc] Inlining of very small wasm functions into JS" 2023}	{ [PATCH] Reland "[wasm-gc] Inlining of very small wasm functions into JS" 2023}	
{ [PATCH] Reland "[x64] fold constant base into constant displacement when generate memory load/store operand." 2023}	{ [PATCH] [x64] fold constant base into constant displacement when generate memory load/store operand. 2023}	
{ [PATCH] [loong64][mips64][liftoff] Remove unused RelocInfo::Mode parameter 2023}	{ [PATCH] [liftoff] Remove unused RelocInfo::Mode parameter 2023}	
{ [PATCH] PPC/s390: [isolate-data] Tweak root register offsets and bias 2023}	{ [PATCH] [isolate-data] Tweak root register offsets and bias 2023}	
{ [PATCH] [static-roots][arm64] Encode roots as immediates when possible 2023}	{ [PATCH] [static-roots][x64] Encode roots as immediates when possible 2023}	
{ [PATCH] s390: [ptrcomp] Remove the distinction of TaggedAny and TaggedPointer 2023}	{ [PATCH] [ptrcomp] Remove the distinction of TaggedAny and TaggedPointer 2023}	
{ [PATCH] PPC/s390: [liftoff] Use cross-platform conditions 2023}	{ [PATCH] [liftoff] Use cross-platform conditions 2023}	
{ [PATCH] PPC/s390: [wasm][memory64] Fix atomics 2023}	{ [PATCH] [wasm][memory64] Fix atomics 2023}	
{ [PATCH] PPC/s390: Various post-Code rename cleanups 2023}	{ [PATCH] Various post-Code rename cleanups 2023}	
{ [PATCH] PPC/s390: Rename Code to InstructionStream 2023}	{ [PATCH] Rename Code to InstructionStream 2023}	
{ [PATCH] PPC/s390: [codet] Remove obsolete CodeT dispatch functions 2023}	{ [PATCH] [codet] Remove obsolete CodeT dispatch functions 2023}	
{ [PATCH] PPC/s390: [static-roots] Use static roots in CSA 2023}	{ [PATCH] [static-roots] Use static roots in CSA 2023}	
{ [PATCH] PPC/s390: [relaxed-simd] Fix ordering of relaxed FMA/FNMA operands 2022}	{ [PATCH] [relaxed-simd] Fix ordering of relaxed FMA/FNMA operands 2022}	
{ [PATCH] [riscv] Convert Opcode from enum to integer type. 2022}	{ [PATCH] [loong64][mips64] Convert Opcode from enum to integer type 2022}	
{ [PATCH] PPC/s390: Reland "[wasm-gc] Use static null value for pointer-compressed builds" 2022}	{ [PATCH] Reland "[wasm-gc] Use static null value for pointer-compressed builds" 2022}	
{ [PATCH] PPC/s390: [wasm-gc] Fix WasmLiftoffSetupFrame::Iterate() 2022}	{ [PATCH] [wasm-gc] Fix WasmLiftoffSetupFrame::Iterate() 2022}	
{ [PATCH] PPC/s390: Reland "[wasm] Allocate feedback vectors on demand" 2022}	{ [PATCH] Reland "[wasm] Allocate feedback vectors on demand" 2022}	
{ [PATCH] PPC: group unary simd ops requiring a scratch register 2022}	{ [PATCH] PPC: group binary simd ops requiring a scratch register 2022}	
{ [PATCH] [loong64][mips64] Support Int64MulWithOverflow 2022}	{ [PATCH] [x64][arm64] Support Int64MulWithOverflow 2022}	
{ [PATCH] [loong64][mips64] support 64bit mul high 2022}	{ [PATCH] [arm64][x64] support 64bit mul high 2022}	
{ [PATCH] [riscv] Fix cctest/test-assembler-riscv*/RISCV_UTEST_FLOAT_WIDENING_vfwmacc_vf. 2022}	{ [PATCH] [riscv] Fix cctest/test-assembler-riscv*/RISCV_UTEST_FLOAT_WIDENING_vfwadd_vf. 2022}	
{ [PATCH] PPC/s390: Remove unused RelocInfo::Mode::RUNTIME_ENTRY 2022}	{ [PATCH] Remove unused RelocInfo::Mode::RUNTIME_ENTRY 2022}	
{ [PATCH] Fix build with -Wextra-semi (arm64) 2022}	{ [PATCH] Fix build with -Wextra-semi 2022}	
{ [PATCH] PPC/s390: [builtins][masm] Move hot flags to the beginning of IsolateData 2022}	{ [PATCH] [builtins][masm] Move hot flags to the beginning of IsolateData 2022}	
{ [PATCH] PPC/s390: [builtins] Streamline API calls 2022}	{ [PATCH] [builtins] Streamline API calls 2022}	
{ [PATCH] PPC/s390: [heap, baseline] Implement shared write barrier for baseline compiler 2022}	{ [PATCH] [heap, baseline] Implement shared write barrier for baseline compiler 2022}	
{ [PATCH] PPC: [codegen] Change a few DCHECKs to V8_ASSUMEs 2022}	{ [PATCH] [codegen] Change a few DCHECKs to V8_ASSUMEs 2022}	
{ [PATCH] S390: pass a scratch register when using register_location 2022}	{ [PATCH] PPC: pass a scratch reg when using register_location 2022}	
{ [PATCH] PPC/s390: [wasm] Fix 64-bit addressed loads on arm64 2022}	{ [PATCH] [wasm] Fix 64-bit addressed loads on arm64 2022}	
{ [PATCH] Revert "[loong64][mips64][wasm] WasmCompileLazyFrame scanning" 2022}	{ [PATCH] Revert "[wasm] WasmCompileLazyFrame scanning" 2022}	
{ [PATCH] [loong64][mips64][wasm] WasmCompileLazyFrame scanning 2022}	{ [PATCH] [wasm] WasmCompileLazyFrame scanning 2022}	
{ [PATCH] PPC/s390: [liftoff] Mark unused parameters per platform 2022}	{ [PATCH] [liftoff] Mark unused parameters per platform 2022}	
{ [PATCH] PPC/s390: [wasm][arm][ia32] Push instance only twice in lazy-compile builtin 2022}	{ [PATCH] [wasm][arm][ia32] Push instance only twice in lazy-compile builtin 2022}	
{ [PATCH] ppc64: [baseline] fix ptrcompr issue 2022}	{ [PATCH] s390x: [baseline] fix ptr-compr issue 2022}	
{ [PATCH] [loong64][mips64][wasm-gc][refactor] Rename optRef -> refNull 2022}	{ [PATCH] [wasm-gc][refactor] Rename optRef -> refNull 2022}	
{ [PATCH] S390: Fix build with  no web assembly 2022}	{ [PATCH] PPC: Fix build with  no web assembly 2022}	
{ [PATCH] PPC [flags] Protect individual flag updates 2022}	{ [PATCH] [flags] Protect individual flag updates 2022}	
{ [PATCH] [loong64][mips] Remove a useless declaration of Operand 2022}	{ [PATCH] [mips64] Remove a useless declaration of Operand. 2022}	
{ [PATCH] PPC/s390: [osr] Extend OSR tracing 2022}	{ [PATCH] [osr] Extend OSR tracing 2022}	
{ [PATCH] [loong64][wasm-relaxed-simd] Add relaxed laneselect in Liftoff on ia32/x64 2022}	{ [PATCH] [wasm-relaxed-simd] Add relaxed laneselect in Liftoff on ia32/x64 2022}	
{ [PATCH] Reland "PPC/S390: Reland "[osr] Use the new OSR cache"" 2022}	{ [PATCH] Reland "Reland "[osr] Use the new OSR cache"" 2022}	
{ [PATCH] Revert "PPC/S390: Reland "[osr] Use the new OSR cache"" 2022}	{ [PATCH] Revert "Reland "[osr] Use the new OSR cache"" 2022}	
{ [PATCH] PPC: [builtins] Add 'RestartFrameTrampoline' 2022}	{ [PATCH] [builtins] Add 'RestartFrameTrampoline' 2022}	
{ [PATCH] [loong64][mips][osr] Extract extended OSR checks to BaselineOnStackReplacement builtin 2022}	{ [PATCH] [osr] Extract extended OSR checks to BaselineOnStackReplacement builtin 2022}	
{ [PATCH] ppc64: fix compilation error 2022}	{ [PATCH] ppc64: Fix compilation error 2022}	
{ [PATCH] [riscv64][sim] Increase the simulator's stack limit margin 2022}	{ [PATCH] [sim] Increase the simulator's stack limit margin 2022}	
{ [PATCH] s390: [ext-code-space] Make some EmbeddedData methods inline 2022}	{ [PATCH] [ext-code-space] Make some EmbeddedData methods inline 2022}	
{ [PATCH] PPC/s390: [write-barrier] Add debug check for cleared weak refs in write barrier 2022}	{ [PATCH] [write-barrier] Add debug check for cleared weak refs in write barrier 2022}	
{ [PATCH] PPC/s390: [safepoints] Various refactors 2022}	{ [PATCH] [safepoints] Various refactors 2022}	
{ [PATCH] PPC/s390: [liftoff] Rename {emit_u32_to_intptr} to {emit_u32_to_uintptr} 2022}	{ [PATCH] [liftoff] Rename {emit_u32_to_intptr} to {emit_u32_to_uintptr} 2022}	
{ [PATCH] s390x: [baseline] implement AddToInterruptBudgetAndJumpIfNotExceeded 2022}	{ [PATCH] s390x: [baseline] implement AddToInterruptBudgetAndJumpIfNotExceeded 2022}	
{ [PATCH] S390 [liftoff]: Implement simd f32x2 unops 2022}	{ [PATCH] S390 [liftoff]: Implement simd f64x2 unops 2022}	
{ [PATCH] PPC/s390: Remove many superfluous STL includes in headers. 2022}	{ [PATCH] Remove many superfluous STL includes in headers. 2021}	
{ [PATCH] PPC/AIX: Support Wasm atomic ops on big endian within turbofan 2021}	{ [PATCH] S390: Support Wasm atomic ops on big endian within turbofan 2021}	
{ [PATCH] s390x: [baseline] implement Jump pt.2 2021}	{ [PATCH] s390x: [baseline] implement Jump pt.1 2021}	
{ [PATCH] S390 [lifotff]: Fix endianness issue in atomic ops 2021}	{ [PATCH] AIX [lifotff]: Fix endianness issue in atomic ops 2021}	
{ [PATCH] Reland^2 "[fastcall] Enable float support on arm64 simulator"" 2021}	{ [PATCH] Reland "[fastcall] Enable float support on arm64 simulator" 2021}	
{ [PATCH] [riscv64] Fix a Int64Mul error in instruction selection. 2021}	{ [PATCH] [loong64][mips64] Fix a Int64Mul error in instruction selection. 2021}	
{ [PATCH] [loong64][mips] Create Instance Type for Class Constructors 2021}	{ [PATCH] [riscv64] Create Instance Type for Class Constructors 2021}	
{ [PATCH] PPC/s390: [regexp] Various refactors 2021}	{ [PATCH] [regexp] Various refactors 2021}	
{ [PATCH] [x64] Verify disassembly of SSE4_2 instructions 2021}	{ [PATCH] [x64] Verify disassembly of SSE4_1 instructions 2021}	
{ [PATCH] PPC/s390: [regexp] Fix stack growth for global regexps 2021}	{ [PATCH] [regexp] Fix stack growth for global regexps 2021}	
{ [PATCH] PPC/s390: [masm] Improve Instance Type Checks in Builtins::Call/Construct 2021}	{ [PATCH] [masm] Improve Instance Type Checks in Builtins::Call/Construct 2021}	
{ [PATCH] PPC/s390: Create Instance Type for Class Constructors 2021}	{ [PATCH] Create Instance Type for Class Constructors 2021}	
{ [PATCH] PPC/s390: [regexp] Remove the `stack` parameter from regexp matchers 2021}	{ [PATCH] [regexp] Remove the `stack` parameter from regexp matchers 2021}	
{ [PATCH] [x64] Verify disassembly of SSE2 instructions 2021}	{ [PATCH] [x64] Verify disassembly of SSE instructions 2021}	
{ [PATCH] [ia32] Optimize F64x2PromoteLowF32x4 with S128Load64Zero 2021}	{ [PATCH] [x64] Optimize F64x2PromoteLowF32x4 with S128Load64Zero 2021}	
{ [PATCH] PPC/s390: Omit check against kDontAdaptArgumentsSentinel 2021}	{ [PATCH] Omit check against kDontAdaptArgumentsSentinel 2021}	
{ [PATCH] [arm64][x64][liftoff] Fix trap handling on load lane 2021}	{ [PATCH] [arm64][liftoff] Fix trap handling on load lane 2021}	
{ [PATCH] [mips] Support acq/rel accesses and atomic accesses on tagged 2021}	{ [PATCH] [mips64][loong64] Support acq/rel accesses and atomic accesses on tagged 2021}	
{ [PATCH] PPC/s390: Reland "[compiler] Support acq/rel accesses and atomic accesses on tagged" 2021}	{ [PATCH] Reland "[compiler] Support acq/rel accesses and atomic accesses on tagged" 2021}	
{ [PATCH] [mips][liftoff] Add code comments for large stack checks 2021}	{ [PATCH] [liftoff] Add code comments for large stack checks 2021}	
{ [PATCH] [mips][baseline] Retry compiling on-heap when growing buffer 2021}	{ [PATCH] [baseline] Retry compiling on-heap when growing buffer 2021}	
{ [PATCH] PPC/s390: [masm][ia32][arm] Introduce helper to drop arguments. 2021}	{ [PATCH] [masm][ia32][arm] Introduce helper to drop arguments. 2021}	
{ [PATCH] [mips][sparkplug] Fix invalid stack on baseline install 2021}	{ [PATCH] [sparkplug] Fix invalid stack on baseline install 2021}	
{ [PATCH] PPC/s390: [baseline] Fallback to handle references on heap compilation 2021}	{ [PATCH] [baseline] Fallback to handle references on heap compilation 2021}	
{ [PATCH] PPC/s390: Reland "[wasm][liftoff][ia32][x64] Detect SIMD NaNs for fuzzing" 2021}	{ [PATCH] Reland "[wasm][liftoff][ia32][x64] Detect SIMD NaNs for fuzzing" 2021}	
{ [PATCH] PPC/s390: [base] Create base/strings.h 2021}	{ [PATCH] [base] Create base/strings.h 2021}	
{ [PATCH] PPC/s390: Fix comment pointing to frame-constants.h 2021}	{ [PATCH] Fix comment pointing to frame-constants.h 2021}	
{ [PATCH] PPC/s390: [masm] Read builtin off builtin_entry_table rather than EmbeddedData... 2021}	{ [PATCH] [masm] Read builtin off builtin_entry_table rather than EmbeddedData... 2021}	
{ [PATCH] PPC:s390: [sparkplug][arm][arm64[ia32] Callee-saved registers for RecordWrite 2021}	{ [PATCH] [sparkplug][arm][arm64[ia32] Callee-saved registers for RecordWrite 2021}	
{ [PATCH] PPC/s390: [sparkplug][x64] Reduce CallRecordWrite instructions 2021}	{ [PATCH] [sparkplug][x64] Reduce CallRecordWrite instructions 2021}	
{ [PATCH] PPC/s390: [wasm][liftoff] Always zero-extend 32 bit offsets 2021}	{ [PATCH] [wasm][liftoff] Always zero-extend 32 bit offsets 2021}	
{ [PATCH] [mips] Fix error in LeaveExitFrame 2021}	{ [PATCH] [riscv64] Fix error in LeaveExitFrame 2021}	
{ [PATCH] PPC: replace LoadPX with LoadU64 2021}	{ [PATCH] ppc/s390: replace LoadP with LoadU64 2021}	
{ [PATCH] s390: [sparkplug] Use separate WriteBarrier stubs 2021}	{ [PATCH] [sparkplug] Use separate WriteBarrier stubs 2021}	
{ [PATCH] ppc: rename LoadP to LoadU64 2021}	{ [PATCH] s390x: rename LoadP to LoadU64 2021}	
{ [PATCH] PPC/s390: [cleanup] Convert some global enums to enum class 2021}	{ [PATCH] [cleanup] Convert some global enums to enum class 2021}	
{ [PATCH] [wasm-simd][ia32][x64] Consolidate f64x2.max into shared code 2021}	{ [PATCH] [wasm-simd][ia32][x64] Consolidate f64x2.min into shared code 2021}	
{ [PATCH] PPC/s390: [builtins] Remove extra move in ResumeGeneratorTrampoline 2021}	{ [PATCH] [builtins] Remove extra move in ResumeGeneratorTrampoline 2021}	
{ [PATCH] [mips64][turbofan] LoadImmutable should be eligible as memory operand 2021}	{ [PATCH] [turbofan] LoadImmutable should be eligible as memory operand 2021}	
{ [PATCH] s390: Revert "[wasm-simd] Canonicalize shuffles when creating TurboFan graph" 2021}	{ [PATCH] Revert "[wasm-simd] Canonicalize shuffles when creating TurboFan graph" 2021}	
{ [PATCH] PPC/s390: Reland "[codegen] Add static interface descriptors" 2021}	{ [PATCH] Reland "[codegen] Add static interface descriptors" 2021}	
{ [PATCH] [x64][ia32] Move more AVX_OP into SharedTurboAssembler 2021}	{ [PATCH] [x64][ia32] Move more AVX_OP into SharedTurboAssembler 2021}	
{ [PATCH] PPC/s390: Fix allocating large stack space on macOS 2021}	{ [PATCH] [x64] Fix allocating large stack space on macOS 2021}	
{ [PATCH] s390x: [liftoff] implement AtomicXor 2021}	{ [PATCH] s390x: [liftoff] implement AtomicOr 2021}	
{ [PATCH] s390x: [liftoff] implement AtomicAnd 2021}	{ [PATCH] s390x: [liftoff] implement AtomicAdd 2021}	
{ [PATCH] PPC/s390: Reland "[sparkplug] OSR Ignition -> Sparkplug" 2021}	{ [PATCH] Reland "[sparkplug] OSR Ignition -> Sparkplug" 2021}	
{ [PATCH] [mips][compiler] Inline 64bit immediates and RPO numbers in InstructionOperand 2021}	{ [PATCH] [compiler] Inline 64bit immediates and RPO numbers in InstructionOperand 2021}	
{ [PATCH] Reland "PPC/s390: [sparkplug][deoptimizer] Deoptimize to baseline." 2021}	{ [PATCH] Reland "[sparkplug][deoptimizer] Deoptimize to baseline." 2021}	
{ [PATCH] Revert "PPC/s390: [sparkplug][deoptimizer] Deoptimize to baseline." 2021}	{ [PATCH] Revert "[sparkplug][deoptimizer] Deoptimize to baseline." 2021}	
{ [PATCH] s390x: [liftoff][arm] Make context register allocatable 2021}	{ [PATCH] [liftoff][arm] Make context register allocatable 2021}	
{ [PATCH] PPC/s390: [wasm-simd] Canonicalize shuffles when creating TurboFan graph 2021}	{ [PATCH] [wasm-simd] Canonicalize shuffles when creating TurboFan graph 2021}	
{ [PATCH] [mips][no-wasm] Exclude src/wasm from compilation 2021}	{ [PATCH] [no-wasm] Exclude src/wasm from compilation 2021}	
{ [PATCH] PPC/s390: [wasm][liftoff] Avoid x28 even without pointer compression 2021}	{ [PATCH] [wasm][liftoff][arm64] Avoid x28 even without pointer compression 2021}	
{ [PATCH] PPC/s390: Reland "[no-wasm] Exclude src/wasm from compilation" 2021}	{ [PATCH] Reland "[no-wasm] Exclude src/wasm from compilation" 2021}	
{ [PATCH] [mips][wasm][liftoff] Respect CallDescriptor linkage 2021}	{ [PATCH] [wasm][liftoff] Respect CallDescriptor linkage 2021}	
{ [PATCH] [mips][wasm-simd] Remove add horiz instructions 2021}	{ [PATCH] [wasm-simd] Remove add horiz instructions 2021}	
{ [PATCH] PPC/s390: Reland "[wasm-simd] Remove add horiz instructions" 2021}	{ [PATCH] Reland "[wasm-simd] Remove add horiz instructions" 2021}	
{ [PATCH] [wasm-simd][ia32] Optimize pmin/pmax for AVX 2021}	{ [PATCH] [wasm-simd][x64] Optimize pmin/pmax for AVX 2021}	
{ [PATCH] [wasm-simd][arm64] Optimize f64x2 dup + mul into fmul by element 2021}	{ [PATCH] [wasm-simd][arm64] Optimize f32x4 dup + mul into fmul by element 2021}	
{ [PATCH] PPC/s390: [wasm-simd] Remove signselect 2021}	{ [PATCH] [wasm-simd] Remove signselect 2021}	
{ [PATCH] [wasm-simd][ia32] Optimize some signed integer widening sequences 2021}	{ [PATCH] [wasm-simd][x64] Optimize some signed integer widening sequences 2021}	
{ [PATCH] PPC/s390: [liftoff] Skip write barrier for storing Smis 2021}	{ [PATCH] [liftoff] Skip write barrier for storing Smis 2021}	
{ [PATCH] PPC/s390: [wasm] Move ValueKind out of ValueType 2021}	{ [PATCH] [wasm] Move ValueKind out of ValueType 2021}	
{ [PATCH] PPC/s390: [liftoff] Cache the instance in a register 2021}	{ [PATCH] [liftoff] Cache the instance in a register 2021}	
{ [PATCH] PPC/s390: [cleanup] Extract common code to MaybeOptimizeCodeOrTailCallOptimizedCode 2021}	{ [PATCH] [cleanup] Extract common code to MaybeOptimizeCodeOrTailCallOptimizedCode 2021}	
{ [PATCH] PPC/s390: [debug] Fix extra arguments when restarting frame 2021}	{ [PATCH] [debug] Fix extra arguments when restarting frame 2021}	
{ [PATCH] Reland "PPC/s390: [wasm-simd][liftoff] Implement i8x16.popcnt" 2021}	{ [PATCH] Reland "[wasm-simd][x64][liftoff] Implement i8x16.popcnt" 2021}	
{ [PATCH] PPC: [wasm-simd] Retrieve the value of SupportsWasmSimd128() in builtin 2021}	{ [PATCH] [wasm-simd] Retrieve the value of SupportsWasmSimd128() in builtin 2021}	
{ [PATCH] Revert "PPC/s390: [wasm-simd][liftoff] Implement i8x16.popcnt" 2021}	{ [PATCH] Revert "[wasm-simd][x64][liftoff] Implement i8x16.popcnt" 2021}	
{ [PATCH] PPC/s390: Fix frame size to account for q registers 2021}	{ [PATCH] [arm64] Fix frame size to account for q registers 2021}	
{ [PATCH] PPC: Push the full q register before lazy compile 2021}	{ [PATCH] S390: Push the full simd register before lazy compile 2021}	
{ [PATCH] [mips][wasm-simd] Merge all any_true to v128.any_true 2021}	{ [PATCH] [wasm-simd] Merge all any_true to v128.any_true 2021}	
{ [PATCH] PPC/s390: Reland "[wasm-simd] Merge all any_true to v128.any_true" 2021}	{ [PATCH] Reland "[wasm-simd] Merge all any_true to v128.any_true" 2021}	
{ [PATCH] s390 [wasm-simd]: Prototype sign select 2021}	{ [PATCH] PPC [wasm-simd]: Prototype sign select 2021}	
{ [PATCH] [wasm-simd][arm64] Prototype double precision conversion 2021}	{ [PATCH] [wasm-simd][x64] Prototype double precision conversion 2021}	
{ [PATCH] [wasm-simd] Prototype prefetch for ia32 2021}	{ [PATCH] [wasm-simd] Prototype prefetch for x64 2021}	
{ [PATCH] S390 [wasm-simd]: prototype i64x2 widen i32x4 2021}	{ [PATCH] PPC [wasm-simd]: prototype i64x2 widen i32x4 2021}	
{ [PATCH] PPC/s390: [codegen] Handle alignment holes when pushing arguments 2021}	{ [PATCH] [codegen] Handle alignment holes when pushing arguments 2020}	
{ [PATCH] PPC: [wasm-simd] Prototype extended pairwise addition 2021}	{ [PATCH] S390: [wasm-simd] Prototype extended pairwise addition 2021}	
{ [PATCH] [wasm-simd][liftoff][ia32] Move v128.select into macro-assembler 2021}	{ [PATCH] [wasm-simd][liftoff][x64] Move v128.select into macro-assembler 2021}	
{ [PATCH] [wasm-simd][ia32] Convert ext mul macros into macro-assembler functions 2020}	{ [PATCH] [wasm-simd][x64] Convert ext mul macros into macro-assembler functions 2020}	
{ [PATCH] [mips][Turboprop] Move dynamic check maps immediate args to deopt exit. 2020}	{ [PATCH] [Turboprop] Move dynamic check maps immediate args to deopt exit. 2020}	
{ [PATCH] [wasm-simd][ia32] Pattern match 32x4 rotate 2020}	{ [PATCH] [x64][wasm-simd] Pattern match 32x4 rotate 2020}	
{ [PATCH] PPC/s390: Reland "[Turboprop] Move dynamic check maps immediate args to deopt exit." 2020}	{ [PATCH] Reland "[Turboprop] Move dynamic check maps immediate args to deopt exit." 2020}	
{ [PATCH] [wasm-simd][arm] Prototype i64x2.eq 2020}	{ [PATCH] [wams-simd][ia32] Prototype i64x2.eq 2020}	
{ [PATCH] [mips][turbofan] Fix CheckedFloat64ToInt64 on mips64 2020}	{ [PATCH] [turbofan] Fix CheckedFloat64ToInt64 on arm64 2020}	
{ [PATCH] [mips][cleanup] Replace all remaining Min/Max uses with std::min/max 2020}	{ [PATCH] [cleanup] Replace all remaining Min/Max uses with std::min/max 2020}	
{ [PATCH] PPC/s390: [wasm][liftoff] Don't reserve space for the stack marker twice 2020}	{ [PATCH] [wasm][liftoff] Don't reserve space for the stack marker twice 2020}	
{ [PATCH] [mips][wasm][memory64] Prepare Liftoff for ptrsize offsets 2020}	{ [PATCH] [wasm][memory64] Prepare Liftoff for ptrsize offsets 2020}	
{ [PATCH] PPC/s390: Reland "[wasm][memory64] Prepare Liftoff for ptrsize offsets" 2020}	{ [PATCH] Reland "[wasm][memory64] Prepare Liftoff for ptrsize offsets" 2020}	
{ [PATCH] [wasm-simd][ia32] Optimize integer splats of constant 0 2020}	{ [PATCH] [wasm-simd][x64] Optimize integer splats of constant 0 2020}	
{ [PATCH] [wasm-simd][ia32] Use register operands for more SIMD instructions 2020}	{ [PATCH] [wasm-simd][ia32] Use register operands for SIMD instructions 2020}	
{ [PATCH] PPC/s390: [arm] Reduce confusion between max and actual double register counts 2020}	{ [PATCH] [arm] Reduce confusion between max and actual double register counts 2020}	
{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement v128.load_zero 2020}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement v128.load_zero 2020}	
{ [PATCH] [wasm-simd][arm] Implement v128.load32_zero v128.load64_zero 2020}	{ [PATCH] [wasm-simd][ia32] Implement v128.load32_zero v128.load64_zero 2020}	
{ [PATCH] [mips][TurboProp] Avoid marking the output of a call live in its catch handler 2020}	{ [PATCH] [TurboProp] Avoid marking the output of a call live in its catch handler 2020}	
{ [PATCH] PPC/s390: [cleanup] Various misc. cleanups 2020}	{ [PATCH] [cleanup] Various misc. cleanups 2020}	
{ [PATCH] s390: [wasm-simd] Remove some I64x2 instructions not in proposal 2020}	{ [PATCH] [wasm-simd] Remove some I64x2 instructions not in proposal 2020}	
{ [PATCH] [mips64] Fix implicit conversion loses integer precision warning 2020}	{ [PATCH] Fix implicit conversion loses integer precision warning 2020}	
{ [PATCH] PPC/s390: [wasm][liftoff] Emit safepoints for externref values on the stack 2020}	{ [PATCH] [wasm][liftoff] Emit safepoints for externref values on the stack 2020}	
{ [PATCH] s390: Check for zero-extended phi inputs during instruction selection 2020}	{ [PATCH] Check for zero-extended phi inputs during instruction selection 2020}	
{ [PATCH] PPC/s390: [wasm][arm][arm64][liftoff] Allow loads from negative indices 2020}	{ [PATCH] [wasm][arm][arm64][liftoff] Allow loads from negative indices 2020}	
{ [PATCH] [wasm-simd][liftoff][ia32] Optimize shuffles (swizzles) 2020}	{ [PATCH] [wasm-simd][liftoff][x64] Optimize shuffles (swizzles) 2020}	
{ [PATCH] PPC/s390: [liftoff][tail-call] Add indirect tail calls 2020}	{ [PATCH] [liftoff][tail-call] Add indirect tail calls 2020}	
{ [PATCH] [turbofan][wasm][arm] Improved saturated conversions float32 to int32. 2020}	{ [PATCH] [turbofan][wasm][arm64] Improved saturated conversions float32 to int32. 2020}	
{ [PATCH] PPC/s390: [wasm][liftoff] Add direct tail-calls 2020}	{ [PATCH] [wasm][liftoff] Add direct tail-calls 2020}	
{ [PATCH] [mips][wasm-simd][liftoff] Implement v128.const 2020}	{ [PATCH] [wasm-simd][liftoff] Implement v128.const 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement subset of v128.const 2020}	{ [PATCH] [wasm-simd][liftoff] Implement subset of v128.const 2020}	
{ [PATCH] [wasm-simd] Implement v128.const for arm 2020}	{ [PATCH] [wasm-simd] Implement v128.const for ia32 2020}	
{ [PATCH] [wasm-simd][liftoff][arm] Implement s8x16shuffle 2020}	{ [PATCH] [wasm-simd][liftoff][arm64] Implement s8x16shuffle 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement S8x16Shuffle on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement S8x16Shuffle on x64 and ia32 2020}	
{ [PATCH] PPC/s390: Reland "[wasm-simd][liftoff][ia32][x64] Implement bitmask" 2020}	{ [PATCH] Reland "[wasm-simd][liftoff][ia32][x64] Implement bitmask" 2020}	
{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement bitmask 2020}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement bitmask 2020}	
{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement load splat 2020}	{ [PATCH] [wasm-simd][liftoff][ia32][x64] Implement load splat 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement s8x16.swizzle 2020}	{ [PATCH] [wasm-simd][liftoff] Implement s8x16.swizzle 2020}	
{ [PATCH] PPC/s390: [wasm-simd] [liftoff] Implement int-float/float-int conversion on x64 and ia32 2020}	{ [PATCH] [wasm-simd] [liftoff] Implement int-float/float-int conversion on x64 and ia32 2020}	
{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement load extends 2020}	{ [PATCH] [wasm-simd][liftoff][x64][ia32] Implement load extend 2020}	
{ [PATCH] PPC/s390: Reland "[wasm-simd][liftoff][x64][ia32] Implement load extend" 2020}	{ [PATCH] Reland "[wasm-simd][liftoff][x64][ia32] Implement load extend" 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement i16x8 shr 2020}	{ [PATCH] [wasm-simd][liftoff] Implement i16x8 shr 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement i32x4 shr_s shr_u 2020}	{ [PATCH] [wasm-simd][liftoff] Implement i32x4 shr_s shr_u 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement shl on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement shl on x64 and ia32 2020}	
{ [PATCH] [mips][liftoff][mv] Support multi-value calls 2020}	{ [PATCH] [liftoff][mv] Support multi-value calls 2020}	
{ [PATCH] PPC: [wasm-simd] Implement simd FP Splat 2020}	{ [PATCH] PPC: [wasm-simd] Implement simd Splat 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement gt on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement gt on x64 and ia32 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement ge of i8x16, i16x8 and i32x4 on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement ge of i8x16, i16x8 and i32x4 on x64 and ia32 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement lt, le, gt, ge of f32x4 and f64x2 on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement lt, le, gt, ge of f32x4 and f64x2 on x64 and ia32 2020}	
{ [PATCH] [wasm][liftoff][arm] Implement 32-bit atomic binops 2020}	{ [PATCH] [wasm][liftoff][arm] Implement 64-bit atomic binops 2020}	
{ [PATCH] PPC/s390: [wasm-simd] [liftoff] Implement fp min/max on ia32 and x64 2020}	{ [PATCH] [wasm-simd] [liftoff] Implement fp min/max on ia32 and x64 2020}	
{ [PATCH] PPC/s390: [wasm-simd] [liftoff] Implement integer widening on x64 and ia32 2020}	{ [PATCH] [wasm-simd] [liftoff] Implement integer widening on x64 and ia32 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement integer narrowing on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement integer narrowing on x64 and ia32 2020}	
{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement eq 2020}	{ [PATCH] [wasm-simd][liftoff][arm][arm64] Implement neg 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement abs on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement abs on x64 and ia32 2020}	
{ [PATCH] PPC/s390: [wasm-simd] [liftoff] Implement rounding average on x64 and ia32 2020}	{ [PATCH] [wasm-simd] [liftoff] Implement rounding average on x64 and ia32 2020}	
{ [PATCH] [mips][wasm-simd][liftoff] Reorder SIMD opcodes 2020}	{ [PATCH] [wasm-simd][liftoff] Reorder SIMD opcodes 2020}	
{ [PATCH] [liftoff][wasm-simd][arm][arm64] Implement max 2020}	{ [PATCH] [liftoff][wasm-simd][arm][arm64] Implement min 2020}	
{ [PATCH] [mips][wasm-simd][liftoff] Implement max of i8x16, i16x8, i32x4 2020}	{ [PATCH] [mips][wasm-simd][liftoff] Implement min of i8x16, i16x8, i32x4 2020}	
{ [PATCH] cppgc: Conservative stack scanning for arm64 2020}	{ [PATCH] cppgc: Conservative stack scanning for arm32 2020}	
{ [PATCH] [mips][liftoff] Remove lambdas for binops with immediate 2020}	{ [PATCH] [liftoff] Remove lambdas for binops with immediate 2020}	
{ [PATCH] PPC/s390: [wasm-simd] [liftoff] Implement add_saturate on ia32 and x64 2020}	{ [PATCH] [wasm-simd] [liftoff] Implement add_saturate on ia32 and x64 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement mul on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement mul on x64 and ia32 2020}	
{ [PATCH] [wasm-simd][x64] Add AVX codegen 2020}	{ [PATCH] [wasm-simd][x64] Add AVX codegen 2020}	
{ [PATCH] PPC/s390: [wasm-simd] [liftoff] Implement replace_lane on x64 and ia32 2020}	{ [PATCH] [wasm-simd] [liftoff] Implement replace_lane on x64 and ia32 2020}	
{ [PATCH] [wasm-simd][x64] Optimize codegen when shift is constant 2020}	{ [PATCH] [wasm-simd][ia32] Optimize codegen when shift is constant 2020}	
{ [PATCH] PPC/s390: [wasm-simd] [liftoff] Implement sub on x64 and ia32 2020}	{ [PATCH] [wasm-simd] [liftoff] Implement sub on x64 and ia32 2020}	
{ [PATCH] PPC/s390: [wasm-simd] [liftoff] Implement extract_lane on x64 and ia32 2020}	{ [PATCH] [wasm-simd] [liftoff] Implement extract_lane on x64 and ia32 2020}	
{ [PATCH] PPC/s390: [wasm-simd] [liftoff] Implement add for f64x2, i64x2, i8x16 on X64 and IA32 2020}	{ [PATCH] [wasm-simd] [liftoff] Implement add for f64x2, i64x2, i8x16 on X64 and IA32 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement add for i32x4, i16x8, f32x4 on X64 and IA32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement add for i32x4, i16x8, f32x4 on X64 and IA32 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement splat for i64x2, f64x2, i8x16 on x64 and ia32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement splat for i64x2, f64x2, i8x16 on x64 and ia32 2020}	
{ [PATCH] PPC/s390: [wasm] Save FP & PC when calling C functions 2020}	{ [PATCH] [wasm] Save FP & PC when calling C functions 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement i16x8.splat on X64 and IA32 2020}	{ [PATCH] [wasm-simd][liftoff] Implement i16x8.splat on X64 and IA32 2020}	
{ [PATCH] PPC/s390: [simulator] Add a new command to the debugger to dump memory. 2020}	{ [PATCH] [simulator] Add a new command to the debugger to dump memory. 2020}	
{ [PATCH] PPC: [codegen][cleanup] Unify assembler's support for DebugBreak(). 2020}	{ [PATCH] [codegen][cleanup] Unify assembler's support for DebugBreak(). 2020}	
{ [PATCH] PPC/s390: [arm32] Fix breakpoints in simulator/debugger 2020}	{ [PATCH] [arm32] Fix breakpoints in simulator/debugger 2020}	
{ [PATCH] PPC/s390: [wasm-simd][liftoff] Implement i32x4.splat 2020}	{ [PATCH] [wasm-simd][liftoff] Implement i32x4.splat 2020}	
{ [PATCH] PPC/s390: Reland "[liftoff][wasm-simd] Implement f32x4.splat" 2020}	{ [PATCH] Reland "[liftoff][wasm-simd] Implement f32x4.splat" 2020}	
{ [PATCH] [codegen][arm64] Use ldp instead of 2 ldrs before a TailCall 2020}	{ [PATCH] [codegen] Use ldm instead of 2 ldrs before a TailCall 2020}	
{ [PATCH] PPC/s390: [wasm-simd] Implement i64x2.mul on arm 2020}	{ [PATCH] [wasm-simd] Implement i64x2.mul on arm 2020}	
{ [PATCH] PPC/s390: [wasm] Implement atomic load and store in Liftoff on x64 2020}	{ [PATCH] [wasm] Implement atomic load and store in Liftoff on x64 2020}	
{ [PATCH] PPC/s390: [wasm-simd] Implement load extend with 4 and 8 lanes on IA32 2020}	{ [PATCH] [wasm-simd] Implement load extend with 4 and 8 lanes on IA32 2020}	
{ [PATCH] PPC/s390: [arm][arm64] Use signed extract lane. 2019}	{ [PATCH] [arm][arm64] Use signed extract lane. 2019}	
{ [PATCH] [wasm-simd] Force shuffle32x4 to use register for src0 2019}	{ [PATCH] [wasm-simd] Force shuffle32x4 to use register for src1 2019}	
{ [PATCH] PPC/s390: [wasm-simd] Implement i64x2 shifts for arm 2019}	{ [PATCH] [wasm-simd] Implement i64x2 shifts for arm 2019}	
{ [PATCH] PPC/s390: [wasm-simd] Implement i64x2 add sub for arm 2019}	{ [PATCH] [wasm-simd] Implement i64x2 add sub for arm 2019}	
{ [PATCH] PPC/s390: [cleanup][ptr-compr] Remove Decompressed Signed/Any register to register 2019}	{ [PATCH] [cleanup][ptr-compr] Remove Decompressed Signed/Any register to register 2019}	
{ [PATCH] PPC/s390: [wasm-simd] Implement i64x2 neg for arm 2019}	{ [PATCH] [wasm-simd] Implement i64x2 neg for arm 2019}	
{ [PATCH] PPC/s390: [ptr-compr] Remove Compressed mentions from in the pipeline 2019}	{ [PATCH] [ptr-compr] Remove Compressed mentions from in the pipeline 2019}	
{ [PATCH] PPC/s390: [wasm-simd] Implement f64x2 comparisons for arm 2019}	{ [PATCH] [wasm-simd] Implement f64x2 comparisons for arm 2019}	
{ [PATCH] PPC/s390: Reland: [builtins] Move non-JS linkage builtins code objects into RO_SPACE 2019}	{ [PATCH] Reland: [builtins] Move non-JS linkage builtins code objects into RO_SPACE 2019}	
{ [PATCH] PPC/s390: [Liftoff] Remove unused return value 2019}	{ [PATCH] [Liftoff] Remove unused return value 2019}	
{ [PATCH] Create a macro list for X-sd instructions 2019}	{ [PATCH] Create a macro list for X-ss instructions 2019}	
{ [PATCH] [wasm-simd] Add AVX codegen for some x64 instructions 2019}	{ [PATCH] [wasm-simd] Add AVX codegen for some instructions 2019}	
{ [PATCH] PPC/s390: [Liftoff] Fix stack slot initialization on arm and arm64 2019}	{ [PATCH] [Liftoff] Fix stack slot initialization on arm and arm64 2019}	
{ [PATCH] [cleanup] Change scratch to temp simd register 2019}	{ [PATCH] [cleanup] Change scratch to temp simd register 2019}	
{ [PATCH] [ia32][builtins] Hoist up common load bytecode code 2019}	{ [PATCH] [builtins] Hoist up common load bytecode code 2019}	
{ [PATCH] PPC/s390: [builtins] Tweak optimized check in InterpreterEntryTrampoline 2019}	{ [PATCH] [builtins] Tweak optimized check in InterpreterEntryTrampoline 2019}	
{ [PATCH] PPC/s390: [builtins] Reordered optimised code path in InterpreterEntryTrampoline 2019}	{ [PATCH] [builtins] Reordered optimised code path in InterpreterEntryTrampoline 2019}	
{ [PATCH] PPC/s390: [codegen][arm] Better load of receiver in CheckDebugHook 2019}	{ [PATCH] [codegen][arm] Better load of receiver in CheckDebugHook 2019}	
{ [PATCH] PPC/s390: [cpu-profiler] Fix stack iterability during deopt (arm port) 2019}	{ [PATCH] [cpu-profiler] Fix stack iterability during deopt (arm port) 2019}	
{ [PATCH] [wasm-simd] Implement f32x4.sqrt for arm 2019}	{ [PATCH] [wasm-simd] Implement f32x4.sqrt for ia32 2019}	
{ [PATCH] PPC/s390: [buitlins] Remove unneeded branch in Generate_Call 2019}	{ [PATCH] [buitlins] Remove unneeded branch in Generate_Call 2019}	
{ [PATCH] [ptr-compr][arm64] Preparing for using smi-corrupting decompression 2019}	{ [PATCH] [ptr-compr][x64] Preparing for using smi-corrupting decompression 2019}	
{ [PATCH] Reland^2 "Remove all custom CopyCharsUnsigned implementations" 2019}	{ [PATCH] Reland "Remove all custom CopyCharsUnsigned implementations" 2019}	
{ [PATCH] [mips][heap] Remove dynamic allocation flag on NewNumber functions 2019}	{ [PATCH] [Heap]: Remove dynamic allocation flag on NewNumber functions. 2019}	
{ [PATCH] [wasm-simd] Implement f32x4.sqrt f64x2.sqrt for arm64 2019}	{ [PATCH] [wasm-simd] Implement f32x4.sqrt f64x2.sqrt for x64 2019}	
{ [PATCH] PPC/s390: [wasm-c-api] Add tests and fixes 2019}	{ [PATCH] PPC: [wasm-c-api] Add tests and fixes 2019}	
{ [PATCH] PPC/s390: [wasm-simd] F32x4Div for ia32 x64 arm arm64 2019}	{ [PATCH] [wasm-simd] F32x4Div for ia32 x64 arm arm64 2019}	
{ [PATCH] [wasm-simd] Implement F64x2 min max for arm64 2019}	{ [PATCH] [wasm-simd] Implement F64x2 min max for x64 2019}	
{ [PATCH] Implement F64x2Div for x64 2019}	{ [PATCH] Implement F64x2Div for x64 2019}	
{ [PATCH] PPC/s390: [roots] Remove pseudo-smi stack limit roots 2019}	{ [PATCH] [roots] Remove pseudo-smi stack limit roots 2019}	
{ [PATCH] PPC/s390: [compiler] Remove LoadStackPointer and related machinery 2019}	{ [PATCH] [compiler] Remove LoadStackPointer and related machinery 2019}	
{ [PATCH] PPC/s390: [compiler] Refactor stack check handling 2019}	{ [PATCH] [compiler] Refactor stack check handling 2019}	
{ [PATCH] Reland "[wasm] Compile JS to WASM wrappers asynchronously" 2019}	{ [PATCH] Reland "[wasm] Compile JS to WASM wrappers asynchronously" 2019}	
{ [PATCH] [s390] Port native routines to use UseScratchRegisterScope 2019}	{ [PATCH] [ppc] Port native routines to use UseScratchRegisterScope 2019}	
{ [PATCH] Revert "s390: cleanup TM family instructions" 2019}	{ [PATCH] Revert "s390: cleanup TM family instructions" 2019}	
{ [PATCH] [mips][wasm] Fix non-const references in Liftoff. 2019}	{ [PATCH] [wasm] Fix non-const references in Liftoff 2019}	
{ [PATCH] [mips64][codegen] Remove dead argument to Assember::stop 2019}	{ [PATCH] [codegen] Remove dead argument to Assembler::stop 2019}	
{ [PATCH] [cleanup] Fix NOLINT(runtime/references) for MIPS simulator. 2019}	{ [PATCH] [cleanup] Fix NOLINT(runtime/references) for MIPS64 simulator. 2019}	
{ [PATCH] [wasm simd] Implement F64x2Splat on x64 2019}	{ [PATCH] [wasm simd] Implement I64x2Splat on x64 2019}	
{ [PATCH] [mips][lite] Allocate FeedbackCell arrays for create closures in lite mode 2019}	{ [PATCH] PPC/s390: [lite] Allocate FeedbackCell arrays for create closures in lite mode 2019}	
{ [PATCH] PPC/s390: [Liftoff] Add histogram for bailout reasons 2019}	{ [PATCH] [Liftoff] Add histogram for bailout reasons 2019}	
{ [PATCH] [mips][wasm-c-api] New call descriptor and stackframe kind. 2019}	{ [PATCH] [wasm-c-api] New call descriptor and stackframe kind 2019}	
{ [PATCH] PPC/s390: [wasm-c-api] Add tests and fixes 2019}	{ [PATCH] [wasm-c-api] Add tests and fixes 2019}	
{ [PATCH] [mips][cleanup] Drop some dead MacroAssembler code 2019}	{ [PATCH] [cleanup] Drop some dead (Macro)Assembler code 2019}	
{ [PATCH] Reland "[ptr-compr][turbofan] Calling the non-compressed Tagged loads and stores" 2019}	{ [PATCH] Revert "[ptr-compr][turbofan] Calling the non-compressed Tagged loads and stores" 2019}	
{ [PATCH] PPC/s390: [builtins] Check for stack overflow in JSConstructStub 2019}	{ [PATCH] [builtins] Check for stack overflow in JSConstructStub 2019}	
{ [PATCH] [mips][ptr-compr] New RelocInfo for compressed pointers. 2019}	{ [PATCH] [ptr-compr] New RelocInfo for compressed pointers. 2019}	
{ [PATCH] PPC/s390: [cleanup] Use Vector::begin instead of Vector::start 2019}	{ [PATCH] [cleanup] Use Vector::begin instead of Vector::start 2019}	
{ [PATCH] Reland "PPC/S390: [heap] Clean-up keys of oldspace weakmaps during scavenge" 2019}	{ [PATCH] Reland "[heap] Clean-up keys of oldspace weakmaps during scavenge" 2019}	
{ [PATCH] PPC/S390: [lite] Allocate feedback vectors lazily 2019}	{ [PATCH] [lite] Allocate feedback vectors lazily 2019}	
{ [PATCH] Revert "PPC/S390: [heap] Clean-up keys of oldspace weakmaps during scavenge" 2019}	{ [PATCH] Revert "[heap] Clean-up keys of oldspace weakmaps during scavenge" 2019}	
{ [PATCH] [ptr-compr][arm64] Add a switch for branchless/branchful decompression 2019}	{ [PATCH] [ptr-compr] Add a switch for branchless/branchful decompression 2019}	
{ [PATCH] PPC/s390: [masm] make LoadCodeObjectEntry compatible with duplicated IET 2019}	{ [PATCH] [masm] make LoadCodeObjectEntry compatible with duplicated IET 2019}	
{ [PATCH] PPC/s390: [objects] Free one bit in the SharedFunctionInfo::flags. 2019}	{ [PATCH] [objects] Free one bit in the SharedFunctionInfo::flags. 2019}	
{ [PATCH] PPC/s390: [wasm] Stack checks should not call runtime functions but stubs 2019}	{ [PATCH] [wasm] Stack checks should not call runtime functions but stubs 2019}	
{ [PATCH] PPC/s390: [cleanup] Remove obsolete representations. 2019}	{ [PATCH] [cleanup] Remove obsolete representations. 2019}	
{ [PATCH] [ptr-compr][arm64] Change compression scheme to zero upper 32-bits 2019}	{ [PATCH] [ptr-compr][x64] Change compression scheme to zero upper 32-bits 2019}	
{ [PATCH] [ptr-compr][arm64] TurboFan support for compressing stores 2019}	{ [PATCH] [ptr-compr][x64] TurboFan support for compressing stores 2019}	
{ [PATCH] PPC/s390: DISALLOW_IMPLICIT_CONSTRUCTORS for MacroAssembler 2019}	{ [PATCH] DISALLOW_IMPLICIT_CONSTRUCTORS for MacroAssembler 2019}	
{ [PATCH] Reland^2 "[builtins] [turbofan] Refactor Float64Pow to use single implementation" 2019}	{ [PATCH] Reland "[builtins] [turbofan] Refactor Float64Pow to use single implementation" 2019}	
{ [PATCH] [cleanup][x32] Remove x32 leftovers from x64 assembler, pt.2 2019}	{ [PATCH] [cleanup][x32] Remove x32 leftovers from x64 assembler, pt.1 2019}	
{ [PATCH] PPC/s390: Explicitly store the code layout in CodeDesc 2019}	{ [PATCH] Explicitly store the code layout in CodeDesc 2019}	
{ [PATCH] PPC/s390: [test] Refactor AllocateAssemblerBuffer 2019}	{ [PATCH] [test] Refactor AllocateAssemblerBuffer 2019}	
{ [PATCH] PPC/s390: [assembler] Remove legacy constructor 2019}	{ [PATCH] [assembler] Remove legacy constructor 2019}	
{ [PATCH] PPC/s390: Support non-default MicrotaskQueue on RunMicrotasks builtin 2019}	{ [PATCH] Support non-default MicrotaskQueue on RunMicrotasks builtin 2019}	
{ [PATCH] PPC/s390: Use forwarding constructors for MacroAssembler 2019}	{ [PATCH] Use forwarding constructors for MacroAssembler 2019}	
{ [PATCH] PPC/s390: [assembler] Allow to pass custom buffer implementations 2019}	{ [PATCH] [assembler] Allow to pass custom buffer implementations 2019}	
{ [PATCH] PPC/s390: [Deopt] Remove jump table in prologue of deopt entries. 2019}	{ [PATCH] [Deopt] Remove jump table in prologue of deopt entries. 2019}	
{ [PATCH] PPC/s390: [nojit] Skip the on-heap trampoline for builtin calls 2019}	{ [PATCH] [nojit] Skip the on-heap trampoline for builtin calls 2018}	
{ [PATCH] PPC/s390: [ubsan] Use Address parameters for calling generated code 2019}	{ [PATCH] [ubsan] Use Address parameters for calling generated code 2018}	
{ [PATCH] PPC/s390: Don't embed CompileLazyDeoptimizedCode 2019}	{ [PATCH] Don't embed CompileLazyDeoptimizedCode 2018}	
{ [PATCH] PPC/s390: [ubsan] Let Runtime functions return a plain Address 2019}	{ [PATCH] [ubsan] Let Runtime functions return a plain Address 2018}	
{ [PATCH] PPC/s390: [nojit] Change builtin pointers to use Smis underneath 2019}	{ [PATCH] [nojit] Change builtin pointers to use Smis underneath 2018}	
{ [PATCH] PPC/s390: [nojit] Add a kCallBuiltinPointer call kind 2019}	{ [PATCH] [nojit] Add a kCallBuiltinPointer call kind 2018}	
{ [PATCH] [Liftoff][mips] Clean up "half stack slot" accesses 2018}	{ [PATCH] [Liftoff][ia32] Clean up "half stack slot" accesses 2018}	
{ [PATCH] PPC/s390: [builtins] Remove InternalArray and reduce InternalPackedArray constructors. 2019}	{ [PATCH] [builtins] Remove InternalArray and reduce InternalPackedArray constructors. 2018}	
{ [PATCH] Reland "Reland "Reland "[code-comments] Put code comments into the code object""" 2018}	{ [PATCH] Revert "Reland "Reland "[code-comments] Put code comments into the code object""" 2018}	
{ [PATCH] PPC/s390: [nojit] Consistently use DCHECKs in CallApi helper 2018}	{ [PATCH] [nojit] Consistently use DCHECKs in CallApi helper 2018}	
{ [PATCH] PPC/s390: [nojit] Migrate DirectCEntryStub to a builtin 2018}	{ [PATCH] [nojit] Migrate DirectCEntryStub to a builtin 2018}	
{ [PATCH] PPC/s390: [nojit] Migrate CallApi stubs to builtins 2018}	{ [PATCH] [nojit] Migrate CallApi stubs to builtins 2018}	
{ [PATCH] PPC/s390: [nojit] Refactor CallApiCallback calling convention 2018}	{ [PATCH] [nojit] Refactor CallApiCallback calling convention 2018}	
{ [PATCH] [liftoff][arm] Implement i64 functionality 2018}	{ [PATCH] [liftoff][arm] Implement f64 functionality 2018}	
{ [PATCH] PPC/s390: Print readable register names 2018}	{ [PATCH] Print readable register names 2018}	
{ [PATCH] PPC/s390: [iwyu] Remove assembler.h -> register-configuration.h 2018}	{ [PATCH] [iwyu] Remove assembler.h -> register-configuration.h 2018}	
{ [PATCH] PPC/s390: [iwyu] Remove interface-descriptors.h -> macro-assembler.h 2018}	{ [PATCH] [iwyu] Remove interface-descriptors.h -> macro-assembler.h 2018}	
{ [PATCH] PPC/s390: [iwyu] Ensure that macro assembler includes happen correctly 2018}	{ [PATCH] [iwyu] Ensure that macro assembler includes happen correctly 2018}	
{ [PATCH] s390: [nojit] Embed InterpreterEntryTrampoline 2018}	{ [PATCH] [nojit] Embed InterpreterEntryTrampoline 2018}	
{ [PATCH] PPC/s390: [heap] Removed unused slow object lookup functions. 2018}	{ [PATCH] [heap] Removed unused slow object lookup functions. 2018}	
{ [PATCH] MIPS[64]: Fix build failure. 2018}	{ [PATCH] MIPS[64]: Fix build failure. 2018}	
{ [PATCH] PPC/s390: [iwyu] Remove include heap-inl.h -> counters.h 2018}	{ [PATCH] [iwyu] Remove include heap-inl.h -> counters.h 2018}	
{ [PATCH] PPC/s390: [ubsan] Port Code to the new design 2018}	{ [PATCH] [ubsan] Port Code to the new design 2018}	
{ [PATCH] PPC/s390: Reland "[wasm-simd] Implement remaining I8x16 SIMD ops on x64" 2018}	{ [PATCH] Reland "[wasm-simd] Implement remaining I8x16 SIMD ops on x64" 2018}	
{ [PATCH] PPC/s390: [ubsan] Port Smi to the new design 2018}	{ [PATCH] [ubsan] Port Smi to the new design 2018}	
{ [PATCH] PPC/s390: [turbofan] Add support for huge DataViews. 2018}	{ [PATCH] [turbofan] Add support for huge DataViews. 2018}	
{ [PATCH] PPC/s390: [wasm] Support encoding reference types in exceptions. 2018}	{ [PATCH] [wasm] Support encoding reference types in exceptions. 2018}	
{ [PATCH] PPC/s390: [async] Introduce dedicated JSAsyncFunctionObject. 2018}	{ [PATCH] [async] Introduce dedicated JSAsyncFunctionObject. 2018}	
{ [PATCH] s390x: [wasm] Use a tuple as the instance for JS imports 2018}	{ [PATCH] [wasm] Use a tuple as the instance for JS imports 2018}	
{ [PATCH] s390x: [wasm] Use a name for the lazy compile func index 2018}	{ [PATCH] [wasm] Use a name for the lazy compile func index 2018}	
{ [PATCH] PPC/s390: [turbofan] Remove branch_load_poisoning flag. 2018}	{ [PATCH] [turbofan] Remove branch_load_poisoning flag. 2018}	
{ [PATCH] [ppc] Implemented Atomic64 operations 2018}	{ [PATCH] s390: Implemented Atomic64 operations 2018}	
{ [PATCH] PPC/s390: [turbofan] Implement constant folding of string concatenations 2018}	{ [PATCH] [turbofan] Implement constant folding of string concatenations 2018}	
{ [PATCH] PPC/s390: [turbofan] Initial support to compute NumberAdd/NumberSubtract in Word64. 2018}	{ [PATCH] [turbofan] Initial support to compute NumberAdd/NumberSubtract in Word64. 2018}	
{ [PATCH] PPC/s390: [turbofan] Initial Word64 support in representation selection. 2018}	{ [PATCH] [turbofan] Initial Word64 support in representation selection. 2018}	
{ [PATCH] Reland^2 "[Liftoff] Implement f32.copysign and f64.copysign" 2018}	{ [PATCH] Reland "[Liftoff] Implement f32.copysign and f64.copysign" 2018}	
{ [PATCH] s390: [wasm] Support 4GiB memories in Liftoff 2018}	{ [PATCH] [wasm] Support 4GiB memories in Liftoff 2018}	
{ [PATCH] PPC/s390: Reland "[turboassembler] Introduce hard-abort mode" 2018}	{ [PATCH] Reland "[turboassembler] Introduce hard-abort mode" 2018}	
{ [PATCH] PPC/s390: [wasm] Fix explicit stack check to be Isolate independent. 2018}	{ [PATCH] [wasm] Fix explicit stack check to be Isolate independent. 2018}	
{ [PATCH] PPC/s390: [turbofan] Remove remnants of deferred frame building. 2018}	{ [PATCH] [turbofan] Remove remnants of deferred frame building. 2018}	
{ [PATCH] PPC/s390: Fix overzealous assert in CallOrConstructVarArgs 2018}	{ [PATCH] Fix overzealous assert in CallOrConstructVarArgs 2018}	
{ [PATCH] PPC: [turbofan] Change way OFF_HEAP_TARGET reloc info is omitted 2018}	{ [PATCH] [turbofan] Change way OFF_HEAP_TARGET reloc info is omitted 2018}	
{ [PATCH] PPC/s390: [turbofan] replace linear lookup switches with binary search 2018}	{ [PATCH] [turbofan] replace linear lookup switches with binary search 2018}	
{ [PATCH] PPC/s390: [wasm] Introduce jump table 2018}	{ [PATCH] [wasm] Introduce jump table 2018}	
{ [PATCH] s390: [assembler] Factor up list of heap allocation requests 2018}	{ [PATCH] [assembler] Factor up list of heap allocation requests 2018}	
{ [PATCH] PPC/s390: [wasm] Use the modules runtime stub for {DoubleToI}. 2018}	{ [PATCH] [wasm] Use the modules runtime stub for {DoubleToI}. 2018}	
{ [PATCH] PPC/s390: Remove CodeAssembler::LookupExternalReference 2018}	{ [PATCH] Remove CodeAssembler::LookupExternalReference 2018}	
{ [PATCH] PPC/s390: [masm] Shortcut some indirect external reference loads 2018}	{ [PATCH] [masm] Shortcut some indirect external reference loads 2018}	
{ [PATCH] PPC/s390: [tasm] Add platform-independent base class TurboAssemblerBase 2018}	{ [PATCH] [tasm] Add platform-independent base class TurboAssemblerBase 2018}	
{ [PATCH] [instruction-scheduler][mips] Implement instruction-scheduler for mips64 2018}	{ [PATCH] [instruction-scheduler][mips] Implement instruction-scheduler on mips 2018}	
{ [PATCH] PPC/s390: [builtins] Move builtins table to the Heap class 2018}	{ [PATCH] [builtins] Move builtins table to the Heap class 2018}	
{ [PATCH] PPC/s390: [wasm] Make stack check independent of the Isolate. 2018}	{ [PATCH] [wasm] Make stack check independent of the Isolate. 2018}	
{ [PATCH] PPC/s390: [sfi] Compress function arg counts to 16 bit 2018}	{ [PATCH] [sfi] Compress function arg counts to 16 bit 2018}	
{ [PATCH] PPC/s390: [masm] Don't push CodeObject when entering INTERNAL frames 2018}	{ [PATCH] [masm] Don't push CodeObject when entering INTERNAL frames 2018}	
{ [PATCH] PPC/s390: [wasm] Introduce specialized WasmCompileLazy frame type. 2018}	{ [PATCH] [wasm] Introduce specialized WasmCompileLazy frame type. 2018}	
{ [PATCH] PPC/s390: [stubs] Route all ArrayConstructor stub accesses through CodeFactory 2018}	{ [PATCH] [stubs] Route all ArrayConstructor stub accesses through CodeFactory 2018}	
{ [PATCH] PPC/s390: [stubs] General stub cleanup (includes & platform-independent code) 2018}	{ [PATCH] [stubs] General stub cleanup (includes & platform-independent code) 2018}	
{ [PATCH] PPC/s390: [stubs] Remove TransitionElementsKindStub 2018}	{ [PATCH] [stubs] Remove TransitionElementsKindStub 2018}	
{ [PATCH] PPC/s390: [builtins] Move InternalArrayConstructorStub to builtin 2018}	{ [PATCH] [builtins] Move InternalArrayConstructorStub to builtin 2018}	
{ [PATCH] PPC/s390: [builtins] Move ArrayConstructorStub to builtin 2018}	{ [PATCH] [builtins] Move ArrayConstructorStub to builtin 2018}	
{ [PATCH] PPC/s390: [builtins] Move ArrayNArgumentsConstructorStub to builtin 2018}	{ [PATCH] [builtins] Move ArrayNArgumentsConstructorStub to builtin 2018}	
{ [PATCH] PPC/s390: [builtins] Move CallApiGetter and CallApiCallback stubs to builtins 2018}	{ [PATCH] [builtins] Move CallApiGetter and CallApiCallback stubs to builtins 2018}	
{ [PATCH] PPC/s390: [builtins] Inline the off-heap trampoline at callsites 2018}	{ [PATCH] [builtins] Inline the off-heap trampoline at callsites 2018}	
{ [PATCH] PPC/s390: [generators] Store parameters in the generator object. 2018}	{ [PATCH] [generators] Store parameters in the generator object. 2018}	
{ [PATCH] s390: Remove experiment for restricting constructor return values 2018}	{ [PATCH] Remove experiment for restricting constructor return values 2018}	
{ [PATCH] PPC/s390: [arm] Match LoadStackPointer with comparison. 2018}	{ [PATCH] [arm] Match LoadStackPointer with comparison. 2018}	
{ [PATCH] PPC/s390: [builtins] Convert CEntry/GetProperty/StringAdd stubs to builtins 2018}	{ [PATCH] [builtins] Convert CEntry/GetProperty/StringAdd stubs to builtins 2018}	
{ [PATCH] PPC/s390: [builtins] Update isolate-independent list & related fixups 2018}	{ [PATCH] [builtins] Update isolate-independent list & related fixups 2018}	
{ [PATCH] PPC/s390: [interpreter] correctly advance over debug scaling prefixes. 2018}	{ [PATCH] [interpreter] correctly advance over debug scaling prefixes. 2018}	
{ [PATCH] PPC/s390: Reland: [builtins] Patch self-references in constants table 2018}	{ [PATCH] Reland: [builtins] Patch self-references in constants table 2018}	
{ [PATCH] PPC/s390: [objects.h splitting] Move classes related to api callbacks. 2018}	{ [PATCH] [objects.h splitting] Move classes related to api callbacks. 2018}	
{ [PATCH] [Liftoff][mips] Implement f32/f64 to i32/u32 conversion 2018}	{ [PATCH] [Liftoff] Implement f32/f64 to i32/u32 conversions 2018}	
{ [PATCH] PPC/s390: [ubsan] Change Address typedef to uintptr_t 2018}	{ [PATCH] [ubsan] Change Address typedef to uintptr_t 2018}	
{ [PATCH] PPC/s390: [stubs] Convert DoubleToIStub and MathPowStub to builtins 2018}	{ [PATCH] [stubs] Convert DoubleToIStub and MathPowStub to builtins 2018}	
{ [PATCH] PPC/s390: [stubs] Remove return register argument from DoubleToIStub 2018}	{ [PATCH] [stubs] Remove return register argument from DoubleToIStub 2018}	
{ [PATCH] PPC/s390: [debug] allow calls to some builtins on temporary objects 2018}	{ [PATCH] [debug] allow calls to some builtins on temporary objects 2018}	
{ [PATCH] PPC/s390: interpreter: make interpreted frames distinguishable in the native stack 2018}	{ [PATCH] interpreter: make interpreted frames distinguishable in the native stack 2018}	
{ [PATCH] PPC/s390: [Liftoff] Implement 64-bit bitwise operations 2018}	{ [PATCH] [Liftoff] Implement 64-bit bitwise operations 2018}	
{ [PATCH] PPC/s390: Reland "[runtime] Remove the construct_stub field of the SFI" 2018}	{ [PATCH] Reland "[runtime] Remove the construct_stub field of the SFI" 2018}	
{ [PATCH] PPC/s390: Reland "[debug] introduced runtime side effect check" 2018}	{ [PATCH] Reland "[debug] introduced runtime side effect check" 2018}	
{ [PATCH] PPC/s390: [ia32][wasm] Add F32x4 RecipApprox/RecipSqrtApprox. 2018}	{ [PATCH] [ia32][wasm] Add F32x4 RecipApprox/RecipSqrtApprox. 2018}	
{ [PATCH] PPC: [turbofan] unify interpreter and JIT speculation poisoning 2018}	{ [PATCH] [turbofan] unify interpreter and JIT speculation poisoning 2018}	
{ [PATCH] PPC/s390: [runtime] Don't set ConstructedNonConstructable as a construct_stub 2018}	{ [PATCH] [runtime] Don't set ConstructedNonConstructable as a construct_stub 2018}	
{ [PATCH] s390: [heap] Pass isolate to the OOM handler and add an OOM test. 2018}	{ [PATCH] [heap] Pass isolate to the OOM handler and add an OOM test. 2018}	
{ [PATCH] [turbofan] Masking/poisoning in codegen (optimized code, mips & mips64) 2018}	{ [PATCH] [turbofan] Masking/poisoning in codegen (optimized code, mips & mips64) 2018}	
{ [PATCH] PPC/s390: [TurboFan] Use the FlagsContinuation more effectively 2018}	{ [PATCH] [TurboFan] Use the FlagsContinuation more effectively 2018}	
{ [PATCH] [Liftoff] Implement i32/i64 to f64 conversions 2018}	{ [PATCH] [Liftoff] Implement i32/i64 to f32 conversions 2018}	
{ [PATCH] PPC/s390: [Compiler] Use conditional move / select to generate poison mask. 2018}	{ [PATCH] [Compiler] Use conditional move / select to generate poison mask. 2018}	
{ [PATCH] PPC/s390: [turbofan] Support poisoning arguments in JavaScript. 2018}	{ [PATCH] [turbofan] Support poisoning arguments in JavaScript. 2018}	
{ [PATCH] Reland "[turbofan] Masking/poisoning in codegen (optimized code, arm64)" 2018}	{ [PATCH] Reland "PPC/s390: [turbofan] Masking/poisoning in codegen (optimized code, x64)" 2018}	
{ [PATCH] s390: Refactor atomic ops to distinguish Int32/Int64 ops 2018}	{ [PATCH] Refactor atomic ops to distinguish Int32/Int64 ops 2018}	
{ [PATCH] Revert "[turbofan] Masking/poisoning in codegen (optimized code, arm64)" 2018}	{ [PATCH] Revert "PPC/s390: [turbofan] Masking/poisoning in codegen (optimized code, x64)" 2018}	
{ [PATCH] [Assembler][ia32] Pass Operand by value 2018}	{ [PATCH] [Assembler][x64] Pass Operand by value 2018}	
{ [PATCH] [arm] Support CSDB instruction 2018}	{ [PATCH] [arm64] Support CSDB instruction 2018}	
{ [PATCH] PPC/s390: [Ignition] [TurboFan] Generate speculation poison in code generator. 2018}	{ [PATCH] [Ignition] [TurboFan] Generate speculation poison in code generator. 2018}	
{ [PATCH] PPC/s390: [turbofan] Move common instruction selector code into the platform-independent file. 2018}	{ [PATCH] [turbofan] Move common instruction selector code into the platform-independent file. 2018}	
{ [PATCH] PPC/s390: [debug] implement break on entry for builtin functions. 2018}	{ [PATCH] [debug] implement break on entry for builtin functions. 2018}	
{ [PATCH] s390: Reland "Reland "[builtins] Add .incbin cctest"" 2018}	{ [PATCH] Reland "Reland "[builtins] Add .incbin cctest"" 2018}	
{ [PATCH] s390: [builtins] Add --stress-off-heap-code to test off-heap code 2018}	{ [PATCH] [builtins] Add --stress-off-heap-code to test off-heap code 2018}	
{ [PATCH] Revert "[builtins] Add .incbin cctest" 2018}	{ [PATCH] Revert "[builtins] Add .incbin cctest" 2018}	
{ [PATCH] [builtins] Add .incbin cctest 2018}	{ [PATCH] [builtins] Add .incbin cctest 2018}	
{ [PATCH] PPC/s390: [Intepreter] Add poisoning to bytecode operand reads. 2018}	{ [PATCH] [Intepreter] Add poisoning to bytecode operand reads. 2018}	
{ [PATCH] PPC/s390: [ignition] Fix wide suspends to also return 2018}	{ [PATCH] [ignition] Fix wide suspends to also return 2018}	
{ [PATCH] PPC/s390: [wasm] Implement wasm sign extension opcodes 2018}	{ [PATCH] [wasm] Implement wasm sign extension opcodes 2018}	
{ [PATCH] PPC/s390: [assembler] Unify RelocInfo::NONE32 and NONE64 2018}	{ [PATCH] [assembler] Unify RelocInfo::NONE32 and NONE64 2018}	
{ [PATCH] PPC/s390: [ignition] Make SuspendGenerator return 2018}	{ [PATCH] [ignition] Make SuspendGenerator return 2018}	
{ [PATCH] [Liftoff] Implement indirect calls 2018}	{ [PATCH] [Liftoff] Implement direct calls 2018}	
{ [PATCH] PPC: Replace CALL_GENERATED_CODE by GeneratedCode wrapper 2018}	{ [PATCH] Replace CALL_GENERATED_CODE by GeneratedCode wrapper 2018}	
{ [PATCH] PPC/s390: Refactor bailout reasons 2018}	{ [PATCH] Refactor bailout reasons 2018}	
{ [PATCH] [turbofan][x64] Remove the kX64PeekFloat32 and kX64PeekFloat64 instructions 2017}	{ [PATCH] [turbofan][ia32] Remove the kIA32PeekFloat32 and kIA32PeekFloat64 instructions 2017}	
{ [PATCH] PPC/s390: Reland [turbofan] Implement on-stack returns (Intel) 2017}	{ [PATCH] Reland [turbofan] Implement on-stack returns (Intel) 2017}	
{ [PATCH] PPC/s390: [runtime] Cleanup Map fields and bit fields definitions. 2017}	{ [PATCH] [runtime] Cleanup Map fields and bit fields definitions. 2017}	
{ [PATCH] PPC/s390: [builtins] implement RunMicrotasks pump as a code stub 2017}	{ [PATCH] [builtins] implement RunMicrotasks pump as a code stub 2017}	
{ [PATCH] [x64] Reduce deoptimization table size 2017}	{ [PATCH] [arm64] Reduce deoptimization table size 2017}	
{ [PATCH] [cleanup] Replace V8_INT64_C macro by proper C++11 syntax 2017}	{ [PATCH] [cleanup] Replace V8_UINT64_C macro by proper C++11 syntax 2017}	
{ [PATCH] PPC/s390: [wasm] JIT using WasmCodeManager: codegen components. 2017}	{ [PATCH] [wasm] JIT using WasmCodeManager: codegen components. 2017}	
{ [PATCH] PPC/s390: [cleanup] Don't pass resume_mode to ResumeGenerator. 2017}	{ [PATCH] [cleanup] Don't pass resume_mode to ResumeGenerator. 2017}	
{ [PATCH] Reland "[Memory] Use OS::Allocate for all OS memory allocations." 2017}	{ [PATCH] Reland "[Memory] Use OS::Allocate for all OS memory allocations." 2017}	
{ [PATCH] PPC/s390: [heap] Remove the old write barrier. 2017}	{ [PATCH] [heap] Remove the old write barrier. 2017}	
{ [PATCH] PPC/s390: Precalculate the exception handler address. 2017}	{ [PATCH] Precalculate the exception handler address. 2017}	
{ [PATCH] [lazy-accessor-pairs] Don't take the fast paths if the context needs to be switched 2017}	{ [PATCH] [lazy-accessor-pairs] Don't take the fast paths if the context needs to be switched 2017}	
{ [PATCH] Reland^2 "[arm] [simulator] Do also execute tests on real hardware" 2017}	{ [PATCH] Reland "[arm] [simulator] Do also execute tests on real hardware" 2017}	
{ [PATCH] PPC/s390: Delete ObjectTriple and support code 2017}	{ [PATCH] Delete ObjectTriple and support code 2017}	
{ [PATCH] PPC/s390: [arm64] Pair some pushes and delete unused code 2017}	{ [PATCH] [arm64] Pair some pushes and delete unused code 2017}	
{ [PATCH] Revert "[arm64] Add slot copier to masm and use in builtins" 2017}	{ [PATCH] Revert "[arm64] Add slot copier to masm and use in builtins" 2017}	
{ [PATCH] [arm64] Add slot copier to masm and use in builtins 2017}	{ [PATCH] [arm64] Add slot copier to masm and use in builtins 2017}	
{ [PATCH] [arm64-simulator] Dispose stray Isolate in test 2017}	{ [PATCH] [arm-simulator] Dispose stray Isolate in test 2017}	
{ [PATCH] PPC/s390: [iwyu] Remove illegal inline include from "macro-assembler.h" 2017}	{ [PATCH] [iwyu] Remove illegal inline include from "macro-assembler.h" 2017}	
{ [PATCH] PPC: Fix compilation failure in debug mode after removal of Register::is method 2017}	{ [PATCH] MIPS64: Fix compilation failure in Debug mode after removal of Register::is method 2017}	
{ [PATCH] PPC/s390: [builtins] Move DeserializeLazy to ASM 2017}	{ [PATCH] [builtins] Move DeserializeLazy to ASM 2017}	
{ [PATCH] PPC/s390: [Interpreter] Adapt Call bytecode handlers to drop their stack-frame. 2017}	{ [PATCH] [Interpreter] Adapt Call bytecode handlers to drop their stack-frame. 2017}	
{ [PATCH] PPC/s390: Cleanup of deoptimization structures, removal of lazy deopt patching. 2017}	{ [PATCH] Cleanup of deoptimization structures, removal of lazy deopt patching. 2017}	
{ [PATCH] PPC/s390: Refactor of AssembleDeoptimizerCall. 2017}	{ [PATCH] Refactor of AssembleDeoptimizerCall. 2017}	
{ [PATCH] PPC/s390: [wasm] Reuse reloc info size and address accessors. 2017}	{ [PATCH] [wasm] Reuse reloc info size and address accessors. 2017}	
{ [PATCH] PPC/s390: [Interpreter] Remove new.target from fixed frame slot. 2017}	{ [PATCH] [Interpreter] Remove new.target from fixed frame slot. 2017}	
{ [PATCH] PPC/s390: [turbofan] Properly check new.target parameter in inlined Reflect.construct. 2017}	{ [PATCH] [turbofan] Properly check new.target parameter in inlined Reflect.construct. 2017}	
{ [PATCH] [ic] Properly integrate the CallIC into Ignition. 2017}	{ [PATCH] [ic] Properly integrate the CallIC into Ignition. 2017}	
{ [PATCH] PPC: Split frame-constants.h out of frames.h to reduce transitive includes. 2017}	{ [PATCH] [iwyu] Split frame-constants.h out of frames.h to reduce transitive includes. 2017}	
{ [PATCH] S390: Support circular references between generated builtins. 2017}	{ [PATCH] Support circular references between generated builtins. 2017}	
{ [PATCH] PPC/s390: Replacing pc with trampoline on stack (gc-stress fix) 2017}	{ [PATCH] Replacing pc with trampoline on stack (gc-stress fix) 2017}	
{ [PATCH] PPC/s390: MIPS[64] Fix SizeOfInitialHeap test failing 2017}	{ [PATCH] MIPS[64] Fix SizeOfInitialHeap test failing 2017}	
{ [PATCH] PPC/s390: [objects] Make feedback vector a first-class object 2017}	{ [PATCH] [objects] Make feedback vector a first-class object 2017}	
{ [PATCH] PPC/s390: Reland "[arm] Restrict grouping pushes before a TailCall to registers only" 2017}	{ [PATCH] Reland "[arm] Restrict grouping pushes before a TailCall to registers only" 2017}	
{ [PATCH] PPC/s390: Switch JSFunction::code to be a tagged value. 2017}	{ [PATCH] Switch JSFunction::code to be a tagged value. 2017}	
{ [PATCH] PPC/s390: [builtins] Introduce ConstructProxy builtin based on CSA 2017}	{ [PATCH] [builtins] Introduce ConstructProxy builtin based on CSA 2017}	
{ [PATCH] PPC/s390: [builtins] Introduce CallProxy builtin based on CSA 2017}	{ [PATCH] [builtins] Introduce CallProxy builtin based on CSA 2017}	
{ [PATCH] PPC/s390: [turbofan] Widen the fast-path for JSCreateArray. 2017}	{ [PATCH] [turbofan] Widen the fast-path for JSCreateArray. 2017}	
{ [PATCH] PPC/s390: [compiler] Don't use Handle<T>::cast in code generator. 2017}	{ [PATCH] [compiler] Don't use Handle<T>::cast in code generator. 2017}	
{ [PATCH] [wasm][ia32] Add an additional stack check for functions with big frames 2017}	{ [PATCH] [wasm][x64] Add an additional stack check for functions with big frames 2017}	
{ [PATCH] MIPS[64]: Implement MSA 2R instructions in simulator 2017}	{ [PATCH] MIPS[64]: Implement MSA I5 instructions in simulator 2017}	
{ [PATCH] PPC/s390: [compiler] Delay generation of code stubs. 2017}	{ [PATCH] [compiler] Delay generation of code stubs. 2017}	
{ [PATCH] PPC/s390: Remove TypeFeedbackId parameters from assembler and full-code. 2017}	{ [PATCH] Remove TypeFeedbackId parameters from assembler and full-code. 2017}	
{ [PATCH] PPC/s390: [turbofan] Introduce new JSConstructWithArrayLike operator. 2017}	{ [PATCH] [turbofan] Introduce new JSConstructWithArrayLike operator. 2017}	
{ [PATCH] PPC/s390: [turbofan] Introduce new JSCallWithArrayLike operator. 2017}	{ [PATCH] [turbofan] Introduce new JSCallWithArrayLike operator. 2017}	
{ [PATCH] PPC/s390: [runtime] Port SpreadCall code to CSA. 2017}	{ [PATCH] [runtime] Port SpreadCall code to CSA. 2017}	
{ [PATCH] PPC/s390: [compiler] Drive optimizations with feedback vector (reland) 2017}	{ [PATCH] [compiler] Drive optimizations with feedback vector (reland) 2017}	
{ [PATCH] PPC: [heap] Make write barrier safe for the concurrent marker. 2017}	{ [PATCH] [heap] Make write barrier safe for the concurrent marker. 2017}	
{ [PATCH] PPC/s390: [builtins] Start refactoring the Apply builtin. 2017}	{ [PATCH] [builtins] Start refactoring the Apply builtin. 2017}	
{ [PATCH] PPC/s390: Inline Array.prototype.forEach in TurboFan 2017}	{ [PATCH] Inline Array.prototype.forEach in TurboFan 2017}	
{ [PATCH] PPC/s390: [compiler] Delay allocation of code-embedded heap numbers. 2017}	{ [PATCH] [compiler] Delay allocation of code-embedded heap numbers. 2017}	
{ [PATCH] PPC/s390: Reland: [Interpreter] Transition JSFunctions to call optimized code when possible. 2017}	{ [PATCH] Reland: [Interpreter] Transition JSFunctions to call optimized code when possible. 2017}	
{ [PATCH] PPC/s390: [turbofan] Avoid allocating rest parameters for spread calls. 2017}	{ [PATCH] [turbofan] Avoid allocating rest parameters for spread calls. 2017}	
{ [PATCH] PPC/s390: [turbofan] [builtins] Unify construct builtins for JS functions and classes and add inlining and deoptimizer support 2017}	{ [PATCH] [turbofan] [builtins] Unify construct builtins for JS functions and classes and add inlining and deoptimizer support 2017}	
{ [PATCH] PPC/s390: [stubs] Drop CallApiCallbackStub::call_data_undefined optimization. 2017}	{ [PATCH] [stubs] Drop CallApiCallbackStub::call_data_undefined optimization. 2017}	
{ [PATCH] PPC/s390: [sim] Consistent support for C calls with up to 9 args 2017}	{ [PATCH] [sim] Consistent support for C calls with up to 9 args 2017}	
{ [PATCH] Revert of [regexp] Remove remainder of native RegExpExecStub (patchset #10 id:180001 of https://codereview.chromium.org/2752143003/ ) 2017}	{ [PATCH] Revert of [regexp] Remove remainder of native RegExpExecStub (patchset #8 id:140001 of https://codereview.chromium.org/2752143003/ ) 2017}	
{ [PATCH] PPC/s390: [builtins] Change semantics of class constructors returning primitives 2017}	{ [PATCH] [builtins] Change semantics of class constructors returning primitives 2017}	
{ [PATCH] Reland: PPC/s390 [ignition] Add call bytecodes for undefined receiver 2017}	{ [PATCH] Reland: [ignition] Add call bytecodes for undefined receiver 2017}	
{ [PATCH] [ARM] Implement D-register versions of vzip, vuzp, and vtrn. 2017}	{ [PATCH] [ARM] Implement D-register versions of vzip, vuzp, and vtrn. 2017}	
{ [PATCH] PPC/s390: [ignition] Add call bytecodes for undefined receiver 2017}	{ [PATCH] [ignition] Add call bytecodes for undefined receiver 2017}	
{ [PATCH] PPC/s390: [es2015] Simplify contract between parser and stub for derived constructors. 2017}	{ [PATCH] [es2015] Simplify contract between parser and stub for derived constructors. 2017}	
{ [PATCH] PPC/s390: [cleanup] combine 3 ResumeGenerator stubs into one 2017}	{ [PATCH] [cleanup] combine 3 ResumeGenerator stubs into one 2017}	
{ [PATCH] PPC/s390: [async-iteration] implement AsyncGenerator 2017}	{ [PATCH] [async-iteration] implement AsyncGenerator 2017}	
{ [PATCH] PPC/s390: [deoptimizer] Fill the single precision registers in the deoptimizer entry stub. 2017}	{ [PATCH] [deoptimizer] Fill the single precision registers in the deoptimizer entry stub. 2017}	
{ [PATCH] PPC/s390: [wasm] Lazy compilation for asm.js 2017}	{ [PATCH] [wasm] Lazy compilation for asm.js 2017}	
{ [PATCH] PPC/s390: [regexp] Port RegExpExecStub to CSA (mostly) 2017}	{ [PATCH] [regexp] Port RegExpExecStub to CSA (mostly) 2017}	
{ [PATCH] Revert of [wasm] Initial signal handler (patchset #60 id:1170001 of https://codereview.chromium.org/2371833007/ ) 2017}	{ [PATCH] Revert of [wasm] Initial signal handler (patchset #56 id:1090001 of https://codereview.chromium.org/2371833007/ ) 2017}	
{ [PATCH] PPC/s390: [builtins] Port TypedArrayConstructByArrayBuffer to CodeStubAssembler. 2017}	{ [PATCH] [builtins] Port TypedArrayConstructByArrayBuffer to CodeStubAssembler. 2017}	
{ [PATCH] Add several SIMD opcodes to IA32 2017}	{ [PATCH] Add several SIMD opcodes to IA32 2017}	
{ [PATCH] PPC/s390: [Atomics] Make Atomics.exchange a builtin using TF 2017}	{ [PATCH] [Atomics] Make Atomics.exchange a builtin using TF 2017}	
{ [PATCH] PPC/s390: [assembler] Make register definitions constexpr 2017}	{ [PATCH] [assembler] Make register definitions constexpr 2017}	
{ [PATCH] PPC/s390: Make explicit that RelocInfo's target_object is always a HeapObject. 2017}	{ [PATCH] Make explicit that RelocInfo's target_object is always a HeapObject. 2017}	
{ [PATCH] [iwyu|arm] Pre-work for removing unallowed include macro-assembler.h -> assembler-inl.h 2017}	{ [PATCH] [iwyu] Pre-work for removing unallowed include macro-assembler.h -> assembler-inl.h 2017}	
{ [PATCH] Revert "Revert of [Atomics] Implement ldaxr/stlxr instructions in ARM64 simulator (patchset #8 id:140001 of https://codereview.chromium.org/2711473002/ )" 2017}	{ [PATCH] Revert of [Atomics] Implement ldaxr/stlxr instructions in ARM64 simulator (patchset #8 id:140001 of https://codereview.chromium.org/2711473002/ ) 2017}	
{ [PATCH] PPC/s390: [wasm] Use builtins wrappers for traps 2017}	{ [PATCH] [wasm] Use builtins wrappers for traps 2017}	
{ [PATCH] PPC/s390: [debugger] remove debugger statement support from FCG/CS. 2017}	{ [PATCH] [debugger] remove debugger statement support from FCG/CS. 2017}	
{ [PATCH] PPC/s390: [everywhere] Custom representation for frame type 2017}	{ [PATCH] [everywhere] Custom representation for frame type 2017}	
{ [PATCH] [arm64] A shift of 0 is not allowed in ubfx. 2017}	{ [PATCH] [arm64] A shift of 0 is not allowed in ubfx. 2017}	
{ [PATCH] PPC/s390: [turbofan] Correct lazy deopt by {JSCreate} operation. 2017}	{ [PATCH] [turbofan] Correct lazy deopt by {JSCreate} operation. 2017}	
{ [PATCH] Revert of Remove SIMD.js from V8. (patchset #7 id:120001 of https://codereview.chromium.org/2684313003/ ) 2017}	{ [PATCH] Revert of Remove SIMD.js from V8. (patchset #7 id:120001 of https://codereview.chromium.org/2684313003/ ) 2017}	
{ [PATCH] PPC/s390: [crankshaft] Fix Smi overflow in {HMaybeGrowElements}. 2017}	{ [PATCH] [crankshaft] Fix Smi overflow in {HMaybeGrowElements}. 2017}	
{ [PATCH] PPC/s390: [wasm] Do not use setjmp/longjmp in cctests. 2017}	{ [PATCH] [wasm] Do not use setjmp/longjmp in cctests. 2017}	
{ [PATCH] s390: [iwyu] Remove include debug.h -> arguments.h 2017}	{ [PATCH] [iwyu] Remove include debug.h -> arguments.h 2017}	
{ [PATCH] Use S390X_RXY_A_OPCODE_LIST macro to declare rxy format assembler function 2017}	{ [PATCH] Use S390X_RX_A_OPCODE_LIST macro to declare rx format assembler function 2017}	
{ [PATCH] PPC/s390: [builtins] Port parameter and argument-related code stubs to CSA 2017}	{ [PATCH] [builtins] Port parameter and argument-related code stubs to CSA 2017}	
{ [PATCH] PPC/s390: [debugger] remove debugger statement support from FCG/CS. 2017}	{ [PATCH] [debugger] remove debugger statement support from FCG/CS. 2017}	
{ [PATCH] PPC/s390: [stubs] Also port the CallICStub to CSA. 2017}	{ [PATCH] [stubs] Also port the CallICStub to CSA. 2017}	
{ [PATCH] [Turbofan] Macro-ize instruction selection for ia32. - Uses macros to reduce code duplication. - Uses calls to VisitRO, VisitRR, VisitRROFloat, and VisitFloatUnop to   reduce code bloat. 2017}	{ [PATCH] [Turbofan] Macro-ize instruction selection for ia32. - Uses macros to reduce code duplication. - Uses calls to VisitRO, VisitRR, VisitRROFloat, and VisitFloatUnop to   reduce code bloat. 2017}	
{ [PATCH] PPC/s390: [wasm] Acquire the context for TrapIf from a wasm frame 2017}	{ [PATCH] [wasm] Acquire the context for TrapIf from a wasm frame 2017}	
{ [PATCH] Revert of [Turbofan] Macro-ize instruction selection for ia32. (patchset #1 id:1 of https://codereview.chromium.org/2669683002/ ) 2017}	{ [PATCH] Revert of [Turbofan] Macro-ize instruction selection for x64. (patchset #1 id:1 of https://codereview.chromium.org/2668753004/ ) 2017}	
{ [PATCH] PPC/s390: [TypeFeedbackVector] Combine the literals array and the feedback vector. 2017}	{ [PATCH] [TypeFeedbackVector] Combine the literals array and the feedback vector. 2017}	
{ [PATCH] PPC/s390: [liveedit] reimplement frame restarting. 2017}	{ [PATCH] [liveedit] reimplement frame restarting. 2017}	
{ [PATCH] PPC/s390: [turbofan] Introduce JSCallForwardVarargs operator. 2017}	{ [PATCH] [turbofan] Introduce JSCallForwardVarargs operator. 2017}	
{ [PATCH] PPC/s390: Split some SharedFunctionInfo's compiler hints off into debugger hints. 2017}	{ [PATCH] Split some SharedFunctionInfo's compiler hints off into debugger hints. 2017}	
{ [PATCH] [wasm] Fix I32ReinterpretF32 and I64ReinterpretF64 on ia32. 2017}	{ [PATCH] [wasm] Fix I32ReinterpretF32 and I64ReinterpretF64 on ia32. 2017}	
{ [PATCH] Revert [TypeFeedbackVector] Root literal arrays in function literal slots 2017}	{ [PATCH] Revert [TypeFeedbackVector] Root literal arrays in function literal slots 2017}	
{ [PATCH] PPC/s390: [builtins] CompileLazy bailed out to the runtime entirely too often. 2017}	{ [PATCH] [builtins] CompileLazy bailed out to the runtime entirely too often. 2017}	
{ [PATCH] PPC/s390: [debugger] infrastructure for side-effect-free debug-evaluate. 2017}	{ [PATCH] [debugger] infrastructure for side-effect-free debug-evaluate. 2017}	
{ [PATCH] [regexp] Remove IsRegExp intrinsic 2017}	{ [PATCH] [regexp] Remove IsRegExp intrinsic 2016}	
{ [PATCH] PPC: fix smi compare in DoBoundsCheck 2017}	{ [PATCH] s390: fix smi compare in DoBoundsCheck 2017}	
{ [PATCH] PPC/s390: [Ignition] Teach CompileLazy about interpreted functions. 2017}	{ [PATCH] [Ignition] Teach CompileLazy about interpreted functions. 2017}	
{ [PATCH] PPC/s390: [ic] Use StrictEqual/Equal builtins for CompareIC slow path. 2017}	{ [PATCH] [ic] Use StrictEqual/Equal builtins for CompareIC slow path. 2017}	
{ [PATCH] PPC/s390: [builtins] More stubs to the builtin-o-sphere. 2016}	{ [PATCH] [builtins] More stubs to the builtin-o-sphere. 2016}	
{ [PATCH] PPC/s390: [stubs] Port FastNewObjectStub to TF 2016}	{ [PATCH] [stubs] Port FastNewObjectStub to TF 2016}	
{ [PATCH] PPC/s390: [TypeFeedbackVector] Root literal arrays in function literals slots 2016}	{ [PATCH] [TypeFeedbackVector] Root literal arrays in function literals slots 2016}	
{ [PATCH] PPC: Use a different map to distinguish eval contexts 2016}	{ [PATCH] Use a different map to distinguish eval contexts 2016}	
{ [PATCH] [wasm] TrapIf and TrapUnless TurboFan operators implemented on arm. 2016}	{ [PATCH] [wasm] TrapIf and TrapUnless TurboFan operators implemented on ia32. 2016}	
{ [PATCH] PPC/s390: Store OSR'd optimized code on the native context. 2016}	{ [PATCH] Store OSR'd optimized code on the native context. 2016}	
{ [PATCH] s390: [stubs] Port FastFunctionBindStub to TF 2016}	{ [PATCH] [stubs] Port FastFunctionBindStub to TF 2016}	
{ [PATCH] PPC/s390: [stubs] Port builtin for Array.push fast-case from Crankshaft to TF 2016}	{ [PATCH] [stubs] Port builtin for Array.push fast-case from Crankshaft to TF 2016}	
{ [PATCH] PPC/s390: Fix FullCodeGen to include CallICs and CallConstruct in the total ic count. 2016}	{ [PATCH] Fix FullCodeGen to include CallICs and CallConstruct in the total ic count. 2016}	
{ [PATCH] PPC/s390: [turbofan] Advance bytecode offset after lazy deopt. 2016}	{ [PATCH] [turbofan] Advance bytecode offset after lazy deopt. 2016}	
{ [PATCH] PPC/s390: [turbofan] Refactor the compare-zero folding in instruction selector. 2016}	{ [PATCH] [turbofan] Refactor the compare-zero folding in instruction selector. 2016}	
{ [PATCH] PPC/s390: [builtins]: Uniformly push argument count in TF-generated builtins 2016}	{ [PATCH] [builtins]: Uniformly push argument count in TF-generated builtins 2016}	
{ [PATCH] PPC/s390: [crankshaft] Support all oddballs for truncating TaggedToI changes. 2016}	{ [PATCH] [crankshaft] Support all oddballs for truncating TaggedToI changes. 2016}	
{ [PATCH] PPC/s390: [crankshaft] Refactor kAllowUndefinedAsNaN to kTruncatingToNumber. 2016}	{ [PATCH] [crankshaft] Refactor kAllowUndefinedAsNaN to kTruncatingToNumber. 2016}	
{ [PATCH] PPC/s390: [full-codegen] Eliminate unnecessary hole checks for stores 2016}	{ [PATCH] [full-codegen] Eliminate unnecessary hole checks for stores 2016}	
{ [PATCH] Reland Update implementation of atomics with latest Chromium version but use compiler builtin atomics 2016}	{ [PATCH] Update implementation of atomics with latest Chromium version but use compiler builtin atomics 2016}	
{ [PATCH] PPC/s390: [wasm] Trim graph before scheduling. 2016}	{ [PATCH] [wasm] Trim graph before scheduling. 2016}	
{ [PATCH] PPC/s390: [builtins] Remove the unused AllocationSite slot from ConstructFrame. 2016}	{ [PATCH] [builtins] Remove the unused AllocationSite slot from ConstructFrame. 2016}	
{ [PATCH] PPC/s390: [ic] Unify CallIC feedback collection and handling. 2016}	{ [PATCH] [ic] Unify CallIC feedback collection and handling. 2016}	
{ [PATCH] PPC/s390: [stubs] Refactor the CallICStub to pass the number of arguments. 2016}	{ [PATCH] [stubs] Refactor the CallICStub to pass the number of arguments. 2016}	
{ [PATCH] PPC/s390: [stubs] Simplify the ArrayConstructorStub. 2016}	{ [PATCH] [stubs] Simplify the ArrayConstructorStub. 2016}	
{ [PATCH] PPC/s390: [fullcodegen] Don't count CallIC calls as patching ICs. 2016}	{ [PATCH] [fullcodegen] Don't count CallIC calls as patching ICs. 2016}	
{ [PATCH] PPC/s390: Reland "[turbofan] Discard the shared code entry in the optimized code map." 2016}	{ [PATCH] Reland "[turbofan] Discard the shared code entry in the optimized code map." 2016}	
{ [PATCH] Add Smi::Zero and replace all Smi::FromInt(0) calls 2016}	{ [PATCH] Add Smi::Zero and replace all Smi::FromInt(0) calls 2016}	
{ [PATCH] PPC/s390: [turbofan] JSGenericLowering mostly uses builtins instead of code stubs now 2016}	{ [PATCH] [turbofan] JSGenericLowering mostly uses builtins instead of code stubs now 2016}	
{ [PATCH] PPC/s390: Remove unnecessary duplication of FunctionKind enums in CompilerHints 2016}	{ [PATCH] Remove unnecessary duplication of FunctionKind enums in CompilerHints 2016}	
{ [PATCH] [WASM] Implements catch for the wasm low level exception mechanism. 2016}	{ [PATCH] [WASM] Implements catch for the wasm low level exception mechanism. 2016}	
{ [PATCH] PPC/s390: [heap] New heuristics for incremental marking step size. 2016}	{ [PATCH] [heap] New heuristics for incremental marking step size. 2016}	
{ [PATCH] MIPS64: Improve performance of simulator in debug mode. 2016}	{ [PATCH] MIPS: Improve performance of simulator in debug mode. 2016}	
{ [PATCH] [stubs] Port SubStringStub to TurboFan 2016}	{ [PATCH] [stubs] Port SubStringStub to TurboFan 2016}	
{ [PATCH] PPC/s390: [Interpreter] Adds stackcheck in InterpreterPushArgsAndCall/Construct builtins. 2016}	{ [PATCH] [Interpreter] Adds stackcheck in InterpreterPushArgsAndCall/Construct builtins. 2016}	
{ [PATCH] PPC/s390: Record call counts also for megamorphic calls. 2016}	{ [PATCH] Record call counts also for megamorphic calls. 2016}	
{ [PATCH] PPC/s390: [turbofan] Collect invocation counts and compute relative call frequencies. 2016}	{ [PATCH] [turbofan] Collect invocation counts and compute relative call frequencies. 2016}	
{ [PATCH] PPC/s390: CallConstruct also gets call count information if megamorphic. 2016}	{ [PATCH] CallConstruct also gets call count information if megamorphic. 2016}	
{ [PATCH] PPC/s390: [Interpreter] Collect allocation site feedback in call bytecode handler. 2016}	{ [PATCH] [Interpreter] Collect allocation site feedback in call bytecode handler. 2016}	
{ [PATCH] PPC/s390: [Interpreter] Collect type feedback for 'new' in the bytecode handler 2016}	{ [PATCH] [Interpreter] Collect type feedback for 'new' in the bytecode handler 2016}	
{ [PATCH] PPC/s390: Remove CONST_LEGACY VariableMode 2016}	{ [PATCH] Remove CONST_LEGACY VariableMode 2016}	
{ [PATCH] s390: [interpreter] Make the binary op with Smi bytecode handlers collect type feedback. 2016}	{ [PATCH] [interpreter] Make the binary op with Smi bytecode handlers collect type feedback. 2016}	
{ [PATCH] PPC/s390: [turbofan] Add Float32(Max|Min) machine operators. 2016}	{ [PATCH] [turbofan] Add Float32(Max|Min) machine operators. 2016}	
{ [PATCH] PPC/s390: [interpreter] Fix self-healing with preserved bytecode. 2016}	{ [PATCH] [interpreter] Fix self-healing with preserved bytecode. 2016}	
{ [PATCH] MIPS64: Fix [wasm] Support validation of asm.js modules with != 3 args. 2016}	{ [PATCH] [wasm] Support validation of asm.js modules with != 3 args. 2016}	
{ [PATCH] PPC/s390: TurboFan: Introduce TaggedSigned and TaggedPointer representations. 2016}	{ [PATCH] TurboFan: Introduce TaggedSigned and TaggedPointer representations. 2016}	
{ [PATCH] MIPS: [compiler] [wasm] Introduce Word32/64ReverseBytes as TF Optional Opcode. 2016}	{ [PATCH] [compiler] [wasm] Introduce Word32/64ReverseBytes as TF Optional Opcode 2016}	
{ [PATCH] PPC/s390: Use Variable::binding_needs_init() to determine hole initialization 2016}	{ [PATCH] Use Variable::binding_needs_init() to determine hole initialization 2016}	
{ [PATCH] PPC/s390: [turbofan] Remove the FloatXXSubPreserveNan operators. 2016}	{ [PATCH] [turbofan] Remove the FloatXXSubPreserveNan operators. 2016}	
{ [PATCH] PPC/s390: [stubs] Convert GrowElementsStub to TurboFan 2016}	{ [PATCH] [stubs] Convert GrowElementsStub to TurboFan 2016}	
{ [PATCH] [x64] Zero/sign-extend loads to 64-bit registers. 2016}	{ [PATCH] [x64] Zero/sign-extend loads to 64-bit registers. 2016}	
{ [PATCH] Separate Scope into DeclarationScope and Scope 2016}	{ [PATCH] Separate Scope into DeclarationScope and Scope 2016}	
{ [PATCH] PPC/s390: Clear exceptions in Invoke instead of JSEntryStub 2016}	{ [PATCH] Clear exceptions in Invoke instead of JSEntryStub 2016}	
{ [PATCH] PPC/s390: Make FastNewFunctionContextStub take slots parameter 2016}	{ [PATCH] Make FastNewFunctionContextStub take slots parameter 2016}	
{ [PATCH] [heap] Reland "Remove black pages and use black areas instead." 2016}	{ [PATCH] [heap] Reland "Remove black pages and use black areas instead." 2016}	
{ [PATCH] PPC/s390: [stubs] Port CreateWeakCellStub to turbofan 2016}	{ [PATCH] [stubs] Port CreateWeakCellStub to turbofan 2016}	
{ [PATCH] Fix 'Fix [turbofan] Prevent storing signalling NaNs into holey double arrays.' 2016}	{ [PATCH] MIPS: Fix '[turbofan] Prevent storing signalling NaNs into holey double arrays.' 2016}	
{ [PATCH] ARM: Implement UnaligedLoad and UnaligedStore turbofan operators. 2016}	{ [PATCH] Implement UnaligedLoad and UnaligedStore turbofan operators. 2016}	
{ [PATCH] PPC/s390: Reland of [interpreter] Add explicit OSR polling bytecode. (patchset #1 id:1 of https://codereview.chromium.org/2184553003/ ) 2016}	{ [PATCH] Reland of [interpreter] Add explicit OSR polling bytecode. (patchset #1 id:1 of https://codereview.chromium.org/2184553003/ ) 2016}	
{ [PATCH] PPC/s390: [turbofan] Change Float64Max/Float64Min to JavaScript semantics. 2016}	{ [PATCH] [turbofan] Change Float64Max/Float64Min to JavaScript semantics. 2016}	
{ [PATCH] PPC/s390: [arm] Fix infinite loop in Math.pow(2,2147483648). 2016}	{ [PATCH] [arm] Fix infinite loop in Math.pow(2,2147483648). 2016}	
{ [PATCH] PPC/s390: [builtins] Introduce a builtin for Abort(). 2016}	{ [PATCH] [builtins] Introduce a builtin for Abort(). 2016}	
{ [PATCH] Reland Implement .eh_frame writer and disassembler. 2016}	{ [PATCH] Reland Implement .eh_frame writer and disassembler. 2016}	
{ [PATCH] PPC/s390: [ic] Initialize feedback slots for LoadGlobalIC in Runtime::kDeclareGlobals when possible to avoid misses. 2016}	{ [PATCH] [ic] Initialize feedback slots for LoadGlobalIC in Runtime::kDeclareGlobals when possible to avoid misses. 2016}	
{ [PATCH] PPC/s390: [Interpreter] Collect type feedback for calls in the bytecode handler 2016}	{ [PATCH] [Interpreter] Collect type feedback for calls in the bytecode handler 2016}	
{ [PATCH] Revert of Reland Implement .eh_frame writer and disassembler. (patchset #74 id:2070001 of https://codereview.chromium.org/2023503002/ ) 2016}	{ [PATCH] Revert of Implement .eh_frame writer and disassembler. (patchset #72 id:2030001 of https://codereview.chromium.org/2023503002/ ) 2016}	
{ [PATCH] PPC/s390: [builtins] Construct builtin frame in String/Number ctors 2016}	{ [PATCH] [builtins] Construct builtin frame in String/Number ctors 2016}	
{ [PATCH] MIPS: [wasm] Detect unrepresentability in the float32-to-int32 conversion correctly on arm 2016}	{ [PATCH] [wasm] Detect unrepresentability in the float32-to-int32 conversion correctly on arm. 2016}	
{ [PATCH] PPC/s390: [builtins] Fix MathMaxMin on arm and arm64 2016}	{ [PATCH] [builtins] Fix MathMaxMin on arm and arm64 2016}	
{ [PATCH] PPC/s390: [builtins] Add receiver to builtin exit frames 2016}	{ [PATCH] [builtins] Add receiver to builtin exit frames 2016}	
{ [PATCH] PPC: [fullcode][mips][mips64][ppc][s390] Avoid trashing of a home object when doing a keyed store to a super. 2016}	{ [PATCH] [fullcode][mips][mips64][ppc][s390] Avoid trashing of a home object when doing a keyed store to a super. 2016}	
{ [PATCH] PPC/s390: [builtins] Unify most of the remaining Math builtins. 2016}	{ [PATCH] [builtins] Unify most of the remaining Math builtins. 2016}	
{ [PATCH] [intrinsic] Drop the %_ValueOf intrinsic. 2016}	{ [PATCH] [intrinsic] Drop the %_ValueOf intrinsic. 2016}	
{ [PATCH] PPC/s390: [builtins] Unify Cosh, Sinh and Tanh as exports from flibm 2016}	{ [PATCH] [builtins] Unify Cosh, Sinh and Tanh as exports from flibm 2016}	
{ [PATCH] [ia32] Fixes a bug in cmpw. 2016}	{ [PATCH] [ia32] Fixes a bug in cmpw. 2016}	
{ [PATCH] PPC/s390: [turbofan] Introduce Float64Pow and NumberPow operators. 2016}	{ [PATCH] [turbofan] Introduce Float64Pow and NumberPow operators. 2016}	
{ [PATCH] PPC/s390: [builtins] NonNumberToNumber and StringToNumber now use CallRuntime instead of TailCallRuntime 2016}	{ [PATCH] [builtins] NonNumberToNumber and StringToNumber now use CallRuntime instead of TailCallRuntime 2016}	
{ [PATCH] PPC/s390: [builtins] Introduce a proper BUILTIN frame type. 2016}	{ [PATCH] [builtins] Introduce a proper BUILTIN frame type. 2016}	
{ [PATCH] PPC/s390: [builtins] Use BUILTIN frame in DatePrototype_GetField 2016}	{ [PATCH] [builtins] Use BUILTIN frame in DatePrototype_GetField 2016}	
{ [PATCH] PPC/s390: [cleanup] Remove dead code from DeclareLookupSlot and rename it 2016}	{ [PATCH] [cleanup] Remove dead code from DeclareLookupSlot and rename it 2016}	
{ [PATCH] PPC/s390: [wasm] Separate compilation from instantiation 2016}	{ [PATCH] [wasm] Separate compilation from instantiation 2016}	
{ [PATCH] PPC/s390: [builtins] Introduce proper Float64Tan operator. 2016}	{ [PATCH] [builtins] Introduce proper Float64Tan operator. 2016}	
{ [PATCH] PPC/s390: [builtins] Introduce proper Float64Cos and Float64Sin. 2016}	{ [PATCH] [builtins] Introduce proper Float64Cos and Float64Sin. 2016}	
{ [PATCH] PPC/s390: [builtins] Always pass target and new target to C++ builtins 2016}	{ [PATCH] [builtins] Always pass target and new target to C++ builtins 2016}	
{ [PATCH] PPC/S390: [builtins] Introduce proper Float64Log2 and Float64Log10 operators. 2016}	{ [PATCH] [builtins] Introduce proper Float64Log2 and Float64Log10 operators. 2016}	
{ [PATCH] S390: [builtins] Introduce proper Float64Log1p, Float64Atan and Float64Atan2 operators. 2016}	{ [PATCH] PPC: [builtins] Introduce proper Float64Log1p, Float64Atan and Float64Atan2 operators. 2016}	
{ [PATCH] PPC: Move hashmap into src/base. 2016}	{ [PATCH] Move hashmap into src/base. 2016}	
{ [PATCH] S390: [stubs] ToNumberStub --> ToNumber builtin. 2016}	{ [PATCH] [stubs] ToNumberStub --> ToNumber builtin. 2016}	
{ [PATCH] S390: [stubs] StringToNumberStub --> StringToNumber builtin. 2016}	{ [PATCH] [stubs] StringToNumberStub --> StringToNumber builtin. 2016}	
{ [PATCH] MIPS: Fix 'Fix Turbofan: Modify WASM linkage to store floats using only 4 bytes.' 2016}	{ [PATCH] MIPS: Fix 'Turbofan: Modify WASM linkage to store floats using only 4 bytes.' 2016}	
{ [PATCH] Revert of Provide a tagged allocation top pointer. (patchset #5 id:80001 of https://codereview.chromium.org/2028633002/ ) 2016}	{ [PATCH] Revert of Provide a tagged allocation top pointer. (patchset #4 id:60001 of https://codereview.chromium.org/2028633002/ ) 2016}	
{ [PATCH] PPC: Store Floats as 4 bytes and Double as 8 bytes for codegen 2016}	{ [PATCH] S390: Store Floats as 4 bytes and Double as 8 bytes for codegen 2016}	
{ [PATCH] Provide a tagged allocation top pointer. 2016}	{ [PATCH] Provide a tagged allocation top pointer. 2016}	
{ [PATCH] PPC/s390: [stubs] An easier way of defining a stub call interface descriptor. 2016}	{ [PATCH] [stubs] An easier way of defining a stub call interface descriptor. 2016}	
{ [PATCH] S390: [cleanup] Drop FLAG_eliminate_prototype_chain_checks 2016}	{ [PATCH] [cleanup] Drop FLAG_eliminate_prototype_chain_checks 2016}	
{ [PATCH] PPC/S390: [Interpreter] Support compiling for baseline on return from interpreted function. 2016}	{ [PATCH] [Interpreter] Support compiling for baseline on return from interpreted function. 2016}	
{ [PATCH] Adding x64 simd assembler support. 2016}	{ [PATCH] Adding ia32 simd assembler support. 2016}	
{ [PATCH] [turbofan] ARM: Support shifted indexes in loads and stores 2016}	{ [PATCH] [turbofan] ARM64: Support shifted indexes in loads and stores 2016}	
{ [PATCH] PPC/S390: [turbofan] Add DebugBreak machine operator and support 2016}	{ [PATCH] [turbofan] Add DebugBreak machine operator and support 2016}	
{ [PATCH] PPC/S390: Fix %FunctionGetName and %_ClassOf for bound functions. 2016}	{ [PATCH] Fix %FunctionGetName and %_ClassOf for bound functions. 2016}	
{ [PATCH] PPC/S390: [es6] Reintroduce the instanceof operator in the backends. 2016}	{ [PATCH] [es6] Reintroduce the instanceof operator in the backends. 2016}	
{ [PATCH] PPC: Cleanup allocation folding states in lithium. 2016}	{ [PATCH] Cleanup allocation folding states in lithium. 2016}	
{ [PATCH] [turbofan] Take the immediate size in account when narrowing ia32/x64 word comparison operators. 2016}	{ [PATCH] [turbofan] Take the immediate size in account when narrowing ia32/x64 word comparison operators. 2016}	
{ [PATCH] S390: Add HasProperty code stub that tries simple lookups or jumps to runtime otherwise. 2016}	{ [PATCH] Add HasProperty code stub that tries simple lookups or jumps to runtime otherwise. 2016}	
{ [PATCH] S390: [turbofan] Properly initialize OutOfLineRecordWrite. 2016}	{ [PATCH] PPC: [turbofan] Properly initialize OutOfLineRecordWrite. 2016}	
{ [PATCH] S390X: [turbofan] Fix checked loads/stores. 2016}	{ [PATCH] PPC64: [turbofan] Fix checked loads/stores. 2016}	
{ [PATCH] S390X: [turbofan] Word32 loads should be unsigned. 2016}	{ [PATCH] PPC64: [turbofan] Word32 loads should be unsigned. 2016}	
{ [PATCH] [arm] Turn off the default NaN mode on arm. 2016}	{ [PATCH] [arm64] Turn off the default NaN mode on arm64. 2016}	
{ [PATCH] S390: Assembler changes for enabling GrowHeap in Wasm 2016}	{ [PATCH] PPC: Assembler changes for enabling GrowHeap in Wasm 2016}	
{ [PATCH] S390: [wasm] Fixed float-to-int conversion tests. 2016}	{ [PATCH] [wasm] Fixed float-to-int conversion tests. 2016}	
{ [PATCH] PPC: [compiler] Add relocatable pointer constants for wasm memory references. 2016}	{ [PATCH] [compiler] Add relocatable pointer constants for wasm memory references. 2016}	
{ [PATCH] PPC: Change store buffer overflow check to not rely on the store buffer being (2*Size) aligned. 2016}	{ [PATCH] Change store buffer overflow check to not rely on the store buffer being (2*Size) aligned. 2016}	
{ [PATCH] S390: [wasm] Int64Lowering of Int64Mul. 2016}	{ [PATCH] PPC: [wasm] Int64Lowering of Int64Mul. 2016}	
{ [PATCH] [Interpreter] Adds support to fetch return value on break at return. 2016}	{ [PATCH] [Interpreter] Adds support to fetch return value on break at return. 2016}	
{ [PATCH] S390: Add Simd128Value code stubs. 2016}	{ [PATCH] Add Simd128Value code stubs. 2016}	
{ [PATCH] S390: Turn LoadIndexedInterceptor into a Turbofan stub 2016}	{ [PATCH] Turn LoadIndexedInterceptor into a Turbofan stub 2016}	
{ [PATCH] S390: Turn StoreWithInterceptor into a turbofan stub 2016}	{ [PATCH] Turn StoreWithInterceptor into a turbofan stub 2016}	
{ [PATCH] S390: [wasm] Int64Lowering of Int64Sub. 2016}	{ [PATCH] PPC: [wasm] Int64Lowering of Int64Sub. 2016}	
{ [PATCH] S390: [wasm] Int64Lowering of Int64Add 2016}	{ [PATCH] PPC: [wasm] Int64Lowering of Int64Add. 2016}	
{ [PATCH] Assembler changes for enabling GrowHeap in Wasm  - New RelocInfo mode WASM_MEMORY_REFERENCE as a marker for wasm code objects that need to be relocated on a heap change  - RelocInfo mode recorded for immediates that use the memory buffer as base  - Tests to verify address patching works 2016}	{ [PATCH] Assembler changes for enabling GrowHeap in Wasm  - New RelocInfo mode WASM_MEMORY_REFERENCE as a marker for wasm code objects that need to be relocated on a heap change  - RelocInfo mode recorded for immediates that use the memory buffer as base  - Tests to verify address patching works 2016}	
{ [PATCH] PPC: [undetectable] Really get comparisons of document.all right now. 2016}	{ [PATCH] [undetectable] Really get comparisons of document.all right now. 2016}	
{ [PATCH] PPC: [turbofan] [deoptimizer] Support inlining of ES6 tail calls. 2016}	{ [PATCH] [turbofan] [deoptimizer] Support inlining of ES6 tail calls. 2016}	
{ [PATCH] PPC: [runtime] Unify and simplify how frames are marked 2016}	{ [PATCH] [runtime] Unify and simplify how frames are marked 2016}	
{ [PATCH] Rework CallApi*Stubs. 2016}	{ [PATCH] Rework CallApi*Stubs. 2016}	
{ [PATCH] PPC: [turbofan] Further fixing ES6 tail call elimination in Turbofan. 2016}	{ [PATCH] [turbofan] Further fixing ES6 tail call elimination in Turbofan. 2016}	
{ [PATCH] PPC: [crankshaft] Support ES6 tail call elimination. 2016}	{ [PATCH] [crankshaft] Support ES6 tail call elimination. 2016}	
{ [PATCH] PPC: [compiler] Introduce code stubs for string relational comparisons. 2016}	{ [PATCH] [compiler] Introduce code stubs for string relational comparisons. 2016}	
{ [PATCH] PPC: [proxies] throw TypeError if is_callable Map bit is unset 2016}	{ [PATCH] [proxies] throw TypeError if is_callable Map bit is unset 2016}	
{ [PATCH] PPC: [compiler] Introduce StringEqualStub and StringNotEqualStub. 2016}	{ [PATCH] [compiler] Introduce StringEqualStub and StringNotEqualStub. 2016}	
{ [PATCH] PPC: [compiler] Introduce initial StrictEqualStub. 2016}	{ [PATCH] [compiler] Introduce initial StrictEqualStub. 2016}	
{ [PATCH] PPC: [turbofan] Don't use the CompareIC in JSGenericLowering. 2016}	{ [PATCH] [turbofan] Don't use the CompareIC in JSGenericLowering. 2016}	
{ [PATCH] [crankshaft] Remove useless HCallJSFunction instruction. 2016}	{ [PATCH] [crankshaft] Remove useless HCallFunction instruction. 2016}	
{ [PATCH] PPC: [runtime] Unify comparison operator runtime entries. 2016}	{ [PATCH] [runtime] Unify comparison operator runtime entries. 2016}	
{ [PATCH] PPC: [fullcodegen] Implement control flow across do-expressions. 2016}	{ [PATCH] [fullcodegen] Implement control flow across do-expressions. 2016}	
{ [PATCH] PPC: [fullcodegen] Implement operand stack depth tracking. 2016}	{ [PATCH] [fullcodegen] Implement operand stack depth tracking. 2016}	
{ [PATCH] PPC: [interpreter, debugger] support debug breaks via bytecode array copy 2016}	{ [PATCH] [interpreter, debugger] support debug breaks via bytecode array copy 2016}	
{ [PATCH] PPC: [stubs] Introduce a dedicated FastNewObjectStub. 2016}	{ [PATCH] [stubs] Introduce a dedicated FastNewObjectStub. 2016}	
{ [PATCH] [fullcodegen] Remove the hacky %_FastOneByteArrayJoin intrinsic. 2016}	{ [PATCH] [fullcodegen] Remove the hacky %_FastOneByteArrayJoin intrinsic. 2016}	
{ [PATCH] PPC: [es6] [interpreter] Add tail calls support to Ignition. 2016}	{ [PATCH] [es6] [interpreter] Add tail calls support to Ignition. 2016}	
{ [PATCH] PPC: [intrinsics] Remove the %_IsDate intrinsic. 2016}	{ [PATCH] [intrinsics] Remove the %_IsDate intrinsic. 2016}	
{ [PATCH] PPC: [turbofan] Add an operator to access the parent frame pointer 2016}	{ [PATCH] [turbofan] Add an operator to access the parent frame pointer 2016}	
{ [PATCH] [arm] Allow immediate-index write barriers. 2016}	{ [PATCH] [arm64] Allow immediate-index write barriers. 2016}	
{ [PATCH] PPC: [Interpreter] Save and restore dispatch table pointer during calls. 2016}	{ [PATCH] [Interpreter] Save and restore dispatch table pointer during calls. 2016}	
{ [PATCH] PPC: [es6] Further fixing of tail Calls. 2016}	{ [PATCH] [es6] Further fixing of tail Calls. 2016}	
{ [PATCH] PPC: Preserve argument count for calls. 2016}	{ [PATCH] Preserve argument count for calls. 2016}	
{ [PATCH] PPC: [heap] Move to page lookups for SemiSpace, NewSpace, and Heap containment methods 2016}	{ [PATCH] [heap] Move to page lookups for SemiSpace, NewSpace, and Heap containment methods 2016}	
{ [PATCH] PPC: Mark null and undefined as undetectable, and use it to handle abstract equality comparison in the generic compare ic 2016}	{ [PATCH] Mark null and undefined as undetectable, and use it to handle abstract equality comparison in the generic compare ic 2016}	
{ [PATCH] Do not eagerly instantiate accessors' JSFunction. 2016}	{ [PATCH] Do not eagerly instantiate accessors' JSFunction. 2016}	
{ [PATCH] PPC: [turbofan] Add TruncateFloat32ToUint32 operator to Turbofan. 2016}	{ [PATCH] [turbofan] Add TruncateFloat32ToUint32 operator to Turbofan. 2016}	
{ [PATCH] PPC: [runtime] Optimize and unify rest parameters. 2016}	{ [PATCH] [runtime] Optimize and unify rest parameters. 2016}	
{ [PATCH] PPC: [turbofan] Add RoundUint32ToFloat32 operator to Turbofan. 2016}	{ [PATCH] [turbofan] Add RoundUint32ToFloat32 operator to Turbofan. 2016}	
{ [PATCH] PPC: New page local store buffer. 2016}	{ [PATCH] New page local store buffer. 2016}	
{ [PATCH] [api] Make ObjectTemplate::SetNativeDataProperty() work even if the ObjectTemplate does not have a constructor. 2016}	{ [PATCH] [api] Make ObjectTemplate::SetNativeDataProperty() work even if the ObjectTemplate does not have a constructor. 2016}	
{ [PATCH] PPC: [fullcode] Change fullcode to compile finally using the token approach. 2016}	{ [PATCH] [fullcode] Change fullcode to compile finally using the token approach. 2016}	
{ [PATCH] PPC: Write barrier for storing a code entry, and usage in CompileLazy builtin. 2016}	{ [PATCH] Write barrier for storing a code entry, and usage in CompileLazy builtin. 2016}	
{ [PATCH] PPC: [generators] Implement Generator.prototype.return. 2016}	{ [PATCH] [generators] Implement Generator.prototype.return. 2016}	
{ [PATCH] PPC: [for-in] Ensure that we learn from deopts within for-in loop bodies. 2016}	{ [PATCH] [for-in] Ensure that we learn from deopts within for-in loop bodies. 2016}	
{ [PATCH] [turbofan] Add the StackSlot operator to turbofan. 2016}	{ [PATCH] [turbofan] Add the StackSlot operator to turbofan. 2016}	
{ [PATCH] PPC: [regexp] correctly advance zero length matches for global/unicode. 2016}	{ [PATCH] [regexp] correctly advance zero length matches for global/unicode. 2016}	
{ [PATCH] PPC: [regexp] implement case-insensitive unicode regexps. 2016}	{ [PATCH] [regexp] implement case-insensitive unicode regexps. 2016}	
{ [PATCH] PPC: [es6] Tail calls support. 2016}	{ [PATCH] [es6] Tail calls support. 2016}	
{ [PATCH] PPC: [stubs] Introduce ToNameStub to implement %_ToName. 2016}	{ [PATCH] [stubs] Introduce ToNameStub to implement %_ToName. 2016}	
{ [PATCH] PPC: [interpreter] Fix return address when entering exception handler. 2016}	{ [PATCH] [interpreter] Fix return address when entering exception handler. 2016}	
{ [PATCH] PPC: [for-in] Sanitize for-in optimizations and fix bailout points. 2016}	{ [PATCH] [for-in] Sanitize for-in optimizations and fix bailout points. 2016}	
{ [PATCH] PPC: [interpreter] First implementation of stack unwinding. 2016}	{ [PATCH] [interpreter] First implementation of stack unwinding. 2016}	
{ [PATCH] PPC: [turbofan] Add the TruncateFloat32ToInt32 operator to turbofan. 2016}	{ [PATCH] [turbofan] Add the TruncateFloat32ToInt32 operator to turbofan. 2016}	
{ [PATCH] PPC: [Interpreter] Add ForInPrepare runtime function which returns a ObjectTriple. 2016}	{ [PATCH] [Interpreter] Add ForInPrepare runtime function which returns a ObjectTriple. 2016}	
{ [PATCH] PPC: [builtins] Sanitize receiver patching for API functions. 2016}	{ [PATCH] [builtins] Sanitize receiver patching for API functions. 2016}	
{ [PATCH] PPC: [builtins] Migrate Number constructor similar to String constructor. 2016}	{ [PATCH] [builtins] Migrate Number constructor similar to String constructor. 2016}	
{ [PATCH] [builtins] Refactor the remaining Date builtins. 2016}	{ [PATCH] [builtins] Refactor the remaining Date builtins. 2016}	
{ [PATCH] PPC: Remove strong mode support from rest argument creation. 2016}	{ [PATCH] Remove strong mode support from rest argument creation. 2016}	
{ [PATCH] PPC: [Interpreter] Fix some issues in the non-x64 InterpreterNotifyDeoptimized builtins. 2016}	{ [PATCH] [Interpreter] Fix some issues in the non-x64 InterpreterNotifyDeoptimized builtins. 2016}	
{ [PATCH] PPC: Use register arguments for RestParamAccessStub 2016}	{ [PATCH] Use register arguments for RestParamAccessStub 2016}	
{ [PATCH] PPC: [turbofan] Add Int64(Add|Sub)WithOverflow support. 2015}	{ [PATCH] [turbofan] Add Int64(Add|Sub)WithOverflow support. 2015}	
{ [PATCH] PPC: Partial revert of rest parameter desugaring. 2015}	{ [PATCH] Partial revert of rest parameter desugaring. 2015}	
{ [PATCH] PPC: [turbofan] Exhaustive switches for MachineRepresentation. 2015}	{ [PATCH] [turbofan] Exhaustive switches for MachineRepresentation. 2015}	
{ [PATCH] PPC: [runtime] Rewrite Function.prototype.toString in C++. 2015}	{ [PATCH] [runtime] Rewrite Function.prototype.toString in C++. 2015}	
{ [PATCH] PPC: [Interpreter] Add basic deoptimization support from TurboFan to Ignition. 2015}	{ [PATCH] [Interpreter] Add basic deoptimization support from TurboFan to Ignition. 2015}	
{ [PATCH] PPC: [runtime] Drop FIRST/LAST_NONCALLABLE_SPEC_OBJECT instance type range. 2015}	{ [PATCH] [runtime] Drop FIRST/LAST_NONCALLABLE_SPEC_OBJECT instance type range. 2015}	
{ [PATCH] PPC: [turbofan] Fixed the second return value of TryTruncateFloatXXToUint64. 2015}	{ [PATCH] [turbofan] Fixed the second return value of TryTruncateFloatXXToUint64. 2015}	
{ [PATCH] PPC: [Interpreter] Save bytecode offset in interpreter stack frames. 2015}	{ [PATCH] [Interpreter] Save bytecode offset in interpreter stack frames. 2015}	
{ [PATCH] PPC: Reland "[turbofan] Instruction scheduler for Turbofan." 2015}	{ [PATCH] Reland "[turbofan] Instruction scheduler for Turbofan." 2015}	
{ [PATCH] PPC: [turbofan] Make MachineType a pair of enums. 2015}	{ [PATCH] [turbofan] Make MachineType a pair of enums. 2015}	
{ [PATCH] MIPS: [turbofan] Fixed Div operations by zero on r6. 2015}	{ [PATCH] MIPS: [turbofan] Fix Div operations by zero on r6. 2015}	
{ [PATCH] PPC: [turbofan] Add initial support for SOFT deopts. 2015}	{ [PATCH] [turbofan] Add initial support for SOFT deopts. 2015}	
{ [PATCH] PPC: Type Feedback Vector: Calculate profiler counts on the fly. 2015}	{ [PATCH] Type Feedback Vector: Calculate profiler counts on the fly. 2015}	
{ [PATCH] PPC: [ic] Change CompareIC to handle JSReceiver instead of JSObject. 2015}	{ [PATCH] [ic] Change CompareIC to handle JSReceiver instead of JSObject. 2015}	
{ [PATCH] Revert of [debugger] do not predict step in target for liveedit. (patchset #2 id:20001 of https://codereview.chromium.org/1491743005/ ) 2015}	{ [PATCH] Revert of [debugger] do not predict step in target for liveedit. (patchset #1 id:1 of https://codereview.chromium.org/1491743005/ ) 2015}	
{ [PATCH] PPC: Fix inobject slack tracking for both subclassing and non-subclassing cases. 2015}	{ [PATCH] Fix inobject slack tracking for both subclassing and non-subclassing cases. 2015}	
{ [PATCH] PPC: [debugger] do not restart frames that reference new.target for liveedit.c 2015}	{ [PATCH] [debugger] do not restart frames that reference new.target for liveedit. 2015}	
{ [PATCH] Reland of [debugger] do not restart frames that reference new.target for liveedit. (patchset #1 id:1 of https://codereview.chromium.org/1493863004/ ) 2015}	{ [PATCH] Revert of [debugger] do not restart frames that reference new.target for liveedit. (patchset #1 id:1 of https://codereview.chromium.org/1493363002/ ) 2015}	
{ [PATCH] PPC: [proxies] InstanceOfStub should bailout to %HasInPrototypeChain for proxies. 2015}	{ [PATCH] [proxies] InstanceOfStub should bailout to %HasInPrototypeChain for proxies. 2015}	
{ [PATCH] PPC: [fullcode] Switch passing of new.target to register. 2015}	{ [PATCH] [fullcode] Switch passing of new.target to register. 2015}	
{ [PATCH] PPC: Remove new.target value from construct stub frames. 2015}	{ [PATCH] Remove new.target value from construct stub frames. 2015}	
{ [PATCH] PPC: [crankshaft] Deoptimize if HHasInPrototypeChainAndBranch hits a proxy. 2015}	{ [PATCH] [crankshaft] Deoptimize if HHasInPrototypeChainAndBranch hits a proxy. 2015}	
{ [PATCH] PPC: [debugger] simplify reloc info for debug break slots. 2015}	{ [PATCH] [debugger] simplify reloc info for debug break slots. 2015}	
{ [PATCH] PPC: [stubs] A new approach to TF stubs 2015}	{ [PATCH] [stubs] A new approach to TF stubs 2015}	
{ [PATCH] PPC: [turbofan] Desugar JSUnaryNot(x) to Select(x, false, true). 2015}	{ [PATCH] [turbofan] Desugar JSUnaryNot(x) to Select(x, false, true). 2015}	
{ [PATCH] PPC: [debugger] Remove code to predict step-in target. 2015}	{ [PATCH] [debugger] Remove code to predict step-in target. 2015}	
{ [PATCH] PPC: Provide call counts for constructor calls, surface them as a vector IC. 2015}	{ [PATCH] Provide call counts for constructor calls, surface them as a vector IC. 2015}	
{ [PATCH] PPC: Array constructor failed to enter it's function execution context. 2015}	{ [PATCH] Array constructor failed to enter it's function execution context. 2015}	
{ [PATCH] PPC: [runtime] Use "the hole" instead of smi 0 as sentinel for context extension. 2015}	{ [PATCH] [runtime] Use "the hole" instead of smi 0 as sentinel for context extension. 2015}	
{ [PATCH] PPC: [Proxies] Support constructable proxy as new.target (reland) 2015}	{ [PATCH] [Proxies] Support constructable proxy as new.target (reland) 2015}	
{ [PATCH] PPC: [compiler] Always pass closure argument to with, catch and block context creation. 2015}	{ [PATCH] [compiler] Always pass closure argument to with, catch and block context creation. 2015}	
{ [PATCH] PPC: [turbofan] Implemented the optional Float32RoundTruncate operator. 2015}	{ [PATCH] [turbofan] Implemented the optional Float32RoundTruncate operator. 2015}	
{ [PATCH] PPC: [interpreter] Switch passing of new.target to register. 2015}	{ [PATCH] [interpreter] Switch passing of new.target to register. 2015}	
{ [PATCH] PPC: [turbofan] Fewer gap moves for tail calls 2015}	{ [PATCH] [turbofan] Fewer gap moves for tail calls 2015}	
{ [PATCH] PPC: [turbofan] Add general support for sp-based frame access 2015}	{ [PATCH] [turbofan] Add general support for sp-based frame access 2015}	
{ [PATCH] PPC: [runtime] Pass closure to %CreateArrayLiteral and %CreateObjectLiteral. 2015}	{ [PATCH] [runtime] Pass closure to %CreateArrayLiteral and %CreateObjectLiteral. 2015}	
{ [PATCH] PPC: Install ConstructNonConstructable as construct stub for non-constructables. 2015}	{ [PATCH] Install ConstructNonConstructable as construct stub for non-constructables. 2015}	
{ [PATCH] PPC: [turbofan] Switch passing of new.target to register. 2015}	{ [PATCH] [turbofan] Switch passing of new.target to register. 2015}	
{ [PATCH] PPC: Reshuffle registers in JSConstructStub to avoid trashing costructor and new.target on fast path (so we don't need to push/pop them). 2015}	{ [PATCH] Reshuffle registers in JSConstructStub to avoid trashing costructor and new.target on fast path (so we don't need to push/pop them). 2015}	
{ [PATCH] PPC: [compiler] No need to push literal index in VisitArrayLiteral. 2015}	{ [PATCH] [compiler] No need to push literal index in VisitArrayLiteral. 2015}	
{ [PATCH] PPC: [builtins] Sanitize the machinery around Construct calls. 2015}	{ [PATCH] [builtins] Sanitize the machinery around Construct calls. 2015}	
{ [PATCH] PPC: [stubs] Change CallICStub to utilize the ConvertReceiverMode. 2015}	{ [PATCH] [stubs] Change CallICStub to utilize the ConvertReceiverMode. 2015}	
{ [PATCH] PPC: Make arguments adaptor not clobber new.target. 2015}	{ [PATCH] Make arguments adaptor not clobber new.target. 2015}	
{ [PATCH] PPC: [turbofan]: Implement tail calls with more callee than caller parameters 2015}	{ [PATCH] [turbofan]: Implement tail calls with more callee than caller parameters 2015}	
{ [PATCH] PPC: Fix object initialization when slack tracking for it's map is still enabled. 2015}	{ [PATCH] Fix object initialization when slack tracking for it's map is still enabled. 2015}	
{ [PATCH] PPC: [runtime] Introduce a proper %NewArray runtime entry. 2015}	{ [PATCH] [runtime] Introduce a proper %NewArray runtime entry. 2015}	
{ [PATCH] PPC: Introduce a BuiltinsConstructStub that sets up new.target and does a [[call]] per ES6 9.3.2 2015}	{ [PATCH] Introduce a BuiltinsConstructStub that sets up new.target and does a [[call]] per ES6 9.3.2 2015}	
{ [PATCH] PPC: Handle StepIn for constructors through PrepareStep just like for regular calls 2015}	{ [PATCH] Handle StepIn for constructors through PrepareStep just like for regular calls 2015}	
{ [PATCH] PPC: [turbofan] Move JSCallFunction specialization to JSCallReducer. 2015}	{ [PATCH] [turbofan] Move JSCallFunction specialization to JSCallReducer. 2015}	
{ [PATCH] PPC: VectorICs: Remove --vector-stores flag. 2015}	{ [PATCH] VectorICs: Remove --vector-stores flag. 2015}	
{ [PATCH] PPC: Rename original constructor to new target 2015}	{ [PATCH] Rename original constructor to new target 2015}	
{ [PATCH] Implemented the RoundUint64ToFloat32 TurboFan operator for x64, arm64, and ppc64. 2015}	{ [PATCH] Implemented the RoundInt64ToFloat32 TurboFan operator for x64, arm64, and mips64. 2015}	
{ [PATCH] PPC: [builtins] One runtime fallback is enough for the String constructor. 2015}	{ [PATCH] [builtins] One runtime fallback is enough for the String constructor. 2015}	
{ [PATCH] PPC: [turbofan] Better and more sane support for tail calls 2015}	{ [PATCH] [turbofan] Better and more sane support for tail calls 2015}	
{ [PATCH] MIPS64: Implemented the RoundUint64ToFloat64 TurboFan operator for x64 and arm64. 2015}	{ [PATCH] Implemented the RoundUint64ToFloat64 TurboFan operator for x64 and arm64. 2015}	
{ [PATCH] PPC: [turbofan] Avoid unnecessary write barriers and improve code generation. 2015}	{ [PATCH] [turbofan] Avoid unnecessary write barriers and improve code generation. 2015}	
{ [PATCH] PPC: Support fast-path allocation for subclass constructors with correctly initialized initial maps. 2015}	{ [PATCH] Support fast-path allocation for subclass constructors with correctly initialized initial maps. 2015}	
{ [PATCH] PPC: [builtins] Introduce specialized Call/CallFunction builtins. 2015}	{ [PATCH] [builtins] Introduce specialized Call/CallFunction builtins. 2015}	
{ [PATCH] PPC: [runtime] Drop redundant %CharFromCode runtime entry. 2015}	{ [PATCH] [runtime] Drop redundant %CharFromCode runtime entry. 2015}	
{ [PATCH] PPC: Remove CallFunctionStub, always call through the Call builtin (also from CallIC). 2015}	{ [PATCH] Remove CallFunctionStub, always call through the Call builtin (also from CallIC). 2015}	
{ [PATCH] PPC: [turbofan] Added the RoundInt64ToFloat64 instruction to TurboFan. 2015}	{ [PATCH] [turbofan] Added the RoundInt64ToFloat64 instruction to TurboFan. 2015}	
{ [PATCH] PPC: [es6] Better support for built-ins subclassing. 2015}	{ [PATCH] [es6] Better support for built-ins subclassing. 2015}	
{ [PATCH] Canonicalize handles for optimized compilation. 2015}	{ [PATCH] Canonicalize handles for optimized compilation. 2015}	
{ [PATCH] PPC: [runtime] Implement %_ToLength via ToLengthStub. 2015}	{ [PATCH] [runtime] Implement %_ToLength via ToLengthStub. 2015}	
{ [PATCH] [x64] Use vcvtlsi2sd when AVX is enabled 2015}	{ [PATCH] [x64] Use vcvtlsi2sd when AVX is enabled 2015}	
{ [PATCH] [Interpreter] Support for operator new. 2015}	{ [PATCH] [Interpreter] Support for operator new. 2015}	
{ [PATCH] PPC: VectorICs: use a vector slot to aid in array literal processing. 2015}	{ [PATCH] VectorICs: use a vector slot to aid in array literal processing. 2015}	
{ [PATCH] PPC: Vector ICs: Get rid of stack arguments on ia32 transitioning stores. 2015}	{ [PATCH] Vector ICs: Get rid of stack arguments on ia32 transitioning stores. 2015}	
{ [PATCH] Reland: Introduce a V8_NORETURN macro and use it to make GCC 4.9.2 happy again. 2015}	{ [PATCH] Reland: Introduce a V8_NORETURN macro and use it to make GCC 4.9.2 happy again. 2015}	
{ [PATCH] PPC: [builtins] Make sure argument count is always valid for C++ builtins. 2015}	{ [PATCH] [builtins] Make sure argument count is always valid for C++ builtins. 2015}	
{ [PATCH] Revert of [Interpreter] Add CallRuntime support to the interpreter. (patchset #8 id:220001 of https://codereview.chromium.org/1362383002/ ) 2015}	{ [PATCH] Revert of [Interpreter] Add CallRuntime support to the interpreter. (patchset #6 id:180001 of https://codereview.chromium.org/1362383002/ ) 2015}	
{ [PATCH] PPC: Full code shouldn't embed the type feedback vector. 2015}	{ [PATCH] Full code shouldn't embed the type feedback vector. 2015}	
{ [PATCH] PPC: Introduce LiteralsArray to hide it's implementation. 2015}	{ [PATCH] Introduce LiteralsArray to hide it's implementation. 2015}	
{ [PATCH] PPC: [es6] Fix invalid ToString in implementation of ToName. 2015}	{ [PATCH] [es6] Fix invalid ToString in implementation of ToName. 2015}	
{ [PATCH] PPC: [turbofan] Call ArgumentsAccessStub to materialize arguments. 2015}	{ [PATCH] [turbofan] Call ArgumentsAccessStub to materialize arguments. 2015}	
{ [PATCH] PPC: [runtime] Remove weird pushing of something on StackOverflow. 2015}	{ [PATCH] [runtime] Remove weird pushing of something on StackOverflow. 2015}	
{ [PATCH] PPC: [builtin] Refactor Invoke to deal with any kind of callable. 2015}	{ [PATCH] [builtin] Refactor Invoke to deal with any kind of callable. 2015}	
{ [PATCH] [arm] Optimize vcmp when lhs operand is #0.0 2015}	{ [PATCH] [arm64] Optimize fcmp when lhs operand is #0.0 2015}	
{ [PATCH] PPC: [builtins] Add support for NewTarget to Execution::New. 2015}	{ [PATCH] [builtins] Add support for NewTarget to Execution::New. 2015}	
{ [PATCH] PPC: [ic] Introduce BOOLEAN state for CompareIC. 2015}	{ [PATCH] [ic] Introduce BOOLEAN state for CompareIC. 2015}	
{ [PATCH] PPC: Fix "[turbofan] Add support for reinterpreting integers as floating point and vice versa." 2015}	{ [PATCH] [turbofan] Add support for reinterpreting integers as floating point and vice versa. 2015}	
{ [PATCH] PPC: [ic] Also collect known map for relational comparison. 2015}	{ [PATCH] [ic] Also collect known map for relational comparison. 2015}	
{ [PATCH] PPC: [stubs] Refactor StringCompareStub and use it for HStringCompareAndBranch. 2015}	{ [PATCH] [stubs] Refactor StringCompareStub and use it for HStringCompareAndBranch. 2015}	
{ [PATCH] PPC: [runtime] Replace COMPARE/COMPARE_STRONG with proper Object::Compare. 2015}	{ [PATCH] [runtime] Replace COMPARE/COMPARE_STRONG with proper Object::Compare. 2015}	
{ [PATCH] PPC: [runtime] Replace the EQUALS builtin with proper Object::Equals. 2015}	{ [PATCH] [runtime] Replace the EQUALS builtin with proper Object::Equals. 2015}	
{ [PATCH] PPC: [builtins] Unify the String constructor. 2015}	{ [PATCH] [builtins] Unify the String constructor. 2015}	
{ [PATCH] PPC: Remove --pretenure-call-new 2015}	{ [PATCH] Remove --pretenure-call-new 2015}	
{ [PATCH] PPC: Vector ICs: Hook up vectors in platform builtins to their SharedFunctionInfos. 2015}	{ [PATCH] Vector ICs: Hook up vectors in platform builtins to their SharedFunctionInfos. 2015}	
{ [PATCH] MIPS64: Fix unittests (to not use invalid load representation). 2015}	{ [PATCH] [mips] Fix mips unittests (to not use invalid load representation). 2015}	
{ [PATCH] PPC: [builtins] Simplify String constructor code. 2015}	{ [PATCH] [builtins] Simplify String constructor code. 2015}	
{ [PATCH] PPC: [Interpreter] Add support for JS calls. 2015}	{ [PATCH] [Interpreter] Add support for JS calls. 2015}	
{ [PATCH] PPC: Make FlushICache part of Assembler(Base) and take Isolate as parameter. 2015}	{ [PATCH] Make FlushICache part of Assembler(Base) and take Isolate as parameter. 2015}	
{ [PATCH] PPC: [builtins] Remove the weird STACK_OVERFLOW builtin. 2015}	{ [PATCH] [builtins] Remove the weird STACK_OVERFLOW builtin. 2015}	
{ [PATCH] PPC: [stubs] Simplify the non-function case of CallConstructStub. 2015}	{ [PATCH] [stubs] Simplify the non-function case of CallConstructStub. 2015}	
{ [PATCH] PPC: Vector ICs: The Oracle needs to report feedback for the object literals and the count operation. 2015}	{ [PATCH] Vector ICs: The Oracle needs to report feedback for the object literals and the count operation. 2015}	
{ [PATCH] PPC: [calls] Consistent call protocol for calls. 2015}	{ [PATCH] [calls] Consistent call protocol for calls. 2015}	
{ [PATCH] PPC: On a call to Array(), we patched a call ic. This CL makes do with a single dispatcher which inlines the special handling for the Array() call case, loading the allocation site found in the vector and calling the array constructor stub appropriately. 2015}	{ [PATCH] On a call to Array(), we patched a call ic. This CL makes do with a single dispatcher which inlines the special handling for the Array() call case, loading the allocation site found in the vector and calling the array constructor stub appropriately. 2015}	
{ [PATCH] PPC: Reland Vector ICs: platform support for vector-based stores. 2015}	{ [PATCH] Reland Vector ICs: platform support for vector-based stores. 2015}	
{ [PATCH] PPC: [runtime] Replace many buggy uses of %_CallFunction with %_Call. 2015}	{ [PATCH] [runtime] Replace many buggy uses of %_CallFunction with %_Call. 2015}	
{ [PATCH] [arm] Decrease the size of the assembler class by allocating buffers of pending constants on the heap. 2015}	{ [PATCH] [arm] Decrease the size of the assembler class by allocating buffers of pending constants on the heap. 2015}	
{ [PATCH] PPC: Remove obsolete functionality from the MacroAssemblers. 2015}	{ [PATCH] Remove obsolete functionality from the MacroAssemblers. 2015}	
{ [PATCH] PPC: [es6] Initial steps towards a correct implementation of IsCallable. 2015}	{ [PATCH] [es6] Initial steps towards a correct implementation of IsCallable. 2015}	
{ [PATCH] PPC: [es6] Introduce a dedicated JSIteratorResult type. 2015}	{ [PATCH] [es6] Introduce a dedicated JSIteratorResult type. 2015}	
{ [PATCH] PPC: [es6] Re-implement rest parameters via desugaring. 2015}	{ [PATCH] [es6] Re-implement rest parameters via desugaring. 2015}	
{ [PATCH] PPC: VectorICs: Cleanup, remove unnecessary arguments from HandleArrayCases() 2015}	{ [PATCH] VectorICs: Cleanup, remove unnecessary arguments from HandleArrayCases() 2015}	
{ [PATCH] PPC: Crankshaft is now able to compile top level code even if there is a ScriptContext. 2015}	{ [PATCH] Crankshaft is now able to compile top level code even if there is a ScriptContext. 2015}	
{ [PATCH] PPC: [runtime] Add %ToString and %_ToString and remove the TO_STRING builtin. 2015}	{ [PATCH] [runtime] Add %ToString and %_ToString and remove the TO_STRING builtin. 2015}	
{ [PATCH] PPC: [Interpreter] Add support for parameter variables. 2015}	{ [PATCH] [Interpreter] Add support for parameter variables. 2015}	
{ [PATCH] PPC: Correctify instanceof and make it optimizable. 2015}	{ [PATCH] Correctify instanceof and make it optimizable. 2015}	
{ [PATCH] PPC: [interpreter]: Changes to interpreter builtins for accumulator and register file registers. 2015}	{ [PATCH] [interpreter]: Changes to interpreter builtins for accumulator and register file registers. 2015}	
{ [PATCH] PPC: Make Simulator respect C stack limits as well. 2015}	{ [PATCH] Make Simulator respect C stack limits as well. 2015}	
{ [PATCH] PPC: Fix InterpreterEntryTrampoline(). 2015}	{ [PATCH] MIPS64: Fix InterpreterEntryTrampoline(). 2015}	
{ [PATCH] PPC: [turbofan] Unify referencing of stack slots 2015}	{ [PATCH] [turbofan] Unify referencing of stack slots 2015}	
{ [PATCH] PPC: Cleanup: Remove unncessary leave_frame parameter from stub cache. 2015}	{ [PATCH] Cleanup: Remove unncessary leave_frame parameter from stub cache. 2015}	
{ [PATCH] PPC: VectorICs: New interface descriptor for vector transitioning stores. 2015}	{ [PATCH] VectorICs: New interface descriptor for vector transitioning stores. 2015}	
{ [PATCH] PPC: [simd.js] Single SIMD128_VALUE_TYPE for all Simd128Values. 2015}	{ [PATCH] [simd.js] Single SIMD128_VALUE_TYPE for all Simd128Values. 2015}	
{ [PATCH] PPC: [compiler] Remove broken support for undetectable strings. 2015}	{ [PATCH] [compiler] Remove broken support for undetectable strings. 2015}	
{ [PATCH] Reland: [turbofan] Various fixes to allow unboxed doubles as arguments in registers and on the stack. 2015}	{ [PATCH] [turbofan] Various fixes to allow unboxed doubles as arguments in registers and on the stack. 2015}	
{ [PATCH] PPC: VectorICs: refactoring to eliminate "for queries only" vector ic mode. 2015}	{ [PATCH] VectorICs: refactoring to eliminate "for queries only" vector ic mode. 2015}	
{ [PATCH] PPC: Speed up cctest/test-debug/DebugBreakLoop. 2015}	{ [PATCH] Speed up cctest/test-debug/DebugBreakLoop. 2015}	
{ [PATCH] PPC: [interpreter] Add Interpreter{Entry,Exit}Trampoline builtins. 2015}	{ [PATCH] [interpreter] Add Interpreter{Entry,Exit}Trampoline builtins. 2015}	
{ [PATCH] PPC: [stubs] Don't pass name to Load/StoreGlobalViaContext stubs. 2015}	{ [PATCH] [stubs] Don't pass name to Load/StoreGlobalViaContext stubs. 2015}	
{ [PATCH] PPC: [stubs] Properly handle read-only properties in StoreGlobalViaContextStub. 2015}	{ [PATCH] [stubs] Properly handle read-only properties in StoreGlobalViaContextStub. 2015}	
{ [PATCH] PPC: Cross-script variables handling fixed. It was possible to write to read-only global variable. 2015}	{ [PATCH] Cross-script variables handling fixed. It was possible to write to read-only global variable. 2015}	
{ [PATCH] PPC: VectorICs: vector [keyed]store ic MISS handling infrastructure. 2015}	{ [PATCH] VectorICs: vector [keyed]store ic MISS handling infrastructure. 2015}	
{ [PATCH] PPC: Fix pushing of register in CallConstructStub outside frame. 2015}	{ [PATCH] Fix pushing of register in CallConstructStub outside frame. 2015}	
{ [PATCH] PPC: [interpreter] Add basic framework for bytecode handler code generation. 2015}	{ [PATCH] [interpreter] Add basic framework for bytecode handler code generation. 2015}	
{ [PATCH] PPC: Unify "runtime-style" IC functions with Runtime intrinsics 2015}	{ [PATCH] Unify "runtime-style" IC functions with Runtime intrinsics 2015}	
{ [PATCH] PPC: HydrogenCodeStubs consume stack arguments via descriptor. 2015}	{ [PATCH] HydrogenCodeStubs consume stack arguments via descriptor. 2015}	
{ [PATCH] PPC: Eliminate redundant descriptor ElementTransitionAndStoreDescriptor. 2015}	{ [PATCH] Eliminate redundant descriptor ElementTransitionAndStoreDescriptor. 2015}	
{ [PATCH] Reduce duplicate code in full-codegen across platforms. 2015}	{ [PATCH] Reduce duplicate code in full-codegen across platforms. 2015}	
{ [PATCH] [arm] Address TODO in CallConstructStub::Generate. 2015}	{ [PATCH] [arm64] Address TODO in CallConstructStub::Generate. 2015}	
{ [PATCH] PPC: Debugger: prepare code for debugging on a per-function basis. 2015}	{ [PATCH] Debugger: prepare code for debugging on a per-function basis. 2015}	
{ [PATCH] PPC: Fix memento initialization when constructing from new call 2015}	{ [PATCH] Fix memento initialization when constructing from new call 2015}	
{ [PATCH] Expose SIMD.Float32x4 type to Javascript. This CL exposes the constructor function, defines type related information, and implements value type semantics. It also refactors test/mjsunit/samevalue.js to test SameValue and SameValueZero. 2015}	{ [PATCH] Expose SIMD.Float32x4 type to Javascript. This CL exposes the constructor function, defines type related information, and implements value type semantics. It also refactors test/mjsunit/samevalue.js to test SameValue and SameValueZero. 2015}	
{ [PATCH] PPC: Reland Update V8 DEPS. 2015}	{ [PATCH] Reland Update V8 DEPS. 2015}	
{ [PATCH] PPC: Debugger: use debug break slots to break at function exit. 2015}	{ [PATCH] Debugger: use debug break slots to break at function exit. 2015}	
{ [PATCH] PPC: Switch CallConstructStub to take new.target in register. 2015}	{ [PATCH] Switch CallConstructStub to take new.target in register. 2015}	
{ [PATCH] PPC: Cleanup Generate_JSConstructStubHelper a bit. 2015}	{ [PATCH] Cleanup Generate_JSConstructStubHelper a bit. 2015}	
{ [PATCH] PPC: Fix keyed element access wrt string wrappers 2015}	{ [PATCH] Fix keyed element access wrt string wrappers 2015}	
{ [PATCH] MIPS64: Fix BlockTrampolinePoolFor() to emit trampoline before blocking, if needed. 2015}	{ [PATCH] MIPS: Fix BlockTrampolinePoolFor() to emit trampoline before blocking, if needed. 2015}	
{ [PATCH] PPC: [turbofan] Add an InterpreterDispatch linkage type. 2015}	{ [PATCH] [turbofan] Add an InterpreterDispatch linkage type. 2015}	
{ [PATCH] PPC: Debugger: record reloc info for debug break slot immediate before the slot. 2015}	{ [PATCH] Debugger: record reloc info for debug break slot immediate before the slot. 2015}	
{ [PATCH] PPC: Remove unused jump_elimination_allowed parameter to Assembler::branch_offset(). 2015}	{ [PATCH] [arm] Remove unused jump_elimination_allowed parameter to Assembler::branch_offset(). 2015}	
{ [PATCH] PPC: Remove separate construct stub for new.target users. 2015}	{ [PATCH] Remove separate construct stub for new.target users. 2015}	
{ [PATCH] PPC: Debugger: use debug break slot to break on call. 2015}	{ [PATCH] Debugger: use debug break slot to break on call. 2015}	
{ [PATCH] PPC: [turbofan] Add TruncationMode for TruncateFloat64ToInt32. 2015}	{ [PATCH] [turbofan] Add TruncationMode for TruncateFloat64ToInt32. 2015}	
{ [PATCH] PPC: Debugger: use debug break slots instead of ICs (except for calls). 2015}	{ [PATCH] Debugger: use debug break slots instead of ICs (except for calls). 2015}	
{ [PATCH] PPC: [turbofan] Enable tail calls for %_CallRuntime. 2015}	{ [PATCH] [turbofan] Enable tail calls for %_CallRuntime. 2015}	
{ [PATCH] PPC: Make context register implicit for CallInterfaceDescriptors 2015}	{ [PATCH] Make context register implicit for CallInterfaceDescriptors 2015}	
{ [PATCH] PPC: [es6] Make new.target work in functions 2015}	{ [PATCH] [es6] Make new.target work in functions 2015}	
{ [PATCH] PPC: VectorICs: Lithium support for vector-based stores. 2015}	{ [PATCH] VectorICs: Lithium support for vector-based stores. 2015}	
{ [PATCH] PPC: [turbofan] Canonicalize return sequence for JSFunctions. 2015}	{ [PATCH] [turbofan] Canonicalize return sequence for JSFunctions. 2015}	
{ [PATCH] PPC: [turbofan] Add basic support for calling to (a subset of) C functions. 2015}	{ [PATCH] [turbofan] Add basic support for calling to (a subset of) C functions. 2015}	
{ [PATCH] PPC: Vector ICs: Like megamorphic keyed koads, use a dummy vector for stores 2015}	{ [PATCH] Vector ICs: Like megamorphic keyed koads, use a dummy vector for stores 2015}	
{ [PATCH] Reland 2 "Keep a canonical list of shared function infos." 2015}	{ [PATCH] Reland "Keep a canonical list of shared function infos." 2015}	
{ [PATCH] PPC: Use big-boy Types to annotate interface descriptor parameters 2015}	{ [PATCH] Use big-boy Types to annotate interface descriptor parameters 2015}	
{ [PATCH] PPC: Do not add extra argument for new.target 2015}	{ [PATCH] Do not add extra argument for new.target 2015}	
{ [PATCH] PPC: Vector ICs: Turbofan vector store ic support 2015}	{ [PATCH] Vector ICs: Turbofan vector store ic support 2015}	
{ [PATCH] PPC: Clean up JSConstructStub 2015}	{ [PATCH] Clean up JSConstructStub 2015}	
{ [PATCH] PPC: Built-in apply() performance benefits from an uninitialized IC. 2015}	{ [PATCH] Built-in apply() performance benefits from an uninitialized IC. 2015}	
{ [PATCH] Reland "MIPS64: Fix lithium arithmetic operations for integers to sign-extend result." 2015}	{ [PATCH] Revert "MIPS64: Fix lithium arithmetic operations for integers to sign-extend result." 2015}	
{ [PATCH] MIPS: Fix for Remove unsafe EmitLoadRegister usage in AddI/SubI for constant right operand. 2015}	{ [PATCH] MIPS: Remove unsafe EmitLoadRegister usage in AddI/SubI for constant right operand. 2015}	
{ [PATCH] Revert of Add script context with context-allocated "const this" (patchset #2 id:20001 of https://codereview.chromium.org/1173333004/) 2015}	{ [PATCH] Revert of Add script context with context-allocated "const this" (patchset #7 id:120001 of https://codereview.chromium.org/1179893002/) 2015}	
{ [PATCH] PPC: [deoptimizer] Basic support inlining based on SharedFunctionInfo. 2015}	{ [PATCH] [deoptimizer] Basic support inlining based on SharedFunctionInfo. 2015}	
{ [PATCH] PPC: Vector ICs: ClassLiterals need to allocate a vector slot for home objects. 2015}	{ [PATCH] Vector ICs: ClassLiterals need to allocate a vector slot for home objects. 2015}	
{ [PATCH] PPC: Vector ICs: debugger should save registers for vector store ics. 2015}	{ [PATCH] Vector ICs: debugger should save registers for vector store ics. 2015}	
{ [PATCH] Add support for Embedded Constant Pools for PPC and Arm 2015}	{ [PATCH] Add support for Embedded Constant Pools for PPC and Arm 2015}	
{ [PATCH] Fix more -Wsign-compare bugs with GCC 4.9.2 2015}	{ [PATCH] Fix more -Wsign-compare bugs with GCC 4.9.2. 2015}	
{ [PATCH] PPC: [date] Refactor the %_DateField intrinsic to be optimizable. 2015}	{ [PATCH] [date] Refactor the %_DateField intrinsic to be optimizable. 2015}	
{ [PATCH] PPC: Build ObjectLiteral constant properties in the numbering phase. 2015}	{ [PATCH] Build ObjectLiteral constant properties in the numbering phase. 2015}	
{ [PATCH] PPC: [turbofan] First step towards sanitizing for-in and making it optimizable. 2015}	{ [PATCH] [turbofan] First step towards sanitizing for-in and making it optimizable. 2015}	
{ [PATCH] PPC: Make KeyedStores from a sloppy arguments array use a handler. 2015}	{ [PATCH] Make KeyedStores from a sloppy arguments array use a handler. 2015}	
{ [PATCH] PPC: VectorICs: allocating slots for store ics in ast nodes. 2015}	{ [PATCH] VectorICs: allocating slots for store ics in ast nodes. 2015}	
{ [PATCH] PPC: [es6] Support super.property in eval and arrow functions 2015}	{ [PATCH] [es6] Support super.property in eval and arrow functions 2015}	
{ [PATCH] PPC: Vector ICs: Introduce Store and KeyedStore IC code stubs. 2015}	{ [PATCH] Vector ICs: Introduce Store and KeyedStore IC code stubs. 2015}	
{ [PATCH] PPC: Move hash code from hidden string to a private symbol 2015}	{ [PATCH] Move hash code from hidden string to a private symbol 2015}	
{ [PATCH] PPC: Move work to omit unnecessary ObjectLiteral stores to the numbering pass. 2015}	{ [PATCH] Move work to omit unnecessary ObjectLiteral stores to the numbering pass. 2015}	
{ [PATCH] MIPS: Add float instructions and test coverage, part two 2015}	{ [PATCH] MIPS: Add float instructions and test coverage, part one 2015}	
{ [PATCH] PPC: [es6] Spread in array literals 2015}	{ [PATCH] [es6] Spread in array literals 2015}	
{ [PATCH] PPC: Cleanup interface descriptors to reflect that vectors are part of loads. 2015}	{ [PATCH] Cleanup interface descriptors to reflect that vectors are part of loads. 2015}	
{ [PATCH] Reapply "Resolve references to "this" the same way as normal variables"" 2015}	{ [PATCH] Reapply "Resolve references to "this" the same way as normal variables"" 2015}	
{ [PATCH] PPC: Now that vector ics are established for load, keyed load and call ics, let's remove dead code behind the flag. 2015}	{ [PATCH] Now that vector ics are established for load, keyed load and call ics, let's remove dead code behind the flag. 2015}	
{ [PATCH] PPC: Fix '[strong] Disallow implicit conversions for comparison' 2015}	{ [PATCH] PPC: Fix '[strong] Disallow implicit conversions for comparison' 2015}	
{ [PATCH] PPC: New hydrogen instruction to reduce cost of growing an array on keyed stores. 2015}	{ [PATCH] New hydrogen instruction to reduce cost of growing an array on keyed stores. 2015}	
{ [PATCH] PPC: [strong] Check arity of functions 2015}	{ [PATCH] [strong] Check arity of functions 2015}	
{ [PATCH] Revert of Resolve references to "this" the same way as normal variables (patchset #2 id:20001 of https://codereview.chromium.org/1130733003/) 2015}	{ [PATCH] Revert of Resolve references to "this" the same way as normal variables (patchset #11 id:240001 of https://codereview.chromium.org/1097283003/) 2015}	
{ [PATCH] PPC: Optimize the typeof operator. 2015}	{ [PATCH] Optimize the typeof operator. 2015}	
{ [PATCH] PPC: Handle the case when derived constructor is [[Call]]ed with 0 args. 2015}	{ [PATCH] Handle the case when derived constructor is [[Call]]ed with 0 args. 2015}	
{ [PATCH] PPC: [turbofan] Fix tail call optimization. 2015}	{ [PATCH] [turbofan] Fix tail call optimization. 2015}	
{ [PATCH] PPC: Only swap undefined for the global object if necessary in the prologue 2015}	{ [PATCH] Only swap undefined for the global object if necessary in the prologue 2015}	
{ [PATCH] PPC: VectorICs: built-in function apply should use an IC. 2015}	{ [PATCH] VectorICs: built-in function apply should use an IC. 2015}	
{ [PATCH] PPC: Use a stub in crankshaft for grow store arrays. 2015}	{ [PATCH] Use a stub in crankshaft for grow store arrays. 2015}	
{ [PATCH] PPC: Don't MISS if you read the hole from certain FastHoley arrays. 2015}	{ [PATCH] Don't MISS if you read the hole from certain FastHoley arrays. 2015}	
{ [PATCH] PPC: Reland "Add basic crankshaft support for slow-mode for-in to avoid disabling optimizations" 2015}	{ [PATCH] Reland "Add basic crankshaft support for slow-mode for-in to avoid disabling optimizations" 2015}	
{ [PATCH] PPC: Array() in optimized code can create with wrong ElementsKind in corner cases. 2015}	{ [PATCH] Array() in optimized code can create with wrong ElementsKind in corner cases. 2015}	
{ [PATCH] PPC: Use Cells to check prototype chain validity (disabled by default). 2015}	{ [PATCH] Use Cells to check prototype chain validity (disabled by default). 2015}	
{ [PATCH] MIPS: Split TemplateHashMapImpl::Lookup into two methods. 2015}	{ [PATCH] Split TemplateHashMapImpl::Lookup into two methods 2015}	
{ [PATCH] PPC: Remove unnecessary options from HTailCallThroughMegamorphicCache 2015}	{ [PATCH] Remove unnecessary options from HTailCallThroughMegamorphicCache 2015}	
{ [PATCH] PPC: Always update raw pointers when handling interrupts inside RegExp code. 2015}	{ [PATCH] Always update raw pointers when handling interrupts inside RegExp code. 2015}	
{ [PATCH] PPC: Merge cellspace into old pointer space 2015}	{ [PATCH] Merge cellspace into old pointer space 2015}	
{ [PATCH] PPC: Code cleanup in GenerateRecordCallTarget. 2015}	{ [PATCH] Code cleanup in GenerateRecordCallTarget. 2015}	
{ [PATCH] PPC: Reland "Merge old data and pointer space." 2015}	{ [PATCH] Reland "Merge old data and pointer space." 2015}	
{ [PATCH] [ia32] Introduce BMI instructions. 2015}	{ [PATCH] [x64] Introduce BMI instructions. 2015}	
{ [PATCH] PPC: Serializer: move to a subfolder and clean up includes. 2015}	{ [PATCH] Serializer: move to a subfolder and clean up includes. 2015}	
{ [PATCH] MIPS: Fix [turbofan] Factor out common switch-related code in instruction selectors. 2015}	{ [PATCH] [turbofan] Factor out common switch-related code in instruction selectors. 2015}	
{ [PATCH] PPC: Fix 'PPC: Serializer: serialize internal references via object visitor.' 2015}	{ [PATCH] MIPS: Fix 'MIPS: Serializer: serialize internal references via object visitor.' 2015}	
{ [PATCH] PPC: Remove PropertyCell space 2015}	{ [PATCH] MIPS: Remove PropertyCell space. 2015}	
{ [PATCH] PPC: Use platform specific stubs for vector-based Load/KeyedLoad. 2015}	{ [PATCH] Use platform specific stubs for vector-based Load/KeyedLoad. 2015}	
{ [PATCH] CpuProfiler: x64. put right address to the stack, so the callee would be able to resolve it into the right deopt_info. 2015}	{ [PATCH] CpuProfiler: ia32. put right address to the stack, so the callee would be able to resolve it into the right deopt_info. 2015}	
{ [PATCH] MIPS64: CpuProfiler: fix for CollectDeoptEvents test. 2015}	{ [PATCH] MIPS: CpuProfiler: fix for CollectDeoptEvents test. 2015}	
{ [PATCH] MIPS: Remove frame pointer from StackHandler. 2015}	{ [PATCH] Remove frame pointer from StackHandler. 2015}	
{ [PATCH] MIPS: Remove code object from StackHandler. 2015}	{ [PATCH] Remove code object from StackHandler. 2015}	
{ [PATCH] MIPS: [es6] Throw TypeError for computed static prototype property name 2015}	{ [PATCH] [es6] Throw TypeError for computed static prototype property name 2015}	
{ [PATCH] MIPS: [turbofan] Unify Math.floor / Math.ceil optimization. 2015}	{ [PATCH] [turbofan] Unify Math.floor / Math.ceil optimization. 2015}	
{ [PATCH] CpuProfiler: fix for CollectDeoptEvents test on arm 2015}	{ [PATCH] CpuProfiler: fix for CollectDeoptEvents test on arm64 2015}	
{ [PATCH] MIPS: [turbofan] Implement throwing exceptions into TurboFan code. 2015}	{ [PATCH] [turbofan] Implement throwing exceptions into TurboFan code. 2015}	
{ [PATCH] MIPS: Fix exception for assignment to uninitialised const. 2015}	{ [PATCH] Fix exception for assignment to uninitialised const 2015}	
{ [PATCH] MIPS: ARM: Load undefined receiver sentinel without constant pool. 2015}	{ [PATCH] ARM: Load undefined receiver sentinel without constant pool 2015}	
{ [PATCH] MIPS: Move stack unwinding logic into the runtime. 2015}	{ [PATCH] Move stack unwinding logic into the runtime. 2015}	
{ [PATCH] MIPS: Compute correct contextual load ICs in fullcodegen. 2015}	{ [PATCH] Compute correct contextual load ICs in fullcodegen. 2015}	
{ [PATCH] Disallow subclassing Arrays. 2015}	{ [PATCH] Disallow subclassing Arrays. 2015}	
{ [PATCH] MIPS: Skip the mapcheck on the global object since the global proxy and cell are already checked (or the global object map for contextual global loads). 2015}	{ [PATCH] Skip the mapcheck on the global object since the global proxy and cell are already checked (or the global object map for contextual global loads). 2015}	
{ [PATCH] Revert of Also skip when the target is the global object (patchset #1 id:1 of https://codereview.chromium.org/961723002/) 2015}	{ [PATCH] Revert of MIPS: Also skip when the target is the global object. (patchset #1 id:1 of https://codereview.chromium.org/957413002/) 2015}	
{ [PATCH] MIPS: Also skip when the target is the global object. 2015}	{ [PATCH] Also skip when the target is the global object 2015}	
{ [PATCH] emit premonomorphic ics for keyed loads/stores in optimized code 2015}	{ [PATCH] emit premonomorphic ics for loads/stores in optimized code 2015}	
{ [PATCH] MIPS: Move Maps' back pointers from "transitions" to "constructor" field 2015}	{ [PATCH] Move Maps' back pointers from "transitions" to "constructor" field 2015}	
{ [PATCH] MIPS: [turbofan] Fix several int vs size_t issues. 2015}	{ [PATCH] [turbofan] Fix several int vs size_t issues. 2015}	
{ [PATCH] MIPS: Stop using HeapType in IC and Crankshaft 2015}	{ [PATCH] Stop using HeapType in IC and Crankshaft 2015}	
{ [PATCH] MIPS: [turbofan] Optimize certain chains of Branch into a Switch. 2015}	{ [PATCH] [turbofan] Optimize certain chains of Branch into a Switch. 2015}	
{ [PATCH] MIPS: new classes: no longer experimental. 2015}	{ [PATCH] new classes: no longer experimental. 2015}	
{ [PATCH] MIPS: new classes: implement correct check for uninitialized this in 'super()' 2015}	{ [PATCH] new classes: implement correct check for uninitialized this in 'super()' 2015}	
{ [PATCH] CPUProfiler: Push deopt reason further to ProfileNode. 2015}	{ [PATCH] CPUProfiler: Push deopt reason further to ProfileNode. 2015}	
{ [PATCH] MIPS: new classes: implement default constructors. 2015}	{ [PATCH] new classes: implement default constructors. 2015}	
{ [PATCH] MIPS64: Propagate DeoptInfo to cpu-profiler 2015}	{ [PATCH] Propagate DeoptInfo to cpu-profiler 2015}	
{ [PATCH] MIPS: Parsing: Make Scope not know about Isolate. 2015}	{ [PATCH] Parsing: Make Scope not know about Isolate. 2015}	
{ [PATCH] MIPS: Remove the obsolete OverwriteMode optimization. 2015}	{ [PATCH] Remove the obsolete OverwriteMode optimization. 2015}	
{ [PATCH] Revert of Externalize deoptimization reasons. (patchset #7 id:120001 of https://codereview.chromium.org/874323003/) 2015}	{ [PATCH] Revert of Externalize deoptimization reasons. (patchset #6 id:100001 of https://codereview.chromium.org/874323003/) 2015}	
{ [PATCH] MIPS: Calls to the CallIC miss handler looked up the receiver incorrectly. 2015}	{ [PATCH] Calls to the CallIC miss handler looked up the receiver incorrectly. 2015}	
{ [PATCH] MIPS: Fix assertion in full codegen for holed 'this'. 2015}	{ [PATCH] Fix assertion in full codegen for holed 'this'. 2015}	
{ [PATCH] MIPS: Retry "Use a WeakCell in the CallIC type vector." 2015}	{ [PATCH] Retry "Use a WeakCell in the CallIC type vector." 2015}	
{ [PATCH] MIPS: Introduce LanguageMode, drop StrictMode. 2015}	{ [PATCH] Introduce LanguageMode, drop StrictMode. 2015}	
{ [PATCH] MIPS64: Super Constructor Calls need to use a vector slot, not an ic slot. 2015}	{ [PATCH] Super Constructor Calls need to use a vector slot, not an ic slot. 2015}	
{ [PATCH] MIPS: new classes: special construct stub for derived classs and TDZ for `this`. 2015}	{ [PATCH] new classes: special construct stub for derived classs and TDZ for `this`. 2015}	
{ [PATCH] MIPS: Use weak cell to embed known map in CompareIC 2015}	{ [PATCH] Use weak cell to embed known map in CompareIC 2015}	
{ [PATCH] MIPS64: Megamorphic KeyedLoadIC needs special handling for vector ics. 2015}	{ [PATCH] Megamorphic KeyedLoadIC needs special handling for vector ics. 2015}	
{ [PATCH] MIPS: Reland "Initial switch to Chromium-style CHECK_* and DCHECK_* macros.". 2015}	{ [PATCH] Reland "Initial switch to Chromium-style CHECK_* and DCHECK_* macros.". 2015}	
{ [PATCH] MIPS: Add MEGAMORPHIC state support for KeyedLoadIC. 2015}	{ [PATCH] Add MEGAMORPHIC state support for KeyedLoadIC 2015}	
{ [PATCH] MIPS: Continue learning for calls in crankshaft. 2015}	{ [PATCH] Continue learning for calls in crankshaft. 2015}	
{ [PATCH] Load setter from map descriptor instead of embedding it in handler. 2015}	{ [PATCH] Load getter from map descriptor instead of embedding it in handler. 2015}	
{ [PATCH] MIPS: Use a trampoline stub to load the type feedback vector for CallICs. 2015}	{ [PATCH] Use a trampoline stub to load the type feedback vector for CallICs. 2015}	
{ [PATCH] MIPS: Fixed Hydrogen environment handling for mul-i ARM and ARM64. 2015}	{ [PATCH] Fixed Hydrogen environment handling for mul-i on ARM and ARM64. 2015}	
{ [PATCH] MIPS64: Remove the dependency of Zone on Isolate. 2015}	{ [PATCH] Remove the dependency of Zone on Isolate 2015}	
{ [PATCH] MIPS: convert compile-time checkable DCHECKs to STATIC_ASSERTs. 2015}	{ [PATCH] convert compile-time checkable DCHECKs to STATIC_ASSERTs 2015}	
{ [PATCH] [x86] Use AVX in Crankshaft when available. 2015}	{ [PATCH] [x86] Use AVX in Crankshaft when available. 2015}	
{ [PATCH] MIPS: new classes: change semantics of super(...) call and add new.target to construct stub. 2015}	{ [PATCH] new classes: change semantics of super(...) call and add new.target to construct stub. 2015}	
{ [PATCH] MIPS: Use signaling NaN for holes in fixed double arrays. 2015}	{ [PATCH] Use signaling NaN for holes in fixed double arrays. 2015}	
{ [PATCH] MIPS: Add fast-path OOB support to KeyedLoadIC_Generic. 2015}	{ [PATCH] Add fast-path OOB support to KeyedLoadIC_Generic 2015}	
{ [PATCH] MIPS: split api call stubs into accessor and function call stubs 2015}	{ [PATCH] split api call stubs into accessor and function call stubs 2015}	
{ [PATCH] MIPS64: fix Make map check in NamedStoreHandlerCompiler::GenerateFieldTypeChecks weak. 2015}	{ [PATCH] Make map check in NamedStoreHandlerCompiler::GenerateFieldTypeChecks weak. 2015}	
{ [PATCH] MIPS: Fix 'MIPS: Fix after 'Reland remaining parts of 'Use weak cells in map checks in polymorphic ICs''.' 2015}	{ [PATCH] MIPS: Fix after 'Reland remaining parts of 'Use weak cells in map checks in polymorphic ICs''. 2014}	
{ [PATCH] MIPS: [turbofan] Improve code generation for unordered comparisons. 2015}	{ [PATCH] [turbofan] Improve code generation for unordered comparisons. 2015}	
{ [PATCH] MIPS64: Use weak cell in LoadGlobal handler. 2014}	{ [PATCH] Use weak cell in LoadGlobal handler. 2014}	
{ [PATCH] MIPS: [turbofan] Remove the no-context hack for JSToNumber. 2014}	{ [PATCH] [turbofan] Remove the no-context hack for JSToNumber. 2014}	
{ [PATCH] MIPS: Refactor Map::ConstructionCount. 2014}	{ [PATCH] Refactor Map::ConstructionCount. 2014}	
{ [PATCH] MIPS: Use weak cells to embed maps in store handler. 2014}	{ [PATCH] Use weak cells to embed maps in store handler. 2014}	
{ [PATCH] MIPS: CheckPrototypes uses weak cells to embed maps. 2014}	{ [PATCH] CheckPrototypes uses weak cells to embed maps. 2014}	
{ [PATCH] [ia32] Introduce FMA3 instructions on scalar data elements. 2014}	{ [PATCH] [x64] Introduce FMA3 instructions on scalar data elements. 2014}	
{ [PATCH] [ia32] Introduce vex prefix version of float64 arithmetic binop 2014}	{ [PATCH] [x64] introduce vex prefix version of float64 arithmetic binop 2014}	
{ [PATCH] MIPS: Use weak cells in map checks in polymorphic ICs. 2014}	{ [PATCH] Use weak cells in map checks in polymorphic ICs. 2014}	
{ [PATCH] MIPS: Flesh out vector ic state query and set mechanisms. 2014}	{ [PATCH] Flesh out vector ic state query and set mechanisms. 2014}	
{ [PATCH] MIPS: harmony-scoping: make assignment to 'const' a late error. 2014}	{ [PATCH] harmony-scoping: make assignment to 'const' a late error. 2014}	
{ [PATCH] [arm] Fix recognition of VNEG. 2014}	{ [PATCH] [arm] Fix recognition of VNEG. 2014}	
{ [PATCH] MIPS64: Load prototype from map in PropertyHandlerCompiler::CheckPrototypes. 2014}	{ [PATCH] Load prototype from map in PropertyHandlerCompiler::CheckPrototypes. 2014}	
{ [PATCH] MIPS: [turbofan] Clean up and factor out branch generation logic. 2014}	{ [PATCH] [turbofan] Clean up and factor out branch generation logic. 2014}	
{ [PATCH] MIPS: Re-land r25392 Use a stub in crankshaft for grow store arrays. 2014}	{ [PATCH] Re-land r25392 Use a stub in crankshaft for grow store arrays. 2014}	
{ [PATCH] [x64] Recognize MOVSXBL. 2014}	{ [PATCH] [x64] Recognize MOVSXWL. 2014}	
{ [PATCH] MIPS: Leaving a generator via an exception causes it to close. 2014}	{ [PATCH] Leaving a generator via an exception causes it to close 2014}	
{ [PATCH] MIPS: ES6: Add support for super in object literals. 2014}	{ [PATCH] ES6: Add support for super in object literals 2014}	
{ [PATCH] MIPS: Try avoiding MISS for callic monomorphic case. 2014}	{ [PATCH] Try avoiding MISS for callic monomorphic case. 2014}	
{ [PATCH] MIPS: Turn ToNumberStub into a PlatformCodeStub again. 2014}	{ [PATCH] Turn ToNumberStub into a PlatformCodeStub again. 2014}	
{ [PATCH] MIPS: [turbofan] Add AllocateHeapNumberStub to avoid runtime call. 2014}	{ [PATCH] [turbofan] Add AllocateHeapNumberStub to avoid runtime call. 2014}	
{ [PATCH] MIPS: [turbofan] Also optimize unsigned division by constant. 2014}	{ [PATCH] [turbofan] Also optimize unsigned division by constant. 2014}	
{ [PATCH] MIPS: EmitCreateIteratorResult loads map from function's context. 2014}	{ [PATCH] EmitCreateIteratorResult loads map from function's context 2014}	
{ [PATCH] MIPS: Classes: Add super support in methods and accessors. 2014}	{ [PATCH] Classes: Add super support in methods and accessors 2014}	
{ [PATCH] MIPS: [turbofan] Complete support for integer division/modulus in simplified lowering. 2014}	{ [PATCH] [turbofan] Complete support for integer division/modulus in simplified lowering. 2014}	
{ [PATCH] MIPS: Classes: Add basic support for properties 2014}	{ [PATCH] Classes: Add basic support for properties 2014}	
{ [PATCH] MIPS: Use shared function info for eval cache key. 2014}	{ [PATCH] Use shared function info for eval cache key. 2014}	
{ [PATCH] MIPS64: Spread the knowledge! 2014}	{ [PATCH] Spread the knowledge! 2014}	
{ [PATCH] MIPS64: vector-based ICs did not update type feedback counts correctly. 2014}	{ [PATCH] vector-based ICs did not update type feedback counts correctly. 2014}	
{ [PATCH] MIPS64: ReceiverCheckMode needs to be utilized further. 2014}	{ [PATCH] ReceiverCheckMode needs to be utilized further. 2014}	
{ [PATCH] MIPS: Implement the new semantics for 'super(...)'. 2014}	{ [PATCH] Implement the new semantics for 'super(...)' 2014}	
{ [PATCH] MIPS: Fix clang compilation error. 2014}	{ [PATCH] Fix clang compilation error. 2014}	
{ [PATCH] MIPS: Eliminate special keyed load string stub in favor of uniform handlers. 2014}	{ [PATCH] Eliminate special keyed load string stub in favor of uniform handlers. 2014}	
{ [PATCH] MIPS: Implement inline %_IsJSProxy() for full codegen and Hydrogen. 2014}	{ [PATCH] Implement inline %_IsJSProxy() for full codegen and Hydrogen 2014}	
{ [PATCH] MIPS: [turbofan] Optimize division/modulus by constant. 2014}	{ [PATCH] [turbofan] Optimize division/modulus by constant. 2014}	
{ [PATCH] MIPS: [turbofan] Make VisitBranch and friends to backend specific. 2014}	{ [PATCH] [turbofan] Make VisitBranch and friends to backend specific. 2014}	
{ [PATCH] MIPS: Support for super assignments in for..in. 2014}	{ [PATCH] Support for super assignments in for..in. 2014}	
{ [PATCH] MIPS: Introduce FeedbackVectorSlot type - better than int. 2014}	{ [PATCH] Introduce FeedbackVectorSlot type - better than int. 2014}	
{ [PATCH] MIPS: Teach TurboFan to call vector-based ICs. 2014}	{ [PATCH] Teach TurboFan to call vector-based ICs. 2014}	
{ [PATCH] MIPS: Add MEGAMORPHIC state support for KeyedStoreIC. 2014}	{ [PATCH] Add MEGAMORPHIC state support for KeyedStoreIC 2014}	
{ [PATCH] MIPS: Fix uninitialized FixedArray potentially being left behind by ElementsTransitionGenerator::GenerateDoubleToObject. 2014}	{ [PATCH] Fix uninitialized FixedArray potentially being left behind by ElementsTransitionGenerator::GenerateDoubleToObject 2014}	
{ [PATCH] MIPS: Keyed stores to super where key is a name. 2014}	{ [PATCH] Keyed stores to super where key is a name. 2014}	
{ [PATCH] MIPS: Updates to maintain flag --vector-ics 2014}	{ [PATCH] Updates to maintain flag --vector-ics 2014}	
{ [PATCH] MIPS: Support for super keyed loads where key is a name. 2014}	{ [PATCH] Support for super keyed loads where key is a name. 2014}	
{ [PATCH] [turbofan] support all shift operands on x64 2014}	{ [PATCH] [turbofan] support all shift operands on ia32 2014}	
{ [PATCH] MIPS: Replace OStream with std::ostream. 2014}	{ [PATCH] Replace OStream with std::ostream. 2014}	
{ [PATCH] [turbofan] ia32 lea multiplication matching 2014}	{ [PATCH] [turbofan] x64 lea multiplication matching 2014}	
{ [PATCH] MIPS: Support count operations on super named properties. 2014}	{ [PATCH] Support count operations on super named properties. 2014}	
{ [PATCH] MIPS: Stores and compound assignments for named super properties. 2014}	{ [PATCH] Stores and compound assignments for named super properties. 2014}	
{ [PATCH] [turbofan] add new ia32 addressing modes 2014}	{ [PATCH] [turbofan] add new x64 addressing modes 2014}	
{ [PATCH] MIPS: [turbofan] Add backend support for float32. 2014}	{ [PATCH] [turbofan] Add backend support for float32. 2014}	
{ [PATCH] MIPS: Refactor bailout reasons and disable optimization in more cases. 2014}	{ [PATCH] Refactor bailout reasons and disable optimization in more cases. 2014}	
{ [PATCH] MIPS: Make KeyedLoads from a sloppy arguments array use a handler. 2014}	{ [PATCH] Make KeyedLoads from a sloppy arguments array use a handler. 2014}	
{ [PATCH] MIPS: Convert KeyedLoad indexed interceptor case to a Handler. 2014}	{ [PATCH] Convert KeyedLoad indexed interceptor case to a Handler. 2014}	
{ [PATCH] MIPS: Move state sentinels into TypeFeedbackVector. 2014}	{ [PATCH] Move state sentinels into TypeFeedbackVector. 2014}	
{ [PATCH] MIPS64: Removing ic.h from code-stubs.h 2014}	{ [PATCH] Removing ic.h from code-stubs.h 2014}	
{ [PATCH] Reland "Change the order of arguments of the (One|Two)ByteSeqStringSetChar intrinsic." 2014}	{ [PATCH] Revert "Change the order of arguments of the (One|Two)ByteSeqStringSetChar intrinsic." 2014}	
{ [PATCH] MIPS: Rename ascii to one-byte where applicable. 2014}	{ [PATCH] Rename ascii to one-byte where applicable. 2014}	
{ [PATCH] MIPS: Do not use CodeStub::FindInCache if not necessary. 2014}	{ [PATCH] Do not use CodeStub::FindInCache if not necessary. 2014}	
{ [PATCH] MIPS: Get CallInterfaceDescriptor directly from CodeStub. 2014}	{ [PATCH] Get CallInterfaceDescriptor directly from CodeStub. 2014}	
{ [PATCH] MIPS: Initialize CodeStubInterfaceDescriptor in the constructor. 2014}	{ [PATCH] Initialize CodeStubInterfaceDescriptor in the constructor. 2014}	
{ [PATCH] MIPS: Do not cache CodeStubInterfaceDescriptor on the isolate. 2014}	{ [PATCH] Do not cache CodeStubInterfaceDescriptor on the isolate. 2014}	
{ [PATCH] MIPS: Unify JSEntryStub and JSConstructEntryStub, and some more code stub cleanups. 2014}	{ [PATCH] Unify JSEntryStub and JSConstructEntryStub, and some more code stub cleanups. 2014}	
{ [PATCH] MIPS: Generalized division via multiplication. 2014}	{ [PATCH] Generalized division via multiplication. 2014}	
{ [PATCH] MIPS: Introduce code stub constructors for stub keys. 2014}	{ [PATCH] Introduce code stub constructors for stub keys. 2014}	
{ [PATCH] MIPS: Remove dead code for inline string hashing. 2014}	{ [PATCH] Remove dead code for inline string hashing. 2014}	
{ [PATCH] MIPS: Clean up code stubs and ensure distinct major keys. 2014}	{ [PATCH] Clean up code stubs and ensure distinct major keys. 2014}	
{ [PATCH] MIPS: CallDescriptors::InitializeForIsolate() is no longer needed. 2014}	{ [PATCH] CallDescriptors::InitializeForIsolate() is no longer needed. 2014}	
{ [PATCH] MIPS: Minor-key-ify remaining code stubs. 2014}	{ [PATCH] Minor-key-ify remaining code stubs. 2014}	
{ [PATCH] MIPS: Unify some PlatformCodeStubs. 2014}	{ [PATCH] Unify some PlatformCodeStubs. 2014}	
{ [PATCH] MIPS: First step to cleanup the power-of-2 mess. 2014}	{ [PATCH] First step to cleanup the power-of-2 mess. 2014}	
{ [PATCH] MIPS: Minor-key-ify four stubs. 2014}	{ [PATCH] Minor-key-ify four stubs. 2014}	
{ [PATCH] MIPS: InterfaceDescriptor becomes CallInterfaceDescriptor. 2014}	{ [PATCH] InterfaceDescriptor becomes CallInterfaceDescriptor. 2014}	
{ [PATCH] MIPS: Multiple stubs can point to the same calling convention. 2014}	{ [PATCH] Multiple stubs can point to the same calling convention. 2014}	
{ [PATCH] MIPS: Minor-key-ify BinaryOpICWithAllocationSiteStub. 2014}	{ [PATCH] Minor-key-ify BinaryOpICWithAllocationSiteStub. 2014}	
{ [PATCH] MIPS: Minor-key-ify new LoadICTrampolineStub. 2014}	{ [PATCH] Minor-key-ify new LoadICTrampolineStub. 2014}	
{ [PATCH] MIPS: Added vector-based loadic hydrogen stubs. Not yet callable. 2014}	{ [PATCH] Added vector-based loadic hydrogen stubs. Not yet callable. 2014}	
{ [PATCH] MIPS: Move register conventions out of the IC classes. 2014}	{ [PATCH] Move register conventions out of the IC classes. 2014}	
{ [PATCH] MIPS: Minor-key-ify CallICStub and CallIC_ArrayStub. 2014}	{ [PATCH] Minor-key-ify CallICStub and CallIC_ArrayStub. 2014}	
{ [PATCH] MIPS: Change more PlatformCodeStubs to encode properties in the minor key. 2014}	{ [PATCH] Change more PlatformCodeStubs to encode properties in the minor key. 2014}	
{ [PATCH] MIPS: Eliminate code duplication in lithium calls to vector-based LoadICs. 2014}	{ [PATCH] Eliminate code duplication in lithium calls to vector-based LoadICs 2014}	
{ [PATCH] MIPS: Encode CEntryStub properties in the minor key. 2014}	{ [PATCH] Encode CEntryStub properties in the minor key. 2014}	
{ [PATCH] MIPS: Move "slow handler" compiler code to handler-compiler. 2014}	{ [PATCH] Move "slow handler" compiler code to handler-compiler 2014}	
{ [PATCH] MIPS: Move handler compilers to handler-compiler. 2014}	{ [PATCH] Move handler compilers to handler-compiler 2014}	
{ [PATCH] MIPS: Move PropertyAccessCompiler and CallOptimization to their own files. 2014}	{ [PATCH] Move PropertyAccessCompiler and CallOptimization to their own files 2014}	
{ [PATCH] MIPS: Remove KeyedStoreIC::GenerateRuntimeSetProperty and move Store::GenerateRuntimeSetProperty to the PropertyICCompiler. 2014}	{ [PATCH] Remove KeyedStoreIC::GenerateRuntimeSetProperty and move Store::GenerateRuntimeSetProperty to the PropertyICCompiler 2014}	
{ [PATCH] MIPS: Move IC code into a subdir and move ic-compilation related code from stub-cache into ic-compiler. 2014}	{ [PATCH] Move IC code into a subdir and move ic-compilation related code from stub-cache into ic-compiler 2014}	
{ [PATCH] MIPS: Use LookupIterator for CompileLoadInterceptor and delete Object::Lookup. 2014}	{ [PATCH] Use LookupIterator for CompileLoadInterceptor and delete Object::Lookup 2014}	
{ [PATCH] Reland "MIPS: Add support for arch. revision 6 to mips32 port." 2014}	{ [PATCH] Reland "MIPS: Add support for arch. revision 6 to mips32 port." 2014}	
{ [PATCH] MIPS: We should never allocate a 0-sized buffer, so never grow from 0. 2014}	{ [PATCH] We should never allocate a 0-sized buffer, so never grow from 0. 2014}	
{ [PATCH] MIPS: Always use the StoreFieldStub to do the actual storing. 2014}	{ [PATCH] Always use the StoreFieldStub to do the actual storing. 2014}	
{ [PATCH] MIPS: Check that external references are registered in the serializer. 2014}	{ [PATCH] Check that external references are registered in the serializer. 2014}	
{ [PATCH] MIPS: Cleanup in stub-cache.cc; remove unused ArrayLength store ICs. 2014}	{ [PATCH] Cleanup in stub-cache.cc; remove unused ArrayLength store ICs. 2014}	
{ [PATCH] MIPS: Remove keyed_store_calling convention and friends. 2014}	{ [PATCH] Remove keyed_store_calling convention and friends 2014}	
{ [PATCH] MIPS: Encapsulate the holder in the PropertyHolderCompilers. 2014}	{ [PATCH] Encapsulate the holder in the PropertyHolderCompilers 2014}	
{ [PATCH] MIPS: Encapsulate type in the PropertyHandlerCompiler. 2014}	{ [PATCH] Encapsulate type in the PropertyHandlerCompiler 2014}	
{ [PATCH] MIPS: Only generate a single normal IC per kind per slow-mode map. 2014}	{ [PATCH] Only generate a single normal IC per kind per slow-mode map. 2014}	
{ [PATCH] MIPS: Clean up name distinction between Keyed ICs and Element Handlers 2014}	{ [PATCH] Clean up name distinction between Keyed ICs and Element Handlers 2014}	
{ [PATCH] MIPS: Remove all compilation related interface from the StubCache. 2014}	{ [PATCH] Remove all compilation related interface from the StubCache 2014}	
{ [PATCH] MIPS: CallIC customization stubs must accept that a vector slot is cleared. 2014}	{ [PATCH] CallIC customization stubs must accept that a vector slot is cleared. 2014}	
{ [PATCH] MIPS: Inline Math.fround in optimized code. 2014}	{ [PATCH] Inline Math.fround in optimized code. 2014}	
{ [PATCH] MIPS: Restructure the IC / Handler compilers 2014}	{ [PATCH] Restructure the IC / Handler compilers 2014}	
{ [PATCH] MIPS: Always use the LoadStubCompiler for Load handlers, also for keyedload handlers. 2014}	{ [PATCH] Always use the LoadStubCompiler for Load handlers, also for keyedload handlers. 2014}	
{ [PATCH] MIPS: Only to the relevant checks in LoadFunctionPrototype. 2014}	{ [PATCH] Only to the relevant checks in LoadFunctionPrototype 2014}	
{ [PATCH] MIPS: Introduce FLAG_vector_ics. 2014}	{ [PATCH] Introduce FLAG_vector_ics. 2014}	
{ [PATCH] MIPS: Cache IC handlers on the prototype's map if possible. 2014}	{ [PATCH] Cache IC handlers on the prototype's map if possible 2014}	
{ [PATCH] MIPS: StubCallInterfaceDescriptor and CallInterfaceDescriptor are unified under a base class InterfaceDescriptor. 2014}	{ [PATCH] StubCallInterfaceDescriptor and CallInterfaceDescriptor are unified under a base class InterfaceDescriptor. 2014}	
{ [PATCH] MIPS: Drop unnecessary receiver validity checks from {Load,Store}IC_Normal. 2014}	{ [PATCH] Drop unnecessary receiver validity checks from {Load,Store}IC_Normal. 2014}	
{ [PATCH] MIPS64:  Reland r22082 "Replace HeapNumber as doublebox with an explicit MutableHeapNumber. 2014}	{ [PATCH] Reland r22082 "Replace HeapNumber as doublebox with an explicit MutableHeapNumber." 2014}	
{ [PATCH] MIPS: Use register parameters in ElementsTransitionGenerator. 2014}	{ [PATCH] Use register parameters in ElementsTransitionGenerator. 2014}	
{ [PATCH] MIPS: Remove ASSERT since there are tons of different ASSIGN variants 2014}	{ [PATCH] Remove ASSERT since there are tons of different ASSIGN variants 2014}	
{ [PATCH] MIPS: This CL simplifies var / const by ensuring the behavior is consistent in itself, and with regular JS semantics; between regular var/const and eval-ed var/const. 2014}	{ [PATCH] This CL simplifies var / const by ensuring the behavior is consistent in itself, and with regular JS semantics; between regular var/const and eval-ed var/const. 2014}	
{ [PATCH] MIPS: slightly reduce deopt tables size. 2014}	{ [PATCH] ARM: sligthly reduce deopt tables size 2014}	
{ [PATCH] MIPS: Use a register spec for StoreIC and KeyedStoreIC. 2014}	{ [PATCH] Use a register spec for StoreIC and KeyedStoreIC. 2014}	
{ [PATCH] MIPS: Fix computed properties on object literals with a double as propertyname. 2014}	{ [PATCH] Fix computed properties on object literals with a double as propertyname. 2014}	
{ [PATCH] MIPS: More OStreamsUse OStreams more often. 2014}	{ [PATCH] More OStreamsUse OStreams more often. 2014}	
{ [PATCH] MIPS: Remove unnecessary check in RegExpExecStub. 2014}	{ [PATCH] Remove unnecessary check in RegExpExecStub. 2014}	
{ [PATCH] MIPS: Start using OStreams. 2014}	{ [PATCH] Start using OStreams. 2014}	
{ [PATCH] MIPS: Clean up the global object naming madness. 2014}	{ [PATCH] Clean up the global object naming madness. 2014}	
{ [PATCH] MIPS: KeyedLoadIC should have same register spec as LoadIC. 2014}	{ [PATCH] KeyedLoadIC should have same register spec as LoadIC. 2014}	
{ [PATCH] MIPS: Use IC register definitions in platform files. 2014}	{ [PATCH] Use IC register definitions in platform files. 2014}	
{ [PATCH] MIPS: Cleanup CallInterfaceDescriptor. 2014}	{ [PATCH] Cleanup CallInterfaceDescriptor 2014}	
{ [PATCH] MIPS: The IC exposes a register definition. 2014}	{ [PATCH] The IC exposes a register definition. 2014}	
{ [PATCH] MIPS: optimize Lithium Allocate. 2014}	{ [PATCH] ARM: optimize Lithium Allocate 2014}	
{ [PATCH] MIPS: Introduce intrinsic to expose debug state to generated code. 2014}	{ [PATCH] Introduce intrinsic to expose debug state to generated code. 2014}	
{ [PATCH] Support LiveEdit on Arm64 2014}	{ [PATCH] Support LiveEdit on ARM 2014}	
{ [PATCH] MIPS: Interrupts must not mask stack overflow. 2014}	{ [PATCH] Interrupts must not mask stack overflow. 2014}	
{ [PATCH] MIPS: Fix unsigned comparison. 2014}	{ [PATCH] Fix unsigned comparisons. 2014}	
{ [PATCH] Revert "MIPS: Reland 21774: Generate KeyedLoadGeneric with Hydrogen" 2014}	{ [PATCH] Revert "Reland 21774: Generate KeyedLoadGeneric with Hydrogen" 2014}	
{ [PATCH] MIPS: Reland 21774: Generate KeyedLoadGeneric with Hydrogen 2014}	{ [PATCH] Reland 21774: Generate KeyedLoadGeneric with Hydrogen 2014}	
{ [PATCH] MIPS: Fixed flooring division by a power of 2, once again... 2014}	{ [PATCH] Fixed flooring division by a power of 2, once again... 2014}	
{ [PATCH] MIPS: Revert 21774: "Generate KeyedLoadGeneric with Hydrogen" 2014}	{ [PATCH] Revert 21774: "Generate KeyedLoadGeneric with Hydrogen" 2014}	
{ [PATCH] MIPS: Generate KeyedLoadGeneric with Hydrogen. 2014}	{ [PATCH] Generate KeyedLoadGeneric with Hydrogen 2014}	
{ [PATCH] MIPS: Simplify string copy in SubStringStub. 2014}	{ [PATCH] Simplify string copy in SubStringStub. 2014}	
{ [PATCH] MIPS: Introduce FieldIndex to unify and abstract property/field offset. 2014}	{ [PATCH] Introduce FieldIndex to unify and abstract property/field offset 2014}	
{ [PATCH] MIPS: Preliminary support for block contexts in hydrogen. 2014}	{ [PATCH] Preliminary support for block contexts in hydrogen. 2014}	
{ [PATCH] MIPS: Improve write barriers in optimized code. 2014}	{ [PATCH] Improve write barriers in optimized code. 2014}	
{ [PATCH] MIPS: Simplify known successor block lowering. 2014}	{ [PATCH] Simplify known successor block lowering. 2014}	
{ [PATCH] MIPS: Refactor HType to get rid of various hacks. 2014}	{ [PATCH] Refactor HType to get rid of various hacks. 2014}	
{ [PATCH] MIPS: Convert String array index/length hash to BitField. 2014}	{ [PATCH] Convert String array index/length hash to BitField 2014}	
{ [PATCH] MIPS: Use TempDoubleRegister. 2014}	{ [PATCH] ARM: use TempDoubleRegister 2014}	
{ [PATCH] MIPS: Avoid HeapObject check in HStoreNamedField. 2014}	{ [PATCH] Avoid HeapObject check in HStoreNamedField. 2014}	
{ [PATCH] MIPS: Skip write barriers in the fast case when setting up local context. 2014}	{ [PATCH] Skip write barriers in the fast case when setting up local context. 2014}	
{ [PATCH] Reland "Customized support for feedback on calls to Array." and follow-up fixes. 2014}	{ [PATCH] Revert "Customized support for feedback on calls to Array." and follow-up fixes. 2014}	
{ [PATCH] MIPS: Customized support for feedback on calls to Array. 2014}	{ [PATCH] Customized support for feedback on calls to Array. 2014}	
{ [PATCH] MIPS: Allow specifying base offset when constructing Keyed hydrogen instructions. 2014}	{ [PATCH] Allow specifying base offset when constructing Keyed hydrogen instructions 2014}	
{ [PATCH] MIPS: Avoid flushing the icache unnecessarily when updating target addresses in code. 2014}	{ [PATCH] Avoid flushing the icache unnecessarily when updating target addresses in code. 2014}	
{ [PATCH] MIPS: Allow comparison in UINT32 mode. 2014}	{ [PATCH] Allow comparison in UINT32 mode. 2014}	
{ [PATCH] Revert "MIPS: Reland r20974: Unify and simplify the FastCloneShallowArrayStub." 2014}	{ [PATCH] Revert "Reland r20974: Unify and simplify the FastCloneShallowArrayStub" 2014}	
{ [PATCH] MIPS: Reland and fix r21225 and r21226. 2014}	{ [PATCH] Reland and fix r21225 and r21226 2014}	
{ [PATCH] MIPS: Improve Array.shift() performance for small arrays. 2014}	{ [PATCH] Improve Array.shift() performance for small arrays. 2014}	
{ [PATCH] MIPS: Fix for 3303 MultithreadedParallelIsolates has a race condition. 2014}	{ [PATCH] Fix for 3303 MultithreadedParallelIsolates has a race condition. 2014}	
{ [PATCH] MIPS: Simplify feedback vector creation and store in SharedFunctionInfo. 2014}	{ [PATCH] Simplify feedback vector creation and store in SharedFunctionInfo. 2014}	
{ [PATCH] MIPS: Unify and simplify the FastCloneShallowArrayStub. 2014}	{ [PATCH] Unify and simplify the FastCloneShallowArrayStub 2014}	
{ [PATCH] MIPS: Return Object* instead of MaybeObject* from runtime calls. 2014}	{ [PATCH] Return Object* instead of MaybeObject* from runtime calls. 2014}	
{ [PATCH] MIPS: Improve code generation for bounds checks. 2014}	{ [PATCH] Improve code generation for bounds checks. 2014}	
{ [PATCH] MIPS: Serializer enable/disable flags need thread safety. 2014}	{ [PATCH] Serializer enable/disable flags need thread safety. 2014}	
{ [PATCH] MIPS: Track up to 5 stable maps as field type. 2014}	{ [PATCH] Track up to 5 stable maps as field type. 2014}	
{ [PATCH] Revert "ES6: Add support for Map/Set forEach" 2014}	{ [PATCH] Revert "ES6: Add support for Map/Set forEach" 2014}	
{ [PATCH] Revert "Implement structural function and array types" 2014}	{ [PATCH] Revert "Implement structural function and array types" 2014}	
{ [PATCH] MIPS: Reland r20692 "Check stack limit in ArgumentAdaptorTrampoline." 2014}	{ [PATCH] Reland r20692 "Check stack limit in ArgumentAdaptorTrampoline." 2014}	
{ [PATCH] MIPS: Reland "Track field types.". 2014}	{ [PATCH] Reland "Track field types.". 2014}	
{ [PATCH] ARM: Do not set FPSCR when converting to clamped uint8 2014}	{ [PATCH] ARM: Do not set FPSCR when converting to clamped uint8 2014}	
{ [PATCH] MIPS: Implement handlified String::Equals and Name::Equals. 2014}	{ [PATCH] Implement handlified String::Equals and Name::Equals. 2014}	
{ [PATCH] MIPS: Reland "Fixed environment assignment for LCheckNonSmi." 2014}	{ [PATCH] Reland "Fixed environment assignment for LCheckNonSmi." 2014}	
{ [PATCH] MIPS: Check in Lithium that allocation size in Smi range. 2014}	{ [PATCH] Check in Lithium that allocation size in Smi range. 2014}	
{ [PATCH] MIPS: Check that environments assigned via AssignEnvironment are actually used. 2014}	{ [PATCH] Check that environments assigned via AssignEnvironment are actually used. 2014}	
{ [PATCH] MIPS: Make invalid LHSs that are calls late errors. 2014}	{ [PATCH] Make invalid LHSs that are calls late errors 2014}	
{ [PATCH] MIPS: Consistently use a separate Lithium instruction for flooring division. 2014}	{ [PATCH] Consistently use a separate Lithium instruction for flooring division. 2014}	
{ [PATCH] MIPS: Fix PrepareKeyedOperand on MIPS. 2014}	{ [PATCH] Fix PrepareKeyedOperand on arm. 2014}	
{ [PATCH] MIPS: Reland and fix "Fix LoadFieldByIndex to take mutable heap-numbers into account." 2014}	{ [PATCH] Reland and fix "Fix LoadFieldByIndex to take mutable heap-numbers into account."" 2014}	
{ [PATCH] MIPS: Refactor optimized in hydrogen only runtime functions. 2014}	{ [PATCH] Refactor optimized in hydrogen only runtime functions. 2014}	
{ [PATCH] MIPS: Replaced unreachable code in DoStoreNamedField by an assertion. 2014}	{ [PATCH] Replaced unreachable code in DoStoreNamedField by an assertion. 2014}	
{ [PATCH] MIPS: Do stack checks while pushing locals. 2014}	{ [PATCH] Do stack checks while pushing locals 2014}	
{ [PATCH] Revert "A64: Now that we have veneers, fix a couple of branches to directly jump to their target." 2014}	{ [PATCH] A64: Now that we have veneers, fix a couple of branches to directly jump to their target. 2014}	
{ [PATCH] Reland "Remove Failure::OutOfMemory propagation and V8::IgnoreOutOfMemoryException." 2014}	{ [PATCH] Revert "Remove Failure::OutOfMemory propagation and V8::IgnoreOutOfMemoryException." 2014}	
{ [PATCH] MIPS: Implement flooring division by a constant via truncating division by a constant. 2014}	{ [PATCH] Implement flooring division by a constant via truncating division by a constant. 2014}	
{ [PATCH] MIPS: Pretenure call new support. 2014}	{ [PATCH] Pretenure call new support. 2014}	
{ [PATCH] MIPS: Array constructor expects AllocationSite or undefined as feedback. 2014}	{ [PATCH] Array constructor expects AllocationSite or undefined as feedback. 2014}	
{ [PATCH] MIPS: Reland "Add out-of-line constant pool support to Arm." 2014}	{ [PATCH] Reland "Add out-of-line constant pool support to Arm." 2014}	
{ [PATCH] MIPS: Tweaked FlooringDiv back to TruncatingDiv again. 2014}	{ [PATCH] Tweaked FlooringDiv back to TruncatingDiv again. 2014}	
{ [PATCH] MIPS: Fixed spec violation of storing to length of a frozen object. 2014}	{ [PATCH] Fixed spec violation of storing to length of a frozen object. 2014}	
{ [PATCH] MIPS: Make invalid LHSs a parse-time (reference) error 2014}	{ [PATCH] Make invalid LHSs a parse-time (reference) error 2014}	
{ [PATCH] MIPS: Fix deoptimization for out-of-line constant pool. 2014}	{ [PATCH] Fix deoptimization for out-of-line constant pool. 2014}	
{ [PATCH] MIPS: Turn StringLengthStub (used by string wrappers only) into a hydrogen stub. 2014}	{ [PATCH] Turn StringLengthStub (used by string wrappers only) into a hydrogen stub. 2014}	
{ [PATCH] MIPS: Remove uses of CanBeNegative() in HMod. 2014}	{ [PATCH] Remove uses of CanBeNegative() in HMod. 2014}	
{ [PATCH] MIPS: Remove uses of RangeCanInclude() in flooring division by power of 2. 2014}	{ [PATCH] Remove uses of RangeCanInclude() in flooring division by power of 2. 2014}	
{ [PATCH] MIPS: Fix uses of range analysis results in HChange. 2014}	{ [PATCH] Fix uses of range analysis results in HChange. 2014}	
{ [PATCH] MIPS: Eliminate extended mode, and other modes clean-up 2014}	{ [PATCH] Eliminate extended mode, and other modes clean-up 2014}	
{ [PATCH] MIPS: Mode clean-up pt 1: rename classic/non-strict mode to sloppy mode. 2014}	{ [PATCH] Mode clean-up pt 1: rename classic/non-strict mode to sloppy mode 2014}	
{ [PATCH] MIPS: Cleanup some of the range uses in ModI/DivI. 2014}	{ [PATCH] Cleanup some of the range uses in ModI/DivI. 2014}	
{ [PATCH] MIPS: Reland "Handle non-power-of-2 divisors in division-like operations". 2014}	{ [PATCH] Reland "Handle non-power-of-2 divisors in division-like operations". 2014}	
{ [PATCH] MIPS: Consistenly handle power-of-2 divisors in division-like operations. 2014}	{ [PATCH] Consistenly handle power-of-2 divisors in division-like operations 2014}	
{ [PATCH] MIPS: Introduce intrinsics for double values in Javascript. 2014}	{ [PATCH] Introduce intrinsics for double values in Javascript. 2014}	
{ [PATCH] Print properly signed displacement in disassembler. 2014}	{ [PATCH] Print properly signed displacement in IA32 disassembler. 2014}	
{ [PATCH] MIPS: Remove all uses of field-tracking flags that do not make decisions but are subject to existing information. 2014}	{ [PATCH] Remove all uses of field-tracking flags that do not make decisions but are subject to existing information. 2014}	
{ [PATCH] MIPS: Push safepoint registers in deferred number-to-i/u only on-demand. 2014}	{ [PATCH] Push safepoint registers in deferred number-to-i/u only on-demand. 2014}	
{ [PATCH] MIPS: Harmony: optimize Math.clz32. 2014}	{ [PATCH] Harmony: optimize Math.clz32. 2014}	
{ [PATCH] MIPS: Second attempt at introducing a premonomorphic state in the call target caches. 2014}	{ [PATCH] Second attempt at introducing a premonomorphic state in the call target caches. 2014}	
{ [PATCH] MIPS: Reland "Allow ICs to be generated for own global proxy." 2014}	{ [PATCH] Reland "Allow ICs to be generated for own global proxy." 2014}	
{ [PATCH] MIPS: Remove arch specific api callback generate functions. 2014}	{ [PATCH] Remove arch specific api callback generate functions 2014}	
{ [PATCH] MIPS: Remove HandlerKindField and just encode the handlerkind as the only extra-ic-state. 2014}	{ [PATCH] Remove HandlerKindField and just encode the handlerkind as the only extra-ic-state. 2014}	
{ [PATCH] MIPS: Don't mix handler flags into regular flag computation. 2014}	{ [PATCH] Don't mix handler flags into regular flag computation. 2014}	
{ [PATCH] MIPS: api accessor store ics should return passed value. 2014}	{ [PATCH] api accessor store ics should return passed value 2014}	
{ [PATCH] MIPS: Fix assignment of function name constant. 2014}	{ [PATCH] Fix assignment of function name constant. 2014}	
{ [PATCH] MIPS: Omit redundant smi checks in write barriers. 2014}	{ [PATCH] Omit redundant smi checks in write barriers. 2014}	
{ [PATCH] MIPS: Adding a type vector to replace type cells. 2014}	{ [PATCH] Adding a type vector to replace type cells. 2014}	
{ [PATCH] MIPS: swap in global proxy on accessors. 2014}	{ [PATCH] swap in global proxy on accessors 2014}	
{ [PATCH] MIPS: let load and store api callbacks use global proxy as receiver. 2014}	{ [PATCH] let load and store api callbacks use global proxy as receiver 2014}	
{ [PATCH] MIPS: Remove CallICs 2014}	{ [PATCH] Remove CallICs 2014}	
{ [PATCH] MIPS: Fix the context check in LoadGlobalFunctionPrototype 2014}	{ [PATCH] Fix the context check in LoadGlobalFunctionPrototype 2014}	
{ [PATCH] MIPS: crankshaft support for api method calls 2014}	{ [PATCH] crankshaft support for api method calls 2014}	
{ [PATCH] MIPS: Turn RegExpConstructResultStub into a HydrogenCodeStub. 2014}	{ [PATCH] Turn RegExpConstructResultStub into a HydrogenCodeStub. 2014}	
{ [PATCH] MIPS: Remove the HValueOf instruction. 2014}	{ [PATCH] Remove the HValueOf instruction. 2014}	
{ [PATCH] MIPS: Fix global object loading in DoWrapReceiver. 2014}	{ [PATCH] ARM: Fix global object loading in DoWrapReceiver. 2014}	
{ [PATCH] MIPS: stub fast api calls 2014}	{ [PATCH] stub fast api calls 2014}	
{ [PATCH] MIPS: Reduce the stack requirements of GetNoCodeAgeSequence. 2014}	{ [PATCH] ARM: Reduce the stack requirements of GetNoCodeAgeSequence. 2014}	
{ [PATCH] MIPS: Remove ArrayPush from the custom call generators, and instead call directly to the handler in crankshaft. 2014}	{ [PATCH] Remove ArrayPush from the custom call generators, and instead call directly to the handler in crankshaft. 2014}	
{ [PATCH] MIPS: Turn FastNewContextStub into a HydrogenCodeStub. 2014}	{ [PATCH] Turn FastNewContextStub into a HydrogenCodeStub. 2014}	
{ [PATCH] MIPS: Reland r18714 'Unify calling to GenerateFastApiCallBody before stubbing it'. 2014}	{ [PATCH] Reland r18714 'Unify calling to GenerateFastApiCallBody before stubbing it' 2014}	
{ [PATCH] MIPS: Zonify types in compiler frontend 2014}	{ [PATCH] Zonify types in compiler frontend 2014}	
{ [PATCH] MIPS: Turn ArrayPush into a stub specialized on the elements kind and argc. 2014}	{ [PATCH] Turn ArrayPush into a stub specialized on the elements kind and argc. 2014}	
{ [PATCH] Revert "Implement in-heap backing store for typed arrays." 2014}	{ [PATCH] Revert "Implement in-heap backing store for typed arrays." 2014}	
{ [PATCH] MIPS: Fix Win32 buildbreak (caused by overriden methods that have disappeared while having the patch out for code review). 2014}	{ [PATCH] Fix Win32 buildbreak (caused by overriden methods that have disappeared while having the patch out for code review). 2014}	
{ [PATCH] Reland "Remove flags argument from EmitCallWithStub" and "MIPS: Remove flags argument from EmitCallWithStub."" 2014}	{ [PATCH] Revert "Remove flags argument from EmitCallWithStub" and "MIPS: Remove flags argument from EmitCallWithStub." 2014}	
{ [PATCH] MIPS: Remove flags argument from EmitCallWithStub. 2014}	{ [PATCH] Remove flags argument from EmitCallWithStub 2014}	
{ [PATCH] MIPS: Remove HCallGlobal and merge uses with HCallNamed. 2014}	{ [PATCH] Remove HCallGlobal and merge uses with HCallNamed. 2014}	
{ [PATCH] MIPS: Get rid of ContextualMode for call ICs. 2014}	{ [PATCH] Get rid of ContextualMode for call ICs. 2014}	
{ [PATCH] MIPS: Remove CALL_AS_FUNCTION and CALL_AS_METHOD. 2014}	{ [PATCH] Remove CALL_AS_FUNCTION and CALL_AS_METHOD. 2014}	
{ [PATCH] MIPS: Make the strict-mode calling convention for contextual calls the default one. 2014}	{ [PATCH] Make the strict-mode calling convention for contextual calls the default one. 2014}	
{ [PATCH] MIPS: Implement sqrt in inline assembly. 2014}	{ [PATCH] ARM: Implement sqrt in inline assembly. 2014}	
{ [PATCH] MIPS: Reland v8:18458 "Load the global proxy from the context of the target function." 2014}	{ [PATCH] Reland v8:18458 "Load the global proxy from the context of the target function." 2014}	
{ [PATCH] Remove flag track-allocation-sites. 2014}	{ [PATCH] Remove flag track-allocation-sites. 2013}	
{ [PATCH] MIPS: Reland "Allocation site support for monomorphic StringAdds in BinaryOps". 2014}	{ [PATCH] Reland "Allocation site support for monomorphic StringAdds in BinaryOps". 2014}	
{ [PATCH] MIPS: Avoid unnecessary branches in array constructor stubs. 2014}	{ [PATCH] [arm] Avoid unnecessary branches in array constructor stubs. 2014}	
{ [PATCH] MIPS: Fix loading of global object in LWrapReceiver. 2014}	{ [PATCH] ARM: fix loading of global object in LWrapReceiver. 2013}	
{ [PATCH] MIPS: Enable optimization of functions with generic switches. 2013}	{ [PATCH] Enable optimization of functions with generic switches. 2013}	
{ [PATCH] MIPS: Fix popping order on ARM. 2013}	{ [PATCH] Fix popping order on ARM. 2013}	
{ [PATCH] MIPS: Properly restore the receiver after the interceptor call. 2013}	{ [PATCH] Properly restore the receiver after the interceptor call. 2013}	
{ [PATCH] MIPS: Fix patching the receiver (global object -> global proxy) after the interceptor. 2013}	{ [PATCH] Fix patching the receiver (global object -> global proxy) after the interceptor. 2013}	
{ [PATCH] MIPS: Fix compilation with clang. 2013}	{ [PATCH] Fix compilation with clang 2013}	
{ [PATCH] MIPS: Fix parameter passing in callback store ics on arm 2013}	{ [PATCH] Fix parameter passing in callback store ics on arm 2013}	
{ [PATCH] MIPS: Tidy up Throw and Mod 2013}	{ [PATCH] ARM: Tidy up Throw and Mod 2013}	
{ [PATCH] MIPS: Refactor BinaryOpIC to be able to use different stubs. 2013}	{ [PATCH] Refactor BinaryOpIC to be able to use different stubs. 2013}	
{ [PATCH] MIPS: Fix HInnerAllocatedObject to use an HValue for the offset. 2013}	{ [PATCH] Fix HInnerAllocatedObject to use an HValue for the offset. 2013}	
{ [PATCH] MIPS: Optimize WrapReceiver 2013}	{ [PATCH] ARM: Optimize WrapReceiver 2013}	
{ [PATCH] MIPS: Remove the obsolete Code::IsPregenerated flag. 2013}	{ [PATCH] Remove the obsolete Code::IsPregenerated flag. 2013}	
{ [PATCH] MIPS: Drop IsPregenerated() and allow_stub_calls flag. 2013}	{ [PATCH] Drop IsPregenerated() and allow_stub_calls flag. 2013}	
{ [PATCH] MIPS: Optimize NumberTagU 2013}	{ [PATCH] ARM: Optimize NumberTagU 2013}	
{ [PATCH] MIPS: Fetch strictmode in the interceptor setter from the IC. 2013}	{ [PATCH] Fetch strictmode in the interceptor setter from the IC. 2013}	
{ [PATCH] MIPS: Fix register usage. 2013}	{ [PATCH] Fix register usage. 2013}	
{ [PATCH] MIPS: Cleanup in the CallStubCompiler. 2013}	{ [PATCH] Cleanup in the CallStubCompiler. 2013}	
{ [PATCH] MIPS: Use the HandlerFrontendHeader in most call compilers. 2013}	{ [PATCH] Use the HandlerFrontendHeader in most call compilers. 2013}	
{ [PATCH] MIPS: Optimize Integer32ToSmi. 2013}	{ [PATCH] ARM: Optimize Integer32ToSmi 2013}	
{ [PATCH] MIPS: Generate TypedArrayInitialize builtin in hydrogen. 2013}	{ [PATCH] Generate TypedArrayInitialize builtin in hydrogen. 2013}	
{ [PATCH] MIPS: Minor cleanup in calling interceptors for loading properties. 2013}	{ [PATCH] Minor cleanup in calling interceptors for loading properties. 2013}	
{ [PATCH] MIPS: Only use Type for compiling load handlers. 2013}	{ [PATCH] Only use Type for compiling load handlers. 2013}	
{ [PATCH] MIPS: Use Type in CheckPrototypes. 2013}	{ [PATCH] Use Type in CheckPrototypes. 2013}	
{ [PATCH] MIPS: Optimize AccessArgumentsAt. 2013}	{ [PATCH] ARM: Optimize AccessArgumentsAt 2013}	
{ [PATCH] MIPS: Replace hard-coded stack frame size literals with StandardFrameConstants::kFixedFrameSizeFromFp. 2013}	{ [PATCH] Replace hard-coded stack frame size literals with StandardFrameConstants::kFixedFrameSizeFromFp 2013}	
{ [PATCH] MIPS: Remove the first_right_arg hack for HMod. 2013}	{ [PATCH] Remove the first_right_arg hack for HMod. 2013}	
{ [PATCH] MIPS: Fixed crashes exposed though fuzzing. 2013}	{ [PATCH] Fixed crashes exposed though fuzzing. 2013}	
{ [PATCH] MIPS: Remove unused StubType's, freeing 2 bits in Code objects. 2013}	{ [PATCH] Remove unused StubType's, freeing 2 bits in Code objects. 2013}	
{ [PATCH] MIPS: Properly initialize desc->origin in the MIPS assembler. 2013}	{ [PATCH] Properly initialize desc->origin in the ARM assembler. 2013}	
{ [PATCH] MIPS: Convert PatchCache (and related methods) to use types rather than objects/maps. 2013}	{ [PATCH] Convert PatchCache (and related methods) to use types rather than objects/maps. 2013}	
{ [PATCH] MIPS: Make HTypeofIsAndBranch accept any representation input 2013}	{ [PATCH] Make HTypeofIsAndBranch accept any representation input 2013}	
{ [PATCH] MIPS: Match max property descriptor length to corresponding bit fields. 2013}	{ [PATCH] Match max property descriptor length to corresponding bit fields 2013}	
{ [PATCH] MIPS: Generate KeyedLoadDictionaryElementStub with Hydrogen 2013}	{ [PATCH] Generate KeyedLoadDictionaryElementStub with Hydrogen 2013}	
{ [PATCH] MIPS: Also support smi in load-ICs. 2013}	{ [PATCH] Also support smi in load-ICs. 2013}	
{ [PATCH] MIPS: Handle all object types (minus smi) in load/store ICs. 2013}	{ [PATCH] Handle all object types (minus smi) in load/store ICs 2013}	
{ [PATCH] MIPS: Remove unused LoadNumber* from macro assembler. 2013}	{ [PATCH] Remove unused LoadNumber* from ARM macro assembler. 2013}	
{ [PATCH] MIPS: Fix usage of EmitBranch in compare-minus-zero-and-branch. 2013}	{ [PATCH] Fix usage of EmitBranch in compare-minus-zero-and-branch. 2013}	
{ [PATCH] MIPS: Introduce %_IsMinusZero. 2013}	{ [PATCH] Introduce %_IsMinusZero. 2013}	
{ [PATCH] MIPS: Add initial hydrogenized NewStringAddStub. 2013}	{ [PATCH] Add initial hydrogenized NewStringAddStub. 2013}	
{ [PATCH] Reland "Implement Math.sin, cos and tan using table lookup and spline interpolation." 2013}	{ [PATCH] Revert "Implement Math.sin, cos and tan using table lookup and spline interpolation." 2013}	
{ [PATCH] MIPS: Reland 17588: Add signed/unsigned 8-bit and 16-bit Representations to Crankshaft. 2013}	{ [PATCH] Reland 17588: Add signed/unsigned 8-bit and 16-bit Representations to Crankshaft 2013}	
{ [PATCH] Revert "Reland [Object.observe] Don't force normalization of elements for observed objects" 2013}	{ [PATCH] Revert "[Object.observe] Don't force normalization of elements for observed objects" 2013}	
{ [PATCH] MIPS: Proper support for deopt_every_n_times option on the x64 and ARM architectures. 2013}	{ [PATCH] Proper support for deopt_every_n_times option on the x64 and ARM architectures. 2013}	
{ [PATCH] MIPS: Turn Load/StoreGlobal into a handler. 2013}	{ [PATCH] Turn Load/StoreGlobal into a handler. 2013}	
{ [PATCH] MIPS: Refine CountOperation of FullCodeGen. 2013}	{ [PATCH] Refine CountOperation of FullCodeGen 2013}	
{ [PATCH] MIPS: Improve implementation of HSeqStringSetChar. 2013}	{ [PATCH] Improve implementation of HSeqStringSetChar. 2013}	
{ [PATCH] MIPS: Correct handling of arrays with callbacks in the prototype chain. 2013}	{ [PATCH] Correct handling of arrays with callbacks in the prototype chain. 2013}	
{ [PATCH] MIPS: Avoid using dd() in Prologue when --optimize-for-size. 2013}	{ [PATCH] Avoid using dd() in Prologue when --optimize-for-size. 2013}	
{ [PATCH] MIPS: Use loop to initialize locals when optimizing for size. 2013}	{ [PATCH] ARM: Use loop to initialize locals when optimizing for size. 2013}	
{ [PATCH] MIPS: Handle constants in new space by making macro-assembler smarter. 2013}	{ [PATCH] Handle constants in new space on arm by making macro-assembler smarter. 2013}	
{ [PATCH] MIPS: Fix uint32-to-smi conversion in Lithium. 2013}	{ [PATCH] Fix uint32-to-smi conversion in Lithium 2013}	
{ [PATCH] MIPS: Add tool to visualize machine code/lithium. 2013}	{ [PATCH] Add tool to visualize machine code/lithium. 2013}	
{ [PATCH] MIPS: Inline number to string conversion for string addition into BinaryOp(Stub). 2013}	{ [PATCH] Inline number to string conversion for string addition into BinaryOp(Stub). 2013}	
{ [PATCH] MIPS: Add support for Token::NE and Token::NE_STRICT to TokenToCondition. 2013}	{ [PATCH] Add support for Token::NE and Token::NE_STRICT to TokenToCondition. 2013}	
{ [PATCH] MIPS: Make TestJSArrayForAllocationMemento less awkward. 2013}	{ [PATCH] Make TestJSArrayForAllocationMemento less awkward. 2013}	
{ [PATCH] MIPS: Truncate booleans to 0/1 in truncating t-to-i. 2013}	{ [PATCH] Truncate booleans to 0/1 in truncating t-to-i. 2013}	
{ [PATCH] MIPS: Remove BaseLoad/StoreStub compilers, and the stub-cache interface duplication. 2013}	{ [PATCH] Remove BaseLoad/StoreStub compilers, and the stub-cache interface duplication. 2013}	
{ [PATCH] Load/Store cannot handle double representation. 2013}	{ [PATCH] Load/Store cannot handle double representation. 2013}	
{ [PATCH] MIPS: Hydrogenisation of binops 2013}	{ [PATCH] Hydrogenisation of binops 2013}	
{ [PATCH] MIPS: Fix test262 failures and x64 compile failure. 2013}	{ [PATCH] Fix test262 failures and x64 compile failure. 2013}	
{ [PATCH] MIPS: Improve and simplify removal of unreachable code. 2013}	{ [PATCH] Improve and simplify removal of unreachable code 2013}	
{ [PATCH] MIPS: Allow function inlining with context change. 2013}	{ [PATCH] ARM: Allow function inlining with context change. 2013}	
{ [PATCH] MIPS: Let the register allocator handle the context register. 2013}	{ [PATCH] ARM: Let the register allocator handle the context register. 2013}	
{ [PATCH] MIPS: Tweak LoadKeyed. 2013}	{ [PATCH] ARM: Tweak LoadKeyed. 2013}	
{ [PATCH] MIPS: Lazily save double registers for HCallRuntime instructions within Hydrogen code stubs. 2013}	{ [PATCH] Lazily save double registers for HCallRuntime instructions within Hydrogen code stubs. 2013}	
{ [PATCH] MIPS: Refactoring PropertyCallbackInfo & FunctionCallbackInfo, step 2. 2013}	{ [PATCH] Refactoring PropertyCallbackInfo & FunctionCallbackInfo, step 2. 2013}	
{ [PATCH] MIPS: Tweak Math.exp. 2013}	{ [PATCH] ARM: Tweak Math.exp. 2013}	
{ [PATCH] MIPS: Less aggressive polling when concurrently compiling for OSR. 2013}	{ [PATCH] Less aggressive polling when concurrently compiling for OSR. 2013}	
{ [PATCH] MIPS: Fixed a bug in CopyBytes() and new test cases for MIPS macro assembler. 2013}	{ [PATCH] Fixed a bug in CopyBytes() and new test cases for ARM macro assembler 2013}	
{ [PATCH] MIPS: Save one branch for normal heap number un-tagging. 2013}	{ [PATCH] Save one branch for normal heap number un-tagging. 2013}	
{ [PATCH] MIPS: Add HLoadRoot hydrogen instruction. 2013}	{ [PATCH] Add HLoadRoot hydrogen instruction. 2013}	
{ [PATCH] MIPS: Move NumberToStringStub::GenerateLookupNumberStringCache to the MacroAssembler. 2013}	{ [PATCH] Move NumberToStringStub::GenerateLookupNumberStringCache to the MacroAssembler. 2013}	
{ [PATCH] MIPS: Turn HCompareHoleAndBranch into a HUnaryControlInstruction. 2013}	{ [PATCH] Turn HCompareHoleAndBranch into a HUnaryControlInstruction. 2013}	
{ [PATCH] MIPS: Tweak StoreKeyed. 2013}	{ [PATCH] ARM: Tweak StoreKeyed. 2013}	
{ [PATCH] MIPS: reland 16744: add context save for GenerateFastApiCall. 2013}	{ [PATCH] reland 16744: add context save for GenerateFastApiCall 2013}	
{ [PATCH] MIPS: Orthogonalize Lithium binary op instructions. 2013}	{ [PATCH] Orthogonalize Lithium binary op instructions. 2013}	
{ [PATCH] MIPS: remove getcurrent from stubs. 2013}	{ [PATCH] remove getcurrent from stubs 2013}	
{ [PATCH] MIPS: Improve SeqStringSetChar implementation. 2013}	{ [PATCH] ARM: Improve SeqStringSetChar implementation. 2013}	
{ [PATCH] MIPS: Bugfix: array constructors that expect a type feedback cell that points to an AllocationSite were being passed the undefined object in some cases. Clearly separate the cases where we have an AllocationSite and where we don't in the general ArrayConstructorStub. 2013}	{ [PATCH] Bugfix: array constructors that expect a type feedback cell that points to an AllocationSite were being passed the undefined object in some cases. Clearly separate the cases where we have an AllocationSite and where we don't in the general ArrayConstructorStub. 2013}	
{ [PATCH] MIPS: Improve code generation for the HRandom instruction. 2013}	{ [PATCH] Improve code generation for the HRandom instruction. 2013}	
{ [PATCH] MIPS: remove most uses of Isolate::Current in arch specific files. 2013}	{ [PATCH] remove most uses of Isolate::Current in arch specific files 2013}	
{ [PATCH] MIPS: thread isolate for EntryHookTrampoline. 2013}	{ [PATCH] thread isolate for EntryHookTrampoline 2013}	
{ [PATCH] MIPS: thread isolate for HConstant::handle. 2013}	{ [PATCH] thread isolate for HConstant::handle 2013}	
{ [PATCH] MIPS: store ics for js api accessors. 2013}	{ [PATCH] store ics for js api accessors 2013}	
{ [PATCH] MIPS: thread isolate for files starting with 'b' and 'c'. 2013}	{ [PATCH] thread isolate for files starting with 'b' and 'c' 2013}	
{ [PATCH] MIPS: Support for DoubleToIStub (truncating). 2013}	{ [PATCH] Arm support for DoubleToIStub (truncating). 2013}	
{ [PATCH] Revert "ConstantPoolSizeAt() should return number of Instructions instead, otherwise, some of the code will be treated as constant pool when printing code in ARM disassembler." 2013}	{ [PATCH] ConstantPoolSizeAt() should return number of Instructions instead, otherwise, some of the code will be treated as constant pool when printing code in ARM disassembler. 2013}	
{ [PATCH] MIPS: Eliminate Smi check when changing from Smi to Integer32 2013}	{ [PATCH] Eliminate Smi check when changing from Smi to Integer32 2013}	
{ [PATCH] MIPS: Eliminate intentional conversion from Smi to Int32 in HMul 2013}	{ [PATCH] Eliminate intentional conversion from Smi to Int32 in HMul 2013}	
{ [PATCH] MIPS: cleanup api callbacks now that handles are never returned directly 2013}	{ [PATCH] cleanup api callbacks now that handles are never returned directly 2013}	
{ [PATCH] MIPS: Fix Cluster Fuzz stack frame corruption bug. 2013}	{ [PATCH] Fix Cluster Fuzz stack frame corruption bug. 2013}	
{ [PATCH] MIPS: Convert FastNewClosureStub into hydrogen. 2013}	{ [PATCH] Convert FastNewClosureStub into hydrogen. 2013}	
{ [PATCH] MIPS: remove old style callbacks 2013}	{ [PATCH] remove old style callbacks 2013}	
{ [PATCH] MIPS: Add a trap_on_abort flag. 2013}	{ [PATCH] Add a trap_on_abort flag 2013}	
{ [PATCH] MIPS: Remove platform-specific dead code for KeyedStores 2013}	{ [PATCH] Remove platform-specific dead code for KeyedStores 2013}	
{ [PATCH] MIPS: Never hchange nan-hole to hole or hole to nan-hole. Only allow changing hole to nan if all uses allow undefined as nan. 2013}	{ [PATCH] Never hchange nan-hole to hole or hole to nan-hole. Only allow changing hole to nan if all uses allow undefined as nan. 2013}	
{ [PATCH] MIPS: Store doubles before calling into the elements transition stub 2013}	{ [PATCH] Store doubles before calling into the elements transition stub on ARM 2013}	
{ [PATCH] MIPS: Make assert more accurate 2013}	{ [PATCH] Make assert more accurate 2013}	
{ [PATCH] MIPS: Replace LoadNamedFieldPolymorphic with explicit branches. 2013}	{ [PATCH] Replace LoadNamedFieldPolymorphic with explicit branches. 2013}	
{ [PATCH] MIPS: Patch to enhance the source code line information for profiler. 2013}	{ [PATCH] Patch to enhance the source code line information for profiler. 2013}	
{ [PATCH] MIPS: First implementation of allocation elimination in Hydrogen. 2013}	{ [PATCH] First implementation of allocation elimination in Hydrogen. 2013}	
{ [PATCH] MIPS: Migrate instance of deprecated maps in HCheckMaps. 2013}	{ [PATCH] Migrate instance of deprecated maps in HCheckMaps. 2013}	
{ [PATCH] MIPS: Replace HCheckPrototypeMaps by explicit map checks of constant values. 2013}	{ [PATCH] Replace HCheckPrototypeMaps by explicit map checks of constant values. 2013}	
{ [PATCH] MIPS: Avoid redundant smi check for Math.abs 2013}	{ [PATCH] Avoid redundant smi check for Math.abs 2013}	
{ [PATCH] MIPS: Add Smi support to Shl 2013}	{ [PATCH] Add Smi support to Shl 2013}	
{ [PATCH] MIPS: Adding Smi support to Add, Sub, Mul, and Bitwise 2013}	{ [PATCH] Adding Smi support to Add, Sub, Mul, and Bitwise 2013}	
{ [PATCH] MIPS: New array bounds check elimination pass (focused on induction variables and bitwise operations). 2013}	{ [PATCH] New array bounds check elimination pass (focused on induction variables and bitwise operations). 2013}	
{ [PATCH] MIPS: Convert CONSTANT_FUNCTION to CONSTANT 2013}	{ [PATCH] Convert CONSTANT_FUNCTION to CONSTANT 2013}	
{ [PATCH] MIPS: Eliminate map checks of constant values. 2013}	{ [PATCH] Eliminate map checks of constant values. 2013}	
{ [PATCH] Introduce kRegisterSize, kPCOnStackSize and kFPOnStackSize constants 2013}	{ [PATCH] Introduce kRegisterSize, kPCOnStackSize and kFPOnStackSize constants 2013}	
{ [PATCH] MIPS: Ensure space for lazy deoptimization before calling IC. 2013}	{ [PATCH] ARM: Ensure space for lazy deoptimization before calling IC. 2013}	
{ [PATCH] MIPS: Prefill pre-allocated memory of folded allocation with one pointer fillers when heap verifier is on. 2013}	{ [PATCH] Prefill pre-allocated memory of folded allocation with one pointer fillers when heap verifier is on. 2013}	
{ [PATCH] MIPS: Improve code aging sequence. 2013}	{ [PATCH] ARM: Improve code aging sequence. 2013}	
{ [PATCH] MIPS: Replace custom builtin invocation instructions by a generic version. 2013}	{ [PATCH] Replace custom builtin invocation instructions by a generic version 2013}	
{ [PATCH] MIPS: Rename AllocationSite::payload to AllocationSite::transition_info 2013}	{ [PATCH] Rename AllocationSite::payload to AllocationSite::transition_info 2013}	
{ [PATCH] MIPS: Refactoring and cleanup of control instructions. 2013}	{ [PATCH] Refactoring and cleanup of control instructions 2013}	
{ [PATCH] Fix stack alignment corruption for MinGW32 build 2013}	{ [PATCH] Fix stack alignment corruption for MinGW32 build 2013}	
{ [PATCH] MIPS: Hydrogen array constructor cleanup and improvements. 2013}	{ [PATCH] Hydrogen array constructor cleanup and improvements 2013}	
{ [PATCH] MIPS: Avoid Unnecessary Smi Checks. 2013}	{ [PATCH] Avoid Unnecessary Smi Checks 2013}	
{ [PATCH] MIPS: Rename Literal::handle to Literal::value 2013}	{ [PATCH] Rename Literal::handle to Literal::value 2013}	
{ [PATCH] MIPS: Use AST's type field and merge types for unary, binary & compare ICs. 2013}	{ [PATCH] Use AST's type field and merge types for unary, binary & compare ICs 2013}	
{ [PATCH] MIPS: Let NaN flow as double into HBranch + some minor improvements 2013}	{ [PATCH] Let NaN flow as double into HBranch + some minor improvements 2013}	
{ [PATCH] MIPS: Generators: Avoid calling into runtime if operand stack is empty 2013}	{ [PATCH] Generators: Avoid calling into runtime if operand stack is empty 2013}	
{ [PATCH] MIPS: Fix stack frame reconstruction for generators with formal arguments. 2013}	{ [PATCH] Fix stack frame reconstruction for generators with formal arguments 2013}	
{ [PATCH] MIPS: Use type feedback for Array (non-constructor) call sites. 2013}	{ [PATCH] Use type feedback for Array (non-constructor) call sites. 2013}	
{ [PATCH] MIPS: Fix constant function transition. Insert return instruction before returning. 2013}	{ [PATCH] Fix constant function transition. Insert return instruction before returning. 2013}	
{ [PATCH] MIPS: Refactor only: Rename JSGlobaPropertyCell to PropertyCell 2013}	{ [PATCH] Refactor only: Rename JSGlobaPropertyCell to PropertyCell 2013}	
{ [PATCH] MIPS: Install a generic handler whenever we fail to update the IC. Ignore select cases in StoreIC since we don't have premonomorphic. 2013}	{ [PATCH] Install a generic handler whenever we fail to update the IC. Ignore select cases in StoreIC since we don't have premonomorphic. 2013}	
{ [PATCH] Notify CPU profiler when calling native getters 2013}	{ [PATCH] Notify CPU profiler when calling native getters 2013}	
{ [PATCH] MIPS: Only extend storage if FIELD 2013}	{ [PATCH] Only extend storage if FIELD 2013}	
{ [PATCH] MIPS: Implement IC support for Constant Function transitions. 2013}	{ [PATCH] Implement IC support for Constant Function transitions. 2013}	
{ [PATCH] MIPS: Delegating yield does not re-box result objects. 2013}	{ [PATCH] Delegating yield does not re-box result objects 2013}	
{ [PATCH] MIPS: Use keyed-call inline caches in delegating yield. 2013}	{ [PATCH] Use keyed-call inline caches in delegating yield 2013}	
{ [PATCH] MIPS: Fix for bug 245480. Calling new Array(a) with a single argument could result in creating a holey array with a packed elements kind. 2013}	{ [PATCH] Fix for bug 245480. Calling new Array(a) with a single argument could result in creating a holey array with a packed elements kind. 2013}	
{ [PATCH] MIPS: Separate Cell and PropertyCell spaces 2013}	{ [PATCH] Separate Cell and PropertyCell spaces 2013}	
{ [PATCH] MIPS: Allow the deoptimizer translation to track de-materialized objects. 2013}	{ [PATCH] Allow the deoptimizer translation to track de-materialized objects. 2013}	
{ [PATCH] MIPS: Allocate generator result objects before unwinding try handlers 2013}	{ [PATCH] Allocate generator result objects before unwinding try handlers 2013}	
{ [PATCH] MIPS: Skip some conditional deopts for Div/Mul when all uses are truncating. 2013}	{ [PATCH] Skip some conditional deopts for Div/Mul when all uses are truncating. 2013}	
{ [PATCH] MIPS: Generator object "next" method takes optional send value. 2013}	{ [PATCH] Generator object "next" method takes optional send value 2013}	
{ [PATCH] MIPS: add a default value for return value 2013}	{ [PATCH] add a default value for return value 2013}	
{ [PATCH] MIPS: Baseline for-of implementation. 2013}	{ [PATCH] Baseline for-of implementation 2013}	
{ [PATCH] MIPS: Assign less environments. 2013}	{ [PATCH] Assign less environments 2013}	
{ [PATCH] MIPS: Add LoadIC_Slow builtin and use it for loading properties from primitive values. 2013}	{ [PATCH] Add LoadIC_Slow builtin and use it for loading properties from primitive values. 2013}	
{ [PATCH] MIPS: Fix LStoreKeyed error when tracing instruction. 2013}	{ [PATCH] Fix LStoreKeyed error when tracing instruction. 2013}	
{ [PATCH] MIPS: Adapt hydrogen-based Array constructor to also support InternalArray and function call versions. 2013}	{ [PATCH] Adapt hydrogen-based Array constructor to also support InternalArray and function call versions. 2013}	
{ [PATCH] MIPS: Turn off allocation site info for crankshafted array constructor calls. 2013}	{ [PATCH] Turn off allocation site info for crankshafted array constructor calls. 2013}	
{ [PATCH] MIPS: Deprecate FACTORY helper macro. 2013}	{ [PATCH] Deprecate FACTORY helper macro. 2013}	
{ [PATCH] MIPS : Collect type feedback for power-of-2 right operands in BinaryOps. 2013}	{ [PATCH] Collect type feedback for power-of-2 right operands in BinaryOps. 2013}	
{ [PATCH] MIPS: Replace DeoptimizeOnUndefined with whitelisting AllowUndefinedAsNan 2013}	{ [PATCH] Replace DeoptimizeOnUndefined with whitelisting AllowUndefinedAsNan 2013}	
{ [PATCH] MIPS: Convert ToBooleanStub to a HydrogenStub. Currently just using the existing HBranch instruction, which is still fully implemented in Lithium. Will refactor HBranch in a next CL. 2013}	{ [PATCH] Convert ToBooleanStub to a HydrogenStub. Currently just using the existing HBranch instruction, which is still fully implemented in Lithium. Will refactor HBranch in a next CL. 2013}	
{ [PATCH] MIPS: Fix AccessArgumentsAt on ARM. Use register for index. 2013}	{ [PATCH] Fix AccessArgumentsAt on ARM. Use register for index. 2013}	
{ [PATCH] MIPS: Update ASSERT on arm to support SmiOrTagged in ClampToUint8 2013}	{ [PATCH] Update ASSERT on arm to support SmiOrTagged in ClampToUint8 2013}	
{ [PATCH] MIPS: Don't explicitly pass requested representations to constants; implement ConstantS 2013}	{ [PATCH] Don't explicitly pass requested representations to constants; implement ConstantS 2013}	
{ [PATCH] MIPS: Update the gap resolver to support Smi constants. 2013}	{ [PATCH] Update the gap resolver to support Smi constants. 2013}	
{ [PATCH] MIPS: Added old data space allocation infrastructure for pretenuring. 2013}	{ [PATCH] Added old data space allocation infrastructure for pretenuring. 2013}	
{ [PATCH] MIPS: Support Smi in CompareIDAndBranch 2013}	{ [PATCH] Support Smi in CompareIDAndBranch 2013}	
{ [PATCH] MIPS: Tag smi-constants as smi. This also fixes code that copies holes into arrays. 2013}	{ [PATCH] Tag smi-constants as smi. This also fixes code that copies holes into arrays. 2013}	
{ [PATCH] MIPS: make isolate accessible from returnvalue 2013}	{ [PATCH] make isolate accessible from returnvalue 2013}	
{ [PATCH] MIPS: Remove HCheckSmi, LCheckSmi and rename LCheckSmiAndReturn to LCheckSmi. 2013}	{ [PATCH] Remove HCheckSmi, LCheckSmi and rename LCheckSmiAndReturn to LCheckSmi. 2013}	
{ [PATCH] MIPS: Fix hole handling, and ensure smi representation is handled properly 2013}	{ [PATCH] Fix hole handling, and ensure smi representation is handled properly 2013}	
{ [PATCH] MIPS: DummyUse if Representation::Tagged()+Type::Smi() to Representation::Smi() 2013}	{ [PATCH] DummyUse if Representation::Tagged()+Type::Smi() to Representation::Smi() 2013}	
{ [PATCH] MIPS: Fix assert on ARM 2013}	{ [PATCH] Fix assert on ARM 2013}	
{ [PATCH] MIPS: Require smi for keyed store to smi. 2013}	{ [PATCH] Require smi for keyed store to smi. 2013}	
{ [PATCH] MIPS: Tag length of FixedArrayBase and smi-array[x] as smi representation 2013}	{ [PATCH] Tag length of FixedArrayBase and smi-array[x] as smi representation 2013}	
{ [PATCH] MIPS: Improve SeqStringSetChar implementation. 2013}	{ [PATCH] Improve SeqStringSetChar implementation. 2013}	
{ [PATCH] MIPS: Always require exact maps. 2013}	{ [PATCH] Always require exact maps. 2013}	
{ [PATCH] MIPS: Omit smi-check for write-barrier unless tagged. 2013}	{ [PATCH] Omit smi-check for write-barrier unless tagged. 2013}	
{ [PATCH] MIPS: Implement HChange support for Smis and use it in Load/StoreNameField 2013}	{ [PATCH] Implement HChange support for Smis and use it in Load/StoreNameField 2013}	
{ [PATCH] MIPS: Handle holes in smi-untag from LoadKeyed requiring hole handling. 2013}	{ [PATCH] Handle holes in smi-untag from LoadKeyed requiring hole handling. 2013}	
{ [PATCH] MIPS: fix arm simulator after 14725 2013}	{ [PATCH] fix arm simulator after 14725 2013}	
{ [PATCH] MIPS: new style of property/function callbacks 2013}	{ [PATCH] new style of property/function callbacks 2013}	
{ [PATCH] MIPS: Unify deoptimizer for JavaScript frames. 2013}	{ [PATCH] Unify deoptimizer for JavaScript frames. 2013}	
{ [PATCH] MIPS: Ensure that soft-deopts don't count against opt_count 2013}	{ [PATCH] Ensure that soft-deopts don't count against opt_count 2013}	
{ [PATCH] MIPS: Only flush SharedFunctionInfo optimized code cache when necessary 2013}	{ [PATCH] Only flush SharedFunctionInfo optimized code cache when necessary 2013}	
{ [PATCH] MIPS: Elide hole checks on KeyedLoads of holey double arrays 2013}	{ [PATCH] Elide hole checks on KeyedLoads of holey double arrays 2013}	
{ [PATCH] MIPS: Track heap objects. 2013}	{ [PATCH] Track heap objects. 2013}	
{ [PATCH] MIPS: Call to the right slow method. 2013}	{ [PATCH] Call to the right slow method. 2013}	
{ [PATCH] MIPS: Use mutable heapnumbers to store doubles in fields. 2013}	{ [PATCH] Use mutable heapnumbers to store doubles in fields. 2013}	
{ [PATCH] MIPS: Becuase of cross-context calls, hydrogen-based Array constructor needs to ensure the array constructor pointer passed in matches that of the current context. 2013}	{ [PATCH] Becuase of cross-context calls, hydrogen-based Array constructor needs to ensure the array constructor pointer passed in matches that of the current context. 2013}	
{ [PATCH] MIPS: Generators return boxed values 2013}	{ [PATCH] Generators return boxed values 2013}	
{ [PATCH] MIPS: Pretenure ASCII cons string in high promotion mode. 2013}	{ [PATCH] Pretenure ASCII cons string in high promotion mode. 2013}	
{ [PATCH] MIPS: Before comparing input with a constant smi in GenerateRecordCallTarget(), make sure the input register is actually a smi. 2013}	{ [PATCH] Before comparing input with a constant smi in GenerateRecordCallTarget(), make sure the input register is actually a smi. 2013}	
{ [PATCH] MIPS: Turn the load field code stub into a hydrogen code stub. 2013}	{ [PATCH] Turn the load field code stub into a hydrogen code stub. 2013}	
{ [PATCH] MIPS: Allow setting debugger breakpoints on CompareNilICs 2013}	{ [PATCH] Allow setting debugger breakpoints on CompareNilICs 2013}	
{ [PATCH] Accurate function prototypes for native calls from ARM simulator. 2013}	{ [PATCH] Accurate function prototypes for native calls from ARM simulator. 2013}	
{ [PATCH] MIPS: Track storage types of instance variables. 2013}	{ [PATCH] Track storage types of instance variables. 2013}	
{ [PATCH] MIPS: Lithium: avoid registers for constants when possible. 2013}	{ [PATCH] Lithium: avoid registers for constants when possible. 2013}	
{ [PATCH] MIPS: HasOnlyAsciiChars can return incorrect results. Fixup usages and rename. 2013}	{ [PATCH] HasOnlyAsciiChars can return incorrect results. Fixup usages and rename. 2013}	
{ [PATCH] MIPS: Constructed arrays can be created with Hydrogen code stubs. The feature is still off by default (--optimize-constructed-arrays). 2013}	{ [PATCH] Constructed arrays can be created with Hydrogen code stubs. The feature is still off by default (--optimize-constructed-arrays). 2013}	
{ [PATCH] MIPS: Capture receiver in generator object 2013}	{ [PATCH] Capture receiver in generator object 2013}	
{ [PATCH] MIPS: Clean up VMState a little bit. 2013}	{ [PATCH] Clean up VMState a little bit. 2013}	
{ [PATCH] MIPS: Generators can resume 2013}	{ [PATCH] Generators can resume 2013}	
{ [PATCH] MIPS: Add monomorphic CompareNilICs and Crankshaft support 2013}	{ [PATCH] Add monomorphic CompareNilICs and Crankshaft support 2013}	
{ [PATCH] MIPS: Disallow dereferencing deferred handles when generating optimized code. 2013}	{ [PATCH] Disallow dereferencing deferred handles when generating optimized code. 2013}	
{ [PATCH] MIPS: ARM: Fix erroneous detection of Double result type in Integer32 BinaryOpStubs 2013}	{ [PATCH] ARM: Fix erroneous detection of Double result type in Integer32 BinaryOpStubs 2013}	
{ [PATCH] MIPS: Improvements in lithium code generation. Recognizing if some operands are constants, we can often save on registers and instructions. 2013}	{ [PATCH] Improvements in lithium code generation. Recognizing if some operands are constants, we can often save on registers and instructions. 2013}	
{ [PATCH] MIPS: Generator objects can suspend 2013}	{ [PATCH] Generator objects can suspend 2013}	
{ [PATCH] MIPS: Add infrastructure to automatucally generate IC miss stubs 2013}	{ [PATCH] Add infrastructure to automatucally generate IC miss stubs 2013}	
{ [PATCH] MIPS: HArgument instructions currently require a frame. In Lithium we can ensure a frame is created for these instructions via a compile info flag. 2013}	{ [PATCH] HArgument instructions currently require a frame. In Lithium we can ensure a frame is created for these instructions via a compile info flag. 2013}	
{ [PATCH] MIPS: Fix bugs in IfBuilder and improve functionality 2013}	{ [PATCH] Fix bugs in IfBuilder and improve functionality 2013}	
{ [PATCH] MIPS: Handle OOM failures correctly in the CEntryStub when embedders set V8::IgnoreOutOfMemoryException() 2013}	{ [PATCH] Handle OOM failures correctly in the CEntryStub when embedders set V8::IgnoreOutOfMemoryException() 2013}	
{ [PATCH] MIPS: Enable pretenuring of fast literals in high promotion mode. 2013}	{ [PATCH] Enable pretenuring of fast literals in high promotion mode. 2013}	
{ [PATCH] MIPS: Accurate function prototypes for native calls from ARM simulator. 2013}	{ [PATCH] Accurate function prototypes for native calls from ARM simulator. 2013}	
{ [PATCH] MIPS: * src/generator.js: Add methods and intialization for generator meta-objects. 2013}	{ [PATCH] * src/generator.js: Add methods and intialization for generator meta-objects. 2013}	
{ [PATCH] MIPS: Disentangle field from transition stores. 2013}	{ [PATCH] Disentangle field from transition stores. 2013}	
{ [PATCH] MIPS: Build fast literals in hydrogen. 2013}	{ [PATCH] Build fast literals in hydrogen. 2013}	
{ [PATCH] MIPS: Fix OSR for nested loops. 2013}	{ [PATCH] Fix OSR for nested loops. 2013}	
{ [PATCH] MIPS: Use PrintF instead of fprintf. 2013}	{ [PATCH] Use PrintF instead of fprintf. 2013}	
{ [PATCH] Fix ARM build. 2013}	{ [PATCH] Fix ARM build 2013}	
{ [PATCH] MIPS: Activate generation of Crankshafted KeyedStores 2013}	{ [PATCH] Activate generation of Crankshafted KeyedStores 2013}	
{ [PATCH] MIPS: Always check global property cells for readonliness before storing. Add check when the global object is the last in the chain. 2013}	{ [PATCH] Always check global property cells for readonliness before storing. Add check when the global object is the last in the chain. 2013}	
{ [PATCH] MIPS: Force context allocation for variables in generator scopes. 2013}	{ [PATCH] Force context allocation for variables in generator scopes. 2013}	
{ [PATCH] MIPS: Compile FastCloneShallowArrayStub using Crankshaft. 2013}	{ [PATCH] Compile FastCloneShallowArrayStub using Crankshaft. 2013}	
{ [PATCH] MIPS: Remove extranous holder load in some prototype-chain checking cases 2013}	{ [PATCH] Remove extranous holder load in some prototype-chain checking cases 2013}	
{ [PATCH] MIPS: Ensure UseRegisterAtStart not used with fixed temp/return register 2013}	{ [PATCH] Ensure UseRegisterAtStart not used with fixed temp/return register 2013}	
{ [PATCH] MIPS: Fix hydrogen tracing on x64 and ARM 2013}	{ [PATCH] Fix hydrogen tracing on x64 and ARM 2013}	
{ [PATCH] MIPS: Deoptimizer support for hydrogen stubs that accept a variable number of arguments. 2013}	{ [PATCH] Deoptimizer support for hydrogen stubs that accept a variable number of arguments. 2013}	
{ [PATCH] MIPS: Generalizing remaining Allocate functions in the macro assemblers used in pretenuring. 2013}	{ [PATCH] Generalizing remaining Allocate functions in the macro assemblers used in pretenuring. 2013}	
{ [PATCH] MIPS: Change LookupForWrite to always do a full lookup and check the result. 2013}	{ [PATCH] Change LookupForWrite to always do a full lookup and check the result. 2013}	
{ [PATCH] MIPS: ES6 symbols: turn symbols into a proper primitive type 2013}	{ [PATCH] ES6 symbols: turn symbols into a proper primitive type 2013}	
{ [PATCH] MIPS: Implement many KeyedStoreStubs using Crankshaft 2013}	{ [PATCH] Implement many KeyedStoreStubs using Crankshaft 2013}	
{ [PATCH] MIPS: HInnerAllocatedObject instruction allows hydrogen code to carve up allocated regions into sub objects. 2013}	{ [PATCH] HInnerAllocatedObject instruction allows hydrogen code to carve up allocated regions into sub objects. 2013}	
{ [PATCH] MIPS: Allow direct allocation in old pointer space. 2013}	{ [PATCH] Allow direct allocation in old pointer space. 2013}	
{ [PATCH] MIPS: Load/Store stub compilation refactoring. 2013}	{ [PATCH] Load/Store stub compilation refactoring. 2013}	
{ [PATCH] MIPS: Refactoring Store ICs. A first step towards polymorphic store ICs. 2013}	{ [PATCH] Refactoring Store ICs. A first step towards polymorphic store ICs. 2013}	
{ [PATCH] MIPS: To fully support hydrogen code stubs which accept a variable number of arguments, the HReturn/LReturn instruction needs to be able to determine argument count from a stack evaluation rather than as a constant from scope. 2013}	{ [PATCH] To fully support hydrogen code stubs which accept a variable number of arguments, the HReturn/LReturn instruction needs to be able to determine argument count from a stack evaluation rather than as a constant from scope. 2013}	
{ [PATCH] MIPS: Fix white space matching in latin-1 strings wrt \u00a0. 2013}	{ [PATCH] Fix white space matching in latin-1 strings wrt \u00a0. 2013}	
{ [PATCH] Use direct jump and call instruction for X64 when the deoptimization entries are in the code range. 2013}	{ [PATCH] Use direct jump and call instruction for X64 when the deoptimization entries are in the code range. 2013}	
{ [PATCH] MIPS: Unify deoptimizer for stub failure trampoline frames. 2013}	{ [PATCH] Unify deoptimizer for stub failure trampoline frames. 2013}	
{ [PATCH] MIPS: Unify grow mode and stub kind 2013}	{ [PATCH] Unify grow mode and stub kind 2013}	
{ [PATCH] MIPS: Cleaned up CpuFeature scope handling. 2013}	{ [PATCH] Cleaned up CpuFeature scope handling. 2013}	
{ [PATCH] MIPS: Make IC patching resilient to flushing of the original target() ic. 2013}	{ [PATCH] Make IC patching resilient to flushing of the original target() ic. 2013}	
{ [PATCH] MIPS: ES6 symbols: Allow symbols as property names 2013}	{ [PATCH] ES6 symbols: Allow symbols as property names 2013}	
{ [PATCH] MIPS: Polymorphism support for load IC. 2013}	{ [PATCH] Polymorphism support for load IC. 2013}	
{ [PATCH] MIPS: ES6 symbols: Implement Symbol intrinsic and basic functionality 2013}	{ [PATCH] ES6 symbols: Implement Symbol intrinsic and basic functionality 2013}	
{ [PATCH] MIPS: A debug code assert needed to be behind the new optimize_constructed_arrays flag. 2013}	{ [PATCH] A debug code assert needed to be behind the new optimize_constructed_arrays flag. 2013}	
{ [PATCH] MIPS: Allocation Info Tracking, continued. 2013}	{ [PATCH] Allocation Info Tracking, continued. 2013}	
{ [PATCH] Fix cast warnings on Win32 2013}	{ [PATCH] Fix cast warning on Win32 2013}	
{ [PATCH] MIPS: Renamed "symbols" to "internalized strings" throughout the code base, in preparation of the introduction of ES6 'symbols' (aka private/unique names). 2013}	{ [PATCH] Renamed "symbols" to "internalized strings" throughout the code base, in preparation of the introduction of ES6 'symbols' (aka private/unique names). 2013}	
{ [PATCH] MIPS: Minor cleanup of CompareIC state 2013}	{ [PATCH] Minor cleanup of CompareIC state 2013}	
{ [PATCH] MIPS: Fix materialization of arguments objects with unknown values. 2013}	{ [PATCH] Fix materialization of arguments objects with unknown values. 2013}	
{ [PATCH] MIPS: Compile FastCloneShallowObjectStub using Crankshaft. 2013}	{ [PATCH] Compile FastCloneShallowObjectStub using Crankshaft. 2013}	
{ [PATCH] MIPS: Refactor RegExpStub to check lazily. 2013}	{ [PATCH] Refactor RegExpStub to check lazily. 2013}	
{ [PATCH] MIPS: Combine %_SubString and %_StringCharAt. 2013}	{ [PATCH] Combine %_SubString and %_StringCharAt. 2013}	
{ [PATCH] MIPS: Split AccessorInfo into DeclaredAccessorInfo and ExecutableAccessorInfo 2013}	{ [PATCH] Split AccessorInfo into DeclaredAccessorInfo and ExecutableAccessorInfo 2013}	
{ [PATCH] MIPS: Support pass-through of stub caller arguments 2013}	{ [PATCH] Support pass-through of stub caller arguments 2013}	
{ [PATCH] MIPS: Generate the TransitionElementsStub using Crankshaft 2013}	{ [PATCH] Generate the TransitionElementsStub using Crankshaft 2013}	
{ [PATCH] MIPS: Add separate flag for --trace-stub-failures 2013}	{ [PATCH] Add separate flag for --trace-stub-failures 2013}	
{ [PATCH] MIPS: Fix bugs in DeoptimizeIf when lazy deopt is requested. 2013}	{ [PATCH] Fix bugs in DeoptimizeIf when lazy deopt is requested. 2013}	
{ [PATCH] MIPS: Merge KeyedLoad and NamedLoad stub compiler code. 2013}	{ [PATCH] Merge KeyedLoad and NamedLoad stub compiler code. 2013}	
{ [PATCH] MIPS: Support slow-mode prototypes for load and call ICs. 2013}	{ [PATCH] Support slow-mode prototypes for load and call ICs. 2013}	
{ [PATCH] MIPS: Fix Mac problem with stubs initialization 2013}	{ [PATCH] Fix Mac problem with stubs initialization 2013}	
{ [PATCH] MIPS: Add StubFailureTrampolineFrames 2013}	{ [PATCH] Add StubFailureTrampolineFrames 2013}	
{ [PATCH] MIPS: Replace store array length builtin with codestub. 2013}	{ [PATCH] Replace store array length builtin with codestub. 2013}	
{ [PATCH] MIPS: Avoid handle dereference during graph optimization. 2013}	{ [PATCH] Avoid handle dereference during graph optimization. 2013}	
{ [PATCH] MIPS: Make HCheckPrototypeMaps compatible with parallel recompilation. 2013}	{ [PATCH] Make HCheckPrototypeMaps compatible with parallel recompilation. 2013}	
{ [PATCH] MIPS: Migrate FunctionPrototype (Keyed|Named)LoadIC to CodeStub 2013}	{ [PATCH] Migrate FunctionPrototype (Keyed|Named)LoadIC to CodeStub 2013}	
{ [PATCH] MIPS: Migrate ArrayLength (Keyed|Named)LoadIC to CodeStub 2013}	{ [PATCH] Migrate ArrayLength (Keyed|Named)LoadIC to CodeStub 2013}	
{ [PATCH] MIPS: Replace special IC builtins and stubs in the map's cache by codestubs. 2013}	{ [PATCH] Replace special IC builtins and stubs in the map's cache by codestubs. 2013}	
{ [PATCH] MIPS: Additional work to get array literal allocation tracking working, even with --always-opt 2013}	{ [PATCH] Additional work to get array literal allocation tracking working, even with --always-opt 2013}	
{ [PATCH] MIPS: Don't emit code for instructions that are hiding behind an HSoftDeoptimize 2013}	{ [PATCH] Don't emit code for instructions that are hiding behind an HSoftDeoptimize 2013}	
{ [PATCH] Optimize the emitted instruction of random function for X64 2013}	{ [PATCH] Optimize the emitted instruction of random function for X64 2013}	
{ [PATCH] MIPS: Some more instrumentation to narrow down Failure leaks. 2013}	{ [PATCH] Some more instrumentation to narrow down Failure leaks. 2013}	
{ [PATCH] MIPS: Remove move ascii data hint for one byte strings 2013}	{ [PATCH] Remove move ascii data hint for one byte strings 2013}	
{ [PATCH] MIPS: Continues Latin-1 support. All tests pass with ENABLE_LATIN_1 flag. 2013}	{ [PATCH] Continues Latin-1 support. All tests pass with ENABLE_LATIN_1 flag. 2013}	
{ [PATCH] MIPS: Generalize calling to C++ on stub deopt 2013}	{ [PATCH] Generalize calling to C++ on stub deopt 2013}	
{ [PATCH] MIPS: Elide unnecessary context reload in generated stubs. 2013}	{ [PATCH] Elide unnecessary context reload in generated stubs. 2012}	
{ [PATCH] MIPS: Re-land Crankshaft-generated KeyedLoad stubs. 2013}	{ [PATCH] Re-land Crankshaft-generated KeyedLoad stubs. 2012}	
{ [PATCH] MIPS: Fix ARM code for DoModI. 2013}	{ [PATCH] Fix ARM code for DoModI. 2012}	
{ [PATCH] MIPS: Enable type feedback for branch statement and function call 2013}	{ [PATCH] Enable type feedback for branch statement and function call 2012}	
{ [PATCH] MIPS: ARM: fix a bug with saving lr register in GenerateSmiToDouble. 2012}	{ [PATCH] ARM: fix a bug with saving lr register in GenerateSmiToDouble. 2012}	
{ [PATCH] Remove redundant loads in DoCheckMaps Hoist the loop-invariant load out of the loop and call the other CheckMap function BUG=none TEST=none 2012}	{ [PATCH] Remove redundant loads in DoCheckMaps Hoist the loop-invariant load out of the loop and call the other CheckMap function BUG=none TEST=none 2012}	
{ [PATCH] MIPS: Improve array to string conversion. 2012}	{ [PATCH] Improve array to string conversion. 2012}	
{ [PATCH] Enable stub generation using Hydrogen/Lithium (again) 2012}	{ [PATCH] Enable stub generation using Hydrogen/Lithium (again) 2012}	
{ [PATCH] MIPS: Also time external callbacks from generated code. 2012}	{ [PATCH] Also time external callbacks from generated code. 2012}	
{ [PATCH] MIPS: Faster implementation of Math.exp() 2012}	{ [PATCH] Faster implementation of Math.exp() 2012}	
{ [PATCH] MIPS: Fix register confusion in non-VFP3 BinaryOpStubs on ARM 2012}	{ [PATCH] Fix register confusion in non-VFP3 BinaryOpStubs on ARM 2012}	
{ [PATCH] MIPS: Only fill in holes if storing the number to the double array has succeeded. 2012}	{ [PATCH] Only fill in holes if storing the number to the double array has succeeded. 2012}	
{ [PATCH] MIPS: Ensure we do not clobber the register holding the elements backing store. 2012}	{ [PATCH] Ensure we do not clobber the register holding the elements backing store. 2012}	
{ [PATCH] MIPS: Ensure double arrays are filled with holes when extended from variations of empty arrays. 2012}	{ [PATCH] Ensure double arrays are filled with holes when extended from variations of empty arrays. 2012}	
{ [PATCH] MIPS: Get rid of static module allocation, do it in code. 2012}	{ [PATCH] Get rid of static module allocation, do it in code. 2012}	
{ [PATCH] MIPS: Support all fast elements kinds in the major array operations. Currently missing support for unshift. 2012}	{ [PATCH] Support all fast elements kinds in the major array operations. Currently missing support for unshift. 2012}	
{ [PATCH] MIPS: Lattice-based representation inference, powered by left/right specific type feedback for BinaryOps and comparisons 2012}	{ [PATCH] Lattice-based representation inference, powered by left/right specific type feedback for BinaryOps and comparisons 2012}	
{ [PATCH] MIPS: Add rotate-right instruction to hydrogen and use it instead of bitwise operations of the form ((x >>> i) | (x << (32 - i))). 2012}	{ [PATCH] Add rotate-right instruction to hydrogen and use it instead of bitwise operations of the form ((x >>> i) | (x << (32 - i))). 2012}	
{ [PATCH] MIPS: Add code again to allow reclaiming old unexecuted functions. 2012}	{ [PATCH] Add code again to allow reclaiming old unexecuted functions. 2012}	
{ [PATCH] MIPS: Consolidated all the key store/load classes in the Hydrogen and Lithium space into just two: HLoadKeyed/HLoadKeyedGeneric and HStoreKeyed/HStoreKeyedGeneric LLoadKeyed/LLoadKeyedGeneric and LStoreKeyed/LStoreKeyedGeneric 2012}	{ [PATCH] Consolidated all the key store/load classes in the Hydrogen and Lithium space into just two: HLoadKeyed/HLoadKeyedGeneric and HStoreKeyed/HStoreKeyedGeneric LLoadKeyed/LLoadKeyedGeneric and LStoreKeyed/LStoreKeyedGeneric BUG= 2012}	
{ [PATCH] MIPS: Use movw/movt instead of constant pool on ARMv7. 2012}	{ [PATCH] Use movw/movt instead of constant pool on ARMv7. 2012}	
{ [PATCH] MIPS: Sharing of descriptor arrays. 2012}	{ [PATCH] Sharing of descriptor arrays. 2012}	
{ [PATCH] Improve the assembly code for power function with integer exponential on x64 2012}	{ [PATCH] Improve the assembly code for power function with integer exponential. 2012}	
{ [PATCH] MIPS: First steps towards named Litihium operands. 2012}	{ [PATCH] First steps towards named Litihium operands. 2012}	
{ [PATCH] MIPS: Use a special EnumLength field to indicate number of valid enum cache values. 2012}	{ [PATCH] Use a special EnumLength field to indicate number of valid enum cache values. 2012}	
{ [PATCH] MIPS: Fix rounding in Uint8ClampedArray setter. 2012}	{ [PATCH] Fix rounding in Uint8ClampedArray setter. 2012}	
{ [PATCH] MIPS: Check that index and length are Smi in bounds check. 2012}	{ [PATCH] Check that index and length are Smi in bounds check. 2012}	
{ [PATCH] MIPS: Fix write barrier for StoreKeyedFastElements on ARM. 2012}	{ [PATCH] Fix write barrier for StoreKeyedFastElements on ARM 2012}	
{ [PATCH] MIPS: Swapped transition array and descriptor array. 2012}	{ [PATCH] Swapped transition array and descriptor array. 2012}	
{ [PATCH] MIPS: Check for function in %_CallFunction. 2012}	{ [PATCH] Check for function in %_CallFunction. 2012}	
{ [PATCH] MIPS: Fix improved LoadICs for dictionaries with callbacks. 2012}	{ [PATCH] Fix improved LoadICs for dictionaries with callbacks. 2012}	
{ [PATCH] Inline simple setter calls. 2012}	{ [PATCH] Inline simple getter calls. 2012}	
{ [PATCH] MIPS: Improve constant element index access code generation 2012}	{ [PATCH] Improve constant element index access code generation 2012}	
{ [PATCH] MIPS: Refactor Math.min/max to be a single HInstruction. 2012}	{ [PATCH] Refactor Math.min/max to be a single HInstruction. 2012}	
{ [PATCH] MIPS: Optimize Smi keys for KeyedLoads 2012}	{ [PATCH] Optimize Smi keys for KeyedLoads 2012}	
{ [PATCH] MIPS: Optimize functions on a second thread. 2012}	{ [PATCH] Optimize functions on a second thread. 2012}	
{ [PATCH] MIPS: Fix transcendental cache on ARM in optimized code. 2012}	{ [PATCH] Fix transcendental cache on ARM in optimized code. 2012}	
{ [PATCH] Revert 12083: Implements a new API to set a function entry hook for profiling. 2012}	{ [PATCH] Revert 12069: Implements a new API to set a function entry hook for profiling 2012}	
{ [PATCH] MIPS: Defer creating Handles for HConstants to the code generation phase. 2012}	{ [PATCH] Defer creating Handles for HConstants to the code generation phase. 2012}	
{ [PATCH] MIPS: Ensure that all descriptors have a valid enumeration index, and replace NextEnumIndex with LastAdded. 2012}	{ [PATCH] Ensure that all descriptors have a valid enumeration index, and replace NextEnumIndex with LastAdded. 2012}	
{ [PATCH] MIPS: Swap bitfield3 and backpointer. 2012}	{ [PATCH] Swap bitfield3 and backpointer. 2012}	
{ [PATCH] MIPS: Share optimized code for closures. 2012}	{ [PATCH] Share optimized code for closures. 2012}	
{ [PATCH] MIPS: Fix packed-element.js test on ARM with no snap 2012}	{ [PATCH] Fix packed-element.js test on ARM with no snap 2012}	
{ [PATCH] MIPS: Eliminate redundant smi checks 2012}	{ [PATCH] Eliminate redundant smi checks 2012}	
{ [PATCH] MIPS: Remove TLS access for current Zone. 2012}	{ [PATCH] Remove TLS access for current Zone. 2012}	
{ [PATCH] MIPS: Reland r11753: Fix try..finally. 2012}	{ [PATCH] Reland r11753: Fix try..finally. 2012}	
{ [PATCH] MIPS: Implement correct checking for inherited readonliness on assignment. 2012}	{ [PATCH] Implement correct checking for inherited readonliness on assignment. 2012}	
{ [PATCH] MIPS: Array index computation dehoisting. 2012}	{ [PATCH] Array index computation dehoisting. 2012}	
{ [PATCH] MIPS: Implement loop for global regexps in regexp assembler. 2012}	{ [PATCH] Implement loop for global regexps in regexp assembler. 2012}	
{ [PATCH] MIPS: Fix register clobbering in LoadIC for interceptors. 2012}	{ [PATCH] Fix register clobbering in LoadIC for interceptors. 2012}	
{ [PATCH] MIPS: Implement clearing of CompareICs. 2012}	{ [PATCH] Implement clearing of CompareICs. 2012}	
{ [PATCH] MIPS: Reduce size of LIR instruction by one word and remove dead code. 2012}	{ [PATCH] Reduce size of LIR instruction by one word and remove dead code. 2012}	
{ [PATCH] MIPS: Fix LFastLiteral to check boilerplate elements kind. 2012}	{ [PATCH] Fix LFastLiteral to check boilerplate elements kind. 2012}	
{ [PATCH] Optimise Math.floor(x/y) to use integer division for specific divisor. 2012}	{ [PATCH] optimise Math.floor(x/y) to use integer divisiion for specific divisor. 2012}	
{ [PATCH] MIPS: Port function call type-feedback cells to x64 and ARM. 2012}	{ [PATCH] Port function call type-feedback cells to x64 and ARM. 2012}	
{ [PATCH] MIPS: Implement rudimentary module linking. 2012}	{ [PATCH] Implement rudimentary module linking. 2012}	
{ [PATCH] MIPS: Refactor code generation for global declarations. 2012}	{ [PATCH] Refactor code generation for global declarations. 2012}	
{ [PATCH] MIPS: Refactoring of code generation for declarations, in preparation for modules. 2012}	{ [PATCH] Refactoring of code generation for declarations, in preparation for modules. 2012}	
{ [PATCH] MIPS: Make SubStringStub more robust with unsafe arguments. 2012}	{ [PATCH] Make SubStringStub more robust wrt unsafe arguments. 2012}	
{ [PATCH] MIPS: Skip canonicalization check in LStoreKeyedFastDoubleElement when it is not needed 2012}	{ [PATCH] Skip canonicalization check in LStoreKeyedFastDoubleElement when it is not needed: 2012}	
{ [PATCH] MIPS: Add isolate accessor to AccessorInfo and Arguments. 2012}	{ [PATCH] Add isolate accessor to AccessorInfo and Arguments. 2012}	
{ [PATCH] MIPS: Improve performance of keyed loads/stores which have a HeapNumber index. 2012}	{ [PATCH] Improve performance of keyed loads/stores which have a HeapNumber index. 2012}	
{ [PATCH] MIPS: First implementation of fast path for instantiation of array literals composed of doubles. 2012}	{ [PATCH] First implementation of fast path for instantiation of array literals composed of doubles. 2012}	
{ [PATCH] Port count-based profiler to x64 2012}	{ [PATCH] Port count-based profiler to ARM 2012}	
{ [PATCH] MIPS: Improve polymorphic loads on single slots. 2012}	{ [PATCH] Improve polymorphic loads on single slots. 2012}	
{ [PATCH] MIPS: Support arguments object access from inlined functions. 2012}	{ [PATCH] Support arguments object access from inlined functions. 2012}	
{ [PATCH] MIPS: Inline functions that use arguments object in f.apply(o, arguments) pattern. 2012}	{ [PATCH] Inline functions that use arguments object in f.apply(o, arguments) pattern. 2012}	
{ [PATCH] MIPS: Introduce basic type feedback for for-in statements to avoid deopts. 2012}	{ [PATCH] Introduce basic type feedback for for-in statements to avoid deopts. 2012}	
{ [PATCH] MIPS: Port r10939 to x64 and arm (inline Math.random in crankshaft). 2012}	{ [PATCH] Port r10939 to x64 and arm (inline Math.random in crankshaft). 2012}	
{ [PATCH] MIPS: Inline ordered relational compares of mixed double/undefined values. 2012}	{ [PATCH] Inline ordered relational compares of mixed double/undefined values. 2012}	
{ [PATCH] MIPS: Implement inlined object allocation in Crankshaft. 2012}	{ [PATCH] Implement inlined object allocation in Crankshaft. 2012}	
{ [PATCH] MIPS: Support fast case for-in in Crankshaft. 2012}	{ [PATCH] Support fast case for-in in Crankshaft. 2012}	
{ [PATCH] MIPS: Pass zone explicitly to zone-allocation on x64 and ARM. 2012}	{ [PATCH] Pass zone explicitly to zone-allocation on x64 and ARM. 2012}	
{ [PATCH] MIPS: Implement inlining of constructor calls. 2012}	{ [PATCH] Implement inlining of constructor calls. 2012}	
{ [PATCH] MIPS: Profiler experiments: Fix debugger in the presence of self-optimization headers 2012}	{ [PATCH] Profiler experiments: Fix debugger in the presence of self-optimization headers 2012}	
{ [PATCH] MIPS: Enable optimization of top-level code and generate deoptimization support lazily. 2012}	{ [PATCH] Enable optimization of top-level code and generate deoptimization support lazily. 2012}	
{ [PATCH] MIPS: Initial support for count-based profiling 2012}	{ [PATCH] Initial support for count-based profiling 2012}	
{ [PATCH] MIPS: Split AST Declaration class, in preparation for new module declaration forms. 2012}	{ [PATCH] Split AST Declaration class, in preparation for new module declaration forms. 2012}	
{ [PATCH] MIPS: Implement KeyedStoreICs to grow arrays on out-of-bound stores. 2012}	{ [PATCH] Implement KeyedStoreICs to grow arrays on out-of-bound stores. 2012}	
{ [PATCH] MIPS: Count-based profiling for primitive functions (hidden behind a flag) 2012}	{ [PATCH] Count-based profiling for primitive functions (hidden behind a flag) 2012}	
{ [PATCH] MIPS: Convert fast smi-only to fast object in generated code for array push. 2012}	{ [PATCH] Convert fast smi-only to fast object in generated code for array push. 2012}	
{ [PATCH] MIPS: Handle single element array growth + transition in generic KeyedStoreIC 2012}	{ [PATCH] Handle single element array growth + transition in generic KeyedStoreIC 2012}	
{ [PATCH] MIPS: Fix for assertion failure on kraken on ARM (Issue 1923). 2012}	{ [PATCH] Fix for assertion failure on kraken on ARM (Issue 1923). 2012}	
{ [PATCH] MIPS: Some assembler-level optimizations on ARM. 2012}	{ [PATCH] Some assembler-level optimizations on ARM. 2012}	
{ [PATCH] MIPS: Improve register allocation for Lithium representation changes on ARM 2012}	{ [PATCH] Improve register allocation for Lithium representation changes on ARM 2012}	
{ [PATCH] MIPS: Fix and adapt debugger for new call target caches. 2012}	{ [PATCH] Fix and adapt debugger for new call target caches. 2012}	
{ [PATCH] MIPS: Implement target cache for constructor calls. 2012}	{ [PATCH] Implement target cache for constructor calls. 2012}	
{ [PATCH] MIPS: Store transitioned JSArray maps in global context 2012}	{ [PATCH] Store transitioned JSArray maps in global context 2012}	
{ [PATCH] MIPS: Support inlining at call-sites with mismatched number of arguments. 2012}	{ [PATCH] Support inlining at call-sites with mismatched number of arguments. 2012}	
{ [PATCH] MIPS: Change inlined cache of intanceof stub to use indirection through cell. 2012}	{ [PATCH] Change inlined cache of intanceof stub to use indirection through cell. 2012}	
{ [PATCH] MIPS: Allow call-known-global and call-constant-function to be used for call-sites with mismatched number of arguments. 2012}	{ [PATCH] Allow call-known-global and call-constant-function to be used for call-sites with mismatched number of arguments. 2012}	
{ [PATCH] MIPS: Fix for an ARM register allocation bug. 2012}	{ [PATCH] Fix for an ARM register allocation bug. 2012}	
{ [PATCH] MIPS: Tiny improvement of register constraints in LClassOfTest instructions. 2012}	{ [PATCH] Tiny improvement of register constraints in LClassOfTest instructions. 2012}	
{ [PATCH] MIPS: Inlining Math.min and Math.max in crankshaft. 2012}	{ [PATCH] Inlining Math.min and Math.max in crankshaft. 2012}	
{ [PATCH] MIPS: Avoid embedding new space objects into code objects in the lithium gap resolver. 2012}	{ [PATCH] Avoid embedding new space objects into code objects in the lithium gap resolver. 2011}	
{ [PATCH] MIPS: Undo allocation of half-formed array during elements transition 2012}	{ [PATCH] Undo allocation of half-formed array during elements transition 2012}	
{ [PATCH] MIPS: Add InternalArrayCodeGeneric 2012}	{ [PATCH] Add InternalArrayCodeGeneric 2011}	
{ [PATCH] MIPS: Ensure that InternalArrays remain InternalArrays regardless of how they are constructed. 2012}	{ [PATCH] Ensure that InternalArrays remain InternalArrays regardless of how they are constructed. 2011}	
{ [PATCH] MIPS: Support Smi->Double->HeapObject transitions in constructed Arrays. 2011}	{ [PATCH] Support Smi->Double->HeapObject transitions in constructed Arrays. 2011}	
{ [PATCH] MIPS: Clean up handling of global cell stores in the optimizing compiler. 2011}	{ [PATCH] Clean up handling of global cell stores in the optimizing compiler. 2011}	
{ [PATCH] Porting r10252 to ARM (handle external strings in generated code when concatenating short strings). 2011}	{ [PATCH] Porting r10252 to x64 (handle external strings in generated code when concatenating short strings). 2011}	
{ [PATCH] MIPS: Hydrogen support for context allocated harmony bindings. 2011}	{ [PATCH] Hydrogen support for context allocated harmony bindings. 2011}	
{ [PATCH] MIPS: Port Math.pow inlining to ARM. 2011}	{ [PATCH] Port Math.pow inlining to ARM. 2011}	
{ [PATCH] MIPS: Reland 10216 -  Optimize the equality check case of ICCompare stubs. 2011}	{ [PATCH] Reland 10216 -  Optimize the equality check case of ICCompare stubs. 2011}	
{ [PATCH] MIPS: Optimize Crankshaft array literal initialization from boilerplate. 2011}	{ [PATCH] Optimize Crankshaft array literal initialization from boilerplate. 2011}	
{ [PATCH] MIPS: Port array literal changes on ARM. 2011}	{ [PATCH] Port array literal changes on ARM. 2011}	
{ [PATCH] MIPS: Implement crankshaft support for nested object literals. 2011}	{ [PATCH] Implement crankshaft support for nested object literals. 2011}	
{ [PATCH] MIPS: Add external strings support to regexp in generated code. 2011}	{ [PATCH] Add external strings support to regexp in generated code. 2011}	
{ [PATCH] MIPS: Implement Math.tan in generated code. 2011}	{ [PATCH] Implement Math.tan in generated code. 2011}	
{ [PATCH] MIPS: Catch non-string subject in RegExpExecStub. 2011}	{ [PATCH] Catch non-string subject in RegExpExecStub. 2011}	
{ [PATCH] MIPS: Add a level of indirection to exception handler addresses. 2011}	{ [PATCH] Add a level of indirection to exception handler addresses. 2011}	
{ [PATCH] MIPS: Change generated code for substring not to bail out to runtime system. 2011}	{ [PATCH] Change generated code for substring not to bail out to runtime system. 2011}	
{ [PATCH] MIPS: Fix lazy deoptimization at HInvokeFunction and enable target-recording call-function stub. 2011}	{ [PATCH] Fix lazy deoptimization at HInvokeFunction and enable target-recording call-function stub. 2011}	
{ [PATCH] MIPS: Implement runtime function for array literal transitions. 2011}	{ [PATCH] ARM: Implement runtime function for array literal transitions. 2011}	
{ [PATCH] MIPS: Simplify StringCharCodeAt in non-crankshaft codegen. 2011}	{ [PATCH] Simplify StringCharCodeAt in non-crankshaft codegen. 2011}	
{ [PATCH] MIPS: Repeat last debugger command in the arm simulator when command input is empty. 2011}	{ [PATCH] Repeat last debugger command in the arm simulator when command input is empty. 2011}	
{ [PATCH] MIPS: Tighten the code for MacroAssembler::ThrowUncatchable. 2011}	{ [PATCH] Tighten the code for MacroAssembler::ThrowUncatchable. 2011}	
{ [PATCH] Create stub and runtime function for x64 full-codegen array literal element initialization. 2011}	{ [PATCH] Create stub and runtime function for ia32 full-codegen array literal element initialization. 2011}	
{ [PATCH] MIPS: Adding assertions to fast elements conversion. 2011}	{ [PATCH] Adding assertions to fast elements conversion. 2011}	
{ [PATCH] MIPS: Remove some initialization checks based on source positions. 2011}	{ [PATCH] Remove some initialization checks based on source positions. 2011}	
{ [PATCH] MIPS: Add and use ElementsKind side effect 2011}	{ [PATCH] Add and use ElementsKind side effect 2011}	
{ [PATCH] MIPS: Remove the forward-bailout stack from the non-optimizing compiler. 2011}	{ [PATCH] Remove the forward-bailout stack from the non-optimizing compiler. 2011}	
{ [PATCH] MIPS: Merge IR classes for different bitwise operations AND, OR and XOR into one class. 2011}	{ [PATCH] Merge IR classes for different bitwise operations AND, OR and XOR into one class. 2011}	
{ [PATCH] MIPS: Fixing performance regression in issue 1787. 2011}	{ [PATCH] Fixing performance regression in issue 1787. 2011}	
{ [PATCH] MIPS: port Handlify the stub cache lookup and patching for CallIC and KeyedCallIC. 2011}	{ [PATCH] Handlify the stub cache lookup and patching for CallIC and KeyedCallIC. 2011}	
{ [PATCH] Revert r9619. 2011}	{ [PATCH] Revert r9619. 2011}	
{ [PATCH] Porting r9456 to arm (Optimize KeyedStoreGeneric for Smi arrays). 2011}	{ [PATCH] Porting r9456 to x64 (Optimize KeyedStoreGeneric for Smi arrays). 2011}	
{ [PATCH] Porting r9392 to x64 (smi-only arrays). 2011}	{ [PATCH] Porting r9392 to arm (smi-only arrays). 2011}	
{ [PATCH] MIPS: port Implement function proxies (except for their use as constructors). 2011}	{ [PATCH] Implement function proxies (except for their use as constructors). 2011}	
{ [PATCH] MIPS: port Remove in-loop tracking for call ICs. 2011}	{ [PATCH] MIPS: port Remove in-loop tracking for call ICs. 2011}	
{ [PATCH] MIPS: Convert a bunch of ASSERTs to STATIC_ASSERTs 2011}	{ [PATCH] Convert a bunch of ASSERTs to STATIC_ASSERTs 2011}	
{ [PATCH] Fixed regression introduced in r9027. 2011}	{ [PATCH] Fixed regression introduced in r9023. 2011}	
{ [PATCH] MIPS: port Ensure that GenerateStoreFastDoubleElement returns stored value on all paths. 2011}	{ [PATCH] Ensure that GenerateStoreFastDoubleElement returns stored value on all paths. 2011}	
{ [PATCH] MIPS: port Fix problem with arguments object ICs not checking for dictionary mode elements. 2011}	{ [PATCH] Fix problem with arguments object ICs not checking for dictionary mode elements. 2011}	
{ [PATCH] MIPS: Cleaned up calling-related methods in the assembler. 2011}	{ [PATCH] Cleaned up calling-related methods in the ARM assembler. 2011}	
{ [PATCH] MIPS: port Explicitly pass the closure when allocating a catch or with context. 2011}	{ [PATCH] Explicitly pass the closure when allocating a catch or with context. 2011}	
{ [PATCH] ARM: Improve register allocation and constraints (try 2). Gives ~20% boost for Crypto benchmark on A9. 2011}	{ [PATCH] ARM: Improve register allocation and constraints. Gives ~20% boost for Crypto benchmark on A9. 2011}	
{ [PATCH] MIPS: port Refactor platform-specific code for determining shared stub for keyed load/stores. 2011}	{ [PATCH] Refactor platform-specific code for determining shared stub for keyed load/stores. 2011}	
{ [PATCH] MIPS: port Link function contexts directly to the previous context. 2011}	{ [PATCH] MIPS: port Link function contexts directly to the previous context. 2011}	
{ [PATCH] MIPS: port Add complete ElementsKind information directly to Map for objects with elements. 2011}	{ [PATCH] Add complete ElementsKind information directly to Map for objects with elements. 2011}	
{ [PATCH] MIPS:port Reapply change to Pass undefined to JS builtins when called with implicit receiver. 2011}	{ [PATCH] Reapply change to Pass undefined to JS builtins when called with implicit receiver. 2011}	
{ [PATCH] Optimise the deoptimisation check to improve performance on modern ARM cores. 2011}	{ [PATCH] Optimise the deoptimisation check to improve performance on modern ARM cores. 2011}	
{ [PATCH] Strict mode ThrowTypeError functions for - function.caller - function.arguments 2011}	{ [PATCH] Strict mode ThrowTypeError functions for - function.caller - function.arguments 2011}	
{ [PATCH] Assignment to read only properties throws in strict mode. 2011}	{ [PATCH] Assignment to read only properties throws in strict mode. 2011}	
{ [PATCH] X64: Port r5445 2011}	{ [PATCH] ARM: Port r5445 2011}	
{ [PATCH] X64: Port r6635 and r6659 2011}	{ [PATCH] ARM: Port r6635 and r6659 2011}	
{ [PATCH] ARM: Implement PatchStackCheckCodeAt and RevertStackCheckCode. 2011}	{ [PATCH] ARM: Implement PatchStackCheckCodeAt and RevertStackCheckCode. 2011}	
{ [PATCH] Implement assignment to undefined reference in ES5 Strict Mode. 2011}	{ [PATCH] Implement assignment to undefined reference in ES5 Strict Mode. 2011}	
{ [PATCH] Landing for Martyn Capewell. 2011}	{ [PATCH] Landing for Martyn Capewell. 2011}	
{ [PATCH] Landing for Martyn Capewell. 2010}	{ [PATCH] Landing for Martyn Capewell. 2010}	
{ [PATCH] Landing for Justing Schuh. 2010}	{ [PATCH] Landing for Justin Schuh. 2010}	
{ [PATCH] API call code refactoring (x64). 2010}	{ [PATCH] API call code refactoring (ia32). 2010}	
{ [PATCH] Ported string call IC-s to arm. 2010}	{ [PATCH] Ported string call IC-s to x64. 2010}	
{ [PATCH] Landing for Rodolph Perfetta. 2010}	{ [PATCH] Landing for Rodolph Perfetta. 2010}	
{ [PATCH] Improve the success rate for inline keyed store on x64 2010}	{ [PATCH] Improve the success rate for inline keyed store 2010}	
{ [PATCH] Port number dictionary probing in generated code to ARM. 2010}	{ [PATCH] Port number-dictionary probing in generated code to x64. 2010}	
{ [PATCH] Fix issue 656 on ARM. 2010}	{ [PATCH] Fix issue 656 on x64. 2010}	
{ [PATCH] Implemented specialized stubs for API getters.  This includes a number of individual changes: 2009}	{ [PATCH] Implemented specialized stubs for API getters.  This includes a number of individual changes: 2009}	
{ [PATCH] Handle array construction in native code (x64 version). 2009}	{ [PATCH] Handle array construction in native code (ARM version). 2009}	
{ [PATCH] Minor changes to the native array construct code 2009}	{ [PATCH] Minor changes to the native array construct code. 2009}	
{ [PATCH] Generate specialized constructor code for constructing simple objects. 2009}	{ [PATCH] Generate specialized constructor code for constructing simple objects. 2009}	
{ [PATCH] Fix x64 build. 2009}	{ [PATCH] Fix ARM build. 2009}	
{ [PATCH] Fix x64 build. Review URL: http://codereview.chromium.org/115565 2009}	{ [PATCH] Fix x64 build. Review URL: http://codereview.chromium.org/115351 2009}	
