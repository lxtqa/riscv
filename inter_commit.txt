{3f12c06ea0fadfd4a962fe6fd84693f01751a4f3   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 17) 2023}	{956e537a372ef29058a0035052dd6c54ab764b25   [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 17) 2023}	{014e0bb5ac4691c85b1da2dac579af77d02d17b7   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 17) 2023}	{dac59871658f010e88615ddb6b1950957667a67a   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 17) 2023}	{3c498539b256f0abb4e3e1adcff3266eea777a96   [PATCH] ppc/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 16) 2023}	{6d0f16a9a28761461d3bd6e2dda3d25e3d6ff92c   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 16) 2023}	{b871993c1d2062a0387b62c5695d142bfc29f392   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 16) 2023}	{d91e7905a3a5022f37f1a1f2a96c9d5db9e08519   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 16) 2023}	{db76cc0737d0406b52ed5e61b99a0524d18c21ee   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 15) 2023}	{222ec320768086ed8a8eb9ab857d836d4ed1221c   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 14) 2023}	{050ff839a2a7638790b99e803354ce0d2f2437b7   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 13) 2023}	{94dfe2e4af6b524bff3c54e04d1f93c3eb2fa53d   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 13) 2023}	{bdcb632a948aa2dca227c581c3f3c681b162b9bb   [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 13) 2023}	{d9db05adf9b94b1905bebe2db70e3cae1513af8a   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 13) 2023}	{1fd7689d431fc2f776385cfdbb94d02a5c858842   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 12) 2023}	{9844f7ddc2c87e31e921837a5760649486d81204   [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 12) 2023}	{df96d49ea6206ab7ed3ff7b2ad30c5794b73c05b   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 12) 2023}	{b65a2725b84dc6dce919920f007682ea4d1daf54   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 12) 2023}	{16c6c585b750c7a8e13c1bebb57f05fd90f60d19   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 10) 2023}	{e33693d57f647407cd74b7ca4057614916d1e50f   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 10) 2023}	{0dbea94dbdd950cbe5ff018a3e43a4bac18c6045   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 10) 2023}	{8e06a0ca8713c2c259803c956088778d95f75304   [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 8) 2023}	{d4ac7058f3a8451a22c0ebf6436daff360e52d00   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 8) 2023}	{d1ab2cc79e5d99f4634a3993603ef3f28892e325   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 8) 2023}	{6a61b59b49b77c7ec69eeb550a1151464899079e   [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 7) 2023}	{78e7af54404537ffaba4639ae22a28bc99acbadb   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 8) 2023}	{d5676677bae6537447e4b0f049ede4f3c7677d6e   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 7) 2023}	{d462db6f61ebf1209df7da3d2712f92e14ef0308   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 7) 2023}	{8150b2992499eec5a75e7003dd8c5fa44d5940ae   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 7) 2023}	{03fae4e00e78dbf4fa3b68553b2b2352dc8bd80e   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 6) 2023}	{16bbf0574a581386d924e98ee55bcb5afdb338fe   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 5) 2023}	{e3157b001a71993c3b25dd4fd1f81ccff4d41d30   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 6) 2023}	{f6d04210496977cd1da3319ba87ac004954b7cfe   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 5) 2023}	{b2482d605c5f29dda0d65b33d455bd14125eeab4   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 6) 2023}	{b5e2c6774d858679d7e39d9ba8c298f3231af6ca   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 5) 2023}	{3e234a5af966bc866e3f024bca001a8a6f039060   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 4) 2023}	{026b90bbedc79844425d1159bd16317da638bb48   [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 4) 2023}	{d6bdecb7f1f245ab5148b31cfefd22c34ebc10ac   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 4) 2023}	{80b0061bb1aa7dee84b26b6aec1afa6ca2920508   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 4) 2023}	{17af3ebfa976f2da08b6f8c9ae12cc3fd2513026   [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 3) 2023}	{bd498120ba71a823d0765a4ce597289a0256c13b   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 3) 2023}	{32a0a573d94082a6d23cee6aeb4e943c20fae602   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 3) 2023}	{8354eb85ea2b9cfd88ece71dfe9cc0e42d150870   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 3) 2023}	{1f1b9e94e69caec257fd9cfa487f297adb00da13   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 2) 2023}	{be5f78c77ff56a0ba50c49667c3327f9ceb5fbae   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 2) 2023}	{6c63351bb854f6a3c16f4608b2c46d79ebe75ec6   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 2) 2023}	
{54a02928c3787f71ab22db6f9b0d22fbed7514ef   [PATCH] [turboshaft][arm] Port InstructionSelector part 4 2023}	{f2e4d5caa28ddcc33f0330a7e3a0bdb592039793   [PATCH] [loong64][turboshaft] Port InstructionSelector part 3 2023}	{afee3b501bed785ae1739bb5c8da6ace5c823e7d   [PATCH] [turboshaft][arm] Port InstructionSelector part 3 2023}	{080ec07da9d783a504f1681bca893ef85e53583f   [PATCH] [turboshaft][arm] Port InstructionSelector part 2 2023}	{7cd955494906ecd724215ad7183e445835577d80   [PATCH] [loong64][mips64][turboshaft] Port InstructionSelector part 2 2023}	{45f7bb0166524fe6da47deb34926745b55678230   [PATCH] [turboshaft][arm] Port InstructionSelector part 1 2023}	{3ade8ed5d8b97ee9ba8bf50a54792fadef99b577   [PATCH] [turboshaft][arm64] Port InstructionSelector part 13 2023}	{376a960b508dc46f1987aee038e938e58faf9749   [PATCH] [turboshaft][arm64] Port InstructionSelector part 12 2023}	{ad0263ab46ab64dcf3affc00e41e94acfacca112   [PATCH] [mips64][turboshaft] Port InstructionSelector part 1 2023}	{2f1a534549405587d5314ebe9d12fac41aa38af4   [PATCH] [turboshaft][arm64] Port InstructionSelector part 11 2023}	{56d0d218f1435f219256e4eb6c3ad48b94716e92   [PATCH] [loong64][turboshaft] Port InstructionSelector part 1 2023}	{63281106544ab301fd9e860abccd158c15fcc7be   [PATCH] [turboshaft][arm64] Port InstructionSelector part 10 2023}	{eb30f44afa97f2ffd935e43b121259a1535e4dc3   [PATCH] [turboshaft][arm64] Port InstructionSelector part 9 2023}	{eb94c4dc8f8d9964a563c226a8ab118e4d4d1d6e   [PATCH] [riscv][turboshaft] Port InstructionSelector part4 2023}	{a8c1f72360ef872ed4e0ab7bebbf92147fdd0b4b   [PATCH] [riscv][turboshaft] Port InstructionSelector part 3 2023}	{3c3aca4f42afd429977d2eea9707fbb1ed55a21e   [PATCH] [turboshaft][arm64] Port InstructionSelector part 8 2023}	{7afd5eb2aebb737267b1b55a6cb895c9e6a97e38   [PATCH] [turboshaft][arm64] Port InstructionSelector part 7 2023}	{e90dc6639d6ef470559410497c7f66fe43435412   [PATCH] [turboshaft][arm64] Port InstructionSelector part 6 2023}	{d88fb0fc348dffc6193958be997c4406fb9ff856   [PATCH] [turboshaft][arm64] Port InstructionSelector part 5 2023}	{8b70c9388f66fb35d4a4233b13ac867a93be9b06   [PATCH] [turboshaft][arm64] Port InstructionSelector part 4 2023}	{85f0e9d884c7cb5fc2b4fa1e40d1270c858781fe   [PATCH] [turboshaft][arm64] Port InstructionSelector part 3 2023}	{a2647085637404d4edaa9bf9604f9d1fddeec797   [PATCH] [turboshaft][arm64] Port InstructionSelector part 2 2023}	{37a28ee64751ef4b6aa584bb11e2fea65c8a5463   [PATCH] [turboshaft][arm64] Port InstructionSelector part 1 2023}	
{8c22b422678bc2429fd045d3e94366850b03a6e4   [PATCH] [loong64][mips64] Reland^5 "[wasm][x64] Run JS imports on the central stack" 2023}	{f95794ade0b45eabf738e35fd363dca6ce7642cc   [PATCH] [riscv]Reland^5 "[wasm][x64] Run JS imports on the central stack" 2023}	{502b1ffc3a3f7050f068f7a5d1d031d56324c03a   [PATCH] PPC/s390: Reland^5 "[wasm][x64] Run JS imports on the central stack" 2023}	{aef80d12d489b55217b63821ce3b0eaca2b5e2ab   [PATCH] Reland^5 "[wasm][x64] Run JS imports on the central stack" 2023}	{3ebc66786099800b9c7170fc6e72eb59298dfb7c   [PATCH] Reland^4 "[wasm][x64] Run JS imports on the central stack" 2023}	{d62459f10401390ede081ed9701a8300ec26c48f   [PATCH] PPC/s390: Reland^3 "[wasm][x64] Run JS imports on the central stack" 2023}	{be830f359c50f21db867f7e6f430124af314e0db   [PATCH] Reland^3 "[wasm][x64] Run JS imports on the central stack" 2023}	{4be9ff946b727ea05e6049c72ad62f5c83f6a13c   [PATCH] Reland "[wasm][x64] Run JS imports on the central stack" 2023}	
{059f6763d0477e7ee52b3e186bbf92e2e3646047   [PATCH] [loong64][mips64][builtins][csa] Use CallBuiltin/TailCallBuiltin where possible, pt.6 2023}	{8841ea55de5b6a16c396b819032ba4123b294899   [PATCH] [riscv][builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.2 2023}	{747cf705c6b5398d1cab60ef6bc2f9c930c27190   [PATCH] PPC/s390: [builtins][csa] Use CallBuiltin/TailCallBuiltin where possible, pt.6 2023}	{8de6dcc377690a0ea0fd95ba6bbef802f55da683   [PATCH] [builtins][csa] Use CallBuiltin/TailCallBuiltin where possible, pt.6 2023}	{dd97dd1b1f094ba20cffdf5698951c18387a3387   [PATCH] [loong64][mips64][builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.2 2023}	{4202afccdd483dfe45804dc92b4f959be5e15826   [PATCH] [builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.3 2023}	{85fddc8861b7d80428cedc60798dbd7394f4712c   [PATCH] [builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.2 2023}	












{8081d32346551df2bf06e29899472d1371318c66   [PATCH] Revert "Reland^4 "[wasm][x64] Run JS imports on the central stack"" 2023}	{f38b9f169a053efe8a5b1b3ed838900605dcb450   [PATCH] Revert "[riscv]Reland^3 '[wasm][x64] Run JS imports on the central stack'" 2023}	{12f511861b5ebaa409e2d043f5ee3fff151baefd   [PATCH] Revert "PPC/s390: Reland^3 "[wasm][x64] Run JS imports on the central stack"" 2023}	{083b24225f72a735ca8848692640ffc43ee727b5   [PATCH] Revert "Reland^3 "[wasm][x64] Run JS imports on the central stack"" 2023}	{9283415d8f0629f470b649ca3642f96795575fa8   [PATCH] Revert "Reland "[wasm][x64] Run JS imports on the central stack"" 2023}	
{bfb4a2e42db8011b28ddb46f3b6071b116c8c516   [PATCH] [riscv][assembler] Make UseScratchRegisterScope inlinable 2023}	{cb286539a7d63b45d5460761058f057972a3fa4b   [PATCH] [arm64][assembler] Make UseScratchRegisterScope inlinable 2023}	{2f49ccc2b223ffa59de25094e20d5e236367511e   [PATCH] PPC/s390: [arm][assembler] Make UseScratchRegisterScope inlinable 2023}	{c0b91f58921b3fff7fbb377d9d8fd77781e9b8f6   [PATCH] [loong64][mips64][assembler] Make UseScratchRegisterScope inlinable 2023}	{3ea267f2758c3e35f24ac897f62f43b4993129cc   [PATCH] [arm][assembler] Make UseScratchRegisterScope inlinable 2023}	
{d93cc4ef42b64711409dda6e87128fcb88f0ac26   [PATCH] [riscv][liftoff] Emit less code for write barriers 2023}	{618042625011b9765dc1209b56edc69360f62887   [PATCH] [loong64][mips64][liftoff] Emit less code for write barriers 2023}	{efb8f97f626555580522950cc14e212d159cd8c8   [PATCH] PPC/s390: [liftoff] Emit less code for write barriers 2023}	{82bb5ea9a9bd1184f30dd6177cafb3d68136bc7f   [PATCH] PPC/s390: [liftoff] Emit less code for write barriers 2023}	{ac06e55a17d63b3f62ddac986a7979f0e448309c   [PATCH] [liftoff] Emit less code for write barriers 2023}	
































{84aaa4028930a1ad383da3480cc941d940bd9eb7   [PATCH] [riscv][builtins] Track topmost script-having execution context 2023}	{3664f8217cac478fadc0c8bc04ac34ce24f79476   [PATCH] [loong64][mips64][builtins] Track topmost script-having execution context 2023}	{aad1878c776adc3e095dd12d896f4a0eadd8e693   [PATCH] PPC/s390: [builtins] Track topmost script-having execution context 2023}	{32548386efc8d7b0d199fe8ec11e3eda3f5b8264   [PATCH] [builtins] Track topmost script-having execution context 2023}	
{ae7de90b0c0015b6d1d3c95a7a0e4069481d6a0e   [PATCH] [loong64][mips64][turboshaft] Add missing pieces to Turboshaft CSA pipeline 2023}	{b18b6559fc047c0f0989ddd87efb436816ce0ad9   [PATCH] [riscv][turboshaft] Add missing pieces to Turboshaft CSA pipeline 2023}	{498bfb87cb996a53d0ae67658b957256806e08e1   [PATCH] PPC/s390: [turboshaft] Add missing pieces to Turboshaft CSA pipeline 2023}	{235d5bd74cb77aef5bbd7ad85331d6f067d36dae   [PATCH] [turboshaft] Add missing pieces to Turboshaft CSA pipeline 2023}	
{6b8eb077c5eb46b8f57c2542578289dc764c18cd   [PATCH] PPC/S390: [wasm] Pass arguments directly to memory.init 2023}	{53d774d524392f74b11cfbc95b466c9206e2d3e7   [PATCH] [loong64][mips64][wasm] Pass arguments directly to memory.init 2023}	{21d3e127fc0b8f21268455fc5a976b705fa37ed4   [PATCH] [riscv][wasm] Pass arguments directly to memory.init 2023}	{200df6f6bf1752d9c7c27d8868321fb5c26fef53   [PATCH] [wasm] Pass arguments directly to memory.init 2023}	
{0ed82ef0d30760c6a20e0f560da19d51c1179724   [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 19) 2023}	{ba7bbec5aa4dc6ed90555a4daf04564d383e784b   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 19) 2023}	{3ec5a0838c2504485ce7e048e1d0458502544bf4   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 19) 2023}	{c89fb798454d076f3d404185678ac5a71fd09c28   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 19) 2023}	
{39399268bc97f60520abef1576f95c894fc30332   [PATCH] [loong64][interpreter] Skip spread machinery in default derived constructor 2023}	{150690d5f6a0fd6ad3787d7070d6968c3ead2f78   [PATCH] [riscv][interpreter] Skip spread machinery in default derived constructor 2023}	{58d0430cadb4b7fac6b7221438095b46f4f81e53   [PATCH] PPC/s390: [interpreter] Skip spread machinery in default derived constructor 2023}	{6ee16b764a2e267e20a3b25163b5077656eda9a3   [PATCH] [interpreter] Skip spread machinery in default derived constructor 2023}	
{80717207474bb8faf10de8458ff0ae0aa90c1cd0   [PATCH] [riscv][wasm] Also load the real stack limit from the root register 2023}	{ac3c3af41810bcfcb0996aa63b0ee9863a8d2a18   [PATCH] [loong64][mips64][wasm] Also load the real stack limit from the root register 2023}	{51c1d0b733b5cf77ab567d8459d7e5845c21824b   [PATCH] PPC/s390: [wasm] Also load the real stack limit from the root register 2023}	{d5244423b7fb9b9c237472dc610f762d18c4d2ad   [PATCH] [wasm] Also load the real stack limit from the root register 2023}	
{65bccd205487b07f01e334891949d1daed1c80d6   [PATCH] [riscv][regexp] Fix stack check in native code when interrupt was requested 2023}	{1ec3c714bf75f01e3f4f6519bebb953eab93df39   [PATCH] [loong64][mips64][regexp] Fix stack check in native code when interrupt was requested 2023}	{200f788c125d7a07b14765a6cffd1ce8e3af1ceb   [PATCH] PPC/s390: [regexp] Fix stack check in native code when interrupt was requested 2023}	{7f1aaf2a1c763c8aa1358ec8ed24f39bfa17b767   [PATCH] [regexp] Fix stack check in native code when interrupt was requested 2023}	
{1f026e2919bd4c5177a70ddda4e2c20a75f6500b   [PATCH] [riscv][wasm][liftoff] Use root register for stack checks 2023}	{ae8e13db745e26f29e458d511670eb6bf9601255   [PATCH] [loong64][mips64][wasm][liftoff] Use root register for stack checks 2023}	{1fbd008a40d8d751b58937cb821285400309cd13   [PATCH] PPC/s390: [wasm][liftoff] Use root register for stack checks 2023}	{1ad00840445dbae3dab17e568597db620253a08f   [PATCH] [wasm][liftoff] Use root register for stack checks 2023}	
{568a80dac9819c8d7f5441fde68d83b94d848370   [PATCH] [riscv] Reland^2 "[liftoff] Add support for direct C calls" 2023}	{82aa1fd7592c4ddeff7aae2323f5118963d9bd6b   [PATCH] PPC/s390: Reland^2 "[liftoff] Add support for direct C calls" 2023}	{846b5bfe32b98bfc7750f502d3b00dc0cb98ce25   [PATCH] Reland^2 "[liftoff] Add support for direct C calls" 2023}	{abb12d27903a827d3be0959dc800725e9cb6b533   [PATCH] Reland "[liftoff] Add support for direct C calls" 2023}	
{78060a278ac3e72e95e7896a5472e5a55b99e3c7   [PATCH] [riscv][baseline] Cache feedback cell in the unused slot 2023}	{869e1945a75416fac0b7251436225ea45f8d1058   [PATCH] PPC/s390: [baseline] Cache feedback cell in the unused slot 2023}	{a7d96c56ae58c192b43d8785aea113a204752738   [PATCH] [loong64][mips64][baseline] Cache feedback cell in the unused slot 2023}	{0d7002280b2224b3ed92705fd9bba3547cbfc9de   [PATCH] [baseline] Cache feedback cell in the unused slot 2023}	
{b833ec2335794b16dfef5fe00a3f87cd78a28b2d   [PATCH] [riscv][interpreter] Cache FBV in the stack frame 2023}	{fa534e9bafa21fe176b5ca6d81899a71c1329bca   [PATCH] [loong64][mips64][interpreter] Cache FBV in the stack frame 2023}	{68b8603320a74d87f5a38f7f2d703e56fe1b16b7   [PATCH] PPC/s390: [interpreter] Cache FBV in the stack frame 2023}	{92a83637738290b867b9d0db999104952afee341   [PATCH] [interpreter] Cache FBV in the stack frame 2023}	
{25e0b9823b59a2b49dac1b67d6ed55fe944ae402   [PATCH] [riscv][wasm] Use Builtin ids instead of RuntimeStubId ids for calls 2023}	{33aed30227008af7299a01d9898a30a97535ad2c   [PATCH] PPC/s390: [wasm] Use Builtin ids instead of RuntimeStubId ids for calls 2023}	{40b69a2f5e9c92cdc6d126414ac39187d7db981a   [PATCH] [loong64][mips64][wasm] Use Builtin ids instead of RuntimeStubId ids for calls 2023}	{d371c44f54f58830fd4b69d60b25bcd7eff2a229   [PATCH] [wasm] Use Builtin ids instead of RuntimeStubId ids for calls 2023}	
{2577ac074077a2bb2d62503ef5c0d5a5350f0af0   [PATCH] ppc/s390: [cfi] Split RelocIterator into ro / rw versions 2023}	{6c6baa40dc2a68127c4bc40a323f6eb39b9d5307   [PATCH] [riscv][cfi] Split RelocIterator into ro / rw versions 2023}	{f6ba12727c7815feb5a1fccc6e767e103d9b0a99   [PATCH] [loong64][mips64][cfi] Split RelocIterator into ro / rw versions 2023}	{3f963778ad8f9af93f7edf14dfa7bec4ad09a922   [PATCH] [cfi] Split RelocIterator into ro / rw versions 2023}	
{0c082ae7f3ddc828ba5045bcf081efe135cdb228   [PATCH] [loong64][mips64][liftoff][cleanup] Tighten static register type 2023}	{f1a74c3bc4f83be540d7483228611a70086fb430   [PATCH] [riscv][liftoff][cleanup] Tighten static register type 2023}	{745b9388b5389d4fadc4924d36009416a4cf23f7   [PATCH] PPC/s390: [liftoff][cleanup] Tighten static register type 2023}	{825afa519d7e15aa769df7cfee7134c1622f5e2a   [PATCH] [liftoff][cleanup] Tighten static register type 2023}	
{13192d6e10fa726858056e49fc9bca6201401171   [PATCH] [riscv][tagged-ptr] Convert more Objects to Tagged<> 2023}	{cda104f32c0389c3535f218228c10f6fdbb0a59f   [PATCH] [loong64][mips64][tagged-ptr] Convert more Objects to Tagged<> 2023}	{de320e01e47eeb01071b54b9553d9b6d5de52256   [PATCH] PPC/s390: [tagged-ptr] Convert more Objects to Tagged<> 2023}	{064b9a7903b793734b6c03a86ee53a2dc85f0f80   [PATCH] [tagged-ptr] Convert more Objects to Tagged<> 2023}	
{13867741f9dc808f3b1faa25fed0af8b64068cbb   [PATCH] PPC/s390[wasm]: Fix memory.fill and memory.init with i64.const args 2023}	{f8bffeae366cb3b7c23b3bd748740f64ccbcf3cd   [PATCH] [loong64][mips64][wasm] Fix memory.fill and memory.init with i64.const args 2023}	{46e50187d82fa6645339b5ed29d92b10cc42cba6   [PATCH] [riscv][wasm] Fix memory.fill and memory.init with i64.const args 2023}	{e703a03fec212957bc522dc859d4330bd21e6b69   [PATCH] [wasm] Fix memory.fill and memory.init with i64.const args 2023}	
{5f1ce563182104f761762c5cb52ff2a1edb6ab69   [PATCH] [riscv][sandbox] Reference Code objects (and their entrypoint) through the CPT 2023}	{5e34284dbbbc425c8a97222b8d357b339a50d8a6   [PATCH] [loong64][mips64][sandbox] Reference Code objects (and their entrypoint) through the CPT 2023}	{271470b0ee5ffd0b18bd77b765d92c80d5929a97   [PATCH] PPC/s390: [sandbox] Reference Code objects (and their entrypoint) through the CPT 2023}	{fbb9df7218ae348b56104ff8fdd82b578e42d189   [PATCH] [sandbox] Reference Code objects (and their entrypoint) through the CPT 2023}	
{69f7215a8c8a850f28393e2b41012e1680e33c6a   [PATCH] riscv: [tagged-ptr] Make Object methods static 2023}	{80eabe98c13771cd111c341cadd04ae6ec5d0239   [PATCH] [loong64][mips64][tagged-ptr] Make Object methods static 2023}	{3d35cc91cedbd2eb5e1a899c58039b5b60ba5339   [PATCH] PPC/s390: [tagged-ptr] Make Object methods static 2023}	{f20f342a3e275ae6442a53e34869f1c90f0db4a0   [PATCH] [tagged-ptr] Make Object methods static 2023}	
{63822b4ba708f1c2850faf3504ea7fb6531c3b99   [PATCH] PPC/s390: [tagged-ptr] Change obj->IsFoo() to IsFoo(obj) 2023}	{7d67d27757ca0dd455972fce28b69c6588af4215   [PATCH] [loong64][mips64][tagged-ptr] Change obj->IsFoo() to IsFoo(obj) 2023}	{c80318ae05cd03b85f893d4ca6567c39741991a8   [PATCH] [riscv][tagged-ptr] Change obj->IsFoo() to IsFoo(obj) 2023}	{9c869941764bc57a9a3b86a090323236d9b3af7c   [PATCH] [tagged-ptr] Change obj->IsFoo() to IsFoo(obj) 2023}	
{e6ff37dcf9efae0be12ecbde3e656fa6eaec284b   [PATCH] [riscv][ignition] Fast construct calls 2023}	{91d69a1c47327c36b38c53f9c683859bda984310   [PATCH] [loong64][mips64][ignition] Fast construct calls 2023}	{9d423adf1277e46ebc12bb39cf407dc7de8aec55   [PATCH] PPC/S390: [ignition] Fast construct calls 2023}	{b2bb5653706b04ac5ea421eedcade9810b8d1ea4   [PATCH] [ignition] Fast construct calls 2023}	
{fe710cdc3bfbde13bffdf5bbafc12b07488ca52b   [PATCH] [loong64][mips64][builtins] Prepare Api-calls related builtins for refactoring 2023}	{c79b721c97848f675b83c7ef154a721171c4427e   [PATCH] riscv: [builtins] Prepare Api-calls related builtins for refactoring 2023}	{580d2aa0e50ec97f810edcc59062402535d1e7ea   [PATCH] PPC/s390: [builtins] Prepare Api-calls related builtins for refactoring 2023}	{e70138196420755a503ea02dbd376d672a90eab4   [PATCH] [builtins] Prepare Api-calls related builtins for refactoring 2023}	
{78f4d6563c9424e37530bdfdc8d6f635b5f93fea   [PATCH] PPC/s390: [liftoff] Use VarState for C-Calls 2023}	{617ee99cdab0488821d2fef4cf9965ca8f39566e   [PATCH] [loong64][mips64][liftoff] Use VarState for C-Calls 2023}	{3418fa940e588a587975b4c94d9ab7aa13da6b1e   [PATCH] [riscv][liftoff] Use VarState for C-Calls 2023}	{a782748a830116583e5d33723d46a82aed50c67e   [PATCH] [liftoff] Use VarState for C-Calls 2023}	
{f9a31b4e6c58867bb3ca5b7cae4bb2cb6d49b517   [PATCH] PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 1) 2023}	{2c6f8eebe74cb51ca6e922d037a005b3a97a2d8c   [PATCH] [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 1) 2023}	{657c2b1837e5ff411cfe82c112f002934ef08302   [PATCH] [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 1) 2023}	{3c2714d57370a05ea5ce99d79d92bf4980bb5d39   [PATCH] [compiler] Generalize InstructionSelectorT for Turboshaft (part 1) 2023}	
{694886a4c12a467549f3801ee6a337eef31f3709   [PATCH] [riscv][compiler] Add Adapter template argument to InstructionSelector 2023}	{4aa01df6f748e200c88de03db71cbb2403fb8771   [PATCH] [loong64][mips64][compiler] Add Adapter template argument to InstructionSelector 2023}	{f6e528ea599f3ee6dc470d27ae2054bd6f8b2772   [PATCH] PPC/s390: [compiler] Add Adapter template argument to InstructionSelector 2023}	{65a226a63fd7c10e761ae82b00b8490b879a8fae   [PATCH] [compiler] Add Adapter template argument to InstructionSelector 2023}	
{6b08f43389a13b3bef8eda949a9c76d0ae3678e6   [PATCH] [loong64][mips64][builtins] Port HandleApiCall to CSA 2023}	{f11164958814c6aaded5b121fadec2adb502c984   [PATCH] [riscv][builtins] Port HandleApiCall to CSA 2023}	{042ca800ddfa58faff857c35a493df8a1ae7c3a9   [PATCH] PPC/s390: [builtins] Port HandleApiCall to CSA 2023}	{7b42c0bfde1efbf03baf8a819671efdb3d09853f   [PATCH] [builtins] Port HandleApiCall to CSA 2023}	
{62f5ce8d379ef7f710760ca6e971822bced1e3de   [PATCH] [riscv][wasm-gc] Inlining into JS: Lower traps to conditional jump to trap call 2023}	{0179e8dba34e6ed1491d806974430dfb5ccadf08   [PATCH] [loong64][mips64][wasm-gc] Inlining into JS: Lower traps to conditional jump to trap call 2023}	{3a99354ebdf088d6b265a995912eda552ef32f3b   [PATCH] PPC/s390: [wasm-gc] Inlining into JS: Lower traps to conditional jump to trap call 2023}	{a764401e64fdef9834cafeba32fc219eba9bd74b   [PATCH] [wasm-gc] Inlining into JS: Lower traps to conditional jump to trap call 2023}	
{50b4846eaa1305f287e60578b07c30add99e0f86   [PATCH] [riscv][builtins] Split CallApiCallback into generic and optimized variants 2023}	{408eabdb8f335ae4ca0b8a1609898e38684f7997   [PATCH] PPC/s390: [builtins] Split CallApiCallback into generic and optimized variants 2023}	{b3b81366a904a19074fb3e544519b974a40678b9   [PATCH] [loong64][mips64][builtins] Split CallApiCallback into generic and optimized variants 2023}	{ef130cfbef0a438bd50ed997e48f6545edd92a06   [PATCH] [builtins] Split CallApiCallback into generic and optimized variants 2023}	
{3db739c7a842def8e15a11810f912547383b2739   [PATCH] [riscv][wasm-gc] Wasm into JS inlining: Get stack trace locations 2023}	{eb43d2a11041de7aacb5c5ad785141131097b444   [PATCH] PPC/s390: [wasm-gc] Wasm into JS inlining: Get stack trace locations 2023}	{ff027cec58bbae7a79bf44d633fea2b87b30fd5c   [PATCH] [loong64][mips64][wasm-gc] Wasm into JS inlining: Get stack trace locations 2023}	{920521ce58f08db861376c89a80d5db13e871907   [PATCH] [wasm-gc] Wasm into JS inlining: Get stack trace locations 2023}	
{6b766f3b88a0ddb433d6b7e82fbb8855d29dad42   [PATCH] [riscv][builtins] Remake Api callback thunk wrappers calling convention 2023}	{5635b4396a60a3fa8fcfeed78a879b6e2b56ae3a   [PATCH] [loong64][mips64][builtins] Remake Api callback thunk wrappers calling convention 2023}	{5fbb615d4eab788f7d7e2a168a55e277314ae037   [PATCH] PPC/s390: [builtins] Remake Api callback thunk wrappers calling convention 2023}	{c56004231528c09baff88993aa9be093648bca1e   [PATCH] [builtins] Remake Api callback thunk wrappers calling convention 2023}	
{0a0abca95b28442aca072340a024440968204001   [PATCH] [loong64][mips64][builtins] Refactor register allocation in CallApiCallback/CallApiGetter 2023}	{eee57d8b0ff734c411d0499b9a8dc26482ea3272   [PATCH] [riscv][builtins] Refactor register allocation in CallApiCallback/CallApiGetter 2023}	{bda9aaef9d3df86a85e70e71f445362aab55a74c   [PATCH] PPC/s390: [builtins] Refactor register allocation in CallApiCallback/CallApiGetter 2023}	{e479798142f9495d7b39384095a4fd63950e7711   [PATCH] [builtins] Refactor register allocation in CallApiCallback/CallApiGetter 2023}	
{01551ab36e1123c084bbfeee717836422b3cb82d   [PATCH] [riscv][isolate]Move Isolate::handle_scope_data_ to IsolateData 2023}	{7e0ad32383b4a52500fd2c493a9229eb7ac11679   [PATCH] [loong64][mips64][isolate] Move Isolate::handle_scope_data_ to IsolateData 2023}	{5e9325ce6beb006fd4fdc7be04fc1d3128f188ff   [PATCH] PPC/s390: [isolate] Move Isolate::handle_scope_data_ to IsolateData 2023}	{bc45e84fe4abaa72c3e7cd37c250b484840ad512   [PATCH] [isolate] Move Isolate::handle_scope_data_ to IsolateData 2023}	
{a99836832091b9037372050ddf822b426b500d30   [PATCH] [riscv] Remove code/istream fields from RelocInfo 2023}	{ca4af3e11bbe1da293bbd860412a54c705a31412   [PATCH] [loong64][mips64] Remove code/istream fields from RelocInfo 2023}	{49963343a40f425d3cff1d7f969de34c84020b4d   [PATCH] PPC/s390: Remove code/istream fields from RelocInfo 2023}	{9f4bea8e781260e7b7a1e3c8ef6598cb52dc1dd4   [PATCH] Remove code/istream fields from RelocInfo 2023}	
{5b7786ef02998def65ae6aa812dca1d55d124974   [PATCH] [riscv][code] Merge kind_specific_flags with flags 2023}	{c728e3ba53532367a8afdabc0c7df37c3adf9b12   [PATCH] [loong64][mips64][code] Merge kind_specific_flags with flags 2023}	{e5772c03e1ae6068349937df2bd97c1053c53029   [PATCH] PPC/s390: [code] Merge kind_specific_flags with flags 2023}	{cb8be519f0add9b76d2bd542f0924004fdb2c16c   [PATCH] [code] Merge kind_specific_flags with flags 2023}	
{443498c7faaca5a14fb2331d15c43aa80510975e   [PATCH] [riscv][api] Always use the-hole as default return 2023}	{fa440ce54487a740390b76fa222426431c38a05c   [PATCH] [loong64][mips64][api] Always use the-hole as default return 2023}	{88cf272a0acd99450521d5fcdcb94c52389154a8   [PATCH] PPC/s390: [api] Always use the-hole as default return 2023}	{154d1e4ee6d8980e1c254124625d162ef49067b8   [PATCH] [api] Always use the-hole as default return 2023}	
{057964e89c48e01d668e55fec9372cc729ea487b   [PATCH] [riscv][builtins] Link up various offset for api calls 2023}	{2806e27911289523ddc88001424ebeee78ae8014   [PATCH] [loong64][mips64][builtins] Link up various offset for api calls 2023}	{4ed9ce567ccf6551e53f11352bc820d8589822ea   [PATCH] PPC/s390: [builtins] Link up various offset for api calls 2023}	{eaaddb9ef75ee67fb718de5f876ba7ded4916f5b   [PATCH] [builtins] Link up various offset for api calls 2023}	
{228589a8869b131c2af794bd1129681949f58d1d   [PATCH] [loong64][mips64] Remove the unused kOffHeapTrampolineRegister 2023}	{cb4e75c39477967daa11caba6390db0f5e305add   [PATCH] [riscv] Remove the unused kOffHeapTrampolineRegister 2023}	{5271bdb3124bcbddca9b5d4d3c37ddc5bf6db0c8   [PATCH] PPC/s390: Remove the unused kOffHeapTrampolineRegister 2023}	{0e1e2b838a8f9ecc61667f083041417a5c19345b   [PATCH] Remove the unused kOffHeapTrampolineRegister 2023}	
{2768d44a6a7acafc2c7e29e88c7ec335d99f6bc4   [PATCH] [riscv]Optimizations for jitless builds 2023}	{4be5fa21acafe8c5f36ed66b4c614907e98debc7   [PATCH] [loong64][mips64] Optimizations for jitless builds 2023}	{eb57f21992d603fcd4a609ff6f8731fb85268eb9   [PATCH] PPC/s390: Optimizations for jitless builds 2023}	{ed3ce33a3745fdadc055760a2486d307ff4e4468   [PATCH] Optimizations for jitless builds 2023}	
{8df13bdf32988f217479051cc7d59477ed218a3e   [PATCH] [loong64][mips64][wasm] Load isolate root from root register 2023}	{d7e7f890385421200169759cbd01862513f759f7   [PATCH] PPC/s390: [wasm] Load isolate root from root register 2023}	{436983f141eb8b81f5135426580c615b4604e4f8   [PATCH] [riscv][wasm] Load isolate root from root register 2023}	{fabda2b54661881570eed2c2aec22cfad03a985c   [PATCH] [wasm] Load isolate root from root register 2023}	
{df0b871ecf3c0a19b2302461c4c6974ebadc0f61   [PATCH] [riscv][regexp] Add a frame marker for irregexp frames 2023}	{1f749a5e2ecb08eb8c6a8f49dfa93b88b12d18c0   [PATCH] [loong64][mips64][regexp] Add a frame marker for irregexp frames 2023}	{84d28d1a8846bca8c048b38fbeee2435e36fc900   [PATCH] PPC/s390: [regexp] Add a frame marker for irregexp frames 2023}	{9c012f1143703d0353e7a8092d1723aef870cfc3   [PATCH] [regexp] Add a frame marker for irregexp frames 2023}	
{5711ea39a9be75b4afc12cd25f83a609070f3823   [PATCH] [riscv][regexp] Fix stack iteration when -fomit-frame-pointer is enabled 2023}	{7f0d3b4cb4362b14de80e1e41f988aef5144511f   [PATCH] [loong64][mips64][regexp] Fix stack iteration when -fomit-frame-pointer is enabled 2023}	{065c47bfdc1703770031ec62f2e1984b3265893f   [PATCH] PPC/s390: [regexp] Fix stack iteration when -fomit-frame-pointer is enabled 2023}	{e0644f3e0cb01d99058a959e7587b6e96665af0f   [PATCH] [regexp] Fix stack iteration when -fomit-frame-pointer is enabled 2023}	
{2949bb9e5c8808c1230f909a2741c0f4e09c46dd   [PATCH] [loong64][mips64] Rename CodeDataContainer to Code 2023}	{b06b015d7a6b6c27b22ba291603987236489067e   [PATCH] [riscv] Rename CodeDataContainer to Code 2023}	{b7cce4aa1622b10eab5544da67ca6a90ce29fd6c   [PATCH] PPC/s390: Rename CodeDataContainer to Code 2023}	{c53c026e6ee5083d71e1cd63607ecbae0c641678   [PATCH] Rename CodeDataContainer to Code 2023}	
{b692796f75b392b6a5cee34a1fea9fe5ea8ae39f   [PATCH] [riscv][codet] Remove the CodeT=Code implementation 2023}	{6c55f09ed5c8a85cd47c8f2a8f2af780ce93788a   [PATCH] [loong64][mips64][codet] Remove the CodeT=Code implementation 2023}	{d48aea7a23a034e321aad372d8e3ca8d31cde35a   [PATCH] PPC/s390: [codet] Remove the CodeT=Code implementation 2023}	{177b6be920a0c0cd1f1b14630dcf8d20218fc5e7   [PATCH] [codet] Remove the CodeT=Code implementation 2023}	








































































































{3cd630bc783e1cde428bca3c846f8cec985f1b26   [PATCH] s390: Restrict bit_cast 2023}	{ee5adf6f7a4d4bc2902bd9cdf167a35d91d6b820   [PATCH] Restrict bit_cast 2023}	{45501c0ed506bdc8c1b1d96e5bfb81bfaba995e5   [PATCH] Restrict bit_cast 2023}	
{ebff428a7a40c407f11d74462f6fa89fa1ac44e3   [PATCH] [wasm][jspi][arm] Run JS imports on the central stack 2023}	{a99fa663b3b8f47ef702d249ea3acc5823d02eb2   [PATCH] PPC/S390: [wasm][jspi] Run JS imports on the central stack 2023}	{9b1e5f0eacc5d9e823f440e101730f759757bf0c   [PATCH] [wasm][jspi][ia32] Run JS imports on the central stack 2023}	
{f1449c6b8df7a42fa6fd2c2f007ff40871342564   [PATCH] PPC/s390: [builtins][masm] Use CallBuiltin/TailCallBuiltin where possible 2023}	{86e54fe85fba80a75805d52031c16e83cba03671   [PATCH] [riscv][builtins][masm] Use CallBuiltin/TailCallBuiltin where possible 2023}	{063210c08c0dcbff02e3fc59f4afd430b8108432   [PATCH] [builtins][masm] Use CallBuiltin/TailCallBuiltin where possible 2023}	
{7042e907a7cb7c6edadb9890a14ae015e0c7dab0   [PATCH] [loong64][mips64][exceptions] Unify pending and scheduled exceptions 2023}	{5b117f9266c6f1b1f6878e31cd145b489e283f26   [PATCH] PPC/s390: [exceptions] Unify pending and scheduled exceptions 2023}	{12203e0c46b507dc138047c0fe22ce254bfced91   [PATCH] [exceptions] Unify pending and scheduled exceptions 2023}	
{bd77e012c6c92c9b95e040db4251b70f070a2784   [PATCH] [loong64][mips64][wasm] Add platform-specific support for the wasm-to-js wrapper 2023}	{71bb4725a71dc3ace905f35073716efe623214ae   [PATCH] PPC/s390: [wasm] Add platform-specific support for the wasm-to-js wrapper 2023}	{06d8a985d8180221c7c5a227b49c6d8b8c938c53   [PATCH] [wasm][riscv] Add platform-specific support for the wasm-to-js wrapper 2023}	
{9fbc6a0eaa7711b2ff4785403baf2a3a7d070ea0   [PATCH] [loong64][mips64] Add StackPointer and SetStackPointer ops 2023}	{942dc7042ce0d0fc789cce97fe751cd17aaa523e   [PATCH] PPC/s390: Add StackPointer and SetStackPointer ops 2023}	{ca600e3c0abb5d129ddc9019413557c6ea8aa7ec   [PATCH] [x64] Add StackPointer and SetStackPointer ops 2023}	
{2a5d8fa756541203e1c31bd5ef2779ae2e1381b1   [PATCH] [loong64][mips64][tagged-ptr] Remove Tagged<Foo> -> Foo conversion 2023}	{8f09b4bbf9d9d4b087dd0cfac12eb8fff43354f8   [PATCH] PPC/s390: [tagged-ptr] Remove Tagged<Foo> -> Foo conversion 2023}	{f895ee44de75584ed06d0bb4261d699b3811a15e   [PATCH] [tagged-ptr] Remove Tagged<Foo> -> Foo conversion 2023}	
{dd9bbfd41636e2b2a44b678e9ffca6922704af54   [PATCH] [riscv] Reduce the number of vector arch codes (Part 4) 2023}	{1a13fad66f832ab5693e6e71795e206245cc2ad0   [PATCH] [riscv] Reduce the number of  vector arch code(Part 2) 2023}	{36546f5eab263a196933a756fb5d8111f96456df   [PATCH] [riscv] Reduce the number of  vector arch code(Part 1) 2023}	
{76f4af399d405440504cd302737f0393b1ab98b2   [PATCH] [wasm][ia32] Add platform-specific support for the wasm-to-js wrapper 2023}	{afcc6231a03a446e67fc1752e0f0d4d515057351   [PATCH] [wasm][arm] Add platform-specific support for the wasm-to-js wrapper 2023}	{93bb287c2fef9c52760940895e82759f780ec93f   [PATCH] [wasm][arm64] Add platform-specific support for the wasm-to-js wrapper 2023}	
{751d271c8799c28a34559d48c5b7e224cbae3f4c   [PATCH] [loong64][mips64][turboshaft][js] Add reducer to make int64->int32 truncations explicit 2023}	{101c92793b2b483b2a36f6cd4b6e4d09ff9ee1fe   [PATCH] PPC/s390: [turboshaft][js] Add reducer to make int64->int32 truncations explicit 2023}	{9952a7366df210ba5fc52392346b28c806719b67   [PATCH] [turboshaft][js] Add reducer to make int64->int32 truncations explicit 2023}	
{8889cad5545413521074d8bc5129beb0603fbe12   [PATCH] [loong64][mips64][liftoff] Remove signature from C calls 2023}	{374f1e71fcee5ff8881a988f32f8482298acdda5   [PATCH] PPC/s390: [liftoff] Remove signature from C calls 2023}	{bcca43c8e49285d663208b8e386a299fc73e0c01   [PATCH] [liftoff] Remove signature from C calls 2023}	
{93da7f82c2f27b08162f483fa8fa4856922a3722   [PATCH] [loong64][mips64] Make stack switching work on the simulator and with CFI 2023}	{f6a07623da686cd74302919ce13ea347baf783a2   [PATCH] PPC/s390: Make stack switching work on the simulator and with CFI 2023}	{31863bc7c1e239fef6c1650278285cd83b3c5370   [PATCH] [arm64] Make stack switching work on the simulator and with CFI 2023}	
{b53d2403c9fb978420cdf9e2ff721fc7adab7ce6   [PATCH] [loong64][mips64][wasm] Generic js-to-wasm wrapper written in Torque 2023}	{37a1f24020b636e222af68f9291b2db3cad5655a   [PATCH] PPC/s390: [wasm] Generic js-to-wasm wrapper written in Torque 2023}	{31c15897a3a6a5f3ed36ef0c89c2eb7d38a0e093   [PATCH] [wasm] Generic js-to-wasm wrapper written in Torque 2023}	
{c7f2b74e6d10ddd4e46425de1d777aafe8464d9e   [PATCH] [loong64][mips64][heap] Move age from BytecodeArray into SharedFunctionInfo 2023}	{9ee68dbbab8ec57a95d00d45d701fe1d93768597   [PATCH] [riscv][heap] Move age from BytecodeArray into SharedFunctionInfo 2023}	{61db298cf24f55f7f368ceb21b79b41c07692836   [PATCH] [heap] Move age from BytecodeArray into SharedFunctionInfo 2023}	
{7be79498222a24f997e06a3286e1f4943cb807c3   [PATCH] PPC/s390: Reland^2 "[heap] Move age from BytecodeArray into SharedFunctionInfo" 2023}	{94c7b145d246f2d9758d5fb0a4a5219a9db95ab0   [PATCH] Reland^2 "[heap] Move age from BytecodeArray into SharedFunctionInfo" 2023}	{4636cca1b2b1fd9660f21a56578ef6aaefc10e39   [PATCH] Reland "[heap] Move age from BytecodeArray into SharedFunctionInfo" 2023}	
{7b791fec2999dcfc665cfaa9a0b15de9f39936bf   [PATCH] PPC/s390: [wasm-stringrefs] Recognize a few more builtins 2023}	{3874b45141c130e3f55868f0e132ceeb4fb2179c   [PATCH] [loong64][mips64][wasm-stringrefs] Recognize a few more builtins 2023}	{cf1c64fa9ad9d62029a8e22f52aaed76cb3fe29d   [PATCH] [wasm-stringrefs] Recognize a few more builtins 2023}	
{3ae27f1f1cc2aca9b5e2901c1a524a8f31823425   [PATCH] [loong64][mips64] Flip the order of write barrier checks in Turbofan 2023}	{ece773865a5dc7e2ea6b24197548c3af5f179877   [PATCH] PPC/s390: Flip the order of write barrier checks in Turbofan 2023}	{4ad5dc96ce0b609f2de86918a154b8e4a29c9302   [PATCH] Flip the order of write barrier checks in Turbofan 2023}	
{d0f81e4d4b04d7474f79993e6a3773b9e552930e   [PATCH] [loong64][mips64][builtins] Clean up api callback stack access 2023}	{2a99fd9e6050955ebc71c57731006e4e1c5b251a   [PATCH] PPC/s390: [builtins] Clean up api callback stack access 2023}	{bcf80a7eeedcb2c3d88f120fce8e7cfdb8f16252   [PATCH] [builtins] Clean up api callback stack access 2023}	
{a7d3bfead6343af4cb8a7e3ab3c3079704886d22   [PATCH] [loong64][mips64] Allocate builtin Code objects in RO space 2023}	{ecffcf956a8fb62173905593ca6203cd682b2a66   [PATCH] [riscv]Allocate builtin Code objects in RO space 2023}	{10fae211fd84c927cefea869c7814dcd3f74abc8   [PATCH] Allocate builtin Code objects in RO space 2023}	
{3629566847427f851edc59cba2baca364935d234   [PATCH] [loong64][mips64] Move data fields from InstructionStream to Code 2023}	{def6d156a4cbcc392839eb9354c72734d8ceb97f   [PATCH] [riscv] Move data fields from InstructionStream to Code 2023}	{ff909db74eefcf68656e190bd6e3fc0edc0f7790   [PATCH] Move data fields from InstructionStream to Code 2023}	
{6353852da5ce446ae6aa0cd505931f4c3d2074d1   [PATCH] [loong64][mips64][wasm-gc] Inlining of very small wasm functions into JS 2023}	{3b412d523a8775001993b348c27df57938c11c77   [PATCH] [riscv][wasm-gc] Inlining of very small wasm functions into JS 2023}	{79d603d3cb746c105a45e1282abf68c278a752af   [PATCH] [wasm-gc] Inlining of very small wasm functions into JS 2023}	
{eb6447f36e26d7a4ed72be826855715468f329c0   [PATCH] PPC/s390: [wasm-relaxed-simd] Add dot/dot_add implementations 2023}	{21289aa92c80a4161cc5f0d9915a0002a644d8b4   [PATCH] [riscv64][wasm-relaxed-simd] Add dot/dot_add RISCV implementations 2023}	{63dedfc05aeec74087f360dc90fc8825abf9fedd   [PATCH] [wasm-relaxed-simd] Add dot/dot_add ARM implementations 2023}	
{19ae980ce1763367e2c1c918324fbc9ed15426de   [PATCH] [loong64][mips64] Remove the AbstractCode == InstructionStream case 2023}	{be42eb7139853e672f0a3189245b4d4cdd52344a   [PATCH] PPC/s390: Remove the AbstractCode == InstructionStream case 2023}	{11c4c8e3d258d63991a43871e9fa727c405412ac   [PATCH] Remove the AbstractCode == InstructionStream case 2023}	
{dba5c526af85d3c05ad8a43d0822d337aebf82c4   [PATCH] [loong64][mips64][wasm] Fix printing of wasm-to-js frames 2023}	

































































































































































































































































































































{3bd78de20b381253158ef953a6531da7fbfc7538   [PATCH] [codegen] Load trusted pointer table via root register 2023}	

{8cf17a14a78cc1276eb42e1b4bb699f705675530   [PATCH] [sandbox] Reference Code from FeedbackVector via code pointer 2023}	
{1ae8f2f47ae3073d42050651b078111fa1b59b00   [PATCH] PPC/s390: [cfi] use more CodeModificationForDebugging scopes 2023}	{76c2d0382cace104db38e7fadb25d02b5141cc10   [PATCH] [cfi] use more CodeModificationForDebugging scopes 2023}	
{3494f446d33e18eed4fb4db4a1876a883e265b79   [PATCH] PPC/s390: [exceptions] cleanup after unifying pending/scheduled exceptions 2023}	{a34be67351534cdff8ec04847630615eac9c057d   [PATCH] [exceptions] cleanup after unifying pending/scheduled exceptions 2023}	
{619a24b9969864ab9c48ddaf2d6c747992995b1f   [PATCH] Reland^2 "[sandbox] Ensure bytecode is loaded via a trusted pointer" 2023}	{9d6bd9e75a7350327121ae4f9d748c01886e374c   [PATCH] Reland "[sandbox] Ensure bytecode is loaded via a trusted pointer" 2023}	
{3e42642b3727e99dec37b32cada7c406d24a675c   [PATCH] [loong64][mips64][jspi] Port JS central stack switch 2023}	{bf668e84fbd39c5aaa3ae5ec5952f8a555926dec   [PATCH] [riscv][jspi][arm64] Port JS central stack switch 2023}	
{57c865a14330da93445f3febe6d233852a1dae50   [PATCH] [riscv][turboshaft] Merge EqualOp into ComparisonOp 2023}	{c56336a064ed11369f4c1b48e49c806e8fd46ceb   [PATCH] [turboshaft] Merge EqualOp into ComparisonOp 2023}	
{b477829b284cff8667f07089880560147c3c3d2c   [PATCH] PPC/s390: [wasm][memory64] Use trap handling for memory64 2023}	{8b4bcf30bd87c5215b4137d8afecc3df935f4902   [PATCH] [wasm][memory64] Use trap handling for memory64 2023}	
{5601ea256b4b3a4fd0772adfd8b028bad5225e6a   [PATCH] PPC/s390: [codegen] Avoid redundant code comment 2023}	{b578a2d5fe3fc407b2d63a7f0d0240f3016120dd   [PATCH] [codegen] Avoid redundant code comment 2023}	
{bf9318f5a59347042ccc393e9f9b102b7e7abf7e   [PATCH] [riscv] Port InstructionSelector part 3 2023}	{2fae7bdf1c664a943b370d9b5ed13ace0742a348   [PATCH] [riscv] Port InstructionSelector part 2 2023}	
{4341fa249188705e78fff2a4dad4df68f6e46116   [PATCH] [loong64][wasm] Single landing pad for trap handlers 2023}	{682d41b0064f61b364d58557259c89299e05507f   [PATCH] [wasm] Single landing pad for trap handlers 2023}	
{012b1b960beb4bc40ac9ab38d55a8770a6c85821   [PATCH] [loong64][mips64][liftoff] Add support for direct C calls 2023}	{5fb5de9cfc6c54cf8710db01f395299d5acb435b   [PATCH] [liftoff] Add support for direct C calls 2023}	
{60dcfa7700194e75a3144a528ce1204616d3ec68   [PATCH] PPC/s390: Reland "[baseline] Use the same slot for FBV as Ignition" 2023}	{1cfbe6e6a787c5424e096dfa8348e56e6053feaf   [PATCH] Reland "[baseline] Use the same slot for FBV as Ignition" 2023}	
{d143fa0c5b0542af7ae65ea9a851802704dad161   [PATCH] [loong64][mips64][baseline] Use the same slot for FBV as Ignition 2023}	{fd775a3054c017c801d9e3c2d32dfb13ac79c554   [PATCH] [baseline] Use the same slot for FBV as Ignition 2023}	
{cf43f10625997e80f78cc15360951fe01918aee9   [PATCH] s390: [wasm][liftoff] Fix relaxed dot product regalloc 2023}	{b9eda2d1664c43e7a9974facb025210d5f0ba13f   [PATCH] [wasm][liftoff] Fix relaxed dot product regalloc 2023}	
{52da47b257d77672c0288593b3bffcd0a0f1352b   [PATCH] [mips64][liftoff] Avoid modifying the cache state in stores 2023}	{413662b468e4946eb6237ff0022f061bd89fbc12   [PATCH] [liftoff] Avoid modifying the cache state in stores 2023}	
{32081b9cb0adfad3b8b8e85fc7327ee015ad128a   [PATCH] [Assembler][ia32] Implement special lea instruction. 2023}	{96d81437227d3d477a02b6ccaeea531a4c04cc5a   [PATCH] [Assembler][ia32]Implement special lea instruction 2023}	
{981f0d656d129a15bae5fc7c7c7f4c80f0a94c15   [PATCH] [riscv] Reduce the vector arch code (Part 8) 2023}	{a69fd7dfc981e82c4639a902583e3a7fc9f89715   [PATCH] [riscv] Reduce the vector arch code (Part 7) 2023}	
{5301bd881bdc1364d527893fa7f182da0000ab90   [PATCH] [riscv] Reduce riscv Vector arch code(Part 6) 2023}	{ed285609763d1166abb657b65c62c02ff7431ce2   [PATCH] [riscv] Reduce riscv Vector arch code(Part 5) 2023}	
{f7699855c95a3faa6a76bdb71263cf8fbfbe0fd7   [PATCH] Reland^2 "[maglev] Support non-pointer-compressed builds" 2023}	{a22079d35e5cc27246d865e11b99af74c15a09da   [PATCH] Reland "[maglev] Support non-pointer-compressed builds" 2023}	
{4576ce69bc8562f4c85f57d3d19e59e6a470d7a5   [PATCH] [riscv][maglev][turbofan] Use the fast construct builtin when deopting 2023}	{f991de3b3869977f9f5f3332e3593e0929df4eb4   [PATCH] [maglev][turbofan] Use the fast construct builtin when deopting 2023}	
{552645c9419604e69f530ffa34f9f968e7b49104   [PATCH] [loong64][mips64][sandbox] Sandboxify WasmIndirectFunctionTable::Targets 2023}	{f7440172503e758e543fa0e5a6da9356a43236cf   [PATCH] [sandbox] Sandboxify WasmIndirectFunctionTable::Targets 2023}	
{78cc598d67f966dc20d3e045880392a6b5f41e56   [PATCH] [loong64][mips64][liftoff] Make tier-up check platform specific 2023}	{2c4468730d01163519074efe6a66078a6b0e14cd   [PATCH] [liftoff] Make tier-up check platform specific 2023}	
{94d3c58817512691edeb832d03656a1faacdc780   [PATCH] PPC/s390: Reland "[sandbox] Sandboxify WasmIndirectFunctionTable::Targets" 2023}	{11c55ef5b4229f4fb6eb497aba9903d3252044e7   [PATCH] Reland "[sandbox] Sandboxify WasmIndirectFunctionTable::Targets" 2023}	
{aa79dae3ecf2bc56654bf2ea531fe5954d1d2716   [PATCH] PPC/s390: Reland "[liftoff] Make tier-up check platform specific" 2023}	{e0c0fa199505c71f4222074b407c14a7196f7372   [PATCH] Reland "[liftoff] Make tier-up check platform specific" 2023}	
{ff01727d91e3c4adb360a78c14555fc4f8bc0ae8   [PATCH] PPC/s390: Reland "[wasm] Switching to the central stack from Wasm to Runtime calls." 2023}	{6d256f7d37d6ef2ab4ef605633b9a3f2f6f42c43   [PATCH] Reland "[wasm] Switching to the central stack from Wasm to Runtime calls." 2023}	
{81672861cb6bef74ed4daec624d4b2c1ab63af8a   [PATCH] [loong64][mips64][wasm] Switching to the central stack from Wasm to Runtime calls. 2023}	{611d0530d0639163a7df73c9aa147b151d8aeff3   [PATCH] [wasm] Switching to the central stack from Wasm to Runtime calls. 2023}	
{0a553206a178396e76a95d73f9b9fb941d44e10d   [PATCH] PPC/s390: [maglev][arm] Use SafepointTableBuilderBase in GetCode 2023}	{3482ab709b9ee5ee62032ad05d67b19aa25eca76   [PATCH] [maglev][arm] Use SafepointTableBuilderBase in GetCode 2023}	
{fa3a6a34e34cb34e8fe496640b68a6ac6aa0dc48   [PATCH] s390: [test] Use uint8_t instead of byte 2023}	{aa228d8bfe21af169e969fa33e71058b888338d2   [PATCH] [test] Use uint8_t instead of byte 2023}	
{bd6487a611fb1cea052d19ffbaf147c4ba589dea   [PATCH] [loong64][mips64][wasm-stringrefs] Recognize S.p.toLocaleLowerCase 2023}	{48adc4b67c156588a56bdb9c620eef683208def6   [PATCH] [wasm-stringrefs] Recognize S.p.toLocaleLowerCase 2023}	
{9cefa614b3ddf87abca192bc93e7afdffc092b09   [PATCH] PPC/s390: Reland "Cleanup memory modification scopes" 2023}	{9fb114888030388d3b7b1a1a14a04bf83de1f03a   [PATCH] Reland "Cleanup memory modification scopes" 2023}	
{c347910aa717bba66e24923ebb2772b4da6ee7bc   [PATCH] PPC/s390: Reland "[wasm-stringrefs] Recognize S.p.toLocaleLowerCase" 2023}	{f6ebe8af6d9b8bae98ca74add29b18e28a6f6d20   [PATCH] Reland "[wasm-stringrefs] Recognize S.p.toLocaleLowerCase" 2023}	
{2f2a2457f4a18fb674ba8e8edfedf80254856cc5   [PATCH] PPC: [regexp] Fix clobbered register in global Unicode special case 2023}	{2c8a019f39d29b403f881d9b5932e3219fdcc832   [PATCH] [regexp] Fix clobbered register in global Unicode special case 2023}	
{3da045a1a76173d03aeb15985654cf95939a69ae   [PATCH] Revert "PPC/s390: Flip the order of write barrier checks in Turbofan" 2023}	{046d3f16c91f0149e12212e664c99231d486ed69   [PATCH] Revert "Flip the order of write barrier checks in Turbofan" 2023}	
{1d2d4ce1d2067a5fe7b0ad2c1f15a24b0c26e921   [PATCH] Reland^2 "[tiering] Don't increase budgets on forward jumps" 2023}	{cdb171228bdc7566cdfbed9a1a9622ad6ab2e338   [PATCH] Reland "[tiering] Don't increase budgets on forward jumps" 2023}	
{05715898e78ef812c3e6e9c774fbf41fdda35ded   [PATCH] PPC/s390: Reland "Move data fields from InstructionStream to Code" 2023}	{ca9faf8024ec138abb9c7c1c7d6bb8dd1af1de28   [PATCH] Reland "Move data fields from InstructionStream to Code" 2023}	
{e32648ab046c64b6741a85ee5fbff2e652324703   [PATCH] PPC/s390: Reland "Allocate builtin Code objects in RO space" 2023}	{0600991a1ad20340db26b9f0785cbbdc1aa332da   [PATCH] Reland "Allocate builtin Code objects in RO space" 2023}	
{2e3718cd486eeb7d89f4548868ce123c4093ea9f   [PATCH] PPC/s390: Reland "[wasm-gc] Inlining of very small wasm functions into JS" 2023}	{d9d393e442c1ebb7f2813cda3749b861a8196e3e   [PATCH] Reland "[wasm-gc] Inlining of very small wasm functions into JS" 2023}	
{f70b0a7bbc93af3b17c6cf6445073c1901b637c3   [PATCH] Reland "[x64] fold constant base into constant displacement when generate memory load/store operand." 2023}	{74d741c12aacef92416fc3f911b322a559fc36c0   [PATCH] [x64] fold constant base into constant displacement when generate memory load/store operand. 2023}	
{fa2da69a00e7a205abe50f5d01c898c8036940d1   [PATCH] [loong64][mips64][liftoff] Remove unused RelocInfo::Mode parameter 2023}	{c88ab96ee192052a0aa793276f2a2c28e7dd47df   [PATCH] [liftoff] Remove unused RelocInfo::Mode parameter 2023}	
{fd2cb0482679439bad769953d22cae5b4544f34f   [PATCH] PPC/s390: [isolate-data] Tweak root register offsets and bias 2023}	{e17bbd604586a791c440a132d1b035b8df634006   [PATCH] [isolate-data] Tweak root register offsets and bias 2023}	
{644cf4acce878007f53a28affb2cad0db751dcfa   [PATCH] [static-roots][arm64] Encode roots as immediates when possible 2023}	{03dd4bd834d47f50be0ae6cf8d20f9a85f991f33   [PATCH] [static-roots][x64] Encode roots as immediates when possible 2023}	
{5275c1a407407fc4d42cb732e1213f97eb6ed7e6   [PATCH] s390: [ptrcomp] Remove the distinction of TaggedAny and TaggedPointer 2023}	{81aa89592bf85f39a9ee99ebedaf748437038ddf   [PATCH] [ptrcomp] Remove the distinction of TaggedAny and TaggedPointer 2023}	
{31487e43a65f899c055a49828911219ef9ad7334   [PATCH] PPC/s390: [liftoff] Use cross-platform conditions 2023}	{a5eb40d90daa9a3f7d7952e3a90fb3be9025b1e6   [PATCH] [liftoff] Use cross-platform conditions 2023}	
{35964e2418bb329a6e6d49bf6f0d7b1b29073e8a   [PATCH] PPC/s390: [wasm][memory64] Fix atomics 2023}	{76a817e03a83414a5eb727e5f1c73cfa3831cf30   [PATCH] [wasm][memory64] Fix atomics 2023}	
{0dbff5d07b27e848e00902b7e35fddf8a0ff0c51   [PATCH] PPC/s390: Various post-Code rename cleanups 2023}	{c0367102a3aef0ebc642ecd4c6528966e065deee   [PATCH] Various post-Code rename cleanups 2023}	
{60a8726ed65417516fe4c69d1bb0d27a296d6d1b   [PATCH] PPC/s390: Rename Code to InstructionStream 2023}	{2c7272fddee50a161a97c753fcf8cfa6ae7f920f   [PATCH] Rename Code to InstructionStream 2023}	
{f5bf7b701a48eb5d3b3d1f466b580c181cede6c0   [PATCH] PPC/s390: [codet] Remove obsolete CodeT dispatch functions 2023}	{651d4d9748b40fadb45317f1f9655d5b81fe81b6   [PATCH] [codet] Remove obsolete CodeT dispatch functions 2023}	
{880f8208ef1aba2a3a1cfa71ea2d3852730708e3   [PATCH] PPC/s390: [static-roots] Use static roots in CSA 2023}	{643b458b07a99b1b23108c6a17c7450b645c62e6   [PATCH] [static-roots] Use static roots in CSA 2023}	





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































