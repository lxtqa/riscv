diff --git a/src/baseline/arm/baseline-assembler-arm-inl.h b/src/baseline/arm/baseline-assembler-arm-inl.h
index d1fbd40f9e8..78d48b57c91 100644
--- a/src/baseline/arm/baseline-assembler-arm-inl.h
+++ b/src/baseline/arm/baseline-assembler-arm-inl.h
@@ -116,21 +116,21 @@ void BaselineAssembler::JumpIfNotSmi(Register value, Label* target,
 
 void BaselineAssembler::CallBuiltin(Builtin builtin) {
   //  __ CallBuiltin(static_cast<int>(builtin));
-  ASM_CODE_COMMENT_STRING(masm_,
-                          __ CommentForOffHeapTrampoline("call", builtin));
+  __ RecordCommentForOffHeapTrampoline(builtin);
   ScratchRegisterScope temps(this);
   Register temp = temps.AcquireScratch();
   __ LoadEntryFromBuiltin(builtin, temp);
   __ Call(temp);
+  __ RecordComment("]");
 }
 
 void BaselineAssembler::TailCallBuiltin(Builtin builtin) {
-  ASM_CODE_COMMENT_STRING(masm_,
-                          __ CommentForOffHeapTrampoline("tail call", builtin));
+  __ RecordCommentForOffHeapTrampoline(builtin);
   ScratchRegisterScope temps(this);
   Register temp = temps.AcquireScratch();
   __ LoadEntryFromBuiltin(builtin, temp);
   __ Jump(temp);
+  __ RecordComment("]");
 }
 
 void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc,
@@ -360,7 +360,6 @@ void BaselineAssembler::LoadByteField(Register output, Register source,
 }
 void BaselineAssembler::StoreTaggedSignedField(Register target, int offset,
                                                Smi value) {
-  ASM_CODE_COMMENT(masm_);
   ScratchRegisterScope temps(this);
   Register tmp = temps.AcquireScratch();
   __ mov(tmp, Operand(value));
@@ -369,7 +368,6 @@ void BaselineAssembler::StoreTaggedSignedField(Register target, int offset,
 void BaselineAssembler::StoreTaggedFieldWithWriteBarrier(Register target,
                                                          int offset,
                                                          Register value) {
-  ASM_CODE_COMMENT(masm_);
   DCHECK(!AreAliased(target, value));
   __ str(value, FieldMemOperand(target, offset));
   __ RecordWriteField(target, offset, value, kLRHasNotBeenSaved,
@@ -383,7 +381,6 @@ void BaselineAssembler::StoreTaggedFieldNoWriteBarrier(Register target,
 
 void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(
     int32_t weight, Label* skip_interrupt_label) {
-  ASM_CODE_COMMENT(masm_);
   ScratchRegisterScope scratch_scope(this);
   Register feedback_cell = scratch_scope.AcquireScratch();
   LoadFunction(feedback_cell);
@@ -406,7 +403,6 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(
 
 void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(
     Register weight, Label* skip_interrupt_label) {
-  ASM_CODE_COMMENT(masm_);
   ScratchRegisterScope scratch_scope(this);
   Register feedback_cell = scratch_scope.AcquireScratch();
   LoadFunction(feedback_cell);
@@ -429,7 +425,6 @@ void BaselineAssembler::AddSmi(Register lhs, Smi rhs) {
 
 void BaselineAssembler::Switch(Register reg, int case_value_base,
                                Label** labels, int num_labels) {
-  ASM_CODE_COMMENT(masm_);
   Label fallthrough;
   if (case_value_base > 0) {
     __ sub(reg, reg, Operand(case_value_base));
@@ -456,32 +451,30 @@ void BaselineAssembler::Switch(Register reg, int case_value_base,
 #define __ basm.
 
 void BaselineAssembler::EmitReturn(MacroAssembler* masm) {
-  ASM_CODE_COMMENT(masm);
   BaselineAssembler basm(masm);
 
   Register weight = BaselineLeaveFrameDescriptor::WeightRegister();
   Register params_size = BaselineLeaveFrameDescriptor::ParamsSizeRegister();
 
-  {
-    ASM_CODE_COMMENT_STRING(masm, "Update Interrupt Budget");
+  __ RecordComment("[ Update Interrupt Budget");
 
-    Label skip_interrupt_label;
-    __ AddToInterruptBudgetAndJumpIfNotExceeded(weight, &skip_interrupt_label);
-    {
-      __ masm()->SmiTag(params_size);
-      __ Push(params_size, kInterpreterAccumulatorRegister);
+  Label skip_interrupt_label;
+  __ AddToInterruptBudgetAndJumpIfNotExceeded(weight, &skip_interrupt_label);
+  {
+    __ masm()->SmiTag(params_size);
+    __ Push(params_size, kInterpreterAccumulatorRegister);
 
-      __ LoadContext(kContextRegister);
-      __ LoadFunction(kJSFunctionRegister);
-      __ Push(kJSFunctionRegister);
-      __ CallRuntime(Runtime::kBytecodeBudgetInterruptFromBytecode, 1);
+    __ LoadContext(kContextRegister);
+    __ LoadFunction(kJSFunctionRegister);
+    __ Push(kJSFunctionRegister);
+    __ CallRuntime(Runtime::kBytecodeBudgetInterruptFromBytecode, 1);
 
-      __ Pop(kInterpreterAccumulatorRegister, params_size);
-      __ masm()->SmiUntag(params_size);
-    }
-
-    __ Bind(&skip_interrupt_label);
+    __ Pop(kInterpreterAccumulatorRegister, params_size);
+    __ masm()->SmiUntag(params_size);
   }
+  __ RecordComment("]");
+
+  __ Bind(&skip_interrupt_label);
 
   BaselineAssembler::ScratchRegisterScope temps(&basm);
   Register actual_params_size = temps.AcquireScratch();
