diff --git a/src/builtins/loong64/builtins-loong64.cc b/src/builtins/loong64/builtins-loong64.cc
index a06a0b4b7a3..5ba5b8c2a1c 100644
--- a/src/builtins/loong64/builtins-loong64.cc
+++ b/src/builtins/loong64/builtins-loong64.cc
@@ -3011,11 +3011,13 @@ void Builtins::Generate_DoubleToI(MacroAssembler* masm) {
 namespace {
 
 // Calls an API function.  Allocates HandleScope, extracts returned value
-// from handle and propagates exceptions.  Restores context.  stack_space
-// - space to be unwound on exit (includes the call JS arguments space and
-// the additional space allocated for the fast call).
+// from handle and propagates exceptions.  Restores context.  On return removes
+// *stack_space_operand * kSystemPointerSize or stack_space * kSystemPointerSize
+// (GCed, includes the call JS arguments space and the additional space
+// allocated for the fast call).
 void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
-                              ExternalReference thunk_ref, int stack_space,
+                              ExternalReference thunk_ref,
+                              Register thunk_last_arg, int stack_space,
                               MemOperand* stack_space_operand,
                               MemOperand return_value_operand) {
   using ER = ExternalReference;
@@ -3028,34 +3030,54 @@ void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
   MemOperand level_mem_op = __ ExternalReferenceAsOperand(
       ER::handle_scope_level_address(isolate), no_reg);
 
-  DCHECK(function_address == a1 || function_address == a2);
+  Register return_value = a0;
+  Register scratch = arg_reg_4;
+  Register scratch2 = a4;
+
+  // Allocate HandleScope in callee-saved registers.
+  // We will need to restore the HandleScope after the call to the API function,
+  // by allocating it in callee-saved registers it'll be preserved by C code.
+  Register prev_next_address_reg = s0;
+  Register prev_limit_reg = s1;
+  Register prev_level_reg = s2;
+
+  // C arguments (arg_reg_1/2) are expected to be initialized outside, so this
+  // function must not corrupt them (return_value overlaps with arg_reg_1 but
+  // that's ok because we start using it only after the C call).
+  DCHECK(!AreAliased(arg_reg_1, arg_reg_2, arg_reg_3,  // C args
+                     scratch, scratch2, prev_next_address_reg, prev_limit_reg));
+  // Ensure the additional argument for thunk_ref is already in the right
+  // register
+  DCHECK(thunk_last_arg == arg_reg_2 || thunk_last_arg == arg_reg_3);
+  DCHECK_EQ(function_address, thunk_last_arg);
 
-  // Allocate HandleScope in callee-save registers.
   {
     ASM_CODE_COMMENT_STRING(masm,
                             "Allocate HandleScope in callee-save registers.");
-    __ Ld_d(s0, next_mem_op);
-    __ Ld_d(s1, limit_mem_op);
-    __ Ld_w(s2, level_mem_op);
-    __ Add_w(s2, s2, Operand(1));
-    __ St_w(s2, level_mem_op);
+    __ Ld_d(prev_next_address_reg, next_mem_op);
+    __ Ld_d(prev_limit_reg, limit_mem_op);
+    __ Ld_w(prev_level_reg, level_mem_op);
+    __ Add_w(scratch, prev_level_reg, Operand(1));
+    __ St_w(scratch, level_mem_op);
   }
 
   Label profiler_or_side_effects_check_enabled, done_api_call;
   __ RecordComment("Check if profiler or side effects check is enabled");
-  __ Ld_b(t7, __ ExternalReferenceAsOperand(ER::execution_mode_address(isolate),
-                                            no_reg));
-  __ Branch(&profiler_or_side_effects_check_enabled, ne, t7, Operand(zero_reg));
+  __ Ld_b(scratch, __ ExternalReferenceAsOperand(
+                       ER::execution_mode_address(isolate), no_reg));
+  __ Branch(&profiler_or_side_effects_check_enabled, ne, scratch,
+            Operand(zero_reg));
 #ifdef V8_RUNTIME_CALL_STATS
   __ RecordComment("Check if RCS is enabled");
-  __ li(t7, ER::address_of_runtime_stats_flag());
-  __ Ld_w(t7, MemOperand(t7, 0));
-  __ Branch(&profiler_or_side_effects_check_enabled, ne, t7, Operand(zero_reg));
+  __ li(scratch, ER::address_of_runtime_stats_flag());
+  __ Ld_w(scratch, MemOperand(scratch, 0));
+  __ Branch(&profiler_or_side_effects_check_enabled, ne, scratch,
+            Operand(zero_reg));
 #endif  // V8_RUNTIME_CALL_STATS
 
   __ RecordComment("Call the api function directly.");
-  __ mov(t7, function_address);
-  __ StoreReturnAddressAndCall(t7);
+  __ mov(scratch, function_address);
+  __ StoreReturnAddressAndCall(scratch);
   __ bind(&done_api_call);
 
   Label promote_scheduled_exception;
@@ -3063,7 +3085,6 @@ void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
   Label leave_exit_frame;
 
   __ RecordComment("Load the value from ReturnValue");
-  Register return_value = a0;
   __ Ld_d(return_value, return_value_operand);
 
   {
@@ -3071,31 +3092,33 @@ void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
         masm,
         "No more valid handles (the result handle was the last one)."
         "Restore previous handle scope.");
-    __ St_d(s0, next_mem_op);
+    __ St_d(prev_next_address_reg, next_mem_op);
     if (v8_flags.debug_code) {
-      __ Ld_w(a1, level_mem_op);
-      __ Check(eq, AbortReason::kUnexpectedLevelAfterReturnFromApiCall, a1,
-               Operand(s2));
+      __ Ld_w(scratch, level_mem_op);
+      __ Sub_w(scratch, scratch, Operand(1));
+      __ Check(eq, AbortReason::kUnexpectedLevelAfterReturnFromApiCall, scratch,
+               Operand(prev_level_reg));
     }
-    __ Sub_w(s2, s2, Operand(1));
-    __ St_w(s2, level_mem_op);
-    __ Ld_d(kScratchReg, limit_mem_op);
-    __ Branch(&delete_allocated_handles, ne, s1, Operand(kScratchReg));
+    __ St_w(prev_level_reg, level_mem_op);
+    __ Ld_d(scratch, limit_mem_op);
+    __ Branch(&delete_allocated_handles, ne, prev_limit_reg, Operand(scratch));
   }
 
   __ RecordComment("Leave the API exit frame.");
   __ bind(&leave_exit_frame);
 
+  Register stack_space_reg = prev_limit_reg;
   if (stack_space_operand == nullptr) {
     DCHECK_NE(stack_space, 0);
-    __ li(s0, Operand(stack_space));
+    __ li(stack_space_reg, Operand(stack_space));
   } else {
     DCHECK_EQ(stack_space, 0);
-    __ Ld_d(s0, *stack_space_operand);
+    __ Ld_d(stack_space_reg, *stack_space_operand);
   }
 
   static constexpr bool kRegisterContainsSlotCount = false;
-  __ LeaveExitFrame(s0, NO_EMIT_RETURN, kRegisterContainsSlotCount);
+  __ LeaveExitFrame(stack_space_reg, NO_EMIT_RETURN,
+                    kRegisterContainsSlotCount);
 
   {
     ASM_CODE_COMMENT_STRING(masm,
@@ -3114,21 +3137,17 @@ void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
     __ bind(&finish_return);
   }
 
-  {
-    Register map = a4;
-    Register tmp = a5;
-    __ AssertJSAny(return_value, map, tmp,
-                   AbortReason::kAPICallReturnedInvalidObject);
-  }
+  __ AssertJSAny(return_value, scratch, scratch2,
+                 AbortReason::kAPICallReturnedInvalidObject);
 
   __ Ret();
 
   {
     ASM_CODE_COMMENT_STRING(masm, "Call the api function via thunk wrapper.");
     __ bind(&profiler_or_side_effects_check_enabled);
-    // Additional parameter is the address of the actual callback.
-    __ li(t7, thunk_ref);
-    __ StoreReturnAddressAndCall(t7);
+    // Additional parameter is the address of the actual callback function.
+    __ li(scratch, thunk_ref);
+    __ StoreReturnAddressAndCall(scratch);
     __ Branch(&done_api_call);
   }
 
@@ -3140,12 +3159,14 @@ void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
     ASM_CODE_COMMENT_STRING(
         masm, "HandleScope limit has changed. Delete allocated extensions.");
     __ bind(&delete_allocated_handles);
-    __ St_d(s1, limit_mem_op);
-    __ mov(s0, a0);
-    __ PrepareCallCFunction(1, s1);
-    __ li(a0, ER::isolate_address(isolate));
+    __ St_d(prev_limit_reg, limit_mem_op);
+    // Save the return value in a callee-save register.
+    Register saved_result = prev_limit_reg;
+    __ mov(saved_result, a0);
+    __ PrepareCallCFunction(1, prev_level_reg);
+    __ li(arg_reg_1, ER::isolate_address(isolate));
     __ CallCFunction(ER::delete_handle_scope_extensions(), 1);
-    __ mov(a0, s0);
+    __ mov(arg_reg_1, saved_result);
     __ jmp(&leave_exit_frame);
   }
 }
@@ -3176,6 +3197,9 @@ void Builtins::Generate_CallApiCallback(MacroAssembler* masm) {
   //  -- sp[(argc) * 8]      : last argument
   // -----------------------------------
 
+  Register function_callback_info_arg = arg_reg_1;
+  Register thunk_callback_arg = arg_reg_2;
+
   Register api_function_address = a1;
   Register argc = a2;
   Register call_data = a3;
@@ -3200,14 +3224,14 @@ void Builtins::Generate_CallApiCallback(MacroAssembler* masm) {
   // Set up FunctionCallbackInfo's implicit_args on the stack as follows:
   //
   // Target state:
-  //   sp[1 * kSystemPointerSize]: kHolder   <= FCA::implicit_args_
-  //   sp[2 * kSystemPointerSize]: kIsolate
-  //   sp[3 * kSystemPointerSize]: undefined (padding, unused)
-  //   sp[4 * kSystemPointerSize]: undefined (kReturnValue)
-  //   sp[5 * kSystemPointerSize]: kData
-  //   sp[6 * kSystemPointerSize]: undefined (kNewTarget)
+  //   sp[0 * kSystemPointerSize]: kHolder   <= FCA::implicit_args_
+  //   sp[1 * kSystemPointerSize]: kIsolate
+  //   sp[2 * kSystemPointerSize]: undefined (padding, unused)
+  //   sp[3 * kSystemPointerSize]: undefined (kReturnValue)
+  //   sp[4 * kSystemPointerSize]: kData
+  //   sp[5 * kSystemPointerSize]: undefined (kNewTarget)
   // Existing state:
-  //   sp[7 * kSystemPointerSize]:           <= FCA:::values_
+  //   sp[6 * kSystemPointerSize]:           <= FCA:::values_
 
   // Set up the base register for addressing through MemOperands. It will point
   // at the receiver (located at sp + argc * kSystemPointerSize).
@@ -3236,9 +3260,9 @@ void Builtins::Generate_CallApiCallback(MacroAssembler* masm) {
   // kNewTarget.
   __ St_d(scratch, MemOperand(sp, FCA::kNewTargetIndex * kSystemPointerSize));
 
-  // Keep a pointer to kHolder (= implicit_args) in a scratch register.
+  // Keep a pointer to kHolder (= implicit_args) in a {holder} register.
   // We use it below to set up the FunctionCallbackInfo object.
-  __ mov(scratch, sp);
+  __ mov(holder, sp);
 
   // Allocate the v8::Arguments structure in the arguments' space since
   // it's not controlled by GC.
@@ -3257,14 +3281,14 @@ void Builtins::Generate_CallApiCallback(MacroAssembler* masm) {
     ASM_CODE_COMMENT_STRING(masm, "Initialize FunctionCallbackInfo");
     // FunctionCallbackInfo::implicit_args_ (points at kHolder as set up above).
     // Arguments are after the return address (pushed by EnterExitFrame()).
-    __ St_d(scratch, ExitFrameStackSlotOperand(FCI::kImplicitArgsOffset));
+    __ St_d(holder, ExitFrameStackSlotOperand(FCI::kImplicitArgsOffset));
 
     // FunctionCallbackInfo::values_ (points at the first varargs argument
     // passed on the stack).
-    __ Add_d(scratch, scratch,
+    __ Add_d(holder, holder,
              Operand(FCA::kArgsLengthWithReceiver * kSystemPointerSize));
 
-    __ St_d(scratch, ExitFrameStackSlotOperand(FCI::kValuesOffset));
+    __ St_d(holder, ExitFrameStackSlotOperand(FCI::kValuesOffset));
 
     // FunctionCallbackInfo::length_.
     // Stored as int field, 32-bit integers within struct on stack always left
@@ -3281,9 +3305,14 @@ void Builtins::Generate_CallApiCallback(MacroAssembler* masm) {
   __ Add_d(scratch, argc, Operand(FCA::kArgsLengthWithReceiver));
   __ St_d(scratch, stack_space_operand);
 
-  __ RecordComment("v8::InvocationCallback's argument.");
-  DCHECK(!AreAliased(api_function_address, scratch, a0));
-  __ Add_d(a0, sp, Operand(1 * kSystemPointerSize));
+  __ RecordComment("v8::FunctionCallback's argument.");
+  // function_callback_info_arg = v8::FunctionCallbackInfo&
+  __ Add_d(function_callback_info_arg, sp, Operand(1 * kSystemPointerSize));
+
+  // It's okay if api_function_address == thunk_callback_arg, but not
+  // function_callback_info_arg.
+  DCHECK(
+      !AreAliased(api_function_address, scratch, function_callback_info_arg));
 
   ExternalReference thunk_ref = ExternalReference::invoke_function_callback();
 
@@ -3294,11 +3323,18 @@ void Builtins::Generate_CallApiCallback(MacroAssembler* masm) {
 
   AllowExternalCallThatCantCauseGC scope(masm);
   CallApiFunctionAndReturn(masm, api_function_address, thunk_ref,
-                           kUseStackSpaceOperand, &stack_space_operand,
-                           return_value_operand);
+                           thunk_callback_arg, kUseStackSpaceOperand,
+                           &stack_space_operand, return_value_operand);
 }
 
 void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
+  // ----------- S t a t e -------------
+  //  -- cp                  : context
+  //  -- a1                  : receiver
+  //  -- a3                  : accessor info
+  //  -- a0                  : holder
+  // -----------------------------------
+  //
   // Build v8::PropertyCallbackInfo::args_ array on the stack and push property
   // name below the exit frame to make GC aware of them.
   using PCA = PropertyCallbackArguments;
@@ -3311,25 +3347,28 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
   static_assert(PCA::kThisIndex == 6);
   static_assert(PCA::kArgsLength == 7);
 
-  // Set up FunctionCallbackInfo's implicit_args on the stack as follows:
+  // Set up PropertyCallbackInfo's args_ on the stack as follows:
   // Target state:
-  //   sp[1 * kSystemPointerSize]: name
-  //   sp[2 * kSystemPointerSize]: kShouldThrowOnErrorIndex   <= PCI:args_
-  //   sp[3 * kSystemPointerSize]: kHolderIndex
-  //   sp[4 * kSystemPointerSize]: kIsolateIndex
-  //   sp[5 * kSystemPointerSize]: kUnusedIndex
-  //   sp[6 * kSystemPointerSize]: kReturnValueIndex
-  //   sp[7 * kSystemPointerSize]: kDataIndex
-  //   sp[8 * kSystemPointerSize]: kThisIndex / receiver
-
+  //   sp[0 * kSystemPointerSize]: name
+  //   sp[1 * kSystemPointerSize]: kShouldThrowOnErrorIndex   <= PCI:args_
+  //   sp[2 * kSystemPointerSize]: kHolderIndex
+  //   sp[3 * kSystemPointerSize]: kIsolateIndex
+  //   sp[4 * kSystemPointerSize]: kUnusedIndex
+  //   sp[5 * kSystemPointerSize]: kReturnValueIndex
+  //   sp[6 * kSystemPointerSize]: kDataIndex
+  //   sp[7 * kSystemPointerSize]: kThisIndex / receiver
+
+  Register name_arg = arg_reg_1;
+  Register property_callback_info_arg = arg_reg_2;
+  Register thunk_getter_arg = arg_reg_3;
+
+  Register api_function_address = thunk_getter_arg;
   Register receiver = ApiGetterDescriptor::ReceiverRegister();
   Register holder = ApiGetterDescriptor::HolderRegister();
   Register callback = ApiGetterDescriptor::CallbackRegister();
   Register scratch = a4;
   DCHECK(!AreAliased(receiver, holder, callback, scratch));
 
-  Register api_function_address = a2;
-
   // Here and below +1 is for name() pushed after the args_ array.
   using PCA = PropertyCallbackArguments;
   __ Sub_d(sp, sp, (PCA::kArgsLength + 1) * kSystemPointerSize);
@@ -3364,12 +3403,11 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
 
   __ RecordComment(
       "Load address of v8::PropertyAccessorInfo::args_ array and name handle.");
-
-  __ Add_d(a0, sp,
-           Operand(kNameStackIndex * kSystemPointerSize));  // a0 = &name
-  __ Add_d(a1, sp,
-           Operand(kPCAStackIndex *
-                   kSystemPointerSize));  // a1 = v8::PCI::args_ == ShouldThrow
+  // name_arg = Handle<Name>(&name), name value was pushed to GC-ed stack space.
+  __ Add_d(name_arg, sp, Operand(kNameStackIndex * kSystemPointerSize));
+  // property_callback_info_arg = v8::PCI::args_ (= &ShouldThrow)
+  __ Add_d(property_callback_info_arg, sp,
+           Operand(kPCAStackIndex * kSystemPointerSize));
 
   const int kApiStackSpace = 1;
   FrameScope frame_scope(masm, StackFrame::MANUAL);
@@ -3377,15 +3415,20 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
 
   __ RecordComment("Create v8::PropertyCallbackInfo object on the stack.");
   // Initialize it's args_ field.
-  __ St_d(a1, MemOperand(sp, 1 * kSystemPointerSize));
-  __ Add_d(a1, sp, Operand(1 * kSystemPointerSize));
-  // a1 = v8::PropertyCallbackInfo&
+  __ St_d(property_callback_info_arg, MemOperand(sp, 1 * kSystemPointerSize));
+  // property_callback_info_arg = v8::PropertyCallbackInfo&
+  __ Add_d(property_callback_info_arg, sp, Operand(1 * kSystemPointerSize));
 
   __ RecordComment("Load api_function_address");
   __ Ld_d(
       api_function_address,
       FieldMemOperand(callback, AccessorInfo::kMaybeRedirectedGetterOffset));
 
+  // It's okay if api_function_address == thunk_getter_arg, but not
+  // property_callback_info_arg or name_arg.
+  DCHECK(
+      !AreAliased(api_function_address, property_callback_info_arg, name_arg));
+
   ExternalReference thunk_ref =
       ExternalReference::invoke_accessor_getter_callback();
   MemOperand return_value_operand =
@@ -3393,8 +3436,8 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
   MemOperand* const kUseStackSpaceConstant = nullptr;
 
   CallApiFunctionAndReturn(masm, api_function_address, thunk_ref,
-                           kStackUnwindSpace, kUseStackSpaceConstant,
-                           return_value_operand);
+                           thunk_getter_arg, kStackUnwindSpace,
+                           kUseStackSpaceConstant, return_value_operand);
 }
 
 void Builtins::Generate_DirectCEntry(MacroAssembler* masm) {
@@ -3733,9 +3776,6 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler* masm,
   // Save the accumulator register, since it's clobbered by the below call.
   __ Push(kInterpreterAccumulatorRegister);
   {
-    Register arg_reg_1 = a0;
-    Register arg_reg_2 = a1;
-    Register arg_reg_3 = a2;
     __ Move(arg_reg_1, code_obj);
     __ Move(arg_reg_2, kInterpreterBytecodeOffsetRegister);
     __ Move(arg_reg_3, kInterpreterBytecodeArrayRegister);
