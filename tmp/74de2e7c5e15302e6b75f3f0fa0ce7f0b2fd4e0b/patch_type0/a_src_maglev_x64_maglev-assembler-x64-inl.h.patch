diff --git a/src/maglev/x64/maglev-assembler-x64-inl.h b/src/maglev/x64/maglev-assembler-x64-inl.h
index f7f145070b8..d85e526d9e6 100644
--- a/src/maglev/x64/maglev-assembler-x64-inl.h
+++ b/src/maglev/x64/maglev-assembler-x64-inl.h
@@ -13,9 +13,10 @@
 #include "src/codegen/macro-assembler-inl.h"
 #include "src/common/globals.h"
 #include "src/compiler/compilation-dependencies.h"
-#include "src/maglev/maglev-assembler.h"
+#include "src/maglev/maglev-assembler-inl.h"
 #include "src/maglev/maglev-basic-block.h"
 #include "src/maglev/maglev-code-gen-state.h"
+#include "v8-internal.h"
 
 namespace v8 {
 namespace internal {
@@ -237,11 +238,17 @@ inline void MaglevAssembler::BindBlock(BasicBlock* block) {
 inline void MaglevAssembler::SmiTagInt32AndSetFlags(Register dst,
                                                     Register src) {
   Move(dst, src);
-  addl(dst, dst);
+  if (SmiValuesAre31Bits()) {
+    addl(dst, dst);
+  } else {
+    SmiTag(dst);
+  }
 }
 
 inline void MaglevAssembler::CheckInt32IsSmi(Register obj, Label* fail,
                                              Register scratch) {
+  DCHECK(!SmiValuesAre32Bits());
+
   if (scratch == Register::no_reg()) {
     scratch = kScratchRegister;
   }
@@ -287,7 +294,11 @@ inline void MaglevAssembler::BuildTypedArrayDataPointer(Register data_pointer,
   if (JSTypedArray::kMaxSizeInHeap == 0) return;
 
   Register base = kScratchRegister;
-  movl(base, FieldOperand(object, JSTypedArray::kBasePointerOffset));
+  if (COMPRESS_POINTERS_BOOL) {
+    movl(base, FieldOperand(object, JSTypedArray::kBasePointerOffset));
+  } else {
+    movq(base, FieldOperand(object, JSTypedArray::kBasePointerOffset));
+  }
   addq(data_pointer, base);
 }
 
@@ -336,8 +347,8 @@ void MaglevAssembler::LoadFixedArrayElement(Register result, Register array,
     CompareInt32(index, 0);
     Assert(kUnsignedGreaterThanEqual, AbortReason::kUnexpectedNegativeValue);
   }
-  DecompressTagged(result, FieldOperand(array, index, times_tagged_size,
-                                        FixedArray::kHeaderSize));
+  LoadTaggedFieldByIndex(result, array, index, kTaggedSize,
+                         FixedArray::kHeaderSize);
 }
 
 void MaglevAssembler::LoadFixedArrayElementWithoutDecompressing(
