diff --git a/src/maglev/arm/maglev-assembler-arm-inl.h b/src/maglev/arm/maglev-assembler-arm-inl.h
index f61cf091de0..8e9546b1abf 100644
--- a/src/maglev/arm/maglev-assembler-arm-inl.h
+++ b/src/maglev/arm/maglev-assembler-arm-inl.h
@@ -188,7 +188,24 @@ inline void MaglevAssembler::DoubleToInt64Repr(Register dst,
 
 inline void MaglevAssembler::SmiTagInt32(Register obj, Label* fail) {
   add(obj, obj, obj, SetCC);
-  b(vs, fail);
+  if (fail != nullptr) {
+    JumpIf(kOverflow, fail);
+  } else if (v8_flags.debug_code) {
+    Check(kNoOverflow, AbortReason::kInputDoesNotFitSmi);
+  }
+}
+
+inline void MaglevAssembler::SmiTagUint32(Register obj, Label* fail) {
+  // Perform an unsigned comparison against Smi::kMaxValue.
+  if (fail != nullptr) {
+    cmp(obj, Operand(Smi::kMaxValue));
+    JumpIf(kUnsignedGreaterThan, fail);
+  } else if (v8_flags.debug_code) {
+    cmp(obj, Operand(Smi::kMaxValue));
+    Check(kUnsignedLessThanEqual, AbortReason::kInputDoesNotFitSmi);
+  }
+  add(obj, obj, obj, SetCC);
+  Assert(kNoOverflow, AbortReason::kInputDoesNotFitSmi);
 }
 
 inline Condition MaglevAssembler::IsInt64Constant(Register reg,
@@ -569,6 +586,11 @@ inline void MaglevAssembler::JumpIfSmi(Register src, Label* on_smi,
   MacroAssembler::JumpIfSmi(src, on_smi);
 }
 
+inline void MaglevAssembler::JumpIfNotSmi(Register src, Label* on_smi,
+                                          Label::Distance distance) {
+  MacroAssembler::JumpIfNotSmi(src, on_smi);
+}
+
 void MaglevAssembler::JumpIfByte(Condition cc, Register value, int32_t byte,
                                  Label* target, Label::Distance) {
   cmp(value, Operand(byte));
