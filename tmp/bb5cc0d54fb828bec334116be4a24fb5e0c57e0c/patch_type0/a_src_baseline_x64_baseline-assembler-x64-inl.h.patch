diff --git a/src/baseline/x64/baseline-assembler-x64-inl.h b/src/baseline/x64/baseline-assembler-x64-inl.h
index 7f3e6df021c..594b794672f 100644
--- a/src/baseline/x64/baseline-assembler-x64-inl.h
+++ b/src/baseline/x64/baseline-assembler-x64-inl.h
@@ -195,14 +195,6 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs,
   __ SmiCompare(lhs, rhs);
   __ j(AsMasmCondition(cc), target, distance);
 }
-
-void BaselineAssembler::JumpIfImmediate(Condition cc, Register left, int right,
-                                        Label* target,
-                                        Label::Distance distance) {
-  __ cmpq(left, Immediate(right));
-  __ j(AsMasmCondition(cc), target, distance);
-}
-
 // cmp_tagged
 void BaselineAssembler::JumpIfTagged(Condition cc, Register value,
                                      MemOperand operand, Label* target,
@@ -346,12 +338,8 @@ void BaselineAssembler::LoadTaggedAnyField(Register output, Register source,
                                            int offset) {
   __ LoadAnyTaggedField(output, FieldOperand(source, offset));
 }
-void BaselineAssembler::LoadWord16FieldZeroExtend(Register output,
-                                                  Register source, int offset) {
-  __ movzxwq(output, FieldOperand(source, offset));
-}
-void BaselineAssembler::LoadWord8Field(Register output, Register source,
-                                       int offset) {
+void BaselineAssembler::LoadByteField(Register output, Register source,
+                                      int offset) {
   __ movb(output, FieldOperand(source, offset));
 }
 void BaselineAssembler::StoreTaggedSignedField(Register target, int offset,
@@ -414,11 +402,6 @@ void BaselineAssembler::AddSmi(Register lhs, Smi rhs) {
   }
 }
 
-void BaselineAssembler::Word32And(Register output, Register lhs, int rhs) {
-  Move(output, lhs);
-  __ andq(output, Immediate(rhs));
-}
-
 void BaselineAssembler::Switch(Register reg, int case_value_base,
                                Label** labels, int num_labels) {
   ASM_CODE_COMMENT(masm_);
