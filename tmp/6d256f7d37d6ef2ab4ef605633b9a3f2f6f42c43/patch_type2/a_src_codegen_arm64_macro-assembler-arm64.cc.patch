diff --git a/src/codegen/arm64/macro-assembler-arm64.cc b/src/codegen/arm64/macro-assembler-arm64.cc
index be0bfd956cf..36cbae23f3f 100644
--- a/src/codegen/arm64/macro-assembler-arm64.cc
+++ b/src/codegen/arm64/macro-assembler-arm64.cc
@@ -2002,7 +2002,10 @@ void MacroAssembler::CallRuntime(const Runtime::Function* f,
   Mov(x0, num_arguments);
   Mov(x1, ExternalReference::Create(f));
 
-  Handle<Code> code = CodeFactory::CEntry(isolate(), f->result_size);
+  bool switch_to_central =
+      Runtime::SwitchToTheCentralStackForTarget(f->function_id);
+  Handle<Code> code = CodeFactory::CEntry(
+      isolate(), f->result_size, ArgvMode::kStack, false, switch_to_central);
   Call(code, RelocInfo::CODE_TARGET);
 }
 
@@ -2465,7 +2468,8 @@ void MacroAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {
   Jump(x17);
 }
 
-void MacroAssembler::StoreReturnAddressAndCall(Register target) {
+void MacroAssembler::StoreReturnAddressAndCall(Register target,
+                                               Register sp_reg) {
   ASM_CODE_COMMENT(this);
   // This generates the final instruction sequence for calls to C functions
   // once an exit frame has been constructed.
@@ -2481,10 +2485,10 @@ void MacroAssembler::StoreReturnAddressAndCall(Register target) {
   Label return_location;
   Adr(x17, &return_location);
 #ifdef V8_ENABLE_CONTROL_FLOW_INTEGRITY
-  Add(x16, sp, kSystemPointerSize);
+  Add(x16, sp_reg, kSystemPointerSize);
   Pacib1716();
 #endif
-  Poke(x17, 0);
+  Str(x17, MemOperand(sp_reg));
 
   if (v8_flags.debug_code) {
     ASM_CODE_COMMENT_STRING(this, "Verify fp[kSPOffset]-8");
