diff --git a/src/wasm/baseline/x64/liftoff-assembler-x64.h b/src/wasm/baseline/x64/liftoff-assembler-x64-inl.h
similarity index 99%
rename from src/wasm/baseline/x64/liftoff-assembler-x64.h
rename to src/wasm/baseline/x64/liftoff-assembler-x64-inl.h
index 91bfd45fc98..a86449ca8ce 100644
--- a/src/wasm/baseline/x64/liftoff-assembler-x64.h
+++ b/src/wasm/baseline/x64/liftoff-assembler-x64-inl.h
@@ -2,8 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef V8_WASM_BASELINE_X64_LIFTOFF_ASSEMBLER_X64_H_
-#define V8_WASM_BASELINE_X64_LIFTOFF_ASSEMBLER_X64_H_
+#ifndef V8_WASM_BASELINE_X64_LIFTOFF_ASSEMBLER_X64_INL_H_
+#define V8_WASM_BASELINE_X64_LIFTOFF_ASSEMBLER_X64_INL_H_
 
 #include "src/base/v8-fallthrough.h"
 #include "src/codegen/assembler.h"
@@ -14,13 +14,12 @@
 #include "src/flags/flags.h"
 #include "src/heap/memory-chunk.h"
 #include "src/wasm/baseline/liftoff-assembler.h"
+#include "src/wasm/baseline/parallel-move.h"
 #include "src/wasm/object-access.h"
 #include "src/wasm/simd-shuffle.h"
 #include "src/wasm/wasm-objects.h"
 
-namespace v8 {
-namespace internal {
-namespace wasm {
+namespace v8::internal::wasm {
 
 #define RETURN_FALSE_IF_MISSING_CPU_FEATURE(name)    \
   if (!CpuFeatures::IsSupported(name)) return false; \
@@ -1852,7 +1851,7 @@ template <typename dst_type, typename src_type>
 inline void ConvertFloatToIntAndBack(LiftoffAssembler* assm, Register dst,
                                      DoubleRegister src,
                                      DoubleRegister converted_back) {
-  if (std::is_same<double, src_type>::value) {  // f64
+  if (std::is_same<double, src_type>::value) {     // f64
     if (std::is_same<int32_t, dst_type>::value) {  // f64 -> i32
       __ Cvttsd2si(dst, src);
       __ Cvtlsi2sd(converted_back, dst);
@@ -1866,7 +1865,7 @@ inline void ConvertFloatToIntAndBack(LiftoffAssembler* assm, Register dst,
     } else {
       UNREACHABLE();
     }
-  } else {                                  // f32
+  } else {                                         // f32
     if (std::is_same<int32_t, dst_type>::value) {  // f32 -> i32
       __ Cvttss2si(dst, src);
       __ Cvtlsi2ss(converted_back, dst);
@@ -4427,8 +4426,6 @@ void LiftoffStackSlots::Construct(int param_slots) {
 
 #undef RETURN_FALSE_IF_MISSING_CPU_FEATURE
 
-}  // namespace wasm
-}  // namespace internal
-}  // namespace v8
+}  // namespace v8::internal::wasm
 
-#endif  // V8_WASM_BASELINE_X64_LIFTOFF_ASSEMBLER_X64_H_
+#endif  // V8_WASM_BASELINE_X64_LIFTOFF_ASSEMBLER_X64_INL_H_
-- 
2.35.1

