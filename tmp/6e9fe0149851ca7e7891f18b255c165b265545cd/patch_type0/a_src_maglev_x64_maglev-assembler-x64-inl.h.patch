diff --git a/src/maglev/x64/maglev-assembler-x64-inl.h b/src/maglev/x64/maglev-assembler-x64-inl.h
index fd3d7d7b3e5..e3b86fe4308 100644
--- a/src/maglev/x64/maglev-assembler-x64-inl.h
+++ b/src/maglev/x64/maglev-assembler-x64-inl.h
@@ -560,6 +560,23 @@ inline void MaglevAssembler::LoadByte(Register dst, MemOperand src) {
   movzxbl(dst, src);
 }
 
+inline Condition MaglevAssembler::IsCallableAndNotUndetectable(
+    Register map, Register scratch) {
+  movl(scratch, FieldOperand(map, Map::kBitFieldOffset));
+  andl(scratch, Immediate(Map::Bits1::IsUndetectableBit::kMask |
+                          Map::Bits1::IsCallableBit::kMask));
+  cmpl(scratch, Immediate(Map::Bits1::IsCallableBit::kMask));
+  return kEqual;
+}
+
+inline Condition MaglevAssembler::IsNotCallableNorUndetactable(
+    Register map, Register scratch) {
+  testl(FieldOperand(map, Map::kBitFieldOffset),
+        Immediate(Map::Bits1::IsUndetectableBit::kMask |
+                  Map::Bits1::IsCallableBit::kMask));
+  return kEqual;
+}
+
 inline void MaglevAssembler::IsObjectType(Register heap_object,
                                           InstanceType type) {
   MacroAssembler::IsObjectType(heap_object, type, kScratchRegister);
@@ -603,6 +620,11 @@ inline void MaglevAssembler::CompareMapWithRoot(Register object,
   CompareRoot(scratch, index);
 }
 
+inline void MaglevAssembler::CompareInstanceType(Register map,
+                                                 InstanceType instance_type) {
+  CmpInstanceType(map, instance_type);
+}
+
 inline void MaglevAssembler::CompareInstanceTypeRange(
     Register map, Register instance_type_out, InstanceType lower_limit,
     InstanceType higher_limit) {
