diff --git a/src/maglev/arm64/maglev-ir-arm64.cc b/src/maglev/arm64/maglev-ir-arm64.cc
index 3b583cf48a6..125573ffe0a 100644
--- a/src/maglev/arm64/maglev-ir-arm64.cc
+++ b/src/maglev/arm64/maglev-ir-arm64.cc
@@ -1400,15 +1400,19 @@ void GeneratorStore::GenerateCode(MaglevAssembler* masm,
     // Use WriteBarrierDescriptor::SlotAddressRegister() as the scratch
     // register since it's a known temporary, and the write barrier slow path
     // generates better code when value == scratch.
-    Register value =
-        __ FromAnyToRegister(parameters_and_registers(i),
-                             WriteBarrierDescriptor::SlotAddressRegister());
+    Input value_input = parameters_and_registers(i);
+    Register value = __ FromAnyToRegister(
+        value_input, WriteBarrierDescriptor::SlotAddressRegister());
 
     ZoneLabelRef done(masm);
     Label* deferred_write_barrier = __ MakeDeferredCode(
-        [](MaglevAssembler* masm, ZoneLabelRef done, Register value,
-           Register array, GeneratorStore* node, int32_t offset) {
+        [](MaglevAssembler* masm, ZoneLabelRef done, ValueNode* value_node,
+           Register value, Register array, GeneratorStore* node,
+           int32_t offset) {
           ASM_CODE_COMMENT_STRING(masm, "Write barrier slow path");
+          if (!value_node->decompresses_tagged_result()) {
+            __ DecompressTagged(value, value);
+          }
           __ CheckPageFlag(
               value, MemoryChunk::kPointersToHereAreInterestingMask, eq, *done);
 
@@ -1426,7 +1430,8 @@ void GeneratorStore::GenerateCode(MaglevAssembler* masm,
 
           __ B(*done);
         },
-        done, value, array, this, FixedArray::OffsetOfElementAt(i));
+        done, value_input.node(), value, array, this,
+        FixedArray::OffsetOfElementAt(i));
 
     __ StoreTaggedField(
         value, FieldMemOperand(array, FixedArray::OffsetOfElementAt(i)));
@@ -1447,9 +1452,12 @@ void GeneratorStore::GenerateCode(MaglevAssembler* masm,
 
   ZoneLabelRef done(masm);
   Label* deferred_context_write_barrier = __ MakeDeferredCode(
-      [](MaglevAssembler* masm, ZoneLabelRef done, Register context,
-         Register generator, GeneratorStore* node) {
+      [](MaglevAssembler* masm, ZoneLabelRef done, ValueNode* context_node,
+         Register context, Register generator, GeneratorStore* node) {
         ASM_CODE_COMMENT_STRING(masm, "Write barrier slow path");
+        if (!context_node->decompresses_tagged_result()) {
+          __ DecompressTagged(context, context);
+        }
         // TODO(leszeks): The context is almost always going to be in
         // old-space, consider moving this check to the fast path, maybe even
         // as the first bailout.
@@ -1474,7 +1482,7 @@ void GeneratorStore::GenerateCode(MaglevAssembler* masm,
 
         __ B(*done);
       },
-      done, context, generator, this);
+      done, context_input().node(), context, generator, this);
   __ StoreTaggedField(
       context, FieldMemOperand(generator, JSGeneratorObject::kContextOffset));
   __ AssertNotSmi(context);
@@ -1795,8 +1803,13 @@ void LoadFixedArrayElement::GenerateCode(MaglevAssembler* masm,
   }
   Register result_reg = ToRegister(result());
   __ Add(result_reg, elements, Operand(index, LSL, kTaggedSizeLog2));
-  __ DecompressTagged(result_reg,
-                      FieldMemOperand(result_reg, FixedArray::kHeaderSize));
+  if (this->decompresses_tagged_result()) {
+    __ DecompressTagged(result_reg,
+                        FieldMemOperand(result_reg, FixedArray::kHeaderSize));
+  } else {
+    __ Ldr(result_reg.W(),
+           FieldMemOperand(result_reg, FixedArray::kHeaderSize));
+  }
 }
 
 void LoadFixedDoubleArrayElement::SetValueLocationConstraints() {
@@ -2152,6 +2165,9 @@ void StoreTaggedFieldWithWriteBarrier::GenerateCode(
       [](MaglevAssembler* masm, ZoneLabelRef done, Register value,
          Register object, StoreTaggedFieldWithWriteBarrier* node) {
         ASM_CODE_COMMENT_STRING(masm, "Write barrier slow path");
+        if (!node->value_input().node()->decompresses_tagged_result()) {
+          __ DecompressTagged(value, value);
+        }
         __ CheckPageFlag(value, MemoryChunk::kPointersToHereAreInterestingMask,
                          eq, *done);
 
