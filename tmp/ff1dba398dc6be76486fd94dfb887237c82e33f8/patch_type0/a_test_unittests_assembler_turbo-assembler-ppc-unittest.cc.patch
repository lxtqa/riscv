diff --git a/test/unittests/assembler/turbo-assembler-ppc-unittest.cc b/test/unittests/assembler/macro-assembler-ppc-unittest.cc
similarity index 58%
rename from test/unittests/assembler/turbo-assembler-ppc-unittest.cc
rename to test/unittests/assembler/macro-assembler-ppc-unittest.cc
index 93ae7abafc..aabb988b29 100644
--- a/test/unittests/assembler/turbo-assembler-ppc-unittest.cc
+++ b/test/unittests/assembler/macro-assembler-ppc-unittest.cc
@@ -12,17 +12,17 @@
 namespace v8 {
 namespace internal {
 
-#define __ tasm.
+#define __ masm.
 
 // Test the ppc assembler by compiling some simple functions into
 // a buffer and executing them.  These tests do not initialize the
 // V8 library, create a context, or use any V8 objects.
 
-class TurboAssemblerTest : public TestWithIsolate {};
+class MacroAssemblerTest : public TestWithIsolate {};
 
-TEST_F(TurboAssemblerTest, TestHardAbort) {
+TEST_F(MacroAssemblerTest, TestHardAbort) {
   auto buffer = AllocateAssemblerBuffer();
-  TurboAssembler tasm(isolate(), AssemblerOptions{}, CodeObjectRequired::kNo,
+  MacroAssembler masm(isolate(), AssemblerOptions{}, CodeObjectRequired::kNo,
                       buffer->CreateView());
   __ set_root_array_available(false);
   __ set_abort_hard(true);
@@ -30,7 +30,7 @@ TEST_F(TurboAssemblerTest, TestHardAbort) {
   __ Abort(AbortReason::kNoReason);
 
   CodeDesc desc;
-  tasm.GetCode(isolate(), &desc);
+  masm.GetCode(isolate(), &desc);
   buffer->MakeExecutable();
   // We need an isolate here to execute in the simulator.
   auto f = GeneratedCode<void>::FromBuffer(isolate(), buffer->start());
@@ -38,9 +38,9 @@ TEST_F(TurboAssemblerTest, TestHardAbort) {
   ASSERT_DEATH_IF_SUPPORTED({ f.Call(); }, "abort: no reason");
 }
 
-TEST_F(TurboAssemblerTest, TestCheck) {
+TEST_F(MacroAssemblerTest, TestCheck) {
   auto buffer = AllocateAssemblerBuffer();
-  TurboAssembler tasm(isolate(), AssemblerOptions{}, CodeObjectRequired::kNo,
+  MacroAssembler masm(isolate(), AssemblerOptions{}, CodeObjectRequired::kNo,
                       buffer->CreateView());
   __ set_root_array_available(false);
   __ set_abort_hard(true);
@@ -52,7 +52,7 @@ TEST_F(TurboAssemblerTest, TestCheck) {
   __ Ret();
 
   CodeDesc desc;
-  tasm.GetCode(isolate(), &desc);
+  masm.GetCode(isolate(), &desc);
   buffer->MakeExecutable();
   // We need an isolate here to execute in the simulator.
   auto f = GeneratedCode<void, int>::FromBuffer(isolate(), buffer->start());
@@ -62,23 +62,24 @@ TEST_F(TurboAssemblerTest, TestCheck) {
   ASSERT_DEATH_IF_SUPPORTED({ f.Call(17); }, "abort: no reason");
 }
 
-TEST_F(TurboAssemblerTest, ReverseBitsU64) {
+TEST_F(MacroAssemblerTest, ReverseBitsU64) {
   struct {
-    uint64_t expected; uint64_t input;
+    uint64_t expected;
+    uint64_t input;
   } values[] = {
-    {0x0000000000000000, 0x0000000000000000},
-    {0xffffffffffffffff, 0xffffffffffffffff},
-    {0x8000000000000000, 0x0000000000000001},
-    {0x0000000000000001, 0x8000000000000000},
-    {0x800066aa22cc4488, 0x1122334455660001},
-    {0x1122334455660001, 0x800066aa22cc4488},
-    {0xffffffff00000000, 0x00000000ffffffff},
-    {0x00000000ffffffff, 0xffffffff00000000},
-    {0xff01020304050607, 0xe060a020c04080ff},
-    {0xe060a020c04080ff, 0xff01020304050607},
+      {0x0000000000000000, 0x0000000000000000},
+      {0xffffffffffffffff, 0xffffffffffffffff},
+      {0x8000000000000000, 0x0000000000000001},
+      {0x0000000000000001, 0x8000000000000000},
+      {0x800066aa22cc4488, 0x1122334455660001},
+      {0x1122334455660001, 0x800066aa22cc4488},
+      {0xffffffff00000000, 0x00000000ffffffff},
+      {0x00000000ffffffff, 0xffffffff00000000},
+      {0xff01020304050607, 0xe060a020c04080ff},
+      {0xe060a020c04080ff, 0xff01020304050607},
   };
   auto buffer = AllocateAssemblerBuffer();
-  TurboAssembler tasm(isolate(), AssemblerOptions{}, CodeObjectRequired::kNo,
+  MacroAssembler masm(isolate(), AssemblerOptions{}, CodeObjectRequired::kNo,
                       buffer->CreateView());
   __ set_root_array_available(false);
   __ set_abort_hard(true);
@@ -87,28 +88,26 @@ TEST_F(TurboAssemblerTest, ReverseBitsU64) {
   __ Pop(r4, r5);
   __ Ret();
   CodeDesc desc;
-  tasm.GetCode(isolate(), &desc);
+  masm.GetCode(isolate(), &desc);
   buffer->MakeExecutable();
-  auto f = GeneratedCode<uint64_t, uint64_t>::FromBuffer(isolate(),
-                                                         buffer->start());
-  for (unsigned int i=0; i < (sizeof(values) / sizeof(values[0])); i++) {
+  auto f =
+      GeneratedCode<uint64_t, uint64_t>::FromBuffer(isolate(), buffer->start());
+  for (unsigned int i = 0; i < (sizeof(values) / sizeof(values[0])); i++) {
     CHECK_EQ(values[i].expected, f.Call(values[i].input));
   }
 }
 
-TEST_F(TurboAssemblerTest, ReverseBitsU32) {
+TEST_F(MacroAssemblerTest, ReverseBitsU32) {
   struct {
-    uint64_t expected; uint64_t input;
+    uint64_t expected;
+    uint64_t input;
   } values[] = {
-    {0x00000000, 0x00000000},
-    {0xffffffff, 0xffffffff},
-    {0x00000001, 0x80000000},
-    {0x80000000, 0x00000001},
-    {0x22334455, 0xaa22cc44},
-    {0xaa22cc44, 0x22334455},
+      {0x00000000, 0x00000000}, {0xffffffff, 0xffffffff},
+      {0x00000001, 0x80000000}, {0x80000000, 0x00000001},
+      {0x22334455, 0xaa22cc44}, {0xaa22cc44, 0x22334455},
   };
   auto buffer = AllocateAssemblerBuffer();
-  TurboAssembler tasm(isolate(), AssemblerOptions{}, CodeObjectRequired::kNo,
+  MacroAssembler masm(isolate(), AssemblerOptions{}, CodeObjectRequired::kNo,
                       buffer->CreateView());
   __ set_root_array_available(false);
   __ set_abort_hard(true);
@@ -117,11 +116,11 @@ TEST_F(TurboAssemblerTest, ReverseBitsU32) {
   __ Pop(r4, r5);
   __ Ret();
   CodeDesc desc;
-  tasm.GetCode(isolate(), &desc);
+  masm.GetCode(isolate(), &desc);
   buffer->MakeExecutable();
-  auto f = GeneratedCode<uint64_t, uint64_t>::FromBuffer(isolate(),
-                                                         buffer->start());
-  for (unsigned int i=0; i < (sizeof(values) / sizeof(values[0])); i++) {
+  auto f =
+      GeneratedCode<uint64_t, uint64_t>::FromBuffer(isolate(), buffer->start());
+  for (unsigned int i = 0; i < (sizeof(values) / sizeof(values[0])); i++) {
     CHECK_EQ(values[i].expected, f.Call(values[i].input));
   }
 }
