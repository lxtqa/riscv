diff --git a/src/maglev/arm64/maglev-assembler-arm64.cc b/src/maglev/arm64/maglev-assembler-arm64.cc
index c80dabf36e5..4ab0e325af2 100644
--- a/src/maglev/arm64/maglev-assembler-arm64.cc
+++ b/src/maglev/arm64/maglev-assembler-arm64.cc
@@ -140,84 +140,6 @@ void MaglevAssembler::StoreTaggedFieldWithWriteBarrier(
   bind(*done);
 }
 
-void MaglevAssembler::ToBoolean(Register value, CheckType check_type,
-                                ZoneLabelRef is_true, ZoneLabelRef is_false,
-                                bool fallthrough_when_true) {
-  ScratchRegisterScope temps(this);
-  Register map = temps.Acquire();
-
-  if (check_type == CheckType::kCheckHeapObject) {
-    // Check if {{value}} is Smi.
-    Condition is_smi = CheckSmi(value);
-    JumpToDeferredIf(
-        is_smi,
-        [](MaglevAssembler* masm, Register value, ZoneLabelRef is_true,
-           ZoneLabelRef is_false) {
-          // Check if {value} is not zero.
-          __ CmpTagged(value, Smi::FromInt(0));
-          __ JumpIf(eq, *is_false);
-          __ Jump(*is_true);
-        },
-        value, is_true, is_false);
-  } else if (v8_flags.debug_code) {
-    AssertNotSmi(value);
-  }
-
-  // Check if {{value}} is false.
-  CompareRoot(value, RootIndex::kFalseValue);
-  JumpIf(eq, *is_false);
-
-  // Check if {{value}} is empty string.
-  CompareRoot(value, RootIndex::kempty_string);
-  JumpIf(eq, *is_false);
-
-  // Check if {{value}} is undetectable.
-  LoadMap(map, value);
-  {
-    ScratchRegisterScope scope(this);
-    Register tmp = scope.Acquire().W();
-    Move(tmp, FieldMemOperand(map, Map::kBitFieldOffset));
-    Tst(tmp, Immediate(Map::Bits1::IsUndetectableBit::kMask));
-    JumpIf(ne, *is_false);
-  }
-
-  // Check if {{value}} is a HeapNumber.
-  CompareRoot(map, RootIndex::kHeapNumberMap);
-  JumpToDeferredIf(
-      eq,
-      [](MaglevAssembler* masm, Register value, ZoneLabelRef is_true,
-         ZoneLabelRef is_false) {
-        ScratchRegisterScope scope(masm);
-        DoubleRegister value_double = scope.AcquireDouble();
-        __ Ldr(value_double, FieldMemOperand(value, HeapNumber::kValueOffset));
-        __ Fcmp(value_double, 0.0);
-        __ JumpIf(eq, *is_false);
-        __ JumpIf(vs, *is_false);  // NaN check
-        __ Jump(*is_true);
-      },
-      value, is_true, is_false);
-
-  // Check if {{value}} is a BigInt.
-  CompareRoot(map, RootIndex::kBigIntMap);
-  JumpToDeferredIf(
-      eq,
-      [](MaglevAssembler* masm, Register value, ZoneLabelRef is_true,
-         ZoneLabelRef is_false) {
-        ScratchRegisterScope scope(masm);
-        Register tmp = scope.Acquire().W();
-        __ Ldr(tmp, FieldMemOperand(value, BigInt::kBitfieldOffset));
-        __ Tst(tmp, Immediate(BigInt::LengthBits::kMask));
-        __ JumpIf(eq, *is_false);
-        __ Jump(*is_true);
-      },
-      value, is_true, is_false);
-
-  // Otherwise true.
-  if (!fallthrough_when_true) {
-    Jump(*is_true);
-  }
-}
-
 void MaglevAssembler::TestTypeOf(
     Register object, interpreter::TestTypeOfFlags::LiteralFlag literal,
     Label* is_true, Label::Distance true_distance, bool fallthrough_when_true,
