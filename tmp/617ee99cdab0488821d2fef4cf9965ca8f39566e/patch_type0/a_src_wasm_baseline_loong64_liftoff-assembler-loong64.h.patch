diff --git a/src/wasm/baseline/loong64/liftoff-assembler-loong64.h b/src/wasm/baseline/loong64/liftoff-assembler-loong64.h
index 9d50ae5a9e9..bc8c674cacc 100644
--- a/src/wasm/baseline/loong64/liftoff-assembler-loong64.h
+++ b/src/wasm/baseline/loong64/liftoff-assembler-loong64.h
@@ -3094,19 +3094,45 @@ void LiftoffAssembler::DropStackSlotsAndRet(uint32_t num_stack_slots) {
   Ret();
 }
 
-void LiftoffAssembler::CallC(const ValueKindSig* sig,
-                             const LiftoffRegister* args,
+void LiftoffAssembler::CallC(const ValueKindSig* sig, const VarState* args,
                              const LiftoffRegister* rets,
                              ValueKind out_argument_kind, int stack_bytes,
                              ExternalReference ext_ref) {
   addi_d(sp, sp, -stack_bytes);
 
-  int arg_bytes = 0;
+  int arg_offset = 0;
+  const VarState* current_arg = args;
   for (ValueKind param_kind : sig->parameters()) {
-    liftoff::Store(this, sp, arg_bytes, *args++, param_kind);
-    arg_bytes += value_kind_size(param_kind);
+    if (current_arg->is_reg()) {
+      liftoff::Store(this, sp, arg_offset, current_arg->reg(), param_kind);
+    } else if (current_arg->is_const()) {
+      DCHECK_EQ(kI32, param_kind);
+      if (current_arg->i32_const() == 0) {
+        St_w(zero_reg, MemOperand(sp, arg_offset));
+      } else {
+        UseScratchRegisterScope temps(this);
+        Register src = temps.Acquire();
+        li(src, current_arg->i32_const());
+        St_w(src, MemOperand(sp, arg_offset));
+      }
+    } else if (value_kind_size(current_arg->kind()) == 4) {
+      // Stack to stack move.
+      UseScratchRegisterScope temps(this);
+      Register src = temps.Acquire();
+      Ld_w(src, liftoff::GetStackSlot(current_arg->offset()));
+      St_w(src, MemOperand(sp, arg_offset));
+    } else {
+      DCHECK_EQ(8, value_kind_size(current_arg->kind()));
+      // Stack to stack move.
+      UseScratchRegisterScope temps(this);
+      Register src = temps.Acquire();
+      Ld_d(src, liftoff::GetStackSlot(current_arg->offset()));
+      St_d(src, MemOperand(sp, arg_offset));
+    }
+    arg_offset += value_kind_size(param_kind);
+    ++current_arg;
   }
-  DCHECK_LE(arg_bytes, stack_bytes);
+  DCHECK_LE(arg_offset, stack_bytes);
 
   // Pass a pointer to the buffer with the arguments to the C function.
   // On LoongArch, the first argument is passed in {a0}.
