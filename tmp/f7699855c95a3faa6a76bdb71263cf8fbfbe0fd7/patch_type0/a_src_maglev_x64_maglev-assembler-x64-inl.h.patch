diff --git a/src/maglev/x64/maglev-assembler-x64-inl.h b/src/maglev/x64/maglev-assembler-x64-inl.h
index 33f301b9660..25dad673305 100644
--- a/src/maglev/x64/maglev-assembler-x64-inl.h
+++ b/src/maglev/x64/maglev-assembler-x64-inl.h
@@ -13,9 +13,10 @@
 #include "src/codegen/macro-assembler-inl.h"
 #include "src/common/globals.h"
 #include "src/compiler/compilation-dependencies.h"
-#include "src/maglev/maglev-assembler.h"
+#include "src/maglev/maglev-assembler-inl.h"
 #include "src/maglev/maglev-basic-block.h"
 #include "src/maglev/maglev-code-gen-state.h"
+#include "v8-internal.h"
 
 namespace v8 {
 namespace internal {
@@ -237,11 +238,17 @@ inline void MaglevAssembler::BindBlock(BasicBlock* block) {
 inline void MaglevAssembler::SmiTagInt32AndSetFlags(Register dst,
                                                     Register src) {
   Move(dst, src);
-  addl(dst, dst);
+  if (SmiValuesAre31Bits()) {
+    addl(dst, dst);
+  } else {
+    SmiTag(dst);
+  }
 }
 
 inline void MaglevAssembler::CheckInt32IsSmi(Register obj, Label* fail,
                                              Register scratch) {
+  DCHECK(!SmiValuesAre32Bits());
+
   if (scratch == Register::no_reg()) {
     scratch = kScratchRegister;
   }
@@ -287,7 +294,11 @@ inline void MaglevAssembler::BuildTypedArrayDataPointer(Register data_pointer,
   if (JSTypedArray::kMaxSizeInHeap == 0) return;
 
   Register base = kScratchRegister;
-  movl(base, FieldOperand(object, JSTypedArray::kBasePointerOffset));
+  if (COMPRESS_POINTERS_BOOL) {
+    movl(base, FieldOperand(object, JSTypedArray::kBasePointerOffset));
+  } else {
+    movq(base, FieldOperand(object, JSTypedArray::kBasePointerOffset));
+  }
   addq(data_pointer, base);
 }
 
@@ -336,8 +347,8 @@ void MaglevAssembler::LoadFixedArrayElement(Register result, Register array,
     CompareInt32(index, 0);
     Assert(kUnsignedGreaterThanEqual, AbortReason::kUnexpectedNegativeValue);
   }
-  DecompressTagged(result, FieldOperand(array, index, times_tagged_size,
-                                        FixedArray::kHeaderSize));
+  LoadTaggedFieldByIndex(result, array, index, kTaggedSize,
+                         FixedArray::kHeaderSize);
 }
 
 void MaglevAssembler::LoadFixedArrayElementWithoutDecompressing(
@@ -349,8 +360,9 @@ void MaglevAssembler::LoadFixedArrayElementWithoutDecompressing(
     CompareInt32(index, 0);
     Assert(kUnsignedGreaterThanEqual, AbortReason::kUnexpectedNegativeValue);
   }
-  mov_tagged(result, FieldOperand(array, index, times_tagged_size,
-                                  FixedArray::kHeaderSize));
+  MacroAssembler::LoadTaggedFieldWithoutDecompressing(
+      result,
+      FieldOperand(array, index, times_tagged_size, FixedArray::kHeaderSize));
 }
 
 void MaglevAssembler::LoadFixedDoubleArrayElement(DoubleRegister result,
@@ -416,7 +428,7 @@ inline void MaglevAssembler::StoreTaggedFieldNoWriteBarrier(Register object,
 
 inline void MaglevAssembler::StoreFixedArrayElementNoWriteBarrier(
     Register array, Register index, Register value) {
-  mov_tagged(
+  MacroAssembler::StoreTaggedField(
       FieldOperand(array, index, times_tagged_size, FixedArray::kHeaderSize),
       value);
 }
@@ -424,7 +436,7 @@ inline void MaglevAssembler::StoreFixedArrayElementNoWriteBarrier(
 inline void MaglevAssembler::StoreTaggedSignedField(Register object, int offset,
                                                     Register value) {
   AssertSmi(value);
-  mov_tagged(FieldOperand(object, offset), value);
+  MacroAssembler::StoreTaggedField(FieldOperand(object, offset), value);
 }
 
 inline void MaglevAssembler::StoreTaggedSignedField(Register object, int offset,
