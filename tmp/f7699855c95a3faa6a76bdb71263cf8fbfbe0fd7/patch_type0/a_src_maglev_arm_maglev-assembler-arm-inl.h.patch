diff --git a/src/maglev/arm/maglev-assembler-arm-inl.h b/src/maglev/arm/maglev-assembler-arm-inl.h
index ebdb8d8c8e1..82035a866c0 100644
--- a/src/maglev/arm/maglev-assembler-arm-inl.h
+++ b/src/maglev/arm/maglev-assembler-arm-inl.h
@@ -238,6 +238,8 @@ inline void MaglevAssembler::SmiTagInt32AndSetFlags(Register dst,
 
 inline void MaglevAssembler::CheckInt32IsSmi(Register obj, Label* fail,
                                              Register scratch) {
+  static_assert(!SmiValuesAre32Bits());
+
   ScratchRegisterScope temps(this);
   if (scratch == Register::no_reg()) {
     scratch = temps.Acquire();
@@ -311,11 +313,7 @@ inline void MaglevAssembler::LoadTaggedFieldByIndex(Register result,
                                                     Register object,
                                                     Register index, int scale,
                                                     int offset) {
-  if (scale == 1) {
-    add(result, object, index);
-  } else {
-    add(result, object, Operand(index, LSL, ShiftFromScale(scale / 2)));
-  }
+  add(result, object, Operand(index, LSL, ShiftFromScale(scale)));
   MacroAssembler::LoadTaggedField(result, FieldMemOperand(result, offset));
 }
 
@@ -339,8 +337,8 @@ void MaglevAssembler::LoadFixedArrayElement(Register result, Register array,
     CompareInt32(index, 0);
     Assert(kUnsignedGreaterThanEqual, AbortReason::kUnexpectedNegativeValue);
   }
-  add(result, array, Operand(index, LSL, kTaggedSizeLog2));
-  ldr(result, FieldMemOperand(result, FixedArray::kHeaderSize));
+  LoadTaggedFieldByIndex(result, array, index, kTaggedSize,
+                         FixedArray::kHeaderSize);
 }
 
 void MaglevAssembler::LoadFixedArrayElementWithoutDecompressing(
@@ -419,7 +417,8 @@ inline void MaglevAssembler::StoreFixedArrayElementNoWriteBarrier(
   ScratchRegisterScope temps(this);
   Register scratch = temps.Acquire();
   add(scratch, array, Operand(index, LSL, kTaggedSizeLog2));
-  str(value, FieldMemOperand(scratch, FixedArray::kHeaderSize));
+  MacroAssembler::StoreTaggedField(
+      value, FieldMemOperand(scratch, FixedArray::kHeaderSize));
 }
 
 inline void MaglevAssembler::StoreTaggedSignedField(Register object, int offset,
