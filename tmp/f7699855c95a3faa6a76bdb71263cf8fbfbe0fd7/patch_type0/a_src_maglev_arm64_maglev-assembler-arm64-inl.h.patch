diff --git a/src/maglev/arm64/maglev-assembler-arm64-inl.h b/src/maglev/arm64/maglev-assembler-arm64-inl.h
index 79042e02acb..e4d003596f4 100644
--- a/src/maglev/arm64/maglev-assembler-arm64-inl.h
+++ b/src/maglev/arm64/maglev-assembler-arm64-inl.h
@@ -7,10 +7,12 @@
 
 #include "src/codegen/interface-descriptors-inl.h"
 #include "src/codegen/macro-assembler-inl.h"
+#include "src/common/globals.h"
 #include "src/compiler/compilation-dependencies.h"
 #include "src/maglev/maglev-assembler.h"
 #include "src/maglev/maglev-basic-block.h"
 #include "src/maglev/maglev-code-gen-state.h"
+#include "src/maglev/maglev-ir.h"
 
 namespace v8 {
 namespace internal {
@@ -94,7 +96,11 @@ inline MapCompare::MapCompare(MaglevAssembler* masm, Register object,
                               size_t map_count)
     : masm_(masm), object_(object), map_count_(map_count) {
   map_ = masm_->scratch_register_scope()->Acquire();
-  masm_->LoadCompressedMap(map_, object_);
+  if (PointerCompressionIsEnabled()) {
+    masm_->LoadCompressedMap(map_, object_);
+  } else {
+    masm_->LoadMap(map_, object_);
+  }
   USE(map_count_);
 }
 
@@ -106,9 +112,11 @@ void MapCompare::Generate(Handle<Map> map) {
 }
 
 Register MapCompare::GetMap() {
-  // Decompression is idempotent (UXTW operand is used), so this would return a
-  // valid pointer even if called multiple times in a row.
-  masm_->DecompressTagged(map_, map_);
+  if (PointerCompressionIsEnabled()) {
+    // Decompression is idempotent (UXTW operand is used), so this would return
+    // a valid pointer even if called multiple times in a row.
+    masm_->DecompressTagged(map_, map_);
+  }
   return map_;
 }
 
@@ -365,11 +373,17 @@ inline void MaglevAssembler::BindBlock(BasicBlock* block) {
 
 inline void MaglevAssembler::SmiTagInt32AndSetFlags(Register dst,
                                                     Register src) {
-  Adds(dst.W(), src.W(), src.W());
+  if (SmiValuesAre31Bits()) {
+    Adds(dst.W(), src.W(), src.W());
+  } else {
+    SmiTag(dst, src);
+  }
 }
 
 inline void MaglevAssembler::CheckInt32IsSmi(Register obj, Label* fail,
                                              Register scratch) {
+  DCHECK(!SmiValuesAre32Bits());
+
   Adds(wzr, obj.W(), obj.W());
   JumpIf(kOverflow, fail);
 }
@@ -420,7 +434,11 @@ inline void MaglevAssembler::BuildTypedArrayDataPointer(Register data_pointer,
   if (JSTypedArray::kMaxSizeInHeap == 0) return;
   ScratchRegisterScope scope(this);
   Register base = scope.Acquire();
-  Ldr(base.W(), FieldMemOperand(object, JSTypedArray::kBasePointerOffset));
+  if (COMPRESS_POINTERS_BOOL) {
+    Ldr(base.W(), FieldMemOperand(object, JSTypedArray::kBasePointerOffset));
+  } else {
+    Ldr(base, FieldMemOperand(object, JSTypedArray::kBasePointerOffset));
+  }
   Add(data_pointer, data_pointer, base);
 }
 
@@ -440,11 +458,7 @@ inline void MaglevAssembler::LoadTaggedFieldByIndex(Register result,
                                                     Register object,
                                                     Register index, int scale,
                                                     int offset) {
-  if (scale == 1) {
-    Add(result, object, index);
-  } else {
-    Add(result, object, Operand(index, LSL, ShiftFromScale(scale / 2)));
-  }
+  Add(result, object, Operand(index, LSL, ShiftFromScale(scale)));
   MacroAssembler::LoadTaggedField(result, FieldMemOperand(result, offset));
 }
 
@@ -475,8 +489,8 @@ void MaglevAssembler::LoadFixedArrayElement(Register result, Register array,
     CompareInt32(index, 0);
     Assert(kUnsignedGreaterThanEqual, AbortReason::kUnexpectedNegativeValue);
   }
-  Add(result, array, Operand(index, LSL, kTaggedSizeLog2));
-  DecompressTagged(result, FieldMemOperand(result, FixedArray::kHeaderSize));
+  LoadTaggedFieldByIndex(result, array, index, kTaggedSize,
+                         FixedArray::kHeaderSize);
 }
 
 void MaglevAssembler::LoadFixedArrayElementWithoutDecompressing(
@@ -489,7 +503,8 @@ void MaglevAssembler::LoadFixedArrayElementWithoutDecompressing(
     Assert(kUnsignedGreaterThanEqual, AbortReason::kUnexpectedNegativeValue);
   }
   Add(result, array, Operand(index, LSL, kTaggedSizeLog2));
-  Ldr(result.W(), FieldMemOperand(result, FixedArray::kHeaderSize));
+  MacroAssembler::LoadTaggedFieldWithoutDecompressing(
+      result, FieldMemOperand(result, FixedArray::kHeaderSize));
 }
 
 void MaglevAssembler::LoadFixedDoubleArrayElement(DoubleRegister result,
@@ -562,7 +577,8 @@ inline void MaglevAssembler::StoreFixedArrayElementNoWriteBarrier(
   ScratchRegisterScope temps(this);
   Register scratch = temps.Acquire();
   Add(scratch, array, Operand(index, LSL, kTaggedSizeLog2));
-  Str(value.W(), FieldMemOperand(scratch, FixedArray::kHeaderSize));
+  MacroAssembler::StoreTaggedField(
+      value, FieldMemOperand(scratch, FixedArray::kHeaderSize));
 }
 
 inline void MaglevAssembler::StoreTaggedSignedField(Register object, int offset,
@@ -831,7 +847,7 @@ inline void MaglevAssembler::CompareMapWithRoot(Register object,
                                                 RootIndex index,
                                                 Register scratch) {
   if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {
-    Ldr(scratch.W(), FieldMemOperand(object, HeapObject::kMapOffset));
+    LoadCompressedMap(scratch, object);
     CmpTagged(scratch, Immediate(ReadOnlyRootPtr(index)));
     return;
   }
@@ -859,7 +875,9 @@ inline void MaglevAssembler::CompareTagged(Register reg, Smi smi) {
 
 inline void MaglevAssembler::CompareTagged(Register reg,
                                            Handle<HeapObject> obj) {
-  CmpTagged(reg, Operand(obj, RelocInfo::COMPRESSED_EMBEDDED_OBJECT));
+  CmpTagged(reg, Operand(obj, COMPRESS_POINTERS_BOOL
+                                  ? RelocInfo::COMPRESSED_EMBEDDED_OBJECT
+                                  : RelocInfo::FULL_EMBEDDED_OBJECT));
 }
 
 inline void MaglevAssembler::CompareTagged(Register src1, Register src2) {
