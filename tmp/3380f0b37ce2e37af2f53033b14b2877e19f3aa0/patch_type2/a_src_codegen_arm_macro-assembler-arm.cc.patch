diff --git a/src/codegen/arm/macro-assembler-arm.cc b/src/codegen/arm/macro-assembler-arm.cc
index 296c6972d8d..4d672706bff 100644
--- a/src/codegen/arm/macro-assembler-arm.cc
+++ b/src/codegen/arm/macro-assembler-arm.cc
@@ -243,8 +243,7 @@ void MacroAssembler::Call(Handle<Code> code, RelocInfo::Mode rmode,
   Call(code.address(), rmode, cond, mode);
 }
 
-void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin_index,
-                                               Register target) {
+void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {
   ASM_CODE_COMMENT(this);
   static_assert(kSystemPointerSize == 4);
   static_assert(kSmiShiftSize == 0);
@@ -252,16 +251,17 @@ void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin_index,
   static_assert(kSmiTag == 0);
 
   // The builtin_index register contains the builtin index as a Smi.
-  mov(target,
+  // Untagging is folded into the indexing operand below.
+  mov(builtin_index,
       Operand(builtin_index, LSL, kSystemPointerSizeLog2 - kSmiTagSize));
-  add(target, target, Operand(IsolateData::builtin_entry_table_offset()));
-  ldr(target, MemOperand(kRootRegister, target));
+  add(builtin_index, builtin_index,
+      Operand(IsolateData::builtin_entry_table_offset()));
+  ldr(builtin_index, MemOperand(kRootRegister, builtin_index));
 }
 
-void MacroAssembler::CallBuiltinByIndex(Register builtin_index,
-                                        Register target) {
-  LoadEntryFromBuiltinIndex(builtin_index, target);
-  Call(target);
+void MacroAssembler::CallBuiltinByIndex(Register builtin_index) {
+  LoadEntryFromBuiltinIndex(builtin_index);
+  Call(builtin_index);
 }
 
 void MacroAssembler::LoadEntryFromBuiltin(Builtin builtin,
