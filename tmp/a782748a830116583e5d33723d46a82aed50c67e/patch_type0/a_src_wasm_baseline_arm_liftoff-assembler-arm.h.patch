diff --git a/src/wasm/baseline/arm/liftoff-assembler-arm.h b/src/wasm/baseline/arm/liftoff-assembler-arm.h
index fcfbbeca610..383c0ee2ee5 100644
--- a/src/wasm/baseline/arm/liftoff-assembler-arm.h
+++ b/src/wasm/baseline/arm/liftoff-assembler-arm.h
@@ -4363,8 +4363,7 @@ void LiftoffAssembler::DropStackSlotsAndRet(uint32_t num_stack_slots) {
   Ret();
 }
 
-void LiftoffAssembler::CallC(const ValueKindSig* sig,
-                             const LiftoffRegister* args,
+void LiftoffAssembler::CallC(const ValueKindSig* sig, const VarState* args,
                              const LiftoffRegister* rets,
                              ValueKind out_argument_kind, int stack_bytes,
                              ExternalReference ext_ref) {
@@ -4374,15 +4373,35 @@ void LiftoffAssembler::CallC(const ValueKindSig* sig,
   // Reserve space in the stack.
   AllocateStackSpace(stack_bytes);
 
-  int arg_bytes = 0;
-  const LiftoffRegister* current_arg = args;
+  int arg_offset = 0;
+  const VarState* current_arg = args;
   for (ValueKind param_kind : sig->parameters()) {
-    MemOperand dst{sp, arg_bytes};
-    liftoff::Store(this, *current_arg, dst, param_kind);
+    MemOperand dst{sp, arg_offset};
+    if (current_arg->is_reg()) {
+      liftoff::Store(this, current_arg->reg(), dst, param_kind);
+    } else if (current_arg->is_const()) {
+      DCHECK_EQ(kI32, param_kind);
+      UseScratchRegisterScope temps(this);
+      Register src = temps.Acquire();
+      mov(src, Operand(current_arg->i32_const()));
+      str(src, dst);
+    } else {
+      // Stack to stack move.
+      UseScratchRegisterScope temps(this);
+      Register scratch = temps.Acquire();
+      MemOperand src = liftoff::GetStackSlot(current_arg->offset());
+      int words = SlotSizeForType(param_kind) / kSystemPointerSize;
+      do {
+        ldr(scratch, src);
+        str(scratch, dst);
+        src.set_offset(src.offset() + kSystemPointerSize);
+        dst.set_offset(dst.offset() + kSystemPointerSize);
+      } while (--words > 0);
+    }
     ++current_arg;
-    arg_bytes += value_kind_size(param_kind);
+    arg_offset += value_kind_size(param_kind);
   }
-  DCHECK_LE(arg_bytes, stack_bytes);
+  DCHECK_LE(arg_offset, stack_bytes);
 
   // Pass a pointer to the buffer with the arguments to the C function.
   mov(r0, sp);
