diff --git a/src/codegen/arm/interface-descriptors-arm-inl.h b/src/codegen/arm/interface-descriptors-arm-inl.h
index 03512d90c10..70e8e9f361f 100644
--- a/src/codegen/arm/interface-descriptors-arm-inl.h
+++ b/src/codegen/arm/interface-descriptors-arm-inl.h
@@ -24,21 +24,21 @@ template <typename DerivedDescriptor>
 void StaticCallInterfaceDescriptor<DerivedDescriptor>::
     VerifyArgumentRegisterCount(CallInterfaceDescriptorData* data, int argc) {
   RegList allocatable_regs = data->allocatable_registers();
-  if (argc >= 1) DCHECK(allocatable_regs | r0.bit());
-  if (argc >= 2) DCHECK(allocatable_regs | r1.bit());
-  if (argc >= 3) DCHECK(allocatable_regs | r2.bit());
-  if (argc >= 4) DCHECK(allocatable_regs | r3.bit());
-  if (argc >= 5) DCHECK(allocatable_regs | r4.bit());
-  if (argc >= 6) DCHECK(allocatable_regs | r5.bit());
-  if (argc >= 7) DCHECK(allocatable_regs | r6.bit());
-  if (argc >= 8) DCHECK(allocatable_regs | r7.bit());
+  if (argc >= 1) DCHECK(allocatable_regs.has(r0));
+  if (argc >= 2) DCHECK(allocatable_regs.has(r1));
+  if (argc >= 3) DCHECK(allocatable_regs.has(r2));
+  if (argc >= 4) DCHECK(allocatable_regs.has(r3));
+  if (argc >= 5) DCHECK(allocatable_regs.has(r4));
+  if (argc >= 6) DCHECK(allocatable_regs.has(r5));
+  if (argc >= 7) DCHECK(allocatable_regs.has(r6));
+  if (argc >= 8) DCHECK(allocatable_regs.has(r7));
   // Additional arguments are passed on the stack.
 }
 #endif  // DEBUG
 
 // static
 constexpr auto WriteBarrierDescriptor::registers() {
-  return RegisterArray(r1, r5, r4, r2, r0);
+  return RegisterArray(r1, r5, r4, r2, r0, r3, kContextRegister);
 }
 
 // static
