diff --git a/src/maglev/arm/maglev-assembler-arm.cc b/src/maglev/arm/maglev-assembler-arm.cc
index 861841f4aaa..b2e95913e1c 100644
--- a/src/maglev/arm/maglev-assembler-arm.cc
+++ b/src/maglev/arm/maglev-assembler-arm.cc
@@ -509,6 +509,42 @@ void MaglevAssembler::TryTruncateDoubleToInt32(Register dst, DoubleRegister src,
   bind(&done);
 }
 
+void MaglevAssembler::TryTruncateDoubleToUint32(Register dst,
+                                                DoubleRegister src,
+                                                Label* fail) {
+  UseScratchRegisterScope temps(this);
+  LowDwVfpRegister low_double = temps.AcquireLowD();
+  SwVfpRegister temp_vfps = low_double.low();
+  DoubleRegister converted_back = low_double;
+  Label done;
+
+  // Convert the input float64 value to uint32.
+  vcvt_u32_f64(temp_vfps, src);
+  vmov(dst, temp_vfps);
+
+  // Convert that uint32 value back to float64.
+  vcvt_f64_u32(converted_back, temp_vfps);
+
+  // Check that the result of the float64->uint32->float64 is equal to the input
+  // (i.e. that the conversion didn't truncate.
+  VFPCompareAndSetFlags(src, converted_back);
+  JumpIf(kNotEqual, fail);
+
+  // Check if {input} is -0.
+  tst(dst, dst);
+  JumpIf(kNotEqual, &done);
+
+  // In case of 0, we need to check the high bits for the IEEE -0 pattern.
+  {
+    Register high_word32_of_input = temps.Acquire();
+    VmovHigh(high_word32_of_input, src);
+    cmp(high_word32_of_input, Operand(0));
+    JumpIf(kLessThan, fail);
+  }
+
+  bind(&done);
+}
+
 void MaglevAssembler::TryChangeFloat64ToIndex(Register result,
                                               DoubleRegister value,
                                               Label* success, Label* fail) {
