diff --git a/src/compiler/backend/riscv/instruction-selector-riscv64.cc b/src/compiler/backend/riscv/instruction-selector-riscv64.cc
index 4f5cfa3ea99..a8309ec5d8f 100644
--- a/src/compiler/backend/riscv/instruction-selector-riscv64.cc
+++ b/src/compiler/backend/riscv/instruction-selector-riscv64.cc
@@ -50,7 +50,8 @@ bool RiscvOperandGenerator::CanBeImmediate(int64_t value,
     case kRiscvAdd64:
     case kRiscvOr32:
     case kRiscvOr:
-    case kRiscvTst:
+    case kRiscvTst64:
+    case kRiscvTst32:
     case kRiscvXor:
       return is_int12(value);
     case kRiscvLb:
@@ -1654,8 +1655,8 @@ void VisitAtomicStore(InstructionSelector* selector, Node* node,
     if (g.CanBeImmediate(index, code)) {
       selector->Emit(code | AddressingModeField::encode(kMode_MRI) |
                          AtomicWidthField::encode(width),
-                     g.NoOutput(), g.UseRegister(base), g.UseImmediate(index),
-                     g.UseRegisterOrImmediateZero(value));
+                     g.NoOutput(), g.UseRegisterOrImmediateZero(value),
+                     g.UseRegister(base), g.UseImmediate(index));
     } else {
       InstructionOperand addr_reg = g.TempRegister();
       selector->Emit(kRiscvAdd64 | AddressingModeField::encode(kMode_None),
@@ -1663,8 +1664,8 @@ void VisitAtomicStore(InstructionSelector* selector, Node* node,
       // Emit desired store opcode, using temp addr_reg.
       selector->Emit(code | AddressingModeField::encode(kMode_MRI) |
                          AtomicWidthField::encode(width),
-                     g.NoOutput(), addr_reg, g.TempImmediate(0),
-                     g.UseRegisterOrImmediateZero(value));
+                     g.NoOutput(), g.UseRegisterOrImmediateZero(value),
+                     addr_reg, g.TempImmediate(0));
     }
   }
 }
@@ -1844,8 +1845,11 @@ void InstructionSelector::VisitWordCompareZero(Node* user, Node* value,
         }
         break;
       case IrOpcode::kWord32And:
+#if V8_COMPRESS_POINTERS
+        return VisitWordCompare(this, value, kRiscvTst32, cont, true);
+#endif
       case IrOpcode::kWord64And:
-        return VisitWordCompare(this, value, kRiscvTst, cont, true);
+        return VisitWordCompare(this, value, kRiscvTst64, cont, true);
       case IrOpcode::kStackPointerGreaterThan:
         cont->OverwriteAndNegateIfEqual(kStackPointerGreaterThanCondition);
         return VisitStackPointerGreaterThan(value, cont);
