diff --git a/src/maglev/arm64/maglev-ir-arm64.cc b/src/maglev/arm64/maglev-ir-arm64.cc
index 8f0b305c564..d052ff6bb10 100644
--- a/src/maglev/arm64/maglev-ir-arm64.cc
+++ b/src/maglev/arm64/maglev-ir-arm64.cc
@@ -165,7 +165,6 @@ UNIMPLEMENTED_NODE(LoadDoubleDataViewElement)
 UNIMPLEMENTED_NODE(LoadSignedIntTypedArrayElement, elements_kind_)
 UNIMPLEMENTED_NODE(LoadUnsignedIntTypedArrayElement, elements_kind_)
 UNIMPLEMENTED_NODE(LoadDoubleTypedArrayElement, elements_kind_)
-UNIMPLEMENTED_NODE(HoleyFloat64Box)
 UNIMPLEMENTED_NODE(SetPendingMessage)
 
 int ToObject::MaxCallStackArgs() const {
@@ -238,7 +237,6 @@ void ToString::GenerateCode(MaglevAssembler* masm,
 
 UNIMPLEMENTED_NODE(AssertInt32, condition_, reason_)
 UNIMPLEMENTED_NODE(CheckUint32IsSmi)
-UNIMPLEMENTED_NODE(CheckJSArrayBounds)
 UNIMPLEMENTED_NODE(CheckJSDataViewBounds, element_type_)
 UNIMPLEMENTED_NODE(CheckJSObjectElementsBounds)
 UNIMPLEMENTED_NODE(CheckJSTypedArrayBounds, elements_kind_)
@@ -352,6 +350,29 @@ void CheckedUint32ToInt32::GenerateCode(MaglevAssembler* masm,
   __ Tbnz(input_reg, 31, fail);
 }
 
+void CheckJSArrayBounds::SetValueLocationConstraints() {
+  UseRegister(receiver_input());
+  UseRegister(index_input());
+}
+void CheckJSArrayBounds::GenerateCode(MaglevAssembler* masm,
+                                      const ProcessingState& state) {
+  Register object = ToRegister(receiver_input());
+  Register index = ToRegister(index_input());
+  __ AssertNotSmi(object);
+
+  UseScratchRegisterScope temps(masm);
+  Register scratch = temps.AcquireX();
+
+  if (v8_flags.debug_code) {
+    __ CompareObjectType(object, scratch, scratch, JS_ARRAY_TYPE);
+    __ Assert(eq, AbortReason::kUnexpectedValue);
+  }
+
+  __ SmiUntagField(scratch, FieldMemOperand(object, JSArray::kLengthOffset));
+  __ Cmp(index, scratch);
+  __ EmitEagerDeoptIf(hs, DeoptimizeReason::kOutOfBounds, this);
+}
+
 void ChangeInt32ToFloat64::SetValueLocationConstraints() {
   UseRegister(input());
   DefineAsRegister(this);
@@ -678,7 +699,7 @@ void CheckSymbol::GenerateCode(MaglevAssembler* masm,
   }
   UseScratchRegisterScope temps(masm);
   Register scratch = temps.AcquireX();
-  __ CmpObjectType(object, SYMBOL_TYPE, scratch);
+  __ CompareObjectType(object, scratch, scratch, SYMBOL_TYPE);
   __ EmitEagerDeoptIf(ne, DeoptimizeReason::kNotASymbol, this);
 }
 
@@ -1448,17 +1469,6 @@ void UnsafeSmiTag::GenerateCode(MaglevAssembler* masm,
   }
 }
 
-void Float64Box::SetValueLocationConstraints() {
-  UseRegister(input());
-  DefineAsRegister(this);
-}
-void Float64Box::GenerateCode(MaglevAssembler* masm,
-                              const ProcessingState& state) {
-  DoubleRegister value = ToDoubleRegister(input());
-  Register object = ToRegister(result());
-  __ AllocateHeapNumber(register_snapshot(), object, value);
-}
-
 void CheckedFloat64Unbox::SetValueLocationConstraints() {
   UseRegister(input());
   DefineAsRegister(this);
