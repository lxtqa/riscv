diff --git a/src/builtins/s390/builtins-s390.cc b/src/builtins/s390/builtins-s390.cc
index 092527d480a..ec0074bdb19 100644
--- a/src/builtins/s390/builtins-s390.cc
+++ b/src/builtins/s390/builtins-s390.cc
@@ -218,9 +218,6 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler* masm,
   // Save the accumulator register, since it's clobbered by the below call.
   __ Push(kInterpreterAccumulatorRegister);
   {
-    Register arg_reg_1 = r2;
-    Register arg_reg_2 = r3;
-    Register arg_reg_3 = r4;
     __ mov(arg_reg_1, code_obj);
     __ mov(arg_reg_2, kInterpreterBytecodeOffsetRegister);
     __ mov(arg_reg_3, kInterpreterBytecodeArrayRegister);
@@ -3234,13 +3231,14 @@ void Builtins::Generate_DoubleToI(MacroAssembler* masm) {
 namespace {
 
 // Calls an API function.  Allocates HandleScope, extracts returned value
-// from handle and propagates exceptions.  Restores context.  stack_space
-// - space to be unwound on exit (includes the call JS arguments space and
-// the additional space allocated for the fast call).
+// from handle and propagates exceptions.  Restores context.  On return removes
+// *stack_space_operand * kSystemPointerSize or stack_space * kSystemPointerSize
+// (GCed, includes the call JS arguments space and the additional space
+// allocated for the fast call).
 static void CallApiFunctionAndReturn(MacroAssembler* masm,
                                      Register function_address,
                                      ExternalReference thunk_ref,
-                                     int stack_space,
+                                     Register thunk_last_arg, int stack_space,
                                      MemOperand* stack_space_operand,
                                      MemOperand return_value_operand) {
   using ER = ExternalReference;
@@ -3253,23 +3251,35 @@ static void CallApiFunctionAndReturn(MacroAssembler* masm,
   MemOperand level_mem_op = __ ExternalReferenceAsOperand(
       ER::handle_scope_level_address(isolate), no_reg);
 
-  // Additional parameter is the address of the actual callback.
-  DCHECK(function_address == r3 || function_address == r4);
-  Register scratch = r5;
+  Register return_value = r2;
+  Register scratch = arg_reg_4;
+  Register scratch2 = ip;
+
+  // Allocate HandleScope in callee-saved registers.
+  // We will need to restore the HandleScope after the call to the API function,
+  // by allocating it in callee-saved registers it'll be preserved by C code.
+  Register prev_next_address_reg = r6;
+  Register prev_limit_reg = r7;
+  Register prev_level_reg = r8;
+
+  // C arguments (arg_reg_1/2) are expected to be initialized outside, so this
+  // function must not corrupt them (return_value overlaps with arg_reg_1 but
+  // that's ok because we start using it only after the C call).
+  DCHECK(!AreAliased(arg_reg_1, arg_reg_2, arg_reg_3,  // C args
+                     scratch, scratch2, prev_next_address_reg, prev_limit_reg));
+  // Ensure the additional argument for thunk_ref is already in the right
+  // register.
+  DCHECK(thunk_last_arg == arg_reg_2 || thunk_last_arg == arg_reg_3);
+  DCHECK_EQ(function_address, thunk_last_arg);
 
-  // Allocate HandleScope in callee-save registers.
-  // r9 - next_address
-  // r6 - next_address->kNextOffset
-  // r7 - next_address->kLimitOffset
-  // r8 - next_address->kLevelOffset
   {
     ASM_CODE_COMMENT_STRING(masm,
                             "Allocate HandleScope in callee-save registers.");
-    __ LoadU64(r6, next_mem_op);
-    __ LoadU64(r7, limit_mem_op);
-    __ LoadU32(r8, level_mem_op);
-    __ AddS64(r8, Operand(1));
-    __ StoreU32(r8, level_mem_op);
+    __ LoadU64(prev_next_address_reg, next_mem_op);
+    __ LoadU64(prev_limit_reg, limit_mem_op);
+    __ LoadU32(prev_level_reg, level_mem_op);
+    __ AddS64(scratch, Operand(1));
+    __ StoreU32(scratch, level_mem_op);
   }
 
   Label profiler_or_side_effects_check_enabled, done_api_call;
@@ -3295,7 +3305,6 @@ static void CallApiFunctionAndReturn(MacroAssembler* masm,
   Label leave_exit_frame;
 
   __ RecordComment("Load the value from ReturnValue");
-  Register return_value = r2;
   __ LoadU64(r2, return_value_operand);
 
   {
@@ -3303,37 +3312,38 @@ static void CallApiFunctionAndReturn(MacroAssembler* masm,
         masm,
         "No more valid handles (the result handle was the last one)."
         "Restore previous handle scope.");
-    __ StoreU64(r6, next_mem_op);
+    __ StoreU64(prev_next_address_reg, next_mem_op);
     if (v8_flags.debug_code) {
-      __ LoadU32(r3, level_mem_op);
-      __ CmpS64(r3, r8);
+      __ LoadU32(scratch, level_mem_op);
+      __ SubS64(scratch, Operand(1));
+      __ CmpS64(scratch, prev_level_reg);
       __ Check(eq, AbortReason::kUnexpectedLevelAfterReturnFromApiCall);
     }
-    __ SubS64(r8, Operand(1));
-    __ StoreU32(r8, level_mem_op);
-    __ CmpS64(r7, limit_mem_op);
+    __ StoreU32(prev_level_reg, level_mem_op);
+    __ CmpS64(prev_limit_reg, limit_mem_op);
     __ bne(&delete_allocated_handles, Label::kNear);
   }
 
   __ RecordComment("Leave the API exit frame.");
   __ bind(&leave_exit_frame);
   // LeaveExitFrame expects unwind space to be in a register.
+  Register stack_space_reg = prev_limit_reg;
   if (stack_space_operand == nullptr) {
     DCHECK_NE(stack_space, 0);
-    __ mov(r6, Operand(stack_space));
+    __ mov(stack_space_reg, Operand(stack_space));
   } else {
     DCHECK_EQ(stack_space, 0);
-    __ LoadU64(r6, *stack_space_operand);
+    __ LoadU64(stack_space_reg, *stack_space_operand);
   }
-  __ LeaveExitFrame(r6, stack_space_operand != nullptr);
+  __ LeaveExitFrame(stack_space_reg, stack_space_operand != nullptr);
 
   // Check if the function scheduled an exception.
   {
     ASM_CODE_COMMENT_STRING(masm,
                             "Check if the function scheduled an exception.");
-    __ LoadU64(r7, __ ExternalReferenceAsOperand(
-                       ER::scheduled_exception_address(isolate), no_reg));
-    __ CompareRoot(r7, RootIndex::kTheHoleValue);
+    __ LoadU64(scratch2, __ ExternalReferenceAsOperand(
+                             ER::scheduled_exception_address(isolate), no_reg));
+    __ CompareRoot(scratch2, RootIndex::kTheHoleValue);
     __ bne(&promote_scheduled_exception, Label::kNear);
   }
 
@@ -3346,22 +3356,18 @@ static void CallApiFunctionAndReturn(MacroAssembler* masm,
     __ bind(&finish_return);
   }
 
-  {
-    Register map = r6;
-    Register tmp = r7;
-    __ AssertJSAny(return_value, map, tmp,
-                   AbortReason::kAPICallReturnedInvalidObject);
-  }
+  __ AssertJSAny(return_value, scratch, scratch2,
+                 AbortReason::kAPICallReturnedInvalidObject);
 
   __ b(r14);
 
   {
     ASM_CODE_COMMENT_STRING(masm, "Call the api function via thunk wrapper.");
     __ bind(&profiler_or_side_effects_check_enabled);
-    // Additional parameter is the address of the actual callback.
-    __ Move(r5, function_address);
-    __ Move(ip, thunk_ref);
-    __ StoreReturnAddressAndCall(ip);
+    // Additional parameter is the address of the actual callback function.
+    __ Move(thunk_last_arg, function_address);
+    __ Move(scratch, thunk_ref);
+    __ StoreReturnAddressAndCall(scratch);
     __ b(&done_api_call);
   }
 
@@ -3374,12 +3380,14 @@ static void CallApiFunctionAndReturn(MacroAssembler* masm,
     ASM_CODE_COMMENT_STRING(
         masm, "HandleScope limit has changed. Delete allocated extensions.");
     __ bind(&delete_allocated_handles);
-    __ StoreU64(r7, limit_mem_op);
-    __ mov(r6, r2);
-    __ PrepareCallCFunction(1, r7);
-    __ Move(r2, ER::isolate_address(isolate));
+    __ StoreU64(prev_limit_reg, limit_mem_op);
+    // Save the return value in a callee-save register.
+    Register saved_result = prev_limit_reg;
+    __ mov(saved_result, return_value);
+    __ PrepareCallCFunction(1, scratch);
+    __ Move(arg_reg_1, ER::isolate_address(isolate));
     __ CallCFunction(ER::delete_handle_scope_extensions(), 1);
-    __ mov(r2, r6);
+    __ mov(return_value, saved_result);
     __ b(&leave_exit_frame, Label::kNear);
   }
 }
@@ -3411,6 +3419,9 @@ void Builtins::Generate_CallApiCallback(MacroAssembler* masm) {
   //  -- sp[(argc) * 8]      : last argument
   // -----------------------------------
 
+  Register function_callback_info_arg = arg_reg_1;
+  Register thunk_callback_arg = arg_reg_2;
+
   Register api_function_address = r3;
   Register argc = r4;
   Register call_data = r5;
@@ -3515,22 +3526,34 @@ void Builtins::Generate_CallApiCallback(MacroAssembler* masm) {
   __ AddS64(scratch, r1);
   __ StoreU64(scratch, stack_space_operand);
 
-  __ RecordComment("v8::InvocationCallback's argument.");
-  __ lay(r2,
+  __ RecordComment("v8::FunctionCallback's argument.");
+  __ lay(function_callback_info_arg,
          MemOperand(sp, (kStackFrameExtraParamSlot + 1) * kSystemPointerSize));
 
+  // It's okay if api_function_address == thunk_callback_arg, but not
+  // function_callback_info_arg.
+  DCHECK(!AreAliased(api_function_address, function_callback_info_arg));
+
   ExternalReference thunk_ref = ExternalReference::invoke_function_callback();
+
   MemOperand return_value_operand =
       ExitFrameCallerStackSlotOperand(FCA::kReturnValueIndex);
   static constexpr int kUseStackSpaceOperand = 0;
 
   AllowExternalCallThatCantCauseGC scope(masm);
   CallApiFunctionAndReturn(masm, api_function_address, thunk_ref,
-                           kUseStackSpaceOperand, &stack_space_operand,
-                           return_value_operand);
+                           thunk_callback_arg, kUseStackSpaceOperand,
+                           &stack_space_operand, return_value_operand);
 }
 
 void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
+  // ----------- S t a t e -------------
+  //  -- cp                  : context
+  //  -- r3                  : receiver
+  //  -- r5                  : accessor info
+  //  -- r2                  : holder
+  // -----------------------------------
+
   int arg0Slot = 0;
   int accessorInfoSlot = 0;
   int apiStackSpace = 0;
@@ -3546,17 +3569,22 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
   static_assert(PCA::kThisIndex == 6);
   static_assert(PCA::kArgsLength == 7);
 
-  // Set up FunctionCallbackInfo's implicit_args on the stack as follows:
+  // Set up PropertyCallbackInfo's args_ on the stack as follows:
   // Target state:
-  //   sp[1 * kSystemPointerSize]: name
-  //   sp[2 * kSystemPointerSize]: kShouldThrowOnErrorIndex   <= PCI:args_
-  //   sp[3 * kSystemPointerSize]: kHolderIndex
-  //   sp[4 * kSystemPointerSize]: kIsolateIndex
-  //   sp[5 * kSystemPointerSize]: kUnusedIndex
-  //   sp[6 * kSystemPointerSize]: kReturnValueIndex
-  //   sp[7 * kSystemPointerSize]: kDataIndex
-  //   sp[8 * kSystemPointerSize]: kThisIndex / receiver
-
+  //   sp[0 * kSystemPointerSize]: name
+  //   sp[1 * kSystemPointerSize]: kShouldThrowOnErrorIndex   <= PCI:args_
+  //   sp[2 * kSystemPointerSize]: kHolderIndex
+  //   sp[3 * kSystemPointerSize]: kIsolateIndex
+  //   sp[4 * kSystemPointerSize]: kUnusedIndex
+  //   sp[5 * kSystemPointerSize]: kReturnValueIndex
+  //   sp[6 * kSystemPointerSize]: kDataIndex
+  //   sp[7 * kSystemPointerSize]: kThisIndex / receiver
+
+  Register name_arg = arg_reg_1;
+  Register property_callback_info_arg = arg_reg_2;
+  Register thunk_getter_arg = arg_reg_3;
+
+  Register api_function_address = thunk_getter_arg;
   Register receiver = ApiGetterDescriptor::ReceiverRegister();
   Register holder = ApiGetterDescriptor::HolderRegister();
   Register callback = ApiGetterDescriptor::CallbackRegister();
@@ -3564,8 +3592,6 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
   Register smi_zero = r7;
   DCHECK(!AreAliased(receiver, holder, callback, scratch, smi_zero));
 
-  Register api_function_address = r4;
-
   __ LoadTaggedField(scratch,
                      FieldMemOperand(callback, AccessorInfo::kDataOffset), r1);
   __ Push(receiver, scratch);
@@ -3579,9 +3605,11 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
   __ Push(smi_zero, scratch);
   __ RecordComment(
       "Load address of v8::PropertyAccessorInfo::args_ array and name handle.");
-
-  __ mov(r2, sp);                                      // r2 = Handle<Name>
-  __ AddS64(r3, r2, Operand(1 * kSystemPointerSize));  // r3 = v8::PCI::args_
+  // name_arg = Handle<Name>(&name), name value was pushed to GC-ed stack space.
+  __ mov(name_arg, sp);
+  // property_callback_info_arg = v8::PCI::args_ (= &ShouldThrow)
+  __ AddS64(property_callback_info_arg, name_arg,
+            Operand(1 * kSystemPointerSize));
 
   constexpr int kNameOnStackSize = 1;
   constexpr int kStackUnwindSpace = PCA::kArgsLength + kNameOnStackSize;
@@ -3618,24 +3646,31 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
 
   __ RecordComment("Create v8::PropertyCallbackInfo object on the stack.");
   // Create v8::PropertyCallbackInfo object on the stack and initialize
-  // it's args_ field.
-  __ StoreU64(r3, MemOperand(sp, accessorInfoSlot * kSystemPointerSize));
-  __ AddS64(r3, sp, Operand(accessorInfoSlot * kSystemPointerSize));
-  // r3 = v8::PropertyCallbackInfo&
+  // its args_ field.
+  __ StoreU64(property_callback_info_arg,
+              MemOperand(sp, accessorInfoSlot * kSystemPointerSize));
+  // property_callback_info_arg = v8::PropertyCallbackInfo&
+  __ AddS64(property_callback_info_arg, sp,
+            Operand(accessorInfoSlot * kSystemPointerSize));
 
   __ RecordComment("Load api_function_address");
-  ExternalReference thunk_ref =
-      ExternalReference::invoke_accessor_getter_callback();
   __ LoadU64(
       api_function_address,
       FieldMemOperand(callback, AccessorInfo::kMaybeRedirectedGetterOffset));
+
+  // It's okay if api_function_address == thunk_getter_arg, but not
+  // property_callback_info_arg or name_arg.
+  DCHECK(
+      !AreAliased(api_function_address, property_callback_info_arg, name_arg));
+  ExternalReference thunk_ref =
+      ExternalReference::invoke_accessor_getter_callback();
   MemOperand return_value_operand = ExitFrameCallerStackSlotOperand(
       PCA::kReturnValueIndex + kNameOnStackSize);
   MemOperand* const kUseStackSpaceConstant = nullptr;
 
   CallApiFunctionAndReturn(masm, api_function_address, thunk_ref,
-                           kStackUnwindSpace, kUseStackSpaceConstant,
-                           return_value_operand);
+                           thunk_getter_arg, kStackUnwindSpace,
+                           kUseStackSpaceConstant, return_value_operand);
 }
 
 void Builtins::Generate_DirectCEntry(MacroAssembler* masm) {
