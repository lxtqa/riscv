diff --git a/src/builtins/ia32/builtins-ia32.cc b/src/builtins/ia32/builtins-ia32.cc
index 58124f8e6a1..814b4ef713e 100644
--- a/src/builtins/ia32/builtins-ia32.cc
+++ b/src/builtins/ia32/builtins-ia32.cc
@@ -1797,11 +1797,7 @@ void Builtins::Generate_BaselineOutOfLinePrologue(MacroAssembler* masm) {
     Register bytecode_array = scratch;
     __ movd(bytecode_array, saved_bytecode_array);
     __ Push(bytecode_array);
-
-    // Baseline code frames store the feedback vector where interpreter would
-    // store the bytecode offset.
-    // TODO(victorgomes): The first push should actually be a free slot.
-    __ Push(saved_feedback_vector, scratch);
+    __ Push(Immediate(0));  // Unused slot.
     __ Push(saved_feedback_vector, scratch);
   }
 
@@ -4594,10 +4590,17 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler* masm,
   __ mov(kInterpreterBytecodeOffsetRegister,
          MemOperand(ebp, InterpreterFrameConstants::kBytecodeOffsetFromFp));
   __ SmiUntag(kInterpreterBytecodeOffsetRegister);
-  // Replace BytecodeOffset with the feedback vector.
-  __ mov(MemOperand(ebp, InterpreterFrameConstants::kBytecodeOffsetFromFp),
+  // Update feedback vector cache.
+  static_assert(InterpreterFrameConstants::kFeedbackVectorFromFp ==
+                BaselineFrameConstants::kFeedbackVectorFromFp);
+  __ mov(MemOperand(ebp, InterpreterFrameConstants::kFeedbackVectorFromFp),
          feedback_vector);
   feedback_vector = no_reg;
+  // Replace BytecodeOffset with zero.
+  static_assert(InterpreterFrameConstants::kBytecodeOffsetFromFp ==
+                BaselineFrameConstants::kUnusedSlotFromFp);
+  __ mov(MemOperand(ebp, InterpreterFrameConstants::kBytecodeOffsetFromFp),
+         Immediate(0));
 
   // Compute baseline pc for bytecode offset.
   ExternalReference get_baseline_pc_extref;
