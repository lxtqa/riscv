diff --git a/src/regexp/mips64/regexp-macro-assembler-mips64.cc b/src/regexp/mips64/regexp-macro-assembler-mips64.cc
index 5fde4fc7c3b..e4b8d5e42ba 100644
--- a/src/regexp/mips64/regexp-macro-assembler-mips64.cc
+++ b/src/regexp/mips64/regexp-macro-assembler-mips64.cc
@@ -79,19 +79,20 @@ namespace internal {
  *  - fp[64]  s9, old-fp         Old fp, callee saved(s9).
  *  - fp[0..63]  s0..s7          Callee-saved registers s0..s7.
  *  --- frame pointer ----
- *  - fp[-8]  direct_call        (1 = direct call from JS, 0 = from runtime)    kDirectCall
- *  - fp[-16] capture array size (may fit multiple sets of matches)             kNumOutputRegisters
- *  - fp[-24] int* capture_array (int[num_saved_registers_], for output).       kRegisterOutput
- *  - fp[-32] end of input       (address of end of string).                    kInputEnd
- *  - fp[-40] start of input     (address of first character in string).        kInputStart
- *  - fp[-48] start index        (character index of start).                    kStartIndex
- *  - fp[-56] void* input_string (location of a handle containing the string).  kInputString
- *  - fp[-64] success counter    (only for global regexps to count matches).    kSuccessfulCaptures
- *  - fp[-72] Offset of location before start of input (effectively character   kStringStartMinusOne
+ *  - fp[-8]  frame marker
+ *  - fp[-16] direct_call        (1 = direct call from JS, 0 = from runtime)    kDirectCallOffset
+ *  - fp[-24] capture array size (may fit multiple sets of matches)             kNumOutputRegistersOffset
+ *  - fp[-32] int* capture_array (int[num_saved_registers_], for output).       kRegisterOutputOffset
+ *  - fp[-40] end of input       (address of end of string).                    kInputEndOffset
+ *  - fp[-48] start of input     (address of first character in string).        kInputStartOffset
+ *  - fp[-56] start index        (character index of start).                    kStartIndexOffset
+ *  - fp[-64] void* input_string (location of a handle containing the string).  kInputStringOffset
+ *  - fp[-72] success counter    (only for global regexps to count matches).    kSuccessfulCapturesOffset
+ *  - fp[-80] Offset of location before start of input (effectively character   kStringStartMinusOneOffset
  *            position -1). Used to initialize capture registers to a
  *            non-position.
  *  --------- The following output registers are 32-bit values. ---------
- *  - fp[-80] register 0         (Only positions must be stored in the first    kRegisterZero
+ *  - fp[-88] register 0         (Only positions must be stored in the first    kRegisterZero
  *  -         register 1          num_saved_registers_ registers)
  *  -         ...
  *  -         register num_registers-1
@@ -120,15 +121,13 @@ namespace internal {
 
 #define __ ACCESS_MASM(masm_)
 
-const int RegExpMacroAssemblerMIPS::kRegExpCodeSize;
-
 RegExpMacroAssemblerMIPS::RegExpMacroAssemblerMIPS(Isolate* isolate, Zone* zone,
                                                    Mode mode,
                                                    int registers_to_save)
     : NativeRegExpMacroAssembler(isolate, zone),
       masm_(std::make_unique<MacroAssembler>(
           isolate, CodeObjectRequired::kYes,
-          NewAssemblerBuffer(kRegExpCodeSize))),
+          NewAssemblerBuffer(kInitialBufferSize))),
       no_root_array_scope_(masm_.get()),
       mode_(mode),
       num_registers_(registers_to_save),
@@ -191,9 +190,9 @@ void RegExpMacroAssemblerMIPS::Backtrack() {
   CheckPreemption();
   if (has_backtrack_limit()) {
     Label next;
-    __ Ld(a0, MemOperand(frame_pointer(), kBacktrackCount));
+    __ Ld(a0, MemOperand(frame_pointer(), kBacktrackCountOffset));
     __ Daddu(a0, a0, Operand(1));
-    __ Sd(a0, MemOperand(frame_pointer(), kBacktrackCount));
+    __ Sd(a0, MemOperand(frame_pointer(), kBacktrackCountOffset));
     __ Branch(&next, ne, a0, Operand(backtrack_limit()));
 
     // Backtrack limit exceeded.
@@ -228,7 +227,7 @@ void RegExpMacroAssemblerMIPS::CheckCharacterGT(base::uc16 limit,
 }
 
 void RegExpMacroAssemblerMIPS::CheckAtStart(int cp_offset, Label* on_at_start) {
-  __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOne));
+  __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));
   __ Daddu(a0, current_input_offset(),
            Operand(-char_size() + cp_offset * char_size()));
   BranchOrBacktrack(on_at_start, eq, a0, Operand(a1));
@@ -237,7 +236,7 @@ void RegExpMacroAssemblerMIPS::CheckAtStart(int cp_offset, Label* on_at_start) {
 
 void RegExpMacroAssemblerMIPS::CheckNotAtStart(int cp_offset,
                                                Label* on_not_at_start) {
-  __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOne));
+  __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));
   __ Daddu(a0, current_input_offset(),
            Operand(-char_size() + cp_offset * char_size()));
   BranchOrBacktrack(on_not_at_start, ne, a0, Operand(a1));
@@ -272,7 +271,7 @@ void RegExpMacroAssemblerMIPS::CheckNotBackReferenceIgnoreCase(
   __ Branch(&fallthrough, eq, a1, Operand(zero_reg));
 
   if (read_backward) {
-    __ Ld(t1, MemOperand(frame_pointer(), kStringStartMinusOne));
+    __ Ld(t1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));
     __ Daddu(t1, t1, a1);
     BranchOrBacktrack(on_no_match, le, current_input_offset(), Operand(t1));
   } else {
@@ -405,7 +404,7 @@ void RegExpMacroAssemblerMIPS::CheckNotBackReference(int start_reg,
   __ Branch(&fallthrough, eq, a1, Operand(zero_reg));
 
   if (read_backward) {
-    __ Ld(t1, MemOperand(frame_pointer(), kStringStartMinusOne));
+    __ Ld(t1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));
     __ Daddu(t1, t1, a1);
     BranchOrBacktrack(on_no_match, le, current_input_offset(), Operand(t1));
   } else {
@@ -674,7 +673,7 @@ void RegExpMacroAssemblerMIPS::PushRegExpBasePointer(Register stack_pointer,
   __ li(scratch, Operand(ref));
   __ Ld(scratch, MemOperand(scratch));
   __ Dsubu(scratch, stack_pointer, scratch);
-  __ Sd(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointer));
+  __ Sd(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));
 }
 
 void RegExpMacroAssemblerMIPS::PopRegExpBasePointer(Register stack_pointer_out,
@@ -682,7 +681,7 @@ void RegExpMacroAssemblerMIPS::PopRegExpBasePointer(Register stack_pointer_out,
   ExternalReference ref =
       ExternalReference::address_of_regexp_stack_memory_top_address(isolate());
   __ Ld(stack_pointer_out,
-        MemOperand(frame_pointer(), kRegExpStackBasePointer));
+        MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));
   __ li(scratch, Operand(ref));
   __ Ld(scratch, MemOperand(scratch));
   __ Daddu(stack_pointer_out, stack_pointer_out, scratch);
@@ -707,34 +706,48 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {
     // no is generated.
     FrameScope scope(masm_.get(), StackFrame::MANUAL);
 
-    // Actually emit code to start a new stack frame.
-    // Push arguments
-    // Save callee-save registers.
-    // Start new stack frame.
-    // Store link register in existing stack-cell.
-    // Order here should correspond to order of offset constants in header file.
+    // Emit code to start a new stack frame. In the following we push all
+    // callee-save registers (these end up above the fp) and all register
+    // arguments (in {a0,a1,a2,a3}, these end up below the fp).
     // TODO(plind): we save s0..s7, but ONLY use s3 here - use the regs
     // or dont save.
     RegList registers_to_retain = {s0, s1, s2, s3, s4, s5, s6, s7, fp};
-    RegList argument_registers = {a0, a1, a2, a3};
 
+    __ MultiPush(registers_to_retain | ra);
+    __ mov(frame_pointer(), sp);
+
+    // Registers {a0,a1,a2,a3} are the first four arguments as per the C calling
+    // convention, and must match our specified offsets (e.g. kInputEndOffset).
+    //
+    // a0: input_string
+    // a1: start_offset
+    // a2: input_start
+    // a3: input_end
+    RegList argument_registers = {a0, a1, a2, a3};
     argument_registers |= {a4, a5, a6, a7};
 
-    __ MultiPush(argument_registers | registers_to_retain | ra);
-    // Set frame pointer in space for it if this is not a direct call
-    // from generated code.
-    // TODO(plind): this 8 is the # of argument regs, should have definition.
-    __ Daddu(frame_pointer(), sp, Operand(8 * kPointerSize));
-    static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);
+    // Also push the frame marker.
+    __ li(kScratchReg, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));
+    static_assert(kFrameTypeOffset == kFramePointerOffset - kSystemPointerSize);
+    static_assert(kInputEndOffset ==
+                  kRegisterOutputOffset - kSystemPointerSize);
+    static_assert(kInputStartOffset == kInputEndOffset - kSystemPointerSize);
+    static_assert(kStartIndexOffset == kInputStartOffset - kSystemPointerSize);
+    static_assert(kInputStringOffset == kStartIndexOffset - kSystemPointerSize);
+    __ MultiPush(argument_registers | kScratchReg);
+
+    static_assert(kSuccessfulCapturesOffset ==
+                  kInputStringOffset - kSystemPointerSize);
     __ mov(a0, zero_reg);
     __ push(a0);  // Make room for success counter and initialize it to 0.
-    static_assert(kStringStartMinusOne ==
-                  kSuccessfulCaptures - kSystemPointerSize);
+    static_assert(kStringStartMinusOneOffset ==
+                  kSuccessfulCapturesOffset - kSystemPointerSize);
     __ push(a0);  // Make room for "string start - 1" constant.
-    static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);
+    static_assert(kBacktrackCountOffset ==
+                  kStringStartMinusOneOffset - kSystemPointerSize);
     __ push(a0);  // The backtrack counter
-    static_assert(kRegExpStackBasePointer ==
-                  kBacktrackCount - kSystemPointerSize);
+    static_assert(kRegExpStackBasePointerOffset ==
+                  kBacktrackCountOffset - kSystemPointerSize);
     __ push(a0);  // The regexp stack base ptr.
 
     // Initialize backtrack stack pointer. It must not be clobbered from here
@@ -777,20 +790,20 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {
     // Allocate space on stack for registers.
     __ Dsubu(sp, sp, Operand(num_registers_ * kPointerSize));
     // Load string end.
-    __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));
+    __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));
     // Load input start.
-    __ Ld(a0, MemOperand(frame_pointer(), kInputStart));
+    __ Ld(a0, MemOperand(frame_pointer(), kInputStartOffset));
     // Find negative length (offset of start relative to end).
     __ Dsubu(current_input_offset(), a0, end_of_input_address());
     // Set a0 to address of char before start of the input string
     // (effectively string position -1).
-    __ Ld(a1, MemOperand(frame_pointer(), kStartIndex));
+    __ Ld(a1, MemOperand(frame_pointer(), kStartIndexOffset));
     __ Dsubu(a0, current_input_offset(), Operand(char_size()));
     __ dsll(t1, a1, (mode_ == UC16) ? 1 : 0);
     __ Dsubu(a0, a0, t1);
     // Store this value in a local variable, for use when clearing
     // position registers.
-    __ Sd(a0, MemOperand(frame_pointer(), kStringStartMinusOne));
+    __ Sd(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));
 
     // Initialize code pointer register
     __ li(code_pointer(), Operand(masm_->CodeObject()), CONSTANT_SIZE);
@@ -815,7 +828,7 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {
       // Fill saved registers with initial value = start offset - 1.
       if (num_saved_registers_ > 8) {
         // Address of register 0.
-        __ Daddu(a1, frame_pointer(), Operand(kRegisterZero));
+        __ Daddu(a1, frame_pointer(), Operand(kRegisterZeroOffset));
         __ li(a2, Operand(num_saved_registers_));
         Label init_loop;
         __ bind(&init_loop);
@@ -838,9 +851,9 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {
       __ bind(&success_label_);
       if (num_saved_registers_ > 0) {
         // Copy captures to output.
-        __ Ld(a1, MemOperand(frame_pointer(), kInputStart));
-        __ Ld(a0, MemOperand(frame_pointer(), kRegisterOutput));
-        __ Ld(a2, MemOperand(frame_pointer(), kStartIndex));
+        __ Ld(a1, MemOperand(frame_pointer(), kInputStartOffset));
+        __ Ld(a0, MemOperand(frame_pointer(), kRegisterOutputOffset));
+        __ Ld(a2, MemOperand(frame_pointer(), kStartIndexOffset));
         __ Dsubu(a1, end_of_input_address(), a1);
         // a1 is length of input in bytes.
         if (mode_ == UC16) {
@@ -880,12 +893,12 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {
 
       if (global()) {
         // Restart matching if the regular expression is flagged as global.
-        __ Ld(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));
-        __ Ld(a1, MemOperand(frame_pointer(), kNumOutputRegisters));
-        __ Ld(a2, MemOperand(frame_pointer(), kRegisterOutput));
+        __ Ld(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));
+        __ Ld(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));
+        __ Ld(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));
         // Increment success counter.
         __ Daddu(a0, a0, 1);
-        __ Sd(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));
+        __ Sd(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));
         // Capture results have been stored, so the number of remaining global
         // output registers is reduced by the number of stored captures.
         __ Dsubu(a1, a1, num_saved_registers_);
@@ -893,13 +906,13 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {
         __ mov(v0, a0);
         __ Branch(&return_v0, lt, a1, Operand(num_saved_registers_));
 
-        __ Sd(a1, MemOperand(frame_pointer(), kNumOutputRegisters));
+        __ Sd(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));
         // Advance the location for output.
         __ Daddu(a2, a2, num_saved_registers_ * kIntSize);
-        __ Sd(a2, MemOperand(frame_pointer(), kRegisterOutput));
+        __ Sd(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));
 
         // Prepare a0 to initialize registers with its value in the next run.
-        __ Ld(a0, MemOperand(frame_pointer(), kStringStartMinusOne));
+        __ Ld(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));
 
         // Restore the original regexp stack pointer value (effectively, pop the
         // stored base pointer).
@@ -930,7 +943,7 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {
     // Exit and return v0.
     __ bind(&exit_label_);
     if (global()) {
-      __ Ld(v0, MemOperand(frame_pointer(), kSuccessfulCaptures));
+      __ Ld(v0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));
     }
 
     __ bind(&return_v0);
@@ -965,7 +978,8 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {
       LoadRegExpStackPointerFromMemory(backtrack_stackpointer());
 
       // String might have moved: Reload end of string from frame.
-      __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));
+      __ Ld(end_of_input_address(),
+            MemOperand(frame_pointer(), kInputEndOffset));
       SafeReturn();
     }
 
@@ -1169,7 +1183,7 @@ void RegExpMacroAssemblerMIPS::WriteCurrentPositionToRegister(int reg,
 
 void RegExpMacroAssemblerMIPS::ClearRegisters(int reg_from, int reg_to) {
   DCHECK(reg_from <= reg_to);
-  __ Ld(a0, MemOperand(frame_pointer(), kStringStartMinusOne));
+  __ Ld(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));
   for (int reg = reg_from; reg <= reg_to; reg++) {
     __ Sd(a0, register_location(reg));
   }
@@ -1257,14 +1271,14 @@ int64_t RegExpMacroAssemblerMIPS::CheckStackGuardState(Address* return_address,
                                                        Address re_frame) {
   InstructionStream re_code = InstructionStream::cast(Object(raw_code));
   return NativeRegExpMacroAssembler::CheckStackGuardState(
-      frame_entry<Isolate*>(re_frame, kIsolate),
-      static_cast<int>(frame_entry<int64_t>(re_frame, kStartIndex)),
+      frame_entry<Isolate*>(re_frame, kIsolateOffset),
+      static_cast<int>(frame_entry<int64_t>(re_frame, kStartIndexOffset)),
       static_cast<RegExp::CallOrigin>(
-          frame_entry<int64_t>(re_frame, kDirectCall)),
+          frame_entry<int64_t>(re_frame, kDirectCallOffset)),
       return_address, re_code,
-      frame_entry_address<Address>(re_frame, kInputString),
-      frame_entry_address<const byte*>(re_frame, kInputStart),
-      frame_entry_address<const byte*>(re_frame, kInputEnd));
+      frame_entry_address<Address>(re_frame, kInputStringOffset),
+      frame_entry_address<const byte*>(re_frame, kInputStartOffset),
+      frame_entry_address<const byte*>(re_frame, kInputEndOffset));
 }
 
 
@@ -1274,7 +1288,7 @@ MemOperand RegExpMacroAssemblerMIPS::register_location(int register_index) {
     num_registers_ = register_index + 1;
   }
   return MemOperand(frame_pointer(),
-                    kRegisterZero - register_index * kPointerSize);
+                    kRegisterZeroOffset - register_index * kPointerSize);
 }
 
 
@@ -1284,7 +1298,7 @@ void RegExpMacroAssemblerMIPS::CheckPosition(int cp_offset,
     BranchOrBacktrack(on_outside_input, ge, current_input_offset(),
                       Operand(-cp_offset * char_size()));
   } else {
-    __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOne));
+    __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));
     __ Daddu(a0, current_input_offset(), Operand(cp_offset * char_size()));
     BranchOrBacktrack(on_outside_input, le, a0, Operand(a1));
   }
