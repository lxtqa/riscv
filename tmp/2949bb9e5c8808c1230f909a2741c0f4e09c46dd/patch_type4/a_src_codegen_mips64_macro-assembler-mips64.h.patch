diff --git a/src/codegen/mips64/macro-assembler-mips64.h b/src/codegen/mips64/macro-assembler-mips64.h
index fbb719b8eaa..c997872ebbb 100644
--- a/src/codegen/mips64/macro-assembler-mips64.h
+++ b/src/codegen/mips64/macro-assembler-mips64.h
@@ -244,12 +244,12 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {
   // it to register use ld, it can be used in wasm jump table for concurrent
   // patching.
   void PatchAndJump(Address target);
-  void Jump(Handle<CodeDataContainer> code, RelocInfo::Mode rmode, COND_ARGS);
+  void Jump(Handle<Code> code, RelocInfo::Mode rmode, COND_ARGS);
   void Jump(const ExternalReference& reference);
   void Call(Register target, COND_ARGS);
   void Call(Address target, RelocInfo::Mode rmode, COND_ARGS);
-  void Call(Handle<CodeDataContainer> code,
-            RelocInfo::Mode rmode = RelocInfo::CODE_TARGET, COND_ARGS);
+  void Call(Handle<Code> code, RelocInfo::Mode rmode = RelocInfo::CODE_TARGET,
+            COND_ARGS);
   void Call(Label* target);
   void LoadAddress(Register dst, Label* target);
 
@@ -263,18 +263,17 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {
   void CallBuiltin(Builtin builtin);
   void TailCallBuiltin(Builtin builtin);
 
-  // Load the code entry point from the CodeDataContainer object.
-  void LoadCodeDataContainerEntry(Register destination,
-                                  Register code_data_container_object);
-  // Load code entry point from the CodeDataContainer object and compute
+  // Load the code entry point from the Code object.
+  void LoadCodeEntry(Register destination, Register code_data_container_object);
+  // Load code entry point from the Code object and compute
   // InstructionStream object pointer out of it. Must not be used for
-  // CodeDataContainers corresponding to builtins, because their entry points
+  // Codes corresponding to builtins, because their entry points
   // values point to the embedded instruction stream in .text section.
-  void LoadCodeDataContainerInstructionStreamNonBuiltin(
-      Register destination, Register code_data_container_object);
-  void CallCodeDataContainerObject(Register code_data_container_object);
-  void JumpCodeDataContainerObject(Register code_data_container_object,
-                                   JumpMode jump_mode = JumpMode::kJump);
+  void LoadCodeInstructionStreamNonBuiltin(Register destination,
+                                           Register code_data_container_object);
+  void CallCodeObject(Register code_data_container_object);
+  void JumpCodeObject(Register code_data_container_object,
+                      JumpMode jump_mode = JumpMode::kJump);
 
   // Generates an instruction sequence s.t. the return address points to the
   // instruction following the call.
@@ -1005,9 +1004,9 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {
   // less efficient form using xor instead of mov is emitted.
   void Swap(Register reg1, Register reg2, Register scratch = no_reg);
 
-  void TestCodeDataContainerIsMarkedForDeoptimizationAndJump(
-      Register code_data_container, Register scratch, Condition cond,
-      Label* target);
+  void TestCodeIsMarkedForDeoptimizationAndJump(Register code_data_container,
+                                                Register scratch,
+                                                Condition cond, Label* target);
   Operand ClearedValue() const;
 
   void PushRoot(RootIndex index) {
