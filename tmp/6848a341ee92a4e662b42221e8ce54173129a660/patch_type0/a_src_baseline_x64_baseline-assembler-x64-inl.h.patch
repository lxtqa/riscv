diff --git a/src/baseline/x64/baseline-assembler-x64-inl.h b/src/baseline/x64/baseline-assembler-x64-inl.h
index 2548975256..6ddb747446 100644
--- a/src/baseline/x64/baseline-assembler-x64-inl.h
+++ b/src/baseline/x64/baseline-assembler-x64-inl.h
@@ -9,6 +9,7 @@
 #include "src/baseline/baseline-assembler.h"
 #include "src/codegen/x64/register-x64.h"
 #include "src/objects/feedback-vector.h"
+#include "src/objects/literal-objects-inl.h"
 
 namespace v8 {
 namespace internal {
@@ -373,6 +374,47 @@ void BaselineAssembler::StoreTaggedFieldNoWriteBarrier(Register target,
   __ StoreTaggedField(FieldOperand(target, offset), value);
 }
 
+void BaselineAssembler::LoadTaggedPointerField(TaggedRegister output,
+                                               Register source, int offset) {
+  __ LoadTaggedPointerField(output, FieldOperand(source, offset));
+}
+
+void BaselineAssembler::LoadTaggedPointerField(TaggedRegister output,
+                                               TaggedRegister source,
+                                               int offset) {
+  __ LoadTaggedPointerField(output, FieldOperand(source, offset));
+}
+
+void BaselineAssembler::LoadTaggedPointerField(Register output,
+                                               TaggedRegister source,
+                                               int offset) {
+  __ LoadTaggedPointerField(output, FieldOperand(source, offset));
+}
+
+void BaselineAssembler::LoadTaggedAnyField(Register output,
+                                           TaggedRegister source, int offset) {
+  __ LoadAnyTaggedField(output, FieldOperand(source, offset));
+}
+
+void BaselineAssembler::LoadTaggedAnyField(TaggedRegister output,
+                                           TaggedRegister source, int offset) {
+  __ LoadAnyTaggedField(output, FieldOperand(source, offset));
+}
+
+void BaselineAssembler::LoadFixedArrayElement(Register output,
+                                              TaggedRegister array,
+                                              int32_t index) {
+  LoadTaggedAnyField(output, array,
+                     FixedArray::kHeaderSize + index * kTaggedSize);
+}
+
+void BaselineAssembler::LoadFixedArrayElement(TaggedRegister output,
+                                              TaggedRegister array,
+                                              int32_t index) {
+  LoadTaggedAnyField(output, array,
+                     FixedArray::kHeaderSize + index * kTaggedSize);
+}
+
 void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result,
                                                 Register feedback_vector,
                                                 FeedbackSlot slot,
@@ -404,9 +446,11 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(
   ScratchRegisterScope scratch_scope(this);
   Register feedback_cell = scratch_scope.AcquireScratch();
   LoadFunction(feedback_cell);
-  LoadTaggedPointerField(feedback_cell, feedback_cell,
+  // Decompresses pointer by complex addressing mode when necessary.
+  TaggedRegister tagged(feedback_cell);
+  LoadTaggedPointerField(tagged, feedback_cell,
                          JSFunction::kFeedbackCellOffset);
-  __ addl(FieldOperand(feedback_cell, FeedbackCell::kInterruptBudgetOffset),
+  __ addl(FieldOperand(tagged, FeedbackCell::kInterruptBudgetOffset),
           Immediate(weight));
   if (skip_interrupt_label) {
     DCHECK_LT(weight, 0);
@@ -420,13 +464,114 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(
   ScratchRegisterScope scratch_scope(this);
   Register feedback_cell = scratch_scope.AcquireScratch();
   LoadFunction(feedback_cell);
-  LoadTaggedPointerField(feedback_cell, feedback_cell,
+  // Decompresses pointer by complex addressing mode when necessary.
+  TaggedRegister tagged(feedback_cell);
+  LoadTaggedPointerField(tagged, feedback_cell,
                          JSFunction::kFeedbackCellOffset);
-  __ addl(FieldOperand(feedback_cell, FeedbackCell::kInterruptBudgetOffset),
-          weight);
+  __ addl(FieldOperand(tagged, FeedbackCell::kInterruptBudgetOffset), weight);
   if (skip_interrupt_label) __ j(greater_equal, skip_interrupt_label);
 }
 
+void BaselineAssembler::LdaContextSlot(Register context, uint32_t index,
+                                       uint32_t depth) {
+  // [context] is coming from interpreter frame so it is already decompressed
+  // when pointer compression is enabled. In order to make use of complex
+  // addressing mode, any intermediate context pointer is loaded in compressed
+  // form.
+  if (depth == 0) {
+    LoadTaggedAnyField(kInterpreterAccumulatorRegister, context,
+                       Context::OffsetOfElementAt(index));
+  } else {
+    TaggedRegister tagged(context);
+    LoadTaggedPointerField(tagged, context, Context::kPreviousOffset);
+    --depth;
+    for (; depth > 0; --depth) {
+      LoadTaggedPointerField(tagged, tagged, Context::kPreviousOffset);
+    }
+    LoadTaggedAnyField(kInterpreterAccumulatorRegister, tagged,
+                       Context::OffsetOfElementAt(index));
+  }
+}
+
+void BaselineAssembler::StaContextSlot(Register context, Register value,
+                                       uint32_t index, uint32_t depth) {
+  // [context] is coming from interpreter frame so it is already decompressed
+  // when pointer compression is enabled. In order to make use of complex
+  // addressing mode, any intermediate context pointer is loaded in compressed
+  // form.
+  if (depth > 0) {
+    TaggedRegister tagged(context);
+    LoadTaggedPointerField(tagged, context, Context::kPreviousOffset);
+    --depth;
+    for (; depth > 0; --depth) {
+      LoadTaggedPointerField(tagged, tagged, Context::kPreviousOffset);
+    }
+    if (COMPRESS_POINTERS_BOOL) {
+      // Decompress tagged pointer.
+      __ addq(tagged.reg(), kPtrComprCageBaseRegister);
+    }
+  }
+  StoreTaggedFieldWithWriteBarrier(context, Context::OffsetOfElementAt(index),
+                                   value);
+}
+
+void BaselineAssembler::LdaModuleVariable(Register context, int cell_index,
+                                          uint32_t depth) {
+  // [context] is coming from interpreter frame so it is already decompressed.
+  // In order to make use of complex addressing mode when pointer compression is
+  // enabled, any intermediate context pointer is loaded in compressed form.
+  TaggedRegister tagged(context);
+  if (depth == 0) {
+    LoadTaggedPointerField(tagged, context, Context::kExtensionOffset);
+  } else {
+    LoadTaggedPointerField(tagged, context, Context::kPreviousOffset);
+    --depth;
+    for (; depth > 0; --depth) {
+      LoadTaggedPointerField(tagged, tagged, Context::kPreviousOffset);
+    }
+    LoadTaggedPointerField(tagged, tagged, Context::kExtensionOffset);
+  }
+  if (cell_index > 0) {
+    LoadTaggedPointerField(tagged, tagged,
+                           SourceTextModule::kRegularExportsOffset);
+    // The actual array index is (cell_index - 1).
+    cell_index -= 1;
+  } else {
+    LoadTaggedPointerField(tagged, tagged,
+                           SourceTextModule::kRegularImportsOffset);
+    // The actual array index is (-cell_index - 1).
+    cell_index = -cell_index - 1;
+  }
+  LoadFixedArrayElement(tagged, tagged, cell_index);
+  LoadTaggedAnyField(kInterpreterAccumulatorRegister, tagged,
+                     Cell::kValueOffset);
+}
+
+void BaselineAssembler::StaModuleVariable(Register context, Register value,
+                                          int cell_index, uint32_t depth) {
+  // [context] is coming from interpreter frame so it is already decompressed.
+  // In order to make use of complex addressing mode when pointer compression is
+  // enabled, any intermediate context pointer is loaded in compressed form.
+  TaggedRegister tagged(context);
+  if (depth == 0) {
+    LoadTaggedPointerField(tagged, context, Context::kExtensionOffset);
+  } else {
+    LoadTaggedPointerField(tagged, context, Context::kPreviousOffset);
+    --depth;
+    for (; depth > 0; --depth) {
+      LoadTaggedPointerField(tagged, tagged, Context::kPreviousOffset);
+    }
+    LoadTaggedPointerField(tagged, tagged, Context::kExtensionOffset);
+  }
+  LoadTaggedPointerField(tagged, tagged,
+                         SourceTextModule::kRegularExportsOffset);
+
+  // The actual array index is (cell_index - 1).
+  cell_index -= 1;
+  LoadFixedArrayElement(context, tagged, cell_index);
+  StoreTaggedFieldWithWriteBarrier(context, Cell::kValueOffset, value);
+}
+
 void BaselineAssembler::AddSmi(Register lhs, Smi rhs) {
   if (rhs.value() == 0) return;
   if (SmiValuesAre31Bits()) {
