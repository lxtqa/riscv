diff --git a/src/regexp/x64/regexp-macro-assembler-x64.cc b/src/regexp/x64/regexp-macro-assembler-x64.cc
index 6f0cb53e8f..27c5cb3b97 100644
--- a/src/regexp/x64/regexp-macro-assembler-x64.cc
+++ b/src/regexp/x64/regexp-macro-assembler-x64.cc
@@ -185,8 +185,8 @@ void RegExpMacroAssemblerX64::CheckCharacter(uint32_t c, Label* on_equal) {
   BranchOrBacktrack(equal, on_equal);
 }
 
-void RegExpMacroAssemblerX64::CheckCharacterGT(base::uc16 limit,
-                                               Label* on_greater) {
+
+void RegExpMacroAssemblerX64::CheckCharacterGT(uc16 limit, Label* on_greater) {
   __ cmpl(current_character(), Immediate(limit));
   BranchOrBacktrack(greater, on_greater);
 }
@@ -204,12 +204,13 @@ void RegExpMacroAssemblerX64::CheckNotAtStart(int cp_offset,
   BranchOrBacktrack(not_equal, on_not_at_start);
 }
 
-void RegExpMacroAssemblerX64::CheckCharacterLT(base::uc16 limit,
-                                               Label* on_less) {
+
+void RegExpMacroAssemblerX64::CheckCharacterLT(uc16 limit, Label* on_less) {
   __ cmpl(current_character(), Immediate(limit));
   BranchOrBacktrack(less, on_less);
 }
 
+
 void RegExpMacroAssemblerX64::CheckGreedyLoop(Label* on_equal) {
   Label fallthrough;
   __ cmpl(rdi, Operand(backtrack_stackpointer(), 0));
@@ -496,8 +497,12 @@ void RegExpMacroAssemblerX64::CheckNotCharacterAfterAnd(uint32_t c,
   BranchOrBacktrack(not_equal, on_not_equal);
 }
 
+
 void RegExpMacroAssemblerX64::CheckNotCharacterAfterMinusAnd(
-    base::uc16 c, base::uc16 minus, base::uc16 mask, Label* on_not_equal) {
+    uc16 c,
+    uc16 minus,
+    uc16 mask,
+    Label* on_not_equal) {
   DCHECK_GT(String::kMaxUtf16CodeUnit, minus);
   __ leal(rax, Operand(current_character(), -minus));
   __ andl(rax, Immediate(mask));
@@ -505,22 +510,27 @@ void RegExpMacroAssemblerX64::CheckNotCharacterAfterMinusAnd(
   BranchOrBacktrack(not_equal, on_not_equal);
 }
 
-void RegExpMacroAssemblerX64::CheckCharacterInRange(base::uc16 from,
-                                                    base::uc16 to,
-                                                    Label* on_in_range) {
+
+void RegExpMacroAssemblerX64::CheckCharacterInRange(
+    uc16 from,
+    uc16 to,
+    Label* on_in_range) {
   __ leal(rax, Operand(current_character(), -from));
   __ cmpl(rax, Immediate(to - from));
   BranchOrBacktrack(below_equal, on_in_range);
 }
 
-void RegExpMacroAssemblerX64::CheckCharacterNotInRange(base::uc16 from,
-                                                       base::uc16 to,
-                                                       Label* on_not_in_range) {
+
+void RegExpMacroAssemblerX64::CheckCharacterNotInRange(
+    uc16 from,
+    uc16 to,
+    Label* on_not_in_range) {
   __ leal(rax, Operand(current_character(), -from));
   __ cmpl(rax, Immediate(to - from));
   BranchOrBacktrack(above, on_not_in_range);
 }
 
+
 void RegExpMacroAssemblerX64::CheckBitInTable(
     Handle<ByteArray> table,
     Label* on_bit_set) {
@@ -536,7 +546,8 @@ void RegExpMacroAssemblerX64::CheckBitInTable(
   BranchOrBacktrack(not_equal, on_bit_set);
 }
 
-bool RegExpMacroAssemblerX64::CheckSpecialCharacterClass(base::uc16 type,
+
+bool RegExpMacroAssemblerX64::CheckSpecialCharacterClass(uc16 type,
                                                          Label* on_no_match) {
   // Range checks (c in min..max) are generally implemented by an unsigned
   // (c - min) <= (max - min) check, using the sequence:
@@ -656,6 +667,7 @@ bool RegExpMacroAssemblerX64::CheckSpecialCharacterClass(base::uc16 type,
   }
 }
 
+
 void RegExpMacroAssemblerX64::Fail() {
   STATIC_ASSERT(FAILURE == 0);  // Return value for failure is zero.
   if (!global()) {
@@ -1354,11 +1366,11 @@ void RegExpMacroAssemblerX64::LoadCurrentCharacterUnchecked(int cp_offset,
     DCHECK(mode_ == UC16);
     if (characters == 2) {
       __ movl(current_character(),
-              Operand(rsi, rdi, times_1, cp_offset * sizeof(base::uc16)));
+              Operand(rsi, rdi, times_1, cp_offset * sizeof(uc16)));
     } else {
       DCHECK_EQ(1, characters);
       __ movzxwl(current_character(),
-                 Operand(rsi, rdi, times_1, cp_offset * sizeof(base::uc16)));
+                 Operand(rsi, rdi, times_1, cp_offset * sizeof(uc16)));
     }
   }
 }
