diff --git a/src/regexp/arm64/regexp-macro-assembler-arm64.h b/src/regexp/arm64/regexp-macro-assembler-arm64.h
index 80931e3ca4..253bdec8fb 100644
--- a/src/regexp/arm64/regexp-macro-assembler-arm64.h
+++ b/src/regexp/arm64/regexp-macro-assembler-arm64.h
@@ -5,7 +5,6 @@
 #ifndef V8_REGEXP_ARM64_REGEXP_MACRO_ASSEMBLER_ARM64_H_
 #define V8_REGEXP_ARM64_REGEXP_MACRO_ASSEMBLER_ARM64_H_
 
-#include "src/base/strings.h"
 #include "src/codegen/arm64/assembler-arm64.h"
 #include "src/codegen/macro-assembler.h"
 #include "src/regexp/regexp-macro-assembler.h"
@@ -30,11 +29,10 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64
   virtual void CheckCharacterAfterAnd(unsigned c,
                                       unsigned mask,
                                       Label* on_equal);
-  virtual void CheckCharacterGT(base::uc16 limit, Label* on_greater);
-  virtual void CheckCharacterLT(base::uc16 limit, Label* on_less);
-  virtual void CheckCharacters(base::Vector<const base::uc16> str,
-                               int cp_offset, Label* on_failure,
-                               bool check_end_of_string);
+  virtual void CheckCharacterGT(uc16 limit, Label* on_greater);
+  virtual void CheckCharacterLT(uc16 limit, Label* on_less);
+  virtual void CheckCharacters(base::Vector<const uc16> str, int cp_offset,
+                               Label* on_failure, bool check_end_of_string);
   // A "greedy loop" is a loop that is both greedy and with a simple
   // body. It has a particularly simple implementation.
   virtual void CheckGreedyLoop(Label* on_tos_equals_current_position);
@@ -48,19 +46,23 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64
   virtual void CheckNotCharacterAfterAnd(unsigned c,
                                          unsigned mask,
                                          Label* on_not_equal);
-  virtual void CheckNotCharacterAfterMinusAnd(base::uc16 c, base::uc16 minus,
-                                              base::uc16 mask,
+  virtual void CheckNotCharacterAfterMinusAnd(uc16 c,
+                                              uc16 minus,
+                                              uc16 mask,
                                               Label* on_not_equal);
-  virtual void CheckCharacterInRange(base::uc16 from, base::uc16 to,
+  virtual void CheckCharacterInRange(uc16 from,
+                                     uc16 to,
                                      Label* on_in_range);
-  virtual void CheckCharacterNotInRange(base::uc16 from, base::uc16 to,
+  virtual void CheckCharacterNotInRange(uc16 from,
+                                        uc16 to,
                                         Label* on_not_in_range);
   virtual void CheckBitInTable(Handle<ByteArray> table, Label* on_bit_set);
 
   // Checks whether the given offset from the current position is before
   // the end of the string.
   virtual void CheckPosition(int cp_offset, Label* on_outside_input);
-  virtual bool CheckSpecialCharacterClass(base::uc16 type, Label* on_no_match);
+  virtual bool CheckSpecialCharacterClass(uc16 type,
+                                          Label* on_no_match);
   virtual void BindJumpTarget(Label* label = nullptr);
   virtual void Fail();
   virtual Handle<HeapObject> GetCode(Handle<String> source);
