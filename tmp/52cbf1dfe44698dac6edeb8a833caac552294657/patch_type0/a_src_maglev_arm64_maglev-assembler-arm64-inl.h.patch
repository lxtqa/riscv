diff --git a/src/maglev/arm64/maglev-assembler-arm64-inl.h b/src/maglev/arm64/maglev-assembler-arm64-inl.h
index 56fde3090ee..712b22130a4 100644
--- a/src/maglev/arm64/maglev-assembler-arm64-inl.h
+++ b/src/maglev/arm64/maglev-assembler-arm64-inl.h
@@ -34,24 +34,65 @@ constexpr Condition ConditionFor(Operation operation) {
   }
 }
 
+class MaglevAssembler::ScratchRegisterScope {
+ public:
+  explicit ScratchRegisterScope(MaglevAssembler* masm) : wrapped_scope_(masm) {
+    // This field is never used in arm64.
+    DCHECK_NULL(masm->scratch_register_scope_);
+  }
+
+  Register Acquire() { return wrapped_scope_.AcquireX(); }
+  void Include(Register reg) { wrapped_scope_.Include(reg); }
+  void Include(const RegList list) {
+    wrapped_scope_.Include(CPURegList(kXRegSizeInBits, list));
+  }
+
+  DoubleRegister AcquireDouble() { return wrapped_scope_.AcquireD(); }
+  void IncludeDouble(const DoubleRegList list) {
+    wrapped_scope_.IncludeFP(CPURegList(kDRegSizeInBits, list));
+  }
+
+  RegList Available() {
+    return RegList::FromBits(wrapped_scope_.Available()->bits());
+  }
+  void SetAvailable(RegList list) {
+    wrapped_scope_.SetAvailable(CPURegList(kXRegSizeInBits, list));
+  }
+
+  DoubleRegList AvailableDouble() {
+    uint64_t bits = wrapped_scope_.AvailableFP()->bits();
+    // AvailableFP fits in a 32 bits word.
+    DCHECK_LE(bits, std::numeric_limits<uint32_t>::max());
+    return DoubleRegList::FromBits(static_cast<uint32_t>(bits));
+  }
+  void SetAvailableDouble(DoubleRegList list) {
+    wrapped_scope_.SetAvailableFP(CPURegList(kDRegSizeInBits, list));
+  }
+
+ private:
+  UseScratchRegisterScope wrapped_scope_;
+};
+
 namespace detail {
 
 template <typename Arg>
 inline Register ToRegister(MaglevAssembler* masm,
-                           UseScratchRegisterScope* scratch, Arg arg) {
-  Register reg = scratch->AcquireX();
+                           MaglevAssembler::ScratchRegisterScope* scratch,
+                           Arg arg) {
+  Register reg = scratch->Acquire();
   masm->Move(reg, arg);
   return reg;
 }
 inline Register ToRegister(MaglevAssembler* masm,
-                           UseScratchRegisterScope* scratch, Register reg) {
+                           MaglevAssembler::ScratchRegisterScope* scratch,
+                           Register reg) {
   return reg;
 }
 inline Register ToRegister(MaglevAssembler* masm,
-                           UseScratchRegisterScope* scratch,
+                           MaglevAssembler::ScratchRegisterScope* scratch,
                            const Input& input) {
   if (input.operand().IsConstant()) {
-    Register reg = scratch->AcquireX();
+    Register reg = scratch->Acquire();
     input.node()->LoadToRegister(masm, reg);
     return reg;
   }
@@ -61,7 +102,7 @@ inline Register ToRegister(MaglevAssembler* masm,
     return ToRegister(input);
   } else {
     DCHECK(operand.IsStackSlot());
-    Register reg = scratch->AcquireX();
+    Register reg = scratch->Acquire();
     masm->Move(reg, masm->ToMemOperand(input));
     return reg;
   }
@@ -153,11 +194,11 @@ inline void PushAligned(MaglevAssembler* masm, Arg1 arg1, Arg2 arg2) {
     // The second argument is not pushed together with the first so we can
     // re-use any scratch registers used to materialise the first argument for
     // the second one.
-    UseScratchRegisterScope temps(masm);
+    MaglevAssembler::ScratchRegisterScope temps(masm);
     masm->MacroAssembler::Push(ToRegister(masm, &temps, arg1), padreg);
   }
   {
-    UseScratchRegisterScope temps(masm);
+    MaglevAssembler::ScratchRegisterScope temps(masm);
     masm->MacroAssembler::str(ToRegister(masm, &temps, arg2), MemOperand(sp));
   }
 }
@@ -258,8 +299,8 @@ inline void MaglevAssembler::DoubleToInt64Repr(Register dst,
 
 inline Condition MaglevAssembler::IsInt64Constant(Register reg,
                                                   int64_t constant) {
-  UseScratchRegisterScope temps(this);
-  Register scratch = temps.AcquireX();
+  ScratchRegisterScope temps(this);
+  Register scratch = temps.Acquire();
   Mov(scratch, kHoleNanInt64);
   Cmp(reg, scratch);
   return eq;
@@ -271,8 +312,8 @@ inline Condition MaglevAssembler::IsRootConstant(Input input,
     CompareRoot(ToRegister(input), root_index);
   } else {
     DCHECK(input.operand().IsStackSlot());
-    UseScratchRegisterScope temps(this);
-    Register scratch = temps.AcquireX();
+    ScratchRegisterScope temps(this);
+    Register scratch = temps.Acquire();
     Ldr(scratch, ToMemOperand(input));
     CompareRoot(scratch, root_index);
   }
@@ -322,8 +363,8 @@ inline void MaglevAssembler::BuildTypedArrayDataPointer(Register data_pointer,
       data_pointer,
       FieldMemOperand(object, JSTypedArray::kExternalPointerOffset));
   if (JSTypedArray::kMaxSizeInHeap == 0) return;
-  UseScratchRegisterScope scope(this);
-  Register base = scope.AcquireX();
+  ScratchRegisterScope scope(this);
+  Register base = scope.Acquire();
   Ldr(base.W(), FieldMemOperand(object, JSTypedArray::kBasePointerOffset));
   Add(data_pointer, data_pointer, base);
 }
@@ -496,8 +537,8 @@ inline void MaglevAssembler::Pop(Register dst) { Pop(dst, padreg); }
 
 inline void MaglevAssembler::AssertStackSizeCorrect() {
   if (v8_flags.debug_code) {
-    UseScratchRegisterScope temps(this);
-    Register scratch = temps.AcquireX();
+    ScratchRegisterScope temps(this);
+    Register scratch = temps.Acquire();
     Add(scratch, sp,
         RoundUp<2 * kSystemPointerSize>(
             code_gen_state()->stack_slots() * kSystemPointerSize +
@@ -545,10 +586,10 @@ inline void MaglevAssembler::MaterialiseValueNode(Register dst,
   switch (value->properties().value_representation()) {
     case ValueRepresentation::kInt32: {
       Label done;
-      UseScratchRegisterScope temps(this);
-      Register scratch = temps.AcquireW();
-      Ldr(scratch, src);
-      Adds(dst.W(), scratch, scratch);
+      ScratchRegisterScope temps(this);
+      Register scratch = temps.Acquire();
+      Ldr(scratch.W(), src);
+      Adds(dst.W(), scratch.W(), scratch.W());
       B(&done, vc);
       // If we overflow, instead of bailing out (deopting), we change
       // representation to a HeapNumber.
@@ -622,8 +663,8 @@ inline void MaglevAssembler::MoveRepr(MachineRepresentation repr,
 template <>
 inline void MaglevAssembler::MoveRepr(MachineRepresentation repr,
                                       MemOperand dst, MemOperand src) {
-  UseScratchRegisterScope temps(this);
-  Register scratch = temps.AcquireX();
+  ScratchRegisterScope temps(this);
+  Register scratch = temps.Acquire();
   MoveRepr(repr, scratch, src);
   MoveRepr(repr, dst, scratch);
 }
