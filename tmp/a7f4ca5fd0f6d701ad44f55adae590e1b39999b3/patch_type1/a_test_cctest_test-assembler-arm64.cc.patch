diff --git a/test/cctest/test-assembler-arm64.cc b/test/cctest/test-assembler-arm64.cc
index fc6429a9c1f..2311c5e10db 100644
--- a/test/cctest/test-assembler-arm64.cc
+++ b/test/cctest/test-assembler-arm64.cc
@@ -8728,19 +8728,19 @@ TEST(fmov_reg) {
   __ Fmov(x1, d1);
   __ Fmov(d2, x1);
   __ Fmov(d4, d1);
-  __ Fmov(d6, bit_cast<double>(0x0123456789ABCDEFL));
+  __ Fmov(d6, base::bit_cast<double>(0x0123456789ABCDEFL));
   __ Fmov(s6, s6);
   END();
 
   RUN();
 
-  CHECK_EQUAL_32(bit_cast<uint32_t>(1.0f), w10);
+  CHECK_EQUAL_32(base::bit_cast<uint32_t>(1.0f), w10);
   CHECK_EQUAL_FP32(1.0, s30);
   CHECK_EQUAL_FP32(1.0, s5);
-  CHECK_EQUAL_64(bit_cast<uint64_t>(-13.0), x1);
+  CHECK_EQUAL_64(base::bit_cast<uint64_t>(-13.0), x1);
   CHECK_EQUAL_FP64(-13.0, d2);
   CHECK_EQUAL_FP64(-13.0, d4);
-  CHECK_EQUAL_FP32(bit_cast<float>(0x89ABCDEF), s6);
+  CHECK_EQUAL_FP32(base::bit_cast<float>(0x89ABCDEF), s6);
 }
 
 TEST(fadd) {
@@ -9037,12 +9037,12 @@ TEST(fmadd_fmsub_float) {
 TEST(fmadd_fmsub_double_nans) {
   INIT_V8();
   // Make sure that NaN propagation works correctly.
-  double s1 = bit_cast<double>(0x7FF5555511111111);
-  double s2 = bit_cast<double>(0x7FF5555522222222);
-  double sa = bit_cast<double>(0x7FF55555AAAAAAAA);
-  double q1 = bit_cast<double>(0x7FFAAAAA11111111);
-  double q2 = bit_cast<double>(0x7FFAAAAA22222222);
-  double qa = bit_cast<double>(0x7FFAAAAAAAAAAAAA);
+  double s1 = base::bit_cast<double>(0x7FF5555511111111);
+  double s2 = base::bit_cast<double>(0x7FF5555522222222);
+  double sa = base::bit_cast<double>(0x7FF55555AAAAAAAA);
+  double q1 = base::bit_cast<double>(0x7FFAAAAA11111111);
+  double q2 = base::bit_cast<double>(0x7FFAAAAA22222222);
+  double qa = base::bit_cast<double>(0x7FFAAAAAAAAAAAAA);
   CHECK(IsSignallingNaN(s1));
   CHECK(IsSignallingNaN(s2));
   CHECK(IsSignallingNaN(sa));
@@ -9051,9 +9051,9 @@ TEST(fmadd_fmsub_double_nans) {
   CHECK(IsQuietNaN(qa));
 
   // The input NaNs after passing through ProcessNaN.
-  double s1_proc = bit_cast<double>(0x7FFD555511111111);
-  double s2_proc = bit_cast<double>(0x7FFD555522222222);
-  double sa_proc = bit_cast<double>(0x7FFD5555AAAAAAAA);
+  double s1_proc = base::bit_cast<double>(0x7FFD555511111111);
+  double s2_proc = base::bit_cast<double>(0x7FFD555522222222);
+  double sa_proc = base::bit_cast<double>(0x7FFD5555AAAAAAAA);
   double q1_proc = q1;
   double q2_proc = q2;
   double qa_proc = qa;
@@ -9065,10 +9065,10 @@ TEST(fmadd_fmsub_double_nans) {
   CHECK(IsQuietNaN(qa_proc));
 
   // Negated NaNs as it would be done on ARMv8 hardware.
-  double s1_proc_neg = bit_cast<double>(0xFFFD555511111111);
-  double sa_proc_neg = bit_cast<double>(0xFFFD5555AAAAAAAA);
-  double q1_proc_neg = bit_cast<double>(0xFFFAAAAA11111111);
-  double qa_proc_neg = bit_cast<double>(0xFFFAAAAAAAAAAAAA);
+  double s1_proc_neg = base::bit_cast<double>(0xFFFD555511111111);
+  double sa_proc_neg = base::bit_cast<double>(0xFFFD5555AAAAAAAA);
+  double q1_proc_neg = base::bit_cast<double>(0xFFFAAAAA11111111);
+  double qa_proc_neg = base::bit_cast<double>(0xFFFAAAAAAAAAAAAA);
   CHECK(IsQuietNaN(s1_proc_neg));
   CHECK(IsQuietNaN(sa_proc_neg));
   CHECK(IsQuietNaN(q1_proc_neg));
@@ -9119,12 +9119,12 @@ TEST(fmadd_fmsub_double_nans) {
 TEST(fmadd_fmsub_float_nans) {
   INIT_V8();
   // Make sure that NaN propagation works correctly.
-  float s1 = bit_cast<float>(0x7F951111);
-  float s2 = bit_cast<float>(0x7F952222);
-  float sa = bit_cast<float>(0x7F95AAAA);
-  float q1 = bit_cast<float>(0x7FEA1111);
-  float q2 = bit_cast<float>(0x7FEA2222);
-  float qa = bit_cast<float>(0x7FEAAAAA);
+  float s1 = base::bit_cast<float>(0x7F951111);
+  float s2 = base::bit_cast<float>(0x7F952222);
+  float sa = base::bit_cast<float>(0x7F95AAAA);
+  float q1 = base::bit_cast<float>(0x7FEA1111);
+  float q2 = base::bit_cast<float>(0x7FEA2222);
+  float qa = base::bit_cast<float>(0x7FEAAAAA);
   CHECK(IsSignallingNaN(s1));
   CHECK(IsSignallingNaN(s2));
   CHECK(IsSignallingNaN(sa));
@@ -9133,9 +9133,9 @@ TEST(fmadd_fmsub_float_nans) {
   CHECK(IsQuietNaN(qa));
 
   // The input NaNs after passing through ProcessNaN.
-  float s1_proc = bit_cast<float>(0x7FD51111);
-  float s2_proc = bit_cast<float>(0x7FD52222);
-  float sa_proc = bit_cast<float>(0x7FD5AAAA);
+  float s1_proc = base::bit_cast<float>(0x7FD51111);
+  float s2_proc = base::bit_cast<float>(0x7FD52222);
+  float sa_proc = base::bit_cast<float>(0x7FD5AAAA);
   float q1_proc = q1;
   float q2_proc = q2;
   float qa_proc = qa;
@@ -9147,10 +9147,10 @@ TEST(fmadd_fmsub_float_nans) {
   CHECK(IsQuietNaN(qa_proc));
 
   // Negated NaNs as it would be done on ARMv8 hardware.
-  float s1_proc_neg = bit_cast<float>(0xFFD51111);
-  float sa_proc_neg = bit_cast<float>(0xFFD5AAAA);
-  float q1_proc_neg = bit_cast<float>(0xFFEA1111);
-  float qa_proc_neg = bit_cast<float>(0xFFEAAAAA);
+  float s1_proc_neg = base::bit_cast<float>(0xFFD51111);
+  float sa_proc_neg = base::bit_cast<float>(0xFFD5AAAA);
+  float q1_proc_neg = base::bit_cast<float>(0xFFEA1111);
+  float qa_proc_neg = base::bit_cast<float>(0xFFEAAAAA);
   CHECK(IsQuietNaN(s1_proc_neg));
   CHECK(IsQuietNaN(sa_proc_neg));
   CHECK(IsQuietNaN(q1_proc_neg));
@@ -9258,15 +9258,15 @@ static float MinMaxHelper(float n,
                           float m,
                           bool min,
                           float quiet_nan_substitute = 0.0) {
-  uint32_t raw_n = bit_cast<uint32_t>(n);
-  uint32_t raw_m = bit_cast<uint32_t>(m);
+  uint32_t raw_n = base::bit_cast<uint32_t>(n);
+  uint32_t raw_m = base::bit_cast<uint32_t>(m);
 
   if (std::isnan(n) && ((raw_n & kSQuietNanMask) == 0)) {
     // n is signalling NaN.
-    return bit_cast<float>(raw_n | static_cast<uint32_t>(kSQuietNanMask));
+    return base::bit_cast<float>(raw_n | static_cast<uint32_t>(kSQuietNanMask));
   } else if (std::isnan(m) && ((raw_m & kSQuietNanMask) == 0)) {
     // m is signalling NaN.
-    return bit_cast<float>(raw_m | static_cast<uint32_t>(kSQuietNanMask));
+    return base::bit_cast<float>(raw_m | static_cast<uint32_t>(kSQuietNanMask));
   } else if (quiet_nan_substitute == 0.0) {
     if (std::isnan(n)) {
       // n is quiet NaN.
@@ -9299,15 +9299,15 @@ static double MinMaxHelper(double n,
                            double m,
                            bool min,
                            double quiet_nan_substitute = 0.0) {
-  uint64_t raw_n = bit_cast<uint64_t>(n);
-  uint64_t raw_m = bit_cast<uint64_t>(m);
+  uint64_t raw_n = base::bit_cast<uint64_t>(n);
+  uint64_t raw_m = base::bit_cast<uint64_t>(m);
 
   if (std::isnan(n) && ((raw_n & kDQuietNanMask) == 0)) {
     // n is signalling NaN.
-    return bit_cast<double>(raw_n | kDQuietNanMask);
+    return base::bit_cast<double>(raw_n | kDQuietNanMask);
   } else if (std::isnan(m) && ((raw_m & kDQuietNanMask) == 0)) {
     // m is signalling NaN.
-    return bit_cast<double>(raw_m | kDQuietNanMask);
+    return base::bit_cast<double>(raw_m | kDQuietNanMask);
   } else if (quiet_nan_substitute == 0.0) {
     if (std::isnan(n)) {
       // n is quiet NaN.
@@ -9360,10 +9360,10 @@ static void FminFmaxDoubleHelper(double n, double m, double min, double max,
 TEST(fmax_fmin_d) {
   INIT_V8();
   // Use non-standard NaNs to check that the payload bits are preserved.
-  double snan = bit_cast<double>(0x7FF5555512345678);
-  double qnan = bit_cast<double>(0x7FFAAAAA87654321);
+  double snan = base::bit_cast<double>(0x7FF5555512345678);
+  double qnan = base::bit_cast<double>(0x7FFAAAAA87654321);
 
-  double snan_processed = bit_cast<double>(0x7FFD555512345678);
+  double snan_processed = base::bit_cast<double>(0x7FFD555512345678);
   double qnan_processed = qnan;
 
   CHECK(IsSignallingNaN(snan));
@@ -9441,10 +9441,10 @@ static void FminFmaxFloatHelper(float n, float m, float min, float max,
 TEST(fmax_fmin_s) {
   INIT_V8();
   // Use non-standard NaNs to check that the payload bits are preserved.
-  float snan = bit_cast<float>(0x7F951234);
-  float qnan = bit_cast<float>(0x7FEA8765);
+  float snan = base::bit_cast<float>(0x7F951234);
+  float qnan = base::bit_cast<float>(0x7FEA8765);
 
-  float snan_processed = bit_cast<float>(0x7FD51234);
+  float snan_processed = base::bit_cast<float>(0x7FD51234);
   float qnan_processed = qnan;
 
   CHECK(IsSignallingNaN(snan));
@@ -10245,8 +10245,8 @@ TEST(fcvt_ds) {
   __ Fmov(s26, -0.0);
   __ Fmov(s27, FLT_MAX);
   __ Fmov(s28, FLT_MIN);
-  __ Fmov(s29, bit_cast<float>(0x7FC12345));  // Quiet NaN.
-  __ Fmov(s30, bit_cast<float>(0x7F812345));  // Signalling NaN.
+  __ Fmov(s29, base::bit_cast<float>(0x7FC12345));  // Quiet NaN.
+  __ Fmov(s30, base::bit_cast<float>(0x7F812345));  // Signalling NaN.
 
   __ Fcvt(d0, s16);
   __ Fcvt(d1, s17);
@@ -10287,8 +10287,8 @@ TEST(fcvt_ds) {
   //  - The top bit of the mantissa is forced to 1 (making it a quiet NaN).
   //  - The remaining mantissa bits are copied until they run out.
   //  - The low-order bits that haven't already been assigned are set to 0.
-  CHECK_EQUAL_FP64(bit_cast<double>(0x7FF82468A0000000), d13);
-  CHECK_EQUAL_FP64(bit_cast<double>(0x7FF82468A0000000), d14);
+  CHECK_EQUAL_FP64(base::bit_cast<double>(0x7FF82468A0000000), d13);
+  CHECK_EQUAL_FP64(base::bit_cast<double>(0x7FF82468A0000000), d14);
 }
 
 TEST(fcvt_sd) {
@@ -10316,23 +10316,38 @@ TEST(fcvt_sd) {
       //    For normalized numbers:
       //         bit 29 (0x0000000020000000) is the lowest-order bit which will
       //                                     fit in the float's mantissa.
-      {bit_cast<double>(0x3FF0000000000000), bit_cast<float>(0x3F800000)},
-      {bit_cast<double>(0x3FF0000000000001), bit_cast<float>(0x3F800000)},
-      {bit_cast<double>(0x3FF0000010000000), bit_cast<float>(0x3F800000)},
-      {bit_cast<double>(0x3FF0000010000001), bit_cast<float>(0x3F800001)},
-      {bit_cast<double>(0x3FF0000020000000), bit_cast<float>(0x3F800001)},
-      {bit_cast<double>(0x3FF0000020000001), bit_cast<float>(0x3F800001)},
-      {bit_cast<double>(0x3FF0000030000000), bit_cast<float>(0x3F800002)},
-      {bit_cast<double>(0x3FF0000030000001), bit_cast<float>(0x3F800002)},
-      {bit_cast<double>(0x3FF0000040000000), bit_cast<float>(0x3F800002)},
-      {bit_cast<double>(0x3FF0000040000001), bit_cast<float>(0x3F800002)},
-      {bit_cast<double>(0x3FF0000050000000), bit_cast<float>(0x3F800002)},
-      {bit_cast<double>(0x3FF0000050000001), bit_cast<float>(0x3F800003)},
-      {bit_cast<double>(0x3FF0000060000000), bit_cast<float>(0x3F800003)},
+      {base::bit_cast<double>(0x3FF0000000000000),
+       base::bit_cast<float>(0x3F800000)},
+      {base::bit_cast<double>(0x3FF0000000000001),
+       base::bit_cast<float>(0x3F800000)},
+      {base::bit_cast<double>(0x3FF0000010000000),
+       base::bit_cast<float>(0x3F800000)},
+      {base::bit_cast<double>(0x3FF0000010000001),
+       base::bit_cast<float>(0x3F800001)},
+      {base::bit_cast<double>(0x3FF0000020000000),
+       base::bit_cast<float>(0x3F800001)},
+      {base::bit_cast<double>(0x3FF0000020000001),
+       base::bit_cast<float>(0x3F800001)},
+      {base::bit_cast<double>(0x3FF0000030000000),
+       base::bit_cast<float>(0x3F800002)},
+      {base::bit_cast<double>(0x3FF0000030000001),
+       base::bit_cast<float>(0x3F800002)},
+      {base::bit_cast<double>(0x3FF0000040000000),
+       base::bit_cast<float>(0x3F800002)},
+      {base::bit_cast<double>(0x3FF0000040000001),
+       base::bit_cast<float>(0x3F800002)},
+      {base::bit_cast<double>(0x3FF0000050000000),
+       base::bit_cast<float>(0x3F800002)},
+      {base::bit_cast<double>(0x3FF0000050000001),
+       base::bit_cast<float>(0x3F800003)},
+      {base::bit_cast<double>(0x3FF0000060000000),
+       base::bit_cast<float>(0x3F800003)},
       //  - A mantissa that overflows into the exponent during rounding.
-      {bit_cast<double>(0x3FEFFFFFF0000000), bit_cast<float>(0x3F800000)},
+      {base::bit_cast<double>(0x3FEFFFFFF0000000),
+       base::bit_cast<float>(0x3F800000)},
       //  - The largest double that rounds to a normal float.
-      {bit_cast<double>(0x47EFFFFFEFFFFFFF), bit_cast<float>(0x7F7FFFFF)},
+      {base::bit_cast<double>(0x47EFFFFFEFFFFFFF),
+       base::bit_cast<float>(0x7F7FFFFF)},
 
       // Doubles that are too big for a float.
       {kFP64PositiveInfinity, kFP32PositiveInfinity},
@@ -10340,46 +10355,68 @@ TEST(fcvt_sd) {
       //  - The smallest exponent that's too big for a float.
       {pow(2.0, 128), kFP32PositiveInfinity},
       //  - This exponent is in range, but the value rounds to infinity.
-      {bit_cast<double>(0x47EFFFFFF0000000), kFP32PositiveInfinity},
+      {base::bit_cast<double>(0x47EFFFFFF0000000), kFP32PositiveInfinity},
 
       // Doubles that are too small for a float.
       //  - The smallest (subnormal) double.
       {DBL_MIN, 0.0},
       //  - The largest double which is too small for a subnormal float.
-      {bit_cast<double>(0x3690000000000000), bit_cast<float>(0x00000000)},
+      {base::bit_cast<double>(0x3690000000000000),
+       base::bit_cast<float>(0x00000000)},
 
       // Normal doubles that become subnormal floats.
       //  - The largest subnormal float.
-      {bit_cast<double>(0x380FFFFFC0000000), bit_cast<float>(0x007FFFFF)},
+      {base::bit_cast<double>(0x380FFFFFC0000000),
+       base::bit_cast<float>(0x007FFFFF)},
       //  - The smallest subnormal float.
-      {bit_cast<double>(0x36A0000000000000), bit_cast<float>(0x00000001)},
+      {base::bit_cast<double>(0x36A0000000000000),
+       base::bit_cast<float>(0x00000001)},
       //  - Subnormal floats that need (ties-to-even) rounding.
       //    For these subnormals:
       //         bit 34 (0x0000000400000000) is the lowest-order bit which will
       //                                     fit in the float's mantissa.
-      {bit_cast<double>(0x37C159E000000000), bit_cast<float>(0x00045678)},
-      {bit_cast<double>(0x37C159E000000001), bit_cast<float>(0x00045678)},
-      {bit_cast<double>(0x37C159E200000000), bit_cast<float>(0x00045678)},
-      {bit_cast<double>(0x37C159E200000001), bit_cast<float>(0x00045679)},
-      {bit_cast<double>(0x37C159E400000000), bit_cast<float>(0x00045679)},
-      {bit_cast<double>(0x37C159E400000001), bit_cast<float>(0x00045679)},
-      {bit_cast<double>(0x37C159E600000000), bit_cast<float>(0x0004567A)},
-      {bit_cast<double>(0x37C159E600000001), bit_cast<float>(0x0004567A)},
-      {bit_cast<double>(0x37C159E800000000), bit_cast<float>(0x0004567A)},
-      {bit_cast<double>(0x37C159E800000001), bit_cast<float>(0x0004567A)},
-      {bit_cast<double>(0x37C159EA00000000), bit_cast<float>(0x0004567A)},
-      {bit_cast<double>(0x37C159EA00000001), bit_cast<float>(0x0004567B)},
-      {bit_cast<double>(0x37C159EC00000000), bit_cast<float>(0x0004567B)},
+      {base::bit_cast<double>(0x37C159E000000000),
+       base::bit_cast<float>(0x00045678)},
+      {base::bit_cast<double>(0x37C159E000000001),
+       base::bit_cast<float>(0x00045678)},
+      {base::bit_cast<double>(0x37C159E200000000),
+       base::bit_cast<float>(0x00045678)},
+      {base::bit_cast<double>(0x37C159E200000001),
+       base::bit_cast<float>(0x00045679)},
+      {base::bit_cast<double>(0x37C159E400000000),
+       base::bit_cast<float>(0x00045679)},
+      {base::bit_cast<double>(0x37C159E400000001),
+       base::bit_cast<float>(0x00045679)},
+      {base::bit_cast<double>(0x37C159E600000000),
+       base::bit_cast<float>(0x0004567A)},
+      {base::bit_cast<double>(0x37C159E600000001),
+       base::bit_cast<float>(0x0004567A)},
+      {base::bit_cast<double>(0x37C159E800000000),
+       base::bit_cast<float>(0x0004567A)},
+      {base::bit_cast<double>(0x37C159E800000001),
+       base::bit_cast<float>(0x0004567A)},
+      {base::bit_cast<double>(0x37C159EA00000000),
+       base::bit_cast<float>(0x0004567A)},
+      {base::bit_cast<double>(0x37C159EA00000001),
+       base::bit_cast<float>(0x0004567B)},
+      {base::bit_cast<double>(0x37C159EC00000000),
+       base::bit_cast<float>(0x0004567B)},
       //  - The smallest double which rounds up to become a subnormal float.
-      {bit_cast<double>(0x3690000000000001), bit_cast<float>(0x00000001)},
+      {base::bit_cast<double>(0x3690000000000001),
+       base::bit_cast<float>(0x00000001)},
 
       // Check NaN payload preservation.
-      {bit_cast<double>(0x7FF82468A0000000), bit_cast<float>(0x7FC12345)},
-      {bit_cast<double>(0x7FF82468BFFFFFFF), bit_cast<float>(0x7FC12345)},
+      {base::bit_cast<double>(0x7FF82468A0000000),
+       base::bit_cast<float>(0x7FC12345)},
+      {base::bit_cast<double>(0x7FF82468BFFFFFFF),
+       base::bit_cast<float>(0x7FC12345)},
       //  - Signalling NaNs become quiet NaNs.
-      {bit_cast<double>(0x7FF02468A0000000), bit_cast<float>(0x7FC12345)},
-      {bit_cast<double>(0x7FF02468BFFFFFFF), bit_cast<float>(0x7FC12345)},
-      {bit_cast<double>(0x7FF000001FFFFFFF), bit_cast<float>(0x7FC00000)},
+      {base::bit_cast<double>(0x7FF02468A0000000),
+       base::bit_cast<float>(0x7FC12345)},
+      {base::bit_cast<double>(0x7FF02468BFFFFFFF),
+       base::bit_cast<float>(0x7FC12345)},
+      {base::bit_cast<double>(0x7FF000001FFFFFFF),
+       base::bit_cast<float>(0x7FC00000)},
   };
   int count = sizeof(test) / sizeof(test[0]);
 
@@ -11175,7 +11212,7 @@ static void FjcvtzsHelper(uint64_t value, uint64_t expected,
                           uint32_t expected_z) {
   SETUP();
   START();
-  __ Fmov(d0, bit_cast<double>(value));
+  __ Fmov(d0, base::bit_cast<double>(value));
   __ Fjcvtzs(w0, d0);
   __ Mrs(x1, NZCV);
   END();
@@ -11462,8 +11499,8 @@ static void TestUScvtfHelper(uint64_t in,
   RUN();
 
   // Check the results.
-  double expected_scvtf_base = bit_cast<double>(expected_scvtf_bits);
-  double expected_ucvtf_base = bit_cast<double>(expected_ucvtf_bits);
+  double expected_scvtf_base = base::bit_cast<double>(expected_scvtf_bits);
+  double expected_ucvtf_base = base::bit_cast<double>(expected_ucvtf_bits);
 
   for (int fbits = 0; fbits <= 32; fbits++) {
     double expected_scvtf = expected_scvtf_base / pow(2.0, fbits);
@@ -11613,8 +11650,8 @@ static void TestUScvtf32Helper(uint64_t in,
   RUN();
 
   // Check the results.
-  float expected_scvtf_base = bit_cast<float>(expected_scvtf_bits);
-  float expected_ucvtf_base = bit_cast<float>(expected_ucvtf_bits);
+  float expected_scvtf_base = base::bit_cast<float>(expected_scvtf_bits);
+  float expected_ucvtf_base = base::bit_cast<float>(expected_ucvtf_bits);
 
   for (int fbits = 0; fbits <= 32; fbits++) {
     float expected_scvtf = expected_scvtf_base / powf(2, fbits);
@@ -14198,13 +14235,13 @@ TEST(barriers) {
 TEST(process_nan_double) {
   INIT_V8();
   // Make sure that NaN propagation works correctly.
-  double sn = bit_cast<double>(0x7FF5555511111111);
-  double qn = bit_cast<double>(0x7FFAAAAA11111111);
+  double sn = base::bit_cast<double>(0x7FF5555511111111);
+  double qn = base::bit_cast<double>(0x7FFAAAAA11111111);
   CHECK(IsSignallingNaN(sn));
   CHECK(IsQuietNaN(qn));
 
   // The input NaNs after passing through ProcessNaN.
-  double sn_proc = bit_cast<double>(0x7FFD555511111111);
+  double sn_proc = base::bit_cast<double>(0x7FFD555511111111);
   double qn_proc = qn;
   CHECK(IsQuietNaN(sn_proc));
   CHECK(IsQuietNaN(qn_proc));
@@ -14244,17 +14281,17 @@ TEST(process_nan_double) {
   END();
   RUN();
 
-  uint64_t qn_raw = bit_cast<uint64_t>(qn);
-  uint64_t sn_raw = bit_cast<uint64_t>(sn);
+  uint64_t qn_raw = base::bit_cast<uint64_t>(qn);
+  uint64_t sn_raw = base::bit_cast<uint64_t>(sn);
 
   //   - Signalling NaN
   CHECK_EQUAL_FP64(sn, d1);
-  CHECK_EQUAL_FP64(bit_cast<double>(sn_raw & ~kDSignMask), d2);
-  CHECK_EQUAL_FP64(bit_cast<double>(sn_raw ^ kDSignMask), d3);
+  CHECK_EQUAL_FP64(base::bit_cast<double>(sn_raw & ~kDSignMask), d2);
+  CHECK_EQUAL_FP64(base::bit_cast<double>(sn_raw ^ kDSignMask), d3);
   //   - Quiet NaN
   CHECK_EQUAL_FP64(qn, d11);
-  CHECK_EQUAL_FP64(bit_cast<double>(qn_raw & ~kDSignMask), d12);
-  CHECK_EQUAL_FP64(bit_cast<double>(qn_raw ^ kDSignMask), d13);
+  CHECK_EQUAL_FP64(base::bit_cast<double>(qn_raw & ~kDSignMask), d12);
+  CHECK_EQUAL_FP64(base::bit_cast<double>(qn_raw ^ kDSignMask), d13);
 
   //   - Signalling NaN
   CHECK_EQUAL_FP64(sn_proc, d4);
@@ -14271,13 +14308,13 @@ TEST(process_nan_double) {
 TEST(process_nan_float) {
   INIT_V8();
   // Make sure that NaN propagation works correctly.
-  float sn = bit_cast<float>(0x7F951111);
-  float qn = bit_cast<float>(0x7FEA1111);
+  float sn = base::bit_cast<float>(0x7F951111);
+  float qn = base::bit_cast<float>(0x7FEA1111);
   CHECK(IsSignallingNaN(sn));
   CHECK(IsQuietNaN(qn));
 
   // The input NaNs after passing through ProcessNaN.
-  float sn_proc = bit_cast<float>(0x7FD51111);
+  float sn_proc = base::bit_cast<float>(0x7FD51111);
   float qn_proc = qn;
   CHECK(IsQuietNaN(sn_proc));
   CHECK(IsQuietNaN(qn_proc));
@@ -14317,18 +14354,18 @@ TEST(process_nan_float) {
   END();
   RUN();
 
-  uint32_t qn_raw = bit_cast<uint32_t>(qn);
-  uint32_t sn_raw = bit_cast<uint32_t>(sn);
+  uint32_t qn_raw = base::bit_cast<uint32_t>(qn);
+  uint32_t sn_raw = base::bit_cast<uint32_t>(sn);
   uint32_t sign_mask = static_cast<uint32_t>(kSSignMask);
 
   //   - Signalling NaN
   CHECK_EQUAL_FP32(sn, s1);
-  CHECK_EQUAL_FP32(bit_cast<float>(sn_raw & ~sign_mask), s2);
-  CHECK_EQUAL_FP32(bit_cast<float>(sn_raw ^ sign_mask), s3);
+  CHECK_EQUAL_FP32(base::bit_cast<float>(sn_raw & ~sign_mask), s2);
+  CHECK_EQUAL_FP32(base::bit_cast<float>(sn_raw ^ sign_mask), s3);
   //   - Quiet NaN
   CHECK_EQUAL_FP32(qn, s11);
-  CHECK_EQUAL_FP32(bit_cast<float>(qn_raw & ~sign_mask), s12);
-  CHECK_EQUAL_FP32(bit_cast<float>(qn_raw ^ sign_mask), s13);
+  CHECK_EQUAL_FP32(base::bit_cast<float>(qn_raw & ~sign_mask), s12);
+  CHECK_EQUAL_FP32(base::bit_cast<float>(qn_raw ^ sign_mask), s13);
 
   //   - Signalling NaN
   CHECK_EQUAL_FP32(sn_proc, s4);
@@ -14376,18 +14413,18 @@ static void ProcessNaNsHelper(double n, double m, double expected) {
 TEST(process_nans_double) {
   INIT_V8();
   // Make sure that NaN propagation works correctly.
-  double sn = bit_cast<double>(0x7FF5555511111111);
-  double sm = bit_cast<double>(0x7FF5555522222222);
-  double qn = bit_cast<double>(0x7FFAAAAA11111111);
-  double qm = bit_cast<double>(0x7FFAAAAA22222222);
+  double sn = base::bit_cast<double>(0x7FF5555511111111);
+  double sm = base::bit_cast<double>(0x7FF5555522222222);
+  double qn = base::bit_cast<double>(0x7FFAAAAA11111111);
+  double qm = base::bit_cast<double>(0x7FFAAAAA22222222);
   CHECK(IsSignallingNaN(sn));
   CHECK(IsSignallingNaN(sm));
   CHECK(IsQuietNaN(qn));
   CHECK(IsQuietNaN(qm));
 
   // The input NaNs after passing through ProcessNaN.
-  double sn_proc = bit_cast<double>(0x7FFD555511111111);
-  double sm_proc = bit_cast<double>(0x7FFD555522222222);
+  double sn_proc = base::bit_cast<double>(0x7FFD555511111111);
+  double sm_proc = base::bit_cast<double>(0x7FFD555522222222);
   double qn_proc = qn;
   double qm_proc = qm;
   CHECK(IsQuietNaN(sn_proc));
@@ -14444,18 +14481,18 @@ static void ProcessNaNsHelper(float n, float m, float expected) {
 TEST(process_nans_float) {
   INIT_V8();
   // Make sure that NaN propagation works correctly.
-  float sn = bit_cast<float>(0x7F951111);
-  float sm = bit_cast<float>(0x7F952222);
-  float qn = bit_cast<float>(0x7FEA1111);
-  float qm = bit_cast<float>(0x7FEA2222);
+  float sn = base::bit_cast<float>(0x7F951111);
+  float sm = base::bit_cast<float>(0x7F952222);
+  float qn = base::bit_cast<float>(0x7FEA1111);
+  float qm = base::bit_cast<float>(0x7FEA2222);
   CHECK(IsSignallingNaN(sn));
   CHECK(IsSignallingNaN(sm));
   CHECK(IsQuietNaN(qn));
   CHECK(IsQuietNaN(qm));
 
   // The input NaNs after passing through ProcessNaN.
-  float sn_proc = bit_cast<float>(0x7FD51111);
-  float sm_proc = bit_cast<float>(0x7FD52222);
+  float sn_proc = base::bit_cast<float>(0x7FD51111);
+  float sm_proc = base::bit_cast<float>(0x7FD52222);
   float qn_proc = qn;
   float qm_proc = qm;
   CHECK(IsQuietNaN(sn_proc));
@@ -14536,11 +14573,11 @@ static void DefaultNaNHelper(float n, float m, float a) {
   RUN();
 
   if (test_1op) {
-    uint32_t n_raw = bit_cast<uint32_t>(n);
+    uint32_t n_raw = base::bit_cast<uint32_t>(n);
     uint32_t sign_mask = static_cast<uint32_t>(kSSignMask);
     CHECK_EQUAL_FP32(n, s10);
-    CHECK_EQUAL_FP32(bit_cast<float>(n_raw & ~sign_mask), s11);
-    CHECK_EQUAL_FP32(bit_cast<float>(n_raw ^ sign_mask), s12);
+    CHECK_EQUAL_FP32(base::bit_cast<float>(n_raw & ~sign_mask), s11);
+    CHECK_EQUAL_FP32(base::bit_cast<float>(n_raw ^ sign_mask), s12);
     CHECK_EQUAL_FP32(kFP32DefaultNaN, s13);
     CHECK_EQUAL_FP32(kFP32DefaultNaN, s14);
     CHECK_EQUAL_FP32(kFP32DefaultNaN, s15);
@@ -14565,12 +14602,12 @@ static void DefaultNaNHelper(float n, float m, float a) {
 
 TEST(default_nan_float) {
   INIT_V8();
-  float sn = bit_cast<float>(0x7F951111);
-  float sm = bit_cast<float>(0x7F952222);
-  float sa = bit_cast<float>(0x7F95AAAA);
-  float qn = bit_cast<float>(0x7FEA1111);
-  float qm = bit_cast<float>(0x7FEA2222);
-  float qa = bit_cast<float>(0x7FEAAAAA);
+  float sn = base::bit_cast<float>(0x7F951111);
+  float sm = base::bit_cast<float>(0x7F952222);
+  float sa = base::bit_cast<float>(0x7F95AAAA);
+  float qn = base::bit_cast<float>(0x7FEA1111);
+  float qm = base::bit_cast<float>(0x7FEA2222);
+  float qa = base::bit_cast<float>(0x7FEAAAAA);
   CHECK(IsSignallingNaN(sn));
   CHECK(IsSignallingNaN(sm));
   CHECK(IsSignallingNaN(sa));
@@ -14661,10 +14698,10 @@ static void DefaultNaNHelper(double n, double m, double a) {
   RUN();
 
   if (test_1op) {
-    uint64_t n_raw = bit_cast<uint64_t>(n);
+    uint64_t n_raw = base::bit_cast<uint64_t>(n);
     CHECK_EQUAL_FP64(n, d10);
-    CHECK_EQUAL_FP64(bit_cast<double>(n_raw & ~kDSignMask), d11);
-    CHECK_EQUAL_FP64(bit_cast<double>(n_raw ^ kDSignMask), d12);
+    CHECK_EQUAL_FP64(base::bit_cast<double>(n_raw & ~kDSignMask), d11);
+    CHECK_EQUAL_FP64(base::bit_cast<double>(n_raw ^ kDSignMask), d12);
     CHECK_EQUAL_FP64(kFP64DefaultNaN, d13);
     CHECK_EQUAL_FP64(kFP64DefaultNaN, d14);
     CHECK_EQUAL_FP64(kFP64DefaultNaN, d15);
@@ -14689,12 +14726,12 @@ static void DefaultNaNHelper(double n, double m, double a) {
 
 TEST(default_nan_double) {
   INIT_V8();
-  double sn = bit_cast<double>(0x7FF5555511111111);
-  double sm = bit_cast<double>(0x7FF5555522222222);
-  double sa = bit_cast<double>(0x7FF55555AAAAAAAA);
-  double qn = bit_cast<double>(0x7FFAAAAA11111111);
-  double qm = bit_cast<double>(0x7FFAAAAA22222222);
-  double qa = bit_cast<double>(0x7FFAAAAAAAAAAAAA);
+  double sn = base::bit_cast<double>(0x7FF5555511111111);
+  double sm = base::bit_cast<double>(0x7FF5555522222222);
+  double sa = base::bit_cast<double>(0x7FF55555AAAAAAAA);
+  double qn = base::bit_cast<double>(0x7FFAAAAA11111111);
+  double qm = base::bit_cast<double>(0x7FFAAAAA22222222);
+  double qa = base::bit_cast<double>(0x7FFAAAAAAAAAAAAA);
   CHECK(IsSignallingNaN(sn));
   CHECK(IsSignallingNaN(sm));
   CHECK(IsSignallingNaN(sa));
