diff --git a/src/maglev/arm64/maglev-ir-arm64.cc b/src/maglev/arm64/maglev-ir-arm64.cc
index baf4f273d29..e30c65b0c2b 100644
--- a/src/maglev/arm64/maglev-ir-arm64.cc
+++ b/src/maglev/arm64/maglev-ir-arm64.cc
@@ -212,85 +212,6 @@ void CheckNumber::GenerateCode(MaglevAssembler* masm,
 }
 
 int CheckedObjectToIndex::MaxCallStackArgs() const { return 0; }
-void CheckedObjectToIndex::SetValueLocationConstraints() {
-  UseRegister(object_input());
-  DefineAsRegister(this);
-  set_double_temporaries_needed(1);
-}
-void CheckedObjectToIndex::GenerateCode(MaglevAssembler* masm,
-                                        const ProcessingState& state) {
-  Register object = ToRegister(object_input());
-  Register result_reg = ToRegister(result());
-
-  ZoneLabelRef done(masm);
-  Condition is_smi = __ CheckSmi(object);
-  __ JumpToDeferredIf(
-      NegateCondition(is_smi),
-      [](MaglevAssembler* masm, Register object, Register result_reg,
-         ZoneLabelRef done, CheckedObjectToIndex* node) {
-        Label check_string;
-        MaglevAssembler::ScratchRegisterScope temps(masm);
-        Register scratch = temps.Acquire();
-        __ LoadMap(scratch, object);
-        __ CompareRoot(scratch, RootIndex::kHeapNumberMap);
-        __ B(&check_string, ne);
-
-        // Heap Number.
-        {
-          DoubleRegister number_value = temps.AcquireDouble();
-          DoubleRegister converted_back = temps.AcquireDouble();
-          __ Ldr(number_value,
-                 FieldMemOperand(object, HeapNumber::kValueOffset));
-          // Convert the input float64 value to int32.
-          __ TruncateDoubleToInt32(result_reg, number_value);
-          // Convert that int32 value back to float64.
-          __ Scvtf(converted_back, result_reg);
-          // Check that the result of the float64->int32->float64 is equal to
-          // the input (i.e. that the conversion didn't truncate.
-          __ Fcmp(number_value, converted_back);
-          __ B(*done, eq);
-          __ EmitEagerDeopt(node, DeoptimizeReason::kNotInt32);
-        }
-
-        // String.
-        __ Bind(&check_string);
-        __ CompareInstanceTypeRange(scratch, scratch, FIRST_STRING_TYPE,
-                                    LAST_STRING_TYPE);
-        // The IC will go generic if it encounters something other than a
-        // Number or String key.
-        __ EmitEagerDeoptIf(kUnsignedGreaterThan, DeoptimizeReason::kNotInt32,
-                            node);
-
-        {
-          // TODO(verwaest): Load the cached number from the string hash.
-          RegisterSnapshot snapshot = node->register_snapshot();
-          snapshot.live_registers.clear(result_reg);
-          DCHECK(!snapshot.live_tagged_registers.has(result_reg));
-          {
-            SaveRegisterStateForCall save_register_state(masm, snapshot);
-            AllowExternalCallThatCantCauseGC scope(masm);
-            __ Move(x0, object);
-            __ CallCFunction(
-                ExternalReference::string_to_array_index_function(), 1);
-            // No need for safepoint since this is a fast C call.
-            __ Move(result_reg, kReturnRegister0);
-          }
-          __ Cmp(result_reg, Immediate(0));
-          __ B(*done, ge);
-          __ EmitEagerDeopt(node, DeoptimizeReason::kNotInt32);
-        }
-      },
-      object, result_reg, done, this);
-
-  // If we didn't enter the deferred block, we're a Smi.
-  if (result_reg == object) {
-    __ SmiToInt32(result_reg);
-  } else {
-    __ SmiToInt32(result_reg, object);
-  }
-
-  __ Bind(*done);
-}
 
 void Int32ToNumber::SetValueLocationConstraints() {
   UseRegister(input());
