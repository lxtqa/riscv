diff --git a/src/maglev/x64/maglev-ir-x64.cc b/src/maglev/x64/maglev-ir-x64.cc
index a349c6dc560..a41213fcc6d 100644
--- a/src/maglev/x64/maglev-ir-x64.cc
+++ b/src/maglev/x64/maglev-ir-x64.cc
@@ -173,83 +173,6 @@ void CheckedInternalizedString::GenerateCode(MaglevAssembler* masm,
 int CheckedObjectToIndex::MaxCallStackArgs() const {
   return MaglevAssembler::ArgumentStackSlotsForCFunctionCall(1);
 }
-void CheckedObjectToIndex::SetValueLocationConstraints() {
-  UseRegister(object_input());
-  DefineAsRegister(this);
-  set_double_temporaries_needed(1);
-}
-void CheckedObjectToIndex::GenerateCode(MaglevAssembler* masm,
-                                        const ProcessingState& state) {
-  Register object = ToRegister(object_input());
-  Register result_reg = ToRegister(result());
-
-  ZoneLabelRef done(masm);
-  Condition is_smi = __ CheckSmi(object);
-  __ JumpToDeferredIf(
-      NegateCondition(is_smi),
-      [](MaglevAssembler* masm, Register object, Register result_reg,
-         ZoneLabelRef done, CheckedObjectToIndex* node) {
-        Label check_string;
-        __ LoadMap(kScratchRegister, object);
-        __ CompareRoot(kScratchRegister, RootIndex::kHeapNumberMap);
-        __ j(not_equal, &check_string, Label::kNear);
-        // Heap Number.
-        {
-          MaglevAssembler::ScratchRegisterScope temps(masm);
-          DoubleRegister number_value = temps.AcquireDouble();
-          DoubleRegister converted_back = kScratchDoubleReg;
-          // Load the heap number value into a double register.
-          __ Movsd(number_value,
-                   FieldOperand(object, HeapNumber::kValueOffset));
-          // Convert the input float64 value to int32.
-          __ Cvttsd2si(result_reg, number_value);
-          // Convert that int32 value back to float64.
-          __ Cvtlsi2sd(converted_back, result_reg);
-          // Check that the result of the float64->int32->float64 is equal to
-          // the input (i.e. that the conversion didn't truncate).
-          __ Ucomisd(number_value, converted_back);
-          __ EmitEagerDeoptIf(parity_even, DeoptimizeReason::kNotInt32, node);
-          __ j(equal, *done);
-          __ EmitEagerDeopt(node, DeoptimizeReason::kNotInt32);
-        }
-
-        __ bind(&check_string);
-        __ CmpInstanceTypeRange(kScratchRegister, kScratchRegister,
-                                FIRST_STRING_TYPE, LAST_STRING_TYPE);
-        // The IC will go generic if it encounters something other than a
-        // Number or String key.
-        __ EmitEagerDeoptIf(above, DeoptimizeReason::kNotInt32, node);
-        {
-          // TODO(verwaest): Load the cached number from the string hash.
-          RegisterSnapshot snapshot = node->register_snapshot();
-          snapshot.live_registers.clear(result_reg);
-          DCHECK(!snapshot.live_tagged_registers.has(result_reg));
-          {
-            SaveRegisterStateForCall save_register_state(masm, snapshot);
-            AllowExternalCallThatCantCauseGC scope(masm);
-            __ PrepareCallCFunction(1);
-            __ Move(arg_reg_1, object);
-            __ CallCFunction(
-                ExternalReference::string_to_array_index_function(), 1);
-            // No need for safepoint since this is a fast C call.
-            __ Move(result_reg, kReturnRegister0);
-          }
-          __ cmpl(result_reg, Immediate(0));
-          __ j(greater_equal, *done);
-          __ EmitEagerDeopt(node, DeoptimizeReason::kNotInt32);
-        }
-      },
-      object, result_reg, done, this);
-
-  // If we didn't enter the deferred block, we're a Smi.
-  if (result_reg == object) {
-    __ SmiToInt32(result_reg);
-  } else {
-    __ SmiToInt32(result_reg, object);
-  }
-
-  __ bind(*done);
-}
 
 int BuiltinStringFromCharCode::MaxCallStackArgs() const {
   return AllocateDescriptor::GetStackParameterCount();
-- 
2.35.1

