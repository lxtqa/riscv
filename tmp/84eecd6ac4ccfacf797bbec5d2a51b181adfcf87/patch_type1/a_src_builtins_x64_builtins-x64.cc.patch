diff --git a/src/builtins/x64/builtins-x64.cc b/src/builtins/x64/builtins-x64.cc
index 4278b91e447..ed40c2cb415 100644
--- a/src/builtins/x64/builtins-x64.cc
+++ b/src/builtins/x64/builtins-x64.cc
@@ -3590,31 +3590,6 @@ void Builtins::Generate_WasmToJsWrapperAsm(MacroAssembler* masm) {
   __ TailCallBuiltin(Builtin::kWasmToJsWrapperCSA);
 }
 
-void Builtins::Generate_WasmTrapHandlerLandingPad(MacroAssembler* masm) {
-  // This builtin gets called from the WebAssembly trap handler when an
-  // out-of-bounds memory access happened or when a null reference gets
-  // dereferenced. This builtin then fakes a call from the instruction that
-  // triggered the signal to the runtime. This is done by setting a return
-  // address and then jumping to a builtin which will call further to the
-  // runtime.
-  // As the return address we use the fault address + 1. Using the fault address
-  // itself would cause problems with safepoints and source positions.
-  //
-  // The problem with safepoints is that a safepoint has to be registered at the
-  // return address, and that at most one safepoint should be registered at a
-  // location. However, there could already be a safepoint registered at the
-  // fault address if the fault address is the return address of a call.
-  //
-  // The problem with source positions is that the stack trace code looks for
-  // the source position of a call before the return address. The source
-  // position of the faulty memory access, however, is recorded at the fault
-  // address. Therefore the stack trace code would not find the source position
-  // if we used the fault address as the return address.
-  __ incq(kWasmTrapHandlerFaultAddressRegister);
-  __ pushq(kWasmTrapHandlerFaultAddressRegister);
-  __ TailCallBuiltin(Builtin::kWasmTrapHandlerThrowTrap);
-}
-
 void Builtins::Generate_WasmSuspend(MacroAssembler* masm) {
   // Set up the stackframe.
   __ EnterFrame(StackFrame::STACK_SWITCH);
