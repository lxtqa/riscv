diff --git a/src/execution/s390/simulator-s390.h b/src/execution/s390/simulator-s390.h
index b7ccf1007cd..51af2a97216 100644
--- a/src/execution/s390/simulator-s390.h
+++ b/src/execution/s390/simulator-s390.h
@@ -160,8 +160,12 @@ class Simulator : public SimulatorBase {
 
   Address get_sp() const { return static_cast<Address>(get_register(sp)); }
 
-  // Accessor to the internal simulator stack area.
+  // Accessor to the internal simulator stack area. Adds a safety
+  // margin to prevent overflows.
   uintptr_t StackLimit(uintptr_t c_limit) const;
+  // Return current stack view, without additional safety margins.
+  // Users, for example wasm::StackMemory, can add their own.
+  base::Vector<uint8_t> GetCurrentStackView() const;
 
   // Executes S390 instructions until the PC reaches end_sim_pc.
   void Execute();
@@ -418,8 +422,20 @@ class Simulator : public SimulatorBase {
   intptr_t special_reg_pc_;
 
   // Simulator support.
-  char* stack_;
-  static const size_t stack_protection_size_ = 256 * kSystemPointerSize;
+  uint8_t* stack_;
+  static const size_t kStackProtectionSize = 256 * kSystemPointerSize;
+  // This includes a protection margin at each end of the stack area.
+  static size_t AllocatedStackSize() {
+#if V8_TARGET_ARCH_S390X
+    size_t stack_size = v8_flags.sim_stack_size * KB;
+#else
+    size_t stack_size = MB;  // allocate 1MB for stack
+#endif
+    return stack_size + (2 * kStackProtectionSize);
+  }
+  static size_t UsableStackSize() {
+    return AllocatedStackSize() - kStackProtectionSize;
+  }
   bool pc_modified_;
   int64_t icount_;
 
-- 
2.35.1

