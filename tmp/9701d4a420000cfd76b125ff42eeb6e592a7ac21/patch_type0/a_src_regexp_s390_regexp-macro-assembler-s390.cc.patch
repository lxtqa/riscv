diff --git a/src/regexp/s390/regexp-macro-assembler-s390.cc b/src/regexp/s390/regexp-macro-assembler-s390.cc
index 61a5e6e6421..83092e53365 100644
--- a/src/regexp/s390/regexp-macro-assembler-s390.cc
+++ b/src/regexp/s390/regexp-macro-assembler-s390.cc
@@ -198,7 +198,8 @@ void RegExpMacroAssemblerS390::CheckCharacter(uint32_t c, Label* on_equal) {
   BranchOrBacktrack(eq, on_equal);
 }
 
-void RegExpMacroAssemblerS390::CheckCharacterGT(uc16 limit, Label* on_greater) {
+void RegExpMacroAssemblerS390::CheckCharacterGT(base::uc16 limit,
+                                                Label* on_greater) {
   __ CmpU64(current_character(), Operand(limit));
   BranchOrBacktrack(gt, on_greater);
 }
@@ -220,7 +221,8 @@ void RegExpMacroAssemblerS390::CheckNotAtStart(int cp_offset,
   BranchOrBacktrack(ne, on_not_at_start);
 }
 
-void RegExpMacroAssemblerS390::CheckCharacterLT(uc16 limit, Label* on_less) {
+void RegExpMacroAssemblerS390::CheckCharacterLT(base::uc16 limit,
+                                                Label* on_less) {
   __ CmpU64(current_character(), Operand(limit));
   BranchOrBacktrack(lt, on_less);
 }
@@ -466,7 +468,7 @@ void RegExpMacroAssemblerS390::CheckNotCharacterAfterAnd(unsigned c,
 }
 
 void RegExpMacroAssemblerS390::CheckNotCharacterAfterMinusAnd(
-    uc16 c, uc16 minus, uc16 mask, Label* on_not_equal) {
+    base::uc16 c, base::uc16 minus, base::uc16 mask, Label* on_not_equal) {
   DCHECK_GT(String::kMaxUtf16CodeUnit, minus);
   __ lay(r2, MemOperand(current_character(), -minus));
   __ And(r2, Operand(mask));
@@ -476,7 +478,8 @@ void RegExpMacroAssemblerS390::CheckNotCharacterAfterMinusAnd(
   BranchOrBacktrack(ne, on_not_equal);
 }
 
-void RegExpMacroAssemblerS390::CheckCharacterInRange(uc16 from, uc16 to,
+void RegExpMacroAssemblerS390::CheckCharacterInRange(base::uc16 from,
+                                                     base::uc16 to,
                                                      Label* on_in_range) {
   __ lay(r2, MemOperand(current_character(), -from));
   __ CmpU64(r2, Operand(to - from));
@@ -484,7 +487,7 @@ void RegExpMacroAssemblerS390::CheckCharacterInRange(uc16 from, uc16 to,
 }
 
 void RegExpMacroAssemblerS390::CheckCharacterNotInRange(
-    uc16 from, uc16 to, Label* on_not_in_range) {
+    base::uc16 from, base::uc16 to, Label* on_not_in_range) {
   __ lay(r2, MemOperand(current_character(), -from));
   __ CmpU64(r2, Operand(to - from));
   BranchOrBacktrack(gt, on_not_in_range);  // Unsigned higher condition.
@@ -504,7 +507,7 @@ void RegExpMacroAssemblerS390::CheckBitInTable(Handle<ByteArray> table,
   BranchOrBacktrack(ne, on_bit_set);
 }
 
-bool RegExpMacroAssemblerS390::CheckSpecialCharacterClass(uc16 type,
+bool RegExpMacroAssemblerS390::CheckSpecialCharacterClass(base::uc16 type,
                                                           Label* on_no_match) {
   // Range checks (c in min..max) are generally implemented by an unsigned
   // (c - min) <= (max - min) check
