diff --git a/src/maglev/x64/maglev-assembler-x64-inl.h b/src/maglev/x64/maglev-assembler-x64-inl.h
index 48c7fc0bcec..c2a00efc7c0 100644
--- a/src/maglev/x64/maglev-assembler-x64-inl.h
+++ b/src/maglev/x64/maglev-assembler-x64-inl.h
@@ -197,23 +197,6 @@ inline Condition MaglevAssembler::IsRootConstant(Input input,
   return equal;
 }
 
-void MaglevAssembler::Branch(Condition condition, BasicBlock* if_true,
-                             BasicBlock* if_false, BasicBlock* next_block) {
-  // We don't have any branch probability information, so try to jump
-  // over whatever the next block emitted is.
-  if (if_false == next_block) {
-    // Jump over the false block if true, otherwise fall through into it.
-    j(condition, if_true->label());
-  } else {
-    // Jump to the false block if true.
-    j(NegateCondition(condition), if_false->label());
-    // Jump to the true block if it's not the next block.
-    if (if_true != next_block) {
-      jmp(if_true->label());
-    }
-  }
-}
-
 inline MemOperand MaglevAssembler::GetStackSlot(
     const compiler::AllocatedOperand& operand) {
   return MemOperand(rbp, GetFramePointerOffsetForStackSlot(operand));
@@ -410,16 +393,20 @@ inline void MaglevAssembler::CompareInt32(Register src1, Register src2) {
   cmpl(src1, src2);
 }
 
-inline void MaglevAssembler::Jump(Label* target) { jmp(target); }
+inline void MaglevAssembler::Jump(Label* target, Label::Distance distance) {
+  jmp(target, distance);
+}
 
-inline void MaglevAssembler::JumpIf(Condition cond, Label* target) {
-  j(cond, target);
+inline void MaglevAssembler::JumpIf(Condition cond, Label* target,
+                                    Label::Distance distance) {
+  j(cond, target, distance);
 }
 
 inline void MaglevAssembler::JumpIfTaggedEqual(Register r1, Register r2,
-                                               Label* target) {
+                                               Label* target,
+                                               Label::Distance distance) {
   cmp_tagged(r1, r2);
-  j(equal, target);
+  j(equal, target, distance);
 }
 
 inline void MaglevAssembler::Pop(Register dst) { MacroAssembler::Pop(dst); }
