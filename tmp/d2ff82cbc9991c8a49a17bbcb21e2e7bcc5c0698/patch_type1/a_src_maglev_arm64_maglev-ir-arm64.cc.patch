diff --git a/src/maglev/arm64/maglev-ir-arm64.cc b/src/maglev/arm64/maglev-ir-arm64.cc
index 9099027dad2..7a8c31e3657 100644
--- a/src/maglev/arm64/maglev-ir-arm64.cc
+++ b/src/maglev/arm64/maglev-ir-arm64.cc
@@ -2528,106 +2528,6 @@ void TestUndetectable::GenerateCode(MaglevAssembler* masm,
   __ bind(&done);
 }
 
-void TestTypeOf::SetValueLocationConstraints() {
-  UseRegister(value());
-  DefineAsRegister(this);
-}
-void TestTypeOf::GenerateCode(MaglevAssembler* masm,
-                              const ProcessingState& state) {
-  using LiteralFlag = interpreter::TestTypeOfFlags::LiteralFlag;
-  Register object = ToRegister(value());
-  // Use return register as temporary if needed. Be careful: {object} and
-  // {scratch} could alias (which means that {object} should be considered dead
-  // once {scratch} has been written to).
-  Register scratch = ToRegister(result());
-  Label is_true, is_false, done;
-  switch (literal_) {
-    case LiteralFlag::kNumber:
-      __ JumpIfSmi(object, &is_true);
-      __ Ldr(scratch.W(), FieldMemOperand(object, HeapObject::kMapOffset));
-      __ CompareRoot(scratch.W(), RootIndex::kHeapNumberMap);
-      __ B(ne, &is_false);
-      break;
-    case LiteralFlag::kString:
-      __ JumpIfSmi(object, &is_false);
-      __ LoadMap(scratch, object);
-      __ CompareInstanceTypeRange(scratch, scratch, FIRST_STRING_TYPE,
-                                  LAST_STRING_TYPE);
-      __ B(hi, &is_false);
-      break;
-    case LiteralFlag::kSymbol:
-      __ JumpIfSmi(object, &is_false);
-      __ LoadMap(scratch, object);
-      __ CompareInstanceType(scratch, scratch, SYMBOL_TYPE);
-      __ B(ne, &is_false);
-      break;
-    case LiteralFlag::kBoolean:
-      __ CompareRoot(object, RootIndex::kTrueValue);
-      __ B(eq, &is_true);
-      __ CompareRoot(object, RootIndex::kFalseValue);
-      __ B(ne, &is_false);
-      break;
-    case LiteralFlag::kBigInt:
-      __ JumpIfSmi(object, &is_false);
-      __ LoadMap(scratch, object);
-      __ CompareInstanceType(scratch, scratch, BIGINT_TYPE);
-      __ B(ne, &is_false);
-      break;
-    case LiteralFlag::kUndefined: {
-      MaglevAssembler::ScratchRegisterScope temps(masm);
-      Register map = temps.Acquire();
-      __ JumpIfSmi(object, &is_false);
-      // Check it has the undetectable bit set and it is not null.
-      __ LoadMap(map, object);
-      __ Ldr(map.W(), FieldMemOperand(map, Map::kBitFieldOffset));
-      __ TestAndBranchIfAllClear(map.W(), Map::Bits1::IsUndetectableBit::kMask,
-                                 &is_false);
-      __ CompareRoot(object, RootIndex::kNullValue);
-      __ B(eq, &is_false);
-      break;
-    }
-    case LiteralFlag::kFunction:
-      __ JumpIfSmi(object, &is_false);
-      // Check if callable bit is set and not undetectable.
-      __ LoadMap(scratch, object);
-      __ Ldr(scratch.W(), FieldMemOperand(scratch, Map::kBitFieldOffset));
-      __ And(scratch.W(), scratch.W(),
-             Map::Bits1::IsUndetectableBit::kMask |
-                 Map::Bits1::IsCallableBit::kMask);
-      __ Cmp(scratch.W(), Map::Bits1::IsCallableBit::kMask);
-      __ B(ne, &is_false);
-      break;
-    case LiteralFlag::kObject:
-      __ JumpIfSmi(object, &is_false);
-      // If the object is null then return true.
-      __ CompareRoot(object, RootIndex::kNullValue);
-      __ B(eq, &is_true);
-      // Check if the object is a receiver type,
-      __ LoadMap(scratch, object);
-      {
-        MaglevAssembler::ScratchRegisterScope temps(masm);
-        __ CompareInstanceType(scratch, temps.Acquire(),
-                               FIRST_JS_RECEIVER_TYPE);
-      }
-      __ B(lt, &is_false);
-      // ... and is not undefined (undetectable) nor callable.
-      __ Ldr(scratch.W(), FieldMemOperand(scratch, Map::kBitFieldOffset));
-      __ TestAndBranchIfAnySet(scratch.W(),
-                               Map::Bits1::IsUndetectableBit::kMask |
-                                   Map::Bits1::IsCallableBit::kMask,
-                               &is_false);
-      break;
-    case LiteralFlag::kOther:
-      UNREACHABLE();
-  }
-  __ bind(&is_true);
-  __ LoadRoot(ToRegister(result()), RootIndex::kTrueValue);
-  __ B(&done);
-  __ bind(&is_false);
-  __ LoadRoot(ToRegister(result()), RootIndex::kFalseValue);
-  __ bind(&done);
-}
-
 int ThrowIfNotSuperConstructor::MaxCallStackArgs() const { return 2; }
 void ThrowIfNotSuperConstructor::SetValueLocationConstraints() {
   UseRegister(constructor());
