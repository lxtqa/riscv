diff --git a/src/maglev/x64/maglev-ir-x64.cc b/src/maglev/x64/maglev-ir-x64.cc
index 1376e503fd3..72a465a0eb9 100644
--- a/src/maglev/x64/maglev-ir-x64.cc
+++ b/src/maglev/x64/maglev-ir-x64.cc
@@ -2220,100 +2220,6 @@ void TestUndetectable::GenerateCode(MaglevAssembler* masm,
   __ bind(&done);
 }
 
-void TestTypeOf::SetValueLocationConstraints() {
-  UseRegister(value());
-  DefineAsRegister(this);
-}
-void TestTypeOf::GenerateCode(MaglevAssembler* masm,
-                              const ProcessingState& state) {
-  using LiteralFlag = interpreter::TestTypeOfFlags::LiteralFlag;
-  Register object = ToRegister(value());
-  // Use return register as temporary if needed. Be careful: {object} and {tmp}
-  // could alias (which means that {object} should be considered dead once {tmp}
-  // has been written to).
-  Register tmp = ToRegister(result());
-  Label is_true, is_false, done;
-  switch (literal_) {
-    case LiteralFlag::kNumber:
-      __ JumpIfSmi(object, &is_true, Label::kNear);
-      __ CompareRoot(FieldOperand(object, HeapObject::kMapOffset),
-                     RootIndex::kHeapNumberMap);
-      __ j(not_equal, &is_false, Label::kNear);
-      break;
-    case LiteralFlag::kString:
-      __ JumpIfSmi(object, &is_false, Label::kNear);
-      __ LoadMap(tmp, object);
-      __ cmpw(FieldOperand(tmp, Map::kInstanceTypeOffset),
-              Immediate(FIRST_NONSTRING_TYPE));
-      __ j(greater_equal, &is_false, Label::kNear);
-      break;
-    case LiteralFlag::kSymbol:
-      __ JumpIfSmi(object, &is_false, Label::kNear);
-      __ LoadMap(tmp, object);
-      __ cmpw(FieldOperand(tmp, Map::kInstanceTypeOffset),
-              Immediate(SYMBOL_TYPE));
-      __ j(not_equal, &is_false, Label::kNear);
-      break;
-    case LiteralFlag::kBoolean:
-      __ CompareRoot(object, RootIndex::kTrueValue);
-      __ j(equal, &is_true, Label::kNear);
-      __ CompareRoot(object, RootIndex::kFalseValue);
-      __ j(not_equal, &is_false, Label::kNear);
-      break;
-    case LiteralFlag::kBigInt:
-      __ JumpIfSmi(object, &is_false, Label::kNear);
-      __ LoadMap(tmp, object);
-      __ cmpw(FieldOperand(tmp, Map::kInstanceTypeOffset),
-              Immediate(BIGINT_TYPE));
-      __ j(not_equal, &is_false, Label::kNear);
-      break;
-    case LiteralFlag::kUndefined:
-      __ JumpIfSmi(object, &is_false, Label::kNear);
-      // Check it has the undetectable bit set and it is not null.
-      __ LoadMap(kScratchRegister, object);
-      __ testl(FieldOperand(kScratchRegister, Map::kBitFieldOffset),
-               Immediate(Map::Bits1::IsUndetectableBit::kMask));
-      __ j(zero, &is_false, Label::kNear);
-      __ CompareRoot(object, RootIndex::kNullValue);
-      __ j(equal, &is_false, Label::kNear);
-      break;
-    case LiteralFlag::kFunction:
-      __ JumpIfSmi(object, &is_false, Label::kNear);
-      // Check if callable bit is set and not undetectable.
-      __ LoadMap(tmp, object);
-      __ movl(tmp, FieldOperand(tmp, Map::kBitFieldOffset));
-      __ andl(tmp, Immediate(Map::Bits1::IsUndetectableBit::kMask |
-                             Map::Bits1::IsCallableBit::kMask));
-      __ cmpl(tmp, Immediate(Map::Bits1::IsCallableBit::kMask));
-      __ j(not_equal, &is_false, Label::kNear);
-      break;
-    case LiteralFlag::kObject:
-      __ JumpIfSmi(object, &is_false, Label::kNear);
-      // If the object is null then return true.
-      __ CompareRoot(object, RootIndex::kNullValue);
-      __ j(equal, &is_true, Label::kNear);
-      // Check if the object is a receiver type,
-      __ LoadMap(tmp, object);
-      __ cmpw(FieldOperand(tmp, Map::kInstanceTypeOffset),
-              Immediate(FIRST_JS_RECEIVER_TYPE));
-      __ j(less, &is_false, Label::kNear);
-      // ... and is not undefined (undetectable) nor callable.
-      __ testl(FieldOperand(tmp, Map::kBitFieldOffset),
-               Immediate(Map::Bits1::IsUndetectableBit::kMask |
-                         Map::Bits1::IsCallableBit::kMask));
-      __ j(not_zero, &is_false, Label::kNear);
-      break;
-    case LiteralFlag::kOther:
-      UNREACHABLE();
-  }
-  __ bind(&is_true);
-  __ LoadRoot(ToRegister(result()), RootIndex::kTrueValue);
-  __ jmp(&done, Label::kNear);
-  __ bind(&is_false);
-  __ LoadRoot(ToRegister(result()), RootIndex::kFalseValue);
-  __ bind(&done);
-}
-
 int ToObject::MaxCallStackArgs() const {
   using D = CallInterfaceDescriptorFor<Builtin::kToObject>::type;
   return D::GetStackParameterCount();
-- 
2.35.1

