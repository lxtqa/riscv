diff --git a/src/builtins/ia32/builtins-ia32.cc b/src/builtins/ia32/builtins-ia32.cc
index b3bc91b425d..21cb0bd9392 100644
--- a/src/builtins/ia32/builtins-ia32.cc
+++ b/src/builtins/ia32/builtins-ia32.cc
@@ -3575,183 +3575,6 @@ void Builtins::Generate_DoubleToI(MacroAssembler* masm) {
   __ ret(0);
 }
 
-namespace {
-
-// Generates an Operand for saving parameters after EnterExitFrame.
-Operand ApiParameterOperand(int index) {
-  return Operand(esp, index * kSystemPointerSize);
-}
-
-Operand ExitFrameCallerStackSlotOperand(int index) {
-  return Operand(ebp,
-                 (BuiltinExitFrameConstants::kFixedSlotCountAboveFp + index) *
-                     kSystemPointerSize);
-}
-
-// Calls an API function.  Allocates HandleScope, extracts returned value
-// from handle and propagates exceptions.  Clobbers esi, edi and caller-saved
-// registers.  Restores context.  On return removes
-// *stack_space_operand * kSystemPointerSize or stack_space * kSystemPointerSize
-// (GCed).
-void CallApiFunctionAndReturn(MacroAssembler* masm, bool with_profiling,
-                              Register function_address,
-                              ExternalReference thunk_ref, Register thunk_arg,
-                              int stack_space, Operand* stack_space_operand,
-                              Operand return_value_operand) {
-  ASM_CODE_COMMENT(masm);
-
-  using ER = ExternalReference;
-
-  Isolate* isolate = masm->isolate();
-  MemOperand next_mem_op = __ ExternalReferenceAsOperand(
-      ER::handle_scope_next_address(isolate), no_reg);
-  MemOperand limit_mem_op = __ ExternalReferenceAsOperand(
-      ER::handle_scope_limit_address(isolate), no_reg);
-  MemOperand level_mem_op = __ ExternalReferenceAsOperand(
-      ER::handle_scope_level_address(isolate), no_reg);
-
-  Register return_value = eax;
-  DCHECK(function_address == edx || function_address == eax);
-  // Use scratch as an "opposite" of function_address register.
-  Register scratch = function_address == edx ? ecx : edx;
-
-  // Allocate HandleScope in callee-saved registers.
-  // We will need to restore the HandleScope after the call to the API function,
-  // by allocating it in callee-saved registers it'll be preserved by C code.
-  Register prev_next_address_reg = esi;
-  Register prev_limit_reg = edi;
-
-  DCHECK(!AreAliased(return_value, scratch, prev_next_address_reg,
-                     prev_limit_reg));
-  // function_address and thunk_arg might overlap but this function must not
-  // corrupted them until the call is made (i.e. overlap with return_value is
-  // fine).
-  DCHECK(!AreAliased(function_address,  // incoming parameters
-                     scratch, prev_next_address_reg, prev_limit_reg));
-  DCHECK(!AreAliased(thunk_arg,  // incoming parameters
-                     scratch, prev_next_address_reg, prev_limit_reg));
-  {
-    ASM_CODE_COMMENT_STRING(masm,
-                            "Allocate HandleScope in callee-save registers.");
-    __ add(level_mem_op, Immediate(1));
-    __ mov(prev_next_address_reg, next_mem_op);
-    __ mov(prev_limit_reg, limit_mem_op);
-  }
-
-  Label profiler_or_side_effects_check_enabled, done_api_call;
-  if (with_profiling) {
-    __ RecordComment("Check if profiler or side effects check is enabled");
-    __ cmpb(__ ExternalReferenceAsOperand(ER::execution_mode_address(isolate),
-                                          no_reg),
-            Immediate(0));
-    __ j(not_zero, &profiler_or_side_effects_check_enabled);
-#ifdef V8_RUNTIME_CALL_STATS
-  __ RecordComment("Check if RCS is enabled");
-  __ Move(scratch, Immediate(ER::address_of_runtime_stats_flag()));
-  __ cmp(Operand(scratch, 0), Immediate(0));
-  __ j(not_zero, &profiler_or_side_effects_check_enabled);
-#endif  // V8_RUNTIME_CALL_STATS
-  }
-
-  __ RecordComment("Call the api function directly.");
-  __ call(function_address);
-  __ bind(&done_api_call);
-
-  __ RecordComment("Load the value from ReturnValue");
-  __ mov(return_value, return_value_operand);
-
-  Label promote_scheduled_exception;
-  Label delete_allocated_handles;
-  Label leave_exit_frame;
-
-  {
-    ASM_CODE_COMMENT_STRING(
-        masm,
-        "No more valid handles (the result handle was the last one)."
-        "Restore previous handle scope.");
-    __ mov(next_mem_op, prev_next_address_reg);
-    __ sub(level_mem_op, Immediate(1));
-    __ Assert(above_equal, AbortReason::kInvalidHandleScopeLevel);
-    __ cmp(prev_limit_reg, limit_mem_op);
-    __ j(not_equal, &delete_allocated_handles);
-  }
-
-  __ RecordComment("Leave the API exit frame.");
-  __ bind(&leave_exit_frame);
-  Register stack_space_reg = prev_limit_reg;
-  if (stack_space_operand != nullptr) {
-    DCHECK_EQ(stack_space, 0);
-    __ mov(stack_space_reg, *stack_space_operand);
-  }
-  __ LeaveExitFrame(scratch);
-
-  {
-    ASM_CODE_COMMENT_STRING(masm,
-                            "Check if the function scheduled an exception.");
-    __ mov(scratch, __ ExternalReferenceAsOperand(
-                        ER::scheduled_exception_address(isolate), no_reg));
-    __ CompareRoot(scratch, RootIndex::kTheHoleValue);
-    __ j(not_equal, &promote_scheduled_exception);
-  }
-
-  {
-    ASM_CODE_COMMENT_STRING(masm, "Convert return value");
-    Label finish_return;
-    __ CompareRoot(return_value, RootIndex::kTheHoleValue);
-    __ j(not_equal, &finish_return, Label::kNear);
-    __ LoadRoot(return_value, RootIndex::kUndefinedValue);
-    __ bind(&finish_return);
-  }
-
-  __ AssertJSAny(return_value, scratch,
-                 AbortReason::kAPICallReturnedInvalidObject);
-
-  if (stack_space_operand == nullptr) {
-    DCHECK_NE(stack_space, 0);
-    __ ret(stack_space * kSystemPointerSize);
-  } else {
-    DCHECK_EQ(0, stack_space);
-    __ pop(scratch);
-    // {stack_space_operand} was loaded into {stack_space_reg} above.
-    __ add(esp, stack_space_reg);
-    __ jmp(scratch);
-  }
-
-  if (with_profiling) {
-    ASM_CODE_COMMENT_STRING(masm, "Call the api function via thunk wrapper.");
-    __ bind(&profiler_or_side_effects_check_enabled);
-    // Additional parameter is the address of the actual callback function.
-    MemOperand thunk_arg_mem_op = __ ExternalReferenceAsOperand(
-        ER::api_callback_thunk_argument_address(isolate), no_reg);
-    __ mov(thunk_arg_mem_op, thunk_arg);
-    __ Move(scratch, Immediate(thunk_ref));
-    __ call(scratch);
-    __ jmp(&done_api_call);
-  }
-
-  __ RecordComment("Re-throw by promoting a scheduled exception.");
-  __ bind(&promote_scheduled_exception);
-  __ TailCallRuntime(Runtime::kPromoteScheduledException);
-
-  {
-    ASM_CODE_COMMENT_STRING(
-        masm, "HandleScope limit has changed. Delete allocated extensions.");
-    __ bind(&delete_allocated_handles);
-    __ mov(limit_mem_op, prev_limit_reg);
-    // Save the return value in a callee-save register.
-    Register saved_result = prev_limit_reg;
-    __ mov(saved_result, return_value);
-    __ Move(scratch, Immediate(ER::isolate_address(isolate)));
-    __ mov(Operand(esp, 0), scratch);
-    __ Move(scratch, Immediate(ER::delete_handle_scope_extensions()));
-    __ call(scratch);
-    __ mov(return_value, saved_result);
-    __ jmp(&leave_exit_frame);
-  }
-}
-
-}  // namespace
-
 void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
                                             CallApiCallbackMode mode) {
   // ----------- S t a t e -------------
@@ -3799,7 +3622,6 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   }
   DCHECK(!AreAliased(api_function_address, argc, call_data, callback, holder));
 
-  using FCI = FunctionCallbackInfo<v8::Value>;
   using FCA = FunctionCallbackArguments;
 
   static_assert(FCA::kArgsLength == 6);
@@ -3852,10 +3674,13 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   // The API function takes v8::FunctionCallbackInfo reference, allocate it
   // in non-GCed space of the exit frame.
   static constexpr int kApiArgc = 1;
+  static constexpr int kApiArg0Offset = 0 * kSystemPointerSize;
+  static constexpr int kApiArgsSize = kApiArgc * kSystemPointerSize;
+
   // Allocate v8::FunctionCallbackInfo object and a number of bytes to drop
   // from the stack after the callback in non-GCed space of the exit frame.
   static constexpr int kApiStackSpace = 4;
-  static_assert((kApiStackSpace - 1) * kSystemPointerSize == sizeof(FCI));
+  static_assert((kApiStackSpace - 1) * kSystemPointerSize == FCA::kSize);
   const int exit_frame_params_count =
       mode == CallApiCallbackMode::kGeneric
           ? ApiCallbackExitFrameConstants::kAdditionalParametersCount
@@ -3909,30 +3734,36 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   {
     ASM_CODE_COMMENT_STRING(masm, "Initialize FunctionCallbackInfo");
     // FunctionCallbackInfo::implicit_args_ (points at kHolder as set up above).
-    __ mov(ApiParameterOperand(kApiArgc + 0), holder);
+    __ mov(ExitFrameStackSlotOperand(kApiArgsSize + FCA::kImplicitArgsOffset),
+           holder);
 
     // FunctionCallbackInfo::values_ (points at the first varargs argument
     // passed on the stack).
     __ lea(holder,
            Operand(holder, (FCA::kArgsLength + 1) * kSystemPointerSize));
-    __ mov(ApiParameterOperand(kApiArgc + 1), holder);
+    __ mov(ExitFrameStackSlotOperand(kApiArgsSize + FCA::kValuesOffset),
+           holder);
 
     // FunctionCallbackInfo::length_.
-    __ mov(ApiParameterOperand(kApiArgc + 2), argc);
+    __ mov(ExitFrameStackSlotOperand(kApiArgsSize + FCA::kLengthOffset), argc);
   }
   Register scratch = ReassignRegister(holder);
 
   // We also store the number of bytes to drop from the stack after returning
   // from the API function here.
+  constexpr int kBytesToDropOffset = FCA::kLengthOffset + kSystemPointerSize;
+  static_assert(kBytesToDropOffset ==
+                (kApiStackSpace - 1) * kSystemPointerSize);
   __ lea(scratch, Operand(argc, times_system_pointer_size,
                           (FCA::kArgsLength + 1 /* receiver */ +
                            exit_frame_params_count) *
                               kSystemPointerSize));
-  __ mov(ApiParameterOperand(kApiArgc + 3), scratch);
+  __ mov(ExitFrameStackSlotOperand(kApiArgsSize + kBytesToDropOffset), scratch);
 
   __ RecordComment("v8::FunctionCallback's argument.");
-  __ lea(scratch, ApiParameterOperand(kApiArgc + 0));
-  __ mov(ApiParameterOperand(0), scratch);
+  __ lea(scratch,
+         ExitFrameStackSlotOperand(kApiArgsSize + FCA::kImplicitArgsOffset));
+  __ mov(ExitFrameStackSlotOperand(kApiArg0Offset), scratch);
 
   ExternalReference thunk_ref =
       ExternalReference::invoke_function_callback(mode);
@@ -3943,7 +3774,8 @@ void Builtins::Generate_CallApiCallbackImpl(MacroAssembler* masm,
   Operand return_value_operand = ExitFrameCallerStackSlotOperand(
       FCA::kReturnValueIndex + exit_frame_params_count);
   static constexpr int kUseStackSpaceOperand = 0;
-  Operand stack_space_operand = ApiParameterOperand(kApiArgc + 3);
+  Operand stack_space_operand =
+      ExitFrameStackSlotOperand(kApiArgsSize + kBytesToDropOffset);
 
   const bool with_profiling =
       mode != CallApiCallbackMode::kOptimizedNoProfiling;
@@ -4018,12 +3850,15 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
          FieldOperand(callback, AccessorInfo::kMaybeRedirectedGetterOffset));
 
   // v8::PropertyCallbackInfo::args_ array and name handle.
-  const int kNameOnStackSize = 1;
-  const int kStackUnwindSpace = PCA::kArgsLength + kNameOnStackSize;
+  static constexpr int kNameOnStackSize = 1;
+  static constexpr int kStackUnwindSpace = PCA::kArgsLength + kNameOnStackSize;
 
   // The API function takes a name handle and v8::PropertyCallbackInfo
   // reference, allocate them in non-GCed space of the exit frame.
-  const int kApiArgc = 2;
+  static constexpr int kApiArgc = 2;
+  static constexpr int kApiArg0Offset = 0 * kSystemPointerSize;
+  static constexpr int kApiArg1Offset = 1 * kSystemPointerSize;
+  static constexpr int kApiArgsSize = kApiArgc * kSystemPointerSize;
   // Allocate v8::PropertyCallbackInfo object in non-GCed space of the exit
   // frame.
   static constexpr int kApiStackSpace = 1;
@@ -4037,16 +3872,16 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
 
   __ RecordComment("Create v8::PropertyCallbackInfo object on the stack.");
   // Initialize its args_ field.
-  Operand info_object = ApiParameterOperand(kApiArgc + 0);
+  Operand info_object = ExitFrameStackSlotOperand(kApiArgsSize);
   __ mov(info_object, args_array);
 
   __ RecordComment("Handle<Name>");
   __ sub(args_array, Immediate(kSystemPointerSize));
-  __ mov(ApiParameterOperand(0), args_array);
+  __ mov(ExitFrameStackSlotOperand(kApiArg0Offset), args_array);
   args_array = no_reg;
   __ RecordComment("&v8::PropertyCallbackInfo::args_");
   __ lea(scratch, info_object);
-  __ mov(ApiParameterOperand(1), scratch);
+  __ mov(ExitFrameStackSlotOperand(kApiArg1Offset), scratch);
 
   ExternalReference thunk_ref =
       ExternalReference::invoke_accessor_getter_callback();
