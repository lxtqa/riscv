diff --git a/src/wasm/baseline/s390/liftoff-assembler-s390.h b/src/wasm/baseline/s390/liftoff-assembler-s390.h
index 0b3312eb0b9..b7b7e281a01 100644
--- a/src/wasm/baseline/s390/liftoff-assembler-s390.h
+++ b/src/wasm/baseline/s390/liftoff-assembler-s390.h
@@ -18,26 +18,6 @@ namespace wasm {
 
 namespace liftoff {
 
-inline constexpr bool UseSignedOp(Condition cond) {
-  switch (cond) {
-    case kEqual:
-    case kNotEqual:
-    case kLessThan:
-    case kLessThanEqual:
-    case kGreaterThan:
-    case kGreaterThanEqual:
-      return true;
-    case kUnsignedLessThan:
-    case kUnsignedLessThanEqual:
-    case kUnsignedGreaterThan:
-    case kUnsignedGreaterThanEqual:
-      return false;
-    default:
-      UNREACHABLE();
-  }
-  return false;
-}
-
 //  half
 //  slot        Frame
 //  -----+--------------------+---------------------------
@@ -2106,7 +2086,7 @@ void LiftoffAssembler::emit_cond_jump(Condition cond, Label* label,
                                       ValueKind kind, Register lhs,
                                       Register rhs,
                                       const FreezeCacheState& frozen) {
-  bool use_signed = liftoff::UseSignedOp(cond);
+  bool use_signed = is_signed(cond);
 
   if (rhs != no_reg) {
     switch (kind) {
@@ -2151,19 +2131,19 @@ void LiftoffAssembler::emit_cond_jump(Condition cond, Label* label,
     CmpS32(lhs, Operand::Zero());
   }
 
-  b(cond, label);
+  b(to_condition(cond), label);
 }
 
 void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label* label,
                                            Register lhs, int32_t imm,
                                            const FreezeCacheState& frozen) {
-  bool use_signed = liftoff::UseSignedOp(cond);
+  bool use_signed = is_signed(cond);
   if (use_signed) {
     CmpS32(lhs, Operand(imm));
   } else {
     CmpU32(lhs, Operand(imm));
   }
-  b(cond, label);
+  b(to_condition(cond), label);
 }
 
 #define EMIT_EQZ(test, src) \
@@ -2198,14 +2178,14 @@ void LiftoffAssembler::emit_i32_eqz(Register dst, Register src) {
 
 void LiftoffAssembler::emit_i32_set_cond(Condition cond, Register dst,
                                          Register lhs, Register rhs) {
-  bool use_signed = liftoff::UseSignedOp(cond);
+  bool use_signed = is_signed(cond);
   if (use_signed) {
     CmpS32(lhs, rhs);
   } else {
     CmpU32(lhs, rhs);
   }
 
-  EMIT_SET_CONDITION(dst, cond);
+  EMIT_SET_CONDITION(dst, to_condition(cond));
 }
 
 void LiftoffAssembler::emit_i64_eqz(Register dst, LiftoffRegister src) {
@@ -2215,28 +2195,28 @@ void LiftoffAssembler::emit_i64_eqz(Register dst, LiftoffRegister src) {
 void LiftoffAssembler::emit_i64_set_cond(Condition cond, Register dst,
                                          LiftoffRegister lhs,
                                          LiftoffRegister rhs) {
-  bool use_signed = liftoff::UseSignedOp(cond);
+  bool use_signed = is_signed(cond);
   if (use_signed) {
     CmpS64(lhs.gp(), rhs.gp());
   } else {
     CmpU64(lhs.gp(), rhs.gp());
   }
 
-  EMIT_SET_CONDITION(dst, cond);
+  EMIT_SET_CONDITION(dst, to_condition(cond));
 }
 
 void LiftoffAssembler::emit_f32_set_cond(Condition cond, Register dst,
                                          DoubleRegister lhs,
                                          DoubleRegister rhs) {
   cebr(lhs, rhs);
-  EMIT_SET_CONDITION(dst, cond);
+  EMIT_SET_CONDITION(dst, to_condition(cond));
 }
 
 void LiftoffAssembler::emit_f64_set_cond(Condition cond, Register dst,
                                          DoubleRegister lhs,
                                          DoubleRegister rhs) {
   cdbr(lhs, rhs);
-  EMIT_SET_CONDITION(dst, cond);
+  EMIT_SET_CONDITION(dst, to_condition(cond));
 }
 
 bool LiftoffAssembler::emit_select(LiftoffRegister dst, Register condition,
-- 
2.35.1

