diff --git a/src/baseline/s390/baseline-assembler-s390-inl.h b/src/baseline/s390/baseline-assembler-s390-inl.h
index b183fda1833..bb60ecb44b0 100644
--- a/src/baseline/s390/baseline-assembler-s390-inl.h
+++ b/src/baseline/s390/baseline-assembler-s390-inl.h
@@ -48,31 +48,6 @@ class BaselineAssembler::ScratchRegisterScope {
   int registers_used_;
 };
 
-inline bool IsSignedCondition(Condition cond) {
-  switch (cond) {
-    case kEqual:
-    case kNotEqual:
-    case kLessThan:
-    case kGreaterThan:
-    case kLessThanEqual:
-    case kGreaterThanEqual:
-    case kOverflow:
-    case kNoOverflow:
-    case kZero:
-    case kNotZero:
-      return true;
-
-    case kUnsignedLessThan:
-    case kUnsignedGreaterThan:
-    case kUnsignedLessThanEqual:
-    case kUnsignedGreaterThanEqual:
-      return false;
-
-    default:
-      UNREACHABLE();
-  }
-}
-
 #define __ assm->
 // s390x helper
 template <int width = 64>
@@ -81,19 +56,19 @@ static void JumpIfHelper(MacroAssembler* assm, Condition cc, Register lhs,
   static_assert(width == 64 || width == 32,
                 "only support 64 and 32 bit compare");
   if (width == 64) {
-    if (IsSignedCondition(cc)) {
+    if (is_signed(cc)) {
       __ CmpS64(lhs, rhs);
     } else {
       __ CmpU64(lhs, rhs);
     }
   } else {
-    if (IsSignedCondition(cc)) {
+    if (is_signed(cc)) {
       __ CmpS32(lhs, rhs);
     } else {
       __ CmpU32(lhs, rhs);
     }
   }
-  __ b(check_condition(cc), target);
+  __ b(to_condition(cc), target);
 }
 
 #undef __
@@ -159,18 +134,18 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc,
                                       Label* target, Label::Distance) {
   ASM_CODE_COMMENT(masm_);
   __ AndP(r0, value, Operand(mask));
-  __ b(check_condition(cc), target);
+  __ b(to_condition(cc), target);
 }
 
 void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand& rhs,
                                Label* target, Label::Distance) {
   ASM_CODE_COMMENT(masm_);
-  if (IsSignedCondition(cc)) {
+  if (is_signed(cc)) {
     __ CmpS64(lhs, rhs);
   } else {
     __ CmpU64(lhs, rhs);
   }
-  __ b(check_condition(cc), target);
+  __ b(to_condition(cc), target);
 }
 
 void BaselineAssembler::JumpIfObjectType(Condition cc, Register object,
