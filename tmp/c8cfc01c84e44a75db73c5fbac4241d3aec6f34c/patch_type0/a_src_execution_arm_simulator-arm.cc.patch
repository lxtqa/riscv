diff --git a/src/execution/arm/simulator-arm.cc b/src/execution/arm/simulator-arm.cc
index 9dafdc7d3c..36556c748b 100644
--- a/src/execution/arm/simulator-arm.cc
+++ b/src/execution/arm/simulator-arm.cc
@@ -203,7 +203,8 @@ void ArmDebugger::Debug() {
       disasm::Disassembler dasm(converter);
       // use a reasonably large buffer
       v8::base::EmbeddedVector<char, 256> buffer;
-      dasm.InstructionDecode(buffer, reinterpret_cast<byte*>(sim_->get_pc()));
+      dasm.InstructionDecode(buffer,
+                             reinterpret_cast<uint8_t*>(sim_->get_pc()));
       PrintF("  0x%08x  %s\n", sim_->get_pc(), buffer.begin());
       last_pc = sim_->get_pc();
     }
@@ -377,12 +378,12 @@ bool ArmDebugger::ExecDebugCommand(ArrayUniquePtr<char> line_ptr) {
     // use a reasonably large buffer
     v8::base::EmbeddedVector<char, 256> buffer;
 
-    byte* prev = nullptr;
-    byte* cur = nullptr;
-    byte* end = nullptr;
+    uint8_t* prev = nullptr;
+    uint8_t* cur = nullptr;
+    uint8_t* end = nullptr;
 
     if (argc == 1) {
-      cur = reinterpret_cast<byte*>(sim_->get_pc());
+      cur = reinterpret_cast<uint8_t*>(sim_->get_pc());
       end = cur + (10 * kInstrSize);
     } else if (argc == 2) {
       int regnum = Registers::Number(arg1);
@@ -390,7 +391,7 @@ bool ArmDebugger::ExecDebugCommand(ArrayUniquePtr<char> line_ptr) {
         // The argument is an address or a register name.
         int32_t value;
         if (GetValue(arg1, &value)) {
-          cur = reinterpret_cast<byte*>(value);
+          cur = reinterpret_cast<uint8_t*>(value);
           // Disassemble 10 instructions at <arg1>.
           end = cur + (10 * kInstrSize);
         }
@@ -398,7 +399,7 @@ bool ArmDebugger::ExecDebugCommand(ArrayUniquePtr<char> line_ptr) {
         // The argument is the number of instructions.
         int32_t value;
         if (GetValue(arg1, &value)) {
-          cur = reinterpret_cast<byte*>(sim_->get_pc());
+          cur = reinterpret_cast<uint8_t*>(sim_->get_pc());
           // Disassemble <arg1> instructions.
           end = cur + (value * kInstrSize);
         }
@@ -407,7 +408,7 @@ bool ArmDebugger::ExecDebugCommand(ArrayUniquePtr<char> line_ptr) {
       int32_t value1;
       int32_t value2;
       if (GetValue(arg1, &value1) && GetValue(arg2, &value2)) {
-        cur = reinterpret_cast<byte*>(value1);
+        cur = reinterpret_cast<uint8_t*>(value1);
         end = cur + (value2 * kInstrSize);
       }
     }
@@ -2652,10 +2653,10 @@ void Simulator::DecodeType2(Instruction* instr) {
   }
   if (instr->HasB()) {
     if (instr->HasL()) {
-      byte val = ReadBU(addr);
+      uint8_t val = ReadBU(addr);
       set_register(rd, val);
     } else {
-      byte val = get_register(rd);
+      uint8_t val = get_register(rd);
       WriteB(addr, val);
     }
   } else {
@@ -4072,7 +4073,7 @@ uint16_t Multiply(uint16_t a, uint16_t b) {
 }
 
 void VmovImmediate(Simulator* simulator, Instruction* instr) {
-  byte cmode = instr->Bits(11, 8);
+  uint8_t cmode = instr->Bits(11, 8);
   int vd = instr->VFPDRegValue(kDoublePrecision);
   int q = instr->Bit(6);
   int regs = q ? 2 : 1;
@@ -6117,7 +6118,7 @@ void Simulator::InstructionDecode(Instruction* instr) {
     disasm::Disassembler dasm(converter);
     // use a reasonably large buffer
     v8::base::EmbeddedVector<char, 256> buffer;
-    dasm.InstructionDecode(buffer, reinterpret_cast<byte*>(instr));
+    dasm.InstructionDecode(buffer, reinterpret_cast<uint8_t*>(instr));
     PrintF("  0x%08" V8PRIxPTR "  %s\n", reinterpret_cast<intptr_t>(instr),
            buffer.begin());
   }
