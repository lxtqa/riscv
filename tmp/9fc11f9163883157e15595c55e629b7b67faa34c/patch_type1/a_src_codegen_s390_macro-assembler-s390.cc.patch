diff --git a/src/codegen/s390/macro-assembler-s390.cc b/src/codegen/s390/macro-assembler-s390.cc
index 9ecbe0f0e62..cb31284e509 100644
--- a/src/codegen/s390/macro-assembler-s390.cc
+++ b/src/codegen/s390/macro-assembler-s390.cc
@@ -1578,7 +1578,7 @@ void MacroAssembler::LeaveExitFrame(bool save_doubles, Register argument_count,
   // Clear top frame.
   Move(ip, ExternalReference::Create(IsolateAddressId::kCEntryFPAddress,
                                      isolate()));
-  StoreU64(MemOperand(ip), Operand(0, RelocInfo::NONE), r0);
+  StoreU64(MemOperand(ip), Operand(0, RelocInfo::NO_INFO), r0);
 
   // Restore current context from top and clear it in debug mode.
   Move(ip,
@@ -2460,7 +2460,7 @@ void TurboAssembler::mov(Register dst, const Operand& src) {
     value = src.immediate();
   }
 
-  if (src.rmode() != RelocInfo::NONE) {
+  if (src.rmode() != RelocInfo::NO_INFO) {
     // some form of relocation needed
     RecordRelocInfo(src.rmode(), value);
   }
@@ -2468,7 +2468,7 @@ void TurboAssembler::mov(Register dst, const Operand& src) {
   int32_t hi_32 = static_cast<int32_t>(value >> 32);
   int32_t lo_32 = static_cast<int32_t>(value);
 
-  if (src.rmode() == RelocInfo::NONE) {
+  if (src.rmode() == RelocInfo::NO_INFO) {
     if (hi_32 == 0) {
       if (is_uint16(lo_32)) {
         llill(dst, Operand(lo_32));
@@ -3435,7 +3435,7 @@ void TurboAssembler::CmpS64(Register src1, Register src2) { cgr(src1, src2); }
 // Compare 32-bit Register vs Immediate
 // This helper will set up proper relocation entries if required.
 void TurboAssembler::CmpS32(Register dst, const Operand& opnd) {
-  if (opnd.rmode() == RelocInfo::NONE) {
+  if (opnd.rmode() == RelocInfo::NO_INFO) {
     intptr_t value = opnd.immediate();
     if (is_int16(value))
       chi(dst, opnd);
@@ -3451,7 +3451,7 @@ void TurboAssembler::CmpS32(Register dst, const Operand& opnd) {
 // Compare Pointer Sized  Register vs Immediate
 // This helper will set up proper relocation entries if required.
 void TurboAssembler::CmpS64(Register dst, const Operand& opnd) {
-  if (opnd.rmode() == RelocInfo::NONE) {
+  if (opnd.rmode() == RelocInfo::NO_INFO) {
     cgfi(dst, opnd);
   } else {
     mov(r0, opnd);  // Need to generate 64-bit relocation
@@ -3623,7 +3623,7 @@ void TurboAssembler::StoreU64(Register src, const MemOperand& mem,
 void TurboAssembler::StoreU64(const MemOperand& mem, const Operand& opnd,
                               Register scratch) {
   // Relocations not supported
-  DCHECK_EQ(opnd.rmode(), RelocInfo::NONE);
+  DCHECK_EQ(opnd.rmode(), RelocInfo::NO_INFO);
 
   // Try to use MVGHI/MVHI
   if (CpuFeatures::IsSupported(GENERAL_INSTR_EXT) && is_uint12(mem.offset()) &&
