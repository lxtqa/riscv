diff --git a/src/wasm/baseline/arm64/liftoff-assembler-arm64.h b/src/wasm/baseline/arm64/liftoff-assembler-arm64.h
index 43fb7dee308..c00240ef052 100644
--- a/src/wasm/baseline/arm64/liftoff-assembler-arm64.h
+++ b/src/wasm/baseline/arm64/liftoff-assembler-arm64.h
@@ -8,6 +8,7 @@
 #include "src/base/v8-fallthrough.h"
 #include "src/heap/memory-chunk.h"
 #include "src/wasm/baseline/liftoff-assembler.h"
+#include "src/wasm/object-access.h"
 #include "src/wasm/wasm-objects.h"
 
 namespace v8 {
@@ -392,6 +393,37 @@ bool LiftoffAssembler::NeedsAlignment(ValueKind kind) {
   return kind == kS128 || is_reference(kind);
 }
 
+void LiftoffAssembler::CheckTierUp(int declared_func_index, int budget_used,
+                                   Label* ool_label,
+                                   const FreezeCacheState& frozen) {
+  UseScratchRegisterScope temps{this};
+  Register budget_array = temps.AcquireX();
+  Register budget = temps.AcquireW();
+
+  Register instance = cache_state_.cached_instance;
+  if (instance == no_reg) {
+    instance = budget_array;  // Reuse the temp register.
+    LoadInstanceFromFrame(instance);
+  }
+
+  constexpr int kArrayOffset = wasm::ObjectAccess::ToTagged(
+      WasmInstanceObject::kTieringBudgetArrayOffset);
+  ldr(budget_array, MemOperand{instance, kArrayOffset});
+
+  MemOperand budget_addr{budget_array, kInt32Size * declared_func_index};
+  ldr(budget, budget_addr);
+  // Make sure that the {budget_used} can be used as an immediate for SUB.
+  if (budget_used > 0xFFF000) {
+    budget_used = 0xFFF000;  // 16'773'120
+  } else if (budget_used > 0xFFF) {
+    budget_used &= 0xFFF000;
+  }
+  DCHECK(IsImmAddSub(budget_used));
+  AddSub(budget, budget, Operand{budget_used}, SetFlags, SUB);
+  Str(budget, budget_addr);
+  b(ool_label, mi);
+}
+
 void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value) {
   switch (value.type().kind()) {
     case kI32:
@@ -1734,13 +1766,6 @@ void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label* label,
   B(label, cond);
 }
 
-void LiftoffAssembler::emit_i32_subi_jump_negative(
-    Register value, int subtrahend, Label* result_negative,
-    const FreezeCacheState& frozen) {
-  Subs(value.W(), value.W(), Immediate(subtrahend));
-  B(result_negative, mi);
-}
-
 void LiftoffAssembler::emit_i32_eqz(Register dst, Register src) {
   Cmp(src.W(), wzr);
   Cset(dst.W(), eq);
