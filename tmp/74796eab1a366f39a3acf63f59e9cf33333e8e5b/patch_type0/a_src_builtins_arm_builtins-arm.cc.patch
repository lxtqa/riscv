diff --git a/src/builtins/arm/builtins-arm.cc b/src/builtins/arm/builtins-arm.cc
index 72cef06fcdc..6e2b3892b03 100644
--- a/src/builtins/arm/builtins-arm.cc
+++ b/src/builtins/arm/builtins-arm.cc
@@ -1497,163 +1497,6 @@ void Builtins::Generate_InterpreterPushArgsThenConstructImpl(
   }
 }
 
-namespace {
-
-void NewImplicitReceiver(MacroAssembler* masm) {
-  // ----------- S t a t e -------------
-  // -- r0 : argument count
-  // -- r1 : constructor to call (checked to be a JSFunction)
-  // -- r3 : new target
-  //
-  //  Stack:
-  //  -- Implicit Receiver
-  //  -- [arguments without receiver]
-  //  -- Implicit Receiver
-  //  -- Context
-  //  -- FastConstructMarker
-  //  -- FramePointer
-  // -----------------------------------
-  Register implicit_receiver = r4;
-
-  // Save live registers.
-  __ SmiTag(r0);
-  __ Push(r0, r1, r3);
-  __ Call(BUILTIN_CODE(masm->isolate(), FastNewObject), RelocInfo::CODE_TARGET);
-  // Save result.
-  __ Move(implicit_receiver, r0);
-  // Restore live registers.
-  __ Pop(r0, r1, r3);
-  __ SmiUntag(r0);
-
-  // Patch implicit receiver (in arguments)
-  __ str(implicit_receiver, MemOperand(sp, 0 * kPointerSize));
-  // Patch second implicit (in construct frame)
-  __ str(implicit_receiver,
-         MemOperand(fp, FastConstructFrameConstants::kImplicitReceiverOffset));
-
-  // Restore context.
-  __ ldr(cp, MemOperand(fp, FastConstructFrameConstants::kContextOffset));
-}
-
-}  // namespace
-
-// static
-void Builtins::Generate_InterpreterPushArgsThenFastConstructFunction(
-    MacroAssembler* masm) {
-  // ----------- S t a t e -------------
-  // -- r0 : argument count
-  // -- r1 : constructor to call (checked to be a JSFunction)
-  // -- r3 : new target
-  // -- r4 : address of the first argument
-  // -- cp/r7 : context pointer
-  // -----------------------------------
-  __ AssertFunction(r1);
-
-  // Check if target has a [[Construct]] internal method.
-  Label non_constructor;
-  __ LoadMap(r2, r1);
-  __ ldrb(r2, FieldMemOperand(r2, Map::kBitFieldOffset));
-  __ tst(r2, Operand(Map::Bits1::IsConstructorBit::kMask));
-  __ b(eq, &non_constructor);
-
-  // Add a stack check before pushing arguments.
-  Label stack_overflow;
-  __ StackOverflowCheck(r0, r2, &stack_overflow);
-
-  // Enter a construct frame.
-  FrameScope scope(masm, StackFrame::MANUAL);
-  __ EnterFrame(StackFrame::FAST_CONSTRUCT);
-  // Implicit receiver stored in the construct frame.
-  __ LoadRoot(r2, RootIndex::kTheHoleValue);
-  __ Push(cp, r2);
-
-  // Push arguments + implicit receiver.
-  Register argc_without_receiver = r6;
-  __ sub(argc_without_receiver, r0, Operand(kJSArgcReceiverSlots));
-  // Push the arguments. r4 and r5 will be modified.
-  GenerateInterpreterPushArgs(masm, argc_without_receiver, r4, r5);
-  // Implicit receiver as part of the arguments (patched later if needed).
-  __ push(r2);
-
-  // Check if it is a builtin call.
-  Label builtin_call;
-  __ ldr(r2, FieldMemOperand(r1, JSFunction::kSharedFunctionInfoOffset));
-  __ ldr(r2, FieldMemOperand(r2, SharedFunctionInfo::kFlagsOffset));
-  __ tst(r2, Operand(SharedFunctionInfo::ConstructAsBuiltinBit::kMask));
-  __ b(ne, &builtin_call);
-
-  // Check if we need to create an implicit receiver.
-  Label not_create_implicit_receiver;
-  __ DecodeField<SharedFunctionInfo::FunctionKindBits>(r2);
-  __ JumpIfIsInRange(
-      r2, static_cast<uint32_t>(FunctionKind::kDefaultDerivedConstructor),
-      static_cast<uint32_t>(FunctionKind::kDerivedConstructor),
-      &not_create_implicit_receiver);
-  NewImplicitReceiver(masm);
-  __ bind(&not_create_implicit_receiver);
-
-  // Call the function.
-  __ InvokeFunctionWithNewTarget(r1, r3, r0, InvokeType::kCall);
-
-  // If the result is an object (in the ECMA sense), we should get rid
-  // of the receiver and use the result; see ECMA-262 section 13.2.2-7
-  // on page 74.
-  Label use_receiver, do_throw, leave_and_return, check_receiver;
-
-  // If the result is undefined, we jump out to using the implicit receiver.
-  __ JumpIfNotRoot(r0, RootIndex::kUndefinedValue, &check_receiver);
-
-  // Otherwise we do a smi check and fall through to check if the return value
-  // is a valid receiver.
-
-  // Throw away the result of the constructor invocation and use the
-  // on-stack receiver as the result.
-  __ bind(&use_receiver);
-  __ ldr(r0,
-         MemOperand(fp, FastConstructFrameConstants::kImplicitReceiverOffset));
-  __ JumpIfRoot(r0, RootIndex::kTheHoleValue, &do_throw);
-
-  __ bind(&leave_and_return);
-  // Leave construct frame.
-  __ LeaveFrame(StackFrame::CONSTRUCT);
-  __ Jump(lr);
-
-  __ bind(&check_receiver);
-  // If the result is a smi, it is *not* an object in the ECMA sense.
-  __ JumpIfSmi(r0, &use_receiver);
-
-  // If the type of the result (stored in its map) is less than
-  // FIRST_JS_RECEIVER_TYPE, it is not an object in the ECMA sense.
-  static_assert(LAST_JS_RECEIVER_TYPE == LAST_TYPE);
-  __ CompareObjectType(r0, r4, r5, FIRST_JS_RECEIVER_TYPE);
-  __ b(ge, &leave_and_return);
-  __ b(&use_receiver);
-
-  __ bind(&builtin_call);
-  // TODO(victorgomes): Check the possibility to turn this into a tailcall.
-  __ InvokeFunctionWithNewTarget(r1, r3, r0, InvokeType::kCall);
-  __ LeaveFrame(StackFrame::FAST_CONSTRUCT);
-  __ Jump(lr);
-
-  __ bind(&do_throw);
-  // Restore the context from the frame.
-  __ ldr(cp, MemOperand(fp, FastConstructFrameConstants::kContextOffset));
-  __ CallRuntime(Runtime::kThrowConstructorReturnedNonObject);
-  __ bkpt(0);
-
-  __ bind(&stack_overflow);
-  // Restore the context from the frame.
-  __ CallRuntime(Runtime::kThrowStackOverflow);
-  // Unreachable code.
-  __ bkpt(0);
-
-  // Called Construct on an Object that doesn't have a [[Construct]] internal
-  // method.
-  __ bind(&non_constructor);
-  __ Jump(BUILTIN_CODE(masm->isolate(), ConstructedNonConstructable),
-          RelocInfo::CODE_TARGET);
-}
-
 static void Generate_InterpreterEnterBytecode(MacroAssembler* masm) {
   // Set the return address to the correct point in the interpreter entry
   // trampoline.
