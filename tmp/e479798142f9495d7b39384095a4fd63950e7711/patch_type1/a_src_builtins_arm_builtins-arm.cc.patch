diff --git a/src/builtins/arm/builtins-arm.cc b/src/builtins/arm/builtins-arm.cc
index ddb43e65f79..fbf1172d774 100644
--- a/src/builtins/arm/builtins-arm.cc
+++ b/src/builtins/arm/builtins-arm.cc
@@ -2987,11 +2987,13 @@ void Builtins::Generate_DoubleToI(MacroAssembler* masm) {
 namespace {
 
 // Calls an API function.  Allocates HandleScope, extracts returned value
-// from handle and propagates exceptions.  Restores context.  stack_space
-// - space to be unwound on exit (includes the call JS arguments space and
-// the additional space allocated for the fast call).
+// from handle and propagates exceptions.  Restores context.  On return removes
+// *stack_space_operand * kSystemPointerSize or stack_space * kSystemPointerSize
+// (GCed, includes the call JS arguments space and the additional space
+// allocated for the fast call).
 void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
-                              ExternalReference thunk_ref, int stack_space,
+                              ExternalReference thunk_ref,
+                              Register thunk_last_arg, int stack_space,
                               MemOperand* stack_space_operand,
                               MemOperand return_value_operand) {
   ASM_CODE_COMMENT(masm);
@@ -3006,28 +3008,48 @@ void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
   MemOperand level_mem_op = __ ExternalReferenceAsOperand(
       ER::handle_scope_level_address(isolate), no_reg);
 
-  DCHECK(function_address == r1 || function_address == r2);
+  Register return_value = r0;
+  Register scratch = arg_reg_4;
+  Register scratch2 = r8;
+
+  // Allocate HandleScope in callee-saved registers.
+  // We will need to restore the HandleScope after the call to the API function,
+  // by allocating it in callee-saved registers it'll be preserved by C code.
+  Register prev_next_address_reg = r4;
+  Register prev_limit_reg = r5;
+  Register prev_level_reg = r6;
+
+  // C arguments (arg_reg_1/2) are expected to be initialized outside, so this
+  // function must not corrupt them (return_value overlaps with arg_reg_1 but
+  // that's ok because we start using it only after the C call).
+  DCHECK(!AreAliased(arg_reg_1, arg_reg_2, arg_reg_3,  // C args
+                     scratch, scratch2, prev_next_address_reg, prev_limit_reg));
+  // Ensure the additional argument for thunk_ref is already in the right
+  // register.
+  DCHECK(thunk_last_arg == arg_reg_2 || thunk_last_arg == arg_reg_3);
+  DCHECK_EQ(function_address, thunk_last_arg);
+
   {
     ASM_CODE_COMMENT_STRING(masm,
                             "Allocate HandleScope in callee-save registers.");
-    __ ldr(r4, next_mem_op);
-    __ ldr(r5, limit_mem_op);
-    __ ldr(r6, level_mem_op);
-    __ add(r6, r6, Operand(1));
-    __ str(r6, level_mem_op);
+    __ ldr(prev_next_address_reg, next_mem_op);
+    __ ldr(prev_limit_reg, limit_mem_op);
+    __ ldr(prev_level_reg, level_mem_op);
+    __ add(scratch, prev_level_reg, Operand(1));
+    __ str(scratch, level_mem_op);
   }
 
   Label profiler_or_side_effects_check_enabled, done_api_call;
   __ RecordComment("Check if profiler or side effects check is enabled");
-  __ ldrb(r8, __ ExternalReferenceAsOperand(ER::execution_mode_address(isolate),
-                                            no_reg));
-  __ cmp(r8, Operand(0));
+  __ ldrb(scratch, __ ExternalReferenceAsOperand(
+                       ER::execution_mode_address(isolate), no_reg));
+  __ cmp(scratch, Operand(0));
   __ b(ne, &profiler_or_side_effects_check_enabled);
 #ifdef V8_RUNTIME_CALL_STATS
   __ RecordComment("Check if RCS is enabled");
-  __ Move(r8, ER::address_of_runtime_stats_flag());
-  __ ldr(r8, MemOperand(r8, 0));
-  __ cmp(r8, Operand(0));
+  __ Move(scratch, ER::address_of_runtime_stats_flag());
+  __ ldr(scratch, MemOperand(scratch, 0));
+  __ cmp(scratch, Operand(0));
   __ b(ne, &profiler_or_side_effects_check_enabled);
 #endif  // V8_RUNTIME_CALL_STATS
 
@@ -3040,7 +3062,6 @@ void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
   Label leave_exit_frame;
 
   __ RecordComment("Load the value from ReturnValue");
-  Register return_value = r0;
   __ ldr(return_value, return_value_operand);
 
   {
@@ -3048,38 +3069,39 @@ void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
         masm,
         "No more valid handles (the result handle was the last one)."
         "Restore previous handle scope.");
-    __ str(r4, next_mem_op);
+    __ str(prev_next_address_reg, next_mem_op);
     if (v8_flags.debug_code) {
-      __ ldr(r1, level_mem_op);
-      __ cmp(r1, r6);
+      __ ldr(scratch, level_mem_op);
+      __ sub(scratch, scratch, Operand(1));
+      __ cmp(scratch, prev_level_reg);
       __ Check(eq, AbortReason::kUnexpectedLevelAfterReturnFromApiCall);
     }
-    __ sub(r6, r6, Operand(1));
-    __ str(r6, level_mem_op);
-    __ ldr(r6, limit_mem_op);
-    __ cmp(r5, r6);
+    __ str(prev_level_reg, level_mem_op);
+    __ ldr(scratch, limit_mem_op);
+    __ cmp(scratch, prev_limit_reg);
     __ b(ne, &delete_allocated_handles);
   }
 
   __ RecordComment("Leave the API exit frame.");
   __ bind(&leave_exit_frame);
   // LeaveExitFrame expects unwind space to be in a register.
+  Register stack_space_reg = prev_limit_reg;
   if (stack_space_operand == nullptr) {
     DCHECK_NE(stack_space, 0);
-    __ mov(r4, Operand(stack_space));
+    __ mov(stack_space_reg, Operand(stack_space));
   } else {
     DCHECK_EQ(stack_space, 0);
-    __ ldr(r4, *stack_space_operand);
+    __ ldr(stack_space_reg, *stack_space_operand);
   }
-  __ LeaveExitFrame(r4, stack_space_operand != nullptr);
+  __ LeaveExitFrame(stack_space_reg, stack_space_operand != nullptr);
 
   {
     ASM_CODE_COMMENT_STRING(masm,
                             "Check if the function scheduled an exception.");
-    __ LoadRoot(r4, RootIndex::kTheHoleValue);
-    __ ldr(r5, __ ExternalReferenceAsOperand(
-                   ER::scheduled_exception_address(isolate), no_reg));
-    __ cmp(r4, r5);
+    __ LoadRoot(scratch, RootIndex::kTheHoleValue);
+    __ ldr(scratch2, __ ExternalReferenceAsOperand(
+                         ER::scheduled_exception_address(isolate), no_reg));
+    __ cmp(scratch, scratch2);
     __ b(ne, &promote_scheduled_exception);
   }
 
@@ -3092,22 +3114,18 @@ void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
     __ bind(&finish_return);
   }
 
-  {
-    Register map = r4;
-    Register tmp = r5;
-    __ AssertJSAny(return_value, map, tmp,
-                   AbortReason::kAPICallReturnedInvalidObject);
-  }
+  __ AssertJSAny(return_value, scratch, scratch2,
+                 AbortReason::kAPICallReturnedInvalidObject);
 
   __ mov(pc, lr);
 
   {
     ASM_CODE_COMMENT_STRING(masm, "Call the api function via thunk wrapper.");
     __ bind(&profiler_or_side_effects_check_enabled);
-    // Additional parameter is the address of the actual callback.
-    __ Move(r3, function_address);
-    __ Move(r8, thunk_ref);
-    __ StoreReturnAddressAndCall(r8);
+    // Additional parameter is the address of the actual callback function.
+    __ Move(thunk_last_arg, function_address);
+    __ Move(scratch, thunk_ref);
+    __ StoreReturnAddressAndCall(scratch);
     __ b(&done_api_call);
   }
 
@@ -3118,12 +3136,14 @@ void CallApiFunctionAndReturn(MacroAssembler* masm, Register function_address,
     ASM_CODE_COMMENT_STRING(
         masm, "HandleScope limit has changed. Delete allocated extensions.");
     __ bind(&delete_allocated_handles);
-    __ str(r5, limit_mem_op);
-    __ mov(r4, r0);
+    __ str(prev_limit_reg, limit_mem_op);
+    // Save the return value in a callee-save register.
+    Register saved_result = prev_limit_reg;
+    __ mov(saved_result, return_value);
     __ PrepareCallCFunction(1);
-    __ Move(r0, ER::isolate_address(isolate));
+    __ Move(arg_reg_1, ER::isolate_address(isolate));
     __ CallCFunction(ER::delete_handle_scope_extensions(), 1);
-    __ mov(r0, r4);
+    __ mov(return_value, saved_result);
     __ jmp(&leave_exit_frame);
   }
 }
@@ -3154,6 +3174,9 @@ void Builtins::Generate_CallApiCallback(MacroAssembler* masm) {
   //  -- sp[(argc) * 8]      : last argument
   // -----------------------------------
 
+  Register function_callback_info_arg = arg_reg_1;
+  Register thunk_callback_arg = arg_reg_2;
+
   Register api_function_address = r1;
   Register argc = r2;
   Register call_data = r3;
@@ -3249,21 +3272,33 @@ void Builtins::Generate_CallApiCallback(MacroAssembler* masm) {
   __ add(scratch, scratch, Operand(argc, LSL, kPointerSizeLog2));
   __ str(scratch, stack_space_operand);
 
-  __ RecordComment("v8::InvocationCallback's argument.");
-  __ add(r0, sp, Operand(1 * kPointerSize));
+  __ RecordComment("v8::FunctionCallback's argument.");
+  __ add(function_callback_info_arg, sp, Operand(1 * kPointerSize));
+
+  // It's okay if api_function_address == thunk_callback_arg, but not
+  // function_callback_info_arg.
+  DCHECK(!AreAliased(api_function_address, function_callback_info_arg));
 
   ExternalReference thunk_ref = ExternalReference::invoke_function_callback();
+
   MemOperand return_value_operand =
       ExitFrameCallerStackSlotOperand(FCA::kReturnValueIndex);
   static constexpr int kUseStackSpaceOperand = 0;
 
   AllowExternalCallThatCantCauseGC scope(masm);
   CallApiFunctionAndReturn(masm, api_function_address, thunk_ref,
-                           kUseStackSpaceOperand, &stack_space_operand,
-                           return_value_operand);
+                           thunk_callback_arg, kUseStackSpaceOperand,
+                           &stack_space_operand, return_value_operand);
 }
 
 void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
+  // ----------- S t a t e -------------
+  //  -- cp                  : context
+  //  -- r1                  : receiver
+  //  -- r3                  : accessor info
+  //  -- r0                  : holder
+  // -----------------------------------
+
   // Build v8::PropertyCallbackInfo::args_ array on the stack and push property
   // name below the exit frame to make GC aware of them.
   using PCA = PropertyCallbackArguments;
@@ -3276,17 +3311,22 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
   static_assert(PCA::kThisIndex == 6);
   static_assert(PCA::kArgsLength == 7);
 
-  // Set up FunctionCallbackInfo's implicit_args on the stack as follows:
+  // Set up PropertyCallbackInfo's args_ on the stack as follows:
   // Target state:
-  //   sp[1 * kSystemPointerSize]: name
-  //   sp[2 * kSystemPointerSize]: kShouldThrowOnErrorIndex   <= PCI:args_
-  //   sp[3 * kSystemPointerSize]: kHolderIndex
-  //   sp[4 * kSystemPointerSize]: kIsolateIndex
-  //   sp[5 * kSystemPointerSize]: kUnusedIndex
-  //   sp[6 * kSystemPointerSize]: kReturnValueIndex
-  //   sp[7 * kSystemPointerSize]: kDataIndex
-  //   sp[8 * kSystemPointerSize]: kThisIndex / receiver
-
+  //   sp[0 * kSystemPointerSize]: name
+  //   sp[1 * kSystemPointerSize]: kShouldThrowOnErrorIndex   <= PCI:args_
+  //   sp[2 * kSystemPointerSize]: kHolderIndex
+  //   sp[3 * kSystemPointerSize]: kIsolateIndex
+  //   sp[4 * kSystemPointerSize]: kUnusedIndex
+  //   sp[5 * kSystemPointerSize]: kReturnValueIndex
+  //   sp[6 * kSystemPointerSize]: kDataIndex
+  //   sp[7 * kSystemPointerSize]: kThisIndex / receiver
+
+  Register name_arg = arg_reg_1;
+  Register property_callback_info_arg = arg_reg_2;
+  Register thunk_getter_arg = arg_reg_3;
+
+  Register api_function_address = thunk_getter_arg;
   Register receiver = ApiGetterDescriptor::ReceiverRegister();
   Register holder = ApiGetterDescriptor::HolderRegister();
   Register callback = ApiGetterDescriptor::CallbackRegister();
@@ -3294,8 +3334,6 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
   Register smi_zero = r5;
   DCHECK(!AreAliased(receiver, holder, callback, scratch, smi_zero));
 
-  Register api_function_address = r2;
-
   __ ldr(scratch, FieldMemOperand(callback, AccessorInfo::kDataOffset));
   __ Push(receiver, scratch);  // kThisIndex, kDataIndex
   __ LoadRoot(scratch, RootIndex::kUndefinedValue);
@@ -3309,8 +3347,10 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
 
   __ RecordComment(
       "Load address of v8::PropertyAccessorInfo::args_ array and name handle.");
-  __ mov(r0, sp);                             // r0 = Handle<Name>
-  __ add(r1, r0, Operand(1 * kPointerSize));  // r1 = v8::PCI::args_
+  // name_arg = Handle<Name>(&name), name value was pushed to GC-ed stack space.
+  __ mov(name_arg, sp);
+  // property_callback_info_arg = v8::PCI::args_ (= &ShouldThrow)
+  __ add(property_callback_info_arg, name_arg, Operand(1 * kPointerSize));
 
   constexpr int kNameOnStackSize = 1;
   constexpr int kStackUnwindSpace = PCA::kArgsLength + kNameOnStackSize;
@@ -3320,22 +3360,29 @@ void Builtins::Generate_CallApiGetter(MacroAssembler* masm) {
   __ EnterExitFrame(kApiStackSpace, StackFrame::EXIT);
 
   __ RecordComment("Create v8::PropertyCallbackInfo object on the stack.");
-  // Initialize it's args_ field.
-  __ str(r1, MemOperand(sp, 1 * kPointerSize));
-  __ add(r1, sp, Operand(1 * kPointerSize));  // r1 = v8::PropertyCallbackInfo&
+  // Initialize its args_ field.
+  __ str(property_callback_info_arg, MemOperand(sp, 1 * kPointerSize));
+  // property_callback_info_arg = v8::PropertyCallbackInfo&
+  __ add(property_callback_info_arg, sp, Operand(1 * kPointerSize));
 
   __ RecordComment("Load api_function_address");
-  ExternalReference thunk_ref =
-      ExternalReference::invoke_accessor_getter_callback();
   __ ldr(api_function_address,
          FieldMemOperand(callback, AccessorInfo::kMaybeRedirectedGetterOffset));
+
+  // It's okay if api_function_address == thunk_getter_arg, but not
+  // property_callback_info_arg or name_arg.
+  DCHECK(
+      !AreAliased(api_function_address, property_callback_info_arg, name_arg));
+
+  ExternalReference thunk_ref =
+      ExternalReference::invoke_accessor_getter_callback();
   MemOperand return_value_operand = ExitFrameCallerStackSlotOperand(
       PCA::kReturnValueIndex + kNameOnStackSize);
   MemOperand* const kUseStackSpaceConstant = nullptr;
 
   CallApiFunctionAndReturn(masm, api_function_address, thunk_ref,
-                           kStackUnwindSpace, kUseStackSpaceConstant,
-                           return_value_operand);
+                           thunk_getter_arg, kStackUnwindSpace,
+                           kUseStackSpaceConstant, return_value_operand);
 }
 
 void Builtins::Generate_DirectCEntry(MacroAssembler* masm) {
@@ -3723,9 +3770,6 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler* masm,
   // Save the accumulator register, since it's clobbered by the below call.
   __ Push(kInterpreterAccumulatorRegister);
   {
-    Register arg_reg_1 = r0;
-    Register arg_reg_2 = r1;
-    Register arg_reg_3 = r2;
     __ mov(arg_reg_1, code_obj);
     __ mov(arg_reg_2, kInterpreterBytecodeOffsetRegister);
     __ mov(arg_reg_3, kInterpreterBytecodeArrayRegister);
