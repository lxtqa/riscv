diff --git a/test/cctest/test-assembler-ppc.cc b/test/cctest/test-assembler-ppc.cc
index 0ee531a8bce..b1c4a6b90ad 100644
--- a/test/cctest/test-assembler-ppc.cc
+++ b/test/cctest/test-assembler-ppc.cc
@@ -65,7 +65,7 @@ TEST(0) {
 #ifdef DEBUG
   code->Print();
 #endif
-  auto f = GeneratedCode<F_iiiii>::FromCode(*code);
+  auto f = GeneratedCode<F_iiiii>::FromCode(isolate, *code);
   intptr_t res = reinterpret_cast<intptr_t>(f.Call(3, 4, 0, 0, 0));
   ::printf("f() = %" V8PRIdPTR "\n", res);
   CHECK_EQ(7, static_cast<int>(res));
@@ -101,7 +101,7 @@ TEST(1) {
 #ifdef DEBUG
   code->Print();
 #endif
-  auto f = GeneratedCode<F_iiiii>::FromCode(*code);
+  auto f = GeneratedCode<F_iiiii>::FromCode(isolate, *code);
   intptr_t res = reinterpret_cast<intptr_t>(f.Call(100, 0, 0, 0, 0));
   ::printf("f() = %" V8PRIdPTR "\n", res);
   CHECK_EQ(5050, static_cast<int>(res));
@@ -149,7 +149,7 @@ TEST(2) {
 #ifdef DEBUG
   code->Print();
 #endif
-  auto f = GeneratedCode<F_iiiii>::FromCode(*code);
+  auto f = GeneratedCode<F_iiiii>::FromCode(isolate, *code);
   intptr_t res = reinterpret_cast<intptr_t>(f.Call(10, 0, 0, 0, 0));
   ::printf("f() = %" V8PRIdPTR "\n", res);
   CHECK_EQ(3628800, static_cast<int>(res));
@@ -218,7 +218,7 @@ TEST(3) {
 #ifdef DEBUG
   code->Print();
 #endif
-  auto f = GeneratedCode<F_piiii>::FromCode(*code);
+  auto f = GeneratedCode<F_piiii>::FromCode(isolate, *code);
   t.i = 100000;
   t.c = 10;
   t.s = 1000;
@@ -333,7 +333,7 @@ TEST(4) {
 #ifdef DEBUG
     Code::cast(code)->Print();
 #endif
-    auto f = GeneratedCode<F_piiii>::FromCode(*code);
+    auto f = GeneratedCode<F_piiii>::FromCode(isolate, *code);
     t.a = 1.5;
     t.b = 2.75;
     t.c = 17.17;
@@ -393,7 +393,7 @@ TEST(5) {
 #ifdef DEBUG
     Code::cast(code)->Print();
 #endif
-    auto f = GeneratedCode<F_iiiii>::FromCode(*code);
+    auto f = GeneratedCode<F_iiiii>::FromCode(isolate, *code);
     int res = reinterpret_cast<int>(f.Call(0xAAAAAAAA, 0, 0, 0, 0));
     ::printf("f() = %d\n", res);
     CHECK_EQ(-7, res);
@@ -428,7 +428,7 @@ TEST(6) {
 #ifdef DEBUG
     Code::cast(code)->Print();
 #endif
-    auto f = GeneratedCode<F_iiiii>::FromCode(*code);
+    auto f = GeneratedCode<F_iiiii>::FromCode(isolate, *code);
     int res = reinterpret_cast<int>(f.Call(0xFFFF, 0, 0, 0, 0));
     ::printf("f() = %d\n", res);
     CHECK_EQ(382, res);
@@ -503,7 +503,7 @@ static void TestRoundingMode(VCVTTypes types,
 #ifdef DEBUG
     Code::cast(code)->Print();
 #endif
-    auto f = GeneratedCode<F_iiiii>::FromCode(*code);
+    auto f = GeneratedCode<F_iiiii>::FromCode(isolate, *code);
     int res = reinterpret_cast<int>(f.Call(0, 0, 0, 0, 0));
     ::printf("res = %d\n", res);
     CHECK_EQ(expected, res);
@@ -690,7 +690,7 @@ TEST(8) {
 #ifdef DEBUG
     Code::cast(code)->Print();
 #endif
-    auto fn = GeneratedCode<F_ppiii>::FromCode(*code);
+    auto fn = GeneratedCode<F_ppiii>::FromCode(isolate, *code);
     d.a = 1.1;
     d.b = 2.2;
     d.c = 3.3;
@@ -805,7 +805,7 @@ TEST(9) {
 #ifdef DEBUG
     Code::cast(code)->Print();
 #endif
-    auto fn = GeneratedCode<F_ppiii>::FromCode(*code);
+    auto fn = GeneratedCode<F_ppiii>::FromCode(isolate, *code);
     d.a = 1.1;
     d.b = 2.2;
     d.c = 3.3;
@@ -916,7 +916,7 @@ TEST(10) {
 #ifdef DEBUG
     Code::cast(code)->Print();
 #endif
-    auto fn = GeneratedCode<F_ppiii>::FromCode(*code);
+    auto fn = GeneratedCode<F_ppiii>::FromCode(isolate, *code);
     d.a = 1.1;
     d.b = 2.2;
     d.c = 3.3;
@@ -1013,7 +1013,7 @@ TEST(11) {
 #ifdef DEBUG
   Code::cast(code)->Print();
 #endif
-  auto f = GeneratedCode<F_piiii>::FromCode(*code);
+  auto f = GeneratedCode<F_piiii>::FromCode(isolate, *code);
   f.Call(&i, 0, 0, 0, 0);
 
   CHECK_EQ(0xABCD0001, i.a);
@@ -1077,7 +1077,7 @@ TEST(WordSizedVectorInstructions) {
 #ifdef DEBUG
   code->Print();
 #endif
-  auto f = GeneratedCode<F_iiiii>::FromCode(*code);
+  auto f = GeneratedCode<F_iiiii>::FromCode(isolate, *code);
   intptr_t res = reinterpret_cast<intptr_t>(f.Call(0, 0, 0, 0, 0));
   ::printf("f() = %" V8PRIdPTR "\n", res);
   CHECK_EQ(173, static_cast<int>(res));
