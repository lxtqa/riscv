diff --git a/src/compiler/backend/s390/code-generator-s390.cc b/src/compiler/backend/s390/code-generator-s390.cc
index 599a9c0980e..d00556dca63 100644
--- a/src/compiler/backend/s390/code-generator-s390.cc
+++ b/src/compiler/backend/s390/code-generator-s390.cc
@@ -169,13 +169,14 @@ namespace {
 class OutOfLineRecordWrite final : public OutOfLineCode {
  public:
   OutOfLineRecordWrite(CodeGenerator* gen, Register object, Register offset,
-                       Register scratch0, Register scratch1,
+                       Register value, Register scratch0, Register scratch1,
                        RecordWriteMode mode, StubCallMode stub_mode,
                        UnwindingInfoWriter* unwinding_info_writer)
       : OutOfLineCode(gen),
         object_(object),
         offset_(offset),
         offset_immediate_(0),
+        value_(value),
         scratch0_(scratch0),
         scratch1_(scratch1),
         mode_(mode),
@@ -189,13 +190,14 @@ class OutOfLineRecordWrite final : public OutOfLineCode {
   }
 
   OutOfLineRecordWrite(CodeGenerator* gen, Register object, int32_t offset,
-                       Register scratch0, Register scratch1,
+                       Register value, Register scratch0, Register scratch1,
                        RecordWriteMode mode, StubCallMode stub_mode,
                        UnwindingInfoWriter* unwinding_info_writer)
       : OutOfLineCode(gen),
         object_(object),
         offset_(no_reg),
         offset_immediate_(offset),
+        value_(value),
         scratch0_(scratch0),
         scratch1_(scratch1),
         mode_(mode),
@@ -208,8 +210,11 @@ class OutOfLineRecordWrite final : public OutOfLineCode {
   }
 
   void Generate() final {
-    __ CheckPageFlag(object_, scratch0_,
-                     MemoryChunk::kPointersFromHereAreInterestingMask, eq,
+    if (COMPRESS_POINTERS_BOOL) {
+      __ DecompressTagged(value_, value_);
+    }
+    __ CheckPageFlag(value_, scratch0_,
+                     MemoryChunk::kPointersToHereAreInterestingMask, eq,
                      exit());
     if (offset_ == no_reg) {
       __ AddS64(scratch1_, object_, Operand(offset_immediate_));
@@ -246,6 +251,7 @@ class OutOfLineRecordWrite final : public OutOfLineCode {
   Register const object_;
   Register const offset_;
   int32_t const offset_immediate_;  // Valid if offset_ == no_reg.
+  Register const value_;
   Register const scratch0_;
   Register const scratch1_;
   RecordWriteMode const mode_;
@@ -1423,33 +1429,22 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
       if (addressing_mode == kMode_MRI) {
         int32_t offset = i.InputInt32(1);
         ool = zone()->New<OutOfLineRecordWrite>(
-            this, object, offset, scratch0, scratch1, mode,
+            this, object, offset, value, scratch0, scratch1, mode,
             DetermineStubCallMode(), &unwinding_info_writer_);
         __ StoreTaggedField(value, MemOperand(object, offset), r0);
       } else {
         DCHECK_EQ(kMode_MRR, addressing_mode);
         Register offset(i.InputRegister(1));
         ool = zone()->New<OutOfLineRecordWrite>(
-            this, object, offset, scratch0, scratch1, mode,
+            this, object, offset, value, scratch0, scratch1, mode,
             DetermineStubCallMode(), &unwinding_info_writer_);
         __ StoreTaggedField(value, MemOperand(object, offset));
       }
       if (mode > RecordWriteMode::kValueIsPointer) {
         __ JumpIfSmi(value, ool->exit());
       }
-      // Checking the {value}'s page flags first favors old-to-old pointers,
-      // which can skip the OOL code. Checking the {object}'s flags first
-      // would favor new-to-new pointers.
-      if (COMPRESS_POINTERS_BOOL) {
-        MachineRepresentation rep =
-            LocationOperand::cast(instr->InputAt(2))->representation();
-        if (rep == MachineRepresentation::kCompressed ||
-            rep == MachineRepresentation::kCompressedPointer) {
-          __ DecompressTagged(value, value);
-        }
-      }
-      __ CheckPageFlag(value, scratch0,
-                       MemoryChunk::kPointersToHereAreInterestingMask, ne,
+      __ CheckPageFlag(object, scratch0,
+                       MemoryChunk::kPointersFromHereAreInterestingMask, ne,
                        ool->entry());
       __ bind(ool->exit());
       break;
-- 
2.35.1

