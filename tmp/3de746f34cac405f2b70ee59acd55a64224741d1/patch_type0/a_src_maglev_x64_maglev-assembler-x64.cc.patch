diff --git a/src/maglev/x64/maglev-assembler-x64.cc b/src/maglev/x64/maglev-assembler-x64.cc
index af4769ab6b6..84969e63be0 100644
--- a/src/maglev/x64/maglev-assembler-x64.cc
+++ b/src/maglev/x64/maglev-assembler-x64.cc
@@ -6,6 +6,7 @@
 #include "src/common/globals.h"
 #include "src/interpreter/bytecode-flags.h"
 #include "src/maglev/maglev-assembler-inl.h"
+#include "src/maglev/maglev-assembler.h"
 #include "src/maglev/maglev-graph.h"
 #include "src/objects/heap-number.h"
 
@@ -619,15 +620,16 @@ void MaglevAssembler::Prologue(Graph* graph) {
         [](MaglevAssembler* masm, LazyDeoptInfo* stack_check_deopt,
            ZoneLabelRef done, RegList register_inputs, int stack_check_offset) {
           ASM_CODE_COMMENT_STRING(masm, "Stack/interrupt call");
-          __ PushAll(register_inputs);
-          // Push the frame size
-          __ Push(Immediate(Smi::FromInt(stack_check_offset)));
-          __ CallRuntime(Runtime::kStackGuardWithGap, 1);
-          stack_check_deopt->set_deopting_call_return_pc(
-              __ pc_offset_for_safepoint());
-          __ code_gen_state()->PushLazyDeopt(stack_check_deopt);
-          masm->safepoint_table_builder()->DefineSafepoint(masm);
-          __ PopAll(register_inputs);
+          RegisterSnapshot snapshot;
+          snapshot.live_registers = register_inputs;
+          snapshot.live_tagged_registers = register_inputs;
+          {
+            SaveRegisterStateForCall save_register_state(masm, snapshot);
+            // Push the frame size
+            __ Push(Immediate(Smi::FromInt(stack_check_offset)));
+            __ CallRuntime(Runtime::kStackGuardWithGap, 1);
+            save_register_state.DefineSafepointWithLazyDeopt(stack_check_deopt);
+          }
           __ jmp(*done);
         },
         graph->function_entry_stack_check()->lazy_deopt_info(),
-- 
2.35.1

