commit c334b287813ffc4f483063aaa35ae53e7cd43ed1
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Jun 3 08:34:51 2024 +0200

    Update V8 DEPS (trusted)
    
    Also rolls instrumented_libs to the latest build to include a fix
    for msan executables and uses the libs at version noble for the same
    reason.
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/5ecb9a9..007a74b
    
    Rolling buildtools/win: git_revision:df98b86690c83b81aedc909ded18857296406159..git_revision:d010969ecc312c4c9512d4b4987b2589087df01a
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/b027bd3..30d4d21
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/24a969a..4ffc88d
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/97246c4..6427b94
    
    Rolling third_party/fp16/src: https://chromium.googlesource.com/external/github.com/Maratyszcza/FP16/+log/95163a7..0a92994
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/305e5a2..a7f443b
    
    Rolling third_party/instrumented_libs: https://chromium.googlesource.com/chromium/third_party/instrumented_libraries/+log/563ee6c..1d704ca
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/b663b9c..5f2c976
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/8c5b971..a16d528
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/a771d3f..1db129f
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/7d6eb60..557b28f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8746454500867171073
    
    Change-Id: I4b7feb431e2b4ef94b6d652aed8af335b6cea030
    Bug: 343086053
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5586917
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94187}

commit 12c5742ed201c3cfa47959846b2e50e719df779a
Author: Adam Klein <adamk@chromium.org>
Date:   Fri May 31 14:38:43 2024 -0700

    [cleanup] Remove a few bits of dead code under src/wasm
    
    Dead code identified by coverage builder.
    
    Change-Id: I6e870e9544e194564e0753498f05d457125e7cea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5589839
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94186}

commit 4817f559d1f15780e6d6d3afe8b5437917916fe3
Author: Adam Klein <adamk@chromium.org>
Date:   Fri May 31 15:13:29 2024 -0700

    [cleanup] Remove dead member function Scope::ReplaceOuterScope()
    
    Change-Id: I97522d5d151632086a0b06b097334af5c73d44ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5590404
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94185}

commit 3103f91c1ceb6c5808c4f80078d110180b546f19
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Tue May 28 15:46:32 2024 -0700

    [shared-struct] Remove base::Optional in js-atomics-synchronization code
    
    Replace base::Optional (deprecated) with std::optional.
    
    Bug: 42202493
    Change-Id: I957994c09699d1eabb5b72cef2fb3b92da06a94b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5576762
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Pardo <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#94184}

commit 7fe02069abb428b575815b7582f6d0bf1c715c92
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri May 31 15:39:11 2024 -0400

    ppc/s390x: Fix pointer compressed builds
    
    Change-Id: Ib12fd5375725651fef60b55ee7e62e76ef2b502c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5589448
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#94183}

commit d65cd340dc28e64e4eec60acab15aecd1d69954a
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri May 31 17:01:51 2024 +0200

    [wasm][liftoff] Fix unexpected register aliasing in EmitTerOp
    
    R=jkummerow@chromium.org
    
    Fixed: 341875188
    Change-Id: I5aeb129af9fda37da18d82a9e6c16ad65ebe7fed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5581071
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94182}

commit fff22aac2baae23a43cbb8699efc8933773620d6
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri May 31 17:40:29 2024 +0200

    [turboshaft][wasm-gc] Also derive type information for array.get
    
    Not sure how we (I) missed this. This probably doesn't change much in
    terms of performance, still this was done properly by Turbofan while
    Turboshaft just "forgets" all the static type information on array.get
    without this change.
    
    Bug: 42204049
    Change-Id: I19975293fde6bf5cc8914af2fba6702ce89ec8a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5589244
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94181}

commit 649c2e746558db243dc91233a17ed3f26664db57
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu May 30 14:27:56 2024 -0400

    [ppc/s390][builtins] Cleanup ExitFrame related code
    
    Port 5d111063b58e688b7ae5c448af86abe4dcd84bc1
    
      This CL makes the following changes:
       - adds explicit scratch register argument to Enter/LeaveExitFrame,
       - removes argument dropping from LeaveExitFrame which makes it
      uniform
         with other main architectures and unblocks accessing the exit frame
         arguments after the exit frame is dropped,
       - refactors register usage in CEntry implementation,
       - uses ExternalReferenceAsOperand(ER, no_reg) to generate less
         instructions.
    
    Bug: 328104148
    Change-Id: Ib2685eb72e7553b6926bbf2cdfd4cbe49e7a1995
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5585174
    Reviewed-by: Milad Farazmand <mfarazma@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94180}

commit 3b037e1756d366e0a6aa8467da9af0d44af84ffb
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri May 31 14:37:06 2024 +0200

    [turboshaft][wasm-gc] Unpack i8 and i16 to i32 in type optimizations
    
    Fixed: 342602616
    Change-Id: Ib82e19241c5b3562db3f86a31b6e3be56e77cadd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5587860
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94179}

commit 89b98d343cc845424f0cdfa476533f2efc8a0a6f
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri May 31 13:27:47 2024 +0200

    [tiering] Enable profile guided tiering
    
    Newest uma results are looking good.
    
    Bug: 41490281
    Change-Id: Ifdeb30b40dd025667a595f052e2f4cd527053d51
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5584977
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94178}

commit 172feb04915de68afb7937e24db49e383c848457
Author: wuoody <di1.wu@intel.com>
Date:   Fri May 31 18:18:27 2024 +0800

    [CSA] Optimize middle point calculation in LookupBinary
    
    We can optimize the calculation "mid = low + (high - low) / 2" by
    "mid = (low + high) / 2" if "low + high" will definitely not
    overflow. This helps the code generation:
    
    before:
        movl r8,rdi
        subl r8,rsi
        shrl r8,1
        addl r8,rsi
    
    after:
        leal r8,[rsi+rdi*1]
        shrl r8,1
    
    Change-Id: I2e61e96dfd04eec72e4292acb71b648eaca18a41
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5588276
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Hao A Xu <hao.a.xu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#94177}

commit 101961beda72cb800aaba4678eff3dfd667f1b43
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri May 31 13:27:08 2024 +0200

    [tiering] Use atomic access for tiering info in fbv
    
    Since the invocation_count_before_stable is accessed concurrently we
    must use atomic accessors.
    
    Bug: 41490281
    Change-Id: Iac6af1411e160b931aee6de4409339dcb0e4bd45
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5588059
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94176}

commit cbd847cb1c2eaa126f0b96f002241c2ef5aa7c89
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri May 31 12:45:57 2024 +0200

    [map] Don't update maps in PrepareForDataProperty
    
    ... because we might update to a dictionary map. Instead, DCHECK that
    the map isn't deprecated, and fix callers to first update the map.
    
    Bug: 342456991
    Change-Id: I8a966437d816c8e0200333c4068854432caf5729
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5588058
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94175}

commit 5e7895a5dcdb9a535fa279cc003216f25103ef0a
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri May 31 11:36:56 2024 +0200

    [arm] Fix inlined allocation limit check
    
    Use unsigned comparison against stack limit. Afaik, this can only cause
    issues if the allocation space limit is at the upper limit of user space
    at 0x80000000.
    
    Fixed: 339513381
    Change-Id: I735f69f6492eaccb736d33db1cd8867f33dfdb4e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5588056
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94174}

commit a23fc6a609dd274739565ddfb8860a5099408959
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri May 31 11:13:40 2024 +0200

    [heap] Actually wait for page to be swept
    
    `EnsurePageIsSwept` tries to steal a page from the sweeper's worklist if
    the sweeper hasn't started sweeping it yet. In case the status says that
    the page is not yet swept, but the sweeper starts handling it after the
    status is read and before the page is stolen, stealing it will fail and
    the method will return while the page is not yet swept.
    
    Bug: 343484151
    Change-Id: I14aea4e1ce1db3d4698d24d145f3979493e79dbb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5587857
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94173}

commit d9defbdb73492399046b87a69567af9b5bcaacca
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu May 30 16:50:05 2024 +0000

    [sandbox] Refactor base::AbortMode
    
    Currently, for sandbox fuzzing and sandbox testing mode, we use the
    "soft" abort mode. This causes DCHECKs failures to be ignored entirely,
    and CHECK failures, UNREACHABLEs, etc. to terminate the process through
    exit(-1) as these are considered harmless crashes for the sandbox. The
    issue with that is that for writing regression tests, exit(-1) does not
    count as "passing" a test. On the other hand, we also do not want to
    use exit(0) (i.e. indicate success) in sandbox fuzzing mode, as the
    fuzzer should treat such cases as failed executions and discard them.
    Therefore, this CL now removes the soft abort mode entirely and replaces
    it with a AbortMode::kExitWithSuccessAndIgnoreDcheckFailures and
    AbortMode::kExitWithFailureAndIgnoreDcheckFailures, which are quite
    verbose, but at least fairly descriptive.
    
    Bug: 42202821
    Change-Id: I9d8f887a2c0cad051e2b495a61b8508b41043d2e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5580879
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94172}

commit 2e47b15804e99d28ac12bf7b42ca0aed0dadbac6
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri May 31 08:54:11 2024 +0000

    Revert "[maps] Disable side-step transitions"
    
    This reverts commit 11beaece72750921da10cf846cd3ac8fad5415da.
    
    Reason for revert: re-enable as the root cause is now fixed
    
    Original change's description:
    > [maps] Disable side-step transitions
    >
    > Disable side-step transitions.
    >
    > The root cause of the crashes in the related issue is probably correctly
    > identified. To have a clean canary for the upcoming dev release it was
    > suggested to still disable the feature for a bit.
    >
    > Bug: 343384810
    > Change-Id: I3d871f8f8cbdbb67ffd3f750b8f65dcd85af96fe
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5584978
    > Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94167}
    
    Bug: 343384810
    Change-Id: I808ed18624e6f862a00f912f4b1527c4695dc22c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5587856
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94171}

commit d789e57f16695dfb495e28ffb14ab0241a9f42ba
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu May 30 14:02:59 2024 +0800

    [compiler] Add include "src/codegen/register.h"
    
    Fix build error
    
    Bug: 343519253
    
    Change-Id: I6f35062762997ddcb6ec72994c5cd29ed84ab1f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5584379
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#94170}

commit bc397e69a66c71d9da55ab4a4974e3a65626bfcd
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri May 31 09:33:22 2024 +0200

    [ic] Fix clone IC trying to insert into full transition array
    
    Fixed: 343384810
    Change-Id: I0effc2e50fa551470f6d6e542ce0b093a820354a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5581350
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94169}

commit 81da6674f449ba52966cc2b689c20f708a1c0e83
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu May 30 13:35:02 2024 +0200

    [wasm][jspi] Add branch hints in the wasm-to-js wrapper
    
    R=ahaas@chromium.org
    
    Bug: 342027573
    Change-Id: Ifc12bc3c5cbc031eb7b24aa21217bfb1621040de
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5581354
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94168}

commit 11beaece72750921da10cf846cd3ac8fad5415da
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu May 30 16:01:33 2024 +0200

    [maps] Disable side-step transitions
    
    Disable side-step transitions.
    
    The root cause of the crashes in the related issue is probably correctly
    identified. To have a clean canary for the upcoming dev release it was
    suggested to still disable the feature for a bit.
    
    Bug: 343384810
    Change-Id: I3d871f8f8cbdbb67ffd3f750b8f65dcd85af96fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5584978
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94167}

commit 480777d1d9c7bc8db578209139ae5cd6c5c158d8
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu May 30 10:57:52 2024 +0200

    [maps] Fix verifying transition array with sidestep-transitions
    
    Two DCHECKS that were still assuming transition arrays not to contain
    cleared references.
    
    One in `CheckNewTransitionsAreConsistent` and one when growing
    transitions arrays.
    
    Fixed: 342451735
    Change-Id: I5b45fee3e75b8d9df76856ea320b6a0ebe939b2d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5584976
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94166}

commit 300451e869ae908f9a454c5a265162a6b3960b5d
Author: Joyee Cheung <joyee@igalia.com>
Date:   Thu May 30 13:47:07 2024 +0200

    src: fix v8-sandbox.h multiline comments
    
    Before it fails to compile with -Werrors=comment because some of
    the `//` comments uses `\` at the end of the line.
    
    Refs: https://github.com/nodejs/node/pull/53086
    
    Change-Id: I10e5b970cff4a8eda78c305f5649d8bf08d7da3c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5584738
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#94165}

commit 71c4a1de7b5264cdd9c8d4fab8fb82f81c128f1b
Author: Nate Chapin <japhet@chromium.org>
Date:   Wed May 29 20:09:49 2024 +0000

    Add missing param to ReadCppHeapFieldPointer call in v8::Object::Unwrap()
    
    The variant of Unwrap() that takes a Local<Object> and a
    CppHeapPointerTagRange fails to forward the CppHeapPointerTagRange when
    V8_ENABLE_CHECKS is not defined, leading to a compile break if this
    templated function is ever used.
    
    Bug: chromium:40940619
    Change-Id: I6b476492d38ad11e41971ef01546eba60532e9cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5582497
    Auto-Submit: Nate Chapin <japhet@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nate Chapin <japhet@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94164}

commit 740ddbdc5c6bfa404aa7ccb8b1b0162fd565976a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed May 29 18:31:22 2024 +0200

    [deoptimizer][wasm] Allow new dynamic tierup after deopt
    
    Bug: 42204618
    Change-Id: I2a853522f75afb22829fea50d0c220140534d9bb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5580356
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94163}

commit f4e02303d0e9acd053c02dbcc7d8f67d5e4c85eb
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed May 29 17:51:35 2024 +0200

    [maglev] Initialize NodeInfo with static node type
    
    For consistency we should always initialize the node type to avoid
    getting different results depending on how we query it.
    
    Fixed: 343069819
    Change-Id: Ib16782024a01148c31d9898d64233e046db6cb64
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5581069
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94162}

commit d2d190fb1306449c022296cdec1bb16341996d4a
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed May 29 17:10:01 2024 +0200

    [wasm] Support calling imports with the generic export wrapper
    
    So far the generic wrapper was only used for calling internal wasm
    functions, which allowed it to make the assumption that the implicit
    parameter was a WasmTrustedInstanceData object.
    Add support for passing a WasmApiFunctionRef, which enables using it for
    calling re-exported imports, and also fixes a correctness issue with the
    JSPI variant of the wrapper.
    
    R=ahaas@chromium.org
    
    Fixed: 342415789
    Change-Id: I6c49606ebb5d4406d6ed878b07fff3c8b5b2415c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5575093
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94161}

commit 90c5007dd99a6b8580c07a3a13e445954c6e2c99
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 29 16:17:24 2024 +0200

    [maglev] Disable ArrayIteratorProtoNext
    
    ... when insidea a loop and the iterated object is an
    InlinedAllocation, since the map could change.
    
    Fixed: 343069827
    Change-Id: I0daa6806afc81f3a9aa94f034b589a81aa3faf7a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5580809
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94160}

commit b2df50672c06c070ecb137570d1072a3835ac4ca
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed May 29 15:46:33 2024 +0200

    [wasm] Reorder return values by taggedness
    
    This patch introduces reordering of return values into an untagged
    and a tagged block, just like what we already do for parameters.
    This is a prerequisite for efficient signature verification: it
    allows us to compare the sizes of these blocks, instead of needing
    large bit maps to store each return value's taggedness.
    
    Bug: 336507783
    Change-Id: Ic6ea16e3fad333068d2e087bb1e9e4ad1f944667
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5580042
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94159}

commit 6d2f2a0541d6e82feec78cfe17d2b30de27c5267
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed May 29 16:24:14 2024 +0200

    [maglev] Ensure inlined allocation initialization stores tagged values
    
    Fields of inlined allocations are not guaranteed to be tagged. We must
    ensure they are so we can use StoreTaggedField.
    
    Drive-By: Fix printing of StoreMap.
    
    Fixed: 343263982
    Change-Id: I4444a526897c39de564f7832e76b00e872dc926b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5580355
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94158}

commit 8430125e7c0212a735600565b82ae43483bd788e
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed May 29 11:49:31 2024 +0000

    [sandbox] Mark Wasm wrapper interface descriptors as internal
    
    These were incorrectly marked as sandbox-exposed descriptors even though
    they are not invoked via a JS/Wasm function and use a custom calling
    convention. As such, an attacker could invoke the respective builtins
    from within the sandbox (via the code pointer table, by e.g. overwriting
    the `code` field of a JSFunction), which would lead to a calling
    convention mismatch and a sandbox violation. This CL now marks these
    descriptors as internal descriptors. That way, they can no longer be
    invoked from within the sandbox.
    
    Bug: 342866373
    Change-Id: Icd62220b9ac8a6bd0011763440924ef7e979380e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5580045
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94157}

commit d56a54f5c90b3d1c11b48fe21995c7f4e69353d0
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue May 28 14:28:27 2024 -0400

    skip maglev-frontend/new-array on ppc
    
    kInitialMaxFastElementArray is 32760 on ppc which is more than
    the value on other platforms (i.e 16380 on x64).
    
    This leads to not deopting where we should. More details are
    available under this CL:
    https://crrev.com/c/5563326
    
    Bug: 42204525
    Change-Id: Id3889b24554cbd5f39867d7b052fbd8ce9acc17d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5577295
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#94156}

commit f1ac904299c359a1210c862c3e78189b6f5e54eb
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue May 28 15:57:45 2024 +0000

    [sandbox] Tweak ReadCppHeapPointerField
    
    Previously, we required an explicit check for the null handle, in which
    case we would return nullptr. With this CL we instead guarantee that an
    access to the 0th entry of the table always results in nullptr being
    returned. As such, the check for the null handle is no longer needed. On
    Arm64 this is a net improvement as returning nullptr for the 0th entry
    is possible without any additional instructions. On x64, this change
    should be neutral as it effectively replaces one conditional branch with
    another one.
    
    Bug: chromium:40940619
    Change-Id: Ieeba3f041cefc8d080f5b22f972f591b503cccd2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5576554
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94155}

commit 6a34bf9694c02fb9c096e5839e5a2624f4a868e3
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed May 29 12:25:53 2024 +0200

    [ic] Prevent MapUpdater form un-generalizing fields in side-steps
    
    When following side-step transitions we can reach other transition
    trees, which might already be more general. Thus the map updater must
    ensure we do not turn them less generic.
    
    Drive-By: * Factor out the condition for when maps can be stored in
                side-step transitions such that all parts of the clone IC
                are guaranteed to agree.
              * Turn security relevant representation DCHECK into CHECK.
    
    Fixed: 343338105
    Change-Id: Id57064095e66304cf870eac5bea509f6e5ae67ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5580040
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94154}

commit 96a4fc7967d990e68a8b922cc7cc3ada59328a8f
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon May 27 14:28:47 2024 +0200

    [turboshaft] Maglev-to-ts: support CheckedSmiTagUint32
    
    Bug: 42204525
    Change-Id: Ib6d0b1441b1b8b5196218d3cf750be009fcd73d7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569704
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94153}

commit 9d3fc73f9fd4afd92e44a2af29cde0026597720c
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed May 29 11:44:47 2024 +0200

    [heap] Rename methods for parking threads
    
    Since https://crrev.com/c/5563331, parking background threads in the
    context of conservative stack scanning is safe in general, and not
    only for blocking. This CL renames the methods used for this purpose,
    from "Block*WhileParked*" to "Execute*WhileParked*".
    
    Bug: 41480448
    Change-Id: Icdf0092463956d61bbc8e63e1665348efc40f03f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5568813
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94152}

commit f6287729bb4e44c32b3cf8dbb38d78adcb356a52
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed May 29 11:28:20 2024 +0200

    [gm.py] Auto-replace deprecated rbe_cfg_dir option
    
    "rbe_cfg_dir" is replaced by "reclient_cfg_dir".
    This fixes a GN warning.
    
    No-Try: true
    Change-Id: I7e84cb69460e30027a14b08f1a8703d017a28cbc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5580354
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94151}

commit daa0201ade9c1ffa7e0789b7150729270c75db6f
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon May 27 13:37:22 2024 +0200

    [turboshaft] Maglev-to-ts: support TransitionElementsKind
    
    Bug: 42204525
    Change-Id: I646e203b783efeb50c597a523507cf7b0cad86b8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569703
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94150}

commit 8fb1f7fac561c7e608aaa629d5fc5e0a3df135dc
Author: Chengzhong Wu <legendecas@gmail.com>
Date:   Mon May 27 16:50:05 2024 +0100

    [module] Remove DeprecatedResolveCallback
    
    v8::ResolveCallback was removed in M100 and the internal representation
    DeprecatedResolveCallback can be removed as well.
    
    Bug: 40643756
    Change-Id: I14fe3c1aa459da6f3570b5ec3b5f5220cdb39991
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572954
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Chengzhong Wu (legendecas) <legendecas@gmail.com>
    Cr-Commit-Position: refs/heads/main@{#94149}

commit 5398fa294f5d2b1b32d833bbe9a37aa8c18d7912
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed May 29 10:49:00 2024 +0200

    [ic] Properly configure clone IC on clone map cache hit
    
    When the new clone IC target map cache hits, we must still update the
    feedback nexus to configure the clone IC for its fastcase.
    
    Drive-By: * Properly disable the new cross-representation cloning if
                the side-step transitions v8_flag is disabled.
              * Check for deprecated maps in the cache.
    
    Bug: chromium:40764103
    Change-Id: I2bacd3e537039ce349c95fde266992a03f2204fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5575036
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94148}

commit 6c216765684c49d1eadb5009c2587285b2c8d0da
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed May 29 08:16:33 2024 +0000

    [sandbox] Introduce v8::Object::Unwrap variant with tag range
    
    The new pointer tagging scheme introduced in https://crrev.com/c/5563324
    makes use of range-based type checks and therefore requires a tag range
    when loading a pointer from the pointer table. This CL introduces the
    necessary variant of v8::Object::Unwrap to support this. As the tag
    ranges do not necessarily need to be compile-time constants, this CL
    also switches the relevant routines to take the tag range as regular
    parameter, not as template parameter. In the (common) case where the tag
    range is known at compile-time, the compiler should be able to optimize
    the code in the same way.
    
    Bug: 40940619, 342446331
    Change-Id: I76083d4fb0b92bc8ebc2b17e3ea271128e0047fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5580038
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94147}

commit 7d47d7b00d61798e3774c1ae8ebcc90fa9c18406
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue May 28 17:17:34 2024 +0200

    Reland "[heap][handles] Revise parking invariants for direct handles"
    
    This is a reland of commit 239f4e587fc520fdfb792eb35e98079a9de59cf1
    
    Original change's description:
    > [heap][handles] Revise parking invariants for direct handles
    >
    > Until now, when parking a background thread, a DCHECK would fail if
    > the thread's stack contained direct handles, practically allowing
    > only limited use of direct handles in background threads. With
    > https://crrev.com/c/5331543, the stacks of parked background threads
    > are correctly scanned (in builds with conservative stack scanning
    > enabled) and therefore this restriction can now be eliminated.
    >
    > This CL:
    >
    > - allows unrestricted use of direct handles in background threads;
    > - revises the methods and scopes for parking threads, to make sure
    >   that the trampoline is entered every time a thread is parked and
    >   the stack marker is set and reset appropriately;
    > - disallows explicit use of ParkedScope; and
    > - updates tests that used the previous logic.
    >
    > Change-Id: Ia01343d5685cfe4537202e8940bf0cd7d614d8fc
    >
    > Bug: 41480448
    > Bug: 42203211
    > Change-Id: Ia01343d5685cfe4537202e8940bf0cd7d614d8fc
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563331
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94134}
    
    Bug: 41480448
    Bug: 42203211
    Change-Id: I41fb38bf3ded433556735e0e957f1daca9ac3ab5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5575092
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94146}

commit 05a2aa27b06fb45fbc83dc89c52d79f025ac98d9
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed May 29 11:37:38 2024 +0800

    [loong64][mips64][turboshaft] Port InstructionSelector part4
    
    Implement more turboshaft isel to make sure the tests pass.
    
    Change-Id: I42f3cc23eb385a18cb7479509930a8ed26ad1aa2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5578976
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94145}

commit 39259936de0ee4862fdda1af901316b13bfde136
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 29 06:39:48 2024 +0000

    Revert "[maglev] Avoid call to ObjectPrototypeHasOwnProperty builtin if possible."
    
    This reverts commit aabb0de7fec43862f6d184f4438c5f164da4c903.
    
    Reason for revert: https://crbug.com/343069824
    
    Original change's description:
    > [maglev] Avoid call to ObjectPrototypeHasOwnProperty builtin if possible.
    >
    > If the input "key" of the "object.prototype.hasownproperty" JSCall
    > comes from enum cache and the receiver is a heap constant, then we
    > can replace the ObjectPrototypeHasOwnProperty builtin call with some
    > compare and jump instructions.
    >
    > This CL can bring ~50% improvement on this micro case below:
    > (just run maglev code with "--no-turbofan" flag)
    > -----------------------------------
    > const RESERVED_PROPS = {
    >     key: true,
    >     ref: true,
    >     __self: true,
    >     __source: true,
    > };
    >
    > function foo(config) {
    >     let i = 0;
    >     let propName;
    >     const props = {};
    >     for (propName in config) {
    >         if (!RESERVED_PROPS.hasOwnProperty(propName)) {
    >             i = i + 1;
    >         }
    >     }
    >     return i;
    > }
    > -----------------------------------
    >
    > Change-Id: I6023532ed839c348e5646adc7809719870b24375
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5517735
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    > Commit-Queue: Jialu Zhang <jialu.zhang@intel.com>
    > Cr-Commit-Position: refs/heads/main@{#94109}
    
    Change-Id: Iff77aa5b485eacc91fcdc7b2251d0342cbad6c8d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5577676
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#94144}

commit fcee6615694031627070cae1a21c31accc0a84a8
Author: Adam Klein <adamk@chromium.org>
Date:   Tue May 28 13:40:14 2024 -0700

    [cleanup] Remove unused strings from AstValueFactory and Heap
    
    Change-Id: I8708f935400bb504b039fe428d6cb9664511ffbf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5577702
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94143}

commit 8953e49478f8e43b897d4e8f4160d028e7740660
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue May 28 16:50:10 2024 +0200

    [flags] Fix missing flag implications
    
    crrev.com/c/5537448 changed flag implication applications such that it
    happens once after all flags are set. Unfortunately the timing of
    applying implications was too late and some implications were already
    needed before (specifically v8_flags.soft_abort in [1]).
    
    We fix this issue by moving the implication application up to before any
    of the flags are read.
    
    V8::Initialize also included some hard-coded implications. To avoid
    conflicts between these and regular implications, all the hard-coded
    implications are replaced equivalent regular flag implications.
    
    This CL also allows non-bool flags to appear multiple times as long
    as they have the same value. The variants scripts are also updated to
    not expect that such cases crash.
    
    [1] https://source.chromium.org/chromium/chromium/src/+/main:v8/src/init/v8.cc;drc=a678f03a05eb69165d7c3d7eaea9b4358508eef0;l=242
    
    Change-Id: I4e535cc0c1ce9a9195686d195b15e2b52eb3616f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5557771
    Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94142}

commit 70656984645e74f7d9298bb25edd7c7ff40196af
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon May 27 13:57:25 2024 +0000

    Revert "[base] Change PointerWithPayload to accept incomplete types"
    
    This reverts commit aadbcd5a98d3cf3b307be77ea056e2661c5ee559.
    
    Reason for revert: static_assert about the alignment is
    now incorrect.
    
    Original change's description:
    > [base] Change PointerWithPayload to accept incomplete types
    >
    > Currently PointerWithPayload is templatize by using a complete type,
    > which means that we cannot define a PointerWithPayload of a not yet
    > defined type, eg:
    >
    > class MyType;
    > PointerWithPayload<MyType>; // Fails compilation
    >
    > However PointerWithPayload is essentially a pointer, so if we
    > pass the pointer type instead, we can allow incomplete types.
    >
    > Change-Id: I3a273419599bdfbd2f21060d1fa749d82ce3adea
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553986
    > Commit-Queue: Igor Sheludko <ishell@chromium.org>
    > Reviewed-by: Marja Hölttä <marja@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94025}
    
    Change-Id: If82d69284c2f59410e9525d7f452d6c6f8bed86b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5573728
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94141}

commit a6eaf75741098e00514546cb99827b9a7c185ac7
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Mon May 27 15:26:13 2024 +0200

    [logging] Use RecursiveMutex for Logger
    
    Logger::allows_code_compaction might be called from within a
    CodeCreateEvent where initializing line script line ends might trigger
    a GC. During compaction we check if code compaction is allowed which
    calls back into the above Logger method.
    
    Bug: 41497149
    Change-Id: Ifd1b740df8600584780341d8214e995832e663b4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572952
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94140}

commit 30aded42f58358448d746547c159224407456891
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue May 28 14:56:44 2024 +0200

    [maglev] StoreFloat64 and typed array stores should not invalidate kna
    
    StoreFloat64 is only used in initializing stores and if we ever use it
    to update properties, we would go through RecordKnownProperty.
    
    Typed array stores cannot invalidate maps and/or loaded properties.
    
    Bug: v8:7700
    Change-Id: I95e285e359d2be1c7d00fa9c8974a6a51fa3d090
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5575035
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94139}

commit 26d631232030d6204b9af2fd437d6f216f108a37
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue May 28 13:08:15 2024 +0000

    Revert "[heap][handles] Revise parking invariants for direct handles"
    
    This reverts commit 239f4e587fc520fdfb792eb35e98079a9de59cf1.
    
    Reason for revert: Failures on TSAN bots:
    https://logs.chromium.org/logs/v8/buildbucket/cr-buildbucket/8746694747325887153/+/u/Check/ConcurrentAllocationInLargeSpace
    
    Original change's description:
    > [heap][handles] Revise parking invariants for direct handles
    >
    > Until now, when parking a background thread, a DCHECK would fail if
    > the thread's stack contained direct handles, practically allowing
    > only limited use of direct handles in background threads. With
    > https://crrev.com/c/5331543, the stacks of parked background threads
    > are correctly scanned (in builds with conservative stack scanning
    > enabled) and therefore this restriction can now be eliminated.
    >
    > This CL:
    >
    > - allows unrestricted use of direct handles in background threads;
    > - revises the methods and scopes for parking threads, to make sure
    >   that the trampoline is entered every time a thread is parked and
    >   the stack marker is set and reset appropriately;
    > - disallows explicit use of ParkedScope; and
    > - updates tests that used the previous logic.
    >
    > Change-Id: Ia01343d5685cfe4537202e8940bf0cd7d614d8fc
    >
    > Bug: 41480448
    > Bug: 42203211
    > Change-Id: Ia01343d5685cfe4537202e8940bf0cd7d614d8fc
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563331
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94134}
    
    Bug: 41480448
    Bug: 42203211
    Change-Id: I785f56d0af6e3bcfe08547081db718b2ba21032f
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5575089
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94138}

commit 1e433a8a66d97a7f5bc5017ec90378cd1a1157d8
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue May 28 14:04:21 2024 +0200

    [maglev] More fine grained effect tracking for StoreMap
    
              known_node_aspect-tainting behavior.
    
    Drive-By: Make it easier for instructions to override their
    Bug: v8:7700
    Change-Id: I383974fb0a85677eeb7180dfbf8a73f1bf78f4f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5573733
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94137}

commit 773beeedb06aadb65e79c76a04618072d1ddfa9e
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue May 28 13:31:19 2024 +0200

    Reland "[turbofan][turboshaft] Reorganize pipeline.cc"
    
    This reverts commit 9b2fa7880d8456539d122db7e6bec8f295779659.
    
    Change in reland: Properly move graph zone from TFPipelineData
    to Turboshaft's PipelineData when switching pipelines.
    
    Original change's description:
    > [turbofan][turboshaft] Reorganize pipeline.cc
    >
    > Perform a bunch of restructurings and cleanups involving compiler
    > pipelines, most prominently:
    > - Separate Turboshaft's PipelineData to be independent.
    > - Make Turboshaft's PipelineData more modular such that users (e.g.
    >   tests) need not provide components they don't need.
    > - Move many Turboshaft parts of the pipeline into a separate class.
    > - Introduce ZoneWithName[Pointer] to make lifetimes and zone relations
    >   more explicit and safe.
    > - Rename TurboFan's PipelineData to TFPipelineData.
    > - Express clear ownership of some data parts and properly transfer
    >   them between the different PipelineDatas.
    >
    >
    > Change-Id: I2517994dced7c5e4797bf2b090527c2ab22bc6ac
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538172
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94080}
    
    Bug: v8:12783, chromium:343072390
    Change-Id: I84a206cb49082695b1990ea9bf08557235e24b7e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5570128
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94136}

commit a4a6df7636e3d490017f1f07e5731068e5f6e75f
Author: Liviu Rau <liviurau@chromium.com>
Date:   Mon May 27 09:24:33 2024 +0200

    [test262] Response 'items' are directly accessible
    
    No-try: true
    Bug: 341524545
    Change-Id: I5b3081d6c2df19a400cf25a3baf6438616e946fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569565
    Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#94135}

commit 239f4e587fc520fdfb792eb35e98079a9de59cf1
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue May 28 12:53:09 2024 +0200

    [heap][handles] Revise parking invariants for direct handles
    
    Until now, when parking a background thread, a DCHECK would fail if
    the thread's stack contained direct handles, practically allowing
    only limited use of direct handles in background threads. With
    https://crrev.com/c/5331543, the stacks of parked background threads
    are correctly scanned (in builds with conservative stack scanning
    enabled) and therefore this restriction can now be eliminated.
    
    This CL:
    
    - allows unrestricted use of direct handles in background threads;
    - revises the methods and scopes for parking threads, to make sure
      that the trampoline is entered every time a thread is parked and
      the stack marker is set and reset appropriately;
    - disallows explicit use of ParkedScope; and
    - updates tests that used the previous logic.
    
    Change-Id: Ia01343d5685cfe4537202e8940bf0cd7d614d8fc
    
    Bug: 41480448
    Bug: 42203211
    Change-Id: Ia01343d5685cfe4537202e8940bf0cd7d614d8fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563331
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94134}

commit d7751fd0a08776ab4e11cf248c93b079b4cb90d3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue May 28 12:05:34 2024 +0200

    Update V8 DEPS (trusted) instrumented_libraries
    
    Rolling third_party/instrumented_libs
    https://chromium.googlesource.com/chromium/third_party/instrumented_libraries/+log/0172d67..563ee6c
    
    Change-Id: I2e569f05c8c3d5b7d55dad8a2a66f5ed8e10060a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5575027
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94133}

commit e61685a1b6c731aef6af9903c8e030ecd9932907
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue May 28 11:53:27 2024 +0200

    Update V8 DEPS (trusted)
    
    Manual change: Not Rolling third_party/instrumented_libs!
    Planned:
    https://chromium.googlesource.com/chromium/third_party/instrumented_libraries/+log/0172d67..f75a3f1
    This caused errors with `checkout_instrumented_libraries`:
      File "[...]/v8/depot_tools/gclient_eval.py", line 643, in _convert
        raise ValueError('invalid "and" operand %r (inside %r)' %
    ValueError: invalid "and" operand 'non_git_source' (inside '(checkout_instrumented_libraries and non_git_source) and (checkout_instrumented_libraries)')
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/d273a5a..5ecb9a9
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/ec40c25..24a969a
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/09c232e..97246c4
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/9b4993c..305e5a2
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/5067b87..b663b9c
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/e0a4f35..8c5b971
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/9772a0a..7d6eb60
    
    Roll created at https://cr-buildbucket.appspot.com/build/8746726292535774945
    
    Change-Id: Ic10c09d5bf19a049030b14cdf2e4ce5fd57c11c7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572657
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94132}

commit 2c80eed7cb3571b78235f1bea059d1579a43c59f
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue May 28 12:37:47 2024 +0200

    [owners] Add evih@ to COMMON_OWNERS
    
    Change-Id: I5ed1938b758e79365b0151674d0d52743caa8661
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5575031
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94131}

commit 3c9a3e659455292471b928b7a52c7c0c9ad80b5a
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue May 28 12:09:54 2024 +0200

    [map] Don't set backpointer on detached map on proto transition overflow
    
    When the number of prototype transitions overflows the target map is
    copied and detached. Thus we should also not set the back pointer.
    
    Fixed: 342801052
    Change-Id: Ic450c3993feb601805697dbeaeb7cd39304ba664
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5575086
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94130}

commit e0c86d23185dd71e9cb022b818b8754a28fbe79f
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue May 28 11:32:32 2024 +0200

    [maglev] Don't assume Smi range in ArrayIteratoryProtoNext
    
    Usually we can assume array lengths are in Smi range since IC would
    otherwise go Megamorphic. This is not the case for builtins.
    
    Fixed: 343069823
    Change-Id: I1625509b00845e941f68973559d19cd6fa84b57c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572957
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94129}

commit 16d94cc33ce63a8f0ada7c9422c65e62182445f1
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue May 28 11:34:30 2024 +0200

    [maps] Fix iterating transition tree with sidestep-transitions
    
    Fix two locations where we did not account for the new side-step
    transitions when iterating the transition array.
    
    Drive-By: Refactor API to have a uniform transition filtering argument.
    
    Bug: 40764103
    Fixed: 342451735
    Change-Id: I0133d8fedc56f542a639fb8423e451930b29a7d6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5573726
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94128}

commit 1fdfb300b4d569b82c39fb30dd43d788643da60e
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue May 28 09:25:55 2024 +0000

    Initialize Code::parameter_count also for CSA/Torque builtins
    
    Previously, the Code::parameter_count field was only set for functions
    compiled from bytecode. With this change, the field is also set for
    functions generated from CSA/Torque. This is another small step towards
    deprecating SharedFunctionInfo::formal_parameter_count.
    
    Bug: chromium:40931165
    Change-Id: I1ee3d754b98455a855e5f2e8b7e18993786bf1b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5573414
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94127}

commit 81f93e10b89760f3ea3d9aae148d7574a7c7aa78
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue May 28 10:39:33 2024 +0200

    [deoptimizer][wasm] Test memory access after deopt
    
    Liftoff caches the memory start address and reuses it on repeated
    accesses. Deopt points may only be at calls at which liftoff
    invalidates the cached register anyways.
    
    Bug: 42204618
    Change-Id: I07e26d5720b97745c1edfd74872df44b9ca42fed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5573729
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94126}

commit 2a5f69053dce186605ce9c0e82f770c44fd6d693
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue May 28 08:30:36 2024 +0000

    [sandbox] Fix false-positive ASan crash
    
    When loading a pointer from the TrustedPointerTable with the wrong type,
    the returned pointer will point to a non-canonical address and will
    always crash in a safe way when dereferenced. However, when ASan is
    enabled, any dereference is preceeded by a shadow memory access. In that
    case, the math used to compute the address of the shadow memory may end
    up producing a canonical (but unmapped) address, thereby leading to a
    segfault that appears to be unsafe. This CL fixes that by using an
    explicit CHECK in ASan-enabled builds.
    
    Bug: chromium:342451736
    Change-Id: I997d9230641402cb5749587a75f846f7d5de7806
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5573734
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94125}

commit 4c1c3557af2241fd64f04327360ae98c8a342693
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 27 16:07:45 2024 +0200

    [deoptimizer][wasm] Unset thread_in_wasm flag in deoptimizer
    
    Bug: v8:42204618
    Change-Id: I53005c936388d54bb756d2739953d3d286a6a8cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5573725
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94124}

commit ce055138346f376a4806411d815dd0d5726dc059
Author: Benoît Lizé <lizeb@chromium.org>
Date:   Tue May 28 10:12:03 2024 +0200

    [cppgc] Don't decommit pooled pages twice
    
    Bug: chromium:326303884
    Change-Id: I41c6e84439341ba682a202c0a36f13f881abc2b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5573736
    Commit-Queue: Benoit Lize <lizeb@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94123}

commit 9c9c2796b1b0955045d452e2e1f381565fcd7ba2
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Tue May 28 13:24:38 2024 +0800

    [revec][x64] Fix DCheck fail from gap resolver
    
    CL:5480422 introduce an optimizating to remove redundant extractf128
    and use an ymm as xmm input. However, if there is an gap before the
    instruction who use ymm as xmm input, the gap resolver will throw a
    dcheck fail 'DCHECK(IsSimd256Register)', this CL is for fixing that.
    
    Bug: v8:12716
    Change-Id: I9accff2ef25e67aa30a645bbf5c84482b136e669
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5574387
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94122}

commit bec2823e7729b581f2b45316cd702283f85772d9
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue May 28 09:13:22 2024 +0200

    [maps] Fix generalizing fields in proto transition MapUpdater
    
    Retry fixing field generalization while prototype transitioning. As per
    issue 40451323 we want transitions between JSFunction maps to have
    equal property details. To maintain this invariant we must generalize
    both ends of the prototype transition for
    IsEquivalentForTransition to be satisfied.
    
    This fixes the incomplete fix in crrev.com/c/5553795
    
    Fixed: 342510510
    Change-Id: Ic2af4f2340b6fe517cda183f52599ea41104d5ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569705
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94121}

commit 9b2fa7880d8456539d122db7e6bec8f295779659
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue May 28 09:10:28 2024 +0200

    Revert "[turbofan][turboshaft] Reorganize pipeline.cc"
    
    This reverts commit 1b4976a75106216ad9c2e34c6992faf80c44cd35.
    
    Reason for revert: Seems to cause a number of chrome crashes
    
    Original change's description:
    > [turbofan][turboshaft] Reorganize pipeline.cc
    >
    > Perform a bunch of restructurings and cleanups involving compiler
    > pipelines, most prominently:
    > - Separate Turboshaft's PipelineData to be independent.
    > - Make Turboshaft's PipelineData more modular such that users (e.g.
    >   tests) need not provide components they don't need.
    > - Move many Turboshaft parts of the pipeline into a separate class.
    > - Introduce ZoneWithName[Pointer] to make lifetimes and zone relations
    >   more explicit and safe.
    > - Rename TurboFan's PipelineData to TFPipelineData.
    > - Express clear ownership of some data parts and properly transfer
    >   them between the different PipelineDatas.
    >
    >
    > Change-Id: I2517994dced7c5e4797bf2b090527c2ab22bc6ac
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538172
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94080}
    
    Change-Id: Id6d0315c50c7fb6640aea6474d0b6452e8dca7e8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572956
    Owners-Override: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94120}

commit 672b851e94bbdf09cb3575a3bd2303be864a472c
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu May 23 15:57:21 2024 +0200

    [heap] Regression test for issue 341769455
    
    Bug: 341769455
    Change-Id: If6357cec1c1b49b721584c93065bad4b70d1b48b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563823
    Reviewed-by: Andy Wingo <wingo@igalia.com>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94119}

commit 3435e03ee43ccbc4e0ed664516a223d7227b9ccc
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Tue May 28 06:04:17 2024 +0000

    Revert "[turboshaft][builtins] Ship builtins compiled with Turboshaft"
    
    This reverts commit 1e3135acbefba7867b1d4216ae0384d1e020cd8e.
    
    Reason for revert: Causing PGO builds to fail, see https://crbug.com/343107372
    
    Original change's description:
    > [turboshaft][builtins] Ship builtins compiled with Turboshaft
    >
    > Bug: v8:12783, chromium:40272314
    > Change-Id: I3827f1777603f4d3be800fa95c929d7d7880edfc
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572949
    > Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94108}
    
    Bug: v8:12783, chromium:40272314
    Change-Id: Ifa9daa72ee86f825bf031f0733a4ea55b3d91185
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572955
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#94118}

commit 9f56036d9814f4ec9f23224789768b50e06f721a
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon May 27 18:07:32 2024 +0200

    [heap] Move Heap prepare for teardown  into an earlier stage
    
    Detaching the CppHeap may cause a V8 GC to finish. Move into an
    earlier phase to avoid running into the NoGC scope.
    
    Bug: 342554794
    Change-Id: I3548e6cd4542057740d4f3d3190d44910d6736b7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5573906
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94117}

commit 50a150f94cb8f33c55fd1f0c979b928b8dd7cdf1
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed May 15 17:14:33 2024 +0200

    [heap] Don't sweep promoted pages
    
    Promoted pages are still iterated and zapped if needed, but we're not
    building a free list and the pages won't be available for allocation.
    The whole page is accounted as allocated.
    This change is meant to limit the number of pages accumulated in old
    space between full GCs, by accounting for promoted pages as fully
    allocated (rather than only accounting a few live bytes as allocated),
    and thus advancing towards the allocation limit.
    
    Bug: 40096225
    Change-Id: I95ff21efa3ebd47730430e49664fcd68612d5f29
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401779
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94116}

commit 77f045f1c9329cafc90edd347fba6f22e4687031
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon May 27 18:27:59 2024 +0200

    [maglev] Inline simple Number.parseInt cases
    
    Bug: v8:7700
    Change-Id: I01bbfa5a6343fc009f22c8df76e1f9508417ef23
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5573905
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94115}

commit 1d8a3083be63d4a958e89489bea98c01fda82576
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon May 27 17:25:42 2024 +0200

    [wasm][table64] Add table section decoding support for table64
    
    This is the first step of implementing support for table64.
    
    Bug: 338024338
    Change-Id: I2712f9b23fa6267d6d8e241c88c0fc91cb7cca2a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569672
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94114}

commit cdbb0d9da55b38f1a0a7d000538d24591736098f
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon May 27 17:14:36 2024 +0200

    [test] Fix MSAN issues uncovered by eager checks
    
    This should unblock the V8 DEPS roll.
    
    Bug: 40240570
    Change-Id: Id16e4a062dfb4e65d5c2ddc4359d7d8365ab9230
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569708
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94113}

commit 36f70f432c4de1b040b2565e24f0562f6b5eea96
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon May 27 14:00:39 2024 +0000

    [sandbox] Introduce CppHeapPointerTable and custom tagging scheme
    
    For pointers coming from the Embedder (such as various Blink objects
    that are wrapped by V8 JavaScript objects), we currently use the
    ExternalPointerTable. However, that table's type-tagging scheme only
    supports 70 different types, while Blink has hundreds or even thousands
    of different types. Furthermore, Blink makes use of type hierarchies,
    and so a type check for object A must succeed for an object B iff B is a
    (direct or indirect) subclass of A. As this isn't possible with the
    current scheme, all objects coming from the embedder currently use the
    same type tag, which is not robust against attacks.
    
    To address this, this CL now introduces a dedicated CppHeapPointerTable
    for pointers coming from the embedder. This table uses a different type
    tagging scheme based on range checks instead of bitwise ANDs. With that
    scheme, the type id (a 15-bit integer) is stored in the unused parts of
    the pointer. On access, the actual id is simply checked to be within the
    expected range of types. This allows for 2**15 different types while
    also allowing for subtype checks: a check for object A would simply
    check the range for all subtypes of A.
    
    In practice, this new scheme requires a few more instructions than the
    old scheme (2-3 on Arm64), but since these are constant-time operations,
    their overhead appears to be mostly negligible in practice.
    
    Bug: chromium:40940619
    Change-Id: I39049c523832b55a4ad7b3ae09f5b604306fb3c1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563324
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94112}

commit c061998738c11ec56a6ec9b2d946f548ad622312
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Wed May 22 16:28:52 2024 +0800

    [revec][turboshaft] Fix missed Simd256Extract128LaneOp::PrintOptions
    
    The `lane` whose type is `char` should be cast to int number before
    print.
    
    Bug: v8:12716
    Change-Id: I4dacaa63b82b78c5e6b4a388a6189e00582e08c7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5557261
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94111}

commit 63dd158747ff2d8b9e2bccb8613a6f2e7ad59786
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon May 27 14:34:42 2024 +0200

    [heap] Use distinct zap values for TracedNodes
    
    This CL uses different zapping values with the four cases that can get
    rid of traced handles:
    1) eager Reset()
    2+3) Freed by Minor/Full GC
    4) Reset() of weak handle in MinorGC
    
    Change-Id: I3adde9d1be1080d0c64d875cf1f20e436efa16f5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569702
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94110}

commit aabb0de7fec43862f6d184f4438c5f164da4c903
Author: JialuZhang-intel <jialu.zhang@intel.com>
Date:   Mon May 27 20:14:08 2024 +0800

    [maglev] Avoid call to ObjectPrototypeHasOwnProperty builtin if possible.
    
    If the input "key" of the "object.prototype.hasownproperty" JSCall
    comes from enum cache and the receiver is a heap constant, then we
    can replace the ObjectPrototypeHasOwnProperty builtin call with some
    compare and jump instructions.
    
    This CL can bring ~50% improvement on this micro case below:
    (just run maglev code with "--no-turbofan" flag)
    -----------------------------------
    const RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true,
    };
    
    function foo(config) {
        let i = 0;
        let propName;
        const props = {};
        for (propName in config) {
            if (!RESERVED_PROPS.hasOwnProperty(propName)) {
                i = i + 1;
            }
        }
        return i;
    }
    -----------------------------------
    
    Change-Id: I6023532ed839c348e5646adc7809719870b24375
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5517735
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Jialu Zhang <jialu.zhang@intel.com>
    Cr-Commit-Position: refs/heads/main@{#94109}

commit 1e3135acbefba7867b1d4216ae0384d1e020cd8e
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon May 27 12:51:12 2024 +0200

    [turboshaft][builtins] Ship builtins compiled with Turboshaft
    
    Bug: v8:12783, chromium:40272314
    Change-Id: I3827f1777603f4d3be800fa95c929d7d7880edfc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572949
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94108}

commit 4bec1839d7acb45c6ab7245c7d1110da5d8eafaa
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon May 27 14:13:57 2024 +0200

    [ic] Extend clone IC to support different representations
    
    When a clone IC contains a source-target pair of maps used in fast
    cloning, we must ensure that both ends of the clone agree on field
    representations. This CL adds a dependency using a special transition
    that allows a reconfiguration of the source representation to propagate
    to the target representation.
    
    Bug: chromium:40764103
    Change-Id: I4c5cb7cd461a8ed5608cc267cd040d13dfb7df4f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5505450
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94107}

commit e2d2d33e339943c21fa200f73ffbcb01390a80a9
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon May 27 09:41:53 2024 +0000

    [sandbox] Manually assign IndirectPointerTag values
    
    Previously, the IndirectPointerTags (used to ensure type-safe access to
    trusted objects) were constructed simply by shifting the instance type
    id to the left. This, however, is not guaranteed to result in conformant
    tags: for that, it must be guaranteed that for every pair of tags T1,
    T2, the result of T1 & ~T2 is nonzero. With this CL, the tags are now
    manually assigned to guarantee this property.
    
    Bug: chromium:337941142
    Change-Id: I92bf7f0450b5dd885c2a556db3759782082229fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572948
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94106}

commit 2694af8ba6140c1f8c9d830f1e5a25520ebe9f25
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 27 13:39:59 2024 +0200

    [deoptimizer][wasm] Address a few minor TODOs
    
    Bug: 42204618
    Change-Id: I1bb92e8447bcb2ea4a13d581d2a5378df41a20ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5562404
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94105}

commit 09e7c7a0b9c07237b972c48507559be106e7c26a
Author: Andy Wingo <wingo@igalia.com>
Date:   Mon May 27 07:03:40 2024 +0000

    [minor-ms] ArrayBufferExtension write barrier records slot
    
    Otherwise if the slot is initialized between concurrent mark and the
    minor pause, and the object is promoted, the slot won't be evacuated,
    leading the EPT entry to be reclaimed in a future minor collection.
    
    Bug: 341769455
    Change-Id: Iacc79a1063fb4bbb2c8444a903dd03061bf76a77
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563083
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94104}

commit d4b2933dd0e9b51bd86227556062270384409c14
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon May 27 09:38:16 2024 +0200

    [turboshaft] Maglev-to-ts: support CheckedTruncateFloat64ToUint32
    
    Bug: 42204525
    Change-Id: If700b781178aadd064ad75b86e90218f2724e4b4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569136
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94103}

commit bf046fed4ffa7a52be6408f4d21dc92f927ce86c
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon May 27 08:30:17 2024 +0200

    [turboshaft] Maglev-to-ts: support CheckSymbol
    
    Bug: 42204525
    Change-Id: I566d4e8cea09af0d5ea25e1d4b7eb0cdadd380ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569194
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94102}

commit 3819ebab771ba0aa600f73414fd2d31b1d5e16bd
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 24 15:10:14 2024 +0200

    [turboshaft] Maglev-to-ts: support CheckValueEqualsInt32
    
    Bug: 42204525
    Change-Id: I3e70b2d1f71b3ae9f0be433ba7f9291e600a5d8a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569670
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94101}

commit 548814009c7cf5d7f99704bc72a8de534118c7a6
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 24 15:09:21 2024 +0200

    [turboshaft] Maglev-to-ts: support ConstructWithSpread
    
    Drive-by: cleanup translation of Construct.
    
    Bug: 42204525
    Change-Id: I38b4e0cb2f20579ccd2d4b05efe5215dc645b67e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5568811
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94100}

commit 432460cde1a023ff3aa1190b51ae62a79d384847
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 24 15:08:33 2024 +0200

    [turboshaft] Maglev-to-ts: support (BranchIf)HoleyFloat64IsHole
    
    Bug: 42204525
    Change-Id: I3945435c85f5205ed93a57d7bb8d3ae01dfa2b56
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5570124
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94099}

commit 18b41b067d5f61c1105b01910a551a6fadbe6d9e
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 24 15:07:56 2024 +0200

    [turboshaft] Maglev-to-ts: support LoadGlobal
    
    Bug: 42204525
    Change-Id: I64f88156df609eb04a72f5c0ed80876e7bf8b89b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569190
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94098}

commit 0ee5179d6bc4c01a893c6cab40b6300f6ffe7186
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon May 27 09:43:37 2024 +0200

    [maglev] Remove unnecessary branch
    
    Bug: v8:7700
    Change-Id: I1586c4d93cd6fc5a97d16117d51292a38c8c5804
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569567
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94097}

commit ca6d6bdbbb4603b7940e909621b0b88991021201
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri May 24 18:22:55 2024 +0200

    [wasm][turbofan] kPure != kEliminatable
    
    For some string-related operations, the difference between "kPure"
    (=doesn't depend on effects) and "kEliminatable" (=does depend on
    effects, hence cannot be rescheduled across control flow) matters.
    
    No regression test because the only repro I know of turns into an
    endless loop when the bug is fixed.
    
    Fixed: 342197919
    Change-Id: Id57771e3bbdf0c4e432b21effb31fb2a2e983262
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569137
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94096}

commit 8f419023eedcaa71f23675e08c094ec5bc585c5d
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon May 27 11:06:37 2024 +0200

    [turboshaft] Fix typo in HAS_CPP_CLASS_TYPES_AS_TEMPLATE_ARGS
    
    Bug: v8:12783
    Change-Id: I7c4051068e38ae1bb8e8adc9b7b97bfa2da18e2c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569700
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94095}

commit 96b734350e8e17a33ccd9aa1cd9396d8f8aab4be
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri May 24 10:43:29 2024 +0200

    [bazel] Remove flag v8_enable_shared_ro_heap
    
    The flag was not used, and the implementation was incomplete. To avoid
    problems in the future the flag just gets removed.
    
    R=victorgomes@chromium.org
    
    Bug: 342428295
    Change-Id: I30cc91f9d40ae6ac125c5a9c8e2c0ea08cc2f11c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569669
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94094}

commit f835d095165f651072580509917817ae34be1323
Author: Daniel Cheng <dcheng@chromium.org>
Date:   Mon May 27 08:49:20 2024 +0000

    Cache heap pointer instead of getting it from an already-destroyed page
    
    This mirrors how LargePage::Destroy() already works and fixes a MSan
    use-after-dtor warning.
    
    Bug: 342919183
    Change-Id: I81d8a2bfb3f2411d4bfb714c14d449c6cb2ae3af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572476
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Daniel Cheng <dcheng@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94093}

commit 98db5af5e105038842b701c2f20f783ab7099efa
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon May 27 11:11:30 2024 +0200

    [maglev] Use TryBuildElementLoad in ArrayIteratorProtoNext
    
    ... since it correctly deals with holes.
    
    Fixed: 342460071
    Change-Id: I603c361a65d1515f49344905cb2b9085d822c9d9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5572946
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94092}

commit f8fb24da64e9ef5eec802e61920a803b37194841
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat May 25 19:14:03 2024 -0700

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/232dfc7b..2a7468c9
    
    Roll created at https://cr-buildbucket.appspot.com/build/8746915035404805825
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: I9c6f8dcc8f9c9ed5448b68ad08c595fd9b016e4a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5570606
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#94091}

commit 61d3749a850724f0a751ba68ae4bb19d806866e0
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu May 23 12:04:52 2024 -0400

    Fix kGuardPageSize on powerpc
    
    Size of a page on PPC is normally 64k.
    Change is needed to fix a test failure, more details are
    available under https://crrev.com/c/5541750
    
    Change-Id: I7b58c4a6eba1ae6c8208012643d8dc3424fccc2f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5564403
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#94090}

commit 0f719663da59ee690f3b72c520f8f9ea2328071a
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 24 15:07:24 2024 +0200

    [turboshaft] Maglev-to-ts: support Create{Object,RegExp,Array}Literal
    
    Bug: 42204525
    Change-Id: Ib850ed3a78c79e9ff522b9f015835bc00336feed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5568810
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94089}

commit f0ada6d1dc6208472c1b736f82019e90edee29fb
Author: Adam Klein <adamk@chromium.org>
Date:   Fri May 24 16:09:13 2024 -0700

    [cleanup][preparser] Remove dead code and simplify PreParser
    
    This CL started by identifying dead code using code coverage,
    then pulling on loose threads to simplify, then delete more dead code,
    or inline trivial factory functions, etc.
    
    Note the lack of changes to ParserBase, which ensures that there's
    no change to the parsing logic itself.
    
    Change-Id: Ief4daeeca9a04234a09ebaa1a14a7c69af35caf3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5571058
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94088}

commit d70afa267e503c72ca3921a72da5572029d11989
Author: Adam Klein <adamk@chromium.org>
Date:   Fri May 24 13:41:07 2024 -0700

    [cleanup] Remove dead functions under src/parsing/
    
    Change-Id: I951d9dd5f5b85916e862e85b223af2d4ef9efd74
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569646
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94087}

commit 896b74d6efad88d1932e769267122de531fbd4f5
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Fri May 24 09:18:09 2024 -0700

    [decorators] Add flag, accessor keyword and token
    
    This change doesn't do any functionality changes.
    
    Bug: 42202709
    Change-Id: I613b96b6e7630e10748e31162080a61e7da4c2a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5542951
    Commit-Queue: Luis Pardo <lpardosixtos@microsoft.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94086}

commit d2e2a93bfa9356804db671a36f84a75e7edd0b73
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu May 23 23:42:13 2024 +0000

    [explicit-resource-management] add await using to parser
    
    This CL adds the ability to parse `await using` to
    the parser. This CL also adds Symbol.asyncDispose.
    
    Bug: 42203506
    Change-Id: Ic37968418996cdbfbbd639b37768ae989177743b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5543127
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94085}

commit 19ce66d34795cea023abbd6d939b26ebd7c5fbd9
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu May 23 20:59:52 2024 +0000

    [scanner] Add another token look ahead to the scanner
    
    This CL adds PeekAheadAhead() to the scanner to get three token ahead.
    
    Bug: 42203506
    
    Change-Id: Ib1bfa5bf7fd6c2a0a7ec6b5b39dc21eaaae05edb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5558540
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94084}

commit e58a397c248ecb7b98f7da95eaacb094e632b497
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Fri May 24 08:16:33 2024 -0700

    Include InternalNodes in heap snapshots when exposing internals
    
    Currently, heap snapshots represent many Blink objects as "InternalNode"
    with size zero, and omit those objects entirely unless they point to
    something with a more meaningful name. This improves the readability of
    heap snapshots, but can hide a substantial amount of memory usage. This
    CL changes the heap snapshot generator to include those InternalNodes
    and their sizes if the user has enabled and checked the box titled
    "Expose internals (includes additional implementation-specific
    details)", because such users have explicitly opted in to see a more
    detailed snapshot. The InternalNodes shown are not immediately
    actionable, but there is a plausible pathway to success: InternalNodes
    have a tooltip with a "learn more" link which explains how to see class
    names in Chrome for Testing.
    
    This change also includes a drive-by improvement to shrink EmbedderNode
    by one pointer.
    
    Bug: 340200025
    Change-Id: Ic7b2fba8c3f45eedbc9a2fbeb33484c2c624cdaa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5542948
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94083}

commit d8a7ac2c1bff37fdceeb4e83031603245ac67ac6
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri May 24 17:10:56 2024 +0200

    [turboshaft][arm64] Fix BitcastWord32PairToFloat64 on arm64
    
    Turboshaft's BitwiseWord32PairToFloat64 operation was lowered to an
    incorrect instruction sequence on arm64. This CL fixes that.
    
    Bug: v8:12783, chromium:40272314
    Change-Id: I2ff269fe899a52f8bd7ba4156da88dabc96bb670
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5476487
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94082}

commit 5d111063b58e688b7ae5c448af86abe4dcd84bc1
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri May 24 15:22:26 2024 +0200

    [arm][builtins] Cleanup ExitFrame related code
    
    This CL makes the following changes:
     - adds explicit scratch register argument to Enter/LeaveExitFrame,
     - removes argument dropping from LeaveExitFrame which makes it uniform
       with other main architectures and unblocks accessing the exit frame
       arguments after the exit frame is dropped,
     - refactors register usage in CEntry implementation,
     - uses ExternalReferenceAsOperand(ER, no_reg) to generate less
       instructions.
    
    Bug: 328104148
    Change-Id: I3333ea2f05e999fd405565d2d5dcfeba21e3c080
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5570125
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94081}

commit 1b4976a75106216ad9c2e34c6992faf80c44cd35
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri May 24 17:04:32 2024 +0200

    [turbofan][turboshaft] Reorganize pipeline.cc
    
    Perform a bunch of restructurings and cleanups involving compiler
    pipelines, most prominently:
    - Separate Turboshaft's PipelineData to be independent.
    - Make Turboshaft's PipelineData more modular such that users (e.g.
      tests) need not provide components they don't need.
    - Move many Turboshaft parts of the pipeline into a separate class.
    - Introduce ZoneWithName[Pointer] to make lifetimes and zone relations
      more explicit and safe.
    - Rename TurboFan's PipelineData to TFPipelineData.
    - Express clear ownership of some data parts and properly transfer
      them between the different PipelineDatas.
    
    
    Change-Id: I2517994dced7c5e4797bf2b090527c2ab22bc6ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538172
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94080}

commit c225eb8a922f818683270edef2c225c03c87b0dd
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri May 24 15:50:11 2024 +0200

    [maglev] Use possible maps to specialize megamorphic accesses
    
    This will help us to figure out what .initialize we're calling in
    octane/raytrace despite it being megamorphic. It's the first call after constructing the instance, so we'll know the map of the
    instance. It doesn't work yet though since the arguments object creation
    is currently nuking the map info for the receiver before the actual
    .initialize load. We know those allocates can't alias though, so we
    shouldn't nuke the info. That's follow-up work.
    
    Bug: v8:7700
    Change-Id: I7b4e2f316a449355de1796f5c391c85a429227ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569671
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94079}

commit 6f4e7882edc5bf171ae04ae5826df4c965f25fe9
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri May 24 14:51:25 2024 +0200

    [maglev] Inline Math.abs
    
    Bug: v8:7700
    Change-Id: I96a6cfb2beebd4e537d32fa4642ef94316449ac4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563085
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94078}

commit df8b0c3afe676eb80601af770839f88a9e0e2ed2
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 24 13:54:24 2024 +0200

    [turboshaft] Maglev-to-ts: support Float64ToHeapNumberForField
    
    Bug: 42204525
    Change-Id: I6d02628e95b1f8c55962d0116933d2d842826120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569189
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94077}

commit 9237fd2098e06b05e03379e65d63078f3f9ae99f
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 24 13:52:48 2024 +0200

    [turboshaft] Maglev-to-ts: support CheckTypedArrayNotDetached
    
    Bug: 42204525
    Change-Id: Ie47528dd3226522245a044ceb4f2657bfdde0363
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5568809
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94076}

commit 8eee4001595b8f5342d4112d9079388887231b0a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri May 24 12:51:32 2024 +0200

    [turboshaft][wasm] Improve inlining traces
    
    Just adding a little bit more information to the tracing that was
    included in the turbofan traces as well.
    
    Bug: 41480394
    Change-Id: I158b6bae46d43dc001e6fa1cb0d99e785c7ed75c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569192
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94075}

commit 60bc78eff53e32cf8192ee964547fcf199498102
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu May 23 17:52:38 2024 +0200

    [turboshaft] Maglev-to-ts: DefineKeyedOwnGeneric/DefineNamedOwnGeneric
    
    Bug: 42204525
    Change-Id: I599eca9d6b9ed238bbccd47a787add0ba24a1462
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563328
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94074}

commit 1ecc8c685ee656487b00a4abb45e8a67b2473baf
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 24 12:33:29 2024 +0200

    [turboshaft] Maglev-to-ts: support AllocateElementsArray
    
    Bug: 42204525
    Change-Id: I565b0344a2638129dda8b23ac6377d0f6bd09d91
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563326
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94073}

commit b9fa77b45d0f7d7d4847d60361621e1573cac9bb
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri May 24 12:03:30 2024 +0200

    [heap] Move marking bit into separate byte for traced handles
    
    This CL moves the markbit from the flags_ field into a separate
    boolean field. This should not regress the size of TracedNode on
    either 32- or 64-bit architectures as we still use 2 words for a
    TracedNode. With this change the flags are now main thread only and
    do not need use atomic accesses anymore.
    
    This CL should also fix a data race where is_in_use() was used
    non-atomically in a DCHECK while the concurrent marker set the mark
    bit concurrently.
    
    Bug: 340789840
    Change-Id: I73fa6e9cc22fa3a6fc1d54922114911f9bb0db3a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569191
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94072}

commit 6ca36c7127b2832b6425c587067203a98fe7f3f4
Author: Marja Hölttä <marja@chromium.org>
Date:   Fri May 24 11:58:04 2024 +0200

    [taggedindex|maglev] Update more builtins to transmit feedback slot as TaggedIndex
    
    Currently, some builtins use TaggedIndex and some use Uintptr, and
    it's hard to select the correct one for each builtin. This CL unifies
    the following builtins to use TaggedIndex:
    ConstructWithSpread_WithFeedback
    ConstructWithSpread_Baseline
    ConstructForwardAllArgs_Baseline
    
    Bug: 42200059
    Change-Id: I68e522ebc516c75c2d64d46dcd2ea37bb4828676
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5569090
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94071}

commit eb0405803163b4376493c0e543a70ac3b68050c9
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu May 23 22:18:14 2024 +0200

    [heap] Use marking helper in write barrier
    
    Use the marking helper in the write barrier where possible.
    
    Drive-by: DCHECK invariants where we push directly to the regular worklist.
    
    Bug: 340989496
    Change-Id: I4215c0aa75bdc4a4d0e4e562024d88629d0217ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563332
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94070}

commit 22c404b8bbbb077eb6849e34e2568e2735a3ea7e
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri May 24 10:21:03 2024 +0200

    [heap] Clear stale slots on the stack as well
    
    Tagged stack slots in Maglev remain live for the whole function
    execution. Therefore it can happen that stale stack slots still have
    pointers to objects that got left-trimmed. This leads to DCHECK
    failures during GC. However, this is actually okay for Maglev because
    those stack slots are not used anymore.
    
    Ignition and Sparkplug do not have this issue because they generally
    do not have pointers to FixedArrays on the stack. Turbofan does not
    make stale stack slots part of the safepoint.
    
    Main thread handles have the same issue as Maglev. Here we already
    clear left-trimmed slots through a visitor before iterating these
    slots for the GC. We can use the same mechanism for Maglev stack
    frames as well. While this is actually only necessary for Maglev
    stack frames, we currently do not have this information about stack
    slots in the RootVisitor anymore. So for simplicity this CL uses this
    visitor for all managed stack frames.
    
    So far ClearStaleLeftTrimmedHandlesVisitor was a separate pass over
    all slots, this CL changes this class to forward all slots to the
    actual visitor. This avoids iterating the stack twice.
    
    Bug: 40063472
    Change-Id: I6fc40df7b4df5f54aab616163ec93f063f78af50
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563330
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94069}

commit 10cc6be0d30bc5cf33b830329a1b1f0a858c1dba
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu May 23 18:18:58 2024 +0200

    [wasm][simd][liftoff] Fix i32x4.dot_i8x16_i7x16_add_s
    
    Liftoff register allocation needs to be more careful to avoid
    aliasing, considering the complexity of the assembler backend
    implementations for this operation.
    
    Fixed: 341947685
    Change-Id: Ia0369311c4c49735ab163c57998dc04cd71d0a40
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563329
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94068}

commit b62f33c0c706c3f7c36b5abee8c51baecf3da0d0
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 24 10:33:03 2024 +0200

    [turboshaft] Maglev-to-ts: support Array.forEach
    
    Bug: 42204525
    Change-Id: I488864be10491add8f6c9c7e0092c57059eb94be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5562683
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94067}

commit 876f63ec40fefcdfa849a0d1e67f5f31c19a4508
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu May 23 09:39:24 2024 +0200

    [turboshaft] Maglev-to-ts: for-in loops and multi-return lazy deopts
    
    Bug: 42204525
    Change-Id: Id0df5d85bd7c16ea565d3266e5bf43daac6fe836
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5554239
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94066}

commit c53917471eb10f345ed6561c5c65b8c113f04738
Author: Luis Pardo <lpardosixtos@microsoft.com>
Date:   Wed May 22 16:23:43 2024 -0700

    [class] Fix has_static_private_methods_or_accessors in class constructor
    
    Currently the has_static_private_methods_or_accessors bit in class
    constructors is only set when the class has static private methods, but
    not when the class has only static private accessors. Because of this,
    classes with no static private methods don't show the static private
    accessors in devtools.
    
    Fixed: 342415792
    Change-Id: Iabe755a856a43dde89d74578c1b6208dd86ed218
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5552980
    Commit-Queue: Luis Pardo <lpardosixtos@microsoft.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94065}

commit 83f6b88b3d00c33656eb335cdba60864faa540de
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu May 23 21:05:36 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/93e3982..d273a5a
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/1f97358..ec40c25
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/062ecac..09c232e
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/0906c4a..e0a4f35
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/9c88d44..9772a0a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747088678206837553
    
    Change-Id: I8658d017217d7ada5d0f0194f24dd4a14bd30a2d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5565351
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#94064}

commit 571a94d946fb0c406eb3e5d45543c7108b96fa6a
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu May 23 14:53:31 2024 -0700

    [array-grouping] Remove the flag
    
    The proposal was shipped in M117.
    
    Bug: 42202446
    Change-Id: I8639614f3c78ae13fc0f776978204f64683bc99f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5566569
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94063}

commit 4f4496d1f259d2ba9b1d50ae622a413dc2cf6e6f
Author: Adam Klein <adamk@chromium.org>
Date:   Wed May 22 13:06:41 2024 -0700

    [d8] Basic support for data: URLs in module specifiers
    
    Only "text/javascript" modules are supported, encoding is assumed
    to be UTF-8, and further imports from inside a `data:` are ignored.
    
    Bug: 341871959
    Change-Id: I1b307f317a4a94fe2ce9344495221283c62b178a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5556231
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94062}

commit 21af1bc9eec78ba8d1d17e6ffd5977b12b581c9e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu May 23 09:07:05 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e3c3f5e..93e3982
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/4071d0d..062ecac
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747133979119088913
    
    Change-Id: Ie49df18d7701a502d2f52e20e9caed60b2a409ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5564405
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#94061}

commit 0f93f7646c6b2d94a3df8a1b5c2be27f1d0be817
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu May 23 15:31:34 2024 +0200

    [wasm] Update spec tests
    
    R=ecmziegler@chromium.org
    
    Bug: 342316792
    Change-Id: I0f09690eb3a5540efa2b0d03fcd4656e45a03121
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563843
    Reviewed-by: Emanuel Ziegler <ecmziegler@chromium.org>
    Auto-Submit: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Emanuel Ziegler <ecmziegler@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94060}

commit 1dabd07f029ccb04eb4096b6291fdff11a2e4973
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Thu May 23 12:43:52 2024 +0000

    Reland "[infra] Add bot_config overrides"
    
    This reverts commit e8c35c2f42f996bd9de04a500c7a591bcb993c8b.
    
    Reason for revert: Adding a whitespace change.
    
    Original change's description:
    > Revert "[infra] Add bot_config overrides"
    >
    > This reverts commit c841a311e46c46813bb6b2db6b35e121c5915e13.
    >
    > Reason for revert: Change does not trigger a new perf build.
    >
    > Original change's description:
    > > [infra] Add bot_config overrides
    > >
    > > Override perf bot ids to align the bot migration with a V8 revision.
    > > Additionally, add a presubmit check to validate the syntax of modified
    > > python literals.
    > >
    > > Bug: 333913216
    > > No-Try: true
    > > Change-Id: I23c21f547ba93cc95d8ada6b372bd44714771c03
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563084
    > > Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    > > Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#94056}
    >
    > Bug: 333913216
    > Change-Id: I153b5b38f7ebd2d4ccbf77b60841dafc1e88211f
    > No-Presubmit: true
    > No-Tree-Checks: true
    > No-Try: true
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563663
    > Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    > Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94057}
    
    Bug: 333913216
    No-Try: true
    Change-Id: I57527acdc9164536fb42908782dbcf419db1c7e6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563664
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94059}

commit 06949a68d0e20b7c3b8bc4e02ed10c6ee6a284ae
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu May 23 10:51:06 2024 +0200

    [deoptimizer][wasm] Support deopt inside inlined call_ref
    
    This requires passing information to liftoff if the location for which
    we request the LiftoffFrameDescriptionForDeopt for call_ref is actually
    about a deopt point (i.e. at the beginning of the call_ref instruction
    and therefore prior to the call or about an inlined location in which
    case it is about the location at the call / directly after the call.
    
    Bug: 42204618
    Change-Id: Ibca128fc307049072bda5a0491780790275e8967
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5558965
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94058}

commit e8c35c2f42f996bd9de04a500c7a591bcb993c8b
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Thu May 23 12:38:46 2024 +0000

    Revert "[infra] Add bot_config overrides"
    
    This reverts commit c841a311e46c46813bb6b2db6b35e121c5915e13.
    
    Reason for revert: Change does not trigger a new perf build.
    
    Original change's description:
    > [infra] Add bot_config overrides
    >
    > Override perf bot ids to align the bot migration with a V8 revision.
    > Additionally, add a presubmit check to validate the syntax of modified
    > python literals.
    >
    > Bug: 333913216
    > No-Try: true
    > Change-Id: I23c21f547ba93cc95d8ada6b372bd44714771c03
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563084
    > Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    > Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94056}
    
    Bug: 333913216
    Change-Id: I153b5b38f7ebd2d4ccbf77b60841dafc1e88211f
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563663
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94057}

commit c841a311e46c46813bb6b2db6b35e121c5915e13
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Thu May 23 13:44:04 2024 +0200

    [infra] Add bot_config overrides
    
    Override perf bot ids to align the bot migration with a V8 revision.
    Additionally, add a presubmit check to validate the syntax of modified
    python literals.
    
    Bug: 333913216
    No-Try: true
    Change-Id: I23c21f547ba93cc95d8ada6b372bd44714771c03
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5563084
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94056}

commit 05dc8e041ce7bb5a714f91070893d54c92c024d7
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu May 23 12:39:12 2024 +0200

    [wasm] Enable inlining by default
    
    This enables the wasm-into-wasm inlining by default for non wasm-gc
    modules (for wasm-gc modules it has already been enabled by default
    since launching wasm-gc).
    
    Also use atomic accesses to `WasmModule::num_small_functions` which is
    read by background compilation jobs.
    
    Bug: 40898108
    Change-Id: Id4b34aea6b63e3b67d9dd9a1c19230f400c40071
    Fixed: 341971943
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5562486
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94055}

commit af00e777dcce3c0796e02889f8881f21329cee5f
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu May 23 10:53:32 2024 +0200

    [heap] Introduce helper for bottlenecking marking worklist operation
    
    Introduces marking helpers that can be used for full GCs and young-gen
    sticky-markbit GCs. The helpers are used to bottleneck querying and
    pushing which allows adding more filters in future.
    
    - ShouldMarkObject(): Queries whether an object should be marked and
    also returns the target worklist. Currently only the regular worklist
    is supported but in future this can be used to signal pushing to the
    on-hold worklist.
    - GetLivenessMode(): Similar to ShouldMarkObject() but used for
    querying whether an object should always be considered alive (e.g.
    because it is in read-only space) or whether the markbit should be
    used for querying its liveness.
    - TryMarkAndPush(): Helper for marking and pushing an object.
    
    Bug: 340989496, 335479495
    Change-Id: I3c9c79feb1aeb843cf05a81060ce0dd85440e73a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553775
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94054}

commit a44f5e8862a4cb4c17c780dc97351d852940358d
Author: Carl Smith <cffsmith@google.com>
Date:   Thu May 23 12:33:56 2024 +0200

    Add DEBUG crash test to Fuzzilli builtin
    
    Add another crash test to the Fuzzilli builtin that ensures
    that DEBUG is defined.
    
    Change-Id: I3297f51b36ccfd6abd9ce6762a9fc5f61abb83ed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5562905
    Commit-Queue: Carl Smith <cffsmith@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94053}

commit f589868a85c9bcc8426a69fdb169f417e388f124
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu May 23 10:23:27 2024 +0000

    Revert "[infra] Add bot_config overrides"
    
    This reverts commit a7e166efbf9c24a106a64c8ce9e53cf46753d7ab.
    
    Reason for revert: breaks bots
    
    Original change's description:
    > [infra] Add bot_config overrides
    >
    > Override perf bot ids to align the bot migration with a V8 revision.
    >
    > Bug: 333913216
    > No-Try: true
    > Change-Id: I8f4ccedcb90c2a2be4f5a4c257fe610e8ce24d32
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5560923
    > Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    > Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94051}
    
    Bug: 333913216
    Change-Id: I41dff1a45c595f3c5c59ab9de12e398edf84aec0
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5562405
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#94052}

commit a7e166efbf9c24a106a64c8ce9e53cf46753d7ab
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Wed May 22 23:27:25 2024 +0200

    [infra] Add bot_config overrides
    
    Override perf bot ids to align the bot migration with a V8 revision.
    
    Bug: 333913216
    No-Try: true
    Change-Id: I8f4ccedcb90c2a2be4f5a4c257fe610e8ce24d32
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5560923
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94051}

commit f356529f1fba215cddb7c4c36e6b47d423f09715
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu May 23 10:58:46 2024 +0200

    [maps] Bazel: Enable "Always apply prototype transitions first"
    
    Also enable the prototype changes on bazel builds since newly added
    tests are blocking rolls.
    
    Bug: 332914927
    Change-Id: I33100ccb0742303bde36a077fc0fc0b0106a56cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5562484
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94050}

commit b7e419def57173517ba58089b5819d7cfcd2afa1
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Tue May 21 19:20:23 2024 +0800

    [riscv]Fix error about set_if_nan
    
    Change-Id: Ib6c50773b8923a2bc14f03f600c4228ed3a5c28a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553033
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#94049}

commit 3be10f36ea82b5f31b49d3e604d401de0688ee2d
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed May 22 19:13:43 2024 +0200

    [maps] Fix changing prototype in map normlization
    
    Setting the prototype needs to go through the SetPrototype bottleneck,
    which e.g., deals with r/o objects and non JSReceivers.
    
    Fixed: 341972220
    Change-Id: I4f0e31ae58c9d44d548708fcd77c14026d90e25a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5559543
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94048}

commit d09065e54f4ace889085a3e156364fc53b81d6cd
Author: Marja Hölttä <marja@google.com>
Date:   Thu May 23 08:38:25 2024 +0200

    [taggedindex|maglev] Fix ConstructForwardAllArgs_WithFeedback
    
    Maglev calls it with a TaggedIndex, but it takes an Uintptr.
    
    This only works by accident because the index is currently always 0.
    
    Bug: 42200059, 340100647
    Change-Id: I1951fef71a781e8466fb6b0aae0cddab14cb38a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5562483
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94047}

commit 9c63b644d9a6f414bcd62b1388f3b99484591972
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu May 23 09:40:03 2024 +0800

    [riscv][fastcall] Enable float support on riscv64 simulator
    
    Add IsReturnFloat64 in EncodedCSignature to support NaN Boxing float32.
    In RISC-V float32 need be NaN-Boxed, More details are under riscv spec: https://github.com/riscv/riscv-isa-manual/blob/aaf37804a85f7f1ed147e99e6efb2ffd29916d2a/src/d-st-ext.adoc#nan-boxing-of-narrower-values
    
    Port commit 098f31f49593fce4148717ccaf5f2b05b4ea9ad0
    Port commit a6da8161197577a2221f5880cde4195f4ff92626
    
    Change-Id: I1b4a86e597c29ae9a115aa00fb4f46421a2a55a8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5545261
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#94046}

commit d102f298cc9cd5e21c380d2efee7b69cef910257
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed May 22 16:53:56 2024 +0200

    [wasm] Speculative inlining of return_call_indirect
    
    Only the codegen for Turboshaft was still missing, the feedback
    collection we already got "for free" since the Liftoff implementation
    for call_indirect and return_call_indirect is nicely factored.
    
    Bug: 335082212, 41480394
    Change-Id: I083b712f42f2952fbbb88c4a16d2f1479acf445d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5558963
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94045}

commit 68948e01924837f84b954808c5672150a59fb2bf
Author: Liviu Rau <liviurau@chromium.com>
Date:   Thu May 23 01:02:01 2024 +0200

    [test262] Check if approval is possible
    
    Bug: 341524545
    Change-Id: Ia4a005f40c850cd8c6cd35bf0b80d00e760eef60
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5559544
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#94044}

commit af0fd2de98c290821c89080007f0d96bb6f7fe62
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu May 23 09:30:14 2024 +0200

    [turboshaft] Maglev-to-ts: disable Wasm test in some configurations
    
    Bug: 42204525
    Change-Id: Iec025dc7ed607f4c4d3426ec3386431a67913190
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5562485
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94043}

commit bc1263ec361c9d364438d66bf5cd311304eaee38
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu May 23 08:55:22 2024 +0200

    [maglev] Inline ArrayIteratorPrototypeNext
    
    Bug: v8:7700
    Change-Id: I99db77b9ecc468f95ca3e5362a0597ed3e1769aa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5554554
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94042}

commit 818f1beb05a9fbefc509c171901b827bb079cf32
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed May 22 21:03:31 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/bf6d752..e3c3f5e
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/0c55798..4071d0d
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/c6e0c05..0906c4a
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/a974ad6..9c88d44
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747179277426212225
    
    Change-Id: I2e22698848549e191d1d2714bab51cc9f0dcba02
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5560844
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#94041}

commit 23b34a5b89a002b324da27a8d7a4fa1a784b13e5
Author: Luis Pardo <lpardosixtos@microsoft.com>
Date:   Mon May 20 16:56:31 2024 -0700

    [parser] Remove ClassInfo and ClassLiteral has_private_methods fields
    
    Removing unused fields
    
    Change-Id: Iaad0041e399d1bd46f38e8a32e21ad70745b9432
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5552029
    Commit-Queue: Luis Pardo <lpardosixtos@microsoft.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94040}

commit c5d51038df443cd445b498fa8aee477d70c3b7f9
Author: Adam Klein <adamk@chromium.org>
Date:   Tue May 21 14:13:38 2024 -0700

    Add gdeepti and syg to ENG_REVIEW_OWNERS
    
    Change-Id: Ia811d6650c1a7d2bc9e1e269c694217a14946dc3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5555850
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Reviewed-by: Deepti Gandluri <gdeepti@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94039}

commit 8038add2a4f4df9c10b8ab71a8a2cf9728b63864
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed May 22 09:03:20 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/ac7020f..bf6d752
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/f81f6c0..b027bd3
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747224575577562897
    
    Change-Id: Ic66a623678db400110e608228488c0f339778bb8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5559006
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#94038}

commit 91c7db7c957e05f79cb0823ac5dd23cc47d9c388
Author: Eva Herencsarova <evih@chromium.org>
Date:   Wed May 22 16:31:33 2024 +0200

    [wasm][turboshaft][fix] Return member to avoid signalling NaN flipping
    to quiet NaN
    
    To get the float32 or float64 values from the Storage, we call the
    corresponding getter methods that return a float or a double. This
    causes issues if the value is a signaling NaN which gets converted to a
    quiet NaN on ia32.
    This CL is a quick fix to return the member itself instead of calling
    the getters.
    
    Fixed: 339704607
    Change-Id: I811be14e6553a2f80fcc12754fa166029375f92e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5557703
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94037}

commit e9a964ec8511a1fb131172eb8b5ede54dda1d113
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 22 16:45:42 2024 +0200

    [turboshaft] Maglev-to-ts: support ConvertReceiver
    
    Bug: 42204525
    Change-Id: I39ccc04a75d32d5b3082b2f0626e4b67c56f95ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5555385
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94036}

commit fa963c42cf58e6ce275e160541ca6fe5fddbddae
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 22 16:03:16 2024 +0200

    [turboshaft] Maglev-to-ts: support HasInPrototypeChain
    
    Bug: 42204525
    Change-Id: I3df69a5ef055f36849797e6ae75684500c2e5e8d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5554284
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94035}

commit 5b7009fddf78df778675d569c980b0344056e3e2
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 22 15:41:16 2024 +0200

    [turboshaft] Maglev-to-ts: support CallKnownAPIFunction
    
    Bug: 42204525
    Change-Id: I3b6fbb6cf06a08ca5c62adb4f71173d751160691
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553794
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94034}

commit 0237fab4e3b158f92b1f0ede28179e34ba05aad0
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed May 22 02:05:45 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/dbd3873..ac7020f
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/1bce012..1f97358
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/d32e1cb..0c55798
    
    Rolling third_party/fp16/src: https://chromium.googlesource.com/external/github.com/Maratyszcza/FP16/+log/0a92994..95163a7
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/33af80a..9b4993c
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/fc3fb07..5067b87
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/419b03c..c6e0c05
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/a67d6c1..a771d3f
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/4f653ff..209717d
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/aa1c946..a974ad6
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747250765157952721
    
    Change-Id: I63d87811de5f915606304227da3089241065bc60
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553996
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94033}

commit df52f26378b74834fc8e7e4a184029ea6e20fe40
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Wed May 22 15:03:56 2024 +0200

    [maglev] Drop lazy-deopt from ForInPrepare
    
    It can't actually lazy deopt.
    
    Bug: v8:7700
    Change-Id: I05cba92f665444c464628404c34c57676b649a78
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5558023
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94032}

commit 3a6059be843de456c05b7b3ec9eaa9e62bc9c451
Author: Liviu Rau <liviurau@chromium.com>
Date:   Wed May 22 14:02:51 2024 +0200

    [test262] Export only landed CLs
    
    This CL is a no-op until dependant https://crrev.com/c/5554257 lands. After that our exporter and approver will no longer query for in flight CLs and try to export them.
    
    Bug: 330319384
    Change-Id: I65acfdd1f812a8ac901d0e4b2d87d9a58aacc897
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5555388
    Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#94031}

commit eee76b8bd6b891ec9ecba6f69a4ca25357b9ef7b
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed May 22 14:40:04 2024 +0200

    [heap] Speed up indirect pointer write barrier
    
    This CL replaces the page flag checks in the indirect pointer write
    barrier with directly checking the is_marking flag on the isolate.
    The deferred code path is now only entered if marking is enabled,
    while previously it was always entered when writing into old objects.
    This should help in making the barrier faster and more cache-friendly.
    
    We do not need page flag checks because we know that the value has
    to be an ExposedTrustedObject and cannot be e.g. a read only object
    like undefined.
    
    This check is always precise except when the shared heap is enabled.
    In this case is_marking may be true on client isolates for enabling
    the shared marking barrier while incremental marking is not enabled
    for this client isolate itself but only for the shared space/main
    isolate. Should this ever become a problem, we can simply introduce a
    "is_marking_local" flag that we could check instead.
    
    Bug: 338342768
    Change-Id: Ibe37352b1dc7f0bffa03b1cbfcbbd0597864c419
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5543923
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94030}

commit cc30e8711bed71c56c5bbb332876d531e234498a
Author: Ho Cheung <hocheung@chromium.org>
Date:   Wed May 22 20:31:35 2024 +0800

    Fix broken v8 autoroller
    
    Since `re2` deleted `src/util/logging.h`, and
    `src/util/logging.h` still exists in `re2`
    BUILD.gn in v8, the autoroller cannot execute
    normally.
    
    This CL manually intervenes to repair problematic
    files.
    
    Broken autoroller example:
    
    https://chromium-review.googlesource.com/c/v8/v8/+/5553996
    
    https://chromium-review.googlesource.com/c/v8/v8/+/5554341
    
    Delete `src/util/logging.h` CL in `re2`:
    
    https://code-review.googlesource.com/c/re2/+/63091
    
    Bug: 341803745
    Change-Id: Id85623ba42aa22437a1962582b77dcb84f3ddd92
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553643
    Commit-Queue: Ho Cheung <hocheung@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94029}

commit 7b02c61f95a798b0a00c03c7abe1302654c19bcc
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed May 22 14:09:24 2024 +0200

    Reland "[heap] Disable HWASAN for stack scanning"
    
    This is a reland of commit 443ad4df80a5ef8231088ddf8eef11ee458695bf
    
    The reland fixes a typo with the attribute macro.
    
    Original change's description:
    > [heap] Disable HWASAN for stack scanning
    >
    > HWASAN trips over tag mismatches when conservatively scanning memory.
    >
    > Bug: 341126035
    > Change-Id: Ifb5089c422c8d232422e636767e15085f4b0e1aa
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553850
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94007}
    
    Bug: 341126035, 342102429
    Change-Id: I8dfd916fb1e1bb81ced4dd8d5b4af592b777d512
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5554238
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94028}

commit d6fba09a16e7c61f89d564d3365f24c11f552cfa
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed May 22 14:00:43 2024 +0200

    [wasm] Fix branch hint in speculative inlining
    
    There was an off-by-one in `bool is_last_case = (i == case_count - 1)`
    for both the `CallIndirect` and `CallRef` implementation that made the
    condition always false. Introduced in https://crrev.com/c/5518892.
    (No correctness bug, since this is only a branch hint.)
    
    Drive-by: Spell out some of the magic constants, make implementations of
    call_indirect, call_ref, and return_call_ref more similar to each other
    (in preparation for adding return_call_indirect inlining).
    
    Bug: 335082212, 41480394
    Change-Id: If0c71c8460dede5a4f4527dfe959c4c321a5b19e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5555386
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94027}

commit e12d7ea86e90e49cfe047957df3de5d8034ccecf
Author: Boris Sazonov <bsazonov@chromium.org>
Date:   Wed May 22 10:57:48 2024 +0000

    Revert "[heap] Disable HWASAN for stack scanning"
    
    This reverts commit 443ad4df80a5ef8231088ddf8eef11ee458695bf.
    
    Reason for revert: https://crbug.com/342102429.
    
    Original change's description:
    > [heap] Disable HWASAN for stack scanning
    >
    > HWASAN trips over tag mismatches when conservatively scanning memory.
    >
    > Bug: 341126035
    > Change-Id: Ifb5089c422c8d232422e636767e15085f4b0e1aa
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553850
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#94007}
    
    Bug: 341126035
    Change-Id: I3475e2749a1bd797d3d5a1fd4b58e3d5f66a83ce
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553987
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Boris Sazonov <bsazonov@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94026}

commit aadbcd5a98d3cf3b307be77ea056e2661c5ee559
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 22 12:25:02 2024 +0200

    [base] Change PointerWithPayload to accept incomplete types
    
    Currently PointerWithPayload is templatize by using a complete type,
    which means that we cannot define a PointerWithPayload of a not yet
    defined type, eg:
    
    class MyType;
    PointerWithPayload<MyType>; // Fails compilation
    
    However PointerWithPayload is essentially a pointer, so if we
    pass the pointer type instead, we can allow incomplete types.
    
    Change-Id: I3a273419599bdfbd2f21060d1fa749d82ce3adea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553986
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94025}

commit aace42af9011031bf2bbc42a019ec0381f21a7ac
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue May 21 14:47:51 2024 +0200

    [deoptimizer][wasm] Support deopt inside inlined direct return call
    
    Pseudo code example:
      function a(target) {
        return_call b(target);
      }
      function b(target) {
        call_ref(target)();
      }
      function c() {}
      function d() {}
    
    In this case we might have type feedback for b that target == c.
    When we optimize a, we inline b and speculatively inline c with a
    deoptIfNot(target == c).
    Now, if we call a(d), even though a is the optimized function with the
    "wrong" speculation, we only construct an unoptimized output frame for
    b, but not for a, as the return_call has already happened.
    We still need to "throw away" the optimized code for a though as it
    contains the mis-speculation.
    
    Bug: 42204618
    Change-Id: I6b6a9de6b47b97cefee610e273b63f1048e27d41
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5554494
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94024}

commit 4832756c1876eab71a48113ee76159ab4d7d0858
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed May 22 17:07:00 2024 +0800

    [loong64][mips64] Skip turboshaft-maglev-frontend test
    
    Maglev is not supported by loong64 and mips64 port yet.
    
    Change-Id: If35c06b71a4b4158333d2fc1572445fd7b508d09
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5554076
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94023}

commit 2aec325ba38ee272d4c0100b9e6a4a4e46a2a206
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 22 09:00:25 2024 +0200

    [turboshaft] Disable forced unrolling for IF/ELSE in DEBUG builds
    
    This is a temporary fix to unblock the lacro dcheck builds, which have
    been failing for almost 10 days now, because Clang doesn't manage to
    unroll some Turboshaft IF/ELSE loops.
    
    (the more permanent fix will be to figure out why Clang doesn't unroll
    the loop on this build, and tweak something so that it does)
    
    Fixed: 339058547
    Change-Id: I4549f43ad6fab7e94ae2e75e6de287e87a1415c1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5557061
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94022}

commit f63b3be6fb16c94312b382eb8c2f4024322aac4a
Author: Fanchen Kong <fanchen.kong@intel.com>
Date:   Mon May 20 10:24:44 2024 +0800

    [x64][liftoff] Fix I32x4DotI8x16I7x16AddS on x64 with AVX-VNNI support
    
    This change fixed an issue on I32x4DotI8x16I7x16AddS of writing the src operand on x64 AVX-VNNI enabled devices.
    
    Bug: 337144154
    Change-Id: Ic344bf2eb98f5ca6760fef088a14f7139d487ad8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538758
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94021}

commit 10eacfe5dbf93b00d5dda0d9776196fd401dc057
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 22 10:13:19 2024 +0200

    [maglev] Improve static typing for inlined allocations
    
    Bug: v8:7700
    Change-Id: Icf6322d56a8c7e4a9d4ed3b102b06827d49687e6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5557064
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94020}

commit 1e9a141bf2c8e9b046bb88ff90ab58a79c812f08
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Wed May 22 14:25:07 2024 +0800

    [revec][wasm][turboshaft][test] Improve turboshaft revec test framework
    
    The unit tests for revec are mainly under test-run-wasm-simd. With
    turboshaft enable, the test can only verify the program output, but can
    not verify if the revec is successful. This CL introduce a verifier to
    handle this.
    
    Bug: v8:12716
    Change-Id: Ia7b44df0817d6082f1c2adc2ad674fb3160e3ceb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5523343
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#94019}

commit edd66753fec39970b296165447ab22541270cfbb
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 22 09:58:25 2024 +0200

    [maglev] Fix BranchRootConstant for holey doubles
    
    If we are not comparing to undefined, they should always return false.
    
    Fixed: 341972221
    Change-Id: I61aafc6a18682eb02fb0fa43bb5a77d19bb0552e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5555384
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94018}

commit 2f5780caeff0f9fe514d171651a1189af5f86c0c
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue May 21 15:54:00 2024 +0200

    [heap] Support references from local objects to shared trusted objects
    
    So far entries in the trusted pointer table could only store objects
    to isolate-local trusted objects. This CL also allows to store
    references to shared trusted objects into those tables.
    Note that the trusted pointer table is and remains isolate-local with
    this CL. This CL only handles references from an isolate-local
    object into the shared heap.
    
    With regular local->shared references we track such references in the
    OLD_TO_SHARED slot set. For references to shared trusted objects, we
    do not need an additional remembered set. This is because a shared GC
    will iterate the trusted pointer table entries of all client isolates
    during the atomic GC pause and mark all shared trusted objects
    referenced by them.
    
    This means that client isolates do NOT need a shared marking barrier
    to mark shared trusted objects on object stores. Since the new value
    will be found in the atomic GC pause in the client's trusted pointer
    table. However, a shared GC will not iterate the main isolate's
    trusted pointer table. So the main isolate still requires the marking
    barrier.
    
    Bug: 338342768
    Change-Id: Icec5875cd14bdf8a3428705de74ed561d24ba0bf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538398
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94017}

commit e46fda4d27a9505c3f4fe70a27eee71a2bd1c593
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue May 21 22:01:54 2024 -0700

    Update fuzztest (trusted)
    
    Rolling third_party/fuzztest: https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+log/7bf252c..647d62d
    
    Roll to latest fuzztest. (Adrian Taylor)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/647d62d
    
    Rolling third_party/fuzztest/src: https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/3458410..32eb84a
    
    #Centipede Use correct ABSL_VLOG_IS_ON i/o VLOG_IS_ON (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/32eb84a
    
    #Centipede Intercept and trace calls to strncmp. (Filip Niksic)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/fb39722
    
    #Centipede Make the DSO limit larger. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/9065dfd
    
    #Centipede Export the corpus files directly to the coverage dir. (Filip Niksic)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/6518a7f
    
    Sort the file paths to replay in deterministic order. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/93a81f5
    
    Run only fuzz tests in fuzzing mode when no test or test filter is specified. (Filip Niksic)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/00d4bae
    
    #Centipede Store the distilled corpus while updating corpus database. (Filip Niksic)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/4bf228c
    
    Fix the way corpus database path is constructed. (Filip Niksic)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/12b5254
    
    ...
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747266098995348993
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Change-Id: I1057baa39b1877cc966f266632fc9af82f27f1ee
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5554342
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#94016}

commit 6a55ab701e67b00d7556c06e5ecc9218c29e42e7
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue May 21 18:25:40 2024 +0200

    [maps] Fix dcheck to allow generalizing fields in MapUpdater
    
    When prototype transitions overflow we generalize the target map. The
    reason is that without the transition entry a potential future field
    generalization cannot find the target map anymore. Thus we apply the
    generalization eagerly. This caused the overly strict
    
        DCHECK(old_map_->EquivalentToForTransition(...)
    
    in the MapUpdater to fail.
    
    Fixed: 341858978
    Change-Id: I6a2581b1602eeac201785abff6a30794f1ef1678
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553795
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94015}

commit 3e037e195e508dea045f5626862412e8f64fc919
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue May 21 10:06:20 2024 -0700

    [parser] Using FunctionParsingScope for parsing class static blocks
    
    Class static blocks contain statements, don't inherit the
    ExpressionScope stack.
    
    Bug: 341663589
    Change-Id: Id52a60d77781201a706fcf2290d7d103f39bed83
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553030
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94014}

commit bf4298bafd04910c2cd634738ae73f4a4151b47d
Author: Issack John <issackjohn@microsoft.com>
Date:   Mon May 20 15:47:56 2024 -0700

    expose error stack trace limit through the api
    
    We want to expose the Error.stackTraceLimit through the api
    so that embedders can read this value. For context,
    the call stacks in crash reports feature needs to limit
    the number of reported frames to the value specified
    in Error.stackTraceLimit.
    
    Usage prototype:
    https://chromium-review.googlesource.com/c/chromium/src/+/5546991
    
    
    Bug: 40268201
    Change-Id: I97a976f5abb164f7abeb0b13a6d400b1222b477e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547683
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Seth Brenith <seth.brenith@microsoft.com>
    Commit-Queue: Issack John <issackjohn@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#94013}

commit 315c974477e8100b024b3d2894594b48e5b33008
Author: Adam Klein <adamk@chromium.org>
Date:   Mon May 20 16:35:53 2024 -0700

    [cleanup] Remove dead code from runtime-promise.cc and runtime-regexp.cc
    
    Dead code identified by the coverage builder.
    
    Change-Id: Ice70748be29c59f6c5f6b7c3b23443de0a3e5156
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5552027
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94012}

commit 0dafe51a6b0934304bf16d844120939069eb6fce
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 21 13:29:12 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - ReduceCatchBlockBegin
    - CheckEqualsInternalizedString
    - StoreMessage
    - LoadMessage
    
    Bug: chromium:331100916
    Change-Id: Ie3cfe55f0329954ae6bea81e485e4abf1737e4f5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5554770
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94011}

commit c61ee2c1f2b92cdea90d0a711f1254e565a47c58
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue May 21 14:22:54 2024 +0200

    [heap] Simplify visitation wrt to marking methods
    
    All the concrete visitor needs to provide is the right marking state,
    there's no need for TryMark() and other invididual methods.
    
    Bug: 340989496
    Change-Id: I73a21caaa222491dad8892296c7ec08945b2e597
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553774
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94010}

commit 4102d6b7b14264a6cea49e094baf335922e964a0
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue May 21 14:33:59 2024 +0200

    [heap] Verify shared trusted spaces as well in the heap verifier
    
    The heap verifier was not actually verifying the newly added shared
    trusted spaces.
    
    Bug: 338342768
    Change-Id: Ib2deb98bc5f9201f1658d11fc04b2f50dd81b3dd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553773
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94009}

commit 8ce5e410e6af05647a7af4fc9430576d9bbe8b64
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue May 21 13:52:56 2024 +0200

    [maglev] Statically fold TestTypeOf
    
    Bug: 341095539
    Change-Id: I5eb832cf5becadb6475b8852e84509a0c8b05d6c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547897
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94008}

commit 443ad4df80a5ef8231088ddf8eef11ee458695bf
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue May 21 09:02:19 2024 +0200

    [heap] Disable HWASAN for stack scanning
    
    HWASAN trips over tag mismatches when conservatively scanning memory.
    
    Bug: 341126035
    Change-Id: Ifb5089c422c8d232422e636767e15085f4b0e1aa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553850
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94007}

commit ea03776b70cdfdd7098b5d076b8b9c00222d6bdc
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue May 21 13:46:49 2024 +0200

    [maglev] Consider number values in BranchBuildIfRootConstant
    
    Non-tagged values (and numbers) should always return false when
    comparing to a root constant, except HoleyFloat64, which can be
    undefined.
    
    Drive-by: if iterator_method is untagged, then just throw an
    exception in GetIterator.
    
    Fixed: 341167196
    Change-Id: Id6a20c3d6e3d40e7c03e0a8e877464ab29ac1fcb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5553851
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94006}

commit 5366afe702348ae70a180969c4f22a5210d86975
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue May 21 12:40:40 2024 +0200

    [infra] Add drumbrake builders on Windows
    
    Runs tests in CI with FYI priority and associated longer timeouts.
    The extra variants includes jitless and nooptimization, which are
    relevant for this builder.
    
    No-Try: true
    Bug: 340822364
    Change-Id: Ie73180d2f2517379418934c7b761529399533503
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5554272
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94005}

commit 9e59b9023328e4c85990b20ce6a204a4e90d86c3
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue May 21 13:19:58 2024 +0200

    [maglev] Refine element feedback
    
    If we already have known node feedback, we can refine recorded feedback.
    This allows us to e.g. drop repeated TransitionElementsKind* nodes.
    
    (Small side improvements: turn AddNewNode<CheckHeapObject> into
    BuildCheckHeapObject to avoid unnecessary checks.)
    
    Bug: v8:7700
    Change-Id: Ie9419ee3d8b646c84a4440d38632ffa9cfd625fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5545560
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94004}

commit 826de929e0591e566be9ebabe8169b071c7e3016
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri May 17 16:03:22 2024 +0200

    [deoptimizer][wasm] Correct handling of inlined parameter stack slots
    
    - fix using the wrong parameter stack slot count in case of inlined
      frames
    - zero out the intermediate parameter stack slots to support GC runs
      on the deoptimized frames
    - fix the frame slot calculation for the trusted instance in case of
      inlined frames
    - fix the calculation of caller_frame_top_ in case of inlined frames
      with different parameter counts
    - fix the feedback vector lookup in case of imported functions
    - fix the smi tagging of the frame type marker on non-pointer-
      compressed builds: The tagging always performs a left shift by 1
      while the smi tagging shifts by 32...
    
    Bug: 42204618
    Change-Id: I9bfc15504a674d9a84e9846942614fa4be623ee0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5545239
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94003}

commit 0dc51a4efdd1feeacef7887565f5050afcfb357f
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 21 11:36:54 2024 +0200

    [turboshaft] Maglev-to-ts: support CheckedSmiTagFloat64
    
    Bug: 42204525
    Change-Id: Id9b152cd0896ffbe6d1365c86dc0a864ef47f0b6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538024
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94002}

commit 955cd23545f004e7af67dbb7cea84defe7427ca7
Author: Anton Kirilov <anton.kirilov@arm.com>
Date:   Wed May 15 18:56:31 2024 +0100

    [arm64] Add disassembler and simulator support for the SDOT instruction
    
    This change makes the tests pass when all optional features are
    enabled on the Arm64 simulator.
    
    Change-Id: I5c258330f50c2a8a10602a650d23e2cdeb868830
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538159
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Anton Kirilov <anton.kirilov@arm.com>
    Cr-Commit-Position: refs/heads/main@{#94001}

commit 0fddf5854856b904a3fd951b26cdcacff8541e7f
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 21 11:31:40 2024 +0200

    [turboshaft] Maglev-to-ts: support ChangeUint32ToFloat64
    
    Bug: 42204525
    Change-Id: Idfc890e4a4724e539e25c35d57816bf968fe0cb8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544145
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#94000}

commit 7ec53a91d224e04a97f9d5cfe72071c5d3c0cd64
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 21 11:28:29 2024 +0200

    [turboshaft] Maglev-to-ts: support CreateShallowObjectLiteral
    
    Bug: 42204525
    Change-Id: I7a498fc634562271fc99db1adb59072f7dd4564c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544457
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93999}

commit c0028d45a8290dde5d08fdb6459c863f1ac8fd32
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 21 11:27:41 2024 +0200

    [turboshaft] Maglev-to-ts: support CreateClosure
    
    Bug: 42204525
    Change-Id: Ibbbf27de322ec7e2f8a6b56633f2a2f1918b4a7c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537987
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93998}

commit bf0977286eef87adadbc803b993806212d8bc75b
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed May 8 16:35:03 2024 +0200

    [maps] Enable "Always apply prototype transitions first"
    
    Enable the changes introduced in crrev.com/c/5467810
    
    Bug: 332914927
    Change-Id: I1b0ce7373458bd56214aca838c9ef1ee8d3540a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526478
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93997}

commit dee21f1d758ad2dc0f5b67bc5f122f1b4f72b1d5
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 21 11:18:41 2024 +0200

    [turboshaft] Maglev-to-ts: support constructors
    
    Bug: 42204525
    Change-Id: I592fb7b1f6681b1b1bc131841cd2aa84e8503254
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544142
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93996}

commit a568df406762f1a8d957701895caec7bd01ed77c
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue May 21 10:18:29 2024 +0200

    [heap] Reuse regular RootMarkingVisitor for incremental marking
    
    This eliminates `IM::WhiteToGreyAndPush()` and instead just reuses the
    regular bottleneck of the full collector.
    
    Bug: 340989496
    Change-Id: Ib8e186bc4ca0df3c46f2851480fd69c051d06b30
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547859
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93995}

commit eaf109fd8f10f328a611df2a39ee7c1178d61b36
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue May 21 10:04:07 2024 +0200

    [maglev] Fix typeof check for callables
    
    This check is potentially missing a heap object check.
    
    Fixed: 341181412
    Change-Id: I0dca3c25a6e1a9226ea0988e069956f7f3c3790f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5545240
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93994}

commit f28976a3ba6c3ad544ca6b300c252f31923aaa8a
Author: Adam Klein <adamk@chromium.org>
Date:   Fri May 17 14:31:55 2024 -0700

    [cleanup] Remove dead BigInt runtime code
    
    Most binary BigInt binary ops are now handled in the compiler,
    so we can remove BigInt C++ runtime code that's no longer called,
    along with support code in src/bigint.
    
    The remaining op called via the runtime is exponentiation, which is
    refactored to its own runtime function (with a bit of added test
    coverage).
    
    Note that the BigInt arithmetic ops are still used by the Temporal
    implemention, thus not deleted in this CL.
    
    The dead code was identified by the code coverage build.
    
    Bug: 42212588
    Change-Id: I67f24062100c8b161b6a4a2007918a9684c82e88
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5548767
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93993}

commit 2ce6817344e2a6b8f625948ce1df6fa2f9c3b078
Author: Adam Klein <adamk@chromium.org>
Date:   Mon May 20 16:45:44 2024 -0700

    [cleanup] Remove dead code from runtime-object.cc
    
    Dead code identified by the coverage builder.
    
    Change-Id: I6a2b01bb3c49e26c7172d1154ff90303307ede22
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5552194
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93992}

commit 4ca0a3278af2a1c37af508f197f35e7cd2b93e55
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat May 18 20:02:22 2024 -0700

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/9b4c6577..232dfc7b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747549215261400513
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: Ia8bc8c19b7837b4605ff2189c563b5b76cc04804
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544874
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93991}

commit 1c8b5c515724a635d510bad1d4bbb06c5c83d25f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon May 20 09:07:49 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling third_party/boringssl: https://chromium.googlesource.com/chromium/src/third_party/boringssl/+log/fe087b5..d246272
    
    Rolling third_party/boringssl/src: https://boringssl.googlesource.com/boringssl/+log/2fb5f9c..2db0eb3
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747405769383791873
    
    Change-Id: I647761d26b1c514beec376458343bbecd6815864
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544893
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93990}

commit 1d46088b7dabd62efaa9e71ff4ccd3926bfe3882
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun May 19 21:01:28 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6708d95..d32e1cb
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747451068538805937
    
    Change-Id: I1a0eb207dab81f19f45d2c768dc010640e9979b7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544770
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93989}

commit 06087002beae64513f023778165c992aabb4ce46
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri May 17 21:02:00 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/13f4285..dbd3873
    
    Rolling third_party/boringssl: https://chromium.googlesource.com/chromium/src/third_party/boringssl/+log/711f324..fe087b5
    
    Rolling third_party/boringssl/src: https://boringssl.googlesource.com/boringssl/+log/2db0eb3..2fb5f9c
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/9a8c80c..6708d95
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/a37a3aa..fc3fb07
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/b7e96b3..a67d6c1
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/29b73eb..aa1c946
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747632259369947713
    
    Change-Id: I790b30b7609c1bfe8b71276f990715aa1396861c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547210
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93988}

commit c5709c07fc561ea6a431e5ab935d2956815c04bf
Author: Jayson Chen <jaysonchen@microsoft.com>
Date:   Thu May 16 14:23:32 2024 -0700

    Add tracing to capture ScriptParsed event
    
    Design: https://docs.google.com/document/d/16AzW-gS4PgeOlLkNfDPPp6oYhFE65GCTYhTBjj7J56c/edit
    
    Added new tracing to capture the ScriptParsed event during performance tracing to reconstruct historical script. The historical script along with historical target and execution context can support the rehydrated session in devtools performance panel to simulate Debugger.getScriptSource.
    
    CL to capture target and execution context:
    https://chromium-review.googlesource.com/c/chromium/src/+/5388468
    
    Bug: 337909145
    Change-Id: I3ebf0426af674117466b2b6ae4dd4204c7c8cb8d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388259
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Original-Commit-Position: refs/heads/12.5.58@{#1}
    Cr-Original-Branched-From: 0caa74013d249f6f6ae8ea042ad47a3f1ece7503-refs/heads/main@{#92972}
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5417443
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Jayson Chen <jaysonchen@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93987}

commit cea664c72011748edc6184ea4a02f6e95c6cc7f7
Author: Adam Klein <adamk@chromium.org>
Date:   Fri May 17 15:01:40 2024 -0700

    [cleanup] Remove dead code from runtime-internal and parser
    
    Change-Id: Id511144b082ada586f2b2dfa1b15285065f11b73
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5548956
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93986}

commit d2807fc306c668c70acf9b5ce20410882ede0046
Author: Adam Klein <adamk@chromium.org>
Date:   Fri May 17 13:43:01 2024 -0700

    [cleanup] Remove dead testing code from futex-emulation
    
    Change-Id: I83474eb7b81b04689719bea9c6f9abc33ec7396c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5548761
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93985}

commit 581b5a38c131f601afbc081286c60a460964d2de
Author: Adam Klein <adamk@chromium.org>
Date:   Fri May 17 11:47:35 2024 -0700

    Add adamk to src/d8/OWNERS
    
    As an owner in include/ and a Chromium/Blink committer, I already have
    responsiblity for how V8 embedding works. Since d8 is the "simplest"
    V8 embedder, it seems reasonable for me to be an owner there too
    (and I've hacked on it regularly over the years).
    
    This will add a second owner in Pacific time.
    
    Bug: 338340739
    Change-Id: Ic120931b361c2cca1dba1326662cf43f0ee056a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5548558
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93984}

commit 98f2024c364ea01c7fc0da3ae1ad9cb05cfe66b9
Author: Adam Klein <adamk@chromium.org>
Date:   Wed May 15 11:46:02 2024 -0700

    Remove ftang from src/init/OWNERS
    
    This line seems to have been added accidentally
    way back in https://crrev.com/c/1632072.
    
    Bug: 338340739
    Change-Id: I2ebde40762970d54a467001ad58c180bdd13e64e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5539318
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93983}

commit 22356f493e9ca8c42096cc55b76ac535bb484e36
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri May 17 10:56:44 2024 +0200

    [heap] Rework marking bottlenecks
    
    Bottleneck TryMark()/PushMarkedObject() better to allow filtering on
    those transitions. This is the first of more such refactorings.
    
    The CL also removes the unused --track-retaining-path mode. The mode
    recordered retaining paths as visited by the marker but was missing
    the callers for ephemerons and doesn't support Oilpan. The heap
    snapshot is a better alternative at this point which allows to find
    retainers as well without interferring with actual marking code.
    
    Bug: 340989496, 335479495
    Change-Id: Ia78e69a596e55a1e155da13bcd246fd692e6f78b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547837
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93982}

commit c83e58560e5025220f5803ea6fc15e6978c6fa4b
Author: Adam Klein <adamk@chromium.org>
Date:   Wed May 15 11:42:36 2024 -0700

    Remove inactive accounts from OWNERS
    
    Remove jarin, mslekova, and tebbi from OWNERS files.
    
    Bug: 338340739
    Change-Id: I9ec3708793a07ddf4d11ea4b186b711406e5668f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5540776
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93981}

commit 144d9e11f2b9477d6648276f1800097b2c0cfc46
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri May 17 13:17:08 2024 -0400

    PPC/S390: skip regress-336852356
    
    Test requires JSPI supported.
    
    Bug: 336852356
    Change-Id: If184d5e1c35db40d2f3ebf91994428c31c896180
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5546044
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93980}

commit b190343bca68e62e331a10dcd3596a8bf90e6d87
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri May 17 09:01:39 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/4816b92..13f4285
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747677560506858321
    
    Change-Id: I8e3a1d9169bf2769797d7780516aedcb65409d77
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544732
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93979}

commit 960340746757640c37061851f05080b21ba440a1
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu May 16 18:26:37 2024 +0200

    [wasm][cleanup] Replace Variables with ScopedVar
    
    R=jkummerow@chromium.org
    
    Change-Id: I491e438141df47cb81d6f2cc36437bd3083ccc73
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5545377
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93978}

commit 83b54ebd25cf9a278f06c43613e9d6cd81ff75de
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri May 17 17:00:51 2024 +0200

    [heap] Fix race around wasted bytes in MinorMS new space
    
    Wasted bytes in new space are checked concurrently when background
    threads are checking for allocation limit overshoot for old space
    allocations.
    
    Use relaxed atomics for reading/writing the wasted bytes counter.
    We read it for the allocation limit overshoot computation, to check
    if we need to force a GC or can keep delaying GC finalization, so I
    think it's ok if this check is not 100% precise.
    
    Bug: 340549475, 40096225
    Change-Id: Ice24ce7ccec9cdc09f5f48e597c8e53c5e927980
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541889
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93977}

commit 9cb3b0d044a3ec7e59df21a9f9c2376753365abc
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri May 17 15:00:42 2024 +0200

    [wasm][jspi] Run the wasm-to-js wrapper on the central stack
    
    Switch to the central stack at the start of the wrapper, and switch back
    to the secondary stack at the end (instead of switching just around the
    call to JS).
    This ensures that wasm builtins (in particular conversion builtins) are
    also included in this scope, and can therefore safely call other JS
    builtins. Otherwise, the JS builtins can call runtime functions (such
    as the slow-path allocation) without switching to the central stack
    first.
    
    R=ahaas@chromium.org
    
    Bug: 336852356
    Change-Id: I40809c16bcd9afa01a0fa2fd1658a2a5ae7c94c2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512754
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93976}

commit 25500788569fba101598cad43c17d6bebbe60f15
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Fri May 17 14:55:43 2024 +0200

    [maglev] Add a BranchBuilder
    
    This allows the subgraph builder to share the same BuildBranchXXXX
    code with the main graph builder.
    
    Bug: v8:7700
    Change-Id: I695e8a1ae2fa13390091cf710dd635bec10a11aa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547741
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93975}

commit 5dde367f40d03ec15220ddc591de90f221285d69
Author: Dmitry Bezhetskov <dima00782@gmail.com>
Date:   Fri May 17 12:18:05 2024 +0200

    Support external code space for multi cage mode
    
    Bug: 339767730
    Change-Id: I8e128807c5f72873bc931bf44946299950254514
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535010
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93974}

commit 5ac1c1ddf79ccc50df007dd935ee7290799f0645
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri May 17 15:43:13 2024 +0200

    [deoptimizer][wasm] Remove trusted intance from deopt data
    
    The trusted instance is stored at a known location in the optimized
    stack frame, so we don't need to waste any bytes on storing extra
    deopt data for it.
    
    Bug: 42204618
    Change-Id: I872cc686668dfce94ae4eaf0697954a99c5b03ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5543928
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93973}

commit 6a1f1b9afe5ab002b5c7d9e075a037d1743680a7
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri May 17 14:29:25 2024 +0200

    [test] Speed up mjsunit/regress-708247
    
    We only had a very slow reproducer for the original bug; after all
    this time (seven years!), there's not much value in spending so much
    time on this test in every run of the test suite.
    
    Bug: 40087250
    Change-Id: Ibc0cf40f8df4e44f5444cf399b9eea02293d77cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547838
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93972}

commit d7ae23bbc858c282d4859c928c761292a6b52998
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu May 16 16:16:21 2024 +0200

    [codegen] Re-enable frame type check for wasm deopts
    
    Differently to JavaScript in Wasm optimized and unoptimized frames have
    the same frame type marker, so this check should indeed hold true even
    in case of deopts.
    
    Bug: 42204618
    Change-Id: I99c9bf20625c425b0636dee630d855bd50b93f9e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5543926
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93971}

commit 42e12febbd94b2ccea3c665ecddadbf6e518e4a0
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu May 16 16:11:58 2024 +0200

    [deoptimizer][wasm] Basic handling of inlined frames on deopt
    
    This adds some basic implementation for having inlined frames at the
    deopt point. This requires mapping the one "input" / optimized frame to
    multiple output liftoff frames.
    
    The test cases do not cover the intricacies of parameter stack slots,
    preserving the correct values of stack slots in general and also only
    provides an implementation for inlining at call_direct, while all tail
    call variants as well as call_ref and call_indirect are not implemented
    yet.
    
    Bug: 42204618
    Change-Id: I4ccc18767c6ebad1df96dae6477680abc1b07771
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538057
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93970}

commit b7e11fcf2c6f8526a612dca43cb2f87c7a91769e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri May 17 05:08:39 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/c71a0f4..4816b92
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/c2f740d..1bce012
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/274689c..9a8c80c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747692205898083841
    
    Change-Id: I70279644ac495101637f3f6fd943842b16dec383
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5548156
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93969}

commit 11b2f0446216ef5c52f423dbb883831db8646911
Author: deepak1556 <hop2deep@gmail.com>
Date:   Fri May 17 20:34:38 2024 +0900

    [sandbox] Create a reusable payload class for EPT, EBT and TPT
    
    Bug: chromium:42204529
    Change-Id: Ia7bc29c88d113b86add0c37ddb7d9fc8be4b9216
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522053
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Deepak Mohan (Robo) <hop2deep@gmail.com>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93968}

commit 461a084c41d6a0780389897ddda81b51e5199af8
Author: wuoody <di1.wu@intel.com>
Date:   Fri May 17 16:46:07 2024 +0800

    [CSA] Optimize IsStrong(MaybeObject) by IsStrong(HeapObjectReference)
    
    This helps the code generation if the parameter is known to be a
    HeapObjectReference:
    
      before:
        REX.W movq r11,r9
        andl r11,0x3
        cmpb r11,0x1
        jz 00007FF6E0078C8A
    
      after:
        testb r9,0x2
        jnz 00007FF6C62446C3
    
    Change-Id: I3790651ee342c0b5c19a19d912a707fca579b435
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5546979
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Hao A Xu <hao.a.xu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93967}

commit 718120163133eee9c94c4a97c6805ed62aa1a1bf
Author: Eric Leese <leese@chromium.org>
Date:   Fri May 17 09:42:00 2024 +0000

    Never Pause Here mutes Wasm traps
    
    In JavaScript, a breakpoint with a false condition will prevent
    stopping for other reasons (usually exceptions) on the same
    statement. This is the basis of the DevTools "Never Pause Here"
    feature. This change brings the same behavior to WebAssembly,
    so that this can be used to ignore Wasm traps.
    
    Bug: b:341040531
    Change-Id: I9f9b5d4632c8261dcbd50130bb8882728ac76474
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544146
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93966}

commit 3e04f3404bbef95b2238dfa05c3142efc0220248
Author: pthier <pthier@chromium.org>
Date:   Fri May 17 10:43:48 2024 +0200

    [maglev] Check element index is a Smi constant
    
    Only use Uint32Constants for element indices that fit into a Smi.
    
    Bug: v8:7700
    Change-Id: I6a200aa187b10117a4a1a37b8bc71086383db5ee
    Fixed: 340921322
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547857
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93965}

commit 258701f221f3966f70abb74ddc88925b9772cc62
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri May 17 11:56:51 2024 +0200

    [runtime] Typefeedback for typeof
    
    Bug: 341095539
    
    Change-Id: I47e9e55076b1cff8d9aaf0395a719385330eef87
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534931
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93964}

commit f644449ca9bf8fe61a0ee08c855c3f4c5cb537d1
Author: Benoît Lizé <lizeb@chromium.org>
Date:   Fri May 17 10:18:13 2024 +0200

    [cppgc] Add a flag to decommit rather than discard pooled pages
    
    The cppgc page pool is meant to reduce system calls when freeing and
    allocating memory. To avoid wasting memory, it discards memory rather
    than decomitting it. While these operations may be equivalent on some
    OSes, they are not on Windows, where Chromium's implementation (at
    least) is using DiscardVirtualMemory(), which per MSDN "Discards the
    memory contents of a range of memory pages, without decommitting the
    memory."
    
    The distinction is important, as Windows machines typically have a fixed
    system-wide "commit limit" which caps committed memory, and most OOM
    crashes are actually commit limit related.
    
    This CL adds a flag to decommit the memory, rather than discarding. This
    requires to recommit the memory (rather than doing nothing) when we want
    to use it again, but given that discarding happens rarely (during
    memory-reducing GCs), it should not impact performance. Still, in order
    to assess memory, stability and performance impacts, we add a feature
    flag to perform a field trial in Chrome.
    
    Change-Id: Ieb0f46e2f48ce23c8f4ef21b0b94ee3ae405fa2e
    Bug: chromium:326303884
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541750
    Commit-Queue: Benoit Lize <lizeb@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93963}

commit 6251d9d96d573dcd67ca8ee6aad7bd1225a66dfa
Author: Alex Rudenko <alexrudenko@chromium.org>
Date:   Fri May 17 08:48:49 2024 +0000

    Revert "Add executionContextUniqueId to various methods"
    
    This reverts commit 9e0a846cd46426467a1bb880740883be414dc20a.
    
    Reason for revert: causes crashes https://crbug.com/341228752
    
    Original change's description:
    > Add executionContextUniqueId to various methods
    >
    > Currently, the unique context ID is exposed in some methods while
    > other methods only expose not-unique ID. This CL adds the unique ID to addBinding, bindingCalled and consoleAPICalled so that clients can more
    > reliably identify an execution context.
    >
    > Bug: chromium:340592165
    > Change-Id: I43475786df57191c8e1c6fcc92adc88de751edb1
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518197
    > Reviewed-by: Simon Zünd <szuend@chromium.org>
    > Commit-Queue: Alex Rudenko <alexrudenko@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93904}
    
    Bug: chromium:340592165
    Change-Id: Ibe7b9410c455d672d4d9826da753ef3324d60bda
    Fixed: chromium:341228752
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547738
    Commit-Queue: Alex Rudenko <alexrudenko@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93962}

commit 76c924a7e139c7aff9df504def32b4afde90bca5
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri May 17 09:33:42 2024 +0000

    Revert "Update V8 DEPS (trusted)"
    
    This reverts commit 7ff53634c66fc5b4d9dd1988ebb4e521df3dcd3d.
    
    Reason for revert: http://b/341230569
    
    Original change's description:
    > Update V8 DEPS (trusted)
    >
    > Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/c71a0f4..4acd723
    >
    > Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/c2f740d..1bce012
    >
    > Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/274689c..9a8c80c
    >
    > Roll created at https://cr-buildbucket.appspot.com/build/8747722857904768305
    >
    > Change-Id: Ib900d489b64e4c9f3a63d4a36987fd61a90aa6cc
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5546320
    > Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    > Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    > Cr-Commit-Position: refs/heads/main@{#93957}
    
    Bug: 341230569
    Change-Id: Ief812b473db8e484ff0d04aef17752c5eaaf042b
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547740
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93961}

commit 19d1f1f681337fd646768db4c0741b6b9158eb8c
Author: Al Muthanna Athamina <almuthanna@chromium.org>
Date:   Fri May 17 10:01:45 2024 +0200

    Remove almuthanna from watchlist
    
    Change-Id: I12db3419982cba3fc2988495b5c6096596474730
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5547737
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Almothana Athamneh <almuthanna@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93960}

commit 0b27c6c76639b0a96c9ee48bcc9fc75fda5237cd
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu May 16 12:40:11 2024 +0200

    [api] Fix implicit conversion for return value
    
    Bug: 339481290
    Change-Id: Ib0ea92d468f95a69789a4634a7b47f07977a3044
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537933
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93959}

commit 58a82800c63473ea7056478188ab491f5021f7dd
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri May 17 11:19:49 2024 +0800

    [loong64][mips64][deoptimizer][wasm] Support Simd128 values
    
    Port commit 566f734f40c98a0e08d3ad373a6495b5135a7bf5
    
    - loong64 port doesn't support simd yet
    - mips64 port needs to support machines that don't support simd
    
    Change-Id: I18aa5f7e63b770f3d7255dbbbf547fa4a6956f93
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5546819
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93958}

commit 7ff53634c66fc5b4d9dd1988ebb4e521df3dcd3d
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu May 16 21:07:49 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/c71a0f4..4acd723
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/c2f740d..1bce012
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/274689c..9a8c80c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747722857904768305
    
    Change-Id: Ib900d489b64e4c9f3a63d4a36987fd61a90aa6cc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5546320
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93957}

commit 812d47fa1f5c19d777007dc939c61aae1f746af9
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri May 17 09:49:44 2024 +0800

    [riscv][deoptimizer][wasm] Support Simd128 values
    
    Port commit 566f734f40c98a0e08d3ad373a6495b5135a7bf5
    
    Change-Id: Ief63f9cf9a8f5bd9c66d5db6e75e2086b605fccf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5543443
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93956}

commit 7f55dc42841c93dbf095995ffd2f6a7ca41bf51e
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu May 16 15:59:36 2024 -0400

    ppc/s390x: skip fast-api-calls-with-wellknown-imports
    
    V8_ENABLE_FP_PARAMS_IN_C_LINKAGE is  not defined for ppc and s390x
    which causes a failure on this test. More details are available under
    this CL:
    https://crrev.com/c/5537972
    
    Bug: 41492790
    Change-Id: Ic586a1de6b76f5f4e59b48e670db8806dea2e156
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5545658
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93955}

commit 3637f9b7e42e069b510f3ed89546168a50341945
Author: Dmitry Bezhetskov <dima00782@gmail.com>
Date:   Thu May 16 16:34:01 2024 +0200

    Isolate::DumpAndResetStats() accesses uninitialized V8HeapCompressionSchemeImpl::base.
    
    Bug: 340983078
    Change-Id: I3b167df9fe231037843dcf3ef2aedb69533e1e32
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544458
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93954}

commit 688925b0ccf8e774070ae9e5cdeafb0af563d604
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu May 16 09:03:31 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/70f690a..c71a0f4
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7f95b88..274689c
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/92f7cca..29b73eb
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747768157962012513
    
    Change-Id: I829f19bcb869aaaa43ef14b9506bb413787bfe3c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544618
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93953}

commit 8facb6f7ff3092ef1ec5635612d03dceb2995830
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu May 16 16:28:45 2024 +0200

    [turbofan] Fix DCHECK in MapData for Wasm objects
    
    Do not try to read `map->UnusedPropertyFields()` when the map
    is a map for a Wasm struct/array.
    
    Fixed: 339984212
    Change-Id: I6ed2b04afbf485515ea520c1b7401e970c3e9a54
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537985
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93952}

commit 3450db36743ade1053c633ad8e5757bc008eb0ff
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu May 16 14:09:13 2024 +0200

    [gm.py] Automatically delete `goma_dir = ` entries
    
    to avoid GN warnings about unrecognized options.
    Also restore the functionality to migrate `use_goma` to `use_remoteexec`,
    which was recently dropped accidentally.
    
    No-Try: true
    Change-Id: I32ef14d419d8f958062b109d0f476701d678f35d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544140
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93951}

commit f2c545830d05c69ae79fdffe43f391b87483cb1f
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu May 16 15:45:16 2024 +0200

    [maglev] CreateRegExpLiteral can throw...
    
    ... stack overflow
    
    Bug: v8:7700, 339759428
    Change-Id: I3a38905c763f13f238a90bd6848ecca745bba180
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544144
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93950}

commit 6544396d88f03610a3f8128ab24db0bdf814ea08
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu May 16 15:02:56 2024 +0200

    [turboshaft] Maglev-to-ts: support CheckDerivedConstructResult
    
    Bug: 42204525
    Change-Id: I6d0ec80c41ab6a0396476b9b1dad8dae61efb9e8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544138
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93949}

commit bffd751b86c1cf397cae7a5a9f114097328feb81
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu May 16 14:09:43 2024 +0200

    [maglev] String.fromCharCode: mask before one-byte check
    
    String.fromCharCode silently masks the char_code value to 16 bits
    before creating a string. Maglev was our only compiler that didn't
    apply this mask *before* checking whether the value is in range for
    cached one-byte strings, which caused it to e.g. return a freshly
    allocated two-byte string for the input value 0x10000.
    This was flushed out by Factory::NewCopiedSubstring making a slightly
    brittle assumption that two-byte strings have underlying two-byte
    FlatContents. This patch makes that code more robust as well.
    
    Fixed: 339681888
    Change-Id: If37f86d8f12c4a7286629ab1404577858435c605
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538158
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93948}

commit 33310aefa1eedbbe1206f0c16413b442897750cd
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu May 16 14:02:45 2024 +0200

    [turboshaft] Maglev-to-ts: support CheckInt32IsSmi
    
    Bug: 42204525
    Change-Id: I6cdec1910227ac2ec8fbf51f480962030e4bc5ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538405
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93947}

commit 1fd82da404d94021e72bbbf054baf7568800af23
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu May 16 13:29:30 2024 +0200

    [wasm][fuzzer] Limit size of array.new_fixed for non-defaultable types
    
    The fuzzer still creates coverage for larger array.new_fixed for
    defaultable element types for which the fuzzer can always generate an
    easy struct.new_default.
    
    Fixed: 340651309
    Change-Id: I49b84374f80adc79a6eadeae137514dbcfa276fd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5544137
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93946}

commit 6a9b12b05ff56923074169f50032617e578cd252
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu May 16 11:04:31 2024 +0200

    [turboshaft] Maglev-to-ts: support ToName
    
    Bug: 42204525
    Change-Id: Ifb9f4fc49e5033d6fc62e08c56a46ce2faefec02
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5543822
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93945}

commit 205a43ed11ba3b08917ac7cafc2955c754da9d8b
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu May 16 10:59:11 2024 +0200

    [turboshaft] Maglev-to-ts: support HandleNoHeapWritesInterrupt
    
    Bug: 42204525
    Change-Id: I91f4db7fb6248fa762de67453bf8e8ec8a96ae8e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538397
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93944}

commit b2261976f178daef2a8afde52bf28575a00aeed7
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu May 16 10:56:04 2024 +0200

    [infra] Add sticky-mark-bits builders
    
    Bug: 339458172
    No-Try: true
    Change-Id: I9f88bd29fbf1fa656496043a46b6c1de60ac58c7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5543920
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93943}

commit 25b5246599b528d75ea26a0096029148c11c90bf
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Thu May 16 16:48:18 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of relaxed simd min
    max in turboshaft
    
    Bug: v8:12716
    Change-Id: I1aa73bfaea68ba6a259f76365dc619dfeb4bddd7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541850
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93942}

commit b3cf38815dedfb3c4311dd11b5a55cd9f9e18c9b
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu May 16 10:21:48 2024 +0200

    [turboshaft] Maglev-to-ts: support CheckedUint32ToInt32
    
    Bug: 42204525
    Change-Id: Ia14cbf5fd02d13633eb7fc26fa50258fdc1c2345
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538396
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93941}

commit d29add53add2da43880332642fe927032f28e291
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu May 16 10:11:28 2024 +0200

    [turboshaft] Maglev-to-ts: support DeleteProperty
    
    Bug: 42204525
    Change-Id: I921d6baf04d11178203a7dca3caeff21fd430f7e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538395
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93940}

commit eef0a73135929600314956c9dab521d95c626f84
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu May 16 10:33:35 2024 +0200

    [wasm][fastapi] Don't support fallback and options parameter anymore
    
    Originally the fast API had a fallback mechanism, such that an API
    function would get called a second time with the normal API calling
    conventions if unsupported functionality was used by the API function
    during the first call with the fast calling conventions, e.g. when the
    API function was throwing an exception.
    
    Due to recent changes, there is no unsupported functionality anymore,
    and the fallback mechanism is not needed anymore. Therefore there is no
    need for WebAssembly to support it.
    
    R=jkummerow@chromium.org
    
    Bug: 41492790
    Change-Id: I34bea9a5ecb7f9687e3c10e49f1e5d6fe896c2fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537972
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93939}

commit 3e204a8046ebd13c95fe7d48e0742996d5158922
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu May 16 10:49:39 2024 +0200

    [heap, cppgc] Fix CHECK failure for forced GCs
    
    Forced GCs use MarkingType::Atomic which was not expected in
    MarkerBase::ReEnableConcurrentMarking(). For such cases we did not
    use incremental marking with concurrent marking disabled and so
    there is no need to restart concurrent marking.
    
    Bug: 40278463
    Change-Id: I12c70d59248c698aa3a5af67c2409470d39d94be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5543919
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93938}

commit b7e2046e322fb451feee7c324fb062933a7cb338
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Apr 23 13:15:01 2024 +0200

    [api] Deprecate old indexed interceptors Api
    
    ... and remove v8::ObjectTemplate::SetIndexedPropertyHandler() which
    was deprecated in V8 12.6.
    
    The old indexed interceptors Api will be removed in V8 12.8.
    
    Bug: 328490288
    Change-Id: I8b030ef3199a08bbee80221cdaabcd2235233f47
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5465513
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93937}

commit 51e25d5a3917d97576f3ed01f53a5e3a2fe6af27
Author: Zequan Wu <zequanwu@google.com>
Date:   Wed May 15 15:17:25 2024 -0400

    emit_i64_andi accepts third parameter as int32_t but the argument being
    passed is casted to int64_t.
    
    Bug: chromium:340583170
    Change-Id: Id72b15b1c05b9d996c850b4c49a11e763a02f9c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538459
    Auto-Submit: Zequan Wu <zequanwu@google.com>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93936}

commit de87ed694926177fe168d25ed159ed44134b7c62
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed May 15 21:01:19 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/959c0f3..70f690a
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/923a565..c2f740d
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/f37d3b3..7f95b88
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/629e5b1..92f7cca
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747813456698445697
    
    Change-Id: I0fee6d18034af70cec9187f6b680ca7628e2ddaf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5539456
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93935}

commit 01f7c5f062a42ee45a46f391535dfd9889bafee3
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed May 15 14:41:50 2024 -0400

    PPC/s390: [deoptimizer][wasm] Support Simd128 values
    
    Port 566f734f40c98a0e08d3ad373a6495b5135a7bf5
    
    Original Commit Message:
    
        This CL adds support for Simd128 values in the deoptimizer for wasm.
        Note that wasm deoptimizations are WIP and the current state is only
        implemented for x64.
        However, to support Simd128, the deoptimizer needs to know about
        Simd128 register values which overlap with double register values.
        So we need to migrate double register value handling to use Simd128
        registers instead (meaning the 128 bit registers instead of the 64 bit
        variants).
    
        For JavaScript, this means that we need to move twice the amount of
        data for the double registers. In most cases: Push the value from the
        register to the stack, then copy it from the stack to the input
        FrameDescription, copy it from the FrameDescription to the
        TranslatedValue, from there into the outgoing FrameDescription and
        finally from there back into the register (if it's still in a register
        that is).
    
    R=mliedtke@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I821cf8264b8a34d5afe77db558237f03af6107f0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538457
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93934}

commit 68dfc775b99407127eb5f91e687a2c568667f1b1
Author: Adam Klein <adamk@chromium.org>
Date:   Wed May 15 14:43:24 2024 -0700

    [api] Remove duplicate ModifyCodeGenerationFromStringsCallback field
    
    Remove unnecessary duplicate callback field on Isolate, since
    only a single callback is settable through the API.
    
    Bug: 40136001
    Change-Id: If6e767b69146827b164d3f2c48d03a7dab6e171a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5542944
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93933}

commit 10977c865823ab03c5213fc8e587fe521f62b276
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Wed May 15 20:21:13 2024 +0000

    [explicit-resource-management] Change variable names format
    
    This CL changes variable names in disposable stack builtins
    implementation from camelCase to snake_case.
    
    Change-Id: I97330aa140ce4007009a33931dced93b08da4cef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5540779
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93932}

commit 7eb56ce8606f9846e4e4b5cc5d4a96513902d38e
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Wed May 15 18:16:51 2024 +0000

    [explicit-resource-management] Add move and disposed getter
    
    This CL adds move() function and a getter for disposed to
    DisposableStack prototype.
    
    Bug: 42203506
    Change-Id: I8d7750b1d4aa199ebeb997bde7fe6d06c9ccbff0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528992
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93931}

commit 42ad24e7fb68424918691adf06c1b4fd23f9b259
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Mon May 13 22:34:43 2024 +0000

    [explicit-resource-management] Add adopt and defer
    
    This CL adds adopt() and defer() to DisposableStack
    prototype.
    
    Bug: 42203506
    Change-Id: I556b96a0cf42595acdd483b0a02aef9ca41bd0bc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512877
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93930}

commit 45ad146f8e3c94bc50bee8e671f5a8b5f01826ca
Author: Adam Klein <adamk@chromium.org>
Date:   Wed May 15 11:28:13 2024 -0700

    Add rezvan to COMMON_OWNERS
    
    Change-Id: I71c29153db8dc509f22c31f3d1174ff34a7a6bb5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541744
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93929}

commit c8c168f06432e1dd9d47eae9a659c40f64d10a78
Author: Adam Klein <adamk@chromium.org>
Date:   Tue May 14 12:31:34 2024 -0700

    [heap][api] Remove deprecated v8::Isolate::IdleNotificationDeadline
    
    Removes the IdleNotificationDeadline() method along with all supporting
    code & tests inside V8.
    
    Bug: 42202909
    Change-Id: I0596345baeec83b41dcd09c973c48cb7c779dd5b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5539852
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93928}

commit ec8a6ecfc15aa11001566b278faf95226582fdb8
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed May 15 18:32:09 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - StructGet
    - StructSet
    
    Bug: 331100916
    Change-Id: If521dc0469a5341a4ea65be8cbc4927c7ae8e595
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538171
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93927}

commit 31d3aab93cb69aeac80be543409711edafa6b05e
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed May 15 18:29:42 2024 +0200

    [cleanup] Rename Simd128 array types
    
    Follow-up to https://crrev.com/c/5513446.
    
    Bug: 42204618
    Change-Id: I6eee3fba9740f0485d28e635d26d63257ebf02dd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522444
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93926}

commit 02228d3354b96142c5a28a567c73131991d0c58c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed May 15 09:07:46 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/26998e9..959c0f3
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/6206ead..efa920c
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/8c54b7d..f81f6c0
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/2b6524b..f37d3b3
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/cef4fc6..629e5b1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747858754890342177
    
    Change-Id: I062519db50878dc0e6d4de31b8c9bcf72d9b8d87
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5539231
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93925}

commit 087ab5d9ad2b822b71b03e7f2033828fe392577b
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 15 10:53:07 2024 +0200

    [turboshaft] Maglev-to-ts: support NumberToString
    
    Bug: 42204525
    Change-Id: I3ee264d927bf57b142848cc71967ea2f05deca53
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541829
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93924}

commit 2c961cd702d0b67eed20f3cb83496363aaeb5247
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 15 10:43:23 2024 +0200

    [turboshaft] Maglev-to-ts: support ToString
    
    Bug: 42204525
    Change-Id: Id803ced76e2a11f856826202ce5aee30fbc5366d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541891
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93923}

commit bc7c7b002aac3c569e39f62842ba81831cfc9a4c
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed May 15 16:59:07 2024 +0200

    [deoptimizer][wasm] Properly handle tagged stack slots
    
    The previous implementation used wasm::value_kind_size() to determine
    the size of the liftoff stack slot. This doesn't work for reference
    types as value_kind_size() is 4 (e.g. when stored in an object) but the
    stack slot stores the uncompressed pointer (meaning kSystemPointerSize
    on 64 bit systems).
    
    Also update `TODO(14667)` to `TODO(42204618)` due to updated bug
    numbers after the issue tracker migration.
    
    Bug: 42204618
    Change-Id: I5501947748132167d704f0e5810ed84f8fda8bca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518456
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93922}

commit 6c5a6c03dd6f557fcdf550ae3a2c66ed66d805ce
Author: Takuto Ikuta <tikuta@chromium.org>
Date:   Wed May 15 19:01:06 2024 +0900

    remove references to goma
    
    goma is not supported anymore.
    
    Bug: 41489832
    Change-Id: I93ab073a1ac6987fb00059df1bb68dba24468af1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541431
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    Commit-Queue: Takuto Ikuta <tikuta@chromium.org>
    Auto-Submit: Takuto Ikuta <tikuta@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93921}

commit e91e4d06bc016834ce099773efb4f039e5f4c537
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue May 14 16:50:10 2024 -0700

    [class] Check conflicting vars inside blocks in class static blocks
    
    Fixed: 340623283
    Change-Id: Ib1c95a5d168a5aac4956f5bc6a52f2a1a1ea313b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5539867
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93920}

commit 27e7948e1c083a3f05e231a019c41140191089c1
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed May 15 15:11:26 2024 +0200

    [heap] Fix initial flags for sticky markbits
    
    The IS_MAJOR_GC_IN_PROGRESS was missing from new pages allocated during
    a GC. The flag will soon go away but this CL keeps the flags consistant
    in the meantime.
    
    Bug: 333906585
    Change-Id: I73efaa88e660c7f9845f188575cbda7ef46d7d9d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538155
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93919}

commit 11ebca81d4d71b322dae813ca99e5e5b71949863
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed May 15 14:08:58 2024 +0200

    [heap] Introduce CONTAINS_ONLY_OLD page flag
    
    InYoungGeneration for objects in code/shared/trusted spaces currently
    need to check the markbit to determine age, even though these spaces
    contain only old objects.
    
    This CL introduces a CONTAINS_ONLY_OLD page flag for pages in spaces
    other than new space and old space (with sticky markbits). The age
    check then checks this flag and can avoid reading the markbit.
    
    Bug: 333906585
    Change-Id: I7aa4fdc9339e32087348abdf26a259005c288a2c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538175
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93918}

commit 812ce7dba6026d0068ff8a0076123dc16740f430
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed May 15 14:04:25 2024 +0200

    [heap] Don't unmark large objects with sticky markbits
    
    Bug: 333906585
    Change-Id: I84a1bd235e7f5b6b1ed83fe12f695750e8e7902b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538020
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93917}

commit bacbfe2c1f0722025a90c33e2b586ccc16ee8e11
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue May 14 17:44:15 2024 +0200

    [turboshaft] Clean up representations.h
    
    Two functions were unused, two were almost duplicates of each other,
    and the recently introduced ProtectedPointer representation was
    handled a bit inconsistently.
    This patch isn't expected to change any observable behavior.
    
    Bug: 42202729
    Change-Id: Ia5c46b7503f4d2bdcceff3fbe92d9592895d7579
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529247
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93916}

commit 76b47ec8aa3ef9d161afaff4fb9a25ce89890169
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 15 12:36:07 2024 +0200

    [turboshaft] Maglev-to-ts: support CheckNumber
    
    Bug: 42204525
    Change-Id: Ia789486881de23cad135ccabd3ccb07849ceddde
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541888
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93915}

commit e755032f5f492ac10b98287dceefe5e681466aec
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Wed May 15 12:24:26 2024 +0200

    [maglev] Optimize JumpIfJSReceiver
    
    - always jump if we know we have a JSReceiver
    - never jump if we know w can't have a JSReceiver
    
    Bug: v8:7700
    Change-Id: Ia37089cd181b0bd60086c46fd30a929d73e46f98
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537920
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93914}

commit a678f03a05eb69165d7c3d7eaea9b4358508eef0
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue May 14 12:11:16 2024 +0200

    [flags] Fix wrong flag implications application
    
    Chrome applies v8 flags one by one. After setting each flag, v8
    immediately applies any implications by that flag. Chrome also applies
    field trial and feature flags first, and finishes with the command line
    flags, allowing them to override field trials and features.
    
    If for example flag X implies flag Y, and X is enable by field trials,
    it would immediately enable Y as well. If X is then disabled from
    command line (e.g. --no-X), Y would remain enabled despite X being
    disabled. adding a neg-neg implication from --no-X to --no-Y also
    doesn't work because 1) if it's a strong implication then it's reported
    as a flag contradiction, and 2) if it's a weak implication then --no-Y
    is ignored.
    
    Fix by not applying implications each time a flag is set. Instead, all
    implications are only applied right before freezing the flags, at
    which point all flags should be already set.
    
    Bug: 40096225
    Change-Id: Ifb89181246c34d8140fdeaf7d3d2c4176b7af96e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537448
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93913}

commit 66c754d2ddda9fc7e672fc5d1ecc9e3441cf0fc4
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 15 11:43:30 2024 +0200

    [turboshaft] Fix Load Elimination bug when overwritting maps
    
    So far, LateLoadElimination was assuming that maps would never change
    after a AssumeMap. However, it can happen that a map is updated
    in-place with a regular Store (typically, because of a transitioning
    store).
    
    Bug: 42202729
    Change-Id: I31e453324645fb91dcf870db12d49f0de64d0ad8
    Fixed: 340663085
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537918
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93912}

commit 566f734f40c98a0e08d3ad373a6495b5135a7bf5
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed May 8 13:08:33 2024 +0200

    [deoptimizer][wasm] Support Simd128 values
    
    Attention: This CL changes how JavaScript handles double registers!
    
    This CL adds support for Simd128 values in the deoptimizer for wasm.
    Note that wasm deoptimizations are WIP and the current state is only
    implemented for x64.
    However, to support Simd128, the deoptimizer needs to know about
    Simd128 register values which overlap with double register values.
    So we need to migrate double register value handling to use Simd128
    registers instead (meaning the 128 bit registers instead of the 64 bit
    variants).
    
    For JavaScript, this means that we need to move twice the amount of
    data for the double registers. In most cases: Push the value from the
    register to the stack, then copy it from the stack to the input
    FrameDescription, copy it from the FrameDescription to the
    TranslatedValue, from there into the outgoing FrameDescription and
    finally from there back into the register (if it's still in a register
    that is).
    
    Bug: 42204618
    Change-Id: I7253d037460a095f893cea239d448b1977007d41
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5513446
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93911}

commit 66a0b7197d7f773fe5929ecf84d42c6933d6f1f4
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 15 11:31:43 2024 +0200

    [maglev] Fix ToBoolean and TypeOf for Undetectable objects
    
    Bug: v8:7700
    Change-Id: I96cee619d204464b2466b3f78ed95d6130ddded8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541828
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93910}

commit 1e23407edb55e72dc7c45019dd58194c2878804f
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 15 11:21:15 2024 +0200

    Reland "[maglev] Inline ArrayIterator"
    
    This is a reland of commit af975a06e27d1436f2f9b40da352e6b6dbd13052
    
    Fix: propagate the iteration kind.
    
    Original change's description:
    > [maglev] Inline ArrayIterator
    >
    > Bug: v8:7700
    > Change-Id: Ia92c9256ed2ab209033aac37414dce6ef3166c53
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528005
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93857}
    
    Bug: v8:7700
    Change-Id: I253ab06f099b6e9865d1ada35ea265b01bf445ee
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541968
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93909}

commit 472fe23c63fdacb79c4852b396160ce939cab146
Author: Jay Freeman (saurik) <saurik@saurik.com>
Date:   Wed May 15 08:38:42 2024 +0000

    [handles] Remove redundant check and obsoleted #if
    
    In Sep 2023, a change was made to Handle::operator -> that added a
    new static_assert(false). This code doesn't compile on older clang
    builds, so an #if was added on __clang_version__ to bypass the new
    check. Using this specific variable is fraught with peril, as it's
    used by Apple to report not the version of LLVM but that of Xcode.
    
    Additionally--and worse--this check did not compile correctly with
    some Google forks of LLVM--including the one for the Android NDK--
    as the specific patch to fix this clang bug was missed in the LLVM
    17 merge. Apparently, this was caught by someone else and fixed in
    Apr 2024, by replicating the check, replacing false in the assert.
    
    As the underlying static_assert(false) is gone, both the condition
    and the comment describing the bug are now incorrect and should be
    removed. Additionally, it feels better to reorganize this function
    so that it matches the code of Handle::operator *; this simplifies
    the logic and avoids duplication of the static_assert's condition.
    
    Bug: 339682307
    Change-Id: I94f7f32b52032dd77ccac8c98c9eb5611ef73f95
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5541851
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93908}

commit 22f9cdac4453b315d208ebd8e7557e188dff3794
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Wed May 15 10:15:08 2024 +0200

    Reland "[interpreter] Only Clear/Restore pending messages when CMD_RETHROW"
    
    We only need to save/restore pending messages when we're catching and
    rethrowning an exception, so push the code to paths that handle
    CMD_RETHROW. (We always pass through RETHROW if we caught since we might
    rethrow. This could be overwritten later of course, in which case we
    won't restore.)
    
    Change-Id: Iab00a2b2e141ffda978324e08c85ee05c2cd14c2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538173
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93907}

commit 24534cab9b84c6c8d5839d91fbb73acd4a912d75
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue May 14 16:47:04 2024 +0200

    Reland "[maglev] Inline GetIterator"
    
    This is a reland of commit 2098e649b4ab11274b72dc1252543ffbcef980f5
    
    Fix: LazyContinuationFrameScope should be only considered for
    lazy deopts. We can skip when emitting an eager frame.
    
    Before this CL we would checkpoint the eager deopt frame, so that
    it wouldn't be recreated with the lazy continuation frame on top.
    However, this CL wraps a lazy deopt continuation to a call to
    TryBuildLoadNamedProperty, which can split in multiple blocks
    in case of polymorphic feedback and need to reconstruct the
    deopt frame.
    
    I also added the regression test.
    
    Original change's description:
    > [maglev] Inline GetIterator
    >
    > Bug: v8:7700
    > Change-Id: I8bc9ac2bc884e4f02e159aaf1a9b04b91fc4be4e
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5531447
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93856}
    
    Bug: v8:7700
    Change-Id: I90fe9ac7fe6be7ffb64c35aa02f1c4c63c853c92
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537911
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93906}

commit 76c177fb8eb73892a5f73242fd60733d837f7691
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed May 15 08:39:53 2024 +0200

    [heap] Add flag for disabling incremental marking in background GCs
    
    Introduce flag for finch experiment such that we can have background
    GCs without incremental marking.
    
    Bug: 40278463
    Change-Id: I9cb3598292ffb757bbe4f9323bb4bee7423dca3f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537968
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93905}

commit 9e0a846cd46426467a1bb880740883be414dc20a
Author: Alex Rudenko <alexrudenko@chromium.org>
Date:   Tue May 7 07:19:36 2024 +0000

    Add executionContextUniqueId to various methods
    
    Currently, the unique context ID is exposed in some methods while
    other methods only expose not-unique ID. This CL adds the unique ID to addBinding, bindingCalled and consoleAPICalled so that clients can more
    reliably identify an execution context.
    
    Bug: chromium:340592165
    Change-Id: I43475786df57191c8e1c6fcc92adc88de751edb1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518197
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Alex Rudenko <alexrudenko@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93904}

commit 6e6fa86d3390564ffcc140df5d97a10ce9cb1cec
Author: jiepan <jie.pan@intel.com>
Date:   Wed May 15 10:10:53 2024 +0800

    [revec][wasm][turboshaft] Use AVX_VNNI vpdpbusd for I32x8DotI8x32I7x32AddS
    
    Bug: v8:12716
    Change-Id: I08f89781ca570c1af37d0109ee27756c629b6e0f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537211
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jie Pan <jie.pan@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93903}

commit dd6b912a1d667a8f10b3f9b3c9ee255ebd4d705d
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue May 14 21:01:34 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e6bad9d..26998e9
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/8479869..2b6524b
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/f31c2c6..b7e96b3
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/7d77fb7..4f653ff
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747904052645473281
    
    Change-Id: I109f7d92050ab673b81fc9709ebd4ea2f56944dc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5540690
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93902}

commit 47f8d40b70f474474cd00bb26762ce26104615b9
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Tue May 14 15:58:19 2024 -0600

    [x64] F16 versions of instructions for x64 macro assembler
    
    I16x8SConvertF16x8, I16x8TruncF16x8U, Absph and Negps
    are added to x64 macro assembler.
    
    Bug: 337998764
    Change-Id: I2331e54c877926ca2ad5799add468f24261dd8e8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528088
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93901}

commit 9578f4b292a3e73efa5accb287ab9be04c2395e3
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Mon May 13 18:02:59 2024 -0700

    [shared-struct] Fix race asyncLock failure
    
    Fix a race where the asyncLock call bailed out and was cleaning the
    queued waiter while other thread was already accessing it.
    
    Bug: 339021674, 42202493
    Change-Id: I4bb1eef9e4d2569f7af2cd37cffeb394f7b3daa9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534519
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Pardo <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93900}

commit 7cd2b0c434bd5ea7bd253a97958c7348557fd72e
Author: Adam Klein <adamk@chromium.org>
Date:   Tue May 14 11:53:46 2024 -0700

    [api] Remove several APIs deprecated in version 12.6
    
    Deleted in this CL:
    - PersistentValueVector and references
    - Operator overloads in BasicTracedReference
    - kGCTypeMinorMarkCompact enum value
    - Deprecated ScriptOrigin constructor
    - Deprecated MicrotasksScope constructor
    - SafeForTerminationScope and only_terminate_in_safe_scope Isolate param
    
    Change-Id: I119048cb946ec895d6ba5b7b93c5dcd6b99da6bb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5539888
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93899}

commit 42764fa32fd62c4312542cd89ee4d1e818cb14f2
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue May 14 09:04:04 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/4e0e9c7..6206ead
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/af58dae..8479869
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/e3b94d0..852bc67
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747949350290792833
    
    Change-Id: I1701a6210259c28c744242cccab7939b69325af4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5538450
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93898}

commit 8c1da327940035ed9712c494fa44b377eaa951db
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 14 16:55:11 2024 +0200

    [turboshaft] Maglev-to-ts: Support builtin continuation deopts
    
    This CL also includes a reland of https://crrev.com/c/5526491, which,
    due to new Maglev optimizations, now also needs builtin continuation
    deopts to work.
    
    Bug: 42204525
    Change-Id: Id88b52029fe8ccd8b31f8c8c5ec821697c77dbb2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534930
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93897}

commit d4ca3766acd4e2b16d77800763a6b773126dffe5
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue May 14 13:49:48 2024 +0000

    Revert "[interpreter] Only Clear/Restore pending messages when CMD_RETHROW"
    
    This reverts commit 1f2786cb07c9f8bff8f38377fa93910454e71acd.
    
    Reason for revert: This fails the dawn linux webgpu tests on the roll
    Tested here: https://chromium-review.googlesource.com/c/v8/v8/+/5537909
    Example failing run: https://ci.chromium.org/ui/p/chromium/builders/try/dawn-linux-x64-deps-rel/b8747993766768639409/test-results?q=ExactID%3Aninja%3A%2F%2Fchrome%2Ftest%3Atelemetry_gpu_integration_test%2Fgpu_tests.webgpu_compat_cts_integration_test.WebGpuCompatCtsIntegrationTest.webgpu%3Aapi%2Cvalidation%2Cimage_copy%2Cbuffer_related%3Abytes_per_row_alignment%3Amethod%3D%22CopyT2B%22%3Bformat%3D%22astc-10x10-unorm-srgb%22%3Bdimension%3D%222d%22+VHash%3Add4a1acfa6306716&clean=&sortby=&groupby=
    
    Original change's description:
    > [interpreter] Only Clear/Restore pending messages when CMD_RETHROW
    >
    > We only need to save/restore pending messages when we're catching and rethrowning an exception, so push the code to paths that handle CMD_RETHROW. (We always pass through RETHROW if we caught since we might rethrow. This could be overwritten later of course, in which case we won't restore.)
    >
    > This is a reland of https://chromium-review.googlesource.com/c/v8/v8/+/5529233 with a test for the blocking failure. The fix is to avoid reusing the register between the context that's stashed for the `try` and the `message`. Otherwise in loops with a finally that exit the loop through the rethrow path, sloppy tracking of loop assignments thinks the context cache is assigned (by the reused message); causing a loop phi to be created.
    >
    > A possible cleaner solution is to not store the context at runtime at all, and to recompute the context. However, our optimizing compilers also rely on the interpreter stashing the context on the side for `catch`, so it's not trivial to change this.
    >
    >
    > Change-Id: I2a75a248ad252e30540268b575be0fe1380c097f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534748
    > Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93866}
    
    Change-Id: I3e8d95cedecc8808d56dac85f05f6fa4a8337484
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5537973
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93896}

commit e24363438174a1a458d67d8e80a576542b3de723
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Tue May 14 14:47:45 2024 +0200

    [wasm] call_indirect inlining codegen
    
    This is essentially a direct translation of the codegen for call_ref
    inlining. Implementation for return_call_indirect comes later.
    
    Bug: 335082212
    Change-Id: I96ecf548ba28175407d2adcff916e120e5f514f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5498422
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93895}

commit a25e4c501c02c5636f646850ee1712a6e5ead160
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue May 14 12:02:31 2024 +0200

    [wasm][sandbox] ExportedFunctionData: link to TrustedInstanceData
    
    Replacing the WasmExportedFunctionData's pointer to an on-heap
    WasmInstanceObject with a protected pointer to the corresponding
    WasmTrustedInstanceData eliminates an easy way for in-sandbox
    corruption to affect the coupling between these two objects.
    
    Bug: 336507783
    Change-Id: Iec3ce21ab5b39479a0413e72f77079595f1a69a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535193
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93894}

commit 07fcd6a1efe66987374c6adc3449ebb2dc79f0d0
Author: Liviu Rau <liviurau@chromium.com>
Date:   Mon May 13 21:15:37 2024 +0200

    Shadow Test262 staging tests with V8's staging tests
    
    Patch #1 contains a local staging implementation of a test262 staging test. The test gets to run twice (once for every locations), but it uses the local staging implementation for both runs. Things break on resultdb as we generate the same key for both runs. In the CQ for patch #1 we error out:
     - task https://chromium-swarm.appspot.com/task?id=6966b3197f9bf810 with key test262/staging/set-is-subset-table-transition.VariantProc-default-0.Rerun-1
     - task https://chromium-swarm.appspot.com/task?id=6966b31d4d1d8110 with test262/staging/set-is-subset-table-transition.VariantProc-default-strict-0.Rerun-1
    
    Patch #2-13 implements and tests the shadowing mechanism where we exclude test262 staging tests that have an equivalent V8 staging test. CQ passes.
    
    Patch #13 runs with a shadowing test that fails.
    
    Patch #14 removes the shadowing test.
    
    
    Bug: 339207824
    Change-Id: Ie299f5d9e364fb396801426f629840ca73b8ce14
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518172
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93893}

commit 21fd4aa176889a30a9e43d3445bedc691a320254
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue May 14 13:54:54 2024 +0200

    [maglev] Fix regression when refactoring ReduceArrayConstructor
    
    Bug: v8:7700
    Change-Id: Ie5328623170a1645ad2f955e69ed8ab4abc86b56
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5527022
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93892}

commit f1ca356a07eb6157d2195e0e3bf0a1cd8b19c19c
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 14 13:53:35 2024 +0200

    [turboshaft] Maglev-to-ts: more support for CallKnownJSFunction
    
    Two fixes around CallKnownJSFunction:
      - CallKnownJSFunction can also be used to call builtins.
      - in case of under-application, CallKnownJSFunction should set
        missing arguments to undefined.
    
    Drive-by:
     - Add missing ConvertWord32ToJSBool in TestTypeOf
     - Ignore the accumulator in ThrowingScope.
    
    Bug: 42204525
    Change-Id: Ie1d967727b3e4dc47934eb8f9b3e927761e11a74
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526477
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93891}

commit 751e39d8244fb67551bf1167a975e3a94b313f43
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue May 14 13:30:34 2024 +0200

    [tests] Avoid deprecated wrappers where possible
    
    The CL converts a few more tests to using the new wrapper layout where
    the layout should not make a difference. All interesting tests now
    have versions that work with the new wrapper layout.
    
    This leaves behind a state where `DeprecatedWrapperHelper` is still
    used in tests prefixed with "Deprecated_". All such tests and the
    helper can be removed when removing `WrapperDescriptor`. These tests
    already have working new versions.
    
    Bug: 338411141
    Change-Id: I2b5a5fb83165394eb8d17420e46c1219790d6900
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535194
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93890}

commit 89c0a6392a1b0d71beef1ba23ac7d6a73aadb0c5
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue May 14 11:25:23 2024 +0200

    [heap] Prepare deprecation of EmbedderRootsHandler::IsRoot()
    
    Instead of IsRoot() embedders need to switch to
    TracedReferenceHandling::kDroppable on traced references in order to
    not consider such pointers as strong in Minor GCs.
    
    Bug: 340098917
    Change-Id: Ic14b9105fa023c92732d9a2dfa55dedcd1d85f82
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535791
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93889}

commit 42bc7bfdf56cc7a8cd7757d96aa70b83ce82d9ff
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Tue May 14 12:15:47 2024 +0200

    heap: Add masm-specific unwinding annotations to GC trampolines
    
    The CL provides CFI for the PushAllRegistersAndIterateStack frame on
    Windows. This is necessary to help the unwinder unwind the stack and
    generate proper crash reports.
    
    The CL also removes the inline-assembly based version of the function.
    
    For stability gardeners: the CL shouldn't cause new crashes, but
    will likely show more of them.
    
    The contents of .xdata now:
    llvm-objdump -sj .xdata out/win/obj/v8_heap_base/push_registers_masm.obj
    
    out/win/obj/v8_heap_base/push_registers_masm.obj:       file format coff-x86-64
    Contents of section .xdata:
     0000 011b0c05 1b011400 14f012e0 10d00ec0  ................
     0010 0c300b70 0a600902 04030150           .0.p.`.....P
    
    Bug: 340102748
    Change-Id: Iceb7f6f5f3febe8deca6f7b186b71d4fc4b58c98
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526636
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93888}

commit 771a164937667a0f5127a81df92c31973ee5e15a
Author: pthier <pthier@chromium.org>
Date:   Thu Apr 25 13:26:07 2024 +0200

    [maglev] Fix typo in TerminalControlNodeT
    
    Rename TeminalControlNodeT to TerminalControlNodeT
    
    Bug: v8:7700
    Change-Id: Iad89ec274036b5980e8d430cc2996eeefa15357a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487864
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93887}

commit 8d9fd972dc4559124b5294f24b88355f3bb511ca
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed May 8 11:00:27 2024 +0200

    [heap] Account wasted bytes against allocation limit with MinorMS
    
    Bug: v8:12612
    Change-Id: I11787594d82d60e45fd920a9a97d1cdab0cd0a93
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5439412
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93886}

commit 3e0dbb4222b6fb3579dce0b92786218bd27ab657
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue May 14 12:34:08 2024 +0200

    [fuzzer][fix] Set sync_tier_up flag for the wasm-init-expr-fuzzer
    
    As in wasm-fuzzer-common, switch it to synchronous mode to avoid the
    nondeterminism of background jobs (tier up) finishing at random times.
    
    Fixed: 339517112
    Change-Id: Ieb21e1752e6a22925cdf0a5ef448e06c06d34c49
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535192
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93885}

commit e0c5cf4cc21a3ba9e6c13903f6418cdb9c3fe592
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue May 14 12:11:21 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - WasmAllocateArray
    - WasmAllocateStruct
    - WasmRefFunc
    
    Bug: 331100916
    Change-Id: Ie570af301d8623af896324d56b3ee4aca3bb2b1d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535195
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93884}

commit f3049bf770490e43d1ac711358e26fdcffd205be
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Tue May 14 17:43:01 2024 +0800

    [revec][wasm][turboshaft] Fix loadtrasform interval calculation
    
    Bug: v8:12716
    Change-Id: Ie6b86b1658fe653ea241cfad2674971f04436ad6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528983
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93883}

commit c3022f7a023f743627dd878e53faff5c894661c0
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed May 8 16:24:22 2024 +0200

    [maps] Improve printing of (proto) transitions
    
    * Print proto transitions when printing map trees
    * Add a macro to print transitions starting from the root
    
    Bug: 332914927
    Change-Id: I95281b6de38befb4ce563f11bcd44a88bf2b7ce0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5521036
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93882}

commit aa64aafc7fbcc5560159748267bb839ea363c102
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri May 10 14:53:58 2024 +0200

    [heap] Remove redundant cast
    
    Change-Id: I17b468ae67120e3bb42648711d61d3e248a6f38a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528001
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93881}

commit 8c2f4a3a4f7cf77aa7d34797687d3d92c6d688cf
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon May 13 17:53:03 2024 +0200

    Reland "[maglev] Finish block with Abort after CallRuntime(Throw*)"
    
    This reverts commit 55f3c16918946bfc411dfe383e52e7e5427b9925.
    
    Reason for revert: Unnecessary speculative revert
    
    Original change's description:
    > Revert "[maglev] Finish block with Abort after CallRuntime(Throw*)"
    >
    > This reverts commit ece915ee701133328f824e8e7b0d452bd77fa58f.
    >
    > Reason for revert: Suspected breaking roll: https://ci.chromium.org/ui/p/chromium/builders/try/mac-rel/1783373/overview
    >
    > Original change's description:
    > > [maglev] Finish block with Abort after CallRuntime(Throw*)
    > >
    > > Bug: v8:7700
    > > Change-Id: Idb7050d8ad8c15bba12db865dd7b30da2d5a5b4f
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526309
    > > Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    > > Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    > > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93826}
    >
    > Bug: v8:7700
    > Change-Id: Ic98e9a6c89cbedb6db953fe2a10a54f5aa1d0ddc
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5532607
    > Auto-Submit: Francis McCabe <fgm@chromium.org>
    > Commit-Queue: Francis McCabe <fgm@chromium.org>
    > Owners-Override: Francis McCabe <fgm@chromium.org>
    > Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    > Cr-Commit-Position: refs/heads/main@{#93837}
    
    Bug: v8:7700
    Change-Id: I156e2b7260b741344425b31c0a7c231bdfa775fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535191
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93880}

commit a2941a34a76bea341953db8c789d616597a45ca4
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon May 13 20:35:01 2024 +0200

    [heap] Fix cppgc young generation with new wrappers
    
    This adds Oilpan young generation support for new wrappers which was
    missing so far.
    
    Bug: 338411141
    Change-Id: If66476b466d9e2de975caa38900e9851839e9501
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534749
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93879}

commit 9122f2a1c7e1ff7e4970624014ef70ca25e76736
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri May 10 17:32:30 2024 +0200

    [heap] Fix UNREACHABLE crash with sticky markbits
    
    Bug: 333906585
    Change-Id: I4344a5dbbf5d7845bc8aaca205b920a0b9130879
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529246
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93878}

commit 1c852249c79fa01dbe034fab9167b9682c3130f6
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue May 14 09:04:27 2024 +0200

    [maglev] Extend NodeType with (un)detectables JS receivers
    
    Undetectable objects should return false in ToBoolean, whereas any
    other JSReceiver returns true. Since there is only one possible
    JSReceiver and undetectable object (aka document.all), we track its
    type separately.
    
    Fixed: 340167165
    Change-Id: I950f6390a3e42abe68e0de76106bae1fb0d0fb57
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535008
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93877}

commit 87c6dba4d32d9a376657d4c9a633895dc48eadc7
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon May 13 21:07:04 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/ef48ed5..e6bad9d
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/e138529..af58dae
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/fa6de7f..33af80a
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/2b354c6..f31c2c6
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/b4959bf..cef4fc6
    
    Roll created at https://cr-buildbucket.appspot.com/build/8747994647682855713
    
    Change-Id: Iadf8258de429c92ff7d935b6212b540937c77081
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5533274
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93876}

commit a3b9b118b8c424b66cc50b5717f607ec202110cd
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed May 8 16:55:41 2024 -0700

    [d8] Add quit()-inside-task test
    
    The actual fix for this landed in http://crrev.com/c/5526581
    
    Fixed: 42204216
    Change-Id: I1a8b23bfaa496157a2649a98c3f72afe12df6475
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528087
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93875}

commit 67584be85c83503a2b996af697566e425fc58720
Author: Shu-yu Guo <syg@chromium.org>
Date:   Mon May 13 21:54:35 2024 +0000

    Revert "[maglev] Inline GetIterator"
    
    This reverts commit 2098e649b4ab11274b72dc1252543ffbcef980f5.
    
    Reason for revert: Blocking roll
    https://ci.chromium.org/ui/p/chromium/builders/try/linux-rel/b8748021500461044865/test-results?q=ExactID%3Aninja%3A%2F%2F%3Ablink_web_tests%2Fhttp%2Ftests%2Fmojo%2Fbindings-api.html+VHash%3A17fb9c9fda03c867&clean=&sortby=&groupby=
    
    Original change's description:
    > [maglev] Inline GetIterator
    >
    > Bug: v8:7700
    > Change-Id: I8bc9ac2bc884e4f02e159aaf1a9b04b91fc4be4e
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5531447
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93856}
    
    Bug: v8:7700
    Change-Id: I895710dbfbdd24e620c05fb9af54fe8b8348ccec
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5536093
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Owners-Override: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93874}

commit a6f783e5d8e4c6c0b30fc20404837bbf57ce514a
Author: Shu-yu Guo <syg@chromium.org>
Date:   Mon May 13 21:59:17 2024 +0000

    Revert "[maglev] Inline ArrayIterator"
    
    This reverts commit af975a06e27d1436f2f9b40da352e6b6dbd13052.
    
    Reason for revert: Being dependent on crrev.com/c/5531447, which
    needs to be reverted for blocking roll
    
    Original change's description:
    > [maglev] Inline ArrayIterator
    >
    > Bug: v8:7700
    > Change-Id: Ia92c9256ed2ab209033aac37414dce6ef3166c53
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528005
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93857}
    
    Bug: v8:7700
    Change-Id: Id846614499d9287d1d3407e0366579df5a1a4fc7
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5536214
    Owners-Override: Shu-yu Guo <syg@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93873}

commit b3c01ac1e60afc9addad9942f7a9a6c5e8a4a6da
Author: Shu-yu Guo <syg@chromium.org>
Date:   Mon May 13 11:23:20 2024 -0700

    [compiler] Don't build AccessInfo for storing to module exports
    
    Bug: 340221135
    Change-Id: I5af35be6ebf6a69db1c4687107503575b23973c4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534518
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93872}

commit 473318dfdb09464902c7633cad03b16431145800
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Fri May 10 17:47:52 2024 +0200

    [infra] Use recursedeps for first-class GCS deps in build and buildtools
    
    Currently, V8 downloads GCS dependencies via hooks. This requires a
    sha1 hashsum in the dependent repository.
    
    With the introduction of first class GCS dependencies, these hashsum
    files will be deprecated in favor of managing GCS dependencies in the
    deps section of the DEPS file.
    
    This change adopts this migration by removing the artifact download in
    the hooks section, and by adding the affected dependencies to the
    recursedeps section.
    
    This is currently supported for sysroot
    (build, https://crrev.com/c/5519633) and clang-format
    (buildtools, https://crrev.com/c/5506857) related artifacts.
    
    Bug: 336898179
    Change-Id: I45a6e05fcf4eb8c03d30c893cbe2da49f7295851
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528008
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93871}

commit 3978dfb53576514d6944d4524eb5d0391fbc73ba
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed May 8 15:20:31 2024 +0200

    [heap] Add flag for using parallel threads in background GCs
    
    This CL adds a new flag that allows us to finch a mode where
    background/efficiency GCs always use parallel threads in the atomic
    pause. In the current mode we would only enabled parallel threads
    if the isolate/tab moves into the foreground during incremental
    marking.
    
    Bug: 40278463
    Change-Id: If15d2567fcf3fd3a17bce1fa03a575887ba778ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526294
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93870}

commit 66fd92750c7daec323322eb65cb1a4fc5bf5a529
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon May 13 18:01:38 2024 +0200

    [test] Remove deprecated uses of WrapperDescriptor
    
    The uses were not required for the tests anymore.
    
    Bug: 338411141
    Change-Id: Ib3300e1df0bcb442d496a727be8b2c0118d2f5d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535009
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93869}

commit eb8ff424457580b001d8d3cc8824780be9a5a13c
Author: Lei Zhang <thestig@chromium.org>
Date:   Thu May 9 13:57:28 2024 -0700

    Remove references to `use_gold` GN variable
    
    Support for the Gold linker is being removed in Chromium, so remove
    build rules that reference it.
    
    Bug: 333645515
    Change-Id: I969b0bed4fb0d677da4cb7bc3303502eb2849ab2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528990
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Commit-Queue: Lei Zhang <thestig@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93868}

commit afc3a77bbacf91f8c3f9b41a38799b4fb308540e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon May 13 09:01:31 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/01e3c73..ef48ed5
    
    Rolling buildtools/win: git_revision:b0c2742896b6b9f869dc0eb35ae4785cbf2a4512..git_revision:df98b86690c83b81aedc909ded18857296406159
    
    Rolling third_party/boringssl: https://chromium.googlesource.com/chromium/src/third_party/boringssl/+log/0c02157..711f324
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/a9b9284..e138529
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/091120a..b4959bf
    
    Roll created at https://cr-buildbucket.appspot.com/build/8748039949554532737
    
    Change-Id: I5dd07523af6fe809b1b10e28cff0adc2c66b9f6e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5530600
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93867}

commit 1f2786cb07c9f8bff8f38377fa93910454e71acd
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon May 13 17:42:31 2024 +0200

    [interpreter] Only Clear/Restore pending messages when CMD_RETHROW
    
    We only need to save/restore pending messages when we're catching and rethrowning an exception, so push the code to paths that handle CMD_RETHROW. (We always pass through RETHROW if we caught since we might rethrow. This could be overwritten later of course, in which case we won't restore.)
    
    This is a reland of https://chromium-review.googlesource.com/c/v8/v8/+/5529233 with a test for the blocking failure. The fix is to avoid reusing the register between the context that's stashed for the `try` and the `message`. Otherwise in loops with a finally that exit the loop through the rethrow path, sloppy tracking of loop assignments thinks the context cache is assigned (by the reused message); causing a loop phi to be created.
    
    A possible cleaner solution is to not store the context at runtime at all, and to recompute the context. However, our optimizing compilers also rely on the interpreter stashing the context on the side for `catch`, so it's not trivial to change this.
    
    
    Change-Id: I2a75a248ad252e30540268b575be0fe1380c097f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534748
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93866}

commit 9626688cd7680a202c38e7185d74f042beca9cb8
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon May 13 17:22:37 2024 +0200

    [maps] Fix Map::IsConsistentWithBackPointers
    
    As it accidentally always returned true. Only used in tests.
    
    Bug: 332914927
    Change-Id: I742240a4e478fd51651e684b831725d5c8a88e14
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535190
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93865}

commit 2c738b709b5a22466a64d7bca9e21a830c5c20f1
Author: Paolo Severini <paolosev@microsoft.com>
Date:   Mon May 13 14:57:26 2024 +0200

    [memory64] Fix cctest test-run-wasm-memory64 in trap handling mode
    
    Fix the cctest test-run-wasm-memory64 in --wasm-memory64-trap-handling
    mode by correctly initializing the Memory maximum_size.
    
    Bug: 42204673
    Change-Id: I285910862fd65c4b7531ac1633932137437de4a3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5531702
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Paolo Severini <paolosev@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93864}

commit 4edd625bca3163d03ed5e52c8f883146e27e0d1a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 13 15:10:52 2024 +0000

    Revert "[turboshaft] Maglev-to-ts: support GetIterator"
    
    This reverts commit f50d654590de8ef36fb6dde650f182e09644fd85.
    
    Reason for revert: Failures on multiple builds, e.g. Linux Shared:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20shared/59524/overview
    
    Original change's description:
    > [turboshaft] Maglev-to-ts: support GetIterator
    >
    > Bug: 42204525
    > Change-Id: I50170c52eae203da1635b1835da6ab21c1573863
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526491
    > Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93861}
    
    Bug: 42204525
    Change-Id: I3ef409a276632d16860374201f6773bca976cca6
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5535189
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93863}

commit 22eb5e602da79728fe4085a1e707b6c6a4bebfd9
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue May 7 21:37:32 2024 +0200

    [heap] Rework EmbedderRootsHandlerTest
    
    Rework tests to make use of new wrapper/wrappable APIs.
    
    Bug: 338411141
    Change-Id: I2b809f98b46710c3b3a572f1e34c3187253757b1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522218
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93862}

commit f50d654590de8ef36fb6dde650f182e09644fd85
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon May 13 15:47:22 2024 +0200

    [turboshaft] Maglev-to-ts: support GetIterator
    
    Bug: 42204525
    Change-Id: I50170c52eae203da1635b1835da6ab21c1573863
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526491
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93861}

commit 6615a7a9d0b16a8e6d7611431d85cfefe0e6acbe
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon May 13 15:43:15 2024 +0200

    [sandbox] Check array initial map was not corrupted
    
    DependOnInitialMapInstanceSizePrediction uses the default initial
    map for the array_function to calculate the slack size.
    
    Later we update the initial map depending on the elements kind.
    We assume that the slack calculated by this updated initial map
    is the same.
    
    So in the CL we add a check in CapturedObject::set to be sure
    we don't overflow the CapturedObject.
    
    Drive-by: We refactor ReduceArrayConstructor to make the
    initial map logic more explicit.
    
    Fixed: 339517309
    Change-Id: Ib7de77738895c1ff2ccfced2d4bc5499c18a5ca2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534744
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93860}

commit d40595e47174f06da1e5ca94bc5a3277a470a1de
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon May 13 10:58:39 2024 +0200

    [api] Fully deprecated WrapperDescriptor
    
    Bug: 338411141
    Change-Id: I76f7f964dad58cbed7eccca139200d27c320950d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526611
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93859}

commit 94cd472546d8c9efd20219f025989a77eb96f939
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon May 13 15:19:12 2024 +0200

    [cppgc] Fix registering on-stack movable slots
    
    We assume that there's no on-stack slots for movable references as
    compaction doesn't run when finalizing GC with stack. Unfortunately,
    it is possible to trigger write barrier for on-stack slots. It's
    expensive to filter those out generically (as that would require an
    on-stack check for each slot) and marking does work with such slots.
    As a result, filter them specifically before storing movable
    references.
    
    Bug: 339967265
    Change-Id: I2449a47c4df92a4d117789ce7b93e6ef8075dc93
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534767
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93858}

commit af975a06e27d1436f2f9b40da352e6b6dbd13052
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Fri May 10 17:58:47 2024 +0200

    [maglev] Inline ArrayIterator
    
    Bug: v8:7700
    Change-Id: Ia92c9256ed2ab209033aac37414dce6ef3166c53
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528005
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93857}

commit 2098e649b4ab11274b72dc1252543ffbcef980f5
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Fri May 10 17:56:58 2024 +0200

    [maglev] Inline GetIterator
    
    Bug: v8:7700
    Change-Id: I8bc9ac2bc884e4f02e159aaf1a9b04b91fc4be4e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5531447
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93856}

commit 2d2c593bf6ba3405b4a925bde1da7cbfcca361c0
Author: Eric Leese <leese@chromium.org>
Date:   Mon May 13 12:38:48 2024 +0000

    Fix never pause here behavior
    
    This fixes a few issues:
     - Log points or other side effecting breakpoints
       can be executed multiple times when there are
       breaks for other reasons at the same line.
     - In some cases exception muting logic is not
       triggered because we are in internal JavaScript
       code rather than on the code where "Never Pause
       Here" was set.
    
    Implementation details:
     - Breakpoint evaluation happens in only one location
       in the code. If there are breakpoints but all
       have false conditions, we recognize the current
       location as a muted location, so if we pause for
       a different reason we can cancel.
     - Because of this, debugger statements now also
       need to be replaced by debug breaks if a breakpoint
       is set on them. To prevent multiple pauses, we also
       mute the location after stopping on a debug break
       at a location that happens to be a debugger statement.
     - Because of this, we now only need to check for
       instrumentation breakpoints in one location.
     - On exceptions we find the top debuggable frame and
       check if the location is muted.
    
    Bug: b:40884221
    Change-Id: I71da45dbea6f33f6a398458961977993621b5343
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526609
    Commit-Queue: Eric Leese <leese@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93855}

commit b24286a9fbe9f1ab530363e6ed6be6cb455f69b5
Author: Eric Leese <leese@chromium.org>
Date:   Mon May 13 07:55:30 2024 +0000

    Test for reliable never pause here
    
    Checks whether breakpoints successfully mute other
    pause events and whether other pause events cause
    multiple evaluations.
    
    Bug: b:40884221
    Change-Id: Id68bff97c8d4ec8d5cf373141b7485613eaa7710
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526608
    Commit-Queue: Eric Leese <leese@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93854}

commit ca4889a4ab88c3908c882c906cfe5fb6668017f0
Author: V8 Autoroll <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon May 13 05:40:21 2024 -0700

    Version 12.7.0
    
    Change-Id: I18cfffd392d7d901f35e78f5fc38d690f975bcc9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5532710
    Reviewed-by: Lutz Vahl <vahl@chromium.org>
    Commit-Queue: Lutz Vahl <vahl@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93853}

commit 80246226d630ed7259b501e92ebb33e539ea40d1
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon May 13 14:25:54 2024 +0200

    [turboshaft] Maglev-to-ts: support map migrations
    
    Bug: 42204525
    Change-Id: I47ab7469acc512f82e1846ec601cb2bdf6f5f5ea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528006
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93852}

commit 190b9f3ddde82bcc093817f02fb51bb756ebea10
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 10 15:54:11 2024 +0200

    [turboshaft] Maglev-to-ts: support transitions
    
    Bug: 42204525
    Change-Id: Iaa2433a123b767d23e692eac0846635b7077c941
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528003
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93851}

commit 52d9e6db7f4664f0a0a11faaff4e7d28aa898bd8
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon May 13 13:43:03 2024 +0200

    [wasm][jspi] Fix WA.promising of a re-exported JS import
    
    In this case the ref is not the instance but a WasmApiFunctionRef, so
    the cast is invalid. Use the instance field instead.
    
    R=jkummerow@chromium.org
    
    Bug: 340102752
    
    Change-Id: I07969f67d319bc016d96d8a2402894b175aa4c76
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534745
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93850}

commit be66d6fd36d01d8ff6657c085d890d81d89d593e
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 10 08:01:41 2024 +0200

    Reland "[turboshaft] Enable loop unrolling by default"
    
    This is a reland of commit e2db93807ca98a85fc1b466427dd1e8122e1c1c3
    
    Nothing is changing in this reland; the original CL was reverted by
    mistake.
    
    Original change's description:
    > [turboshaft] Enable loop unrolling by default
    >
    > Bug: 42202729
    > Change-Id: I3ce58c0aac7c3d85e7a5d18815cb44873767ecd0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526308
    > Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93818}
    
    Bug: 42202729
    Change-Id: Ie06ad470589e3ad2443a7a6274d42afbae092ec9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526490
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93849}

commit 9ebca66a57409dd9441868a9ce429c0c3f61409d
Author: Marja Hölttä <marja@google.com>
Date:   Mon May 13 10:39:01 2024 +0200

    [rab/gsab] Remove --harmony-rab-gsab (has been on by default for a while)
    
    Bug: v8:11111
    Change-Id: Ie74e7737f3e2e8730820cf00f1cbc7ae02b515af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516580
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93848}

commit 8a69c7880844ab00ee2f32079579a040a87eedca
Author: Shu-yu Guo <syg@chromium.org>
Date:   Fri May 10 12:08:04 2024 -0700

    [ic] Use slow stub element handler for non-JSObjects
    
    Fixed: 339736513
    Change-Id: I134a046475b0b004c3de1bacc5b2f1a7fa503d96
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5527898
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93847}

commit 4eaaa2a2afb7c21374b392dfef533d50cc20f03b
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 8 17:08:05 2024 +0200

    [maglev] Optimize TypeOf based on KNA type info (Part II)
    
    Add callables to https://crrev.com/c/5522226
    
    Bug: v8:7700
    Change-Id: Ib75fb2e43326c46ea08d544a109c61e8bca0d328
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526297
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93846}

commit 33e89ebe5a50e7375745fbb61984c961ec219de7
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon May 13 06:30:53 2024 +0000

    Revert "[interpreter] Only Clear/Restore pending messages when CMD_RETHROW"
    
    This reverts commit 586adcb4730763812a399b4ead3518a0ab535f37.
    
    Reason for revert:
    Suspected to block the current roll:
    https://ci.chromium.org/ui/p/chromium/builders/try/mac-rel/1784362/test-results?sortby=&groupby=
    
    Original change's description:
    > [interpreter] Only Clear/Restore pending messages when CMD_RETHROW
    >
    > We only need to save/restore pending messages when we're catching and rethrowning an exception, so push the code to paths that handle CMD_RETHROW. (We always pass through RETHROW if we caught since we might rethrow. This could be overwritten later of course, in which case we won't restore.)
    >
    > Change-Id: Ic476c99747077e316b306a5d760d6fb13ae85899
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529233
    > Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    > Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93817}
    
    Change-Id: Ied65ba31216dfb226f7f10344f0bafb8145b3c51
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526606
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93845}

commit 2fa0a509c83ed587c78ccbf367d1c1bd2b9a643c
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon May 13 06:31:45 2024 +0000

    Reland "Partial revert: [maglev] Constant fold reference equal of constants"
    
    This reverts commit 6ffe5e5d84c26ba3e3442c2da8b5344776799160.
    
    Reason for revert: this is a necessary fix that's low-risk since it's a revert itself.
    
    Original change's description:
    > Revert "Partial revert: [maglev] Constant fold reference equal of constants"
    >
    > This reverts commit 8458aa9806b49c040f2543f092791559715d2c06.
    >
    > Reason for revert: Suspected of breaking https://ci.chromium.org/ui/p/chromium/builders/try/mac-rel/1783373/overview
    >
    > Original change's description:
    > > Partial revert: [maglev] Constant fold reference equal of constants
    > >
    > > The check if the node is a boolean type different than one of the
    > > boolean roots needs to be done with the original node.
    > >
    > > Fixed: 339506922
    > > Change-Id: I1fa981bbde8b9606722722efe0ca9669a835e6bb
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529237
    > > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93821}
    >
    > Change-Id: I16a9d9c7c245ef6367ea6b25d4f932a7c2125274
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5531139
    > Commit-Queue: Francis McCabe <fgm@chromium.org>
    > Auto-Submit: Francis McCabe <fgm@chromium.org>
    > Owners-Override: Francis McCabe <fgm@chromium.org>
    > Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    > Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    > Cr-Commit-Position: refs/heads/main@{#93836}
    
    Change-Id: I3e881e1009f40e26c2bc5b421d56700b92d7107f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526607
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93844}

commit fe67713b2ff62f8ba290607bf7482a8efd0ca6cc
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri May 10 15:55:34 2024 +0200

    Fix and clean up some JSObject::cast()
    
    A few of these should account for the possibility of the object
    not being a JSObject.
    Some of them were simply redundant.
    
    Change-Id: Ic4a57debb268be008e3336f354c3c080d580ddca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528004
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93843}

commit 3c66d7e5554ae5521f6f00863393cc92d5c67f29
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed May 8 18:16:00 2024 +0800

    [loong64][mips64][risv64] Don't clear i32 high word for sandbox
    
    Don't need to clear the upper halves of i32 values for sandbox reason
    on LoongArch64, MIPS64 and riscv64 platform, because we'll explicitly
    zero-extend their lower halves before using them for memory accesses.
    
    Change-Id: Ifa899e0386ca506bfc3df1347ddb7fdf6bc2096b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5524820
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93842}

commit daee631efc4502edf1f94142b445d7b8bec193c4
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat May 11 19:20:38 2024 -0700

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/c95cc687..9b4c6577
    
    Roll created at https://cr-buildbucket.appspot.com/build/8748183392556628465
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: I7062ad95a4b123f214090c96303493ccd12cacb5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5532188
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93841}

commit ca83503c7aa4d3e974a63ac921c9d705b9cbb066
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Sat May 11 16:02:39 2024 +0000

    Revert "[turboshaft] Enable loop unrolling by default"
    
    This reverts commit e2db93807ca98a85fc1b466427dd1e8122e1c1c3.
    
    Reason for revert: Suspect for roll blocking fails: https://ci.chromium.org/ui/p/chromium/builders/try/mac-rel/b8748319705137003633/test-results?q=ExactID%3Aninja%3A%2F%2F%3Ablink_wpt_tests%2Fexternal%2Fwpt%2Fcss%2Fcss-logical%2Flogical-box-size.html+VHash%3Ae41cdf13a7956499&clean=&sortby=&groupby=
    
    Original change's description:
    > [turboshaft] Enable loop unrolling by default
    >
    > Bug: 42202729
    > Change-Id: I3ce58c0aac7c3d85e7a5d18815cb44873767ecd0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526308
    > Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93818}
    
    Bug: 42202729
    Change-Id: I9baa02bfdc548f31b0ab7e8b2df95bf078fb0d55
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5533464
    Owners-Override: Deepti Gandluri <gdeepti@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Deepti Gandluri <gdeepti@chromium.org>
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93840}

commit 46125afcd4fbe9f4af6d0b609c56ae24dcede5e1
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri May 10 21:01:53 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/3a1d1cc..923a565
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6e32e92..a9b9284
    
    Rolling third_party/fp16/src: https://chromium.googlesource.com/external/github.com/Maratyszcza/FP16/+log/581ac1c..0a92994
    
    Roll created at https://cr-buildbucket.appspot.com/build/8748266440919145489
    
    Change-Id: I75e828489bc2ee4ccad0306fe7c97c1d472f4682
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529941
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93839}

commit 5c89295d9305dd3ffde5e77f044c3ff77a830332
Author: 杨文明 <yangwenming@bytedance.com>
Date:   Thu May 9 23:00:07 2024 +0800

    [bugfix][riscv64] init RVV registers in riscv simulator.
    
    This CL initialized Vregister_ in riscv simulator and thus avoid
    potential UBs, which result in random failure of test case
    RunWasmLiftoff_S128Load32Zero.
    
    Bug: 339546246
    Change-Id: Ic674847b2afb367cebdda6f87ee00f0c516b9535
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528377
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93838}

commit 55f3c16918946bfc411dfe383e52e7e5427b9925
Author: Francis McCabe <fgm@chromium.org>
Date:   Fri May 10 21:57:14 2024 +0000

    Revert "[maglev] Finish block with Abort after CallRuntime(Throw*)"
    
    This reverts commit ece915ee701133328f824e8e7b0d452bd77fa58f.
    
    Reason for revert: Suspected breaking roll: https://ci.chromium.org/ui/p/chromium/builders/try/mac-rel/1783373/overview
    
    Original change's description:
    > [maglev] Finish block with Abort after CallRuntime(Throw*)
    >
    > Bug: v8:7700
    > Change-Id: Idb7050d8ad8c15bba12db865dd7b30da2d5a5b4f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526309
    > Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    > Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93826}
    
    Bug: v8:7700
    Change-Id: Ic98e9a6c89cbedb6db953fe2a10a54f5aa1d0ddc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5532607
    Auto-Submit: Francis McCabe <fgm@chromium.org>
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Owners-Override: Francis McCabe <fgm@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93837}

commit 6ffe5e5d84c26ba3e3442c2da8b5344776799160
Author: Francis McCabe <fgm@chromium.org>
Date:   Fri May 10 22:00:48 2024 +0000

    Revert "Partial revert: [maglev] Constant fold reference equal of constants"
    
    This reverts commit 8458aa9806b49c040f2543f092791559715d2c06.
    
    Reason for revert: Suspected of breaking https://ci.chromium.org/ui/p/chromium/builders/try/mac-rel/1783373/overview
    
    Original change's description:
    > Partial revert: [maglev] Constant fold reference equal of constants
    >
    > The check if the node is a boolean type different than one of the
    > boolean roots needs to be done with the original node.
    >
    > Fixed: 339506922
    > Change-Id: I1fa981bbde8b9606722722efe0ca9669a835e6bb
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529237
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93821}
    
    Change-Id: I16a9d9c7c245ef6367ea6b25d4f932a7c2125274
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5531139
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Auto-Submit: Francis McCabe <fgm@chromium.org>
    Owners-Override: Francis McCabe <fgm@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93836}

commit 981bb15ba4dbf9e2381dfc94ec2c4af0b9c6a0b6
Author: Shu-yu Guo <syg@chromium.org>
Date:   Fri May 10 10:38:12 2024 -0700

    [icu] Remove ICU UBSan ignorelist entry
    
    Recent roll contains fix.
    
    Fixed: 339286987
    Change-Id: I6f9d4fd705d035770d2a0d14edcda1fc4f9dba7f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528278
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93835}

commit 864bb0f3faa52d37d5dc83da47cc768e94dafa01
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Fri May 10 10:36:19 2024 -0700

    [shared-struct] Make lockAsync fail instead of crashing
    
    It is possible for the call to the promise_then builtin (that the
    asyncLock uses to queue internal promises) to fail. E.g. reaching max
    stack size.
    
    This CL allows the lockAsync and waitAsync APIs to fail instead of
    crashing in a CHECK.
    
    Bug: 42202493
    Change-Id: Ie8a3150e96ff84aefa4bfc77f07913825bea221f
    Fixed: 339043696
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528989
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Pardo <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93834}

commit 5fd34a1671381771b660a1a8aeb51212c62dadeb
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri May 10 10:06:15 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/7796c50..01e3c73
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/9703d91..4e0e9c7
    
    Rolling buildtools/win: git_revision:f284b6b47039a2d7edfcbfc51f52664f82b5a789..git_revision:b0c2742896b6b9f869dc0eb35ae4785cbf2a4512
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/31bdf8f..8c54b7d
    
    Rolling third_party/boringssl/src: https://boringssl.googlesource.com/boringssl/+log/06fb6e1..2db0eb3
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/4cc2600..3a1d1cc
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/df43778..6e32e92
    
    Rolling third_party/instrumented_libs: https://chromium.googlesource.com/chromium/third_party/instrumented_libraries/+log/0afcd95..0172d67
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/d17298a..a37a3aa
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/964cf5c..091120a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8748307663613570673
    
    Change-Id: I0a96296ec10bbacbffcf062cfaf2bc8d8741061b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5532181
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93833}

commit f8fa22073a0db4a62775efba87ddee5f949a2095
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Fri May 10 16:54:49 2024 +0200

    Reland "[tracing] Remove `base/trace_event/common` dependency"
    
    This reland additionally removes `base` from
    `generate-header-include-checks.py`, as the root directory got
    removed. See https://crrev.com/c/5529240/1..3.
    
    Original change's description:
    > Revert "[tracing] Remove `base/trace_event/common` dependency"
    >
    > This reverts commit 993b79e7f5121bc1ff81cbc31ccdd42729b4f054.
    >
    > Reason for revert:
    > https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20header%20includes%20-%20builder/15361/overview
    >
    > And this, but not consistent it seems. Maybe an incremental
    > build problem:
    > https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20builder/73951/overview
    >
    > Original change's description:
    > > [tracing] Remove `base/trace_event/common` dependency
    > >
    > > Currently, V8 depends on base/trace_event/common which includes a single
    > > file being shared. It contains two tracing macro implementations: one
    > > which is based on perfetto, and a second legacy one.
    > >
    > > V8 is the only client of the legacy version, which got removed in
    > > https://crrev.com/c/5505657 and causes a failure of our roll (e.g.
    > > https://crrev.com/c/5512234).
    > >
    > > This change moves the legacy code into V8, removes the obsolete
    > > dependency, and refactors the build configurations.
    > >
    > > Bug: 338608342
    > > Change-Id: I9254592b5c581d64807fe25c92ac931356569453
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522493
    > > Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    > > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > > Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93823}
    >
    > Bug: 338608342
    > Change-Id: Iefbd2c7e9a8c0af0f437a60faa345db72879d50d
    > No-Presubmit: true
    > No-Tree-Checks: true
    > No-Try: true
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529239
    > Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    > Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    > Owners-Override: Michael Achenbach <machenbach@chromium.org>
    > Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93825}
    
    Bug: 338608342
    Change-Id: I90b8def2f3bf0142b3bc545b95cb3ebb689ec46c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529240
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93832}

commit 850eb545d170ce928a30a8892b3435407c99b313
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri May 10 10:49:38 2024 +0200

    [wasm][sandbox] Add WasmTrustedInstanceData::native_module
    
    Giving the WasmTrustedInstanceData a trustworthy way to retrieve the
    associated NativeModule (whereas the existing multi-hop pointer path
    to it required going through potentially-corrupted heap objects).
    
    Bug: 336507783
    Change-Id: Iff2247d63f2f0668ac658198bbf0fd499836f7f0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529236
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93831}

commit 7c048f5e960b23c7eba586fa19af7707b3403dad
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu May 9 07:01:51 2024 +0000

    [sandbox] Exit with status 0 in crash filter when not fuzzing
    
    This is needed for regressions tests, which should succeed if no
    sandbox violation is detected.
    
    Bug: chromium:336488510
    Change-Id: I5b7e9f7106b725e83becb930f2767492b51b9c55
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526303
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93830}

commit c6926e719860560a2d50f95269052086d852f44a
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri May 10 14:46:58 2024 +0200

    [test] Resolve an incompatible flag on NumFuzz
    
    Prevent a flag inconsistency by explicitly listing the negation of the
    incompatible flag.
    
    Bug: 339459688
    Change-Id: Ia723262e606debd92a3238a1f2dbbf1cf5765500
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529241
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93829}

commit fd672fb7bc20a7cb722d74e686ec008fba5cf740
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri May 10 14:44:49 2024 +0200

    [heap] Fix contradictory flag implications
    
    We have a neg-neg implication from --minor-ms to --separate-gc-phases,
    to disable it when explicitly running with --no-minor-ms.
    As a result, running on ToT with --no-minor-ms and --separate-gc-phases
    reports a flag contradiction.
    Fix by making the neg-neg implication a weak one.
    
    Bug: 40096225
    Change-Id: Ia45cfd99cfb424c979ad2c0fd176a20f656f7edd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5531448
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93828}

commit fe502c15ab0896fbc004d2c851a963674e79aae2
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri May 10 13:20:19 2024 +0200

    [api] ReturnValue: Provide more setters for number primitives
    
    Bug: 339481290
    Change-Id: Ie4904b3d4513e7d42349193b8d0fa752cad60620
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526312
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93827}

commit ece915ee701133328f824e8e7b0d452bd77fa58f
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri May 10 11:45:05 2024 +0200

    [maglev] Finish block with Abort after CallRuntime(Throw*)
    
    Bug: v8:7700
    Change-Id: Idb7050d8ad8c15bba12db865dd7b30da2d5a5b4f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526309
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93826}

commit 2d6d467162505d2723ffea3667a7e3410b43f4c8
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri May 10 11:33:24 2024 +0000

    Revert "[tracing] Remove `base/trace_event/common` dependency"
    
    This reverts commit 993b79e7f5121bc1ff81cbc31ccdd42729b4f054.
    
    Reason for revert:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20header%20includes%20-%20builder/15361/overview
    
    And this, but not consistent it seems. Maybe an incremental
    build problem:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20builder/73951/overview
    
    Original change's description:
    > [tracing] Remove `base/trace_event/common` dependency
    >
    > Currently, V8 depends on base/trace_event/common which includes a single
    > file being shared. It contains two tracing macro implementations: one
    > which is based on perfetto, and a second legacy one.
    >
    > V8 is the only client of the legacy version, which got removed in
    > https://crrev.com/c/5505657 and causes a failure of our roll (e.g.
    > https://crrev.com/c/5512234).
    >
    > This change moves the legacy code into V8, removes the obsolete
    > dependency, and refactors the build configurations.
    >
    > Bug: 338608342
    > Change-Id: I9254592b5c581d64807fe25c92ac931356569453
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522493
    > Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93823}
    
    Bug: 338608342
    Change-Id: Iefbd2c7e9a8c0af0f437a60faa345db72879d50d
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529239
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Owners-Override: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93825}

commit 2f3ac92829c4eda57c2c96ebdb933f57bf45ba17
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 8 10:08:17 2024 +0200

    [turboshaft] V<>ify Turboshaft (Change/ChangeOrDeopt)
    
    Operations processed:
    - ChangeOp
    - ChangeOrDeoptOp
    
    Bug: chromium:331100916
    Change-Id: I08376f53887510fd310f627e288b7e2fe16857df
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522499
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93824}

commit 993b79e7f5121bc1ff81cbc31ccdd42729b4f054
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Tue May 7 14:57:11 2024 +0000

    [tracing] Remove `base/trace_event/common` dependency
    
    Currently, V8 depends on base/trace_event/common which includes a single
    file being shared. It contains two tracing macro implementations: one
    which is based on perfetto, and a second legacy one.
    
    V8 is the only client of the legacy version, which got removed in
    https://crrev.com/c/5505657 and causes a failure of our roll (e.g.
    https://crrev.com/c/5512234).
    
    This change moves the legacy code into V8, removes the obsolete
    dependency, and refactors the build configurations.
    
    Bug: 338608342
    Change-Id: I9254592b5c581d64807fe25c92ac931356569453
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522493
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93823}

commit 9910d1bededa4ccbe19e9aa33e66e7b029c18639
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri May 10 11:09:47 2024 +0200

    [wasm][fuzzer][cleanup] Reserve vector for types in module generation
    
    Change-Id: If2682bb0f0a62f9ac3073a2b80f8154a864c2376
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529238
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93822}

commit 8458aa9806b49c040f2543f092791559715d2c06
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Fri May 10 11:09:14 2024 +0200

    Partial revert: [maglev] Constant fold reference equal of constants
    
    The check if the node is a boolean type different than one of the
    boolean roots needs to be done with the original node.
    
    Fixed: 339506922
    Change-Id: I1fa981bbde8b9606722722efe0ca9669a835e6bb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529237
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93821}

commit cc05792346fb017eaa961ee7d35cf1f9bb53bb0a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri May 10 10:38:29 2024 +0200

    [builtins] HasOnlySimpleElements is false for non-JSObjects
    
    Bug: 338908243
    Change-Id: I91139167fb186d56db1695a05e0173069c6c195b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529235
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93820}

commit 35e86d86a516cbc855f1032fb9485a406b62b10c
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri May 10 10:29:32 2024 +0200

    [wasm][code flushing] Add histogram for flushed code size (in bytes)
    
    All Liftoff code is flushed on emergency GCs for allocations and on
    memory pressure. This CL introduces a histogram that collects the code
    size that is being flushed at these events.
    
    About the histogram:
    - we want to see the cases when there is no Wasm code being flushed
      (hence minimum size 0)
    - based on V8.WasmModuleSizeBytes.wasm the module can go up around
      almost half GB (hence the max size)
    
    Other histograms that we can look at to see potential negative effects
    of flushing are the V8.WasmNumLazyCompilations*Sec histograms.
    
    Bug: 339120678
    Change-Id: I176c7c618100a8024884a844cabd1953205ae5e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522503
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93819}

commit e2db93807ca98a85fc1b466427dd1e8122e1c1c3
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 10 08:01:41 2024 +0200

    [turboshaft] Enable loop unrolling by default
    
    Bug: 42202729
    Change-Id: I3ce58c0aac7c3d85e7a5d18815cb44873767ecd0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526308
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93818}

commit 586adcb4730763812a399b4ead3518a0ab535f37
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri May 10 10:19:46 2024 +0200

    [interpreter] Only Clear/Restore pending messages when CMD_RETHROW
    
    We only need to save/restore pending messages when we're catching and rethrowning an exception, so push the code to paths that handle CMD_RETHROW. (We always pass through RETHROW if we caught since we might rethrow. This could be overwritten later of course, in which case we won't restore.)
    
    Change-Id: Ic476c99747077e316b306a5d760d6fb13ae85899
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529233
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93817}

commit 585f92b6cfff62b8763c23492f30d9bbbbcdab42
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 10 09:12:34 2024 +0200

    [turboshaft] Avoid overflow in loop unrolling approx iteration count
    
    This could lead to thinking that a loop has only few iterations even
    though it doesn't, which would allow to remove its stack check, which
    would prevent interruptions in this loop.
    
    Fixed: 339492379
    Bug: 42202729
    Change-Id: I1c3aa1cc6f6c6e99334840342c55d0cccc109072
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526310
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93816}

commit 88a7f73568f8c7d9d4a0590cd9fd4f96767510ed
Author: Paolo Severini <paolosev@microsoft.com>
Date:   Thu May 9 13:49:29 2024 +0200

    [wasm] Enable --wasm-memory64-trap-handling fuzzing
    
    Bug: 42204673
    Change-Id: I399c34d737db25cb546bffbe51510fe062e37446
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526579
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Paolo Severini <paolosev@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93815}

commit 18554e9565490329ddbbb56cc20b191395cbaa00
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Thu May 9 14:40:35 2024 +0800

    [revec][wasm][turboshaft] Print function name when trace revec
    
    Bug: v8:12716
    Change-Id: I11da3d075c3ab7c672b0be3f242684c716afd77f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528981
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93814}

commit a6be69c05e61bee07a65b9d5fbb6949239180d6c
Author: Marja Hölttä <marja@google.com>
Date:   Wed May 8 15:24:30 2024 +0200

    [object-in-array] Add missing support for array-in-object in SP / TF
    
    These should've been in https://chromium-review.googlesource.com/c/v8/v8/+/5518450 but weren't.
    
    Bug: 42204675
    Change-Id: I2689d088d0a97336652a03a432ccb259af4322c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526295
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93813}

commit 49272427717aac6de4493b04f0b4daa4efd14635
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu May 9 21:44:46 2024 -0700

    Update ICU (trusted)
    
    Rolling third_party/icu: https://chromium.googlesource.com/chromium/deps/icu/+log/364118a..98f2494
    
    Reverse wpo.patch and remove it (Shu-yu Guo)
    https://chromium.googlesource.com/chromium/deps/icu/+/98f2494
    
    [fuchsia] Ignore errors on newline-without-eof (Filip Filmar)
    https://chromium.googlesource.com/chromium/deps/icu/+/d94ab13
    
    Roll created at https://cr-buildbucket.appspot.com/build/8748355150008625233
    
    Change-Id: Ib44f76597d1cf93e38717b80a0460fb8ec434031
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529789
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93812}

commit f320600cd1f48ba6bb57c0395823fe0c5e5ec52e
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu May 9 12:03:28 2024 -0700

    [wasm-gc] Only normalize JSObject targets in SetOrCopyDataProperties
    
    Bug: 339458194
    Change-Id: I4d6eebdd921971fa28d7c474535d978900ba633f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5527397
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93811}

commit 66c0bd3237b1577e6291de56003f8fddc6b65b16
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu May 9 09:51:37 2024 +0000

    Revert "[api] Avoid atomic load for Object::Unwrap()"
    
    This reverts commit 31efb6c0cb99bc328f1ce5eb7ea6dfd1ab976779.
    
    Reason for revert: This is wrong because the markbit is part of the object pointer.
    
    Original change's description:
    > [api] Avoid atomic load for Object::Unwrap()
    >
    > CppHeapPointer entries are always created on the same thread and thus
    > do not need to be read atomically on the API. The GC uses separate
    > paths with atomics already.
    >
    > Bug: 328117814, 339322849
    > Change-Id: I34a2e4c5deb52226f1338c2ace8fd7fd9493c6f2
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526473
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Samuel Groß <saelo@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93805}
    
    Bug: 328117814, 339322849
    Change-Id: I23b7a06a03a44ea901998db238b6c688b061e0e6
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5529234
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93810}

commit 7c1797de5e50ba2847c218a4c0feba97d7aecb05
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed May 8 15:22:51 2024 -0700

    [api] Deprecate v8::ArrayBuffer::Allocator::Reallocate
    
    Bug: 331326406
    Change-Id: Ia143c18ed297d7d439c370492f77c0204c6673bb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5528079
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93809}

commit 479f7fb33fdd174b49d3090c72a1aad779a641d5
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed May 8 14:58:52 2024 -0700

    Reland "[d8] Don't dispose Isolate on process exit"
    
    This is a reland of commit fe53d403bfc7e62e1895b6057ff68e029b995020
    
    Changes since revert
    - Print counters when not disposing isolate for benchmarks
    
    Original change's description:
    > [d8] Don't dispose Isolate on process exit
    >
    > Also remove the sudden shutdown machinery that is no longer needed.
    >
    > Bug: 338908251
    > Change-Id: I3634b531d3cc583f29df6cd58bf685c245d46ef8
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516099
    > Auto-Submit: Shu-yu Guo <syg@chromium.org>
    > Commit-Queue: Shu-yu Guo <syg@chromium.org>
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93803}
    
    Bug: 338908251
    Change-Id: I0a42c4495b00a49663e21a2552be2602c6bd7042
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526581
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93808}

commit 9a3d050253de6f2c8c6e5842e9dc4668eb8e0ae1
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Tue May 7 23:39:18 2024 +0000

    [explicit-resource-management] Add DisposableStack constructor, use
    and dispose method
    
    This CL adds DisposableStack constructor, use() and dispose() methods
    as developer exposed methods. Also, this CL fixed the use
    of `using` keyword with `null` and `undefined` and adds tests for them.
    
    Bug: 42203506
    Change-Id: If50b9e33d9cbb3de2be41dc81e656d9d202b8fa8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5498999
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93807}

commit 453a09061d12d9be729fc56f1b1efbc5f900fc5b
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed May 8 19:06:02 2024 +0000

    Revert "[d8] Don't dispose Isolate on process exit"
    
    This reverts commit fe53d403bfc7e62e1895b6057ff68e029b995020.
    
    Reason for revert: v8-perf breakage
    https://ci.chromium.org/ui/p/v8-internal/builders/ci/v8_m1_perf/11436/overview
    https://ci.chromium.org/ui/p/v8-internal/builders/ci/v8_pixel4_perf/3879/overview
    
    Original change's description:
    > [d8] Don't dispose Isolate on process exit
    >
    > Also remove the sudden shutdown machinery that is no longer needed.
    >
    > Bug: 338908251
    > Change-Id: I3634b531d3cc583f29df6cd58bf685c245d46ef8
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516099
    > Auto-Submit: Shu-yu Guo <syg@chromium.org>
    > Commit-Queue: Shu-yu Guo <syg@chromium.org>
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93803}
    
    Bug: 338908251
    Change-Id: I8dddb3b7a516d7500fd84982043e36d4371cf5f3
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526576
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Shu-yu Guo <syg@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93806}

commit 31efb6c0cb99bc328f1ce5eb7ea6dfd1ab976779
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed May 8 15:28:47 2024 +0200

    [api] Avoid atomic load for Object::Unwrap()
    
    CppHeapPointer entries are always created on the same thread and thus
    do not need to be read atomically on the API. The GC uses separate
    paths with atomics already.
    
    Bug: 328117814, 339322849
    Change-Id: I34a2e4c5deb52226f1338c2ace8fd7fd9493c6f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526473
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93805}

commit 18572f3fb0166b11adaaaa1399bec30618ca8639
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 8 17:10:26 2024 +0200

    [sandbox] Emit the SBXCHECK_EQ before any CapturedObject::set
    
    Fixed: 339310133
    Change-Id: Ie808d65b83aec985e4652e487fcb7d3efcfa49d6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526479
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93804}

commit fe53d403bfc7e62e1895b6057ff68e029b995020
Author: Shu-yu Guo <syg@chromium.org>
Date:   Fri May 3 16:25:45 2024 -0700

    [d8] Don't dispose Isolate on process exit
    
    Also remove the sudden shutdown machinery that is no longer needed.
    
    Bug: 338908251
    Change-Id: I3634b531d3cc583f29df6cd58bf685c245d46ef8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516099
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93803}

commit 861a2eb6996c237b1426f3d8a96ae4bf06fec924
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 8 16:01:25 2024 +0200

    [maglev] Constant fold reference equal of constants
    
    Bug: v8:7700
    Change-Id: I2fe8d69a68757ffa67179b0e60064e7944d8085c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522445
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93802}

commit 3046f8824cf4f533850154c45dadcd8862825368
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed May 8 16:05:18 2024 +0200

    [test] Skip failing test
    
    This test uses Intl and thus should be skipped on no i18l builds.
    
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Bug: 332914927
    Change-Id: I50aa8ac8b75d1bb305a8f3eaf37b597c08149c7f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5526475
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93801}

commit 7624efe4d3c53242dfb5cbee81658e9aa66fd046
Author: Choongwoo Han <choongwoo.han@microsoft.com>
Date:   Tue May 7 12:00:54 2024 -0700

    [etw] Set ETW handler only after read only heap is sealed
    
    When ETW logger starts, it iterates heap objects to find all the code
    objects. But, if the read-only heap is not ready, it iterates over the
    limit, which is not initialized with fillers yet.
    
    The crash can be reproduced by the following.
    cctest test-serialize/ContextSerializerCustomContext --enable-etw-stack-walking
    
    Change-Id: I99aa35212a4d7f02d488b7ad9730ba4f6764f699
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5523693
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Choongwoo Han <choongwoo.han@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93800}

commit 0afa7007475a7b61a7ca27d02ef5820644735d16
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Wed May 8 14:36:40 2024 +0200

    [heap] Make MinorMS work with sticky mark-bits
    
    For simplicity, the current implementation uses the same sweeper
    work-list that is used for major sweeping. This can be optimized.
    
    Promotion counter doesn't currently work for objects on regular pages,
    since we don't keep track of the marked objects on current GC.
    
    Bug: 333906585
    Change-Id: I447381b85a3c1e86b2c728b3a223129b1f6b0f56
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472114
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93799}

commit 3677d4b1c0fa84b5b4817ab3d06ab2b3587b3e26
Author: Marja Hölttä <marja@google.com>
Date:   Wed May 8 14:44:17 2024 +0200

    [maglev] Use the fast object-in-array builtin
    
    Bug: 42204675
    Change-Id: Iaa7271fff65258c8dd454ea204cdb7449eb27178
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522504
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93798}

commit e51a0c9bca50b60c5c166eb8f439248ff8487584
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed May 8 14:25:01 2024 +0200

    Reland^2 "[maps] Always apply prototype transitions first"
    
    This is a reland of commit 691994350012ad50dcf8fbf91f30de4d90279ce7
    
    The feature is now behind `v8_move_prototype_transitions_first` and
    disabled by default.
    
    Fixed:
    * FindFieldOwner: Prototype transitions don't neccessarily own
      descriptors.
    * Fix a dcheck in SetPrototype: UpdateUpdating prototypes can
      transition from a deprecated map.
    * CopyForPrototypeTransition accidentally added transitions to
      dictionary maps.
    * GeneralizeAllFields still needs to happen if the prototype
      transitions overflow.
    
    New:
    * Move implementation behind an ifdef.
    * Add more regression tests.
    * Moved changes to transition printing to own CL.
    
    
    Bug: chromium:332914927
    Change-Id: I33036590c4f875aacb72e13ff88c2d4ec54944a6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467810
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93797}

commit f07101ad8479087b414da5707b17d342cd19a280
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Wed May 8 14:23:21 2024 +0200

    [arm64] Fix test failing on m3
    
    Change-Id: I29e9e5ab32b422b1c2010d58b748746efb49b336
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522230
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93796}

commit 3ea85f9c54d3cf881d95b1d9abf00987f1561e07
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed May 8 12:53:00 2024 +0200

    [heap] Fix write barrier for embedder slots
    
    If the WrapperDescriptor does not indicate that we should use tracing,
    the write barrier should bail out.
    
    Bug: 338411141
    Change-Id: I5eed001e0461dfea598226fc511e33159e9ae0fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522227
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93795}

commit 3e3f64bb64dd54cd4cfea9c7ca09e9396f6c5136
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed May 8 12:12:05 2024 +0200

    [maglev] Optimize TypeOf based on KNA type info
    
    Bug: v8:7700
    Change-Id: I1d108052ca698262f15570efd9e6f09faddb2093
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522226
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93794}

commit 7183dfd1366247d42402982fe283a4c10cf6f7d6
Author: Marja Hölttä <marja@google.com>
Date:   Wed May 8 11:29:22 2024 +0200

    [compile hints] Add a more memory-efficient compile hints API
    
    The previous API required keeping the v8::Script (aka i::JSFunction
    for the top-level code) alive. There was no way to point to i::Script
    otherwise, since it's not exposed in the API.
    
    This API only requires keeping the v8::CompileHintsCollector
    (aka i::Script) object alive.
    
    Bug: 40286622
    Change-Id: I43f5bbad7cd0e50e3bc8eb541e25d243607187a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522223
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93793}

commit 366e4d3fa8c592dd2be32b633c233c48dc6cdeab
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed May 8 10:21:22 2024 +0200

    [heap] Reduce duplication in Heap::SetUpSpaces
    
    Bug: 333906585
    Change-Id: I7bc81e93bb168ca553e89cd0e57b270775b59734
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522222
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93792}

commit 39e57bfdcffa8996b3b58a783f67b501d168e120
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 8 11:16:23 2024 +0200

    [maglev] Fix unused exception handler printing bug
    
    Exception handlers are not emitted when they are so-far unused. So, we
    shouldn't try to print find the block corresponding to a kLazyDeopt
    exception handler, since there is none.
    
    Drive-by: fix bug in the Maglev->Turboshaft translation where we
    didn't check if exception handlers were kLazyDeopt.
    
    Bug: 40096293, 42204525
    Change-Id: Idc2a6219436630e64e9b612dbdb62f0255c64a80
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522224
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93791}

commit 99accbcfd095ca8b186bb63578b017ccb954e625
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed May 8 10:41:21 2024 +0200

    [owners] Add infra members to common owners
    
    Also the infra team should own commonly owned files like various
    tools and infra configs like the DEPS file.
    
    No-Try: true
    Change-Id: I83af13a8d75af4f9840e72af5d01db587ab8dea7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522501
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#93790}

commit 3ecb8552efcc92b7a443b10939d99e04d5ba4cd6
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 8 10:10:29 2024 +0200

    [turboshaft] Enable late load elimination by default
    
    Bug: 42202729
    Change-Id: I0f65c7662c057fb599addf661ca888318aaefc61
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522500
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93789}

commit 06ba0bdf4f26d765b5b70425880fbeeb49d8ade7
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Wed May 8 09:57:55 2024 +0200

    Reland "cppgc: Force inline AllocationDispatcher::Invoke"
    
    This is a reland of commit 2c0facec7845a22d5f978f1a82cc9740246dac9d
    
    The original CL was reverted due to a large binary size increase.
    This CL doesn't fix the inlining, but only unexports unneeded
    allocation functions.
    
    Original change's description:
    > cppgc: Force inline AllocationDispatcher::Invoke
    >
    > On ARM64 the compiler inserts "bti c" for these functions, which is
    > unnecessary, since they get almost always inlined. The functions are
    > currently exported (because they are nested in
    > MakeGarbageCollectedTraitInternal, which is exported), so the compiler
    > assumes they may be referenced from outside (through dlsym) and called
    > indirectly, so it inserts "bti c" into them.
    >
    > Drive-by: Make MakeGarbageCollectedTraitInternal hidden
    >
    > Bug: 339075143
    > Change-Id: I060a95aeac97c63a19fc52b14c2e03a7b98e6b2d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5521033
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93774}
    
    Bug: 339075143
    Change-Id: Ic3aab5d5ed3ab46009ce231f81106844d4bad97c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522220
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93788}

commit 56ed1ceafd79b34b8a4c9f293015c921da3c2ed7
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 8 09:15:46 2024 +0200

    [turboshaft] Create Parameter operations early in codegen tests
    
    The register allocator doesn't like it when Parameters are not created
    in the 1st block of the graph.
    
    Bug: 339074793
    Change-Id: Ic5a10decaa659f719784e6d7f9da194785c215e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522496
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93787}

commit a1438631a0fdf4f5a3f3f986a5c03ee4a8de74d1
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed May 8 09:59:14 2024 +0200

    [bazel] Pass target arch to mjsunit tests in google3
    
    So far `x64` was passed unconditionally to the testrunner, so tests that
    should be skipped on `arm64` did not get skipped in google3 arm64.
    
    R=victorgomes@chromium.org
    
    Bug: 336711943
    Change-Id: I16151c328e4ed933a403d66f56eec6899067e16c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522498
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93786}

commit 1c9c9141630aa6fb40126d5ab5f5c402b8030dd2
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue May 7 21:20:29 2024 -0700

    Update V8 DEPS (manual)
    
    We remove the buildtools update, as it currently rolls to an outdated
    version from December 2023 due to https://crbug.com/338535760.
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/5eb3bab..7796c50
    
    Rolling buildtools/reclient: re_client_version:0.138.0.e854224-gomaip..re_client_version:0.141.1.29a9d3c-gomaip
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/0421a22..4cc2600
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7ababdf..df43778
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/d83fee1..fa6de7f
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/51fe358..d17298a
    
    Rolling third_party/siso: git_revision:70d9e16bcc9dff0264905018f5a5652b37ed0e10..git_revision:4524544994f4eac131378143f498ee4d0b7d1f36
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/17956d4..964cf5c
    
    Rolling tools/luci-go: git_revision:01d1863acbd3d4c41da2aa7407a0ea6a195c770f..git_revision:69f852c6aea2797c75712d59145efd38d7032196
    
    Rolling tools/luci-go: git_revision:01d1863acbd3d4c41da2aa7407a0ea6a195c770f..git_revision:69f852c6aea2797c75712d59145efd38d7032196
    
    Roll created at https://cr-buildbucket.appspot.com/build/8748538228201096785
    
    Change-Id: Ide48d80edcaebf5db848137ef3eb5c86b21fff71
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5521949
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93785}

commit 7f10d47a49a02693c885b2fffd018e9c6b0dcd95
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed May 8 09:45:22 2024 +0200

    [turboshaft] Speed up test-compare-combine
    
    These tests were a bit slow. One of them in particular
    (CombineCompareTwoLogicInputs) had more than 11 millions iterations,
    which in DEBUG mode (and in particular on simulator builds) was very
    slow (with this CL, it only has 28000 iterations).
    
    Drive-by: replace some OpIndex by V<>.
    Change-Id: I0605225ab68a70947245bc1159f91fa10cce8d51
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522497
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93784}

commit 3b8777dfd1871b53ebbb8f9086701eb89151b863
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon May 6 16:43:45 2024 +0200

    [heap, cppgc] Re-enable concurrent marking for cppgc as well
    
    With https://crrev.com/c/5512708 V8 can re-enable concurrent marking
    at incremental marking steps when the isolate was initially in the
    background. This CL extends this by also restarting concurrent marking
    for cppgc.
    
    Bug: 40278463
    Change-Id: I04800ce15584950bbb1b1c1ef42634f5f27a6e7c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518173
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93783}

commit e55ee48761361f45d1cf7927047d1bacdd70d0ab
Author: Eva Herencsarova <evih@chromium.org>
Date:   Wed May 8 08:36:52 2024 +0200

    [wasm][code flushing] Add Liftoff code flushing behind a disabled flag
    
    This CL adds Liftoff code flushing on critical memory pressure signal,
    but so far it's behind a flag that is disabled by default.
    
    Bug: 339120678
    Change-Id: I960dabcb358f524d4d95b9e81fae513b39504895
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512718
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93782}

commit bac95ef1259ae5edbe8a25126550234effb96859
Author: Yuheng Wei <yuheng.wei@intel.com>
Date:   Wed May 8 09:40:52 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of I16x8DotI8x16I7x16S and I32x4DotI8x16I7x16AddS in turboshaft
    
    Bug: v8:12716
    Change-Id: I610b0fc933e6eccfb47ef48afc135e3c99878de3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5517869
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Yuheng Wei <yuheng.wei@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93781}

commit 6b0d5662f971cdaeca1af84775fb5f9d92ddc142
Author: jing.bao <jing.bao@intel.com>
Date:   Tue May 7 18:39:58 2024 +0800

    [wasm][simd] Use AVX_VNNI vpdpbusd for I32x4DotI8x16I7x16AddS
    
    Bug: 337144154
    Change-Id: I2708c61a247be4ea203d5703a8a8ee5238c0ba6a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5520002
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Jing Bao <jing.bao@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93780}

commit 0eb7278636f631a7a11c61e14fd52ace25712480
Author: 杨文明 <yangwenming@bytedance.com>
Date:   Tue May 7 23:51:31 2024 +0800

    [bugfix][riscv64] init uninitialized fields in riscv simulator.
    
    This CL initialized some fields in riscv simulator and thus avoid
    potential UBs, which result in random failure of test case
    "RunWasmTurbofan_I16x8RelaxedQ15MulRS".
    
    Bug: 339141286
    Change-Id: I16d2ccc6ac53abb1ebaf2e2a048c98a0e66c8b0a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522674
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93779}

commit 106f228ca86505edb70aa575c99fd2d636819d17
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu May 2 08:47:04 2024 -0700

    Reland "[import-attributes] Disable flag for import assertions"
    
    This is a reland of commit fc0cd5fd4ecb855b374770ed437b0aea040d2cb4
    
    Changes since revert:
    - Landed web-test harness fixes upstream
      https://chromium-review.googlesource.com/c/chromium/src/+/5516104
      https://chromium-review.googlesource.com/c/chromium/src/+/5512981
    
    Original change's description:
    > [import-attributes] Disable flag for import assertions
    >
    > The 'assert' syntax has been deprecated for 3 milestones with a warning
    > message saying it will removed in 12.6.
    >
    > This CL disables the flag by default without removing any code, pending
    > evidence of web compatibility.
    >
    > See https://groups.google.com/a/chromium.org/g/blink-dev/c/ZHvzLaJZRvo/m/FgNDBjrtBQAJ
    >
    > Bug: 40643756
    > Change-Id: Ieed38216f62bc2c0791a22bee181913338e451bf
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5508153
    > Commit-Queue: Shu-yu Guo <syg@chromium.org>
    > Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93706}
    
    Bug: 40643756
    Change-Id: Ibb487e396257c0e26e91ba9e4aea2f2c4de4e25a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512879
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93778}

commit 99be1a5a02692c91f6a19fe485bc81092076868c
Author: Francis McCabe <fgm@chromium.org>
Date:   Tue May 7 21:12:53 2024 +0000

    Revert "cppgc: Force inline AllocationDispatcher::Invoke"
    
    This reverts commit 2c0facec7845a22d5f978f1a82cc9740246dac9d.
    
    Reason for revert: breaks blink binary size increase: https://chromium-review.googlesource.com/c/chromium/src/+/5523279?checksPatchset=2&tab=checks)
    
    Pleaase provide rationale
    
    Original change's description:
    > cppgc: Force inline AllocationDispatcher::Invoke
    >
    > On ARM64 the compiler inserts "bti c" for these functions, which is
    > unnecessary, since they get almost always inlined. The functions are
    > currently exported (because they are nested in
    > MakeGarbageCollectedTraitInternal, which is exported), so the compiler
    > assumes they may be referenced from outside (through dlsym) and called
    > indirectly, so it inserts "bti c" into them.
    >
    > Drive-by: Make MakeGarbageCollectedTraitInternal hidden
    >
    > Bug: 339075143
    > Change-Id: I060a95aeac97c63a19fc52b14c2e03a7b98e6b2d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5521033
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93774}
    
    Bug: 339075143
    Change-Id: I254f522ee45e3b64293932c2c36011a2d364706d
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5521815
    Owners-Override: Francis McCabe <fgm@chromium.org>
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Auto-Submit: Francis McCabe <fgm@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93777}

commit 5caf4aa7794fac205df2fffe48e8d1fd26dd963d
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue May 7 16:42:11 2024 -0400

    Skip shared-memory tests which require sandbox enabled
    
    More information is under the comment section of this CL:
    https://crrev.com/c/5507046
    
    Bug: v8:12547
    Change-Id: I7fbcf8f0f4f87a647207d9b4f2698a4ca1c50935
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522079
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93776}

commit 6c0a15c4a8191933d2261b01326f862bc926fd49
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 7 15:28:49 2024 +0200

    [turboshaft] Maglev-to-ts: support ClampedUint8 typed arrays
    
    Bug: 42204525
    Change-Id: I608ca653e758b664325c5d456f734fbb56ffbde7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5521035
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93775}

commit 2c0facec7845a22d5f978f1a82cc9740246dac9d
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Tue May 7 16:01:17 2024 +0200

    cppgc: Force inline AllocationDispatcher::Invoke
    
    On ARM64 the compiler inserts "bti c" for these functions, which is
    unnecessary, since they get almost always inlined. The functions are
    currently exported (because they are nested in
    MakeGarbageCollectedTraitInternal, which is exported), so the compiler
    assumes they may be referenced from outside (through dlsym) and called
    indirectly, so it inserts "bti c" into them.
    
    Drive-by: Make MakeGarbageCollectedTraitInternal hidden
    
    Bug: 339075143
    Change-Id: I060a95aeac97c63a19fc52b14c2e03a7b98e6b2d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5521033
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93774}

commit eade668c88b7e64eb2d3c1e48c9d12199618ca9e
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue May 7 15:58:42 2024 +0200

    [maglev] Constant fold reference equal of smi constants
    
    This happens e.g., in finally blocks with unreachable catch blocks
    
    Bug: v8:7700
    Change-Id: Ib47057b3075eda1582c930a7978c8d8ddec61f83
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5522093
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93773}

commit 8889c7dc21967c7192a00fa23a472eed7d4a5102
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue May 7 11:50:28 2024 +0200

    [api] Mark v8::ObjectTemplate::SetAccessor(..) for deprecation
    
    ... and advance deprecation status for v8::Object::SetAccessor(...).
    
    Bug: 336325111
    Change-Id: I53fd17680805d7f59beb9bba234d5f8076e08031
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5465511
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93772}

commit e30e228ee6e034de49a40af0173113198a19b497
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue May 7 09:56:14 2024 +0200

    Reland^2: [heap] Add shared trusted spaces
    
    This is a reland of commit e8dcad4a728f7569b4a4355fd3d79f055a478e4d
    
    This reland is unchanged to the previous attempt but contains part of
    https://crrev.com/c/5512704 that got lost in the revert. The revert
    reason was fixed in https://crrev.com/c/5518290 in Chromium.
    
    Original change's description:
    > Reland "[heap] Add shared trusted spaces"
    >
    > This is a reland of commit d4210ceae1d1e992ae88a9918a9a8042adba3084
    >
    > Apparently I unintentionally made changes to scavenger.cc in the
    > first CL. This CL removes those changes.
    >
    > Original change's description:
    > > [heap] Add shared trusted spaces
    > >
    > > This CL adds shared variants for the trusted spaces (both for regular-
    > > sized and large objects). These spaces will be needed when we
    > > eventually want to share Wasm types between multiple isolates.
    > >
    > > Bug: 338342768
    > > Change-Id: Ia6a080f6acb22f895dc8ef4f81c2f639d0ba637a
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501038
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93682}
    >
    > Bug: 338342768
    > Change-Id: I873f4e266eb5b31c98306b725f4e1836a5a3c0c5
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5514847
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93694}
    
    Bug: 338342768
    Change-Id: I195bf238473ce66eadfe26f056bf31d96687779e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518756
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93771}

commit 0bb137d441418aa9e17843a79be828cd4a23b936
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue May 7 14:56:41 2024 +0200

    [test] Cleanup a test
    
    Remove accidentally added print-debugging.
    
    Change-Id: I2cb5fe1ebeb3f08633247e0fc691dc9832731397
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5521034
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93770}

commit 1b4d2ac5812e277349695eee2d3b3c34292d6649
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Tue May 7 18:08:54 2024 +0800

    [riscv] Skip turboshaft-test-compare-combine
    
    incorrect register allocation on riscv
    
    Change-Id: I718f12bc44abb867670f2fadacaa233c0a06be80
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5520278
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93769}

commit 441b356202255892e14cff2c185c24200745ecd6
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon May 6 17:54:37 2024 +0800

    [riscv32][turboshaft] Implement some turboshaft instr selector
    
    Change-Id: I76a66544e849ea7a4acc2629bdec88a451351ba8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518369
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93768}

commit effc6b92fa59f0a0c128e49d81a2ceba3941346c
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue May 7 14:14:10 2024 +0200

    [maglev][cse] Don't cse ConvertReceiver
    
    since it can return unique JSPrimitiveWrapper's.
    
    Fixed: 338457109
    Change-Id: Id0d2f928e963e44b4919990836d9544f67d05dcd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516846
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93767}

commit 4b3c69d7e269c546a1f049d4fe4a97cd8b93a571
Author: Michaël Zasso <mic.besace@gmail.com>
Date:   Tue May 7 07:12:05 2024 +0200

    [compiler][arm64] Fix compilation on Clang 15
    
    Changes instantiation of the ConditionalCompare struct
    to a syntax that Clang 15 accepts.
    Latest Xcode on macOS still ships with Clang 15.
    
    Change-Id: I97163d5029730d75aa070b588a6884ff6dbe85b9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518753
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Michaël Zasso <mic.besace@gmail.com>
    Cr-Commit-Position: refs/heads/main@{#93766}

commit 27739badb4b90a4f27bb253076eae9f52d40806d
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 7 13:01:50 2024 +0200

    [compiler] Do not lower ArrayIteratorPrototypeNext for Float16 arrays
    
    Bug: 42203953, 339134738
    Change-Id: If45d33567ca1cd33e8453671760b62f6a176623a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518763
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93765}

commit b78302925f48bf4f02920fc9f33dab7ce81b90dc
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 6 18:56:10 2024 +0200

    [deoptimizer][wasm] Add basic tracing of deopt events
    
    Bug: 42204618
    Change-Id: I4ae442d0f91d59cfdcaa998efb561a6ffd815c9d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509451
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93764}

commit 06bca2a670af2859064f8f534b9d869dd3d177df
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue May 7 12:47:27 2024 +0200

    [heap] Don't visit embedder fields when not supported
    
    https://crrev.com/c/5515168 allowed for passing a WrapperDescriptor in
    a disabled state to enable deprecation of GC support in embedder
    fields. The disabled descriptor is never checked so far though which
    leads to OOB in embedder fields when using a descriptor that should
    not be used for tracing.
    
    Bug: 338411141
    Change-Id: Ia15840c4221d0a3b93eab04f6f8f251825e0ce90
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518762
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93763}

commit 03fb74efbf657cd78bcbc7cec104ba01083771b9
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon May 6 15:38:56 2024 -0400

    PPC: fix mksnapshot failure
    
    Need to pass a a starch register when loading after
    https://crrev.com/c/5518450
    
    Change-Id: Ic14bc1d33be4619a0f9a6fa27df66a48ea9cdde9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5519429
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93762}

commit 731d09603634bebae804b541379e3a7cff6327ac
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue May 7 13:29:21 2024 +0200

    [deopt][wasm] Do not emit deopt node in case of non-inlined targets
    
    Besides an implementation error causing an out-of-bounds array access
    if the last known polymorphic / monomorphic call target is not inlined,
    having a deopt node on the slow path could cause deopt loops.
    
    Fixed: 339115607
    Bug: 42204618
    Change-Id: I0da7ef9c8a0403a2f972d740a3ae081e6da4a926
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518892
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93761}

commit 6898a582da9e672db503af0117a47b2f0e861a60
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon May 6 17:20:27 2024 +0200

    [maglev] Don't call CallFunctionForwardVarargs for class constructors
    
    Fixed: 338457105
    Change-Id: I56b4b0d7b3fc04175f8a3562944fa9e02e4df5d5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518454
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93760}

commit 8e669e7a255ec5de17c3fd5cfd9fcb00e79a680d
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Tue May 7 18:01:52 2024 +0800

    [revec][wasm][turboshaft] Implement operations force packing
    
    Bug: v8:12716
    Change-Id: I43f6750e5b0193aee5946ebabc6f165f85814b22
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5485585
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93759}

commit a244268ac8ead1cf2ff145f17914d6d83aa6a00c
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue May 7 10:34:23 2024 +0200

    [handles] Migrate handles in error message generation to direct
    
    This CL migrates some string and error message handles, most of
    them passed as parameters to error message generation methods,
    to direct. (This is only relevant for builds with
    v8_enable_direct_handle=true.)
    
    Bug: b/42203211
    Change-Id: I8bc7858459049ddb8c7ce5eec878b3f5f03e9931
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5510684
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93758}

commit d44be8318a5651f9ccabebb88f4830525230f7cd
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue May 7 10:29:42 2024 +0200

    Update fuzztest (trusted)
    
    Besides the automated roll, this change also enables using protobuf
    from a different location via build_overrides, which depends on
    https://crrev.com/c/5518292 in Chrome.
    
    Rolling third_party/fuzztest: https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+log/ae21d24..7bf252c
    
    Rearrange fuzzing engine dependencies (Adrian Taylor)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/0162929
    
    Fuzztest config public -> private. (Adrian Taylor)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/b75e0e8
    
    Roll fuzztest (Adrian Taylor)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/4cd4a81
    
    Rolling third_party/fuzztest/src: https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/65354bf..3458410
    
    #Centipede Extend `AsByteSpan` to take any container type + use it where possible (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/3458410
    
    Properly convert proto to text (FuzzTest Team)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/ed6f817
    
    Use ParseTextProtoOrDie instead of ParseTestProto in suggested reproducer tests (FuzzTest Team)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/6a370ae
    
    Expose API to parse known absl flags. (FuzzTest Team)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/d938942
    
    #Centipede Use new OSS functions to get test temp & src dirs (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/d739fa5
    
    Update unescaping logic in `ReadDictionaryFromFile()` to support 2-digit hex codes. (Ilaï Deutel)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/1635d42
    
    Avoid OOM during input prasing by limiting the object size reservation. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/a40caf4
    
    #Centipede Print objdump command stderr when failed. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/9957964
    
    ...
    
    Roll created at https://cr-buildbucket.appspot.com/build/8748715648563104433
    
    Bug: 336577743
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Change-Id: Iacbfba24375221138fa1b9cf1ca6b6d520e847b3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516843
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@chromium.org>
    Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93757}

commit 8ab70a79e6cbbc61f495cf050402cd1fd53d8126
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue May 7 11:35:54 2024 +0200

    [valueserializer] Avoid reboxing double fields
    
    Same as https://chromium-review.googlesource.com/c/v8/v8/+/5518891 but
    without replacer.
    
    Change-Id: I99c3f09cbcfcd0d2c81de385922abc7e37e9137b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518759
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93756}

commit 24a8171d91795c0d276da0aad6b0f0f40fd0e5c8
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue May 7 11:26:23 2024 +0200

    [json] Avoid unnecessary reboxing double fields during serialization
    
    The value can only change in this tight window if there's a replacer
    function.
    
    Change-Id: I7d455bc6bdf21f0c90231b2c9458ad08352f076b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518891
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93755}

commit 9b42ae471807dbef4915e3c3d27210c91fdb8db7
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue May 7 11:19:08 2024 +0200

    [turboshaft] Remove stack checks of small loops
    
    Bug: v8:12783
    Change-Id: Id483ea695929a5a9758f957c1f9939bc1e8061f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467821
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93754}

commit ecd155e962c25a5355069a9495528f3c2d3ae507
Author: jiepan <jie.pan@intel.com>
Date:   Tue May 7 16:46:02 2024 +0800

    [revec][wasm][turboshaft] Support reduction operations as root pack
    
    Revec try to merge Simd128 nodes into one node with higher width,
    Revec starts from the root packs, recursively traverses the use-def
    chain. Currently only adjacent stores are used as root packs.
    
    Reduction operations can also be used as root packs. Reduction
    operator reduces the elements of an array into a single result.
    Pack with signed/unsigned saturation operation packs two vectors into
    one vector, can be regarded as generalized reduction.
    
    The following operations are supported in this CL:
      * Add
      * AddSat
      * Pack with signed/unsigned saturation
    
    Bug: v8:12716
    Change-Id: Ib776acacce6a6758d9857baa1672fa8f174fc6af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518370
    Commit-Queue: Jie Pan <jie.pan@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93753}

commit 891ed3ab63c46549c00ffc71fd48d366516c7b32
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Mon May 6 20:18:25 2024 +0200

    Don't alignment-sanitize routines with NEON intrinsics
    
    Those routines intentionally use misaligned reads/writes.
    
    Change-Id: Ifa7a828952772961853d5b83e4da577e6565ebbc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518752
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93752}

commit 4d06060a08361540c9351f72cc357b3689aeb544
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue May 7 10:19:12 2024 +0200

    [inspector] Stop using deprecated v8::ObjectTemplate::SetAccessor(..)
    
    ... in inspector tests and use SetNativeDataProperty(..) instead.
    
    In case the setter callback is not provided, SetNativeDataProperty(..)
    installs a setter callback that reconfigures the property to a true
    data property and thus subsequent reads will no longer trigger the
    original getter callback.
    
    Bug: 336325111
    Change-Id: I5e53ad3d106bec89e3b294420b6813d8311bfe97
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512705
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93751}

commit 83a56aa30bc81c9693080824f9fd16b415a2cc23
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Tue May 7 13:49:10 2024 +0800

    [wasm][revec][x64] Optimize VisitExtractF128
    
    ymm0 and xmm0 is the same register, if we want to extract xmm0 from
    ymm0, we can remove the redundant `extractf128`.
    
    Bug: v8:12716
    Change-Id: I360e4c6b0e945a494a28e0439d354434ed3214ca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5480422
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93750}

commit 364b8e58c355962d734d4349d4dfad9890d74dbd
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon May 6 16:44:19 2024 +0800

    [loong64][compiler] Remove redundant parameter of AssembleArchConditionalBoolean
    
    The wrong definition with redundant parameter caused build issue on loong64.
    
    Change-Id: I76ea3f562b06800a8e4cb5cf11f320c1ec8bd3fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5515502
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93749}

commit 5abcfaa83a88a3f520cdd2f115c3adc77097956a
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon May 6 14:11:12 2024 +0200

    [turboshaft] Remove contextual variable from Turboshaft pipeline
    
    Bug: v8:12783
    Change-Id: I8dd534692ddde0b8d23c3cfd5ad46d25585585a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516850
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93748}

commit 36ed72a3961857c3f810412c93277694fb32d6f8
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue May 7 08:45:41 2024 +0200

    [infra] Add sandbox-testing builders
    
    No-Try: true
    Bug: 336488510
    Change-Id: Ibb26ba7fd10b6a50bfc06ac5354e380b07391dac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518755
    Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93747}

commit c1f64716840f373a90e3c32f4d20cf3fd379de3d
Author: Adam Klein <adamk@chromium.org>
Date:   Mon May 6 16:03:05 2024 -0700

    [d8] Call InstallConditionalFeatures inside d8.test.enableJSPI()
    
    This avoids exposing the doesn't-happen-in-production configuration
    of runtime-enabling JSPI without calling into InstallConditionalFeatures.
    
    Also update all usages of enableJSPI to account for the change.
    
    Change-Id: Ie50e826f18963d95405b4fe0862ce0931c49700f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512725
    Reviewed-by: Francis McCabe <fgm@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93746}

commit 46954d03e926ba9c669bfbaf5916a70a40b4a3c9
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri May 3 17:55:25 2024 +0200

    [test] Rewire deprecated unittests
    
    - Mark tests using the old way of creating wrappers as deprecated.
    - Switch all heap snapshot tests to using the new style wrappers, as
      coverage in this area is historically low.
    
    Bug: 338411141
    Change-Id: Id74aef2cf7341071ec6afbfff1f759935376a2a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512715
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93745}

commit 59b2e3869212adcbecea509c25a5823bec9dd584
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri May 3 17:27:53 2024 +0200

    [test] Fix bindings benchmark
    
    Managed pointers in embedder fields is no longer supported. Model the
    benchmark using unamanged and managed bindings instead.
    
    Bug: 338411141
    Change-Id: I31d94b53695d39e33d7cb2b186f29541195334ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5513452
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93744}

commit 0b52081dae9e1a6906b40a1bbe64c0c3667c72e4
Author: Adam Klein <adamk@chromium.org>
Date:   Fri May 3 11:39:41 2024 -0700

    [api] Advance deprecation of Isolate-taking v8::ScriptOrigin constructor
    
    Bug: 41480316
    Change-Id: I29462a1ea1b00afec88b333b7253e918ccac9b00
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516038
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93743}

commit 7936ca6d8b6ac42936e3e1fe8f2856ddb88426c0
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon May 6 18:30:22 2024 +0200

    [api] Isolatify v8::Context::GetAlignedPointerFromEmbedderData(..)
    
    This will allow to remove a couple of instructions from the hot path.
    
    Bug: 336738728
    Change-Id: I9d3311fc386e1c324f2f1ce011c1c45ac6ac64ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516586
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93742}

commit 34736b8b1c52bf2769c6f0407e54765e3b7068cd
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 6 17:43:06 2024 +0200

    [deoptimizer][wasm] Add support for parameter stack slots
    
    This adds support for deopting a function that has parameters passed
    via stack slots.
    
    This requires the deoptimizer to include the parameter stack slots
    into the FrameDescription which also requires to include the stack
    objects between the frame and the parameter slots (2 slots) and then
    to "copy" this over to the output FrameDescription.
    
    Bug: 42204618
    Change-Id: I74884ca77a4817ccb7b0f7319bd81fdb9014b5a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5498887
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93741}

commit 445ffee08160b7f62c42751e853b1e90000e919a
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon May 6 17:40:29 2024 +0200

    [wasm] Mark --wasm-lazy-validation as experimental
    
    To avoid any confusion around VRP eligibility.
    We currently have no plans to ship this feature, and don't care
    to see it used as a load-bearing building block of submitted bug
    reports.
    
    Change-Id: I17b8c0f5b70d0c26747ba2750a51ff35c2618e50
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518455
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93740}

commit 9fe343358899987d3b476d8d7ddec651c3fc9a65
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon May 6 17:18:27 2024 +0200

    [d8] Small fixes to linux-perf control
    
    Some small fixes to controlling linux-perf in d8 (in the runner and in
    error handling).
    
    Change-Id: I9ec0bf643f62be10c22605b3c192821ce41e98cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518176
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93739}

commit df269d128ab9cc531b15113b1bc1529e18695f7a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 6 15:53:22 2024 +0200

    [deoptimizer][wasm] FrameState: Use 0 as dummy input
    
    Wasm doesn't have a JS closure, nor does it have a context.
    Use a __ SmiConstant(0) as dummy value to keep the overhead as small as
    possible.
    
    Bug: 42204618
    Change-Id: I1071827d132dc9962958b9b21d95721a0377511a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518453
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93738}

commit 261e6044f54e1a75aae51fdf85432cd2245f3b9c
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon May 6 15:55:22 2024 +0200

    [sandbox] Add sandbox checks when reading a map instance size (Part II)
    
    Missed SBXCHECK in https://crrev.com/c/5471972.
    
    Fixed: 336648007
    Change-Id: I0c303737b35d316c3cab70e2643f871e78f70155
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518174
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93737}

commit 4da4042743172db8e2114d2ff14ac803b9c3bb57
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 6 14:42:56 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - Simd128ExtractLaneOp
    - Simd128ReplaceLaneOp
    - Simd128LoadTransformOp
    
    Bug: chromium:331100916
    Change-Id: I86ed46fe045cabe430e23379a259c4bbb931a630
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518452
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93736}

commit 40a900106cc8a285deb73834095efd401fc4491e
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon May 6 14:44:22 2024 +0200

    [maglev] Lazy deopt on first throw to a so-far unused catch block
    
    This allows us to skip emitting code for the catch block entirely.
    
    Bug: v8:7700
    Change-Id: Ie31da5094d14711aab619b146dabc14d215f0c62
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516582
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93735}

commit f071a28cda1f11954a931625a0dd1f1d51f81499
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon May 6 14:36:00 2024 +0200

    [d8] Add linux-perf control to linux-perf-d8.py
    
    Add capability to enable/disable linux perf collection from d8, by
    passing in control file descriptors to d8 and perf via linux-perf-d8.py.
    As an example usage, allow scoped collection which is started by
    performance.mark and ended by performance.measure, which we can use to
    scope e.g. JetStream measurements to just the measured part.
    
    As a drive-by, change the top-level code in linux-perf-d8.py to be
    wrapped in a function and a try-finally block, to make cleanup of
    temporary files simpler.
    
    Change-Id: If990000da3658f5658baffcb41ac2d049e8ae078
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518451
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93734}

commit 9a2834e982e7345d01f34557dc9101099df418f1
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon May 6 13:59:18 2024 +0200

    [d8] Refactor flag handling with helpers
    
    Add helpers for handling d8 flags:
    
      * FlagMatches for boolean flag matching, with (optional) automatic
        clearing of the argument from the args array
      * FlagWithArgMatches for value flag matching, which encodes the
        existing prefix matching logic and now additionally allows both
        `--flag=arg` and `--flag arg`.
    
    Change-Id: Ie321fcc061132be3ebeab171bb2a0ccda0f20819
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518171
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93733}

commit f67305c3eb3f025ade87e6c1cd0c32a44919b23f
Author: Marja Hölttä <marja@google.com>
Date:   Mon May 6 13:46:40 2024 +0200

    Reland: [builtins] Add a builtin for non-shallow literal creation
    
    This adds a fast path for object literals and array literals
    containing arrays and objects, such as [{a: 1}] or {a: [1]}.
    
    Previous version: https://chromium-review.googlesource.com/c/v8/v8/+/5447269
    
    Fix: disable allocation site tracking when
    V8_ALLOCATION_SITE_TRACKING is not on.
    
    Bug: 42204675
    Change-Id: I6b9154ad102af80d617c714ba1e65c67f5442cb2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518450
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93732}

commit 91ad9bec5eac485aa4efbdd052ae5409fae54330
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 6 14:03:57 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - Simd128SplatOp
    - Simd128TernaryOp
    - Simd128TestOp
    - Simd128UnaryOp
    
    Bug: 331100916
    Change-Id: I1b71dfd8138faea6093d3afdd951a0a0d379c0ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512755
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93731}

commit ce57d21651cb8694899cbba57ad2a5bb07e68031
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 6 11:16:45 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - Simd128BinOp
    - Simd128ConstantOp (already done)
    - Simd128ShiftOp
    - Simd128ShuffleOp
    
    Bug: 331100916
    Change-Id: I7c7e840e2a98fcdf671eb76d6086a11345421359
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516849
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93730}

commit 0915c5a2415bd6b5087a9bc470b17f55b1575f81
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon May 6 12:45:27 2024 +0200

    [test] Renenable array-splice in all variants
    
    The stress variant has changed at some point, which makes this
    likely obsolete. If it fails again, we'll create a fresh report.
    
    Bug: 42208132
    Change-Id: Ib112cc24de8c65952a100250e753722c8fe40ed7
    Cq-Include-Trybots: luci.v8.try:v8_mac_arm64_gc_stress_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux_arm64_gc_stress_dbg
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5518449
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93729}

commit 52beeb38a06956fb3d0ed7f2fa4516f51e2af700
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 6 12:59:55 2024 +0200

    [mjsunit][wasm] Disable deopt tests in multi-isolate mode
    
    Fixed: 338945124
    Bug: 42204618
    Change-Id: I6eb714289d2fc6d8e119302dda06dc34df730dca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516583
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93728}

commit af39e271b5e36863b35c4a9d51c5f630360ee9f1
Author: Marja Hölttä <marja@google.com>
Date:   Mon May 6 11:47:21 2024 +0200

    [const tracking let] Fix: don't update the side data too early
    
    We shouldn't update the side data until we've checked all error cases
    and will actually store the value.
    
    Bug: 338457101, v8:13567
    Change-Id: I141fc87541792b8bbeeb35f93739a231afe376f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516851
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93727}

commit 9632b0dcc69b2de98b3d3358c1ce4ea6c9491a51
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon May 6 18:01:23 2024 +0800

    [loong64][mips64][fastapi] Set context for fast api calls
    
    Port commit 87b5f43534047909e185c4b0fbe287c46345680d
    
    Change-Id: I85e768c24a4d5b8e6c7ee0e6ddbf7aa2b619fdc3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5515503
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#93726}

commit cc6d02aba6ce0fae6ef61421de23d54ad787f77e
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri May 3 07:27:49 2024 +0200

    [bazel] Add handler-outside-posix.* for all posix platforms
    
    So far there were specialized conditions when these files should be
    included, but the files were missing in yet another condition, namely
    posix on arm64. As it does not hurt to include more files than
    necessary, this CL just simplifies the condition to is_posix. Posix
    configurations that don't need these files will just ignore them because
    of the #ifdefs there.
    
    R=victorgomes@chromium.org
    
    Bug: 336711943
    Change-Id: Ie9df427718ccd33a560de8c9ca3184267e136925
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5514667
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93725}

commit b032f063df9f92fab049d33e1de0b8c30076390d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Apr 30 10:04:57 2024 +0200

    [deoptimizer] Make FrameDescription::operator new private
    
    Also make the constructor private.
    The FrameDescriptor class accesses (both read&write) memory outside of
    its object assuming that additional memory was allocated for the
    parameters. This implementation detail shouldn't leak outside of the
    class itself.
    
    Bug: 42204618
    Change-Id: Iad691b6d4d5a9731eaacc9e34f632769b5a14061
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5492422
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93724}

commit 34043efef84283865238a4f53a0523ff8fd4081a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 6 10:56:23 2024 +0200

    [deoptimizer][wasm] Support literal values
    
    This CL adds support for literals (i.e. values that are constants in
    the optimizing compiler) to the wasm deoptimization.
    
    The supported types are i32, i64, f32, f64, i31ref.
    
    Bug: 42204618
    Change-Id: Id40ca62d79be805acfcd22f01c91f4645bc8ac98
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501046
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93723}

commit 4a3567fb47d9a64eb8b568c2aadbcaf082ef3dbe
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 6 10:53:19 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - GlobalGetOp
    - GlobalSetOp
    
    Bug: 331100916
    Change-Id: I10d9d4c5c778de6b634a05d9e1886a19d880ab6c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5514294
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93722}

commit d0642d41761ba1106e8944837253d6d74c28a0ba
Author: Eva Herencsárová <evih@chromium.org>
Date:   Mon May 6 09:15:30 2024 +0000

    Revert "[builtins] Add a builtin for non-shallow literal creation"
    
    This reverts commit 30202eca7793cb46db57770832573e64630fb0a6.
    
    Reason for revert: fails on https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20single%20generation%20-%20builder/18537/overview
    
    Original change's description:
    > [builtins] Add a builtin for non-shallow literal creation
    >
    > This adds a fast path for object literals and array literals
    > containing arrays and objects, such as [{a: 1}] or {a: [1]}.
    >
    > Bug: 42204675
    > Change-Id: Ie52dd10d481945de228c6d7b72e3b24e59d7859d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447269
    > Commit-Queue: Marja Hölttä <marja@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93717}
    
    Bug: 42204675
    Change-Id: I0198a0b397862bf91b989fb1fac3e6e9446ea28e
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512752
    Owners-Override: Eva Herencsárová <evih@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93721}

commit 59db0e239571e12e4130d9b57e89bbcff537d4e0
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri May 3 10:20:15 2024 +0200

    [build] Use protobuf from Chromium
    
    This switches V8's dependency protobuf from github to the version
    in Chrome. When embedded in Chrome, V8 already makes use of this
    version. In the stand-alone case, this prepares using protobuf
    also for fuzztest.
    
    Due to a `gclient sync` bug (https://crbug.com/338008085) we
    temporarily store protobuf in third_party/protobuf_chrome, which
    can switch back to third_party/protobuf in M129 to not break local
    developers switching between the main and some supported release
    branch.
    
    The new dependencies third_party/protobuf_chrome and
    tools/protoc_wrapper will in the future be kept automatically in
    sync by V8's Chromium-DEPS roller.
    
    Bug: 337736622
    Cq-Include-Trybots: luci.v8.try:v8_linux64_perfetto_dbg
    Change-Id: I3bf3b01fbe49f5be29aedac5b042ce4fa6776a24
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5492424
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93720}

commit 7c7c6b475c6edcd7ef863e1f668be3df55c56307
Author: Fanchen Kong <fanchen.kong@intel.com>
Date:   Mon May 6 12:58:23 2024 +0800

    Add cpuid detection for AVX-VNNI
    
    Bug: 337144154
    Change-Id: I0409e1578f1b3e6b9b43f71cd5dd690cc0639303
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5517870
    Commit-Queue: Fanchen Kong <fanchen.kong@intel.com>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93719}

commit 15848468d4166caaa699715a571b68c6e83c99cd
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon May 6 09:44:54 2024 +0200

    [deoptimizer] Add dmercadier and mliedtke as owners
    
    Change-Id: I404fd4fc29cd38974ddb9db3037cfb82c0713fb5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516581
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93718}

commit 30202eca7793cb46db57770832573e64630fb0a6
Author: Marja Hölttä <marja@google.com>
Date:   Mon May 6 09:55:55 2024 +0200

    [builtins] Add a builtin for non-shallow literal creation
    
    This adds a fast path for object literals and array literals
    containing arrays and objects, such as [{a: 1}] or {a: [1]}.
    
    Bug: 42204675
    Change-Id: Ie52dd10d481945de228c6d7b72e3b24e59d7859d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447269
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93717}

commit ab639419eddf447b1bc2b97449cafc3074b5816c
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon May 6 15:24:29 2024 +0800

    [riscv][turboshaft] Implement some turboshaft instr selector
    
    Change-Id: I27f45a5cab418ff66bb2a9b4db7b1f6ffe2b5368
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5517871
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93716}

commit 6e3919b7a6941e7bcd400e4cb151021d7812d5e2
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri May 3 17:11:01 2024 +0200

    [api] Deprecate v8::WrapperDescriptor
    
    This deprecates WrapperDescriptor which is used for providing GC support
    in embedder fields. Embedders are supposed to rely on
    - v8::Object::Wrap()
    - v8::Object::Unwrap()
    
    Bug: 338411141
    Change-Id: I51911a0f2112e66adeef1e69c8b726f69dedf09a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5515168
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93715}

commit 5479112f6366a48cafd71e91f3f63fcf9a567dce
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri May 3 14:04:32 2024 +0200

    [heap] Enable background threads in marking steps
    
    This CL allows to re-enable the usage of background threads at
    incremental marking steps and at the beginning of a GC. Before this
    CL the decision whether to use background threads or not was done only
    at incremental marking start and would only change with the next GC.
    This CL is intended to fix/mitigate regressions around tab
    switching by re-enabling background threads in the GC faster.
    
    Bug: 40278463
    Change-Id: I2a579d58394e823f06fbeb360ae38858a92727f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512708
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93714}

commit 3f90a947ba29b3d22b90b18e8d51359bd457167c
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri May 3 13:28:45 2024 +0200

    [api] Add v8::Object::GetCreationContext[Checked](v8::Isolate*)
    
    ... and an overload of
      v8::Object::GetAlignedPointerFromEmbedderDataInCreationContext()
    with v8::Isolate* parameter.
    
    Bug: 336738728
    Change-Id: Ia780e99671b51499d3be6a7b6b44665b183c336b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5484027
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93713}

commit fa5df00209dc211e9b716bc05bbd80b4e6404c08
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat May 4 19:20:37 2024 -0700

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/27b6e450..c95cc687
    
    Roll created at https://cr-buildbucket.appspot.com/build/8748817571131029249
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: I82c4f4637b97dba86c3ead666e7617d54dbc2867
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516839
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93712}

commit 2cdf87faa621e76711cdb4af86517d1930085201
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri May 3 18:50:03 2024 +0000

    Revert "Reland "[heap] Add shared trusted spaces""
    
    This reverts commit e8dcad4a728f7569b4a4355fd3d79f055a478e4d.
    
    Reason for revert: GPU tests failed on https://ci.chromium.org/ui/p/v8/builders/ci/Linux%20V8%20FYI%20Release%20%28NVIDIA%29/29226/overview
    
    Original change's description:
    > Reland "[heap] Add shared trusted spaces"
    >
    > This is a reland of commit d4210ceae1d1e992ae88a9918a9a8042adba3084
    >
    > Apparently I unintentionally made changes to scavenger.cc in the
    > first CL. This CL removes those changes.
    >
    > Original change's description:
    > > [heap] Add shared trusted spaces
    > >
    > > This CL adds shared variants for the trusted spaces (both for regular-
    > > sized and large objects). These spaces will be needed when we
    > > eventually want to share Wasm types between multiple isolates.
    > >
    > > Bug: 338342768
    > > Change-Id: Ia6a080f6acb22f895dc8ef4f81c2f639d0ba637a
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501038
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93682}
    >
    > Bug: 338342768
    > Change-Id: I873f4e266eb5b31c98306b725f4e1836a5a3c0c5
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5514847
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93694}
    
    Bug: 338342768
    Change-Id: Ib5769e7909ccbc87399caaf6bfb6ad7750550833
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512874
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93711}

commit 72d7518913007fd4205cb970fdffd8921596e07c
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri May 3 18:57:56 2024 +0000

    Revert "[import-attributes] Disable flag for import assertions"
    
    This reverts commit fc0cd5fd4ecb855b374770ed437b0aea040d2cb4.
    
    Reason for revert: Caused failures on https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Blink%20Linux/30618/overview
    
    Original change's description:
    > [import-attributes] Disable flag for import assertions
    >
    > The 'assert' syntax has been deprecated for 3 milestones with a warning
    > message saying it will removed in 12.6.
    >
    > This CL disables the flag by default without removing any code, pending
    > evidence of web compatibility.
    >
    > See https://groups.google.com/a/chromium.org/g/blink-dev/c/ZHvzLaJZRvo/m/FgNDBjrtBQAJ
    >
    > Bug: 40643756
    > Change-Id: Ieed38216f62bc2c0791a22bee181913338e451bf
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5508153
    > Commit-Queue: Shu-yu Guo <syg@chromium.org>
    > Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93706}
    
    Bug: 40643756
    Change-Id: I43e3d0b35cb7239146900b9ebe3844a5b778faef
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5516098
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93710}

commit d96f8137ebcfd00a55a95e00e34b7ac4ea42163f
Author: Josip Sokcevic <sokcevic@chromium.org>
Date:   Fri May 3 18:07:58 2024 +0000

    Update wasm fuzzer corpus gen script
    
    Updated scripts updates v8/fuzzer_wasm_corpus git repository.
    
    Bug: b/337115560
    Change-Id: I4aba54ee8db0e2f22c86f0b81b5421d3cb34a095
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512864
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Josip Sokcevic <sokcevic@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93709}

commit dfb1ee64c23a020f52ced1252a21bd4d8005ea18
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri May 3 18:22:35 2024 +0000

    Reland "Reland "[heap] Add shared trusted spaces""
    
    This reverts commit 052e9c93e2ed2f805fea95139fc36719f8841c7f.
    
    Reason for revert: Incorrect rebase
    
    Original change's description:
    > Revert "Reland "[heap] Add shared trusted spaces""
    >
    > This reverts commit e8dcad4a728f7569b4a4355fd3d79f055a478e4d.
    >
    > Reason for revert: GPU tests failed on https://ci.chromium.org/ui/p/v8/builders/ci/Linux%20V8%20FYI%20Release%20%28NVIDIA%29/29226/overview
    >
    > Original change's description:
    > > Reland "[heap] Add shared trusted spaces"
    > >
    > > This is a reland of commit d4210ceae1d1e992ae88a9918a9a8042adba3084
    > >
    > > Apparently I unintentionally made changes to scavenger.cc in the
    > > first CL. This CL removes those changes.
    > >
    > > Original change's description:
    > > > [heap] Add shared trusted spaces
    > > >
    > > > This CL adds shared variants for the trusted spaces (both for regular-
    > > > sized and large objects). These spaces will be needed when we
    > > > eventually want to share Wasm types between multiple isolates.
    > > >
    > > > Bug: 338342768
    > > > Change-Id: Ia6a080f6acb22f895dc8ef4f81c2f639d0ba637a
    > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501038
    > > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > > > Cr-Commit-Position: refs/heads/main@{#93682}
    > >
    > > Bug: 338342768
    > > Change-Id: I873f4e266eb5b31c98306b725f4e1836a5a3c0c5
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5514847
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93694}
    >
    > Bug: 338342768
    > Change-Id: I2e5c2bb4dd6c810b8d42ca7da9da54db0e30f656
    > No-Presubmit: true
    > No-Tree-Checks: true
    > No-Try: true
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512872
    > Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Reviewed-by: Adam Klein <adamk@chromium.org>
    > Commit-Queue: Adam Klein <adamk@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93707}
    
    Bug: 338342768
    Change-Id: I29f1d5b5eb734284d92158a9e06a5d624922d0e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512873
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93708}

commit 052e9c93e2ed2f805fea95139fc36719f8841c7f
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri May 3 18:15:23 2024 +0000

    Revert "Reland "[heap] Add shared trusted spaces""
    
    This reverts commit e8dcad4a728f7569b4a4355fd3d79f055a478e4d.
    
    Reason for revert: GPU tests failed on https://ci.chromium.org/ui/p/v8/builders/ci/Linux%20V8%20FYI%20Release%20%28NVIDIA%29/29226/overview
    
    Original change's description:
    > Reland "[heap] Add shared trusted spaces"
    >
    > This is a reland of commit d4210ceae1d1e992ae88a9918a9a8042adba3084
    >
    > Apparently I unintentionally made changes to scavenger.cc in the
    > first CL. This CL removes those changes.
    >
    > Original change's description:
    > > [heap] Add shared trusted spaces
    > >
    > > This CL adds shared variants for the trusted spaces (both for regular-
    > > sized and large objects). These spaces will be needed when we
    > > eventually want to share Wasm types between multiple isolates.
    > >
    > > Bug: 338342768
    > > Change-Id: Ia6a080f6acb22f895dc8ef4f81c2f639d0ba637a
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501038
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93682}
    >
    > Bug: 338342768
    > Change-Id: I873f4e266eb5b31c98306b725f4e1836a5a3c0c5
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5514847
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93694}
    
    Bug: 338342768
    Change-Id: I2e5c2bb4dd6c810b8d42ca7da9da54db0e30f656
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512872
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93707}

commit fc0cd5fd4ecb855b374770ed437b0aea040d2cb4
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu May 2 08:47:04 2024 -0700

    [import-attributes] Disable flag for import assertions
    
    The 'assert' syntax has been deprecated for 3 milestones with a warning
    message saying it will removed in 12.6.
    
    This CL disables the flag by default without removing any code, pending
    evidence of web compatibility.
    
    See https://groups.google.com/a/chromium.org/g/blink-dev/c/ZHvzLaJZRvo/m/FgNDBjrtBQAJ
    
    Bug: 40643756
    Change-Id: Ieed38216f62bc2c0791a22bee181913338e451bf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5508153
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93706}

commit 00cd869881d0b092fff770a68018e473b2307bd9
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri May 3 18:49:29 2024 +0200

    [maglev] Support inlining functions with try/catch
    
    Count the distance in number of interpreter frames to the parent frame
    that has an active catch block.
    
    Bug: v8:7700
    Change-Id: I23761a4bc87c3facdbfa8c883eb4363503658d00
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512711
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93705}

commit be523d881e4cede5fec310f87af751231b5ac46b
Author: Adam Klein <adamk@chromium.org>
Date:   Thu May 2 10:54:44 2024 -0700

    [api] Advance deprecation of Isolate::SafeForTerminationScope
    
    Also mark Isolate::CreateParams::only_terminate_in_safe_scope as
    deprecated.
    
    This code has been a no-op since https://crrev.com/c/5144994 (M121).
    
    Change-Id: I86cd1e443ef3bb77b6052a4610dd7fd17481d68b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509907
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93704}

commit 2fc0f1955246054fff64f7cd38f2493c096760ae
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri May 3 16:37:46 2024 +0200

    [maglev] Another fix to context slot analysis
    
    The initial content of the context register is the context the function
    is closed over, i.e. the outer scope of the function scope itself.
    
    Bug: 41494766
    Change-Id: I32bacea9cb22fe4ce8467843e24b5fdbe5b32976
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512713
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93703}

commit 0c3acdded751ce926fe78c5d54878d9c5c07cf6c
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 3 14:27:23 2024 +0200

    [turboshaft] Maglev-to-ts: support RestLength
    
    Bug: chomium:42204525
    Change-Id: I2ed9ef99092aa607ab0c4fe345fb240248ec9673
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5513448
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93702}

commit 393a2125ae841491a3dc47ff086c4898b9f36dc4
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri May 3 15:02:44 2024 +0200

    [ic] Clone IC support for sealed and frozen elements
    
    Bug: 40764103
    Change-Id: I567d299225b548e7989bdfe7045605970d195c9f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501040
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93701}

commit 6311c1819e394ea932927900c1bd4a59c16f24ce
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Thu May 2 10:32:01 2024 -0600

    [arm64] FEAT_FP16 for NEON 3Same and 2RegMisc instructions
    
    This change brings support of FP16 extension for Arm64 instructions.
    It doesn't introduce new instructions, but adds support for 4H and 8H lines
    encoding. Also, the change introduces FEAT_FP16 cpu feature and extends Arm64
    simulator with half-precision support for affected instructions.
    
    Bug: 337998764
    Change-Id: Ibcc5bca46f830dccfd1c3328be0fe0dbe454ef26
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467537
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93700}

commit a708f73f39323c1262d4a539f622cd6d6ebddbaf
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri May 3 14:16:40 2024 +0200

    [turboshaft] Maglev-to-ts: support StoreGlobal
    
    Bug: chomium:42204525
    Change-Id: I648b125158bb66c6e46a7badb20c33646c7a1de8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512709
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93699}

commit 0cfad57512ca347497b691a74fb1ea525e7ef70c
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri May 3 11:46:43 2024 +0200

    [wasm][jspi] Fix IsOnCentralStack check
    
    When switching to a target stack, we should look at the SP, not the
    stack base, to determine if the target stack is on the central stack or
    not.
    This makes a difference if the target stack is originally a secondary
    stack, but is in the middle of a JS or C++ call. In this case, the
    stack memory still holds a pointer to the secondary stack memory, but
    the SP is temporarily inside the central stack.
    
    Drive-by: remove obsolete comment.
    
    R=jkummerow@chromium.org
    
    Bug: 338122900
    Change-Id: I191df8f37acaa2b21e12f0a5a76d783554eb7e88
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5515167
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93698}

commit 56a00f8f5a6d6ffee37cef0d9ecbb400718b069f
Author: jiepan <jie.pan@intel.com>
Date:   Tue Apr 30 17:01:56 2024 +0800

    [revec][wasm][turboshaft] Fix reducer forwarding issue in FixLoopsPhis
    
    Bug: v8:12716
    Change-Id: I0abcce086abf9189432533506e9a6a4c4a3d1be7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5500850
    Commit-Queue: Jie Pan <jie.pan@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93697}

commit e7a86607d95a24231d5ae8e71c7aca625431351c
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri May 3 10:30:16 2024 +0200

    [heap] Reuse AllocationSpace methods in MemoryChunkMetadata
    
    We can reuse IsAnyTrustedSpace() in
    MemoryChunkMetadata::InTrustedSpace(). The same thing can be done
    for MemoryChunkMetadata::InSharedSpace() by introducing
    IsAnySharedSpace().
    
    Drive-by: Remove unused methods InOldSpace() and InLargeObjectSpace()
    in MemoryChunkMetadata.
    
    Bug: 338342768
    Change-Id: Idbeb048188c39e1444d4fc278eff3d1ed7a66db3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5512704
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93696}

commit 3755384c9f6cb8b6c9dcc8d7821a1bacbd6800a5
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri May 3 09:51:00 2024 +0200

    [maglev] Context analysis fixes for extensions and generators
    
    A context value can also be a context extension slot.
    
    The allowlist for unhandled context values needs to include
    RegisterInput for generators and CallRuntime for dynamically selected
    scopes around eval.
    
    Fixed: 338437453
    Fixed: 338457100
    Bug: 41494766
    
    Change-Id: I2f175634a01d588c9200f6beedf43e52813dd303
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5514848
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93695}

commit e8dcad4a728f7569b4a4355fd3d79f055a478e4d
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri May 3 09:36:27 2024 +0200

    Reland "[heap] Add shared trusted spaces"
    
    This is a reland of commit d4210ceae1d1e992ae88a9918a9a8042adba3084
    
    Apparently I unintentionally made changes to scavenger.cc in the
    first CL. This CL removes those changes.
    
    Original change's description:
    > [heap] Add shared trusted spaces
    >
    > This CL adds shared variants for the trusted spaces (both for regular-
    > sized and large objects). These spaces will be needed when we
    > eventually want to share Wasm types between multiple isolates.
    >
    > Bug: 338342768
    > Change-Id: Ia6a080f6acb22f895dc8ef4f81c2f639d0ba637a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501038
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93682}
    
    Bug: 338342768
    Change-Id: I873f4e266eb5b31c98306b725f4e1836a5a3c0c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5514847
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93694}

commit bd0343c5bc19b85ddc4337335c0af11fd6f60992
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Wed May 1 16:46:35 2024 -0600

    [x64] F16C extension detection and instructions
    
    This change brings support of F16C extension instructions for x64 assembler.
    
    Bug: 337998764
    Change-Id: Idfcee735bd91f67d654de0ef8f59dc8f2a6546e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5503348
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93693}

commit 8fcd2fb68c101e2743f37be1433b3e8864a33458
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu May 2 13:28:04 2024 -0400

    PPC/s390: [wasm][sandbox] Fix sandbox escapes via i32 high word
    
    Port 5942a14103720910a8c6a0aebc67f4314dd8fdd9
    
    Original Commit Message:
    
        In-sandbox corruption could cause i64 values to be passed to
        functions expecting an i32. This patch unconditionally zeros
        the high word of i32 register parameters to prevent that.
    
    R=jkummerow@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: If220b8f36cb297d6d368942fe60b4add6851af02
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5511324
    Commit-Queue: Junliang Yan <junyan@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93692}

commit 0b15df12ac8e09a9cb205771a1d71354400b5e33
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu May 2 11:41:17 2024 -0400

    PPC/s390: [fastapi] Set context for fast api calls
    
    Port 87b5f43534047909e185c4b0fbe287c46345680d
    
    Original Commit Message:
    
        It is possible already to throw exceptions functions called with the
        fast API, but it is not possible so far to actually allocate an
        exception in such a function because no context is available. With this
        CL, the context is set to the isolate when calling to C with the fast
        API. This allows to delete debug code in the macro assembler that sets
        the context to 0 for calls to C.
    
    R=ahaas@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Icf8fb01872353ce685d8a65b7a334ef954e29161
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509747
    Commit-Queue: Junliang Yan <junyan@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93691}

commit ab239f64379eec5fda5b9f955aa066aec8b8a8f6
Author: Joyee Cheung <joyee@igalia.com>
Date:   Mon Apr 22 14:27:47 2024 +0200

    [api] support v8::Data in v8::TracedReference and v8::EmbedderGraph
    
    Refs: https://github.com/nodejs/node/pull/52295
    
    Change-Id: If0e34519c4fa83b019a0a67136e6515d85810a19
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5403888
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93690}

commit 2be84efd933f6e1e29b0c508a1035ed7d13d7127
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Wed May 1 16:45:13 2024 -0700

    Reland "[shared-struct] Add Mutex.lockAsync and Condition.waitAsync APIs."
    
    This is a reland of commit 975dabc6e97757cf0fb05d2b1cbaab2ad2d8eb85
    
    Changes since revert:
    
      - Clear owner thread Id when releasing the lock in
        JSAtomicsMutex::CleanupMatchingAsyncWaiters.
    
    Original change's description:
    > [shared-struct] Add Mutex.lockAsync and Condition.waitAsync APIs.
    >
    > This CL add support for Atomics.Mutex.asyncLock(mutex, callback), its
    > return value is always a promise.
    > If callback's result is not a promise, then the mutex is released and
    > the return promise is resolved once the callback finished execution.
    > If callback's result is a promise, then the mutex is released and the
    > return promise is resolved once the callback promise is resolved.
    > The value the result promise passes to its handlers is an object
    > {value: 'callback_result', success: boolean}.
    >
    > This CL also adds support for Atomics.Condition.asyncWait. Its return
    > value is a promise which will be resolved when the corresponding
    > condition variable is notified.
    >
    > Both API's support timeouts.
    >
    > Bug: v8:12547
    > Change-Id: I95eaa3f78781211b2fb69dc89da98b0214dae892
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4873220
    > Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > Reviewed-by: Adam Klein <adamk@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93665}
    
    Bug: v8:12547
    Change-Id: I2e8d977abe41b691893d5abbab9549c3f23fa63e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5507046
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93689}

commit 14b1b1d819ad82a69462b1e9f850b58a052a335b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu May 2 09:02:36 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/f4cde28..5eb3bab
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/e84a494..0421a22
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/e75b940..7ababdf
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/cc8e142..17956d4
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749036512441629729
    
    Change-Id: Ieef57d778384b0f3b1527476ed6763ebbd6b1ea3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5506806
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93688}

commit bd6252c6fd865afeb0b5379fcac3301df7d57efc
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu May 2 17:19:43 2024 +0200

    [maglev] Eager deopt previously unvisited catch blocks
    
    This allows us to ignore the catch block for optimization across it.
    Better would be to lazy deopt code that throws if the target catch
    handler wasn't generated. I'll look into that next.
    
    Bug: v8:7700
    Change-Id: Ibeac8995571a339cf88e9302011fff60caaa2fdf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5498885
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93687}

commit 9c32c3208b934f839563ac2ef336b87ce23a948a
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Apr 30 16:20:21 2024 -0400

    Reland "[turboshaft] initialize constant_value_ to an empty value"
    
    This is a reland of commit f6bef09b3b0a4aedaa59ff86a33c9f1d7427357b
    Previous test failure might have been unreliable.
    
    Original change's description:
    > [turboshaft] initialize constant_value_ to an empty value
    >
    > gcc-10 seems to have a bug were not initializing this value
    > throws this compilation error:
    > ```
    > src/compiler/turboshaft/assembler.h:680:16: error: ‘<anonymous>’ is used uninitialized in this function [-Werror=uninitialized]
    >   680 |     return Get();
    > ```
    > https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86465
    >
    > Bug: v8:12783
    > Change-Id: I7a5fee5009b866a801326fba734c156c3cfdb1b0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5503350
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    > Cr-Commit-Position: refs/heads/main@{#93675}
    
    Bug: v8:12783
    Change-Id: Id6c3ae0d621d0dc173d459f08531d29f837e130e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509746
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93686}

commit 3528936f952853e1e0c4c4c8c58bfcf48e9e9463
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu May 2 17:12:32 2024 +0200

    [wasm][fuzzers] Fix --wasm-fuzzer-gen-test for invalid sig_index
    
    When block types refer to nonexistent signature indices, just print
    that raw index, rather than trying to get a name for it.
    
    Bonus change: speed up a quadratically slow DCHECK in Turboshaft.
    
    Fixed: 338071688
    Change-Id: I0009f9f58c590fe99f20ba6a3fd858cae1bcccb4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5510483
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93685}

commit cb738a08006a63ec0b4d48edc564e89f2b121956
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu May 2 15:38:54 2024 +0000

    Revert "[heap] Add shared trusted spaces"
    
    This reverts commit d4210ceae1d1e992ae88a9918a9a8042adba3084.
    
    Reason for revert: failure on V8 Linux64 TSAN - stress-incremental-marking https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20stress-incremental-marking/16656/overview
    
    Original change's description:
    > [heap] Add shared trusted spaces
    >
    > This CL adds shared variants for the trusted spaces (both for regular-
    > sized and large objects). These spaces will be needed when we
    > eventually want to share Wasm types between multiple isolates.
    >
    > Bug: 338342768
    > Change-Id: Ia6a080f6acb22f895dc8ef4f81c2f639d0ba637a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501038
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93682}
    
    Bug: 338342768
    Change-Id: I729b1478b43102001b2a20339d2a965bdabcdf7e
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509905
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93684}

commit 087afa34459e5ea85d07a1c20cc909a6653513c8
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu May 2 16:18:26 2024 +0200

    [maglev] Properly fix context slot analysis confusion
    
    Aliasing between contexts can also happen without OSR, in case both the
    initial context as well as the constant context of an inlinee refer to
    the same runtime context. Thus the initial fix in crrev.com/c/5481577
    was not complete.
    
    To properly solve the issue we introdue a may-alias analysis between
    contexts based on scope infos. The analysis has two parts:
    
    1. Keep track if we loaded both from a constant as well as a dynamic
       constext in `KnownNodeAspects::may_have_aliasing_contexts`.
    2. In case we did, on every store check all the cached values for other
       contexts which could refer to the same ScopeInfo and clear them.
    
    To acchieve (2) we remember the association between context SSA values
    and ScopeInfo's where neccessary on the MaglevGraph.
    
    In the case of OSR it can happen that we cannot attribute the scope info
    at the OSR entrypoint with certainty. In this case we assume that it can
    alias with any scope.
    
    Fixed: chromium:41494766
    Change-Id: I1227446cd29cc758ce90738217da337c7a20a52a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5497160
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93683}

commit d4210ceae1d1e992ae88a9918a9a8042adba3084
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu May 2 13:51:45 2024 +0200

    [heap] Add shared trusted spaces
    
    This CL adds shared variants for the trusted spaces (both for regular-
    sized and large objects). These spaces will be needed when we
    eventually want to share Wasm types between multiple isolates.
    
    Bug: 338342768
    Change-Id: Ia6a080f6acb22f895dc8ef4f81c2f639d0ba637a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501038
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93682}

commit 0f647b4d19d871b43ea40dd1f9c839f2b4b5d9aa
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu May 2 15:53:48 2024 +0200

    [wasm][liftoff] Fix overly strict DCHECK
    
    The DCHECK added in crrev.com/c/4567490 didn't consider that we
    also use floating-point registers for SIMD values.
    
    Fixed: 337870524
    Change-Id: Ia49c598fa850f38903a700b759873c1cce546dec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509656
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93681}

commit 5942a14103720910a8c6a0aebc67f4314dd8fdd9
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu May 2 14:39:02 2024 +0200

    [wasm][sandbox] Fix sandbox escapes via i32 high word
    
    In-sandbox corruption could cause i64 values to be passed to
    functions expecting an i32. This patch unconditionally zeros
    the high word of i32 register parameters to prevent that.
    
    Bug: 334120897
    Change-Id: Ia19925e5133b6c560ca8308fd84ae64ff0208b86
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5494364
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93680}

commit 4331471cced0f9d7734acb7e25e81da2984823c2
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu May 2 14:36:18 2024 +0200

    [wasm] Fix WasmNull body descriptor
    
    The body descriptor cannot re-use fixed-size body descriptors as that
    implies that `map->instance_size()` matches the static size. WasmNull
    uses variable size as its size is too large for fixed-size maps
    though, which makes the DCHECK fail if actually using this `SizeOf()`
    method.
    
    Bug: 335479495
    Change-Id: I77daa9e9e75056d32fbe2787756984850388cb90
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509654
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93679}

commit 87b5f43534047909e185c4b0fbe287c46345680d
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu May 2 12:51:25 2024 +0200

    [fastapi] Set context for fast api calls
    
    It is possible already to throw exceptions functions called with the
    fast API, but it is not possible so far to actually allocate an
    exception in such a function because no context is available. With this
    CL, the context is set to the isolate when calling to C with the fast
    API. This allows to delete debug code in the macro assembler that sets
    the context to 0 for calls to C.
    
    Bug: 41492790
    Change-Id: I5408891f70dee87b50e43d46573d72639ca40f1d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509652
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93678}

commit ba0e87a4f8b9dc2c1dd8710c61dd264d72858141
Author: pthier <pthier@chromium.org>
Date:   Thu May 2 12:40:27 2024 +0200

    [fuzztest] Add antlrv4 grammar for regexp fuzzer
    
    The anglrv4 grammar is used as a source to create the InGrammar domain
    for the regexp fuzzer.
    
    Bug: 40941204
    Change-Id: I3ae74b0fc23bdf47e9c530e894802c53cb772d63
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509651
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93677}

commit 118803f5abf7a3ef6c7b55fa323763a8b3c28a39
Author: Eva Herencsárová <evih@chromium.org>
Date:   Thu May 2 12:02:37 2024 +0000

    Revert "[turboshaft] initialize constant_value_ to an empty value"
    
    This reverts commit f6bef09b3b0a4aedaa59ff86a33c9f1d7427357b.
    
    Reason for revert: fails on https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Blink%20Linux/30587/overview
    
    Original change's description:
    > [turboshaft] initialize constant_value_ to an empty value
    >
    > gcc-10 seems to have a bug were not initializing this value
    > throws this compilation error:
    > ```
    > src/compiler/turboshaft/assembler.h:680:16: error: ‘<anonymous>’ is used uninitialized in this function [-Werror=uninitialized]
    >   680 |     return Get();
    > ```
    > https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86465
    >
    > Bug: v8:12783
    > Change-Id: I7a5fee5009b866a801326fba734c156c3cfdb1b0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5503350
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    > Cr-Commit-Position: refs/heads/main@{#93675}
    
    Bug: v8:12783
    Change-Id: I94ef79bd92811803e1581ec0c47daffc1bb11aa1
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509655
    Owners-Override: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93676}

commit f6bef09b3b0a4aedaa59ff86a33c9f1d7427357b
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Apr 30 16:20:21 2024 -0400

    [turboshaft] initialize constant_value_ to an empty value
    
    gcc-10 seems to have a bug were not initializing this value
    throws this compilation error:
    ```
    src/compiler/turboshaft/assembler.h:680:16: error: ‘<anonymous>’ is used uninitialized in this function [-Werror=uninitialized]
      680 |     return Get();
    ```
    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86465
    
    Bug: v8:12783
    Change-Id: I7a5fee5009b866a801326fba734c156c3cfdb1b0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5503350
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93675}

commit f1c90730dade46a01eb3a9521ddb9b967f39b8e8
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu May 2 11:55:44 2024 +0200

    [tests] Stop using deprecated v8::ObjectTemplate::SetAccessor(..)
    
    ... for interceptor tests.
    The getter/setter callbacks were used for checking whether the get/set
    request was correctly handled by interceptor in a child object.
    
    The usual replacement SetNativeDataProperty(..) doesn't fit here
    because according to JavaScript spec the setter callback should not be
    called in case a property is stored to a child object.
    So, the tests are updated to use JavaScript accessor callbacks instead.
    
    Bug: 336325111
    Change-Id: I8ac6f160635cf1fbbbf90e7037bea18f076cc630
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5498423
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93674}

commit 36a7864eb838b77e4474f313eacedcdb77645d78
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Apr 30 20:10:32 2024 +0200

    [tests] Replace SetAccessor(..) usages with SetNativeDataProperty(..)
    
    Despite a slight difference in behaviour of data properties defined
    via the former from data properties defined via the latter the tests
    updated in this CL don't depend on this difference.
    So it's just a trivial renaming.
    
    Bug: 336325111
    Change-Id: I940f22ae94c3f2eae78a8585a0efa6f299b2674f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5498424
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93673}

commit 340bbc4b0471baa7e3e67f71a8931e62ae8152fc
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu May 2 11:41:07 2024 +0200

    [d8][tests] Remove recently introduced d8.dom.Document_all
    
    ... in favour of %GetCallable(target_name).
    
    d8.dom.Document_all was defined as undetectable which immediately
    invalidated the NoUndetectableObjects protector. The CL where it was
    introduced regressed benchmarks, this should hopefully recover some
    of the regression.
    
    The existing %GetCallable(target_name) function was changed to return
    a callable object that redirects [[Call]] requests to
    globalThis[target_name] function.
    
    Update existing tests accordingly.
    
    Bug: 335544085
    Change-Id: Idd6140c38d6a3fc4cbe4b0a0ac6a8aa4d8a76f62
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5505451
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93672}

commit e402da345fc244b342ec3a56d78bbd179a4c6587
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Apr 29 12:51:55 2024 +0200

    [profiler] Add heap/OWNERS as snapshot owners
    
    The team maintains the heap snapshot generator and is aware of the
    inner workings around visitation and GC necessary to make this work.
    
    Bug: 338340739
    Change-Id: Ieea44232bb279ddbb7ecb46447d6c7b4914d61c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490528
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93671}

commit e40ac6ebc8c4f98f98149dfabda9e6ef3026c5ff
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu May 2 10:53:49 2024 +0200

    [owners] Clean up js-fuzzer owners
    
    No-Try: true
    Bug: 338340739
    Change-Id: Idbe4c5f8a9b9f322ff1d57d6543517da147939ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509232
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93670}

commit 90f276be1122336c6ff7b808054fb183af7a2a9e
Author: Andy Wingo <wingo@igalia.com>
Date:   Thu May 2 07:10:44 2024 +0000

    Reland "[heap][sandbox] Add young generation for ExternalPointerTable"
    
    This is a reland of commit 6219bc776cb2ea6e557a13202ea461d654253aee
    
    Original change's description:
    > [heap][sandbox] Add young generation for ExternalPointerTable
    >
    > When the sandbox is enabled, instead of allocating external pointer table
    > entries in one big space that is only collected as part of a major GC,
    > add a spatially partitioned young generation.  After a minor collection,
    > eagerly sweep that new space, so it is ready for fresh allocations.
    > When objects are promoted, their EPT entries get evacuated to the old
    > space.
    >
    > Design doc:
    > https://docs.google.com/document/d/1Pvr4RbG_ZiaYZ-VkE22bSyCOiOntpbSBNJIhv45JTKk
    >
    > Bug: chromium:40643874
    > Change-Id: I08978c087c809328fd614325c9b238e4e5a0994a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185345
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Andy Wingo <wingo@igalia.com>
    > Cr-Commit-Position: refs/heads/main@{#93653}
    
    Bug: chromium:40643874
    Change-Id: Ib5bc47f719af531ee3fcd58e99a38bad1a3b2843
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5509231
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93669}

commit 768705a60c62258739159276afd1615c1751482b
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Wed May 1 23:03:33 2024 +0000

    Revert "[heap][sandbox] Add young generation for ExternalPointerTable"
    
    This reverts commit 6219bc776cb2ea6e557a13202ea461d654253aee.
    
    Reason for revert: blocking LKGR https://ci.chromium.org/ui/p/v8/builders/ci/Linux%20V8%20FYI%20Release%20(NVIDIA)/29196/overview
    
    Original change's description:
    > [heap][sandbox] Add young generation for ExternalPointerTable
    >
    > When the sandbox is enabled, instead of allocating external pointer table
    > entries in one big space that is only collected as part of a major GC,
    > add a spatially partitioned young generation.  After a minor collection,
    > eagerly sweep that new space, so it is ready for fresh allocations.
    > When objects are promoted, their EPT entries get evacuated to the old
    > space.
    >
    > Design doc:
    > https://docs.google.com/document/d/1Pvr4RbG_ZiaYZ-VkE22bSyCOiOntpbSBNJIhv45JTKk
    >
    > Bug: chromium:40643874
    > Change-Id: I08978c087c809328fd614325c9b238e4e5a0994a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185345
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Andy Wingo <wingo@igalia.com>
    > Cr-Commit-Position: refs/heads/main@{#93653}
    
    Bug: chromium:40643874
    Change-Id: Ie0f73c6705e8d671185af64bc15c752e04a05047
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5506863
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93668}

commit 04c7ba1e378656efc53d8c60494b7a71f626779f
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Wed May 1 23:06:08 2024 +0000

    Revert "[shared-struct] Add Mutex.lockAsync and Condition.waitAsync APIs."
    
    This reverts commit 975dabc6e97757cf0fb05d2b1cbaab2ad2d8eb85.
    
    Reason for revert: Failed on V8 Linux64 TSAN - debug https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20debug/5680/overview
    
    Original change's description:
    > [shared-struct] Add Mutex.lockAsync and Condition.waitAsync APIs.
    >
    > This CL add support for Atomics.Mutex.asyncLock(mutex, callback), its
    > return value is always a promise.
    > If callback's result is not a promise, then the mutex is released and
    > the return promise is resolved once the callback finished execution.
    > If callback's result is a promise, then the mutex is released and the
    > return promise is resolved once the callback promise is resolved.
    > The value the result promise passes to its handlers is an object
    > {value: 'callback_result', success: boolean}.
    >
    > This CL also adds support for Atomics.Condition.asyncWait. Its return
    > value is a promise which will be resolved when the corresponding
    > condition variable is notified.
    >
    > Both API's support timeouts.
    >
    > Bug: v8:12547
    > Change-Id: I95eaa3f78781211b2fb69dc89da98b0214dae892
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4873220
    > Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > Reviewed-by: Adam Klein <adamk@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93665}
    
    Bug: v8:12547
    Change-Id: Idd61303b6fbfded38ef9a9fba266391cedf2e823
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5506864
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93667}

commit af484aa73f886c83268bb9392c0dcc2b9cffa60b
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed May 1 12:21:33 2024 -0400

    ppc[turboshaft]: mark CombineCompare tests as slow on simulator
    
    Change-Id: I9f3dedf5756e17f5bb003c7846dc41e434002364
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5503356
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93666}

commit 975dabc6e97757cf0fb05d2b1cbaab2ad2d8eb85
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Wed May 1 13:41:29 2024 -0700

    [shared-struct] Add Mutex.lockAsync and Condition.waitAsync APIs.
    
    This CL add support for Atomics.Mutex.asyncLock(mutex, callback), its
    return value is always a promise.
    If callback's result is not a promise, then the mutex is released and
    the return promise is resolved once the callback finished execution.
    If callback's result is a promise, then the mutex is released and the
    return promise is resolved once the callback promise is resolved.
    The value the result promise passes to its handlers is an object
    {value: 'callback_result', success: boolean}.
    
    This CL also adds support for Atomics.Condition.asyncWait. Its return
    value is a promise which will be resolved when the corresponding
    condition variable is notified.
    
    Both API's support timeouts.
    
    Bug: v8:12547
    Change-Id: I95eaa3f78781211b2fb69dc89da98b0214dae892
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4873220
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93665}

commit 9a343e7a112c0a5f40d14566532ce2f897c74977
Author: Francis McCabe <fgm@chromium.org>
Date:   Wed May 1 17:41:22 2024 +0000

    Set up proper installation guard for JSPI.
    
    Since JSPI & type reflection can be installed after user code has
    executed, we need to make sure that (a) it can only be used if
    properly installed, and (b) anytime JSPI is enabled, the installation is also completed.
    
    Created a boolean flag on the context object to make sure that JSPI features cannot be accessed unless it is properly installed.
    
    Bug: 336358915
    Change-Id: I6d95169c325257d963771b5471e763f76fcd2ac9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5484832
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93664}

commit 6f89b8f34ac0463dbc5e5a7efe057afec383e5c8
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed May 1 09:07:42 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/782eadf..f4cde28
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/d0f0285..9703d91
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/2c1ad97..31bdf8f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749127112301550657
    
    Change-Id: Ie32ef47fabca06bc78e7313210fe3fe24b0cefb9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5503355
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93663}

commit 56f2e9b62e2a9d479a52f92fc379cf7c79b771c5
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Apr 30 21:02:28 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/d6bd5c9..782eadf
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/835aa3e..e84a494
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/8e13f27..e75b940
    
    Rolling third_party/fuchsia-sdk/sdk: version:20.20240412.2.1..version:20.20240430.3.1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749172411199635073
    
    Change-Id: I6d464c0554fd9a5f2ac7c976abfebe4cf7c3acdd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5503352
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93662}

commit 774001235022df053289f0add6973824941a6044
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Apr 30 13:14:11 2024 -0400

    PPC: [compiler][arm64] Pattern matching ccmp
    
    Port 4421c3672a09788b36317b88a3f6f1e2ebadaa39
    
    Original Commit Message:
    
        Combine chains of Word32And, Word32Or and comparison nodes into the
        new ConditionalSet and ConditionalBranch FlagsContinuations. We begin
        the search from Word32And and Word32Or nodes.
    
        The AArch64 ccmp instruction conditionally executes a comparison:
        - If the instruction is predicated true, it performs a comparison of
          two inputs operands.
        - If the instruction is predicated false, it passes along a
          predefined value for nzcv.
    
        So, for a sequence (Word32And (CompareA) (CompareB)), CompareA would
        become a normal cmp, and CompareB would become a ccmp. The logical
        combining of the boolean results is achieved by predicating the ccmp
        and providing a default 'false' flag result:
          cmp
          ccmp not(CondB), CondA
          cset CondB
    
        The ccmp is predicated on CondA - so the ccmp will only execute iff
        cmp is true, and cset will produce 1 iff the ccmp produces a true
        value based on CondB. By having the ccmp provide not(CondB) as the
        default value, the cset will produce a zero if ccmp doesn't execute.
    
        These default nzcv values are chosen arbitrarily, each code just
        needs to set the right bit for the desired 'condition'. As a concrete
        example:
          (Word32And (Int32LessThan a, b), (Word32Equal c, d))
    
        The default 'false' nzcv needs to represent signed greater than or
        equal, ge, which is represented by N==V and we choose to use 'NoFlag'
        but NzcV would be equally valid:
          cmp a, b
          ccmp c, d, nzcv, eq
          cset lt
    
        Combining comparisons with OR is a little more complicated, as
        sequentially executing a ccmp converts the logic to an AND. So, for a
        sequence (Word32Or (CompareA) (CompareB)) we create an equivalent
        chain using AND: (not (Word32And (not CompareA) (not CompareB))) and
        generate the chain as we did before:
          cmp
          ccmp CondB, not(CondA)
          cset CondB
    
    R=sam.parker@arm.com, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I4d69b49ed87006b4ad6f3bbedc38f4731835a567
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5500503
    Commit-Queue: Junliang Yan <junyan@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93661}

commit 5f01397651a8742427e068226adafc02c108ad1a
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Apr 30 09:02:58 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/4d18eae..d6bd5c9
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/d980d87..835aa3e
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/2c87882..8e13f27
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/fbb52d9..2b354c6
    
    Rolling tools/luci-go: git_revision:239be4fd8499df782db6bddb0f55832bf4f01307..git_revision:01d1863acbd3d4c41da2aa7407a0ea6a195c770f
    
    Rolling tools/luci-go: git_revision:239be4fd8499df782db6bddb0f55832bf4f01307..git_revision:01d1863acbd3d4c41da2aa7407a0ea6a195c770f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749217709825958545
    
    Change-Id: Ia0069be7dc57b72db8c01db63f590af9f8b1ac1d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5502090
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93660}

commit 61453e50c45e6048bf1a2ba62e3dc8db9578beb0
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Apr 30 16:43:23 2024 +0200

    [wasm][shared] Extract shared instance data in builtins
    
    Add an extra parameter to builtins that need to conditionally extract
    the shared TrustedInstanceData from the TrustedInstanceData extracted
    from the frame. This is implemented only in Turboshaft for now.
    Some things are not handled yet: E.g. a `table.init` where the table
    and segment have different `shared` attributes.
    
    Bug: 42204563
    Change-Id: I4f0e6775302e6d279cc203e016a17d3cae011660
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490697
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93659}

commit 23bcbfe2a160bac1be895504c40b920fef71aa45
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Thu Apr 18 16:54:45 2024 -0700

    Speed up heap snapshots
    
    When producing a heap snapshot, V8 starts by counting the objects in the
    heap so that it can report its progress. It currently does liveness
    analysis during this phase, which is unnecessary because it had just
    collected garbage, so the number of dead objects should be low, and a
    precise result is not required. By skipping the liveness analysis, we
    can save over 10% of the snapshot generation time (1.7 seconds out of 13
    on an 80 MB Google Docs page).
    
    Bug: 42203857
    Change-Id: I63411a4154b0c1fb5980feafdd5176b43f246128
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5466804
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93658}

commit 5d84c48eb907b8cd6db8f017e0263049de25443d
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon Apr 29 17:25:03 2024 +0200

    [api][cleanup] Remove SetAccessor and SetNativeDataProperty
    
    ... which were marked as V8_DEPRECATED in 12.5.
    
    This CL removes
      v8::Template::SetNativeDataProperty(v8::Local<v8::String>, ...);
      v8::ObjectTemplate::SetAccessor(v8::Local<v8::String>, ...);
    and
      v8::Template::SetNativeDataProperty(...); with AccessControl parameter.
    
    Bug: 326505377, 336325111
    Change-Id: Iba80f26b2350b49cbe5b7532332508b5617f94ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5497515
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93657}

commit 1f44d872775b74e2c0d0fe75f57c64157b403c59
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 30 16:23:57 2024 +0200

    [maglev] Fix typo CreateJSStringIterator
    
    Change-Id: Ieb36db9637a37935c520dfaf9127a1b48171d24d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501045
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93656}

commit d25ba5460c37a0e0ade68a2739423b7743cc77e3
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 30 16:26:30 2024 +0200

    [compiler] Check attributes when redefining existing property
    
    Consider
    
      function A() {
        Object.defineProperty(this, "x",
          {  writable: true, configurable: true,
             enumerable: false, value: undefined });
      }
    
      class B extends A {
        x = {};
      }
    
    When creating a B object, `x = {}` should trigger a map
    reconfiguration, because `A` already created the property `x` with
    attribute `enumerable = false`, but `x = {}` produces a property `x`
    that is enumerable.
    
    Both Turbofan and Maglev were ignorining this, and keeping the old
    attributes when doing `x = {}`.
    
    Bug: chromium:335310000
    Change-Id: I980fad69e810828ed75568e97886b7db344255da
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5498496
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93655}

commit a739f12a57eee8bf655459ec1891fbcab012a6a6
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Tue Apr 30 16:18:45 2024 +0200

    [wasm] Add TODO about deopt loop
    
    The combination of speculative inlining of call_ref (and once it lands,
    call_indirect) with deopt support might produce a deopt loop, see
    comment.
    
    Drive-by: Fix typo.
    
    Bug: 42204618, 41480394
    Change-Id: Ica18af0d471f6fa64d3da773d1079ba4a5c1b0f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5498884
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93654}

commit 6219bc776cb2ea6e557a13202ea461d654253aee
Author: Andy Wingo <wingo@igalia.com>
Date:   Tue Apr 30 11:48:20 2024 +0000

    [heap][sandbox] Add young generation for ExternalPointerTable
    
    When the sandbox is enabled, instead of allocating external pointer table
    entries in one big space that is only collected as part of a major GC,
    add a spatially partitioned young generation.  After a minor collection,
    eagerly sweep that new space, so it is ready for fresh allocations.
    When objects are promoted, their EPT entries get evacuated to the old
    space.
    
    Design doc:
    https://docs.google.com/document/d/1Pvr4RbG_ZiaYZ-VkE22bSyCOiOntpbSBNJIhv45JTKk
    
    Bug: chromium:40643874
    Change-Id: I08978c087c809328fd614325c9b238e4e5a0994a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185345
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93653}

commit c42bda3ad3d7b4d7801f873ea375ac20eaa5fcc9
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 30 15:27:46 2024 +0200

    [maglev] Inline JSCreateStringIterator allocation
    
    Drive-By: Fix printing allocation input location before the
    escape analysis pass.
    
    Bug: v8:7700
    Change-Id: I015ccb1698e5588968963bd980919103f9f5b382
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5498497
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93652}

commit 57d51a61754e458ffd9d8ba23b6c68fbcd71e365
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 30 15:02:03 2024 +0200

    [maglev] Inline JSIteratorResult allocation
    
    Bug: v8:7700
    Change-Id: I10e20776f6e2e12690c1b284f5030bb08382a629
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501495
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93651}

commit f261eaaa6b84f903f212b46fbbf6e79b20f7e6a3
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Apr 30 14:00:41 2024 +0200

    [test] Harden CanOptimizeFunction
    
    ... to also check if this is an optimizable function (i.e. one that is
    either uncompiled or has bytecode available). This used to be captured
    by allows_lazy_compilation, but that check excluded interpreted but not
    lazily compilable functions.
    
    Fixed: chromium:337906703
    Change-Id: I718c73bcdf996107f997b86be3fe02df2aa3c2dc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501041
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93650}

commit 947ae8167a9d3b5c02d24deaf49fdbb30a576cab
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 30 13:11:01 2024 +0200

    [maglev] Inline JSGeneratorObject allocation
    
    Bug: v8:7700
    Change-Id: Ibb1293f9409bf13d4607fbc0e81e143f635aea58
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5501037
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93649}

commit a6ddb38a6315290effb3bb38b20699cd0a03528e
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Apr 29 22:08:39 2024 +0200

    [heap] Optimize sweeping through tasks
    
    When sweeping in tasks we generally observe that concurrent sweeping
    is not done when starting sweeping on the main thread. However, by the
    time main thread sweeping is done, the concurrent sweeper is also
    almost always done. We can use the remaining time to avoid scheduling
    another task and eagerly finish sweeping in this case.
    
    Drive-by: Fix IsConcurrentSweepingDone() for cases where sweeping is
    fully finished (in which case the handle would be set but not valid).
    
    Bug: chromium:333981063
    Change-Id: Ic35226f915b740c76952bed9d1a6bb4278258ecb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5498376
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93648}

commit 4421c3672a09788b36317b88a3f6f1e2ebadaa39
Author: Samuel Parker <sam.parker@arm.com>
Date:   Wed Apr 3 13:53:06 2024 +0100

    [compiler][arm64] Pattern matching ccmp
    
    Combine chains of Word32And, Word32Or and comparison nodes into the
    new ConditionalSet and ConditionalBranch FlagsContinuations. We begin
    the search from Word32And and Word32Or nodes.
    
    The AArch64 ccmp instruction conditionally executes a comparison:
    - If the instruction is predicated true, it performs a comparison of
      two inputs operands.
    - If the instruction is predicated false, it passes along a
      predefined value for nzcv.
    
    So, for a sequence (Word32And (CompareA) (CompareB)), CompareA would
    become a normal cmp, and CompareB would become a ccmp. The logical
    combining of the boolean results is achieved by predicating the ccmp
    and providing a default 'false' flag result:
      cmp
      ccmp not(CondB), CondA
      cset CondB
    
    The ccmp is predicated on CondA - so the ccmp will only execute iff
    cmp is true, and cset will produce 1 iff the ccmp produces a true
    value based on CondB. By having the ccmp provide not(CondB) as the
    default value, the cset will produce a zero if ccmp doesn't execute.
    
    These default nzcv values are chosen arbitrarily, each code just
    needs to set the right bit for the desired 'condition'. As a concrete
    example:
      (Word32And (Int32LessThan a, b), (Word32Equal c, d))
    
    The default 'false' nzcv needs to represent signed greater than or
    equal, ge, which is represented by N==V and we choose to use 'NoFlag'
    but NzcV would be equally valid:
      cmp a, b
      ccmp c, d, nzcv, eq
      cset lt
    
    Combining comparisons with OR is a little more complicated, as
    sequentially executing a ccmp converts the logic to an AND. So, for a
    sequence (Word32Or (CompareA) (CompareB)) we create an equivalent
    chain using AND: (not (Word32And (not CompareA) (not CompareB))) and
    generate the chain as we did before:
      cmp
      ccmp CondB, not(CondA)
      cset CondB
    
    Change-Id: I73255e5f349ce6bcc351b18bd38ac409a4f368be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317579
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Rodolph Perfetta <rodolph.perfetta@arm.com>
    Cr-Commit-Position: refs/heads/main@{#93647}

commit 07ee5d44bfe7cc46d4e632616e7cc2d5c8c84c51
Author: Samuel Parker <sam.parker@arm.com>
Date:   Mon Apr 29 15:59:37 2024 +0100

    [arm64] Optimise veneering for long link chains
    
    Applying veneers to out of range branches when the link chain is long can be
    extremely slow. Profiling reveals >95% of the time is spent walking the link
    chain.
    
    Making the chain doubly-linked accelerates removing a link from the chain
    significantly. The back edges can't be stored in the code itself (where the
    forward edges live) so maintain an unordered map in the assembler.
    
    Patch by Martyn Capewell <martyn.capewell@arm.com>
    
    Bug: 40261789
    Change-Id: I8585a9f73d9f322422bf1d6e52f7fa52ae0da578
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490694
    Commit-Queue: Rodolph Perfetta <rodolph.perfetta@arm.com>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93646}

commit e5af40c706dbc2ecd0773b948646fad7bb730c50
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 26 17:17:35 2024 +0200

    [turboshaft] Maglev-to-ts: support named load on smis and cst key load
    
    Bug: chomium:42204525
    Change-Id: I37a97d57f2cdd5898223d0610768411ebe17f191
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5494069
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93645}

commit 260f80b5371fc5c0169419db0559a5cf97463dfb
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Apr 29 17:10:45 2024 +0200

    [wasm] --trace-turbo: fix UBSan report about nullptr
    
    When processing empty names of imports/exports, the code currently
    ends up doing `memcpy(nullptr, ..., 0)`, which is Undefined Behavior
    because the `dst` argument must be non-nullptr (even when the length
    is zero).
    
    Fixed: 337141854
    Change-Id: Iaff83fa71bd8cbe4ab9690f4bf0f29750291284c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5496964
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93644}

commit bc82abe98d12a4ed9b855d510866632d7521cc70
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Apr 29 21:01:41 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/9e07175..4d18eae
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/b915e95..d0f0285
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/11804c9..d980d87
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/4246ba0..2c87882
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/b84e3ff..fbb52d9
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749263008004514337
    
    Change-Id: I7d4441b91d35a669a9163d25ab4bffbe0b397c2e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5500496
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93643}

commit 220105bd1ad5c375c4933f13758e04700f007a00
Author: Pan, Tao <tao.pan@intel.com>
Date:   Mon Apr 29 21:29:38 2024 -0400

    [tiering] Early non function context specializing compile
    
    It can happen that we compile the same function twice, first specialized
    to a context and then generically. This CL records compilation without
    context specialization, and guides later compilations to skip
    compilation with context specialization.
    This CL can improve Speedomter3 by 0.4% and sub case Charts-chartjs by
    1.4% on win-11-perf.
    
    Change-Id: I4537e6b92c8696f0c694633e3bcb6f799fd33d01
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467244
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Tao Pan <tao.pan@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93642}

commit fa10a1917f41dc1028c9f55fb92e7fcc33c34b79
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Apr 29 12:20:51 2024 +0000

    [sandbox] Move RelocInfo into trusted space
    
    As this contains metadata about executable code, it should move into
    trusted space alongside the Code itself and other code metadata.
    
    Bug: chromium:333829668
    Change-Id: I13ee6d7298d0d6da7ad6bd776f36abc92dd26bf2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490529
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#93641}

commit 661c60c3e0f2e66cfb55ba728e89bcff05054440
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon Apr 29 14:22:55 2024 +0200

    [handles] Improve TracedNode::Publish
    
    The current version of Publish() creates lots of loads, stores and
    branches. We can improve this by initializing flags at once. While
    Publish() is not the hottest function in Speedometer, this CL reduces
    CPU cycles spent here by more than 40%.
    
    Bug: 335695521
    Change-Id: I39a7b03c3d1db0ce7850ad4da7744d586e6795df
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490691
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93640}

commit 3bfa1a67ffc0e02565d0d7f65527f1e00d66b18d
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Apr 29 17:40:31 2024 +0200

    [runtime/test] Allow non-lazy-compile functions to optimize
    
    ... using the test helpers. A function that can't lazy compile can still
    lazy allocate a feedback vector and tier up -- a concrete example is the
    initializer function of a class.
    
    This requires cleaning up other predicates around these functions to be
    robust against not having exited early.
    
    Change-Id: Ib32ccae64713fe358969c15b48433c18671e677b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5497159
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93639}

commit f3d77d7faed7cde6096beded42d5f1ec6098c5fb
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Apr 29 09:03:57 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/cc30724..9e07175
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749308302933280689
    
    Change-Id: Ibed9b135507d793b9c4431e452c0e2bfadcb8b3d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5496443
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93638}

commit 11f5049087bbf3d7090ee5a7a59c52d3231ce8fa
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Apr 29 16:43:05 2024 +0200

    [printing] Print attributes for JSObjects
    
    ... also when printing properties, not just when printing transitions or
    descriptors.
    
    Change-Id: I2bd274dc9cf612b6d1612d7fc988c3b7b78b8019
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490698
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93637}

commit c59baec10c0a032e594131fbaf1fa7ff7a6997dc
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Apr 29 16:15:08 2024 +0200

    [maglev] Set elements kind to holey if constructing array of possibly non-zero length
    
    Fixed: 337069178
    Change-Id: Ia065a0cd5f12c09dc0b48c2046f7f4bf784f4b15
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490696
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93636}

commit dcfe0ea1389e0b9ae572fce4c3e7f7bc5c8bd1bb
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Apr 29 10:10:37 2024 +0200

    [interpreter] Add a lookup table for operand offsets
    
    Looking up an operand by index previously required iterating over
    operands, and adding together their sizes. Add a per-bytecode,
    per-operand, per-scale lookup table which encodes each operand's offset
    directly, avoiding the need for this iteration.
    
    Change-Id: I732aa71a5be8aa1a3a0fb5d09b89b43c14972470
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5496955
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93635}

commit 62ec746e0419fa8e2d1ebd58e55c721a0751fb98
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Apr 26 15:05:26 2024 +0200

    [baseline] Optimise label allocation
    
    Remove the zero-initialized BaselineLabelPointer array, and replace it
    with a lazy-initialized Label array, with a bitvector which stores both
    the initialization state and the "indirect target" tag.
    
    This is a three-fold optimisation:
    
      * The zero initialization of the BaselineLabelPointer array was
        surprisingly expensive, on local measurements (on Linux x64) almost
        half as expensive as the actual compiling bytecode visit.
      * Making this an array of Label instead of Label* removes one level of
        indirection.
      * The BitVector is more tightly packed than the tagged label pointers,
        so the IsJumpTarget check should be cheaper.
    
    Change-Id: Ib028526e87281c8f666142bab18358b059e2c617
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5492426
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93634}

commit cf9373a0d6760146534b096cee60675a3ea09ad7
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Apr 29 14:35:49 2024 +0200

    [wasm][sandbox] Make WasmFunctionData trusted
    
    This moves the WasmFunctionData object hierarchy to trusted space,
    which addresses some of the ways how Wasm functions can currently
    be used for escaping from a compromised V8 sandbox.
    
    Bug: 334120897
    Change-Id: I23aa5bc7b1205ff29d0b6dac6fe301494275565e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5484107
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93633}

commit d2e75ccab7b563fb1a870f055e5181e76736207f
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Apr 24 16:48:55 2024 +0000

    [sandbox] Convert ArrayBufferExtensions to EPT managed resources again
    
    In crrev.com/c/5464461 we temporarily "un-managed" ArrayBufferExtensions
    as the managed resource mechanism interacted badly with the external
    pointer field resetting performed when detaching an ArrayBuffer. Now
    that detaching no longer resets the external pointer field (see
    crrev.com/c/5483266), we can again turn ArrayBufferExtensions into
    managed resources.
    
    Bug: chromium:327550517
    Change-Id: I6c796faf2f662bfa6dfd5e850bbbf18460245898
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5484106
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93632}

commit 05cb35d10e0f8aff7864cf47bb18947a15937191
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Apr 26 18:39:42 2024 +0200

    [gm.py] Fix "mkgrokdump" target on arm64
    
    Building "arm64.release.mkgrokdump" already worked, but building
    "arm64.release mkgrokdump" added the mkgrokdump target to the
    wrong hard-coded target architecture.
    
    No-Try: true
    Change-Id: I2e7e68911e6bae59310f28fdf1355909db4269ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5492430
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93631}

commit 2f872fdc5d3429cc8b88893ce6743d7ca20c51c4
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Apr 29 12:56:11 2024 +0200

    base: Add bikineev as an owner
    
    Change-Id: Iaf74af21b5d4baf2972aaf8ecf5f5653ad418a87
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5496961
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93630}

commit 164de5ad45a8748bb945fda3b23872761cf6f2d5
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Apr 29 09:37:52 2024 +0000

    [sandbox] Use parameter count from bytecode in Linkage::ComputeIncoming
    
    We want to deprecate SFI::formal_parameter_count. This CL switches the
    use in Linkage::ComputeIncoming to use the parameter count from the
    BytecodeArray instead.
    
    Bug: chromium:327473161
    Change-Id: Ia5014c594444a65e59f38d186d999eaae9bba671
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5496958
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93629}

commit a82a7d1f33fca349a86a51df80982510a72e43ca
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Sun Apr 28 11:44:15 2024 +0800

    [mips64] Fix an undefined behavior
    
    Negation of 'INT64_MIN' cannot be represented in type 'int64_t'.
    
    Change-Id: Ic1574a4c590841661e6606db44e6750eb3531b18
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490889
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93628}

commit fa8e2413b921110d5f8d81599123454323cd3296
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Mon Apr 29 10:53:42 2024 +0200

    [wasm] Collect and process feedback for call_indirect
    
    For that: Add CallIndirectIC builtin and call to it in Liftoff.
    Add call_indirect test. Update test expectations.
    The actual inlining in Turboshaft comes in a follow-up CL.
    
    Drive-by: change one `call_ref` to `call` in `--trace-wasm-inlining`
    output, since it's no longer just call_ref that is being inlined.
    
    Bug: 335082212
    Change-Id: Ib5e0e6e28cdeeac11318ad1b0575c8d849b6a70e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487863
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93627}

commit 5ee4c3c11b7f3ea7c44ceafe780dfca1f00798c5
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Apr 25 18:21:16 2024 +0200

    [parser] Do not park main thread while parsing
    
    Similarly to https://crrev.com/c/4553336 that did the same thing for
    the compiler, this CL avoids parking the main thread while parsing.
    
    Bug: b/336449373
    Change-Id: Ic747b32460581b9feb8f5ec0221376ab9fc0842f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490081
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93626}

commit 66081530107dbfdc6a3ffcfd2b769cc0264d0024
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Apr 25 17:30:57 2024 +0200

    [bazel] Add missing parameters
    
    The parameters are needed. If blaze complains again, we have to fix the
    caller.
    
    Bug: 336711943
    Change-Id: Ib1f18f32918c66da147b0f4331739c4552af620e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490079
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93625}

commit 2c9b2d7ba7200f5d4118148cb0f1dc91fd69219c
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Apr 29 10:10:51 2024 +0200

    [base] Optimize VLQEncodeUnsigned
    
    Change VLQEncodeUnsigned from a loop that adds continuation bits, into
    straight code writing the five bytes, with gotos jumping to the
    appropriate number of bytes to write based on the value.
    
    In particular, this avoids writing to the same location twice (once for
    the value bits, once for the continuation bit), which also means we can
    simplify the API to not require process_byte to return a pointer to the
    last written byte.
    
    This appears to be ~2x faster than the loop:
    https://quick-bench.com/q/TPfnCwLsgDQz4hvUwdJk-pHPwVU
    
    Change-Id: Ia732c0103a140ec5c72ea558dbd71952e98260df
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5496956
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93624}

commit e1f216b3c360b731556ab00ab9caf15b03ab7d46
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Apr 27 19:10:26 2024 -0700

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/a6405659..27b6e450
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749451750202473281
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: Ic855e63b1013839ac6f558471e11b5b7875ff311
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5495791
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93623}

commit 1761f2ca7961298336bf2d811de2bc12a5bcf33d
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Apr 26 21:03:21 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/7b7e80a..cc30724
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/86bf72c..b915e95
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/d980d87..11804c9
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/9570c8c..cc8e142
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749534795649213089
    
    Change-Id: Iab5b69d504741af65cc4e2c85b693ba9430ef329
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490558
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93622}

commit d3beebcabad9478beb01d88203d229ab6fe59e89
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Apr 26 09:03:35 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e797b8d..7b7e80a
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/9e1583d..86bf72c
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/774f822..d980d87
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749580094486132321
    
    Change-Id: Icae4a91ee4c836635bc4276f77e0e8cc543dcc07
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5491631
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93621}

commit 21129ed5e3cd396382b973209e79a098ea9a0ef1
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Apr 25 23:29:05 2024 +0000

    [explicit-resource-management]Add exception handling to sync ERM
    
    This CL adds exception handling to the implementation of sync
    explicit management proposal.
    
    Bug: v8:13559
    Change-Id: I2f4ffea432057b753634c2af4801f9dc48edac43
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5405985
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93620}

commit ca3cf43f3c51264fa9f458cb7a20b78b3de8eace
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Apr 25 18:37:25 2024 +0000

    [explicit-resource-management] Pull ControlScope's ContinuationToken out
    
    This CL pull ContinuationToken out from ByteCodeGenerator to
    be able to access it  publicly from runtime for explicit resource management implementation.
    
    Bug: 42203506
    Change-Id: I1b0c2f2a5ec7d03706c2226b78f096dc254aaa35
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5474587
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93619}

commit ff6cd1d05bbadd7b6418fe83edfa29f41fc4471c
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Apr 26 15:04:42 2024 +0200

    [baseline] Ensure compile is covered by RCS
    
    Add a CompileBackgroundBaseline scope to match the existing
    CompileBaseline scope, and add a Compile[Background]BaselineBuild scope
    to account the Build stage separately from generic CompileBaseline.
    
    Bug: chromium:336000645
    Change-Id: I17e0e6330a600354abf1898d0b771b9b17f442a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5492425
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93618}

commit 77952b4427ffeccaf7b16abb3451b1e1634318b5
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Apr 26 13:49:48 2024 +0200

    [profiler] Fix DCHECK failure when snapshotting WasmInstanceObject
    
    When generating heap snapshots, ExtractWasmInstanceObjectReference()
    was adding references from the corresponding WasmTrustedInstanceData
    to WasmInstanceObject. However, this was violating the invariant that
    field offsets fit into the current object.
    
    This CL solves this by annotating these references only on the
    WasmTrustedInstanceData object but not for the WasmInstanceObject
    anymore.
    
    It also tries to prevent such violations in the future by adding a
    max_pointers_ field and DCHECKing that the field offset/index is not
    too large. This DCHECK should fail more predictably and while still
    handling the broken object.
    
    Bug: 42204595
    Change-Id: Ia21a7ba2f029390a493164145c8324c64e32083e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5492423
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93617}

commit 1efbe4a5d1eb993b51b83f7da875adb93ae8506b
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 25 16:43:00 2024 +0200

    [turboshaft] V<>ify Turboshaft (ComparisonOp)
    
    Operations processed:
    - ComparisonOp
    
    Bug: chromium:331100916
    Change-Id: I3a841bcc82e88dfb250538559738677e1d10fcb4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5489780
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93616}

commit a7aadfcc89057864b54bab44ba4111ddf6dc7f03
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Apr 26 15:14:11 2024 +0200

    [bazel] Fix memory_corruption_api for the google3 testrunner
    
    Bug: 336711943
    Change-Id: Ie578651595500611123157b0838cd9de6fa924eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5492427
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93615}

commit fd7ea68a0e7edb5f527948f169e893204c026e1f
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Apr 12 09:59:06 2024 +0200

    [fuzztest] Flip regexp fuzzer to more expressive grammar
    
    This adds a new auto-generated InGrammar domain from antlrv4 grammar
    fuzzer_regexp_grammar.g4, which covers more regexp features.
    
    A backtracking limit prevents test timeouts that'd otherwise happen
    too frequently.
    
    Bug: 40941204
    Change-Id: Ie41b173ba5bc7acd970e1fe7643f4977cc807cd0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419073
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93614}

commit b1378683b389c8b392da1a2bd3d110fdf96e867b
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Apr 26 13:37:49 2024 +0200

    [ic] Use slow handlers for non-callable JSFunction accessors
    
    The IsJSFuncton() predicate returns true for class constructors which
    are not callable and thus are not expected by CallFunction builtins.
    
    This CL introduces IsCallableJSFuncton() predicate and fixes handling
    of class constructors installed as property accessors which was broken
    in https://crrev.com/c/5458075.
    
    Bug: 336852492
    Change-Id: I3042bbc543bb34a2109fbbf95673201cceaf23a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490093
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93613}

commit ef07ad4b1f5276342a2334dba7b69791b636a593
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Apr 26 13:15:20 2024 +0200

    cppgc: Prefer sweeping in idle tasks
    
    This patch changes the strategy used for cppgc (Oilpan) sweeping.
    Until now we preferred finishing sweeping as soon as possible using
    regular main trhead tasks and also reusing memory as much as possible
    on allocation. This apporach essentially minimizes RSS.
    
    This change moves us in the tradeoff space towards a strategy where we
    try to get out of the way of the mutator (e.g. main renderer) as much
    as possible at the expense of possibly using slightly more memory.
    
    In particular this change:
    a. Uses idle tasks to sweep memory and run finalizers as much as
       possible. We still preserve a fallback in case idle tasks are not
       enabled or there's no idle time. The fallback is ensured via
       running a delayed task that checks for progress.
    b. Avoids synchronously sweeping on allocation when we are further
       away from the next GC (via checking the allocation limit).
       Synchronous sweeping is enabled when getting closer to the actual
       heap limit to split up sweeping work and avoiding a huge pause at
       the start of marking.
    
    Change-Id: Ie516c67c9a2151d150b65f82229dba8aa754b43c
    Bug: chromium:333981063
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454401
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93612}

commit 0afe7176ac97b25ec1c9fbff534c6be815554ed4
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Apr 26 09:16:17 2024 +0200

    cppgc: Verifier: Print class name independent of runtime configuration
    
    We added a runtime configuration for the heap name to be able to build
    with names but disable exposing them in DevTools. This change broke
    the existing marking verifier support which should always resolve a
    name if somehow possible.
    
    Bug: chromium:337055566
    Change-Id: If0c536a587bfad9a9678f621b26af40f3dfd7bd5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490083
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93611}

commit 41141a7095134f4f3df8660b97c792e30b6df8f3
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Apr 26 12:46:02 2024 +0200

    [turboshaft] Simplify IF macro loop termination condition
    
    It seems that clang can sometimes fail to analyze the iteration count in
    the magic for loop used to implement IF/IF_NOT/ELSE. Move the EndIf
    helper into a third iteration in the loop, so that the loop termination
    condition becomes (even more) trivial to analyze.
    
    Bug: chromium:332329850, chromium:332838433
    Change-Id: I75d3526438a5d8aa8668fe6a5fc9c715bc6f5d4e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490090
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93610}

commit ca0c3652a56a81a867aa60092dff779f490c5060
Author: Simon Zünd <szuend@chromium.org>
Date:   Fri Apr 26 10:57:36 2024 +0000

    [profiler] Increase sample processor thread stack size to 256KB
    
    This CL fixes an issue where the sample processor thread failed to
    start due to insufficient stack size. Concretely pthread_create bailed
    with an "Invalid argument" errno.
    
    pthread_create checks for a couple of things when determining if the
    provided stack size is large enough. One of them is the size of the
    static TLS area which is determined by the dynamic loader:
    
    https://elixir.bootlin.com/glibc/latest/source/nptl/allocatestack.c#L351
    
    When V8 runs under the Centipede fuzzer + ASAN, the static TLS size
    alone is 96KB, so the currently 64KB are not enough. Most of it is
    probably due to Centipede: They intercept pthread_create and allocate
    per thread machinery:
    
    https://source.chromium.org/chromium/chromium/src/+/main:third_party/fuzztest/src/centipede/runner_interceptors.cc;l=56;drc=e6eb1a564fd608d3ee98a7010ee3120e863bef03
    
    Drive-by: CHECK if the sample process thread actually started,
    otherwise we'll silently pretend it's running and only later fail
    when we try to pthread_join a thread that never ran.
    
    Fixed: 335342168
    Change-Id: I57dc89a55e807d7e4471a2f63327a2d574439b18
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490091
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93609}

commit a4a0cb9ebe945cb31a8fdfd07e45368dfc5352dd
Author: Mikhail Khokhlov <khokhlov@google.com>
Date:   Thu Apr 25 16:46:03 2024 +0100

    Remove use_perfetto_client_library build flag
    
    This flag was introduced to provide a smooth transition from legacy
    tracing macros to Perfetto tracing SDK. Now the transition is complete,
    and the flag is unconditionally set to true on all platforms. It will
    be removed from Chromium soon.
    
    Bug: chromium:40100008, chromium:336718643
    Change-Id: I0df0a2a997e42adddd53e3cae1e7e55d3072d90b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490319
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93608}

commit 4a1d1b61c7a9026aad9ab7aeb3b2bc26e055c848
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri Apr 26 11:43:07 2024 +0200

    [arm64/macos] Don't align code targets
    
    This keeps the code denser for better icache use
    
    Change-Id: Id093a27c2971e986ff8328b3425ed1a85eb1a38c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490087
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93607}

commit ac95ce0bcc0f83f06ade482a074983802c2e684e
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Apr 26 11:24:47 2024 +0200

    [bazel] Move maglev files to the right file group
    
    Bug: 336711943
    Change-Id: I11edee8a4271da832d6924fdc7903c3453c13c01
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490085
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93606}

commit d18f25d271fe0122b9a21d45685d4cab715025c8
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Thu Apr 25 15:50:36 2024 +0200

    [heap] Implement generated write-barrier for sticky mark bits
    
    The barrier supports only the marking-barrier and the generational
    barrier (i.e. no shared barrier support yet). The current implementation
    is not yet optimized.
    
    Bug: 333906585
    Change-Id: I6007cec441a3430a66516b98c383649c16bd8f2e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471675
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93605}

commit f8f36d0a34547da9e2d72777932fbcdbaf41e7ff
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Apr 26 11:06:25 2024 +0200

    [deoptimizer][wasm] Support the most simple deopt case
    
    This CL adds a first version of deopt support for WebAssembly
    supporting the included test case. Many basic features are still
    missing like:
    - parameters that are passed on the stack and not as registers
    - literals
    - floating point registers
    - inlined deopt point (requires multiple output frames)
    - S128 values (SIMD)
    
    Bug: 42204618
    Change-Id: Idac1c3ed17fad9250ca6ed7958f870347e1fbc1d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467825
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93604}

commit fcbc4c6f88dd8a77089b07442547b7a315556066
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Apr 26 08:50:26 2024 +0000

    [sandbox] Forbid resetting external pointer fields
    
    Until now, we allowed resetting (lazily-initialized) external pointer
    fields, in which case we would set the handle to the null handle. This
    was mostly used as a small optimization when detaching array buffers.
    However, it required some additional complexity in the external pointer
    table (EPT), namely during compaction. With the introduction of managed
    external resources, this becomes even more of a problem as the following
    could happen (using the example of ArrayBuffers and their extension):
    
    1. We run EPT compaction and mark the entry of an ArrayBufferExtension
       for evacuation (i.e. create an evacuation entry for it)
    2. We detach the ArrayBuffer, setting the ArrayBuffer's external pointer
       to the null handle
    3. We sweep the EPT, but now skip the entry of the ArrayBufferExtension
    4. If the segment that the EPT entry was in is now completely empty, we
       will deallocate the segment
    5. When the ArrayBufferExtension is subsequently destroyed, it tries to
       zap it's EPT entry, which now no longer exists and we crash
    
    Dealing with this is somewhat challenging, and so instead of adding more
    complexity to the EPT, with this CL we now simply forbid resetting
    external pointer fields. As such, once an external pointer field is
    initialized and has a corresponding entry in the EPT, it must keep that
    entry until it is destroyed.
    
    Bug: chromium:327550517
    Change-Id: Ib74cd174d7aa2a97ba0ae14afd56a1ae9999c753
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5483266
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93603}

commit 6c32b2c95bc3052808efdf46d2066839479399de
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Apr 26 10:36:19 2024 +0200

    [torque] Make TAGGED_SIZE_8_BYTES respect -m32
    
    Bug: 336711943
    Change-Id: If3268a7f6704b507e7f4fb305071957fb2d1b333
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5488987
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93602}

commit 074b360f4bc17aa60a583112a7722cd59b18569b
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Apr 16 14:37:31 2024 +0800

    [loong64][mips64][codegen] Introduce MemoryRepresentation::kProtectedPointer
    
    Port commit a9083da44ed0a330f9020197683d569bde21c438
    
    Change-Id: Id99188c41db9d28a9c9a2f7fcf79579bbf45949e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5457172
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93601}

commit 79c7529e1e9a02011c04b5d11562640119157db2
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 26 09:29:52 2024 +0200

    [turboshaft] V<>ify Turboshaft (ObjectIs / Change)
    
    Operations processed:
    - ChangeOp
    - ObjectIs
    - ObjectIsNumericValue
    
    Bug: chromium:331100916
    Change-Id: Ice575015440f33de6676173511e47a0d15cbc266
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490084
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93600}

commit eda3c537474da1892628aaa7f2cf3207e01bbd8e
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Apr 25 11:39:34 2024 +0200

    [handles] Introduce DirectHandleVector<T>
    
    This CL introduces DirectHandleVector<T> for implementing vectors of
    direct handles. Such handles must normally be stack-allocated, so a
    special vector type is required that correctly registers its backing
    store as strong roots. The new type is then used for migrating the
    vector of handles that is used in shared heap deserialization.
    
    The CL also revises and simplifies the StrongRootAllocator.
    
    This is only relevant for builds with v8_enable_direct_handle=true.
    Otherwise, this vector type simply uses std::vector.
    
    Bug: v8:13270
    Change-Id: Ic0eb3be4548ccf0942cf38cd92cee06cded48b7d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458560
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93599}

commit 9ee056fdc173fc2594b051eee2cda58ea63d6844
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 26 09:00:39 2024 +0200

    [turboshaft] Maglev-to-ts: support Switch
    
    Bug: chomium:42204525
    Change-Id: Id46dce0d53ff5a64c82185a997a646c903a783f9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490082
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93598}

commit 32187efd517adc2b98032f9d873d77b27cca31da
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 25 16:05:40 2024 +0200

    [turboshaft] Maglev-to-ts: support Int32NegateWithOverflow
    
    Bug: chomium:42204525
    Change-Id: I30ee74c793115a24fe2c492dada13dbcf684cf23
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5488984
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93597}

commit c323f489d81794533270353c3abde4fbe8327083
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 25 15:27:52 2024 +0200

    [turboshaft] Maglev-to-ts: support BranchIf/TestUndetectable
    
    Bug: chomium:42204525
    Change-Id: I67667d1248740116f2e0fd50cba545e9770f699a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5488981
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93596}

commit 0d9fa5e01a5da9302cc23d3ca2e43b92a5470608
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Fri Apr 26 08:43:22 2024 +0200

    [infra][ios] Set use_blink=true
    
    The deployment target is set by upstream gn args [1] and should not be
    maintained twice to streamline maintenance.
    
    [1] https://source.chromium.org/chromium/chromium/src/+/main:build/config/ios/ios_sdk_overrides.gni;l=12;drc=112fce283b3477a5ef1f1dda7b24391c4f58dc84
    
    Bug: 336978086
    Change-Id: I64ad7a55e4402cb9c29c42cadd0404e40dec3eaf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5492420
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Alexander Schulze <alexschulze@chromium.org>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93595}

commit 418cbe40cbadb05324fb860351a268c9856d4623
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Thu Apr 25 23:33:35 2024 +0200

    [infra] Set iOS deployment target to 17.4
    
    Bug: 336978086
    Change-Id: Iea41c6da2fbbc2735d957e0f5d9de52b810b4355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5492419
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93594}

commit ecee329465cd06f374ad552dc358fdeb8dccb574
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Apr 25 21:02:22 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/dfdfe58..e797b8d
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/571c37f..9e1583d
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/d980d87..774f822
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/fb94001..4246ba0
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/5a37b51..d83fee1
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/9499307..9570c8c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749625396089155041
    
    Change-Id: I95e071ccdc09d15d98b9f920a14eea66d22f3afe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5493080
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93593}

commit 7c886a0f6b114aa37670adeef96223c4515b50ef
Author: JialuZhang-intel <jialu.zhang@intel.com>
Date:   Thu Apr 25 10:11:39 2024 +0800

    [maglev] print new constant node in maglev graph building log.
    
    Change-Id: I1ac67043b08f3c2b6cc4c0de99eb9d35613ce6db
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481810
    Commit-Queue: Jialu Zhang <jialu.zhang@intel.com>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93592}

commit 2af85a7ebed440bae5691cfc2be160e80595fa88
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Apr 25 23:14:23 2024 +0000

    [iterator-helpers] throw when next() is null
    
    In this CL, the status of iterator is tracked in this value instead of
    next. So the next() will be unmodified and the code throws if it is
    null.
    
    Bug: 42203505
    Fixed: 336839115
    Change-Id: I0e84349e890432e9f673371c24c574603145e36c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5491439
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93591}

commit 1f45cacc0ab05b0941c4605ef33769dc6006fa1f
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu Apr 25 11:17:07 2024 -0700

    [typedarray] Make [[Set]] on OOB ABs a no-op in TA helpers
    
    The StoreJSAny helper macro currently takes a label to jump to when the
    underlying buffer is detached/out-of-bounds. This macro is split into
    two instead:
    
    - StoreJSAnyInBounds, which dchecks that the store is not OOB
    - StoreJSAny, which does nothing when storing into an OOB buffer
    
    Fixed: 336841825
    Change-Id: I9d4d26e5881fbdef1259523f7cfe1a020b1753f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5486616
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93590}

commit 357aceef28e20c25f725b6b7f5d13ffb03a97de1
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Apr 24 11:38:21 2024 -0400

    PPC[liftof]: remove GetHalfStackSlot
    
    GetHalfStackSlot is not used on ppc64.
    
    Change-Id: I2225e5c4881b72b4180cbe559825af544145ce81
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5482868
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93589}

commit 59b9445d48948b79ed27d7e24e2db05e407d8f7f
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Apr 25 12:26:27 2024 -0400

    S390[turboshaft]: Handle more ops under ProduceWord32Result
    
    Change-Id: If9ad33c383da8427748edf2548542be67d19ca42
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490183
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93588}

commit 9a6801e4ce58f3b7131bde152aec72c9244611ca
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Apr 25 09:01:38 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/f7bf3de..dfdfe58
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/4821643..d980d87
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/3d170cb..fb94001
    
    Rolling third_party/siso: git_revision:366e623c64429778827e021672a260553c7bd068..git_revision:70d9e16bcc9dff0264905018f5a5652b37ed0e10
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/c05ed83..9499307
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749670688197644801
    
    Change-Id: I1de8ff89c2cf7ede28f25211bff0a8e0e9cd3b39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5490479
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93587}

commit 7c732e6b4cb696674043041b682585f011c2f6cb
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Apr 25 16:40:14 2024 +0200

    [handles] Change condition of static_assert
    
    The condition failed in google3.
    
    Bug: 336711943
    
    Change-Id: Ic51f7c8c39a76f4aa1ce2a490035fde2b198f3b6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5489779
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93586}

commit 6f3348ca999d4be0c6b3bfa89e4e0e0de40bf474
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Apr 25 16:19:54 2024 +0200

    [ia32] Add missing 'typename' in instruction selector
    
    The missing 'typename' caused compilation issues in google3.
    
    Bug: 336711943
    Change-Id: I7273b0c468efe3c2c4e3887bbd89d442e3e31dc5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5489043
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93585}

commit f7cf17741d1782c5036b856d52557f86e6afbf04
Author: pthier <pthier@chromium.org>
Date:   Thu Apr 25 15:46:50 2024 +0200

    [cleanup] Remove unused bailout reason
    
    Maglev OSR is fully implemented, so the bailout reason kMaglevOsrTodo
    is not used anymore.
    
    Bug: v8:7700
    Change-Id: I3d112f5148388de2cde70b5ef53703d084e192fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487940
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93584}

commit 45b2cc3fa78df088db4362b92a61101eea333f35
Author: Paolo Severini <paolosev@microsoft.com>
Date:   Wed Apr 24 17:48:43 2024 +0200

    [wasm][memory64] Fix bounds check for memory64 guard region on MacOS
    
    On MacOS invalid memory accesses can cause both a SIGBUS or a SIGSEGV.
    
    Bug: 42204673
    Change-Id: I66c67239f0d255e2da539c5b17da754f3182d4d6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5468146
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Paolo Severini <paolosev@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93583}

commit 5acaced0391f6b619833fda3752abbf96adf232e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Apr 25 15:28:05 2024 +0200

    [maglev] Improve printing of inlined allocations
    
    We print the object map instead of its size and we print (elided)
    instead of its location, when the object was elided by the escape
    analysis.
    
    Bug: v8:7700
    Change-Id: I371f8f9901a834690511d7db2d4baa173bd84075
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5489040
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93582}

commit 799df19ddb12d9108b498a05a0d972e05e384af1
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Apr 25 14:20:18 2024 +0200

    [test] Skip flaky test
    
    This skips a frequently hanging test. We skip rather than unsetting the
    v8_flag here in the code to avoid running the test redundantly.
    
    No-Try: true
    Bug: 42204548
    Change-Id: Id17c4adf24ea99fbcb6b4b2d1eb91d4d4edc6311
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487529
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93581}

commit 610383620ba5c73a8611682018f257c56d447fc3
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Apr 25 14:34:27 2024 +0200

    [maglev][osr] Fix context slot analysis confusion
    
    When compiling OSR code an inlinee's context can alias with the current
    context at the OSR entrypoint. The reason is that the closure
    creation happens outside of the part of the function that is being
    compiled. Therefore, we see the same context twice -- once as the
    InitialValue of the context register and once as a constant originating
    from the inlinees context slot. For now we make the analysis a bit more
    conservative.
    
    Fixed: chromium:41494766
    Change-Id: I9a410fc72775df9ee12afa1676047374d9640bd1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481577
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93580}

commit 5dd6ec67b12cc14774b417f063bdf21687c9348a
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 25 12:07:38 2024 +0200

    [turboshaft] Maglev-to-ts: support generic calls
    
    Drive-by: support UpdateJSArrayLength.
    
    Bug: chomium:42204525
    Change-Id: Iea9595fea5ba0f3ab10159dbbaa16f147415265f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487524
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93579}

commit 42b4b590dc15f8da66937fa65786ee4179f205de
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Apr 25 12:40:49 2024 +0000

    Revert "Update fuzztest (trusted)"
    
    This reverts commit 3558c19d2f08e55e585faaeae1041918390975e1.
    
    Reason for revert:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20perfetto%20-%20builder/31299/overview
    
    Need to clean up some protobuf code in V8's BUILD.gn file first.
    
    Original change's description:
    > Update fuzztest (trusted)
    >
    > Patch 1: Auto-generated change from auto-roller with latest fuzztest.
    > Patch 2 and later: The following fixes:
    > - Fuzztest now depends on protobuf. This requires the latest
    > protobuf implementation and configs that also Chrome uses. We now
    > exchange the legacy github version, V8 pointed to, to the one used
    > within Chrome, which is also used by V8 anyways when being embedded
    > in Chrome.
    > - We switch off enable_js_protobuf from https://crrev.com/c/2464426
    > to avoid other unnecessary js protobuf dependencies like the
    > closure compiler.
    >
    > Rolling third_party/fuzztest: https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+log/ae21d24..0162929
    >
    > Rearrange fuzzing engine dependencies (Adrian Taylor)
    > https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/0162929
    >
    > Fuzztest config public -> private. (Adrian Taylor)
    > https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/b75e0e8
    >
    > Roll fuzztest (Adrian Taylor)
    > https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/4cd4a81
    >
    > Rolling third_party/fuzztest/src: https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/65354bf..3458410
    >
    > #Centipede Extend `AsByteSpan` to take any container type + use it where possible (Sergey Shevchenko)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/3458410
    >
    > Properly convert proto to text (FuzzTest Team)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/ed6f817
    >
    > Use ParseTextProtoOrDie instead of ParseTestProto in suggested reproducer tests (FuzzTest Team)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/6a370ae
    >
    > Expose API to parse known absl flags. (FuzzTest Team)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/d938942
    >
    > #Centipede Use new OSS functions to get test temp & src dirs (Sergey Shevchenko)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/d739fa5
    >
    > Update unescaping logic in `ReadDictionaryFromFile()` to support 2-digit hex codes. (Ilaï Deutel)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/1635d42
    >
    > Avoid OOM during input prasing by limiting the object size reservation. (Xinhao Yuan)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/a40caf4
    >
    > #Centipede Print objdump command stderr when failed. (Xinhao Yuan)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/9957964
    >
    > ...
    >
    > Roll created at https://cr-buildbucket.appspot.com/build/8749712217554748001
    >
    > Bug: 336577743
    > Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    > Change-Id: Icc5ceef23e1cfe33fbd9ca4cde1dac39e8e1c232
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487258
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93577}
    
    Bug: 336577743
    Change-Id: I6011d772837a64051e4977376ed723c10a287edc
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487531
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93578}

commit 3558c19d2f08e55e585faaeae1041918390975e1
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Apr 25 13:52:29 2024 +0200

    Update fuzztest (trusted)
    
    Patch 1: Auto-generated change from auto-roller with latest fuzztest.
    Patch 2 and later: The following fixes:
    - Fuzztest now depends on protobuf. This requires the latest
    protobuf implementation and configs that also Chrome uses. We now
    exchange the legacy github version, V8 pointed to, to the one used
    within Chrome, which is also used by V8 anyways when being embedded
    in Chrome.
    - We switch off enable_js_protobuf from https://crrev.com/c/2464426
    to avoid other unnecessary js protobuf dependencies like the
    closure compiler.
    
    Rolling third_party/fuzztest: https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+log/ae21d24..0162929
    
    Rearrange fuzzing engine dependencies (Adrian Taylor)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/0162929
    
    Fuzztest config public -> private. (Adrian Taylor)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/b75e0e8
    
    Roll fuzztest (Adrian Taylor)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/4cd4a81
    
    Rolling third_party/fuzztest/src: https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/65354bf..3458410
    
    #Centipede Extend `AsByteSpan` to take any container type + use it where possible (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/3458410
    
    Properly convert proto to text (FuzzTest Team)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/ed6f817
    
    Use ParseTextProtoOrDie instead of ParseTestProto in suggested reproducer tests (FuzzTest Team)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/6a370ae
    
    Expose API to parse known absl flags. (FuzzTest Team)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/d938942
    
    #Centipede Use new OSS functions to get test temp & src dirs (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/d739fa5
    
    Update unescaping logic in `ReadDictionaryFromFile()` to support 2-digit hex codes. (Ilaï Deutel)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/1635d42
    
    Avoid OOM during input prasing by limiting the object size reservation. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/a40caf4
    
    #Centipede Print objdump command stderr when failed. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/9957964
    
    ...
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749712217554748001
    
    Bug: 336577743
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Change-Id: Icc5ceef23e1cfe33fbd9ca4cde1dac39e8e1c232
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487258
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93577}

commit 910d84a7f3f5cb75e9ff287ae2ae228d999c6753
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Apr 25 11:04:51 2024 +0000

    [sandbox] Introduce Sandbox.getFieldOffsetOf API
    
    This API exposes a pre-defined list of field offsets (essentially
    the FooObject::kBarOffset constants) to JavaScript via the memory
    corruption API. This can be useful for example for regression tests so
    that these do not need to hardcode field offsets (which may change).
    Furthermore, when a field is deleted, any tests using it will
    automatically fail (as the API will then throw an exception) and can
    then be modified or deleted.
    
    For now, the list of supported fields is manually maintained. In the
    future, it would be great to somehow automatically generate that list
    based on the C++ field offsets.
    
    Bug: chromium:42202821
    Change-Id: I8000fa61dcc3bcafd3c48d7f4429bd5bcc4631e0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487939
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93576}

commit 872092c4475cbb30fb73b3de9a2354952c959b81
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 25 12:54:01 2024 +0200

    [turboshaft] Maglev-to-ts: support CallWithArrayLike/CallWithSpread
    
    Bug: chomium:42204525
    Change-Id: Ibdd8d3e76344d91bb462eec4a2a0e04144e44ea9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481575
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93575}

commit adb027225adfcaeed483a3883ed1b4a1a13f78f1
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Apr 25 12:31:33 2024 +0200

    [maglev] Fix forwarding inline arguments that flows to toplevel
    
    2 errors in the previous CL:
    - Checking for is_inline() is not enough to check if the arguments
    object were built in inlined function.
    - We cannot reconstruct the arguments object elements from
    the inlined_arguments_ array, we should read its captured
    elements offset, since it could have been created by a different
    function.
    
    This CL adds tags to CapturedObject to identify its provenance.
    It also adds support to RestParameters.
    
    Fixed: 336833467
    Bug: 326091155
    Change-Id: I48763a817428952d7178bd1ec3bde76af5f1be82
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487519
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93574}

commit 5e3f70eb5b9d8f6eb454e11301090ca59963da8f
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Apr 25 11:55:39 2024 +0200

    [wasm] Fix Liftoff slot count for exception handling
    
    The frame slot count reported by Liftoff is not always exact: it
    includes the registers pushed on top of the stack in out-of-line code.
    So if we are currently in a regular (not out-of-line) call, then the
    actual slot count is smaller.
    
    This is good enough for the purposes of the GC, which will simply
    ignore the upper slots that are not marked as references.
    
    However, the unwinder uses the same value to compute the stack pointer
    from the frame pointer, and this one should be exact. Otherwise the SP
    in the landing pad is not going to match the actual frame size.
    
    Therefore register the spill count for OOL code in the WasmCode and
    use it to compute the exact frame size in the unwinder. This assumes
    that we don't handle exceptions in out-of-line code.
    
    R=ahaas@chromium.org
    
    Bug: 336214779
    Change-Id: Ib793c02c5958f9e0da547da48aeec2bf86296273
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5484026
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93573}

commit f7f5a267514196a65e03d3d5eb73ffcd18ec1631
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Apr 25 11:13:27 2024 +0200

    [maglev] Partially inline Array constructor
    
    Inline calls to the array constructor like:
    `new Array()` or `new Array(size)`
    
    This does not consider argument count > 1 and calls to the
    constructor without the keyword `new`.
    
    Bug: v8:7700
    Change-Id: I30aead1032f88a516823e2d6ca39eee8e0a72290
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481578
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93572}

commit 6bdfd71f432c3cfda84b0a0df7aa5d652783677e
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Thu Apr 25 10:38:53 2024 +0200

    [infra] Upgrade mac builders to MacOS 14
    
    Bug: 336961698
    Change-Id: Ieb14876f5ea82dde55308c378b4ae40ec7df8c28
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487856
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93571}

commit 9e5d42afded482a18b9284f1228831d1269f2f1c
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Apr 25 10:39:07 2024 +0200

    Reland "[handles] Migrate handles in the string table to direct"
    
    This is a reland of commit 24094ac73e9fcc5a118c5b54264d4d0526186d8a
    
    Original change's description:
    > [handles] Migrate handles in the string table to direct
    >
    > This CL migrates most handles in the string table that is used for
    > string internalization to direct. (This is only relevant for builds
    > with v8_enable_direct_handle=true.)
    >
    > Bug: v8:13270
    > Change-Id: Idbb5edaef5988f71c9716d248a8d163f39929948
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454407
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93400}
    
    Bug: v8:13270
    Change-Id: I4fac78f77af0c0440056cb380b082be7b1bc8bbf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5476489
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93570}

commit b0ff63bd5b1f113f78b37949a162d549e1902060
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Apr 25 10:33:24 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - AssertNotNull
    - IsNull
    - AnyConvertExtern
    - ExternConvertAny
    
    Bug: 331100916
    Change-Id: I6ff9219d04d3a93a71fdd197e6f8b51b4f6711f4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5487861
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93569}

commit 70bcf674beeae3a04172356a41d6b484595791a4
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Apr 24 15:42:20 2024 +0200

    [deoptimizer] Remove unused context member
    
    Bug: 42204618
    Change-Id: I3edd22485c4ea5aece2e65ec8555fe97ac8d7cf3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481799
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93568}

commit a5c4eb9251b4a8f3422bebfafb432900ae03cca5
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Apr 24 21:32:05 2024 -0700

    Update ICU (trusted)
    
    Rolling third_party/icu: https://chromium.googlesource.com/chromium/deps/icu/+log/d94ab13..364118a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749714105505867569
    
    Change-Id: I80d99e65dc885bc28ebcd14ebb8b84e10f80c32e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5486128
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93567}

commit 3a8e75bd641db62476f340032399d21b2387b885
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed Apr 24 14:22:15 2024 -0700

    Unmark failing test fixed by ICU roll
    
    Fixed: 42213018
    Change-Id: Ieb8ac653ed1098e9da60483e0eb8cedaf67bb9ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5484498
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93566}

commit 53b297774b198da1737db0d213860332dfa42f34
Author: Adam Klein <adamk@chromium.org>
Date:   Tue Apr 16 15:00:20 2024 -0700

    Reland "[api] Advance deprecation of API not called by Chromium"
    
    This is a reland of commit 73c7c9f81e5eff4c05593e024566aaca6a934b19
    
    Since the first landing, the caller of the deprecated MicrotasksScope
    constructor in the cast codebase was removed in
    https://crrev.com/c/5472360.
    
    Original change's description:
    > [api] Advance deprecation of API not called by Chromium
    >
    > Generated by tools/release/list_deprecated.py
    >
    > include/v8-callbacks.h:156                v11.7  2023-07-11  9cafe595  Use kGCTypeMinorMarkSweep instead of kGCTypeMinorMarkCompact.
    > include/v8-isolate.h:1379                 v11.7  2023-07-06  b328e6fd  Use MemoryPressureNotification() to influence the GC schedule.
    > include/v8-microtask-queue.h:123          v11.7  2023-07-06  b328e6fd  May be incorrect if context was created with non-default microtask queue
    > include/v8-traced-handle.h:138            v11.7  2023-07-06  b328e6fd  Use Get to convert to Local instead
    > include/v8-traced-handle.h:146            v11.7  2023-07-06  b328e6fd  Use Get to convert to Local instead
    > include/v8-util.h:582                     v11.7  2023-07-06  b328e6fd  Use std::vector<Global<V>>.
    >
    > Change-Id: I4249b010515e5b542a0bef5b185b0d1a515ba4b1
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5460440
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Adam Klein <adamk@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93448}
    
    Change-Id: Ib4ef47800a3daec99ea27116ddfe5a7b69fe77b6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472807
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93565}

commit f9100760571c62ae6551934830076323e5141e28
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Apr 24 09:01:24 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/cd430bd..f7bf3de
    
    Rolling buildtools/linux64: git_revision:155c53952ec2dc324b0438ce5b9bd4a286577d25..git_revision:f284b6b47039a2d7edfcbfc51f52664f82b5a789
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/ca84904..2c1ad97
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/277a384..c05ed83
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749761291499254161
    
    Change-Id: Ic785080ec1953e8e9be6a25f5abc2c6c3bbecc24
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5482869
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93564}

commit eb56742fb4e821fac399492a4fc6fb26849390db
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Apr 24 16:40:12 2024 +0200

    [maglev] Support arguments object forwarding
    
    ... and avoid the arguments object allocation.
    
    Bug: 326091155
    Change-Id: I05ec73ed0a75f202108f5aadf136ff10afb8d1cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5465510
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93563}

commit 61fe1041161c3c0e1bf70ada5735154eba72f24c
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Apr 23 17:24:59 2024 -0700

    Roll third_party/icu/ a622de35a..d94ab131b (13 commits)
    
    https://chromium.googlesource.com/chromium/deps/icu.git/+log/a622de35ac31..d94ab131bc8f
    
    $ git log a622de35a..d94ab131b --date=short --no-merges --format='%ad %ae %s'
    2024-03-19 fmil [fuchsia] Ignore errors on newline-without-eof
    2024-03-26 dayeung Fix License by removing symlink.
    2024-03-12 dayeung [ICU 74-2] Update main from 73-1 to 74-2
    2024-03-11 tiszka Add tiszka@ to OWNERS
    2024-03-06 fmil [fuchsia] Add slots to add or remove compile configs
    2023-12-06 zcbenz Symbol name on Windows depends on CPU arch
    2024-03-05 dayeung Update TZ to 2024a
    2024-02-23 dayeung Fix ICU update.sh script and clean up some things in the readme
    2024-02-20 dayeung Patch a buffer write error in uloc_tag.cpp.
    2024-02-15 syg Fix null termination in revert_realpath.patch
    2024-01-25 mkember [fxbug.dev] Migrate bug numbers
    2023-11-07 zcbenz Fix link error when cross-compiling for Windows on Linux
    2023-11-02 ftang Add dayeung@ and syg@ to OWNERS file
    
    Created with:
      roll-dep third_party/icu
    
    Manual test expectation updates:
     - intl/general/case-mapping Greek uppercase mapping (ICU-22433)
    
    Fixed: 42204241
    Fixed: 333834015
    Change-Id: Ie15ff37fbe158ad6e1e65d14b48d17a04bfc2b96
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5480627
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93562}

commit d02fe6bc873060954c43dd1e9edfcb10c1abe065
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Apr 23 20:31:32 2024 +0200

    [wasm-stringref] Fix return type of StringViewWtf8Encode builtin
    
    The spec wants two i32 values, Turboshaft expects two i32 values,
    the builtin should return two i32 values, CSA can be taught to
    support two i32 values.
    
    Fixed: 336007398
    Change-Id: I29c1821ec6e54fc55df794f7122a549633575dc4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5478967
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93561}

commit 588514b29fb2781b040bd46ff5df61f664196bdb
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Apr 23 15:03:31 2024 +0200

    Reland^2 "[handles] Migrate most handles in string builders to direct"
    
    This is a reland of commit 440a698edf288b0cac2d290d31667715dcab6573
    
    Original change's description:
    > Reland "[handles] Migrate most handles in string builders to direct"
    >
    > This is a reland of commit 2cb6341677cfa4333e932195d07e4aefebcaaa47
    >
    > Original change's description:
    > > [handles] Migrate most handles in string builders to direct
    > >
    > > This CL migrates most Handle<String> in string builders and related
    > > classes to DirectHandle<String>. (This is only relevant for builds
    > > with v8_enable_direct_handle=true.) In particular, the classes that
    > > are affected are:
    > >
    > > - FixedArrayBuilder
    > > - ReplacementStringBuilder
    > > - IncrementalStringBuilder
    > > - CircularStructureMessageBuilder
    > >
    > > In addition, the CL:
    > >
    > > - Introduces the helper function indirect_handle, which can be used
    > >   to explicitly convert a DirectHandle<T> to a Handle<T> if necessary
    > >   (similarly for "maybe" handles).
    > > - Updates the `RETURN_ON_EXCEPTION_VALUE` family of macros to allow
    > >   for direct, as well as indirect handles.
    > > - Implements DirectHandle<T>::PatchValue, which is equivalent to the
    > >   assignment of handles.
    > >
    > > Bug: v8:13270
    > > Change-Id: I88d92645af2a620c9c5216f9aa723bd98d8caa90
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445083
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93389}
    >
    > Bug: v8:13270
    > Change-Id: I1512f562d9a6f871ae17beb008084de1a5b87383
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5476488
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93537}
    
    Bug: v8:13270
    Change-Id: I81edafc9d4223713bc76e5a81ad9670b68d728f6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481650
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93560}

commit 798d1e4133279bc35059e6ccfee48193bf47e2f5
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Apr 24 14:16:59 2024 +0200

    [turboshaft] Maglev-to-ts: support inner functions
    
    Bug: chomium:42204525
    Change-Id: I8a9adbe7bb7e54c4d3a0ddb859e6d309c33fcb2c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481649
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93559}

commit 5741dde0a0e2a240b912b3a510c77f0227327f7b
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Apr 24 14:07:19 2024 +0200

    [turboshaft] Maglev-to-ts: fix bug in Number equality
    
    The "value" of HeapNumbers and Oddballs is at the same offset, so it's
    tempting to handle them the same way, but we need
    "undefined==undefined", which doesn't happen when looking at the
    "value" of undefined, since it's NaN.
    
    Bug: chomium:42204525
    Change-Id: I796462db49c1cabebb50e70298ccf2319aaa3533
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481729
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93558}

commit 6ca37e043f45b51861990408d64b139b173d8827
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Apr 24 14:00:17 2024 +0200

    [turboshaft] Maglev-to-ts: support const-tracking let
    
    Bug: chomium:42204525
    Change-Id: I7f27744085f023dcfe96b1efdde97a0a21372c4c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481788
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93557}

commit c8285aebcff4a272b55067f8e29694f4ab9dcb2c
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Apr 24 11:58:04 2024 +0000

    [sandbox] Add mjsunit tests for the memory corruption API
    
    This test verifies the basic behavior of the memory corruption API. It
    requires a build with `v8_enable_memory_corruption_api = true`.
    
    Drive-By: Move sandbox regression tests into mjsunit/sandbox/regress.
    
    Bug: chromium:42202821
    Change-Id: I530e6a3b4b3b52f6683645b61f42901a2fc02169
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5473607
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93556}

commit 3e91015f4ad48216b9c7f130c84cba4d981b780b
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed Apr 24 12:31:50 2024 +0200

    [wasm] Add test for call_ref inlining feedback
    
    ...as a message test that checks the trace output.
    Turboshaft-only, since the trace output is slightly different for
    TurboFan and the latter is on its way out already.
    This also increases coverage for the megamorphic inlining case.
    
    Bug: 41480394
    
    Change-Id: I97d7fc673efb77ffbc0e2023cf6917bcc648414e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5473608
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93555}

commit e2a203b59fad51ff65acd2aeafda3a573d46dc71
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Apr 24 13:00:39 2024 +0200

    [maglev] Fix bug else-if condition in phi reprentation selector
    
    It also changes the if-chain to a switch statement, since it is more explicit.
    
    Fixed: 336681950
    Change-Id: I94ecec0cf9f8d06340b3690c38bfb19f41aa50da
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481792
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93554}

commit 4e42ca6e94a3d4da5013dabec165fa7197ebf812
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Apr 23 12:05:48 2024 +0000

    [sandbox] Fix stack out-of-bounds read in ArrayPrototypePush
    
    If the length of a JSArray is corrupted, ArrayPrototypePush may run into
    a wild-read on the stack. While this is not technically a sandbox
    violation (as it only reads out-of-bounds), it's probably still worth
    fixing since that is relatively easy. Here is what happens:
    
    * First, in JavaScript we corrupt the length of a JSArray to make it
      very large, then call .push() on it with no arguments.
    * In the ArrayPrototypePush CSA builtin, we check if the JSArray is
      "fast" and if so go into BuildAppendJSArray, which implements the
      simple case of just appending array elements without transitions or
      other special cases.
    * In BuildAppendJSArray, we try to grow the array's backing store.
      However, that now fails as the JSArray's length no longer matches
      the length of its backing FixedArray, causing BuildAppendJSArray to
      believe that the array needs to be grows by a lot, which is
      unsupported on the fast path. BuildAppendJSArray therefore bails out.
    * Back in ArrayPrototypePush, we now assume that there must be at least
      one argument (because BuildAppendJSArray failed). We then increment
      the argument counter by one and try to process the first argument.
      This already reads a value out of bounds. Then later on, we seem to
      run into a sort of wild-read with a loop such as
      `for (int i = current_pos; i != num_args; i++)` where current_pos = 1
      and num_args = 0. This is where we crash in the regression test.
    
    The fix now simply adds a check for the zero-argument case into
    BuildAppendJSArray to handle that case correctly.
    
    Bug: chromium:40926051
    Change-Id: I7ff740857800454ad869385b676361d54fb59a2b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5473634
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93553}

commit 9d4ca2a644156469f426f63c32cdd0c193de4691
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Apr 24 12:27:08 2024 +0200

    [wasm][jspi] Add missing return statement
    
    R=ahaas@chromium.org
    
    Bug: 336399251
    Change-Id: Iedfdc2c9355207b30d4b745e4b7cdfd899ec7341
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481789
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93552}

commit 8eb7e78c63820cd4ad8d291a6641e456a60e8f99
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed Apr 24 11:56:54 2024 +0200

    [wasm] Update trace output in test for Turboshaft
    
    instead of expecting a failure.
    
    Bug: 42204049
    Change-Id: I35a5435e63e01eab62ed2d0e26d6f771a442a9a2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5477227
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93551}

commit f1742a16177b314cb167bfe965ee8afa014d3964
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Apr 24 12:20:17 2024 +0200

    [gm.py] Avoid creating empty lines in args.gn
    
    Even if {BUILD_DISTRIBUTION_LINE} is empty.
    
    No-Try: true
    Change-Id: I003eb9fcb36f6364ec53c76116c80fbde6058c28
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481790
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93550}

commit c116e2cf77b47acf05f9f7500e2d07ed5133b543
Author: James M Snell <jasnell@gmail.com>
Date:   Mon Apr 22 07:46:02 2024 -0700

    Implement v8::Exception::CaptureStackTrace(...)
    
    Provides the ability to capture the stack property on custom Error
    types. This is useful, for instance, for things like the Web Platform
    DOMException API instances that are implemented as host objects in C++,
    etc. Equivalent to the JavaScript `Error.captureStackTrace(obj)`.
    
    Change-Id: I65f67050b42a67aee810e638a3630de0949baa26
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5444318
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93549}

commit 693e966deaa6cc70dfeba22233169978eb7b52a7
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Apr 23 20:34:00 2024 +0200

    [wasm-fuzzer-gen-test] Use type codes where appropriate
    
    We need to distinguish between printing "kWasmAnyRef" e.g. in
    type definitions, and "kAnyRefCode" inside function bodies.
    
    No-Try: true
    Change-Id: Ifdfe9d4e16a60567729bd0eafe1b589df9de17f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5478987
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93548}

commit 581553f4b99f83b8fce5c1e5c243859a9b50afc9
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Apr 23 17:07:57 2024 +0200

    [wasm] Update spec tests
    
    Change-Id: I611a86b50b499293faa3ca6aa9572e0b6d5631d4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5476493
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93547}

commit b7cef48436ead808fbc6888d52efcfcfee70cd98
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Apr 24 08:33:01 2024 +0200

    [build] Make gen-static-roots more robust to bad gn configs
    
    Bug: v8:14538
    Change-Id: Ic8d60eaec77566383094fe54761d6a381d8462ca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481647
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93546}

commit 74ce1c264d59519a6c4d0ba2e8d1d626ef42b115
Author: Yolanda Chen <yolanda.chen@intel.com>
Date:   Wed Apr 24 10:09:24 2024 +0800

    [wasm][revec] Fix Load/Store reduction when stores are reversed in seed
    
    Current reducing Load/Store will always take the address from the first
    node in PackNode to generate the revectorized node. But if the nodes
    are in reversed order in PackNode, it's possible that ChangeOp of the
    first load's index is not emitted yet and cause compile time crash.
    
    This patch will fix this issue by taking the index from the current
    visiting node and only getting the offset from the first node.
    
    Bug: v8:12716
    Change-Id: I8ca3715b668d1bbcfc6fc2be32f3685c201c289a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5480037
    Commit-Queue: Yolanda Chen <yolanda.chen@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93545}

commit dded833828e2190019df3c17ad48449bca10d79c
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Wed Apr 24 07:18:49 2024 +0200

    [builtins-pgo] Add --quiet flag to download script
    
    Bug: 336413783
    Change-Id: Ieeb5e003f6d505d383897ca38430a382aa6fb000
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5481567
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Alexander Schulze <alexschulze@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93544}

commit 6c0ea1dded2bfdaddd33954a1e755a879612875b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Apr 23 21:02:13 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/c7d168a..cd430bd
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/a64dd87..ca84904
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/4066874..4821643
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/f8d1ff2..3d170cb
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/bca0c9f..277a384
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749806577919439233
    
    Change-Id: Ib96246214a4087555ce89e3f2d9f0ee46575831a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5480009
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93543}

commit 304585c97b82e72387f2cc8702c0f896f925e9ad
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Apr 23 14:32:06 2024 -0700

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/830b17a3..a6405659
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749834544320212305
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: Icb2c22ab6f2a955c2a6e41b86fcbe711fade0674
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5480007
    Reviewed-by: Frank Tang <ftang@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93542}

commit dcde1a4cdf32e11da6aa503560643b301bff69fb
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Apr 23 15:24:56 2024 -0400

    PPC/s390: [wasm][liftoff] Move frame constants to frame constants header
    
    Port 3fba7f27039d70f35a598cdb8079c7a6ffabc9c3
    
    Original Commit Message:
    
        This allows access to these constants outside of lifotff, e.g. by the
        deoptimizer who also needs to "understand" the liftoff frame layout.
    
    R=mliedtke@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I5a1b0ab58bc06385c53654037893c358c5c9a8e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5477829
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93541}

commit 3fba7f27039d70f35a598cdb8079c7a6ffabc9c3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Apr 23 19:38:03 2024 +0200

    [wasm][liftoff] Move frame constants to frame constants header
    
    This allows access to these constants outside of lifotff, e.g. by the
    deoptimizer who also needs to "understand" the liftoff frame layout.
    
    Bug: 42204618
    Change-Id: If9ee5fc89d41046e9d97e4f67569a8ff465dfbbb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5473606
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93540}

commit c7c7264e92f2b91bb264af0090d6f4380b286ca5
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 23 12:29:57 2024 +0200

    [turboshaft] Maglev-to-ts: support InlinedExtraArguments frame states
    
    Bug: chomium:42204525
    Change-Id: If743cc19230f4a346982af4a9e8d8a0c567a7213
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472112
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93539}

commit 3d9ee10d395b33aeda62bec6b595d9eead79559d
Author: Francis McCabe <fgm@chromium.org>
Date:   Tue Apr 23 18:12:36 2024 +0000

    Revert "Reland "[handles] Migrate most handles in string builders to direct""
    
    This reverts commit 440a698edf288b0cac2d290d31667715dcab6573.
    
    Reason for revert: appears to break https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20PKU/3843/overview
    
    Original change's description:
    > Reland "[handles] Migrate most handles in string builders to direct"
    >
    > This is a reland of commit 2cb6341677cfa4333e932195d07e4aefebcaaa47
    >
    > Original change's description:
    > > [handles] Migrate most handles in string builders to direct
    > >
    > > This CL migrates most Handle<String> in string builders and related
    > > classes to DirectHandle<String>. (This is only relevant for builds
    > > with v8_enable_direct_handle=true.) In particular, the classes that
    > > are affected are:
    > >
    > > - FixedArrayBuilder
    > > - ReplacementStringBuilder
    > > - IncrementalStringBuilder
    > > - CircularStructureMessageBuilder
    > >
    > > In addition, the CL:
    > >
    > > - Introduces the helper function indirect_handle, which can be used
    > >   to explicitly convert a DirectHandle<T> to a Handle<T> if necessary
    > >   (similarly for "maybe" handles).
    > > - Updates the `RETURN_ON_EXCEPTION_VALUE` family of macros to allow
    > >   for direct, as well as indirect handles.
    > > - Implements DirectHandle<T>::PatchValue, which is equivalent to the
    > >   assignment of handles.
    > >
    > > Bug: v8:13270
    > > Change-Id: I88d92645af2a620c9c5216f9aa723bd98d8caa90
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445083
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93389}
    >
    > Bug: v8:13270
    > Change-Id: I1512f562d9a6f871ae17beb008084de1a5b87383
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5476488
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93537}
    
    Bug: v8:13270
    Change-Id: Id065de1e6a3d26324d13ff094c50582940cec6ad
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5478688
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Francis McCabe <fgm@chromium.org>
    Auto-Submit: Francis McCabe <fgm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93538}

commit 440a698edf288b0cac2d290d31667715dcab6573
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Apr 23 15:03:31 2024 +0200

    Reland "[handles] Migrate most handles in string builders to direct"
    
    This is a reland of commit 2cb6341677cfa4333e932195d07e4aefebcaaa47
    
    Original change's description:
    > [handles] Migrate most handles in string builders to direct
    >
    > This CL migrates most Handle<String> in string builders and related
    > classes to DirectHandle<String>. (This is only relevant for builds
    > with v8_enable_direct_handle=true.) In particular, the classes that
    > are affected are:
    >
    > - FixedArrayBuilder
    > - ReplacementStringBuilder
    > - IncrementalStringBuilder
    > - CircularStructureMessageBuilder
    >
    > In addition, the CL:
    >
    > - Introduces the helper function indirect_handle, which can be used
    >   to explicitly convert a DirectHandle<T> to a Handle<T> if necessary
    >   (similarly for "maybe" handles).
    > - Updates the `RETURN_ON_EXCEPTION_VALUE` family of macros to allow
    >   for direct, as well as indirect handles.
    > - Implements DirectHandle<T>::PatchValue, which is equivalent to the
    >   assignment of handles.
    >
    > Bug: v8:13270
    > Change-Id: I88d92645af2a620c9c5216f9aa723bd98d8caa90
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445083
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93389}
    
    Bug: v8:13270
    Change-Id: I1512f562d9a6f871ae17beb008084de1a5b87383
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5476488
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93537}

commit f22e8f9be1356cc61e53c33b361588c772c1288d
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Apr 23 09:01:47 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/761ef39..c7d168a
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/5eb927f..571c37f
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/e939ac7..4066874
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6ba67af..f8d1ff2
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/e0d0c28..bca0c9f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749851879919473633
    
    Change-Id: I12089cab809e6a8ebff4b342d21284841a8dec70
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5477827
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93536}

commit 2d02061403b01dfdff92e0324d0d2a371d2ec861
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Mon Apr 22 15:16:31 2024 -0700

    [tools] Fix gen-keyword-gen-h.py and improve error message
    
    Running the script on main gives the following error:
    
    "Didn't get exactly %d replacement(s) for pattern: %s"
    
    because of a upper case only check where it should accept lowercase
    too.
    
    Additionally, changed the asso_values array length to 129 as that is
    the length of the output produced by gperf.
    
    Drive-by: Improve error message to display the expected number of
    replacements.
    
    Change-Id: I9df49190b8209869bbe9ba2fa8ed2e9f861ff6e0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472805
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93535}

commit 683abc09b092e8f767281b15c126a51c55691093
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Apr 23 16:37:46 2024 +0200

    [wasm-stringref] Make stringviews non-nullable
    
    The previous in-between state where views were supertypes of 'none'
    but not subtypes of 'any' was too inconsistent to be workable. This
    patch forces the three view types to be non-nullable references,
    which effectively puts them into single-occupant type hierarchies
    of their own.
    
    Fixed: 335640704
    Bug: 42202811
    Change-Id: I58f9a590c85bf90023d2b0bcdf1b1fbd071cda99
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471674
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93534}

commit 8bdfd184a65ac15cbad65257be3b2eaab36c1091
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Apr 23 15:33:46 2024 +0200

    [tools] Find debug symbols for system librariesFix
    
    In the linux tickprocessor, allow finding symbols for system libraries
    that were installed with `libfoo-dbgsym`, by reading off the build-id
    from the library and looking for a debug file in /usr/lib/debug
    
    This is particularly useful for libc, by installing
    
        sudo apt install libc6-dbg
    
    Change-Id: I595509fd8fb2115294f3b47f1e526bddb5f7094a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5476327
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93533}

commit 0379746345d071adf30b4e084183734999b7aede
Author: François Doray <fdoray@chromium.org>
Date:   Fri Feb 16 22:02:40 2024 +0000

    [v8-tasks] Add source location to v8::TaskRunner, step 4/4.
    
    Steps:
    1. Add Post*TaskImpl variants of v8::TaskRunner::Post*Task methods,
       which take a v8::SourceLocation argument. Embedders should override
       these methods.
    2. Override Post*TaskImpl instead of Post*Task in Chromium.
    3. Override Post*TaskImpl instead of Post*Task in Node.js.
    4. Make Post*Task methods non-virtual and add a v8::SourceLocation
       argument which defaults to SourceLocation::Current().
    
    Bug: chromium:1424158
    Change-Id: I58be836af688992f2da32cc9292bcdd72c12df1c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300826
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Francois Pierre Doray <fdoray@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93532}

commit 8b3e1312827e1d2a2a5820f492e1ff69e85f0275
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Apr 23 12:31:29 2024 +0000

    Disable failing test that uses the Wasm Memory64 trap handler on arm64
    
    The feature has known issues, and a recent change to the trap handler
    (crrev.com/c/5453422) may have caused it to fail in other
    configurations, too, so disable the test until b/42204673 is resolved.
    
    Bug: chromium:336270707, chromium:42204673
    Change-Id: I9e630da31fa96bc63f8f584840a9354c5d0f7054
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471978
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93531}

commit 456a9c82a61155982e85b3e6192db67ba00affc3
Author: Caitlin Potter <caitp@igalia.com>
Date:   Mon Apr 22 13:38:01 2024 -0400

    [flags] Let FLAG_VALUE_SCOPE support multiple flag types
    
    Exposes the underlying flag type as FlagValue::underlying_type. The FLAG_VALUE_SCOPE() macro then uses this underlying_type as the template parameter for FlagScope<T>, instead of hardcoding bool. This permits using the FLAG_VALUE_SCOPE() macro for non-bool flags.
    
    Change-Id: I84b79b059c1dbb29238d5579cc3706e70adae8b8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5474003
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: Caitlin Potter <caitp@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93530}

commit 304ddbdebbe9b28c1c28364c817aa7115b30bda0
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Apr 23 11:04:59 2024 +0200

    [wasm] Fix element segment typing
    
    Element segments with indices-as-elements should always have type
    `(ref func)`.
    
    Change-Id: If69ed74a1d7a50e2b8df614f0e5763e228143820
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472111
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93529}

commit ef0a8f8e5abcff069e9dbad173df520ea9fdf4e8
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Apr 23 14:27:37 2024 +0200

    [tools] Fix timestamp correction
    
    Apply the timestamp correction to the timestamp instead of just
    returning the correction.
    
    Change-Id: Ica1a4c58f0ef6f9d68039bb71516c724ddbce697
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5476408
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93528}

commit 529f6a0a9030f4006b114be8485f636747e27413
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Apr 17 12:43:53 2024 +0200

    Reland "[maglev] Re-enable ReduceFunctionPrototypeApplyCallWithReceiver"
    
    This is a reland of commit 38d8751be2010e33becbbfdfdb375a78741c2b1a
    
    - Fixed Goto in SelectioReduction to use GotoOrTrim in case of abort
    - Fixed to use tagged version of arg_list
    - Added a test.
    
    Original change's description:
    > [maglev] Re-enable ReduceFunctionPrototypeApplyCallWithReceiver
    >
    > The reason this reduction was disabled is that we did not
    > support the case when the second argument could be null or
    > undefined.
    >
    > With the SubGraphBuilder, this is trivial to implement.
    >
    > Bug: v8:7700
    > Change-Id: I8d880935c8bf7383c0307127c3f72b1b5cea168f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458171
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93401}
    
    Bug: v8:7700
    Change-Id: I313a5db68958901631005ac294186f54920ff36d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458397
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93527}

commit a4aeced32af19d0908207564428fa100e007766c
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Apr 23 12:24:42 2024 +0000

    Revert "[turboshaft][csa] Ship builtins compiled with Turboshaft"
    
    This reverts commit f3f21b9efe6d71670cc8c1f776fb5ed072743063.
    
    Reason for revert: Waterfall failures: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Mac%20-%20arm64%20-%20debug/17221/overview
    
    Original change's description:
    > [turboshaft][csa] Ship builtins compiled with Turboshaft
    >
    > Bug: v8:12783, chromium:40272314
    > Change-Id: I7f79898747411b346683196231bf03b950c0b445
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472113
    > Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93525}
    
    Bug: v8:12783, chromium:40272314
    Change-Id: I2a5aab5aca58fcdae09246cee55d978e2145955a
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5476407
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93526}

commit f3f21b9efe6d71670cc8c1f776fb5ed072743063
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Apr 23 12:36:47 2024 +0200

    [turboshaft][csa] Ship builtins compiled with Turboshaft
    
    Bug: v8:12783, chromium:40272314
    Change-Id: I7f79898747411b346683196231bf03b950c0b445
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472113
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93525}

commit 0f01bccff2581fe2472f14d121f3f4c9b1d2021e
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Tue Apr 23 11:46:55 2024 +0200

    [heap] Introduce StickySpace and allocate on it for sticky mark-bits
    
    The CL:
     - adds StickySpace. The space contains mixed young and old objects.
       Its identity type is the sames as that of the OldSpace (OLD_SPACE).
       In addition to the OldSpace, it adds a counter of the old objects.
     - adjusts InYoungGeneration checks, looking at the mark-bit of the
       object.
     - adjusts the counters used for GC scheduling. This part is still to
       be revised.
     - adds major GC flag to MemoryChunk to be able to treat all the objects
       as old during GC.
     - fixes the generational C++ write-barrier. The generated barrier is
       still to be added (after the introduction of metadata-table it needs
       to be rebased once again).
     - makes sure MemoryChunk::InYoungGeneration() and friends that look to
       the page flags for checking young generation are not called with
       sticky mark-bits.
    
    The CL doesn't adjust the GC to work with the new space.
    
    Bug: 333906585
    Change-Id: Ib8abb4efc97ce807bc368a05faba8708ffc29dfa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458537
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93524}

commit 9e9cfd6e35d020d4e0c70e311464cfe5677822b3
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Apr 23 11:36:13 2024 +0200

    [fuzzer][memory64] Merge memop<> and atomic_op<>
    
    Both operations have the same implementation, however, they were
    separated into 2 functions. This is confusing, as some atomic operations
    were introduced as a memop<>, so one might forget there is a separate
    group of atomic operations.
    
    In this change, by merging them into memop<>, for come atomic operations
    we will randomly generate 64-bit offsets. This was forgotten when
    adding support for memory64.
    
    Bug: v8:14674
    Change-Id: I50dea6f466c73927370c1d44cbc4045d3ea57fcc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471672
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93523}

commit b17613e2d2030d63a6455654fdf39a003480158b
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 23 10:56:31 2024 +0200

    [turboshaft] Maglev-to-ts: support Load/SetNamedGeneric
    
    Bug: v8:14581
    Change-Id: I8e7d67527d89f1461f9fd79c0d732010225d67cc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472107
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93522}

commit 201eb6cd4556065dd33a5e3940e969284a846280
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Apr 18 16:36:06 2024 +0200

    [api] Deprecate old named interceptors Api
    
    The old named interceptors Api will be removed in V8 12.7.
    
    Bug: chromium:328490288
    Change-Id: I7f52e196eba5d92215ec5ea8c60530a3bd6ea714
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5465509
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93521}

commit 995f4c50c99b488e89e4221b2ad5242aa3b9455b
Author: deepak1556 <hop2deep@gmail.com>
Date:   Tue Apr 23 17:20:25 2024 +0900

    [sandbox] Introduce ExternalBufferTag
    
    Separate tag type for accessing entries from the external buffer
    table. This also has the advantage of being explicit about the type
    of table used at callsites.
    
    Bug: chromium:42204529
    Change-Id: I952093033d29e1c000059d9405d412fac7d4c17c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5473242
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Deepak Mohan (Robo) <hop2deep@gmail.com>
    Cr-Commit-Position: refs/heads/main@{#93520}

commit 59b72d004c94130461a614da150ed5cb8ecf0987
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 23 09:50:25 2024 +0200

    [maglev] ArgumentsElements cannot be deduplicated
    
    The elements backing store of an arguments object participates in the
    duplicate object counting, but can itself never appear duplicated.
    In particular, mapped/unmapped arguments object cannot share the
    same ArgumentsElements as the rest parameter.
    
    Here, we replicate TF logic. See:
    https://crsrc.org/c/v8/src/compiler/backend/instruction-selector.cc;drc=a3131051ccdd567a82ffe30d7068ba6d398766ab;l=1089
    
    Fixed: 336179080
    Change-Id: Iab8ae803efcfc6368a5150c497a5365e1cdbe831
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5473605
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93519}

commit 82e7043b9d8d3a7281a966d22653b220d0cdc9b7
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Apr 23 10:23:39 2024 +0200

    [wasm][multi-memory][memory64] Fix memory offset validation
    
    During validation, the memory offset size is incorrectly checked for
    multi-memory: 64-bit offsets are considered valid if the first memory is
    memory64.
    
    Change-Id: I8181aa82b5d794bd4ea175d3d2cf0348eb4e629f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5473603
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93518}

commit 8eddcb9394476b3cc1965abfbbe6bef194c3c332
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 23 09:54:03 2024 +0200

    [turboshaft] Maglev-to-ts: add CatchBlockBegin in exception handlers
    
    So far, we could only convert from Maglev exception handlers that had
    multiple predecessors and didn't use the exception's value.
    
    Bug: v8:14581
    Change-Id: Ia4e33346d0e372117ce34b647d14e300b89f0455
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471980
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93517}

commit 6bf282b0d8e7d960812eda5c0a4c316c5478811b
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Apr 22 18:42:31 2024 +0200

    [fuzzers] Add memory64 support for fuzzers and fix multi-memory issues
    
    This change adds generation of memory64 instructions, and also adds
    multi-memory support for atomic_op<> instructions that were forgotten in
    a previous change.
    
    Bug: v8:14674
    Change-Id: I74cc3c2686256b7e4ca7d64425ad09ffc998662d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458011
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93516}

commit 2321b50657eb8c89d094180fe46c45d145265ec4
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Apr 22 18:07:31 2024 +0200

    [tools] Fix binary search for timestamp correction
    
      * Return `start - 1` and use <=, since we want the last element
        less-than-or-equal-to, not the first element greater than.
      * Check for no match (start == 0 in this case, start == length with
        the previous fix not applied), and return 0.
    
    Change-Id: Id1b4b16fef884e59c7daf52011b2b2783532fef2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5473602
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93515}

commit 62adfade390f013ab86b4a562c15b671fa990ff5
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 23 09:19:06 2024 +0200

    [turboshaft] Maglev-to-ts: fix test failure because of eager compilation
    
    Fixed: chromium:336409983
    Bug: chromium:42204525
    Change-Id: Ie5117ceb2dfb3b76595680bfef44c1fd7c2e5098
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472110
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93514}

commit 0d63633b2fa6864e1c64e634102d436a3f0073af
Author: Alexander Schulze <alexschulze@chromium.org>
Date:   Tue Apr 23 09:14:05 2024 +0200

    [builtins-pgo] Skip profile download if already downloaded
    
    Bug: 336413783
    Change-Id: I919b9db712462c4a2eaf014c460adb7eed19896d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471667
    Auto-Submit: Alexander Schulze <alexschulze@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93513}

commit 90982c6653cabf06cebcc723ce4593158d499956
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Apr 22 10:06:16 2024 +0800

    [arm]Fix incorrect fast api call fp
    
    Bug: 41492790
    
    Change-Id: I8bd68c8a0c520c794220aa23fcc894a7ebe53863
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471182
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93512}

commit 1cce678cf1ec94b9945e4e11f0257ca0131733d4
Author: Adam Klein <adamk@chromium.org>
Date:   Mon Apr 22 15:33:35 2024 -0700

    [test262] Mark Temporal dateStyle tests as failing on android
    
    Bug: chromium:42204676
    Cq-Include-Trybots: luci.v8.try:v8_android_arm64_n5x_rel
    Change-Id: Ib4ee6b759c035422b9e786b77197c6fa7f41a2fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5474583
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93511}

commit fa69c2102bebeaedf033099acfacba2d04bafcea
Author: Shu-yu Guo <syg@chromium.org>
Date:   Mon Apr 22 14:44:06 2024 -0700

    [array-grouping] Update test262 expectations
    
    See https://github.com/tc39/test262/pull/4053
    
    Bug: v8:12499
    Change-Id: Ib60ed75dbd92ae1e052d76d56445c0fbad2796a6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472808
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93510}

commit 38565d296d9be7f179e6ad75afd7249aaf72bf2e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Apr 20 20:02:32 2024 -0700

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/142a6a6f..830b17a3
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750085928060004881
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: I5a39528126bec16bfed95117fd2e5ec533763d6b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5464077
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93509}

commit e452d9e53ce001b23660edd7bfe65e88ffb16665
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Apr 22 19:33:47 2024 +0200

    [wasm][turbofan] Fix wrong types for memory.size
    
    By always picking the first memory to decide on the integer type of
    memory.size, we might either wrongly explicitly truncate it and
    implicitly extend it or wrongly explicitly extend it to then
    implicitly truncate it.
    
    In either case, Turbofan does not seem care about these type
    differences and the value can never be larger than int32 max, so this
    is just an inconsistency.
    
    Bug: 42204191
    Change-Id: Ib04a8dccb0f0faa63930211136f0b5acf3ed89a2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472109
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93508}

commit b1a0119c3189cc10979dd9e489a101a7ea7d807c
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon Apr 22 18:01:00 2024 +0200

    [turboshaft] Maglev-to-ts: support Construct
    
    Bug: v8:14581
    Change-Id: Id1fc1873098536ace7d9ef9fb3d5981f4bba2475
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472103
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93507}

commit 3ceb1799d91f8d046a64b56b2a7a112d9d73aab6
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Apr 22 18:35:25 2024 +0200

    [wasm][decoder] Rename is_memory64 to memory64_enabled
    
    The is_memory64 parameter indicates whether the flag to enable
    memory64 is set. To make the naming less confusing, rename it to
    memory64_enabled.
    
    Change-Id: I22d7c5c5201dc0ff961dce7d13953b4bdb643d25
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5473604
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93506}

commit 23508e1450b5ef9bb6de2941ab0a814222bf0cd2
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Apr 22 09:02:14 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/ffe2d36..761ef39
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749942483252087729
    
    Change-Id: I7a5010abbdb8cd15f6021b936748558d927586b7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472867
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93505}

commit a77cf8db8992eea015d96030d02144034245023b
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Apr 18 09:48:27 2024 -0400

    PPC[turboshaft]: Optimise VisitWord64Sar
    
    This CL optimises TS implementation of VisitWord64Sar
    in the same way as the sea of nodes implenetation.
    
    Change-Id: If7e6af11f1d618cc1d2f107a09781071d5697ff1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463325
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93504}

commit 8ead42b4021d70eccdba3b7818dd1d344311af0f
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Apr 22 14:32:14 2024 +0000

    [sandbox] Introduce Sandbox.getInstanceTypeIdOf
    
    Besides the instance type name, which is already available via
    Sandbox.getInstanceTypeOf, it can sometimes also be useful to get the
    numeric instance type id of an object. This new API implements that.
    
    Bug: chromium:42202821
    Change-Id: Ib546c2b52469ae9610266623e23ef2d7ac54044e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472108
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93503}

commit 986dae2498b1f290df92cb961bed25b895a3bfdb
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Apr 22 16:06:11 2024 +0200

    [string] Fix OOB table read in ToLatin1Lower
    
    ToLatin1Lower looks up a uint16_t value in a 256 valued array, under the
    assumption that the uint16_t value is actually a one-byte character that
    happens to be stored in a two-byte string (e.g. a one-byte SlicedString
    with a two-byte parent due to externalization). Ensure that this table
    lookup can't go out of bounds under heap corruption, by changing the
    function to take a uint8_t and doing a DCHECKed truncate of the uint16_t
    character to uint8_t.
    
    As a drive-by, audit the surrounding code (e.g. ToLatin1Upper), and add
    similar guards -- these won't do a similar table lookup currently, but
    maybe they would in the future, and it's good to anyway be consistent
    and explicit about this.
    
    The regression test requires support for the memory corruption API in
    mjsunit (in particular, to skip tests if the API isn't there), so add
    that too.
    
    Fixed: chromium:335810507
    Change-Id: I0e5d3ca31dda3bd4ce4dc03c3a2a802290489f2d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471973
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93502}

commit f30dd9be58369ac8762d5b7426de9c82e57d494d
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Apr 22 15:16:54 2024 +0200

    [sandbox] Add sandbox checks when reading a map instance size
    
    Fixed: 335322609
    Change-Id: I59461a82964008a95fc373e3cd6c83fc355b7673
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471972
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93501}

commit 5d3e376dfabbf5a3f8f0a3902a6f9b7fc8a69f36
Author: Eric Leese <leese@chromium.org>
Date:   Mon Apr 22 12:55:49 2024 +0000

    Reland "Handle saving promise to context before calling .catch()"
    
    This reverts commit a14f46b1060a5d0d3d5f584b771d8171bf6a5c18.
    
    Reason for revert: Beta (M125) shows no regression in spite of having this change, so most likely this was misattributed.
    Bug: b:335398101
    
    Original change's description:
    > Revert "Handle saving promise to context before calling .catch()"
    >
    > This reverts commit e93e43d6471a9627c532ac3f0f5283720acf75a3.
    >
    > Reason for revert: Most likely the change caused a crash in Chromium https://g-issues.chromium.org/issues/335398101
    >
    > Original change's description:
    > > Handle saving promise to context before calling .catch()
    > >
    > > Bug: b:40283993
    > > Change-Id: Iede31b0e96174d0e7c87fa30bf8fdabe926de490
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447250
    > > Commit-Queue: Eric Leese <leese@chromium.org>
    > > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93347}
    >
    > Bug: b:40283993
    > Change-Id: I8c9f64ee1281cc66be0dbaf9ab9e0f5f8ea6200c
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5462922
    > Owners-Override: Ilya Rezvov <irezvov@chromium.org>
    > Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    > Reviewed-by: Ilya Rezvov <irezvov@chromium.org>
    > Reviewed-by: Eric Leese <leese@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93420}
    
    Bug: b:40283993
    Change-Id: I889d243b419f1ff023bd376fcd7222cb4d9275c2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472105
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93500}

commit 04a7ddbd353f3052b08e676f09b4a2c00e7f91ce
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Apr 22 14:42:17 2024 +0200

    [maglev] Deduplicate ArgumentsElements node
    
    Fixed: 335704890
    Bug: 326091155
    Change-Id: If0f671bce69d88971eaac24e8a91df2b1de66674
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471663
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93499}

commit f827929db7435090994ccf0a526cc9772ed36725
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Apr 22 14:29:38 2024 +0200

    [tiering] Replace osr_tiering_state by flag
    
    Using only part of an enum is highly confusing. Thus refactoring the
    `osr_tiering_state` to just a boolean flag.
    
    Bug: chromium:328115456
    Change-Id: I3c509af222d6af1408a46c7a055efd6cc427cc3b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471969
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93498}

commit 0bd9ef0e681689b25a0825e7e281e098e30cde44
Author: Eric Leese <leese@chromium.org>
Date:   Mon Apr 22 12:33:31 2024 +0000

    Remove handled_hint, do all catch prediction in isolate.cc
    
    For async functions/generators, we now check the handler table
    at the generator location when walking the promise tree during
    debugging. This allows us to centralize all catch prediction code
    in isolate.cc, deleting it from lots of other locations where it
    is on a more critical path, and remove the handled_hint flag from
    promises.
    
    Bug: None
    Change-Id: Icfada30c9326dd75195965e11d771bf905ff7e20
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5465508
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93497}

commit f4c20cf519688fb1f7f9f94b7e0ff7cfe1dcf4cc
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Apr 22 14:53:18 2024 +0200

    [gm.py] Mac-arm64: refuse running x64 tests
    
    To protect users from their own muscle memory.
    Bonus change: port the logic to automatically run mkgrokdump to arm64
    machines.
    
    No-Try: true
    Change-Id: Idd7b6a3455702259ce54d5113762912703963d16
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471665
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93496}

commit 4c15ecce85064eaa0906d1c7e94b9bdb803ec981
Author: James M Snell <jasnell@gmail.com>
Date:   Fri Apr 19 08:44:10 2024 -0700

    Restore microtask CPED before the early return
    
    MicrotaskQueue::RunMicrotasks was recently updated to better handle
    CPED. Unfortunately, if the microtasks were interrupted using
    TerminateExecution, the captured CPED would not be properly restored.
    
    This ended up causing us a bit of pain this week when updating to 12.4. In certain cases, TerminateExecution was called while the microtasks were processing which led to the wrong context being propagated in a few spots, leading to a couple of difficult to track bugs. Moving the CPED restoration before the early return fixed our issues.
    
    Change-Id: Ife311d1de55a34a531f4c905b5107ad8c78935f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5468303
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93495}

commit da7edd4206e270cd64e0d3a410a1309a824ff379
Author: James M Snell <jasnell@gmail.com>
Date:   Fri Apr 19 08:36:37 2024 -0700

    Implement v8::Date::Parse and v8::Date::ToUTCString
    
    This patch adds two additional methods to the v8::Date C++ API. The
    first is v8::Date::Parse, which is a static method that takes a string,
    parses it, and returns the v8::Date instance. This is equivalent to
    using `new Date(str)` in JavaScript. The second is
    
    of the date similar to the existing ToISOString() method.
    
    v8: :Date::ToUTCString(), which returns the UTC string representation
    Change-Id: I0f4ab7d5f01ca549a6a1a23ec9bee10a6880d64e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5444005
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93494}

commit 5b3831e7516495cc5880dc6d681ef9f96d57fc9d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Apr 22 13:43:30 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - RttCanon
    - WasmTypeCast
    - WasmTypeCheck
    
    Bug: 331100916
    Change-Id: Ie9de0ccf9afb69519b268e7d26f32559a5d8de1c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5471968
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93493}

commit 01219086d3c409979fb59fbae59608d719548884
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Mon Apr 22 10:47:38 2024 +0200

    [wasm][turboshaft] Emit tail call for invalid functions
    
    When we try to inline a tail call and we encounter an invalid inlinee,
    we should emit a tail call (over a regular call) as a replacement.
    This bug can manifest with lazy validation, when a tail call is never
    called and thus the callee is not validated by liftoff before tier-up.
    
    Bug: chromium:334687959
    Change-Id: Idf299d81d1da6e590558129690c94c20f3e08666
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5468105
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93492}

commit a8db60c2e25205257184926ee34f69830ea18eae
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Apr 19 14:52:45 2024 -0400

    PPC/S390:[fastcall] Allow reentrance to JavaScript
    
    Port: 5cc77a667d1e7ee58723b0334c7f9958976778fb
    
      > By spilling the fast-C-call FP and PC on the stack in the JS Entry
      > stub, fast API calls also allow calls from C++ back to JavaScript.
    
    Bug: 41492790
    Change-Id: I97149a4b45f6753489e79d0f37590c9672339e61
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467431
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93491}

commit 5e0cc470deed2d3b0957b7441d1e960313bbbf2d
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon Apr 22 11:59:02 2024 +0200

    [maglev] Avoid StringAdd with empty string
    
    Bug: v8:7700
    Change-Id: I7177ee29b6dd03cb5e9006ceb7c2802d4bf8542d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5472102
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93490}

commit 7c1489bbb34c658e762691822b0f94c8fec10c85
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Apr 22 10:09:24 2024 +0200

    [api] Fix IsApiWrapper()
    
    Only return true for objects that can actually serve as API wrappers
    based on instance type.
    
    Previously this check included objects such as v8::Promise that may be
    configured with embedder fields but are actually never used as wrapper
    objects. The new version returns true if the objects may be used as
    old or new style wrappers, i.e., they always have a slot for
    Wrap()/Unwrap() and may also have embedder fields.
    
    Bug: chromium:328117814
    Change-Id: Ife9e92d41ea8de716228b95d803cc23356d4b297
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5468684
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93489}

commit 107a202c065f60b25a027c702990e1120a37a878
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Apr 22 16:25:14 2024 +0800

    [loong64][mips64][fastcall] Allow reentrance to JavaScript
    
    Port commit 5cc77a667d1e7ee58723b0334c7f9958976778fb
    
    Change-Id: I7966dc8a1b65aacdfc8f9adbf2a967cfd2125335
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467486
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#93488}

commit 404b50b97e0ddfbacd4fa8a5defa13534e2f8bb8
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Apr 18 15:52:25 2024 +0200

    [heap] Add TSAN coverage for MinorMS
    
    Bug: v8:12612
    Change-Id: Ic989b526d4ac4342559868eaa246e7ab5f5bd33a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463130
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93487}

commit bfe629dca9d4b5929f748704c4ab08504bdb04be
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon Apr 22 09:45:09 2024 +0200

    [turboshaft] Disable FORCE_UNROLL_LOOP on x64 ChromeOS
    
    Bug: chromium:332838433
    Change-Id: Ie67b1db1900a753c262dad0315faed9f39058c57
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467829
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93486}

commit 9df10a12f355c154815a78577d61fa774f0d3a01
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon Apr 22 09:14:13 2024 +0200

    [heap] TransferColor() should never see marked target objects
    
    We only ever invoke this method in the Scavenger and during GC we
    do not use black allocation.
    
    Change-Id: I0f11a1a4a14ad0a30005c4c898ae4efdc6d9e1a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5469842
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93485}

commit 509f8073d19a884887fd0d3acb2f89b51c486da8
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Apr 22 14:18:12 2024 +0800

    [riscv][fastcall] Allow reentrance to JavaScript
    
    Bug: 41492790
    
    port commit 5cc77a667d1e7ee58723b0334c7f9958976778fb
    
    Change-Id: I78dc6cbda4035cee5c59c04d4e675d11af7385e8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5470544
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93484}

commit edb6c5cc795be16fa699c944975d19ecf90f9ad9
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Apr 19 13:25:34 2024 +0200

    [handles] Keep list of blocks with young nodes
    
    This CL changes the way we track young TracedNodes in the GC. So far
    we tracked all such nodes in the young_nodes_ vector. Appending to the
    vector is a large part of TracedNode creation cost.
    Instead of tracking individual nodes we now track blocks instead.
    This reduces the CPU cycles spent in TracedNodes::Create by about 66%
    in Speedometer 3. However, this also means that young nodes iteration
    in the MinorGC becomes more expensive as we now need to iterate the
    full block. Fortunately this neither regressed total CPU cycles in
    minor GC nor the total score.
    
    As a side-effect of this CL we are now able to get rid of
    empty_block_candidates_ as we are now able to quickly remove
    individual blocks from the young_blocks_ free list. With young_nodes_
    we couldn't do this as we didn't know where a TracedNode was stored in
    the vector without iterating the whole vector.
    
    Bug: 335695521
    Change-Id: I4418474aa078953636f276b4fad2b13e8559de66
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447268
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93483}

commit b5e465c3d6787104583d654862ae4616a18f8530
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Apr 21 21:01:57 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/2ab618b..ffe2d36
    
    Rolling third_party/siso: git_revision:44d2b8f5b840adf521bb4912ccac31848f6d1448..git_revision:366e623c64429778827e021672a260553c7bd068
    
    Roll created at https://cr-buildbucket.appspot.com/build/8749987783094158849
    
    Change-Id: Ib4fccd5035e4925f102ceb40cc52d8c49433f728
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5469325
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93482}

commit d6938559babb55fd376bc10e9598426bbdadea8a
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Apr 20 21:03:01 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/24d8de9..e0d0c28
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750078380214524529
    
    Change-Id: I01b86581af7b0c7c6bae7b294eac77baa7c37c01
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5464078
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93481}

commit 75884e3ab36afbc7503aa7e4dfa37cb4e8df181b
Author: Alexey Pavlyutkin <alexey.pavlyutkin.community@gmail.com>
Date:   Tue Apr 16 09:50:07 2024 +0000

    [riscv][turbofan] Implements 32-bit compare against zero
    
    If pointer comporession is enabled MacroAssembler::DecompressTagged()
    adds kPtrComprCageBaseRegister to loaded value and preserves exactly
    the sum. This is why RISC-V port uses 32-bit value comparison. But
    there is not 32-bit comparison agains zero yet, and therefore
    conditions like
    
    if (a_variable == 0) {
      ...
    }
    
    never fire.
    
    Bug: v8:14703
    Change-Id: Iaf2a09fbabb3fe0ced18f4bbd173de977ce5aedd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454696
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93480}

commit 5def3a10ce66bea387d0a84a105955b374c99ec0
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Tue Apr 16 17:21:29 2024 +0800

    [riscv][codegen] Introduce MemoryRepresentation::kProtectedPointer
    
    Port commit a9083da44ed0a330f9020197683d569bde21c438
    
    Port commit e7c147b65c4f5c1013a0b45cf25fa291d176d111
    [fastcall] Support throwing exceptions
    
    Bug: v8:14564
    
    Change-Id: I518020cef404236c5d6d237c8bd1d80c659f13a6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454820
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93479}

commit da89bdd743d0ba49e25b28492589c26d05aafda4
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Apr 19 21:01:22 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/c23fa2d..2ab618b
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/b7ed76a..6ba67af
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/7d6a31f..24d8de9
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750168978430967425
    
    Change-Id: Ic7a822d228215a14fcfbb1a961a75c264d911368
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5468170
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93478}

commit f00bb3ca33439af22b0456cfcb52d76c1601002b
Author: Eric Leese <leese@chromium.org>
Date:   Fri Apr 19 16:18:20 2024 +0000

    Reland "Remove PromiseOnStack"
    
    This reverts commit 47da4bed3927c26c985c4703d3600ade2162b8cf.
    
    Reason for revert: Now that ICF has been disabled in mksnapshot this should work
    
    Original change's description:
    > Revert "Remove PromiseOnStack"
    >
    > This reverts commit 9901577dba02a46bcbcbeb36b0b8ded630864029.
    >
    > Reason for revert: Broke async call stacks on some build configurations.
    >
    > Bug: b:327085705
    >
    > Original change's description:
    > > Remove PromiseOnStack
    > >
    > > Follow-up to https://crrev.com/c/v8/v8/+/5291617
    > >
    > > We no longer use the promise stack.
    > >
    > > Bug: b:40283985, b:40283987
    > > Change-Id: I0d0208a2184d0a2d21226981f3dfbdb342c9a714
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296143
    > > Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    > > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > > Reviewed-by: Simon Zünd <szuend@chromium.org>
    > > Commit-Queue: Eric Leese <leese@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#92343}
    >
    > Bug: b:40283985, b:40283987
    > Change-Id: Id110e4fcbcff668686400eceece8cbecd31772e6
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324393
    > Commit-Queue: Eric Leese <leese@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92548}
    
    Bug: b:327085705
    Bug: b:40283985, b:40283987
    Change-Id: Idba6e6c28f386eda949c3d416393e6a16b91ccad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5465514
    Commit-Queue: Eric Leese <leese@chromium.org>
    Auto-Submit: Eric Leese <leese@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93477}

commit 63c5dca2ddee1f6c183e51ecd0d3ca5f2c8aaeef
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Apr 19 18:24:54 2024 +0200

    [wasm][sandbox][liftoff][arm64] Fix LoadTrustedPointer
    
    We get a {tag} parameter, so use it, don't discard it.
    
    Test coverage will be provided by crrev.com/c/5465514, whose
    currently-failing try jobs should be fixed by this.
    
    Bug: 42204510
    Change-Id: I053257e1b5546b80d2b1b3e4aa565d85085498f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467824
    Reviewed-by: Eric Leese <leese@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93476}

commit df3808faa461b526e0797c75a4fd827e869f8266
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Apr 19 18:49:32 2024 +0200

    [turboshaft][wasm] Fix wrong FrameState input order and count
    
    The wasm stack values were pushed in the "wrong" order (i.e. not
    consistent with the order of the VarStates in liftoff.
    
    There was also a mistake on the count of locals.
    The correct calculation is:
    - values on the value stack `decoder->stack_size()`
    - wasm function locals `ssa_env_.size() - param_count`
    Unfortunately, the decoder value stack already describes the state
    after the call_ref instruction, so we need to adapt the following:
    - add the call_ref callee
    - add the wasm trusted instance (implicit argument to the call_ref)
    - add the call's explicit arguments
    - subtract the call's results (as these are pushed after the call)
    
    Drive-by change: Include deopt data size in WasmCode to wasm memory
    usage estimation.
    
    Bug: 42204618
    Change-Id: Ic460f47b27dcfdaaa2054bcebcb4f7eae72d19bc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5468102
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93475}

commit a397ec3daeada9fb1789579c732deaf794fc927b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Apr 19 09:03:30 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/26a5b44..c23fa2d
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/1a61eb6..b7ed76a
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/591cd4b..7d6a31f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750214273367372177
    
    Change-Id: I2c9e0cb326afcdf0f04001ec4b2cd92d0eb04ddd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5468163
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93474}

commit 0aeef824d692a28af6fbcf64762593789b258e09
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Apr 19 17:59:03 2024 +0200

    [tools][wasm] Fix mjsunit test generation for signatures
    
    When printing return types, we should use GetReturn(), not GetParam().
    
    No-Try: true
    Change-Id: I4f95f7cdc9bc82ffdbf819e68656d1e24114c830
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5468106
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93473}

commit a34e52676715bbe08db1b216e198883e31e1f54b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Apr 19 15:43:20 2024 +0200

    [liftoff] Collect frame descriptions during compilation
    
    Liftoff has to collect the frame descriptions for the deopt points so
    that the deoptimizer can rebuild the full liftoff frame.
    
    Bug: 42204618
    Change-Id: Icf8427516b9303f259e4650b89914b1b7f0d79f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467813
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93472}

commit 564dce597626bb95fdc8e251d030c9e2b68b6854
Author: Andy Wingo <wingo@igalia.com>
Date:   Fri Apr 19 14:46:18 2024 +0000

    [heap] Remove special case for Foreign in HeapVisitor
    
    There was a special case to ensure the ExternalPointerSlot was
    traversed, but now there will be a dedicated VisitForeign.  There do not
    appear to be any other instances of DataObject visiting that need fixing
    up.
    
    Bug: chromium:42200397, chromium:40643874
    Change-Id: I78be71475c088c850b669ec2516c63ad203ff04f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467816
    Auto-Submit: Andy Wingo <wingo@igalia.com>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93471}

commit 125189fa267b75cc8b7d4db870daa98958ee11dd
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Apr 18 18:21:36 2024 +0200

    [wasm][jspi] Remove explicit suspender param in export wrapper
    
    Do not generate an additional explicit externref parameter for the newly
    allocated Suspender object in the WebAssembly.promising export wrapper.
    The import wrapper already uses the active suspender implicitly.
    
    R=ahaas@chromium.org
    
    Bug: v8:14722
    Change-Id: Ibcfe887dd343704f628a3cbb3931057331824da1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5464463
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93470}

commit c3be2c79c68188b10f9c7f37d79069dfcd5e4e7e
Author: deepak1556 <hop2deep@gmail.com>
Date:   Fri Apr 19 23:15:39 2024 +0900

    [sandbox] GetExternalBufferTableSpaceFor takes host, not slot
    
    Follow-up to crrev.com/c/5454233.
    
    Additional drive-by change updates comments in
    external-buffer-table.h based on feedback from
    https://crrev.com/c/5401307/comment/02776a35_99e82ace.
    
    Bug: v8:14585
    Change-Id: I2cc3648f56b01725e453b1c18f0e61fbd312fae8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467981
    Auto-Submit: Deepak Mohan (Robo) <hop2deep@gmail.com>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93469}

commit a92060987aa5bf69a19752c7b9078280803028a5
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri Apr 19 15:15:34 2024 +0200

    [wasm][jspi] Remove suspender param in import wrapper
    
    Remove the explicit suspender parameter in the WebAssembly.Suspending
    wrapper. Implicitly use the active suspender instead.
    
    R=ahaas@chromium.org
    
    Bug: 42204678
    Change-Id: I7eb674fe0992d0f56061be9d5e5514928c936b1e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463123
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93468}

commit 1b513a2785c8107f48d51d01feec176fb1ed25f5
Author: Andy Wingo <wingo@igalia.com>
Date:   Fri Apr 19 13:23:33 2024 +0000

    [heap] Foreign objects have their own visitor ID
    
    Foreign objects used to be visited as kVisitDataObject, because it
    didn't make sense to "visit" their external pointer field.  Now with the
    EPT it does make sense to have an explicit visitor kind.
    
    Bug: v8:13640, chromium:40643874
    Change-Id: I2b2e478e079854c7c9481613807e7654cfc1ece9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467822
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93467}

commit 2d778f373d2491a5a8cf896bf8ba2e7966019a1a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Apr 19 13:48:00 2024 +0200

    [liftoff] Carve out VarState into own header
    
    This CL moves the VarState out of the liftoff assembler.
    VarState describes the location of a wasm variable (like a value on the
    wasm value stack, a local or a parameter) and defines its "physical"
    location (i.e. a register, a stack slot or a constant).
    
    This information is needed by the deoptimizer to be able to construct a
    Liftoff frame as, differently to unoptimized JS frames, the wasm frame
    layout depends on internal liftoff details like register allocation.
    
    Bug: 42204618
    Change-Id: I5b55459541fd54796bcb4bbab0ef854fefbda27f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463596
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93466}

commit 98a55969e818e2eed937896d8c9e1ccb413d5371
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 19 15:18:58 2024 +0200

    [turboshaft] Maglev-to-ts: support Number->Int32 truncations
    
    Bug: v8:14581
    Change-Id: Id2a1cad0caf7a028668e3e7d7e5467bd789af69c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463129
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93465}

commit 80f95b9764134ca5dc64708fe6b61e062e2a92ae
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri Apr 19 15:43:21 2024 +0200

    [wasm] Disable stack-switching test in incompatible variants
    
    R=nicohartmann@chromium.org
    
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Change-Id: I8ec3472068e8892a651ff368fb90ece28a7aa5fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467823
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Owners-Override: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93464}

commit b3b008a54ebcd55f3d99cf9b405269f48c2ac82e
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Apr 19 11:30:53 2024 +0200

    [builtins] Use conditional moves for params size on frame leave
    
    Should be a bit friendlier for CPU instruction fetch.
    
    Change-Id: Ia782543a5458cebbbc8954640090a30f83fb5955
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467805
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93463}

commit b89c19afd2ef92b87569b03da182ed3b40dfb0b9
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Apr 19 12:13:24 2024 +0000

    [sandbox] Introduce Code::parameter_count
    
    This field is currently only available for optimized code, in which case
    it contains the parameter count of the compiled function, similar to
    BytecodeArray::parameter_count. For now, this (trusted) parameter count
    is only used during deoptimization where we were previously using the
    (untrusted) parameter count stored on the SharedFunctionInfo, which
    could lead to various issues if the value was modified by an attacker.
    
    Bug: chromium:335544065
    Change-Id: If46be3147ac2acc60d1afdbafe7cdc650cfadd09
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5465515
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93462}

commit 1d86c5e353208d09d67a716e59e1808fad8d0d03
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Apr 18 13:34:37 2024 -0400

    [fastcall] Fix big endian platforms
    
    Loading with `UintPtr` instead of `TaggedPointer`.
    
    Bug: 41492790
    Change-Id: I7ba5bbec4acb2e7917659cd1288f6dec93ccc3c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463330
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93461}

commit 63a58875aea33190ef982d254d10f5700463f49a
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Apr 18 15:56:35 2024 +0200

    [wasm][jspi] Introduce WA.promising and WA.Suspending
    
    In the revised API, WebAssembly.promising and WebAssembly.Suspending
    replace WebAssembly.Function(..., {promising: 'first'}) and
    WebAssembly.Function(..., {suspending: 'first'}) respectively.
    
    WebAssembly.Suspending is a constructor. It returns a new object type
    which is not callable but can be imported into module.
    
    WebAssembly.promising returns a regular WasmExportedFunction.
    
    R=ahaas@chromium.org
    
    Bug: v8:14722
    Change-Id: I572b8d4bf0597a68dd31ac39241066156c6185ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454695
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93460}

commit 4ea6f8afa50477611f8201c88841c03c71a7f00f
Author: Ludovic Mermod <ludovic.mermod@gmail.com>
Date:   Thu Apr 18 14:45:47 2024 +0200

    [regexp] Fix memory leak in Experimental
    
    When discarding threads, they are now correctly destroyed and the
    underlying memory is given back to the allocator.
    
    Additionally, clearing the threads list was not done properly, using
    the `DropAndClear()` function, instead of `Rewind(0)`. This caused the
    underlying pointer to be dropped without being freed, while the
    desired behavior was to empty the list without losing the allocated
    space.
    
    A test was added, for which the memory consumption used to explode, and
    is now constant in the size of the input string.
    
    This work was supervised by Aurèle Barrière, from SYSTEMF at EPFL.
    
    
    Bug: v8:14691
    Change-Id: I1ccbded25b8b711c4c9fde46c483ed7fb9be7859
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454791
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93459}

commit de8adb6e087fbd8c819add16f6203a41e7fc1ed3
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Apr 19 12:19:15 2024 +0200

    [turboshaft] Fix fast api call with invalid parameter
    
    Fast api calls have a fallback path where a normal call gets emitted if
    the overload resolution cannot identify a valid call target. This normal
    call was not wired up correctly in the Turboshaft graph builder.
    
    Bug: 335548148
    Change-Id: I21daa7478b2b01f0ed41e2761bd91d583ffb84f6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467809
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93458}

commit fd628a3450252d505bb017332c3cf09d26684668
Author: Simon Zünd <szuend@chromium.org>
Date:   Fri Apr 19 09:58:13 2024 +0000

    [genesis] Make v8::Extension compilation uninterruptible
    
    Blink generally assumes that v8::Context::New cannot be interrupted.
    Worker creation is especially sensitive if we interrupt and nuke
    a worker while we are still initializing said worker's context.
    
    Fixed: 326765855
    Change-Id: I931d72851d04906c511bd6d674f75a0afc2c58b0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467807
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93457}

commit 0e020cb9300c363c32d37ee20ed92ab93187c6e8
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Apr 19 09:59:08 2024 +0000

    Revert "[api] Advance deprecation of API not called by Chromium"
    
    This reverts commit 73c7c9f81e5eff4c05593e024566aaca6a934b19.
    
    Reason for revert: Unblock roll https://chromium-review.googlesource.com/c/chromium/src/+/5467663?tab=checks
    
    Original change's description:
    > [api] Advance deprecation of API not called by Chromium
    >
    > Generated by tools/release/list_deprecated.py
    >
    > include/v8-callbacks.h:156                v11.7  2023-07-11  9cafe595  Use kGCTypeMinorMarkSweep instead of kGCTypeMinorMarkCompact.
    > include/v8-isolate.h:1379                 v11.7  2023-07-06  b328e6fd  Use MemoryPressureNotification() to influence the GC schedule.
    > include/v8-microtask-queue.h:123          v11.7  2023-07-06  b328e6fd  May be incorrect if context was created with non-default microtask queue
    > include/v8-traced-handle.h:138            v11.7  2023-07-06  b328e6fd  Use Get to convert to Local instead
    > include/v8-traced-handle.h:146            v11.7  2023-07-06  b328e6fd  Use Get to convert to Local instead
    > include/v8-util.h:582                     v11.7  2023-07-06  b328e6fd  Use std::vector<Global<V>>.
    >
    > Change-Id: I4249b010515e5b542a0bef5b185b0d1a515ba4b1
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5460440
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Adam Klein <adamk@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93448}
    
    Change-Id: Icf707c66043bd95bec28e7ffe5869d7777f9438e
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463597
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93456}

commit 8c79aedd1802fac66f4e990fd20cf90c4e5098c4
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri Apr 19 11:08:24 2024 +0200

    [wasm][jspi] Fix JSPI stack limit in Turboshaft wasm-to-js wrapper
    
    When switching back from the central stack, we passed the address of the
    secondary stack limit slot to the external reference instead of the
    stack limit itself.
    
    R=ahaas@chromium.org
    
    Change-Id: Id4899b01ad5196d70dec5db0e04eaafef14dd9be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463124
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93455}

commit 162ba27c9e508a091229599d140944e1525ce3f5
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri Apr 19 08:23:37 2024 +0000

    Revert "Reland "[maps] Always apply prototype transitions first""
    
    This reverts commit 691994350012ad50dcf8fbf91f30de4d90279ce7.
    
    Reason for revert: Fuzzer failures
    
    Original change's description:
    > Reland "[maps] Always apply prototype transitions first"
    >
    > This is a reland of commit 77b6c4a02688950ed177d2697d401560378d1a8c
    >
    > Fixed: chromium:333281864 (FindFieldOwner fix for proto transitions
    >        which are copying descriptors)
    > Fixed: chromium:333007256 (Map updater fix for weak ptrs)
    > Fixed: chromium:333065494 (TryUpdate must not create handles)
    > Fixed: chromium:332947126 (normalization with a proto transition)
    >
    >
    > Original change's description:
    > > [maps] Always apply prototype transitions first
    > >
    > > I.e., treat prototype transitions similar to elements kind
    > > transitions. We move prototype transitions to the start of the map
    > > tree, before ElementsKind transitions, using the MapUpdater.
    > >
    > > This allows us to finally not generalize all fields anymore on the
    > > target map of UpdatePrototype. The additional benefit is that it
    > > prevents us from collecting the map tree before a prototype
    > > transition.
    > >
    > > Say we have the following code:
    > >
    > >     var x = new foo()
    > >     x.a = 1.1
    > >     x.__proto__ = bar.prototype
    > >
    > >
    > > Before this CL we produce the following transition tree, where double
    > > arrows are strong and single arrows are weak pointers:
    > >
    > >     foo {} <==--> foo {a} ----> bar {a} <==== x
    > >                   ~~~~~~~
    > >
    > > Assuming x to be a live object, then the underlined subtree is still
    > > only weakly reachable from x. In other words it can be collected and
    > > if we later create a second such object, the existing `bar {a}` map is
    > > not reachable anymore. We re-create the whole subtree and the new
    > > object will have a fresh (but identical) map.
    > >
    > > The problems are:
    > > 1. Accidental polymorphism.
    > > 2. Unnecessarily duplicated maps.
    > > 3. Prototype transitions must generalize all fields
    > >    (because we have no back-pointers and thus field updates cannot be
    > >     properly back-propagated).
    > >
    > > The solution here is to move prototype transitions to the beginning of
    > > the map tree:
    > >
    > >     foo {} <==--> foo {a}
    > >     ∧
    > >     `==--> bar {} <==--> bar {a} <==== x
    > >
    > > And use the full MapUpdater to get from `foo {a}` to `bar {a}`
    > > This fixes all issues. Generalization do not happens instantly, but
    > > rather during the MapUpdate on UpdatePrototype.
    > >
    > > Bug: chromium:332914927
    > >
    > > Change-Id: I947e45448a9de1b14f4f8c0c4e1081910027390a
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300551
    > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > > Commit-Queue: Igor Sheludko <ishell@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93189}
    >
    > Bug: chromium:332914927
    > Change-Id: I2f3b98e6fa9c84498072a09818a6b403f41e1697
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435042
    > Commit-Queue: Igor Sheludko <ishell@chromium.org>
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93440}
    
    Bug: chromium:332914927
    Bug: chromium:335592004, chromium:335580637
    Bug: chromium:335704358, chromium:335592010
    Change-Id: I8932dbb5432a6c572867dbe1f31947540281d0de
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467800
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93454}

commit 5cc77a667d1e7ee58723b0334c7f9958976778fb
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Apr 18 17:16:35 2024 +0200

    [fastcall] Allow reentrance to JavaScript
    
    By spilling the fast-C-call FP and PC on the stack in the JS Entry
    stub, fast API calls also allow calls from C++ back to JavaScript.
    
    Bug: 41492790
    Change-Id: I47796d420cf24456b11ad68d8af18b868e20afa1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447254
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93453}

commit a276f84ecd51be39daa00dd827b0f8b961bbf53d
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 18 09:50:26 2024 +0200

    [turboshaft] V<>ify Turboshaft (select/switch)
    
    Operations processed:
    - SelectOp
    - SwitchOp
    
    Bug: chromium:331100916
    Change-Id: I4883c5a00991c33a3c633366af4569928cdb1b3b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5464462
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93452}

commit 5c7bf3c20e0d39a72c82508f0cbb349e1400e82d
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Apr 18 21:02:25 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6aaae85..1a61eb6
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/78c03ab..591cd4b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750259572200940481
    
    Change-Id: Ib20bd5646940a7dabb276195c649010a6ad90966
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5467420
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93451}

commit c5ae74c942a8ed052a04502002b0b577ac9a8178
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Thu Apr 18 13:49:08 2024 +0800

    [revec][test] Gather all revec tests into a single macro guard region
    
    Just an adjustment to the code format
    
    Bug: v8:12716
    Change-Id: Ia189bbc42b5d0f055701a542c1d90a82d1b1d35b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5464826
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93450}

commit ee97f490b9513256188deb50e07aaf1e11c47c1f
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Thu Apr 18 15:12:33 2024 -0700

    [shared-struct] Fix NumWaitersForTesting race, change DequeueExplicit
    
    In this CL:
      1. Fix NumWaitersForTesting race when counting js mutex waiters.
      2. Change DequeueExplicit to return the number of dequeued waiters.
    
    Bug: v8:12547
    Change-Id: I1eb8b417fba7400722d6826588c2e99fe9bae3a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463847
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93449}

commit 73c7c9f81e5eff4c05593e024566aaca6a934b19
Author: Adam Klein <adamk@chromium.org>
Date:   Tue Apr 16 15:00:20 2024 -0700

    [api] Advance deprecation of API not called by Chromium
    
    Generated by tools/release/list_deprecated.py
    
    include/v8-callbacks.h:156                v11.7  2023-07-11  9cafe595  Use kGCTypeMinorMarkSweep instead of kGCTypeMinorMarkCompact.
    include/v8-isolate.h:1379                 v11.7  2023-07-06  b328e6fd  Use MemoryPressureNotification() to influence the GC schedule.
    include/v8-microtask-queue.h:123          v11.7  2023-07-06  b328e6fd  May be incorrect if context was created with non-default microtask queue
    include/v8-traced-handle.h:138            v11.7  2023-07-06  b328e6fd  Use Get to convert to Local instead
    include/v8-traced-handle.h:146            v11.7  2023-07-06  b328e6fd  Use Get to convert to Local instead
    include/v8-util.h:582                     v11.7  2023-07-06  b328e6fd  Use std::vector<Global<V>>.
    
    Change-Id: I4249b010515e5b542a0bef5b185b0d1a515ba4b1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5460440
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93448}

commit ba5592fb4827963f5fc690dbd71626a4ec67ed39
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Apr 18 18:33:36 2024 +0200

    Revert "[handles] Migrate most handles in string builders to direct"
    
    This reverts commit 2cb6341677cfa4333e932195d07e4aefebcaaa47.
    
    Reason for revert: Colprit for https://g-issues.chromium.org/issues/335397250 Blocks cutting RC branch of Chromium
    
    Original change's description:
    > [handles] Migrate most handles in string builders to direct
    >
    > This CL migrates most Handle<String> in string builders and related
    > classes to DirectHandle<String>. (This is only relevant for builds
    > with v8_enable_direct_handle=true.) In particular, the classes that
    > are affected are:
    >
    > - FixedArrayBuilder
    > - ReplacementStringBuilder
    > - IncrementalStringBuilder
    > - CircularStructureMessageBuilder
    >
    > In addition, the CL:
    >
    > - Introduces the helper function indirect_handle, which can be used
    >   to explicitly convert a DirectHandle<T> to a Handle<T> if necessary
    >   (similarly for "maybe" handles).
    > - Updates the `RETURN_ON_EXCEPTION_VALUE` family of macros to allow
    >   for direct, as well as indirect handles.
    > - Implements DirectHandle<T>::PatchValue, which is equivalent to the
    >   assignment of handles.
    >
    > Bug: v8:13270
    > Change-Id: I88d92645af2a620c9c5216f9aa723bd98d8caa90
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445083
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93389}
    
    Bug: v8:13270
    Change-Id: Idbdf93343ecd4237d86b723be7cd241c7cad51b5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463844
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Ilya Rezvov <irezvov@chromium.org>
    Owners-Override: Ilya Rezvov <irezvov@chromium.org>
    Auto-Submit: Ilya Rezvov <irezvov@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93447}

commit 469b5042f6536e4db1dd9e92d53f5052eb9ca094
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Apr 18 09:06:05 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/fc6b52c..26a5b44
    
    Rolling buildtools/linux64: git_revision:d823fd85da3fb83146f734377da454473b93a2b2..git_revision:155c53952ec2dc324b0438ce5b9bd4a286577d25
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/12e53bc..e939ac7
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/22de5fb..6aaae85
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/5197b1a..5a37b51
    
    Rolling third_party/siso: git_revision:437716714a744e272fabdf1377b8878ccac26b43..git_revision:44d2b8f5b840adf521bb4912ccac31848f6d1448
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750304870139823217
    
    Change-Id: I7a5dc5950bb729784b2cbceeab8054d1cb04225e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5465968
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93446}

commit 6c3f7aa4c76af4c3e0c89c5c279f2b98867c35f0
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu Apr 18 08:01:15 2024 -0700

    Close the sync iterator on rejection in AsyncFromSyncIterator
    
    This implements the normative change in
    https://github.com/tc39/ecma262/pull/2600
    
    There is also a drive-by fix that changes the methods from throwing when
    encountering a non-AsyncFromSyncIterator receiver to CHECK()ing instead,
    because AsyncFromSyncIterator is not exposed to user code and cannot
    be called with an incorrect receiver.
    
    Bug: v8:12594
    Change-Id: Id4f9348cc2baf3e484feed8b93a9eb6bb04bd832
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5460446
    Reviewed-by: Eric Leese <leese@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93445}

commit ce2406a72139c9416df3148d6de75de1b60f3838
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Wed Apr 17 20:34:35 2024 +0000

    Revert "[handles] Migrate handles in the string table to direct"
    
    This reverts commit 24094ac73e9fcc5a118c5b54264d4d0526186d8a.
    
    Reason for revert: dependency for revert of https://chromium-review.googlesource.com/c/v8/v8/+/5445083
    
    Original change's description:
    > [handles] Migrate handles in the string table to direct
    >
    > This CL migrates most handles in the string table that is used for
    > string internalization to direct. (This is only relevant for builds
    > with v8_enable_direct_handle=true.)
    >
    > Bug: v8:13270
    > Change-Id: Idbb5edaef5988f71c9716d248a8d163f39929948
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454407
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93400}
    
    Bug: v8:13270
    Change-Id: I6e143c22e28c06e71b00eebda18abc2855f597ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463846
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93444}

commit 93fa2303d8f36b454105dd7aabbaeffb401b3f30
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Apr 18 17:23:51 2024 +0200

    [heap] Run minor GC on context disposal
    
    Use idle tasks to run a minor GC on context disposal.
    
    Bug: chromium:333423696
    Change-Id: I7ba29592651ff968501b176de564a10b2be94162
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447695
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93443}

commit 982886284fe9aac131ed24f5b27b99a2f74825b8
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Apr 18 16:22:47 2024 +0200

    [ic] Use slow stub for define own with existing accessors
    
    DefineOwnProperty (via DefineOwnIC) should not call the setter of an
    existing accessor property, but overwrite the entire property. We
    therefore need to make sure that we don't install an accessor handler on
    the IC.
    
    Fixed: chromium:332745405
    Change-Id: Ie4ae908a581139777db5b5775a3201c495a46690
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5465512
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93442}

commit a8db7b0f3fb6084b97346ccc3838dd596ba969bc
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Apr 18 16:28:21 2024 +0200

    [api] Deprecate ObjectTemplate::SetIndexedPropertyHandler(...)
    
    It will be removed in V8 12.7.
    
    Bug: chromium:328490288
    Change-Id: I998661d28ab6aa368caec051c7f6af8f2dd42a00
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463131
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93441}

commit 691994350012ad50dcf8fbf91f30de4d90279ce7
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Apr 18 16:11:42 2024 +0200

    Reland "[maps] Always apply prototype transitions first"
    
    This is a reland of commit 77b6c4a02688950ed177d2697d401560378d1a8c
    
    Fixed: chromium:333281864 (FindFieldOwner fix for proto transitions
           which are copying descriptors)
    Fixed: chromium:333007256 (Map updater fix for weak ptrs)
    Fixed: chromium:333065494 (TryUpdate must not create handles)
    Fixed: chromium:332947126 (normalization with a proto transition)
    
    
    Original change's description:
    > [maps] Always apply prototype transitions first
    >
    > I.e., treat prototype transitions similar to elements kind
    > transitions. We move prototype transitions to the start of the map
    > tree, before ElementsKind transitions, using the MapUpdater.
    >
    > This allows us to finally not generalize all fields anymore on the
    > target map of UpdatePrototype. The additional benefit is that it
    > prevents us from collecting the map tree before a prototype
    > transition.
    >
    > Say we have the following code:
    >
    >     var x = new foo()
    >     x.a = 1.1
    >     x.__proto__ = bar.prototype
    >
    >
    > Before this CL we produce the following transition tree, where double
    > arrows are strong and single arrows are weak pointers:
    >
    >     foo {} <==--> foo {a} ----> bar {a} <==== x
    >                   ~~~~~~~
    >
    > Assuming x to be a live object, then the underlined subtree is still
    > only weakly reachable from x. In other words it can be collected and
    > if we later create a second such object, the existing `bar {a}` map is
    > not reachable anymore. We re-create the whole subtree and the new
    > object will have a fresh (but identical) map.
    >
    > The problems are:
    > 1. Accidental polymorphism.
    > 2. Unnecessarily duplicated maps.
    > 3. Prototype transitions must generalize all fields
    >    (because we have no back-pointers and thus field updates cannot be
    >     properly back-propagated).
    >
    > The solution here is to move prototype transitions to the beginning of
    > the map tree:
    >
    >     foo {} <==--> foo {a}
    >     ∧
    >     `==--> bar {} <==--> bar {a} <==== x
    >
    > And use the full MapUpdater to get from `foo {a}` to `bar {a}`
    > This fixes all issues. Generalization do not happens instantly, but
    > rather during the MapUpdate on UpdatePrototype.
    >
    > Bug: chromium:332914927
    >
    > Change-Id: I947e45448a9de1b14f4f8c0c4e1081910027390a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300551
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Commit-Queue: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93189}
    
    Bug: chromium:332914927
    Change-Id: I2f3b98e6fa9c84498072a09818a6b403f41e1697
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435042
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93440}

commit 79fcf99f3f8bc271ea0d2a5acbf3c2270e5ee834
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Apr 18 07:13:52 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/5cef78e..fc6b52c
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/7f63c07..78c03ab
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750312110421431345
    
    Change-Id: I4577849346d7ac7746e198f6b0e1bb9a025df3ee
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463327
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93439}

commit 6f2eb483dda9f5ee7e702fefce8eb713bb8d4f0e
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Apr 18 15:29:39 2024 +0200

    [handles] Fix possible issue with isolate macros
    
    This CL reverts some unnecessary changes that were introduced in
    https://crrev.com/c/5445083 and may have been problematic.
    
    Bug: v8:13270
    Change-Id: I73a888dcbed09dc3ef13f0c7b92b66562b312110
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463128
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93438}

commit eed20eeda8fb00af1224d57abb8017088d83afa6
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Apr 18 15:58:09 2024 +0200

    [heap] Introduce yielding to ArrayBufferSweeper
    
    Following the migration to jobs api, introduce yielding to the
    array buffer sweeping implementation, such that it can pause and
    resume sweeping later as needed. Sweeping still needs to be finalized
    prior to starting a new GC cycle.
    
    Bug: 335337925
    Change-Id: If3ac0f1b75e4f317eb01455add9db29bbb2a36f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443263
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93437}

commit 45a5a44dd4397af6fdaee623f72999c8490cd8e3
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Apr 18 11:10:59 2024 +0200

    [maglev] Support for __proto__ and getPrototypeOf
    
    Bug: v8:7700
    Change-Id: I694b74666a6a34811b0b1a288d95c201d3a0f5c7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447694
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93436}

commit a55b86df00ca937a7c1bb055922a8a8acb553ad1
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Apr 17 18:56:19 2024 +0200

    [runtime] Use correct new.target prototype
    
    In case new.target is a constructor function without prototype slot
    (i.e. Proxy constructor) we should query the "prototype" property.
    
    Bug: v8:14707
    Change-Id: Ice55e13aa230a2a5f4a29296a13160ab7fab9ae3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5461559
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93435}

commit e3f7b86f9a5d1b5096d8762b7deec3d2dc438c41
Author: Alexey Pavlyutkin <alexey.pavlyutkin.community@gmail.com>
Date:   Tue Apr 16 15:36:16 2024 +0000

    Update allowed optimization for Interpreter/Turbofan micro-benchmarks
    
    The first part of the problem is that Interpreter related micro-
    benchmarks prevent Turbofan optimization only, but they still can be
    optimized by Maglev. This makes the results irrelevant and also causes
    huge difference between comparable HW depending on the fact if Maglev
    is implemented: by Interpreter micro-benches Raspberry Pi 4 (Quad
    Cortex-A72 1500 MHz) is 5000 times faster than Lichee Pi 4 (Quad C910
    1800 MHz).
    
    Secondly Turbofan related micro-benches show much worse results for
    targets with implemented Maglev. The problem is that they also do not
    disable Maglev optimization. For the HW's listed above arm64 (Maglev
    implemented) is 2000 times slower than riscv64 (does not have Maglev).
    
    Bug: v8:14615
    Change-Id: Ib1eb02e0f14923b60b8b02cf7e9be301daf1c168
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445559
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93434}

commit c62d36f4cde7a2eab6797363800d561634fbce7b
Author: 杨文明 <yangwenming@bytedance.com>
Date:   Thu Apr 18 11:24:16 2024 +0800

    [csa,bugfix] add UnsignedSmiShl.
    
    This CL adds an operation named 'UnsignedSmiShl' to
    shift a smi without checks for potential breaks and
    use it for enum indexes in order to fix the failure
    of a CSA_DCHECK in the poc of bug:10464.
    
    Bug: v8:10464
    Change-Id: I715d057daff143bf4b213cadb9b2a33a2e0b7bc4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5403784
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: 杨文明 <yangwenming@bytedance.com>
    Cr-Commit-Position: refs/heads/main@{#93433}

commit e49c1742d23bb190d2003bf8cec469221f467fd3
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Apr 17 19:46:42 2024 +0200

    [wasm] --trace-turbo: use wat format
    
    This switches the disassembly format shown in Turbolizer from
    "mjsunit"/kExprFoo syntax to wat syntax.
    The motivation is to be able to remove the disassembler that
    emits the former format; whereas we need the wat disassembler
    for DevTools anyway.
    
    Change-Id: I2d7d382441bbf1e6b1d60ddf3299bf2800e48fb5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463120
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93432}

commit aa07a1ad40bf0f90cf669a5e8fe422b23709e426
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Apr 17 14:14:28 2024 +0200

    [ic] Store the setter in the FBV
    
    For accessors, instead of storing the descriptor index + holder in the
    StoreHandler, store the setter directly (avoiding the
    map->descriptor->pair->setter hops). For the non-prototype case, where
    there's no StoreHandler, store the AccessorPair directly as a weak
    handler instead of the Smi handler. We can't store the setter here
    directly, because it could be in new space, and then we can't use it in
    the stub cache.
    
    This is a follow-up for http://crrev.com/c/3865557.
    
    Change-Id: I96e0cb4f55c2745a968e8e54e2e674132eaea770
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458514
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93431}

commit d30429fabb0fd67eaf733f3846329b2eb5a3152a
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Apr 18 10:55:18 2024 +0200

    heap: Use fast check for static RO objects
    
    On builds with static roots we can filter out RO objects based on a
    compressed value (Tagged_t). This conveniently also filters out
    "small" Smis in the same range.
    
    The check is not complete as not all RO objects are static roots and
    as such the page-level checks cannot be removed.
    
    During Scavenge on S3 the simple check filters out 40% of objects as
    static RO roots and 17% as Smis.
    
    Change-Id: Ibc180727b7aedfc46301b4c11930619d1f226ea3
    Bug: chromium:335479495
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5459151
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93430}

commit 67a821ac79b4396e94c383ef250373789d7f40f8
Author: Andy Wingo <wingo@igalia.com>
Date:   Mon Apr 15 14:12:28 2024 +0000

    [sandbox] GetExternalPointerTableSpaceFor takes host, not slot
    
    No functional change.  Refactor so that we determine which EPT space
    based on the object, not the slot address.  This will allow memory chunk
    metadata flags to be taken into account (e.g. InYoungGeneration), even
    for slots in large objects that span multiple pages.
    
    Bug: v8:13640
    Change-Id: I573ad5187f0972329ac701afcef07b0d13c97976
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454233
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93429}

commit 057e1ee84cf6383eb2861fe7a0853b519fdf0a1c
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Apr 18 10:21:00 2024 +0200

    [wasm][shared] Split instance object and trusted instance data
    
    We split the instance object and trusted instance data into shared
    and non-shared parts. The shared part can access the shared elements
    of the instance, whereas the non-shared parts can access the
    non-shared ones directly. In addition, the non-shared part has a link
    to the shared part, and can thus access shared instance elements
    indirectly.
    For now, nothing gets allocated in the shared space; this will be
    follow-up.
    Design doc:
    https://docs.google.com/document/d/1Zr2JewWxEfWKoNX3tzgICZg7QQBIvvfFKkJprtgB8Tc
    Detailed changes:
    - Add shared part to both WasmTrustedInstanceData and
      WasmInstanceObject.
    - Instantiate both in `module-instantiate.cc`. Add non-shared module
      elements to the non-shared part, and shared ones respectively.
    - Add `shared_trusted_instance_data` argument to
      `EvaluateConstantExpression` and `ConstantExpressionInterface`.
    - Introduce a separate builtin for function-table table.set which
      extracts the shared part of the instance data (other operations
      pending).
    - Remove unused argument from wasm_array_copy builtin.
    - Add missing validation to the function body decoder.
    - Add `shared` argument to the Turboshaft graph interface. Use it to
      pass the correct `trusted_instance_data` to operations.
    
    Bug: v8:14616
    Change-Id: I9d93e1baa74385d93fa2548726b8b283ff0a838d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445558
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93428}

commit 997a0ef1c9c9910cc8c28d8d6c427e09830610d8
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Apr 16 15:23:45 2024 +0200

    [compiler][wasm] Generate and serialize deopt data for wasm code
    
    This CL adds the generation of wasm deopt data as part of Turboshaft
    code generation and adds the serialized metadata to the WasmCode
    object.
    
    The deopt data includes:
    - deopt exits (mapping from PC offset to wire bytes offset and
      translation index)
    - translations (data about the inputs to the FrameState and their
      locations, e.g. register, stack offset, literal)
    - literals (literal values used within the translations)
    
    Bug: v8:14667
    Change-Id: I6ac03df929d25bc632af44f56a170179632630ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447118
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93427}

commit f8bab48b5248caa770f5def8ca454d05da428bb6
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Apr 15 15:20:44 2024 +0200

    [liftoff] Remove unreachable leftover bailout code for gc
    
    All the gc types are listed in
    LiftoffCompiler::kUnconditionallySupported.
    
    Bug: v8:14034
    Change-Id: I5fe1508fbffff17a35f8804e494f27fa32bd9c31
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5453414
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93426}

commit e9dbc07e5295125b617217065c14ae771f768575
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Apr 18 07:42:45 2024 +0000

    [sandbox] Temporarily mark ArrayBufferExtensions as non-managed
    
    There is currently an issue where detaching an ArrayBuffer's extension
    can interfere with table compaction and the zapping mechanism of managed
    external resources. This CL temporarily disables the managed external
    resource mechanism for ArrayBufferExtensions until the best approach for
    fixing the issue has been determined.
    
    Bug: chromium:333493383
    Change-Id: Ic5b97e4a427032979bfb9d50abd0984172e5f76b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5464461
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93425}

commit 9b4377fcc6438e7053db28528c6b66ef55b588f4
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 16 14:21:00 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - AssumeMap
    - CheckMaps
    - CompareMaps
    - GenericBinop
    - GenericUnop
    - StaticAssert
    
    Bug: chromium:331100916
    Change-Id: I75fc3c6ab897b50661c00501fd9c633825b51cf3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454405
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93424}

commit 62fd61710cbe37695e6985e731f30587c0cc13c1
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Apr 18 08:36:55 2024 +0200

    test: Fix some tests with --no-reclaim-unmodified-wrappers
    
    The tests require the flag to be enabled to properly work.
    
    Change-Id: Ie570fc25bef70ddd60f1abd00bc014f40e418856
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5464460
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93423}

commit e109ed4324426199453b7c8a9ad9c5b141c18165
Author: Lei Zhang <thestig@chromium.org>
Date:   Wed Apr 17 15:10:28 2024 -0700

    Fix MSVC build issue in instruction-selector-adapter.h
    
    MSVC's preprocessor cannot handle cases where macros are interwined.
    Avoid an instance of this where a DCHECK() has a #if inside.
    
    Change-Id: I0f3f94937591db9c508fa3836eb215994009ed49
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463849
    Commit-Queue: Lei Zhang <thestig@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93422}

commit 30c344f05ae6603a8c6a7f5196d2bcc61c7d0c9f
Author: Lei Zhang <thestig@chromium.org>
Date:   Wed Apr 17 15:03:13 2024 -0700

    Remove unnecessary casts in v8::Object::Wrap()/Unwrap()
    
    There is no need to call reinterpret_cast<T>() on T. MSVC also generates
    a C2440 error for this.
    
    Change-Id: I89287df9c4afd81588628fc1a49f7b7c2f332865
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5463966
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Lei Zhang <thestig@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93421}

commit a14f46b1060a5d0d3d5f584b771d8171bf6a5c18
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Wed Apr 17 13:58:39 2024 -0600

    Revert "Handle saving promise to context before calling .catch()"
    
    This reverts commit e93e43d6471a9627c532ac3f0f5283720acf75a3.
    
    Reason for revert: Most likely the change caused a crash in Chromium https://g-issues.chromium.org/issues/335398101
    
    Original change's description:
    > Handle saving promise to context before calling .catch()
    >
    > Bug: b:40283993
    > Change-Id: Iede31b0e96174d0e7c87fa30bf8fdabe926de490
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447250
    > Commit-Queue: Eric Leese <leese@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93347}
    
    Bug: b:40283993
    Change-Id: I8c9f64ee1281cc66be0dbaf9ab9e0f5f8ea6200c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5462922
    Owners-Override: Ilya Rezvov <irezvov@chromium.org>
    Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    Reviewed-by: Ilya Rezvov <irezvov@chromium.org>
    Reviewed-by: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93420}

commit 760abb1a8961fa66190a2d36579b7b1b486a1842
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Apr 17 14:16:45 2024 +0200

    [wasm][fuzzer] --wasm-fuzzer-gen-test: use new implementation
    
    This CL changes the implementation of the --wasm-fuzzer-gen-test
    flag to the new and improved implementation that was recently
    introduced for wami's --mjsunit output mode.
    As a side effect, this lets us drop the "populate explicit recgroups"
    support from the module decoder.
    
    Change-Id: Ia3ab79131e1b62be6a9f1a6760fbd6f96a389229
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458515
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93419}

commit 4579e01d384161941a0f948954cc6e7a04c4cf4e
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Apr 17 15:50:03 2024 +0200

    [tools] Fix typo in profview.js
    
    Look, nobody is perfect.
    
    Change-Id: I8175cdff9a44d0abd77679d544474cb7f3df0436
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5459668
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93418}

commit a857c227f1c37f4ac02e0f6b421ab679aba0f809
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Apr 17 15:13:54 2024 +0200

    [csa] Introduce CallFunction
    
    ... and use it in IC dispatchers for calling getters and setters which
    are known to be JSFunctions.
    Use ConvertReceiverMode::kNotNullOrUndefined when applicable.
    
    In case a non-JSFunction callable object is installed as getter or
    setter slow stub is used. In order to test this functionality
    the CL adds d8.dom.Document_all callable Api object which gets/sets
    `globalThis.document_all_property` depending on number of arguments.
    
    Change-Id: Id03b00e3dce848f1e53763b0293860bac1d48910
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458075
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93417}

commit 059660cca32f3100af12771c7f5bfe1a7ad57024
Author: Lei Zhang <thestig@chromium.org>
Date:   Tue Apr 16 17:44:44 2024 -0700

    Fix MSVC build
    
    After https://crrev.com/c/5438054 landed, the MSVC build [1] started
    complaing about a pre-processor error. Fix this by not letting the
    `#if defined(ANDROID)` / `#else` / `#endif` block criss-cross with the
    DEFINE_INT() macro.
    
    [1] https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Win64%20-%20msvc%20-%20builder/10139/overview
    
    Change-Id: I911d278dbbb5f74d134e4abed077c035fedc3dce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5460760
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Lei Zhang <thestig@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93416}

commit 6e70dc9e73af2a930074f4f000864fbc65515b74
Author: Jose Dapena Paz <jdapena@igalia.com>
Date:   Thu Mar 21 15:55:14 2024 +0100

    [heap] Also avoid heap allocation for allocation tracked functions
    
    When allocation tracker is used, the functions allocation information
    is reported with line and column information. Current implementation
    will still modify the heap storing the line ends information.
    
    Use the cached line ends information obtained in heap snapshot to
    avoid modifying the heap.
    
    Bug: v8:14617
    Change-Id: If13f2eabe8deebbaf9746596192b59e2cc517223
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412666
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: José Dapena Paz <jdapena@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93415}

commit 9ea7bd50f12e5943db1cc53c0b0efd5134d72cd3
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Apr 16 00:15:34 2024 +0200

    [heap] Migrate ArrayBufferSweeper to jobs api
    
    This CL keeps the same sweeping logic as we had before but
    refactors the code to use the jobs api rather than a cancellable
    task. A followup CL will add yielding to the sweeping implementation.
    
    Bug: 335337925
    Change-Id: I9146c997bb078aa02ef9b1326d33187e35ce31e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5441115
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93414}

commit 96a56d191044113b55474c388ae1998fb05a3c17
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Apr 17 13:48:53 2024 +0200

    [ic] Make ForEachEnumerableOwnProperty call accessors lazily
    
    ... to avoid calling getters twice when skipping properties during
    object destructuring.
    
    Fixed: chromium:41488094
    Change-Id: Iaeca570c3d79f071072afab92d74ce29b5666e23
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458130
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93413}

commit 5841e18a99856416ee62f3bd5418a527fa7af54c
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Apr 11 10:39:08 2024 +0800

    [riscv] Detect zbb/zbs/zba by complier define
    
    Change-Id: I05103862e187e7116f9b5bdd96a40a15a97296d2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443166
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93412}

commit bdeb43c1a932f0413dd7e37bbb9a6432a5a00ff2
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Apr 17 13:02:46 2024 +0200

    [maglev] Remove too eager DCHECK for lazy deopts
    
    This dcheck was supposed to catch when we speculate in a
    kDisallowSpeculation scope during builtin inlining. However a lazy
    deopting instruction does not mean we are actually speculating in the
    inlining.
    
    Drive-By: Add a comment to document that the remaining check is not
              security critical.
    
    Fixed: chromium:334983291
    Change-Id: I5ead2fe93a1e8f56f59fca10af0703e0ad049922
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458513
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93411}

commit fa61556046a8c017eaadaefcb9b8e742cd53f356
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Apr 17 12:47:31 2024 +0200

    [fastcall] Check exception directly instead of exception flag
    
    The initial implementation of exception handling of fast api calls
    introduced a flag in the isolate data that indicates if an exception was
    thrown in the API function. However, it seems possible to just check the
    exception field in the isolate data directly. If the exception field
    contains the_hole_value, then there is no exception. Otherwise an
    exception has been thrown.
    
    Bug: 41492790
    Change-Id: I8dcda42c123f195b7c40a34022c25b4361ad407c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458172
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93410}

commit df0383160da2f8af1db5d8dd7c39917153e85814
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed Apr 17 11:49:56 2024 +0200

    [wasm] Add flag for call_indirect inlining
    
    Bug: 335082212
    Change-Id: Ia82cbb5ace8028a26f899b236e124d2f1b1a6a15
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458128
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93409}

commit 9709f9267397da6f23cae10e716456e9c464726b
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Apr 17 09:40:30 2024 +0200

    [turboshaft] V<>ify Turboshaft (bigint ops)
    
    Operations processed:
    - BigIntBinop
    - BigIntComparison
    
    Bug: chromium:331100916
    Change-Id: Ic6bde3578278db4bdb8c1ea92ce821eff59400f7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5461355
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93408}

commit 86763c3528b8f0cf7de7fbda84f2263362849b57
Author: jiepan <jie.pan@intel.com>
Date:   Tue Apr 16 17:39:48 2024 +0800

    [revec][wasm][turboshaft] Support Phi in turboshaft
    
    Bug: v8:12716
    Change-Id: Ic32a35eeefb4a42f184e9e87713597e0a3e0183c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5397575
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jie Pan <jie.pan@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93407}

commit a1033cebc74490f823eef5cccb717efaf80d64d2
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Apr 17 06:42:52 2024 +0000

    Revert "[maglev] Re-enable ReduceFunctionPrototypeApplyCallWithReceiver"
    
    This reverts commit 38d8751be2010e33becbbfdfdb375a78741c2b1a.
    
    Reason for revert: https://crbug.com/335354651
    
    Original change's description:
    > [maglev] Re-enable ReduceFunctionPrototypeApplyCallWithReceiver
    >
    > The reason this reduction was disabled is that we did not
    > support the case when the second argument could be null or
    > undefined.
    >
    > With the SubGraphBuilder, this is trivial to implement.
    >
    > Bug: v8:7700
    > Change-Id: I8d880935c8bf7383c0307127c3f72b1b5cea168f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458171
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93401}
    
    Bug: v8:7700, 335354651
    Change-Id: I2b9c20a9d315148262866a9d3a2b00ff763b1bae
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5461354
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93406}

commit 121603785d0887a990669f57def66b1e7172f2ff
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Apr 16 17:55:20 2024 +0200

    [asm] Allow code comments strings to be lazy functions
    
    ... to avoid overheads like, for example, initializing a
    std::ostringstream.
    
    Change-Id: I3117a572a419638424447cd1369e700862d76399
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458991
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93405}

commit a3131051ccdd567a82ffe30d7068ba6d398766ab
Author: Yuheng Wei <yuheng.wei@intel.com>
Date:   Wed Apr 17 10:24:12 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of relaxed lane select in turboshaft
    
    Bug: v8:12716
    Change-Id: Ib4c412307e7042501cf4ced88d7932484a702fc5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5446693
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Yuheng Wei <yuheng.wei@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93404}

commit 33e4006f1ee2f61e701a94b9bde9c5e16add6891
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Apr 16 10:33:53 2024 +0000

    [trap-handler] Only handle faults inside the V8 Sandbox
    
    Currently, when deciding whether to handle a segfault, the Wasm trap
    handler only looks at the PC of the faulting instruction. This is
    problematic as it means that the fault handler may hide bugs that lead
    to wild reads/writes originating from Wasm. Ideally, the trap handler
    would only handle invalid accesses in Wasm Memory objects. However, that
    would require recording the locations of all these objects. Instead,
    this CL takes a shortcut and changes the trap handler to only handle
    invalid accesses inside the V8 sandbox region, where all Wasm Memory
    objects must be located. In practice, this should be good enough.
    
    Bug: chromium:334120897
    Change-Id: Ife4af18697cbe921db5cb754301d037d84051652
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5453422
    Reviewed-by: Mark Mentovai <mark@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93403}

commit d425aa0ba7a89ab7add59c42621276e48666b995
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Apr 15 07:02:18 2024 -0700

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/6c60904d..142a6a6f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750720109256447873
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: Idf5c785608a8141873601aaca17a9743546ecf3a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5451146
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93402}

commit 38d8751be2010e33becbbfdfdb375a78741c2b1a
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 16 18:13:56 2024 +0200

    [maglev] Re-enable ReduceFunctionPrototypeApplyCallWithReceiver
    
    The reason this reduction was disabled is that we did not
    support the case when the second argument could be null or
    undefined.
    
    With the SubGraphBuilder, this is trivial to implement.
    
    Bug: v8:7700
    Change-Id: I8d880935c8bf7383c0307127c3f72b1b5cea168f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458171
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93401}

commit 24094ac73e9fcc5a118c5b54264d4d0526186d8a
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Apr 16 15:33:13 2024 +0200

    [handles] Migrate handles in the string table to direct
    
    This CL migrates most handles in the string table that is used for
    string internalization to direct. (This is only relevant for builds
    with v8_enable_direct_handle=true.)
    
    Bug: v8:13270
    Change-Id: Idbb5edaef5988f71c9716d248a8d163f39929948
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454407
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93400}

commit e967ec0efa74caf3156fe4cd337d2d799b847bae
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 16 17:34:15 2024 +0200

    [turboshaft] Invalidate fewer non-aliases in load elimination
    
    In particular, DeoptimizeIf, TrapIf, Comparison and WordBinop don't
    create new aliases.
    
    Drive-by: avoid invalidating aliases on Return and Deoptimize to speed
    up analysis time (since anyways, these are function terminators, and
    so they have no successors that would rely on them updating correctly
    the analysis state).
    
    Bug: chromium:333195385, v8:12783
    Change-Id: I63454bb1e856e134ea568542ad7568b811d7fefd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5457393
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93399}

commit b8f91e510e0f46985b72c7f9afcb0e7fc0659112
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Apr 16 17:38:21 2024 +0200

    [wasm][exnref] Update WA.JSTag semantics
    
    According to the last spec updates:
    - Passing WebAssembly.JSTag to the WebAssembly.Exception constructor is
      not allowed in JS,
    - Throwing an exception with the JSTag in wasm is allowed, but the
      exception should conceptually be "unwrapped" when it exits wasm, and
      JS should observe the raw externref. Instead, we simply throw the
      externref in this case, which has the same observable behavior and is
      consistent with how JSTag has been implemented so far.
    
    R=ahaas@chromium.org
    
    Bug: 333067164
    Change-Id: I6f43df8d254dd7450137d99ff7cc9cbffb697663
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454404
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93398}

commit 91bffa5a73f6f52462ee195ee7a5ae2a999c951d
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Apr 16 15:38:54 2024 +0200

    [heap] Fix deadline check in ProcessMarkingWorklist
    
    The objects_processed counter is used to avoid checking TimeTicks::Now
    too often. The check was using bitwise-and instead of modulo, which
    means that instead of checking every 128 objects, it was checking after
    each object for the first 127 objects, then wasn't checking for the next
    128 objects, then again checking after each object for the next 128
    objects, and so on.
    
    Change-Id: Iaae0c01716ec50c85c9fb940864d41547a5f2501
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5458151
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93397}

commit f4e06442848677b3f9fae50495f7fe0f3d8f0c20
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Apr 16 15:51:16 2024 +0200

    [snapshot] Disable ICF in mksnapshot
    
    Identical code folding can cause external references to be de-duplicated
    (e.g. merging memcpy and memmove). This is ok, as long as the same
    functions are folded both in the serializing and deserializing binaries.
    If the serializing binary merges two functions that the deserializing
    binary didn't, then the snapshot deserialization will get the wrong
    function reference. This can happen due to whole program optimization of
    the snapshot serializing binary.
    
    We can prevent this by disabling ICF for snapshot generation, ensuring
    that there are no duplicate references when generating the snapshot.
    It's ok for the mismatch to be in the opposite direction, i.e. for the
    deserializing binary to have merged functions that the serializing
    binary didn't, so this is a safe operation and doesn't affect the
    shipped binary.
    
    This also adds a small section to the start of the startup snapshot
    which lists all duplicate external reference table entries. The
    deserialization verifies that duplicates stayed duplicated. This allows
    us to support some duplication in the serializing binary as long as
    there is matching duplication in the deserializing binary -- this will
    be the case, for example, if the serializing and deserializing binary is
    the same (e.g. in tests, or in node with --binary-snapshot).
    
    Bug: chromium:41321762, chromiun:327245456
    Change-Id: If19584d19307bec5ea4d8b6a511151593d101988
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447267
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93396}

commit e329fc03dd453f1348c53bde7c7abe733dd03fd9
Author: Eric Leese <leese@chromium.org>
Date:   Tue Apr 16 11:21:51 2024 +0000

    Handle variables outside of with scope when scanning for .catch()
    
    Bug: b:40283993
    Change-Id: Ia8528b45d8aded71a6a798afaf04cc9dd6428648
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5457392
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93395}

commit 69f498c24cfe5186826606f443e2588e2ebd534b
Author: deepak1556 <hop2deep@gmail.com>
Date:   Tue Apr 16 20:40:01 2024 +0900

    [sandbox] Half the reservation size of ExternalBufferTable on Android
    
    Follows a change similar to crrev.com/c/5419397. We can tweak
    the value further if this still leads to OOM.
    
    Bug: v8:14585
    Change-Id: I038e3c5e86d70238b8d3151526958b2b6999a044
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5456955
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Deepak Mohan (Robo) <hop2deep@gmail.com>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93394}

commit 8fedc17fff67a29ac6aa3bbf5a855751bf6922cb
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 16 14:36:45 2024 +0200

    [turboshaft] Constant-fold CheckSmi(Allocate(...))
    
    ... since Allocate never returns Smis but always HeapObjects.
    
    Bug: v8:12783
    Change-Id: I7979af3054666a5b3f6968bafed9e2554b62ac66
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454406
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93393}

commit e9ffaa4a3d61f9e91decc64fd3fd308e19d84af0
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Tue Apr 16 12:50:43 2024 +0200

    [heap] Add black allocation parameter to MainAllocator
    
    In the world with sticky mark bits, we want to unconditionally mark
    old,code,trusted objects on allocation.
    
    Bug: 333906585
    Change-Id: Ib5065db0afd37df66ff45c1fd96e48f7335c502d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447113
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93392}

commit fbcacb34d6d5a4e5822f5f7bde69813be0193cf6
Author: deepak1556 <hop2deep@gmail.com>
Date:   Tue Apr 16 07:26:35 2024 +0900

    [sandbox] Introduce ExternalBufferTable
    
    This change implements a pointer table where each entry is 16 bytes
    of (external pointer, size) tuple. The table is intended for
    accessing buffer data outside the sandbox in a memory safe way.
    
    The table supports compaction and follows the same GC algorithm
    as ExternalPointerTable.
    
    Bug: v8:14585
    Change-Id: I52f8ed7f0eacf7d979f56df977c351c7a9e932e0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401307
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Deepak Mohan (Robo) <hop2deep@gmail.com>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93391}

commit 9dbbf1c22d3f612fec396e8d734bf461ea0c0c46
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Tue Apr 16 13:54:33 2024 +0200

    [wasm][cleanup] Pass feedback vector slot as constant
    
    ... for the CallRefIC builtin (and in a later change, I will do the
    same for CallIndirectIC).
    
    Bug: 335082212
    Change-Id: I7dd19fd932bd8f91067d1e0d4d441bbe1bcc71e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454403
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93390}

commit 2cb6341677cfa4333e932195d07e4aefebcaaa47
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Apr 16 14:30:46 2024 +0200

    [handles] Migrate most handles in string builders to direct
    
    This CL migrates most Handle<String> in string builders and related
    classes to DirectHandle<String>. (This is only relevant for builds
    with v8_enable_direct_handle=true.) In particular, the classes that
    are affected are:
    
    - FixedArrayBuilder
    - ReplacementStringBuilder
    - IncrementalStringBuilder
    - CircularStructureMessageBuilder
    
    In addition, the CL:
    
    - Introduces the helper function indirect_handle, which can be used
      to explicitly convert a DirectHandle<T> to a Handle<T> if necessary
      (similarly for "maybe" handles).
    - Updates the `RETURN_ON_EXCEPTION_VALUE` family of macros to allow
      for direct, as well as indirect handles.
    - Implements DirectHandle<T>::PatchValue, which is equivalent to the
      assignment of handles.
    
    Bug: v8:13270
    Change-Id: I88d92645af2a620c9c5216f9aa723bd98d8caa90
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445083
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93389}

commit 7d666a71b3fa02a3bacdde8dc48d5e8b7da88a75
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Tue Apr 16 14:37:54 2024 +0200

    [wasm][cleanup] Add comments, rename around call_ref
    
    ...to prepare and minimize later diffs when incrementally landing
    call_indirect speculative inlining.
    
    Bug: 335082212
    Change-Id: Id86a603624e0bb1057dac3c8316081875615bae7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454402
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93388}

commit cb4f794605ef5378e20c857d614879516d84c41d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Apr 15 15:30:27 2024 +0200

    [liftoff] Remove bailouts for unsupported SIMD
    
    Liftoff has multiple soft bailouts for trying to generate SIMD
    instructions when the hardware does not support SIMD natively.
    These cases are not supported by V8 at all and are already rejected by
    the decoder, so liftoff can just rely on that.
    
    Change-Id: I3e5ad4892e8579b5b4dd5e13c32a1b3e12fbc9f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454311
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93387}

commit 1e7439255983ec0bfe81e5a6d94b0f5fc7ccefaa
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 16 13:54:55 2024 +0200

    [turboshaft] Maglev-to-ts: support Array.push/pop
    
    Bug: v8:14581
    Change-Id: I24dbde8f1c0de0b455dfc0565f9f25b1221e8b6c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447253
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93386}

commit b2220f7a124e6f7771571da224d709b5e1457cd9
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 16 12:23:54 2024 +0200

    [maglev] One-way dependency for inlined allocations
    
    Bug: 326091155
    Change-Id: I5f0a1ad9988133c23592fe8cdc1f0b545ed9ae7b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5440158
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93385}

commit ea9d609b48a51ccd49fcceaf4ffda1dc9dc575d7
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 16 11:30:30 2024 +0200

    [maglev] Decouple MaybeGrowFastElements and EnsureWritableFastElements
    
    Inlining Array.prototype.push needs a MaybeGrowFastElements without a
    EnsureWritableFastElements. So, this CL decouples
    EnsureWritableFastElements and MaybeGrowFastElements, so that the
    later can be used without the former.
    
    Bug: v8:7700
    Change-Id: Ib3e4d9a2210679910eb870572017385457d525b3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5457391
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93384}

commit 823a643ac73e3f6dab95ebdee01655de169c0aca
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 16 11:24:55 2024 +0200

    [maglev] Store the hole in mapped argument object
    
    ... to indicate that the argument was not passed to the function.
    
    This is a regression from the previous refactoring, we were
    doing the same thing before.
    https://crrev.com/c/5435076
    
    Note this does not need to be done for inlined functions, since
    we know exactly the correct mapped count.
    
    Fixed: 334974242
    Bug: 326091155
    Change-Id: I004a7e6a7aea678147f3e0d4e2172ff2318bfe79
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5453873
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93383}

commit f313c5815a720138ca6263384ecd2dd888cac59b
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Apr 10 19:16:44 2024 +0200

    [cleanup] Refactor header files for string builders
    
    So far, string builders were defined in string-builder-inl.h and
    implemented in string-builder.cc, while there was no string-builder.h
    file. This CL splits the header file in two parts, as is usual. It also
    cleans up the implementation of CallPrinter, which was unnecessarily
    complicated because of the rule about not including -inl.h files in .h.
    
    Change-Id: I2d718d510ead43f7811b5efc3a005c35ad9b7e7c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443843
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93382}

commit e41d95458504cecee0cffeed149678d587f9ceb0
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Apr 16 14:36:07 2024 +0800

    [loong64][mips64][fastcall] Support throwing exceptions
    
    Port commit e7c147b65c4f5c1013a0b45cf25fa291d176d111
    
    Change-Id: I830e2e237bc8ad36efaf09db4c9a59ea7ae42119
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5457171
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#93381}

commit 0a6e6f30ba4b2d661f659882388bc6fc176e4101
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue Apr 16 08:46:18 2024 +0200

    [heap] Remove unused counter
    
    V8.GCMarkingSum is replaced by
    V8.GC.Cycle.MainThread.Full.Mark
    
    Bug: chromium:330166199
    Change-Id: I76db7cf9a619f8db09be852a7021a10b9916e7c7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5453996
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93380}

commit 46b33f0f540ce24be8189efe1938fada382c474e
Author: Seokho Song <seokho@chromium.org>
Date:   Thu Apr 4 12:47:13 2024 +0900

    [turbolizer] Increase the Z position of the source position marker
    
    The source position marker can be located on the other line.
    Because the marker can overlap with the next line, it can be hard to click.
    
    Since the positions are all static, we cannot use z-index.
    
    Hence, increase the Z position to lift up the clickable area to resolve this problem simple way.
    
    Bug: v8:7327
    Change-Id: Ifffbb6487c93428e90eb1a3bbeea68ffbdef8d02
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5422289
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93379}

commit b764c8656216834dfeb0b82442cb53ff7ae8c18f
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Apr 16 06:53:10 2024 +0200

    [maglev] Missing speculation mode check in TryReduceMathPow
    
    In this builtin we are missing a check if we are currently speculating
    or not.
    
    Fixed: chromium:334963812
    Change-Id: Ib71c91a1ba2485e6ee1a4ddfc001909fbbeb06a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5453872
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93378}

commit d87ae2b4168edccafdcb241848c1e5624a647f42
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Apr 15 21:19:53 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/cab574b..5cef78e
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/88367fd..12e53bc
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/495b23b..22de5fb
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/932d253..51fe358
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750531350225653329
    
    Change-Id: I56ab022c15430433362e21fe3db00bcf7f5ca53b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5456427
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93377}

commit 57aac21be883b232bb0a2133f6c8871330172bd4
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Apr 15 20:23:21 2024 +0200

    [wasm][stringref] Support memory64 and multi-memory
    
    The memory-accessing stringref instructions:
     - string.new_{utf8,lossy_utf8,wtf8}
     - string.new_wtf16
     - string.encode_{utf8,lossy_utf8,wtf8}
     - string.encode_wtf16
     - stringview_wtf8.encode_{utf8,lossy_utf8,wtf8}
     - stringview_wtf16.encode
    were not yet prepared to access 64-bit memories, or memories with
    an index other than zero. This patch adds the missing support.
    
    Bug: v8:12868
    Change-Id: I122f448c0c7dad723d58a33a8509fbdfce1ea16c
    Fixed: 333275999
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447114
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93376}

commit 600899d523f1791c767b88d9339045651c488844
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Apr 15 12:08:30 2024 -0400

    PPC/s390: [codegen] Introduce MemoryRepresentation::kProtectedPointer
    
    Port a9083da44ed0a330f9020197683d569bde21c438
    
    Original Commit Message:
    
        Instead of creating nodes / operations to load the compressed pointer,
        the trusted cage base, and combine them, this CL introduces a new
        MemoryRepresentation::kProtectedPointer which allows to express this as
        a single Load operation.
    
        This will allow us to mark individual protected pointer loads as
        immutable.
    
    R=clemensb@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I8886c4bad1908c283c4b1fc577520f3d4f2815b3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5453640
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93375}

commit d4379de61866456417c6c735f17ddac57531ca33
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Apr 15 10:48:17 2024 -0400

    PPC/s390: [fastcall] Support throwing exceptions
    
    Port e7c147b65c4f5c1013a0b45cf25fa291d176d111
    
    Original Commit Message:
    
        A function called with a fast call can set a flag on the isolate to
        indicate that an exception has been thrown. As for normally throwing an
        exception, the exception has to be stored on the isolate anyways.
        Generated code then checks after a fast call if the flag on the isolate
        is set. If so, a runtime function is called that triggers stack
        unwinding through the normal exception handling of the C-Entry stub.
    
        Additionally deopt info is added to fast API calls, not because deopt is
        possible, but because deopt info is needed to generate stack traces for
        exceptions.
    
        The CL does the following changes:
        (1) The TurboFan node `FastApiCall` gets two control outputs for
        `IfSuccess` and `IfException`;
        (2) The Turboshaft operation `FastApiCallOp` gets the ability to throw
        an exception, and gets a FrameState input so that deopt information is
        generated for the call;
        (3) The instruction selector adds to a `kArchCallCFunction` the
        information if deopt info is needed for the call, and the code generator
        generates deopt info in that case;
        (4) A new flag is added to the isolate that allows generated code to
        check after a fast API call whether an exception has been thrown.
    
    R=ahaas@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Ifcce7e9eb87077210e59909896140fb6d1beb686
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5453636
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93374}

commit 397419cab05ebd42751d0d2014df8047c6d712fa
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Apr 15 09:07:35 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/1cca7c7..cab574b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750576662235995217
    
    Change-Id: I52b21b3888da7db9b41e8efac991e47e4232729a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5454094
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93373}

commit 650668aea0fcb547e7033867e47574f13998baee
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Apr 15 17:25:23 2024 +0200

    [maglev] Inline RegExpLiteral allocation
    
    This shows off how to create a new inlined allocation in Maglev.
    The allocation automatically participates in the escape analysis.
    
    Bug: v8:7700
    Change-Id: Idff4738186a38a958a4325315a85039f4c7933f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443264
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93372}

commit 83fafb879c0977e07d9ad4ccb890c444ecfc907e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Apr 15 12:55:31 2024 +0200

    [maglev] Refactor FastObject machinery
    
    ... and allow the arguments object to participate in the
    escape analysis.
    
    This CL:
    
    Creates CapturedObject, which is simply an array of CapturedValues.
    CapturedObject abstracts the previous FastObject, FastContext,
    FastFixedArray, FastArguments... Instead it provides functions
    static creation functions. All objects automatically
    participate in the escape analysis.
    
    This avoids code duplication. For instance, allocation and
    translate state creation is very similar for all these objects.
    
    This also creates a single allocation function (which creates
    InlinedAllocation node) and wrap all nested objects in
    runtime values variant of CapturedValues.
    This decouples the "escapeness" of the nested allocations.
    This will allow the simplification of dependencies in a
    follow up CL.
    
    CaptureObject also deals with extra input locations
    automatically.
    
    InputLocations are also simplified: we walk the same input
    locations in the same order if we escape or not the allocation.
    We also always dedicate an input location to the InlinedAllocation
    node even if it was captured.
    
    This currently disables property load / element load caches.
    These optimizations were not very useful for these kind of objects
    anyways. However, a follow up CL will recreate these optimizations
    by manipulating the CapturedObject directly.
    
    Bug: 326091155
    
    Change-Id: I245803d2a9a1a86fd085160c995d4efa5640652f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435076
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93371}

commit fcd2e4f22d6c135dafffcc7676fcf5ae4b3b6d53
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Apr 15 16:31:31 2024 +0200

    [wasm][memory64] Add memory64 support to wasm-module-builder.cc
    
    We want to support memory64 in the fuzzers which use the
    wasm-module-builder.cc.
    
    Bug: v8:14674
    Change-Id: Ic302836109ca6fe87cce91e17033f161f44cad51
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447256
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93370}

commit b321e27267d3d5eae1f8daab8ba93e49ea009f10
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Apr 15 10:39:14 2024 +0200

    [wasm] Check for access checks in InstallConditionalFeatures
    
    R=jkummerow@chromium.org
    
    Together-with: jkummerow@chromium.org
    Bug: 333926321
    Change-Id: Ib319f64ac08e8081ffea49dae3a395a65c4b5db2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445557
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93369}

commit b27809333ff9677a9ec3065ae0ebd7654e838e6a
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Apr 15 14:35:21 2024 +0200

    [wasm] Add metadata size to memory consumption estimate
    
    This introduces a WasmCode::EstimateCurrentMemoryConsumption method to
    account for the size of the WasmCode objects themselves plus the
    metadata which is allocated on the C++ heap per code object.
    
    Note that the previous `ContentSize(owned_code_)` and
    `ContentSize(new_owned_code_)` were only accounting for the size of the
    `unique_ptr`, not the size of the `WasmCode` objects.
    
    R=jkummerow@chromium.org
    
    Change-Id: I182a19b9d81892ea0366067ba936b23695eb1a45
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5453413
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93368}

commit c840fff511e00e108d335fb4a46b1ef5f224c68f
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Apr 15 11:39:37 2024 +0200

    [maglev] Support builtin inlining in no speculation scopes
    
    As long as builtins don't speculate they don't need an explicit
    kAllowSpeculation scope. This allows us to for instance inline builtins
    which are getters/setters. And potentially it also allows us to inline
    non-speculating variants of builtins after speculating variants failed.
    
    Bug: v8:7700
    Change-Id: I785a2bde93b5429b22e6e441d9fff13ec63fa922
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447693
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93367}

commit 74977a05376bbec1aacadbca15640f319fec9b72
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Apr 12 18:04:21 2024 +0200

    [wasm] Use immutable loads on some protected fields
    
    Protected fields currently didn't have support for marking the loads as
    immutable. This CL adds that to Turbofan and Turboshaft and marks all
    relevant field loads from the instance as immutable.
    
    Drive-by: Remove a TODO which turns out to be inactionable (and is not
    faster as bitwise or because it cannot be folded into a memory operand).
    
    R=ahaas@chromium.org, dmercadier@chromium.org
    
    Bug: chromium:332120965, v8:14564
    Change-Id: Ied41a940b460ae29d294bd96e42231c8d5fdbdfd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5441121
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93366}

commit 32c5a57f7e9f3287d263fda69240ee6104270220
Author: Eric Leese <leese@chromium.org>
Date:   Mon Apr 15 11:50:19 2024 +0000

    Read depth as unsigned
    
    The depth argument is should be read as an unsigned immediate, not
    an immediate.
    
    Bug: b:334840566
    Change-Id: I9616a073b84823c5f550ef8b19e6e1023cfc4795
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5453571
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Eric Leese <leese@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93365}

commit 89b933bd7aae7b862009fca6bd51b6bde2361dd5
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Apr 15 13:43:32 2024 +0200

    [fuzzers] Generate random number of memories
    
    Before we generated modules with exactly one memory. After this change,
    we generate a random number (up to kMaxMemories) of memories and the
    memory operations access randomly one of these memories.
    
    Bug: v8:14674
    Change-Id: I968aacb3a885fcc9a480cd37b90f316788382528
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447195
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93364}

commit b4bbb55e79ec34b48598e49cf25ba372fda9d35f
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Apr 15 13:54:10 2024 +0200

    [arm64] Fix no-sandbox builds
    
    R=nicohartmann@chromium.org
    
    Bug: v8:14564
    Change-Id: Id08118257008b6b2e9ed583eee52848e955f8fcb
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5453611
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93363}

commit a9083da44ed0a330f9020197683d569bde21c438
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Apr 12 17:25:15 2024 +0200

    [codegen] Introduce MemoryRepresentation::kProtectedPointer
    
    Instead of creating nodes / operations to load the compressed pointer,
    the trusted cage base, and combine them, this CL introduces a new
    MemoryRepresentation::kProtectedPointer which allows to express this as
    a single Load operation.
    
    This will allow us to mark individual protected pointer loads as
    immutable.
    
    R=dmercadier@chromium.org
    
    Bug: v8:14564
    Change-Id: Ice8e3930ae9b650ff6bce5cbb307964ec6df5d75
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447692
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93362}

commit ca51566b53be5507ff184704767c7a9220a68733
Author: Jose Dapena Paz <jdapena@igalia.com>
Date:   Tue Dec 12 19:21:46 2023 +0100

    [heap] Add checks for ensuring position info slow path is not used in heap snapshot
    
    Add scoped assert for allowing/disallowing running the slow line ends
    calculation path.
    
    And move line ends calculation back to its original position as it
    is not changing the heap anymore.
    
    Bug: v8:14617
    Change-Id: I6d9ec821ab0a0e0b4186b7fbc7df8696ed8512a0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5147611
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: José Dapena Paz <jdapena@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93361}

commit 892f053f0418797632df40dbd8b21e5baa84754b
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Apr 12 17:23:12 2024 +0200

    [wasm][fastcall] Handle exceptions thrown in fast API calls
    
    An API function called with a fast API call can throw an exception by
    storing the exception on the isolate and setting a flag on the isolate.
    Generated code then checks if the flag on the isolate is set, and if so,
    call to the runtime to trigger stack unwinding through the normal
    exception handling of the C-Entry stub.
    
    The implementation for throwing an exception is in
    https://crrev.com/c/5442855, this CL adds the wasm implementation for
    catching the exception.
    
    R=thibaudm@chromium.org
    
    Bug: 41492790
    Change-Id: I380a3597001bfb073a037689ccd9a8ba603829f4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445546
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93360}

commit dd73455ba9604ca5aabda4f578b0da2062314a94
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Mon Apr 15 10:45:41 2024 +0200

    [heap] Implement unmarker and add options for sticky mark-bits
    
    The CL implements delayed unmarking required for sticky mark-bits.
    Unmarker runs on Major GC before starting marking.
    
    Bug: 333906585
    Change-Id: I166e8359a2384c58b397d8eea0bff22f00d36bc8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445086
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93359}

commit 61d70f8abe70db3801f6286dfdd152d393ac9659
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Apr 12 12:49:59 2024 +0200

    [profiler] Use gc_state to detect GC in GetStackSample
    
    With the LOGGING VMState, we might overwrite the GC VMState (if e.g. we
    are logging a move event). This is a problem in the profiler, which was
    avoiding doing deep analysis of samples in GC, since the pointers it
    would look at could be invalid during evacuation.
    
    Use the heap's recorded gc_state in addition, which is more precise than
    the VMState and won't be clobbered by VMState changes. We still need the
    VMState check though, since some parts of GC (e.g. heap verification)
    are outside the "in-GC" state.
    
    Bug: v8:14713
    Change-Id: I756cc8f4d402effc12492b5a3c436bd2ba111a3e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5439416
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93358}

commit e7c147b65c4f5c1013a0b45cf25fa291d176d111
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Apr 15 10:00:28 2024 +0200

    [fastcall] Support throwing exceptions
    
    A function called with a fast call can set a flag on the isolate to
    indicate that an exception has been thrown. As for normally throwing an
    exception, the exception has to be stored on the isolate anyways.
    Generated code then checks after a fast call if the flag on the isolate
    is set. If so, a runtime function is called that triggers stack
    unwinding through the normal exception handling of the C-Entry stub.
    
    Additionally deopt info is added to fast API calls, not because deopt is
    possible, but because deopt info is needed to generate stack traces for
    exceptions.
    
    The CL does the following changes:
    (1) The TurboFan node `FastApiCall` gets two control outputs for
    `IfSuccess` and `IfException`;
    (2) The Turboshaft operation `FastApiCallOp` gets the ability to throw
    an exception, and gets a FrameState input so that deopt information is
    generated for the call;
    (3) The instruction selector adds to a `kArchCallCFunction` the
    information if deopt info is needed for the call, and the code generator
    generates deopt info in that case;
    (4) A new flag is added to the isolate that allows generated code to
    check after a fast API call whether an exception has been thrown.
    
    R=dmercadier@chromium.org
    
    Bug: 41492790
    Change-Id: If283205d66873fd5b7ac24462f950e36d1e52fef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5442855
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93357}

commit 71f1eca52987700aad1bb86ff0a9b3405c5383fa
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Thu Apr 11 20:48:27 2024 +0800

    Reland "[loong64] Add .size for PushAllRegistersAndIterateStack"
    
    This is a reland of commit 3067d6b67883253030266d12f22b0172ab70fe75
    
    The ported CL is relanded, and no needs to modify this change.
    
    Original change's description:
    > [loong64] Add .size for PushAllRegistersAndIterateStack
    >
    > Port commit ba8e2cee26f3a08f6c907bec2b7cc73c0a97827c
    >
    > Change-Id: Id10c58ec2f65501e498e71220bd6e843a59b0f39
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5446607
    > Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93321}
    
    Change-Id: I39cd5b00f64bc09c9af1a9b11f5c181866dc12c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5452611
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93356}

commit 8531f12c01b3859222be901a0541c17825ea04ae
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Sun Apr 14 12:27:45 2024 +0200

    [fuzztest] Fix fuzztest replay (cont)
    
    Replay doesn't work when the CENTIPEDE_RUNNER_FLAGS are set. As
    a Clusterfuzz-side change is a bit more expensive and since
    Clusterfuzz also supports non-fuzztest-centipede runs, we just
    unset it in the bash wrapper.
    
    Bug: 332679477
    Change-Id: Icd25e457a57b7ab1ed8d4b62b202c969274828bd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445555
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#93355}

commit 5fb75c8ebe8e5cb2fc44efe7a222281a8329b103
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Sun Apr 14 12:09:11 2024 +0200

    [fuzztest] Simplify fuzzer names
    
    Since all fuzz tests end in _fuzztest, this drops also the token
    "test" from test names to get slightly shorter fuzzer names.
    
    Bug: 40941204
    Change-Id: Ia2f16a75346bffcc1e32772edd082378e2a73c8f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445554
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93354}

commit a56fcee3ed5fa585921bb83b53d800ca74c87545
Author: V8 Autoroll <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Apr 15 00:26:18 2024 -0700

    Version 12.6.0
    
    Change-Id: I1b5b563b768f3d3aa0250a79047b72736607ebe4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5452774
    Commit-Queue: Lutz Vahl <vahl@chromium.org>
    Reviewed-by: Lutz Vahl <vahl@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93353}

commit 3b4ada168e4f0d0d4980b15fbcb4d85ed54aa098
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Apr 14 23:30:47 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/5fb1330..1cca7c7
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/5384d31..5eb927f
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/24c482a..88367fd
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7894b0d..495b23b
    
    Rolling third_party/fuchsia-sdk/sdk: version:20.20240404.3.1..version:20.20240412.2.1
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/b1a777f..5197b1a
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/b54e4fd..7f63c07
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750613966400106145
    
    Change-Id: I68b8f7598cf67b5318864a361d9ef4ccd6954cf7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5451572
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93352}

commit 1778ccde8eb86a01b4c16c34490a597235203b2d
Author: Egor Pasko <pasko@chromium.org>
Date:   Fri Apr 12 15:52:42 2024 +0200

    Reland "Add .size for PushAllRegistersAndIterateStack"
    
    This is a reland of commit ba8e2cee26f3a08f6c907bec2b7cc73c0a97827c
    
    Patchset1: The original change
    
    Patchset2:
     * Exclude the new .size directive for Windows/Arm64
     * Add comments repeating conditional compilation condition after #endif
    
    Original change's description:
    > Add .size for PushAllRegistersAndIterateStack
    >
    > When profiling function entry events on Android, the orderfile generator
    > often records an offset within PushAllRegistersAndIterateStack, but
    > cannot attribute the offset to this function because of the zero size
    > associated with the ELF symbol. This hits a rare assertion in the
    > orderfile pipeline. If we remove the assert, the symbol will not be in
    > the orderfile, which is not ideal for this potentially hot code.
    >
    > Add the size using the `.size` directive to the assembler.
    >
    > Limit the change to the ISAs where Android orderfile is supported or
    > going to be supported in overseeable future, including emulators.
    > Compile out the directive for __APPLE__ and Windows.
    >
    > Bug: chromium:330761384
    > Change-Id: Ie175bf676942fa9af798d74b8cf381977db31a3c
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443265
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Commit-Queue: Egor Pasko <pasko@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93319}
    
    Bug: chromium:330761384
    Change-Id: Ie739107fe8bdfc4dd6b2a15fcce44ee72bc87e72
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447252
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Egor Pasko <pasko@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93351}

commit 497d8573dc80b1b69052a834bec894cf5d4238e7
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Apr 12 14:30:42 2024 +0200

    [fuzztest] Condition wrappers to work with fuzz-test replay
    
    This adds a conditional for fuzz-test wrappers transforming an
    optional parameter into an environment variable. In V8, we never
    pass any additional parameters. The only parameter passed is the
    file name for reproducing test cases.
    
    I.e. we transform:
    fuzztest param
    into
    FUZZTEST_REPLAY=param fuzztest
    
    Bug: 332679477
    Change-Id: I80189c090a0c18ccec0a2b3a1167c601a697b516
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447121
    Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93350}

commit e5cb12da818f1fb38cfdd15af8aaf01a34702b2e
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Apr 12 17:11:21 2024 +0200

    [heap] Fix debug no-sandbox builds
    
    I got link errors locally because the symbol was not found. Exporting it
    fixes it.
    
    R=omerkatz@chromium.org
    
    Change-Id: I021eb48aa0c6b03449a32a3ac0855cd5000fd708
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447194
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Auto-Submit: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93349}

commit 3fedab9b465d737ef633e111daf31faadc76b0cc
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Apr 12 18:30:45 2024 +0200

    [wasm-imported-strings] constants: require non-null globals
    
    Per https://github.com/WebAssembly/js-string-builtins/pull/29,
    imported globals that are populated with "magic" constants should
    have non-nullable type.
    
    Bug: v8:14179
    Change-Id: I08f427d9fa55dc0e7df21c39b22c30bd52d1b3a6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447196
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93348}

commit e93e43d6471a9627c532ac3f0f5283720acf75a3
Author: Eric Leese <leese@chromium.org>
Date:   Fri Apr 12 15:55:44 2024 +0000

    Handle saving promise to context before calling .catch()
    
    Bug: b:40283993
    Change-Id: Iede31b0e96174d0e7c87fa30bf8fdabe926de490
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447250
    Commit-Queue: Eric Leese <leese@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93347}

commit 188296c0d4723ddc85dbd9a44bf32db3352bc587
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Apr 12 12:31:29 2024 +0200

    [fuzzer][cleanup] Deduplicate passive data segment creation for fuzzers
    
    By accident, after refactoring we generated passive data segments twice.
    
    Change-Id: Ied213c4cbebd2707296aed14e8e08e2d7dc50be8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445090
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93346}

commit 6813d83b76b725aaaeace8d377c2b602c6fd3c19
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu Apr 11 14:19:00 2024 -0700

    [regexp] Remove --harmony-regexp-unicode-sets
    
    The feature shipped in Feb 2023.
    
    Bug: v8:11935
    Change-Id: I68ef19a4347df814a163ec74005eed57ab63c5c0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447913
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93345}

commit e7445ba9f9f888a5b21bdcdc81b9422c88ca90b8
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 12 11:04:24 2024 +0200

    [turboshaft] Maglev-to-ts: perform interrupt checks in loops
    
    We introduce a new JSLoopStackCheckOp operation in Turboshaft for
    this rather than using the existing StackCheckOp, because JS loop
    stack checks are significantly different from other stack checks:
      - They have fewer effects (no write can happen during the interrupt)
      - They have additional inputs (frame state and context)
      - Their lowering is different (it doesn't check the current stack
        pointer, but just a field on the isolate).
    
    StackCheckOp was slightly refactored to make it clearer that it
    does not handle JS loop stack checks.
    
    Bug: v8:12783, v8:14581
    Change-Id: I2820c4d015b218cc9665e792bda2352c99f5ee72
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5441116
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93344}

commit 2d27495863220e24beabcb2c89c65ee14a4ac945
Author: Andy Wingo <wingo@igalia.com>
Date:   Fri Apr 12 08:10:36 2024 +0000

    [isolate-groups] Fix PoolTest when external code space disabled
    
    The process-wide code range should only be freed during the test if
    shared-cage pointer compression is enabled.
    
    Thanks to Milad Fa for the report.
    
    Bug: v8:14625
    Change-Id: I1b295a7b71798e4446a5786acd4af12ebb03e4e0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447018
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93343}

commit 44aa040ae99aacb4f7ecd6f8145d58945d743f45
Author: Andy Wingo <wingo@igalia.com>
Date:   Fri Apr 12 09:56:11 2024 +0000

    [sandbox] Refactor CompactibleExternalEntityTable::AllocateEntry
    
    This new wrapper for ExternalEntityTable::AllocateEntry can abort compaction.
    
    No functional change.
    
    Bug: v8:14585, v8:13640
    Change-Id: Ibbeab61e87e6dd1f7ec606bd498407f69ff6ebeb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447247
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93342}

commit 093967a51ed5a30e9d6e9fd14bf9a4a0bd2af524
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Apr 12 09:19:49 2024 +0000

    Reland "[sandbox] Turn ArrayBufferExtension into a EPT::ManagedResource"
    
    The lifetime of an (out-of-heap) ArrayBufferExtension is tied to the
    lifetime of an (in-heap) ArrayBuffer. As it is referenced through the
    external pointer table, it should therefore become a ManagedResource to
    explicitly tie the lifetime of the extension object to the EPT entry for
    it and thereby avoid potentially dangling EPT entries.
    
    Bug: chromium:327550517
    Change-Id: Id9fe16fafb211e175ba2ff6ce6d8e922bfbf813f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5441118
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93341}

commit fa72cf3ccf7aed6946cb5f9130736ece1f42174f
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 12 12:11:07 2024 +0200

    [turboshaft] Maglev-to-ts: print bytecode with --trace-turbo-graph
    
    Maglev tracing (--print-maglev-graphs) also prints the bytecode, and
    since the maglev graph is quite closely related to the bytecode (more
    than Turbofan typically is), is nice to see the bytecode when
    debugging the maglev->turboshaft translation.
    
    Bug: v8:14581
    Change-Id: I5546b98b8df72fc7e30849046bfe5e80a75053c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447248
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93340}

commit 504ab14e13c240837585e31fc784bbf43923035b
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 12 11:36:53 2024 +0200

    [turboshaft] V<>ify Turboshaft some string operations
    
    Operations processed:
    - OsrValue
    - NewConsString
    - StringAt
    - StringComparison
    - StringConcat
    - StringFromCodePointAt
    - StringIndexOf
    - StringLength
    - StringSubstring
    - StringToCaseIntl
    
    Bug: chromium:331100916
    Change-Id: I051a217eaa56ae50905a9aa1c6f32639e0e7ef21
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445451
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93339}

commit 0ced45c972505a444b20450bb77d975fc774952a
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 12 11:43:00 2024 +0200

    [turboshaft] Maglev-to-ts: support OSR
    
    Bug: v8:14581
    Change-Id: I949bd26e6272f01cc7eb487d0ea163e432733487
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445548
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93338}

commit fff58a08d2fd83b9aaf02dcb6ef847e3ff4122f7
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Apr 12 10:42:51 2024 +0200

    [deoptimizer] Untangle frame translation iterator from heap
    
    The DeoptimizationFrameTranslation::Iterator requires the byte array to
    be allocated on the heap. As wasm is isolate-independent, it cannot
    have this data on the heap and it cannot create a "heapified" copy on
    demand (as it isn't safe to allocate on the heap during frame
    translation).
    
    This CL moves the implementation of the iterator to a class taking a
    raw byte vector. For JS, the original class is a trivial wrapper around
    this implementation.
    
    Bug: v8:14667
    Change-Id: Ic8bcbe3466914c725e5d6b638d91052be82b37d5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443269
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93337}

commit 63d93cb1b309d6f401d7d78b6aee91313fb69765
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Fri Apr 12 11:24:20 2024 +0200

    [gdbinit] Add jomb command for printing object mark bit
    
    The command prints whether the object is marked, the address of the
    mark-bit cell and the mask of the cell. Having the cell address is handy
    for reverse debugging.
    
    Bug: 333906585
    Change-Id: Ib6b95d3e329d4f9e3bf29a12b7d4bb5ed711c031
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445087
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93336}

commit daadc7997f87f5ca4461eede7d7440c9184ca6b7
Author: Liviu Rau <liviurau@chromium.org>
Date:   Fri Apr 12 10:59:16 2024 +0200

    [infra] Add win arm64 debug compilers
    
    No-try: true
    Bug: 333978737
    Change-Id: I8b834d49e7e21f854d009d1fa3ed13d0e1a18405
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447112
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#93335}

commit b862bac719496e4be4c1d5f5e9a402daebb605d5
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri Apr 12 09:19:13 2024 +0000

    Revert "[loong64] Add .size for PushAllRegistersAndIterateStack"
    
    This reverts commit 3067d6b67883253030266d12f22b0172ab70fe75.
    
    Reason for revert: The ported CL is reverted.
    
    Original change's description:
    > [loong64] Add .size for PushAllRegistersAndIterateStack
    >
    > Port commit ba8e2cee26f3a08f6c907bec2b7cc73c0a97827c
    >
    > Change-Id: Id10c58ec2f65501e498e71220bd6e843a59b0f39
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5446607
    > Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93321}
    
    Change-Id: If3a18d3561210edf27dfeb757df90c0a419cd4bc
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5446611
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#93334}

commit f81878b8cdf5b7c3b0d4c64aaef18a6b60f1aae9
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 12 09:33:29 2024 +0200

    [maglev] Remove redundant call to EnsureSourcePositionsAvailable
    
    MaglevCompilationJob::PrepareJobImpl already calls
    EnsureSourcePositionsAvailable, so there is no need to do it from
    MaglevCompilationInfo as well.
    
    Bug: v8:7700
    Change-Id: Ic64cd7b182da5ab1fc12364881387ea31f13dcaa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445449
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93333}

commit 5b0440e652b002ab4bfff66489321c89ebf91d10
Author: Simon Zünd <szuend@chromium.org>
Date:   Fri Apr 12 05:58:03 2024 +0000

    Revert "[string] Refactor SHA256 script content hashing"
    
    This reverts commit 289c89e1948d9e3a743c311b28931f70a14dfc9b.
    
    Reason for revert: utf8::Encode can write before the passed buffer
    in case of surrogate pairs.
    
    Original change's description:
    > [string] Refactor SHA256 script content hashing
    >
    > This CL changes how we calculate the SHA256 hash of a V8 string,
    > currently used for the CallSite API and the inspector to get script
    > content hashes.
    >
    > The current approach requires allocating a copy of the string
    > (via String::ToCString) and hashing that. Instead, we can iterate
    > the string ourselves and build the hash as we go. In microbenchmarks
    > this is slightly faster and doesn't require an extra copy of the
    > string.
    >
    > Note that using SHA256_update on one-byte-non-cons string chars
    > directly didn't improve performance so we don't gain anything by
    > optimizing further based on string representation.
    >
    > Drive-by: Add a new debug-interface method so both code paths that
    > calculate script hashes use the same approach.
    >
    > Bug: 326554286
    > Change-Id: Iebbd501a67f164822c2d2d8f3e24863e3477ec40
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5423429
    > Commit-Queue: Simon Zünd <szuend@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93317}
    
    Bug: 326554286
    Change-Id: I618d4def508f197c3b48f670d741ebb4a67c8927
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5444616
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Simon Zünd <szuend@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93332}

commit 9032afc9b62d0f9f0894908d4150f77adfb1bb24
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Apr 11 22:13:35 2024 -0700

    Update fuzztest (trusted)
    
    Rolling third_party/fuzztest: https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+log/905f703..ae21d24
    
    Roll FuzzTest (Paul Semel)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/ae21d24
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750889976856155089
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Change-Id: Ic41a0d1208a903ba420e8aac439cfd88a23e0b1f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447598
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93331}

commit e1403dd7f061925a5d45d510fcc1ac9c3675a742
Author: JialuZhang-intel <jialu.zhang@intel.com>
Date:   Thu Apr 11 19:50:10 2024 +0800

    [turbofan] Avoid call to ObjectPrototypeHasOwnProperty builtin if
    possible.
    
    If the input "key" of the "object.prototype.hasownproperty" JSCall
    comes from enum cache and the receiver is a heap constant, then we
    can replace the ObjectPrototypeHasOwnProperty builtin call with some
    compare and jump instructions.
    
    This CL can bring ~65% improvement on this micro case below:
    -----------------------------------
    const RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true,
    };
    
    function foo(config) {
        let i = 0;
        let propName;
        const props = {};
        for (propName in config) {
            if (!RESERVED_PROPS.hasOwnProperty(propName)) {
                i = i + 1;
            }
        }
        return i;
    }
    -----------------------------------
    
    Change-Id: I64ea856245a5492ec0777539565cd03a12a23a6c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5360237
    Commit-Queue: Jialu Zhang <jialu.zhang@intel.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93330}

commit 077a814a1d1124870a233509853f670a46734179
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Sun Apr 7 16:54:58 2024 +0800

    [loong64][mips64][turboshaft] Fix more issues in Turboshaft's builtin pipeline
    
    Port commit aa116324c586e386b9cd3a6a058c6f4855acaeac
    
    Change-Id: I80291bc6fdb5f3abba899f885c88bc9aae1faa1b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5431775
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#93329}

commit 626d282d68a630d637c445b4e5866d0612b23aed
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Thu Apr 11 21:16:28 2024 +0000

    Revert "Add .size for PushAllRegistersAndIterateStack"
    
    This reverts commit ba8e2cee26f3a08f6c907bec2b7cc73c0a97827c.
    
    Reason for revert: Windows Arm64 bot fails blocking the roll: https://chromium-review.googlesource.com/c/v8/v8/+/5443265
    
    Original change's description:
    > Add .size for PushAllRegistersAndIterateStack
    >
    > When profiling function entry events on Android, the orderfile generator
    > often records an offset within PushAllRegistersAndIterateStack, but
    > cannot attribute the offset to this function because of the zero size
    > associated with the ELF symbol. This hits a rare assertion in the
    > orderfile pipeline. If we remove the assert, the symbol will not be in
    > the orderfile, which is not ideal for this potentially hot code.
    >
    > Add the size using the `.size` directive to the assembler.
    >
    > Limit the change to the ISAs where Android orderfile is supported or
    > going to be supported in overseeable future, including emulators.
    > Compile out the directive for __APPLE__ and Windows.
    >
    > Bug: chromium:330761384
    > Change-Id: Ie175bf676942fa9af798d74b8cf381977db31a3c
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443265
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Commit-Queue: Egor Pasko <pasko@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93319}
    
    Bug: chromium:330761384
    Change-Id: If8aa3c20af3aadc21a570ff976cc176571307149
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5444317
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Deepti Gandluri <gdeepti@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93328}

commit eee68c9df785c6408159786b10dc2bff68f9e45e
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Apr 11 16:30:38 2024 +0200

    [api] Deprecate v8::FunctionCallbackInfo::Holder()
    
    ... in favour of v8::FunctionCallbackInfo::This().
    
    This is a next step towards never exposing so-called hidden prototype
    (i.e. JSGlobalObject) via the V8 Api. This will make the JSGlobalObject
    a V8 internal thing and make the V8 Api closer to JavaScript spec.
    
    Embedders that store pointers to C++ objects in JSGlobalObject's
    internal fields should migrate their code to store the pointers in
    internal fields of JSGlobalProxy (AKA v8::Context::Global()).
    
    It's not allowed to use V8_DEPRECATE_SOON functionality in V8 tests,
    so this CL temporarily introduces HolderSoonToBeDeprecated() method
    preserving the old semantics in order to keep testing the old
    machinery until all embedders are migrated to the new Api.
    
    Bug: chromium:333672197
    Change-Id: I0d555c8e95c55c46bff71f6db768573c3146deed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5444829
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93327}

commit 9e92d8f3815949ebbf5a148b08a6b1937ce12507
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Apr 11 18:07:43 2024 +0200

    [build] Expose V8_TARGET_OS_* to the embedder
    
    ... and check that V8_TARGET_OS_ANDROID in V8 matches that in the
    embedder -- this is necessary for cross-os shapshot generation (e.g.
    generating android snapshots from linux).
    
    Bug: chromium:329104605
    Change-Id: I894cc1dd6921865739784e6ac08a32a924a1ad10
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445547
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93326}

commit 5e139e98d1e4d8bbcccf7b15cd8e7d08b28e4a81
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Apr 11 17:08:08 2024 +0200

    [api] Introduce v8::Object::GetPrototypeV2()/SetPrototypeV2()
    
    ... as a replacement for soon to be deprecated
    v8::Object::GetPrototype() and v8::Object::SetPrototype().
    
    The new versions will act just like getting/setting of "__proto__"
    property, i.e. they will never return or accept JSGlobalObject.
    
    This is a first step towards never exposing so-called hidden prototype
    (i.e. JSGlobalObject) via the V8 Api. This will make the JSGlobalObject
    a V8 internal thing and make the V8 Api closer to JavaScript spec.
    
    Bug: chromium:333672197
    Change-Id: Ic850d6a041f443392586b868eccde637ded801d3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447696
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93325}

commit 43dc92e7e6e929ed213ac7ab33b3704c4b299f65
Author: Lei Zhang <thestig@chromium.org>
Date:   Wed Apr 10 18:20:30 2024 -0700

    Remove unneeded fixed-array.h includes
    
    Remove them when not required from headers, and then do IWYU / forward
    declare to fix the build. Fix a few nits along the way.
    
    Change-Id: I6570ec9a088aeb8355da6aeccccfad47582fe2e6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445577
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: Lei Zhang <thestig@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93324}

commit cd10ad7cdbe558e06dd0e8a8923834be8efdf245
Author: Joyee Cheung <joyee@igalia.com>
Date:   Thu Apr 11 17:06:03 2024 +0200

    [compiler] reset script details in functions deserialized from code cache
    
    During the serialization of the code cache, V8 would wipe out the
    host-defined options, so after a script id deserialized from the
    code cache, the host-defined options need to be reset on the script
    using what's provided by the embedder when doing the deserializing
    compilation, otherwise the HostImportModuleDynamically callbacks
    can't get the data it needs to implement dynamic import().
    
    Change-Id: I33cc6a5e43b6469d3527242e083f7ae6d8ed0c6a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401780
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93323}

commit ad09ef32f3892ac71f08a17bfd938638123e6d3a
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Apr 10 09:25:25 2024 +0000

    Reland "[sandbox] Introduce ExternalPointerTable::ManagedResource"
    
    This is a reland of commit 67b9a2503c6eefa1f27462e5c3dfd4b9ee2a9a53
    
    Incorporated the fix from crrev.com/c/5439208 now:
    [sandbox] Remove shortcut for evacuated segments during EPT sweeping
    
    Originally, we had this shortcut to avoid iterating over segments that
    we knew would be completely empty after evacuation and sweeping.
    However, now that we have managed resources, we still need to process
    entries that contain them in these segments. And we need to be careful
    when doing so: as the segment hasn't been evacuated yet when we iterate
    over it, not all entries are dead. The previous logic introduced in
    https://crrev.com/c/5438117 got this wrong. Since we now anyway need to
    iterate over the segment, the shortcut is much less useful, and so this
    CL simply removes it, which also simplifies some other code.
    
    Original change's description:
    > [sandbox] Introduce ExternalPointerTable::ManagedResource
    >
    > This is a (malloced) object located outside of the V8 heap whose
    > lifetime is tied to something inside the V8 heap. Examples include the
    > objects referenced via Managed objects or ArrayBufferExtensions. This
    > class is used to make this relationship explicit, which is necessary for
    > the sandbox: as these objects are referenced through the external
    > pointer table (EPT), it must be ensured that they are never deallocated
    > before their EPT entry is freed, or if they are, the entry must be
    > zapped/invalidated. Failure to do so results in a dangling EPT entry
    > that can lead to a use-after-free outside of the sandbox.
    >
    > For now, the ManagedResource does the latter: it keeps track of its
    > entry in the EPT and zaps the entry when the resource itself is
    > deallocated. However, in the future it might be more efficient to tie
    > the lifetime of the external resource directly to the table entry and
    > only free the resource when the table entry is freed. That, however,
    > likely first requires minor GC support for the EPT so that resources are
    > not kept around longer than necessary.
    >
    > Bug: chromium:331237575
    > Change-Id: I13c4c9dcac101aa1f6d10b902aac9260f68fdbda
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425025
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93228}
    
    Bug: chromium:331237575
    Change-Id: Ib04c134d94636e88d081a6d8a9d33af19b37c1cf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5439561
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93322}

commit 3067d6b67883253030266d12f22b0172ab70fe75
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Thu Apr 11 20:48:27 2024 +0800

    [loong64] Add .size for PushAllRegistersAndIterateStack
    
    Port commit ba8e2cee26f3a08f6c907bec2b7cc73c0a97827c
    
    Change-Id: Id10c58ec2f65501e498e71220bd6e843a59b0f39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5446607
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93321}

commit 9c71fe9576c38f403e8d41ecd82635cc5883c2ce
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Thu Apr 11 20:21:05 2024 +0800

    [loong64][wasm] Fix no-sandbox ptr-compr
    
    Port commit 63b57b518a0214a5f37ffaa751361270fc2340d6
    
    Change-Id: I08e449c7eacda7ab0da1d0c8aeb3f8df56c31d1a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5446527
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93320}

commit ba8e2cee26f3a08f6c907bec2b7cc73c0a97827c
Author: Egor Pasko <pasko@chromium.org>
Date:   Wed Apr 10 17:35:54 2024 +0200

    Add .size for PushAllRegistersAndIterateStack
    
    When profiling function entry events on Android, the orderfile generator
    often records an offset within PushAllRegistersAndIterateStack, but
    cannot attribute the offset to this function because of the zero size
    associated with the ELF symbol. This hits a rare assertion in the
    orderfile pipeline. If we remove the assert, the symbol will not be in
    the orderfile, which is not ideal for this potentially hot code.
    
    Add the size using the `.size` directive to the assembler.
    
    Limit the change to the ISAs where Android orderfile is supported or
    going to be supported in overseeable future, including emulators.
    Compile out the directive for __APPLE__ and Windows.
    
    Bug: chromium:330761384
    Change-Id: Ie175bf676942fa9af798d74b8cf381977db31a3c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443265
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Egor Pasko <pasko@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93319}

commit 2cdc3a97b70172bad00df7350758695a8a6f5666
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Apr 11 03:11:32 2024 -0700

    Update fuzztest (trusted)
    
    Rolling third_party/fuzztest/src: https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/d7c63cd..65354bf
    
    #Centipede Run the fuzzing loop in the current thread when num_threads == 1. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/65354bf
    
    #Centipede Standardize logging when generating various reports (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/fbca08a
    
    Slides from the FUZZING 2023 workshop (Kostya Serebryany)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/f7da8b5
    
    #Centipede Fix interaction between --stop_at / --stop_after / --config / --save_config (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/d124996
    
    Fix test errors when building with RELR. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/5a3395a
    
    Include 32 domain initial values in seed inputs. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/85ddd9e
    
    #Centipede Enable buffered writing for rusage reports (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/a990537
    
    #Centipede Implement buffered writing in OSS variant of RemoteFile API (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/6c5c9ea
    
    ...
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750961231471188017
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Change-Id: I9f82538946626f20b67db8266489577277924e40
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445485
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93318}

commit 289c89e1948d9e3a743c311b28931f70a14dfc9b
Author: Simon Zünd <szuend@chromium.org>
Date:   Wed Apr 10 08:01:30 2024 +0200

    [string] Refactor SHA256 script content hashing
    
    This CL changes how we calculate the SHA256 hash of a V8 string,
    currently used for the CallSite API and the inspector to get script
    content hashes.
    
    The current approach requires allocating a copy of the string
    (via String::ToCString) and hashing that. Instead, we can iterate
    the string ourselves and build the hash as we go. In microbenchmarks
    this is slightly faster and doesn't require an extra copy of the
    string.
    
    Note that using SHA256_update on one-byte-non-cons string chars
    directly didn't improve performance so we don't gain anything by
    optimizing further based on string representation.
    
    Drive-by: Add a new debug-interface method so both code paths that
    calculate script hashes use the same approach.
    
    Bug: 326554286
    Change-Id: Iebbd501a67f164822c2d2d8f3e24863e3477ec40
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5423429
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93317}

commit 67040679e84294a425f900138f1b009d66f6729f
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Apr 11 12:04:50 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - TruncateJSPrimitiveToUntagged
    - TruncateJSPrimitiveToUntaggedOrDeopt
    
    Bug: chromium:331100916
    Change-Id: I3138321dec6841abc299e058f2fd79598d0764e3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443704
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93316}

commit f84434a428436bce4969ecff756cc1eeb2ebefdb
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Apr 11 12:01:27 2024 +0200

    [test][turboshaft][wasm] Add repro for ISEL normalization
    
    Adds repro for commit b86c0d3d41fc783a2dc26880ea3317bd64bf82eb.
    
    Bug: 333754542, v8:14108
    Change-Id: I756ec27e5e8124a33689b9f10fbc18e185334c0d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447007
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93315}

commit 7eb5057e61129cf1a35ff53a474b3699f677d262
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 11 11:54:03 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - Deoptimize
    - DeoptimizeIf
    - TrapIf
    
    Bug: chromium:331100916
    Change-Id: Ibccbab351d9a46b28da069cea144f9b87f6aea14
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447003
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93314}

commit 47a2099271dc2c01ae675c1774b5931259bd5791
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 11 11:27:02 2024 +0200

    [turboshaft] Maglev-to-ts: support Set/GetKeyedGeneric
    
    Bug: v8:12783, v8:14581
    Change-Id: Ic17c3b172f08c30e99d45d45cd54b746ce7e7e92
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5442777
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93313}

commit 6a848dbdab50f1ec70d5cf9f4664608cb40a17e0
Author: Jose Dapena Paz <jdapena@igalia.com>
Date:   Thu Dec 7 20:08:35 2023 +0100

    [heap] Move line ends information to HeapSnapshot
    
    As the line ends information is used not only in the heap explorer,
    but also later in JSON serializer, move line ends information to heap
    snapshot so it can be reused in other places.
    
    Bug: v8:14617
    Change-Id: I73636112132aba0cf1acbea41508e2a1b70ed8e4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5147610
    Commit-Queue: José Dapena Paz <jdapena@igalia.com>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93312}

commit b86c0d3d41fc783a2dc26880ea3317bd64bf82eb
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 11 09:02:13 2024 +0200

    [turboshaft][wasm] Add ISEL normalization reducer to the wasm pipeline
    
    Fixed: chromium:333754542
    Bug: v8:14108
    Change-Id: I75a16a864bd2a7d9a2236732dc34df86259be971
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5447004
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93311}

commit cf03d55db2a0b7c5ff62e08ff5ad52312f6da0b4
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Apr 10 19:36:55 2024 +0200

    [wasm][exnref] Fix default value for null exnref
    
    R=manoskouk@chromium.org
    
    Bug: 332081797
    Change-Id: Ied777935946c880a78e2011040a4d9ab19a4ddd2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5444544
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93310}

commit 007ffa428b5cae4b8e6d2728344a730d1446ab65
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Apr 10 08:10:24 2024 +0200

    [turboshaft] Fix bug in contiguous stores merging
    
    A recent CL (https://crrev.com/c/5363942) introduced a new
    optimization that merges 2 contiguous 32-bit stores into a single
    64-bit store.
    
    Packing 2 handles in a 64-bit raw Word64 should only be done for
    read-only objects. Otherwise, the GC might move an object and the
    handles wouldn't be updated, leading to all kinds of memory
    corruption.
    
    Bug: v8:12783
    Change-Id: I5bddae84d824161982c4789b5d93583fdbfc8c77
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5439210
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93309}

commit b505dbee47b2d718fad79aec7dd3ee440db28b37
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Apr 10 20:46:07 2024 +0200

    Reland "[api] Fix instantiation of DictionaryTemplate across contexts"
    
    This is a reland of commit 819f64c6c4705c21252ea8411a81d0b19a32337f
    
    CL is unchanged. Blink needs rebaselining here.
    
    Original change's description:
    > [api] Fix instantiation of DictionaryTemplate across contexts
    >
    > The current version would allow instantiating the same template (which
    > is per Isolate) across various contexts without creating the proper
    > new map transitions. Map::Copy() was not sufficient to handle this
    > case.
    >
    > Instead, rely on the already existing template instantiations cache
    > which is context specific.
    >
    > Bug: chromium:333182464
    > Change-Id: I44f76ca120ba24a3f17d50f6307c83d9734a9c08
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443270
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93304}
    
    Bug: chromium:333182464
    Change-Id: Icc2606f110505a77852fe9a49ab94a28ea515a3b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5446983
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93308}

commit a066ca7be7b2b92bb8388b017c78045f1c567e16
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Apr 10 21:11:26 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/68c6746..5fb1330
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/aaab0bb..5384d31
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/6e7b54b..24c482a
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/c41b0af..7894b0d
    
    Rolling third_party/fp16/src: https://chromium.googlesource.com/external/github.com/Maratyszcza/FP16/+log/0a92994..581ac1c
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/51e4d21..e3b94d0
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/d953bd0..b54e4fd
    
    Rolling tools/luci-go: git_revision:06dc7a1f2eeb1d095f7876799458328a44438df1..git_revision:239be4fd8499df782db6bddb0f55832bf4f01307
    
    Rolling tools/luci-go: git_revision:06dc7a1f2eeb1d095f7876799458328a44438df1..git_revision:239be4fd8499df782db6bddb0f55832bf4f01307
    
    Roll created at https://cr-buildbucket.appspot.com/build/8750984349855678337
    
    Change-Id: Ic9b1a1ebfbfe273253a893c17b97eb6eb928237c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5444686
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93307}

commit c1e864913cd534df206e8115c98d245449c902b9
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Tue Apr 9 13:19:57 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of qfma,qfms in
    turboshaft
    
    Bug: v8:12716
    Change-Id: Ibf0a4e77bb54a89ee6e0661fce3f1b24d1788b25
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5433434
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93306}

commit 3ec395eaf15633a40add571e9183dfec0d0bc29a
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Wed Apr 10 22:00:34 2024 +0000

    Revert "[api] Fix instantiation of DictionaryTemplate across contexts"
    
    This reverts commit 819f64c6c4705c21252ea8411a81d0b19a32337f.
    
    Reason for revert: Causes fails on the blink-wpt bot: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Blink%20Linux/30216/overview
    
    Original change's description:
    > [api] Fix instantiation of DictionaryTemplate across contexts
    >
    > The current version would allow instantiating the same template (which
    > is per Isolate) across various contexts without creating the proper
    > new map transitions. Map::Copy() was not sufficient to handle this
    > case.
    >
    > Instead, rely on the already existing template instantiations cache
    > which is context specific.
    >
    > Bug: chromium:333182464
    > Change-Id: I44f76ca120ba24a3f17d50f6307c83d9734a9c08
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443270
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93304}
    
    Bug: chromium:333182464
    Change-Id: I0af35fdc2bcc6e9b143273aae8f429c23bca650c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5445569
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Owners-Override: Deepti Gandluri <gdeepti@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93305}

commit 819f64c6c4705c21252ea8411a81d0b19a32337f
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Apr 10 20:46:07 2024 +0200

    [api] Fix instantiation of DictionaryTemplate across contexts
    
    The current version would allow instantiating the same template (which
    is per Isolate) across various contexts without creating the proper
    new map transitions. Map::Copy() was not sufficient to handle this
    case.
    
    Instead, rely on the already existing template instantiations cache
    which is context specific.
    
    Bug: chromium:333182464
    Change-Id: I44f76ca120ba24a3f17d50f6307c83d9734a9c08
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443270
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93304}

commit 692f3d526a382b3c2f1d979105e777df16855e84
Author: Sébastien Doeraene <sjrdoeraene@gmail.com>
Date:   Wed Apr 10 19:27:23 2024 +0200

    [wasm][exnref] Implement special behavior of WA.JSTag in try_table.
    
    This commit ports the changes from 4e79015dc28659a8a031f06580e902720b35674c
    to `CatchCase`, i.e., the `try_table` instruction. In addition, it
    implements the same changes in Turboshaft, for which the implementation
    of exceptions initially came from 2c1c14d30c61fa4fa19184369e587cb663bd8580
    and already contained the `JSTag` handling for `CatchException`.
    
    This commit addresses part of https://issues.chromium.org/issues/333067164
    but not all. Only catching with `try_table` is fixed. `throw` remains
    unchanged.
    
    Change-Id: I7bad031e28eaf609fb12e7706d0b6a7cc63fa09d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435077
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93303}

commit a6f20690faabef2f9c57d3a0de1330ed7e254639
Author: Jose Dapena Paz <jdapena@igalia.com>
Date:   Fri Nov 17 19:01:34 2023 +0100

    [heap] On heap snapshot, store missing line ends out of heap
    
    When generating the heap snapshot, instead of first obtaining all
    the line ends in each of the Script heap objects, as a heap array,
    store them out of heap, to avoid modifying the heap while generating
    the snapshot.
    
    Bug: v8:14617
    Change-Id: I177015fd39f1662d29a1ca089a4cc5f26681e3a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5147609
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: José Dapena Paz <jdapena@igalia.com>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93302}

commit 8e8325388b144f222d1d8a145b6a86e499cb6200
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Apr 10 17:48:27 2024 +0200

    [wasm-imported-strings] Support "magic" imports for constants
    
    Per the discussion at:
    https://github.com/WebAssembly/js-string-builtins/issues/13
    this patch implements imported externref globals that can be
    requested to be automatically populated with string constants,
    with the string's value equaling the respective import's name.
    
    Bug: v8:14179
    Change-Id: Ie86dc28b5a337c64ef03cb879e45adf340001a00
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438375
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93301}

commit 50cb76253100cfb4a8a854e95705939fb04deeba
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Apr 10 16:29:22 2024 +0200

    [wasm][turboshaft] Add liftoff frame size to deopt FrameState
    
    Bug: v8:14667
    Change-Id: I319a00074be99bd18570bb1e15bbee448ae2e9be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5433058
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93300}

commit 7f86201854455e83fd3b45dbf741a5c2f2c00b6f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Apr 10 06:02:31 2024 -0700

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/0b1abd5e..6c60904d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751043483806934321
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: I54a2330ea5b815d33a9e5fcf82a5a6f3429452f6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443344
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93299}

commit dd7e58135832866b9fd5557e2d7c6ffbce37e17f
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Apr 10 17:51:11 2024 +0200

    [wasm] Allocate code spaces close to each other
    
    If we call between different Wasm modules we get better performance if
    the code spaces are allocated close to each other. We thus remember the
    end pointer of the previously allocated code space in the
    WasmCodeManager (global in the process), and use it as a hint for the
    next code space allocation.
    
    This mechanism replaces the explicit hint we were passing for allocating
    an additional code space within one module.
    
    R=jkummerow@chromium.org
    CC=dlehmann@chromium.org
    
    Change-Id: If8d8056a3626e4c1e918e29e5a178b72498c2d37
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443266
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93298}

commit 6cea5e02f3e3e172da227becff5b52d9df629b16
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Apr 10 09:18:39 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/a728977..68c6746
    
    Rolling buildtools/linux64: git_revision:f07499aebcf5b1b8f09f27f705e1b6e463ecdba1..git_revision:d823fd85da3fb83146f734377da454473b93a2b2
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/76297a9..a64dd87
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/eea3087..c41b0af
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/3d73dee..b1a777f
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/37d9855..7d77fb7
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/b6ed3ca..d953bd0
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751029649261967441
    
    Change-Id: I88339f7897a303ba87ee9012085328053cb5446b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443546
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93297}

commit 8cdd62978c249e36d1f88a0100d6e3a4801369ff
Author: Eva Herencsarova <evih@chromium.org>
Date:   Wed Apr 10 16:41:16 2024 +0200

    [wasm][multi-memory] Add multi-memory support to wasm-module-builder.cc
    
    We want to support multi-memory in the fuzzers which use the
    wasm-module-builder.cc.
    
    Before this change, the builder created one memory (32-bit) by default
    and no more memories could be added. This CL changes the builder to
    contain a WasmMemory vector. No memory is created by default after this
    CL.
    
    Bug: v8:14674
    Change-Id: I99ec7310db2bacbfc0f3841759385321ebee7807
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5443703
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93296}

commit 93a693e189e3c6de032ec1b0410cc5e2287ad1e0
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Apr 9 13:29:22 2024 +0200

    [wasm] Store js-to-wasm units directly in vector
    
    Since the compilation task does not need to hold a shared pointer any
    more, we can now store the units in the vector directly and hand out
    raw pointers.
    
    R=thibaudm@chromium.org
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_tsan_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux64_tsan_rel
    Change-Id: Ie3792631732130437ab4fb319dcff4017f93ccb6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435113
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93295}

commit 4451e2bf6e0ac78cd499b9eecbbbbbf3c56de91f
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Apr 9 11:57:55 2024 +0200

    [flags] Extract name from complex implication
    
    Previously, in DEBUG builds, FindImplicationByName could fail in the
    event that an implication involving comparison operators is used,
    such as "--max-opt 1". The implication "max_opt < 2" would fail to
    match with the correct Flag, and a DCHECK asserting that the found
    flag name matches the implication flag would fail.
    
    This CL fixes the issue by allowing for suffixes such as the above,
    when looking up flag implications. It works correctly as long as the
    flag with the suffix compares against other flags exactly as the flag
    without the suffix would compare. This is necessarily true if the
    suffix in implications begins with a space, e.g., "max_opt < 2", which
    is exactly what currently happens in our flag definitions.
    
    Change-Id: I310945ca283a6dce241c5626a0a1cc2d86dc9243
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438116
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93294}

commit c5a67affb5a0d7ebfe7ed2676dd93ff5d10f8afc
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Apr 10 14:16:31 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - WordBinop
    - WordBinopDeoptOnOverflow
    
    Additionally, OverflowCheckedBinop uses V<> for its inputs now, but
    for its ouptput, it needs V tuples, which don't currently exist.
    
    Bug: chromium:331100916
    Change-Id: I60a3bfde10fe483168579bea6d95ef5dfc745051
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419791
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93293}

commit 6ef0851d5bd13109be86958d307354257126194b
Author: Liviu Rau <liviurau@chromium.org>
Date:   Wed Apr 10 14:08:59 2024 +0200

    [test262] Remove dependency on blinkpy's TestImporter
    
    No-try: true
    Bug: 333520342
    Change-Id: Ia20ba499be17b8fbe86653de780dc7bb439f2d85
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5442778
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#93292}

commit 78038ea71252940cdb3a97682c86e2105e1ad4fd
Author: Andy Wingo <wingo@igalia.com>
Date:   Wed Apr 10 11:22:36 2024 +0000

    [ptr-compr] Mark/sweep EPT for array buffers when sandbox disabled
    
    In the configuration where you have V8_COMPRESS_POINTERS but not
    V8_ENABLE_SANDBOX, most external pointers are encoded directly instead
    of via handles to entries in the ExternalPointerTable.  However, array
    buffer extensions are unlike other ExternalPointerSlots in that they get
    EPT entries even when the sandbox is disabled.  This patch enables the
    mark/sweep/compact machinery for external pointer tables in this
    configuration.
    
    Based on patch by Kenton Varda <kenton@cloudflare.com>.
    
    Bug: v8:13788, v8:14621
    Change-Id: I01696094922a8b4acbd2d03646d829b0c918f63e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300549
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93291}

commit c43e461f0e32b9b43f76a57a015c87edb69b6260
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Apr 10 12:48:18 2024 +0200

    [turboshaft] Do not invalidate non-aliases that flow into FrameStates
    
    Bug: chromium:333195385, v8:12783
    Change-Id: Iaca45a8f6e6cc34b2b3fc73e757e2044f6b0af2b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5442854
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93290}

commit c699d36a27b45ce588832f0f28b3fa288fb76728
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Apr 10 11:27:15 2024 +0000

    [sandbox] Support --stress-compaction in external pointer tables
    
    When --stress-compaction is enabled, we now also run pointer table
    compaction whenever possible, in particular when we have at least one
    segment that we can evacuate.
    
    Drive-By: use 'Base' instead of 'ExternalEntityTable<Entry, size>'
    
    Change-Id: I60683d7c0c5c28a333953195bd3ab3c6ff064c53
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5441114
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93289}

commit f00d37866402a8ec0cf13b6c29e771e1a055ae08
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Apr 10 17:16:42 2024 +0800

    [riscv] Using sys_riscv_hwprobe to detect risc-v ISA
    
    Change-Id: I275c5cd9ffd9c55816c06b92c1d4b46761b5ca1c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5442563
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93288}

commit 86684e9647c134161f05f4c9c0e7f522c02e7550
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Apr 9 16:32:30 2024 +0200

    [wasm][deoptimizer] Add FrameStateType for liftoff frames
    
    This CL adds a new FramestateType::kkWasmLiftoffFunction and the
    corresponding TranslatedFrame::kWasmLiftoffFunction and
    TranslationOpcode::WASM_LIFTOFF_FRAME.
    
    Bug: v8:14667
    Change-Id: I767bc06adccfe9b9f233a083f1e0dcdf11aa8ca3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5433057
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93287}

commit cf163dba9bce10a6531c023177eb286ae00798c3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Apr 10 11:37:37 2024 +0200

    Reland "[turboshaft][wasm][memory64] Fix bounds check for memory64 guard region"
    
    This is a reland of commit ad5d69b8b03efc0744786c039b9d3dce70cd9737
    
    Change to original land:
    Skip the added test case on arm64 runs without pointer compression.
    
    Original change's description:
    > [turboshaft][wasm][memory64] Fix bounds check for memory64 guard region
    >
    > Fixed: 332939161
    > Change-Id: I52d8f2f35116acbd580a1aec0291aae2f6faec00
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435047
    > Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93270}
    
    Bug: v8:14716
    Fixed: 332939161
    Change-Id: Idd28342963a2a7ee21b6422838120e3d1fa23d34
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5442852
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93286}

commit f4ae43f5809bab1c3f4f5d55b1413f305abb6963
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Apr 10 11:08:32 2024 +0200

    Reland "[turboshaft] V<>ify Turboshaft"
    
    This is a reland of commit b13ea5898e7465d5ccb8a35b505dbf2630a1f3fe
    
    Explicitly namespace prefix uses of `struct Tuple` to avoid gcc
    complaints.
    
    Original change's description:
    > [turboshaft] V<>ify Turboshaft
    >
    > Operations processed:
    > - Projection
    > - Tuple
    >
    > Drive-by: Introduce Tuple<> for V<> and everything required for proper
    > handling of those.
    >
    > Bug: chromium:331100916
    > Change-Id: Ib7725e946ab3bf78a99efa431904b93af51007c7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426200
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93240}
    
    Bug: chromium:331100916
    Change-Id: Ifa68b487725d9ba363ffd4166af193199ca9565e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438053
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93285}

commit 58f93ef6eb08896fefbf7a4c6356afae679ce09e
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Apr 10 08:21:00 2024 +0000

    Revert "[sandbox] Introduce ExternalPointerTable::ManagedResource"
    
    This reverts commit 67b9a2503c6eefa1f27462e5c3dfd4b9ee2a9a53.
    
    Reason for revert: Reverting for now to reland with crrev.com/c/5439208
    
    Original change's description:
    > [sandbox] Introduce ExternalPointerTable::ManagedResource
    >
    > This is a (malloced) object located outside of the V8 heap whose
    > lifetime is tied to something inside the V8 heap. Examples include the
    > objects referenced via Managed objects or ArrayBufferExtensions. This
    > class is used to make this relationship explicit, which is necessary for
    > the sandbox: as these objects are referenced through the external
    > pointer table (EPT), it must be ensured that they are never deallocated
    > before their EPT entry is freed, or if they are, the entry must be
    > zapped/invalidated. Failure to do so results in a dangling EPT entry
    > that can lead to a use-after-free outside of the sandbox.
    >
    > For now, the ManagedResource does the latter: it keeps track of its
    > entry in the EPT and zaps the entry when the resource itself is
    > deallocated. However, in the future it might be more efficient to tie
    > the lifetime of the external resource directly to the table entry and
    > only free the resource when the table entry is freed. That, however,
    > likely first requires minor GC support for the EPT so that resources are
    > not kept around longer than necessary.
    >
    > Bug: chromium:331237575
    > Change-Id: I13c4c9dcac101aa1f6d10b902aac9260f68fdbda
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425025
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93228}
    
    Bug: chromium:331237575, chromium:333493383
    Change-Id: I827b5d685327c25d749bac3af28f2fc0f5be15ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5442853
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93284}

commit 09d6eb1995d55c0f904f597b28b6d166dce65e63
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Apr 10 08:18:12 2024 +0200

    [turboshaft] Maglev-to-ts: support a few more array operations
    
    Bug: v8:12783, v8:14581
    Change-Id: Id026ee1186ac6abaa474f3cea5d726cc79089eff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435043
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93283}

commit 6a1467666bf8f85bb49fe3d37fce5eba67763061
Author: Andy Wingo <wingo@igalia.com>
Date:   Fri Apr 5 13:56:53 2024 +0000

    Reland "[isolate-groups] Beginnings of isolate groups"
    
    This is a reland of commit 444c6033713578332970b657686d1da463c9cfa7
    
    Original change's description:
    > [isolate-groups] Beginnings of isolate groups
    >
    > Up to now, for users that want pointer compression on >4GB heaps, the
    > official answer has been to reserve one pointer cage per isolate.
    > However this is perhaps wasteful of virtual memory space; it would be
    > useful to offer an intermediate point, where the user can explicitly
    > group isolates together, to allow them to be allocated in the same
    > ranges of virtual memory.
    >
    > This patch takes an initial step in that direction by refactoring the
    > internal IsolateAllocator into IsolateGroup.  The next patch will add
    > API and tests.
    >
    > Bug: v8:14625
    >
    > Change-Id: I75c9a120df467b511a0f1a5500caaf28d41223c0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279595
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Andy Wingo <wingo@igalia.com>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93272}
    
    Bug: v8:14625
    Change-Id: I8972641c58685d9545df77e1670cad7b1844779c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5439559
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93282}

commit 4805c9e7c72811f96b02b6fb3d3c3ebf342818de
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue Apr 9 20:20:14 2024 +0200

    [api] Add DeserializeAPIWrapperCallback to Context::FromSnapshot()
    
    The way to construct the context is used by Blink but was missing
    the callbacks to deal with new ways of creating wrappers.
    
    Drive-by: Don't serialize empty data.
    
    Bug: chromium:328117814
    Change-Id: Ie9018e027119131b80a7aa3d0bbdd3c25c7c1013
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5439276
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93281}

commit 804265a621a1ac18a4e63a0c494ed2c1baaa3e78
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Apr 10 06:54:53 2024 +0000

    Revert "[sandbox] Fix handling of EPT::ManagedResources during table sweeping"
    
    This reverts commit c1ad2f948b6ce58f55504de5f19073415751eed8.
    
    Reason for revert: Fix is incorrect, see crrev.com/c/5439208
    
    Original change's description:
    > [sandbox] Fix handling of EPT::ManagedResources during table sweeping
    >
    > With the new managed resources, the external pointer table now
    > effectively owns certain external objects. As such, when the entry
    > referencing such an object is freed, the external object must be
    > invalidated. Previously, we forgot to do that when taking a shortcut
    > during sweeping: if an entire segment of the table was empty, we simply
    > deallocated that segment but forgot to check for managed resources. This
    > CL fixes that.
    >
    > Bug: chromium:333493383
    > Change-Id: I44bbd409e8eff7fa5aea0d1c092eab6c1a353665
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438117
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Auto-Submit: Samuel Groß <saelo@chromium.org>
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93257}
    
    Bug: chromium:333493383
    Change-Id: Ib71ed9c9c766d73dba2e9d065fbbdae50244ed14
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5439558
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93280}

commit 34c564a520cfc08a66891f65401030741a5b7bcb
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Apr 10 10:13:28 2024 +0800

    [riscv][wasm] Call on-heap import wrappers via a trampoline
    
    Port commit f18d6b0452142d5e411d502f5aa744ed9918307a
    
    Bug: v8:14564
    
    Change-Id: I856bc8dbafdda5e2031aec188300b4ee27707126
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5437758
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93279}

commit 858706aee7e92762eb64ea9ac5546a4d5842c60c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Apr 9 22:09:39 2024 -0700

    Update fuzztest (trusted)
    
    Rolling third_party/fuzztest: https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+log/bdb5d83..905f703
    
    fuzztest: Fix centipede build with is_debug = true (Reilly Grant)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/905f703
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751071172196936385
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Change-Id: I9ee69381fb2b8572c21f10df4f71dec29f47de88
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5441364
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93278}

commit 1704e0ff2e84d40fdd00c4a5ad6709209b40e35c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Apr 9 21:10:11 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/6c18022..a728977
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/8919328..aaab0bb
    
    Rolling buildtools/linux64: git_revision:415b3b19e094cd4b6982147693485df65037f942..git_revision:f07499aebcf5b1b8f09f27f705e1b6e463ecdba1
    
    Rolling buildtools/reclient: re_client_version:0.134.1.2c9285b-gomaip..re_client_version:0.138.0.e854224-gomaip
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/492cad8..76297a9
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/0b9e7b8..6e7b54b
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/f85dd80..eea3087
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/6ddb5cb..51e4d21
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/3c7e162..b84e3ff
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/d076d8b..37d9855
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/a56e90a..b6ed3ca
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751074946128100769
    
    Change-Id: I63416f81ae74949e2caac0b70b6274bb41ebc4a3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5440229
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93277}

commit e66eb7fbde55cb080cb697199dc1c68c3b705887
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Wed Apr 10 06:16:25 2024 +0000

    Revert "[turboshaft][wasm][memory64] Fix bounds check for memory64 guard region"
    
    This reverts commit ad5d69b8b03efc0744786c039b9d3dce70cd9737.
    
    Reason for revert: Regression test added here fails on the Arm64 simulator bot: https://chromium.googlesource.com/v8/v8/+/ad5d69b8b03efc0744786c039b9d3dce70cd9737
    
    Original change's description:
    > [turboshaft][wasm][memory64] Fix bounds check for memory64 guard region
    >
    > Fixed: 332939161
    > Change-Id: I52d8f2f35116acbd580a1aec0291aae2f6faec00
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435047
    > Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93270}
    
    Change-Id: I7c012d2885d20f1849ace8b820addd891791bb98
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5442553
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Deepti Gandluri <gdeepti@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93276}

commit f5d00d1ef43bf7ea19718051511fbbb7f98f263a
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Wed Apr 10 06:03:27 2024 +0000

    Revert "Reland "[sandbox] Turn ArrayBufferExtension into a EPT::ManagedResource""
    
    This reverts commit 644c2e2718d0c86ce59de3304027a11b8347dd9c.
    
    Reason for revert: Suspected reason for crashes on Windows GPU bots: https://ci.chromium.org/ui/p/chromium/builders/try/win-rel/569832/overview
    
    Original change's description:
    > Reland "[sandbox] Turn ArrayBufferExtension into a EPT::ManagedResource"
    >
    > This is a reland of commit f50c1f41e612d5302b0e6297c71babc10be72108
    >
    > We should invalidate the EPT entry during serialization as we're
    > temporarily releasing ownership of the extension.
    >
    > Original change's description:
    > > [sandbox] Turn ArrayBufferExtension into a EPT::ManagedResource
    > >
    > > The lifetime of an (out-of-heap) ArrayBufferExtension is tied to the
    > > lifetime of an (in-heap) ArrayBuffer. As it is referenced through the
    > > external pointer table, it should therefore become a ManagedResource to
    > > explicitly tie the lifetime of the extension object to the EPT entry for
    > > it and thereby avoid potentially dangling EPT entries.
    > >
    > > Bug: chromium:327550517
    > > Change-Id: I217fcc1d719dcdcc2d9893c72fba616c78eb5b83
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434873
    > > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#93254}
    >
    > Bug: chromium:327550517
    > Change-Id: I5fe146d342c58aaed79dde49a0e8d7f86a2ebe4f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438119
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93263}
    
    Bug: chromium:327550517
    Change-Id: I887a4a7c89ceb46d94361d03bb492dfd64145b1b
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5441834
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Owners-Override: Deepti Gandluri <gdeepti@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Deepti Gandluri <gdeepti@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93275}

commit da3d69b1a47e638f7ee78cc37ede16530f32e527
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Tue Apr 9 20:53:10 2024 +0000

    Revert "[isolate-groups] Beginnings of isolate groups"
    
    This reverts commit 444c6033713578332970b657686d1da463c9cfa7.
    
    Reason for revert: Likely culprit for breakage on the Arm64 Simulator no pointer compression bot: https://logs.chromium.org/logs/v8/buildbucket/cr-buildbucket/8751110154447341985/+/u/Check/regress-332939161
    
    Original change's description:
    > [isolate-groups] Beginnings of isolate groups
    >
    > Up to now, for users that want pointer compression on >4GB heaps, the
    > official answer has been to reserve one pointer cage per isolate.
    > However this is perhaps wasteful of virtual memory space; it would be
    > useful to offer an intermediate point, where the user can explicitly
    > group isolates together, to allow them to be allocated in the same
    > ranges of virtual memory.
    >
    > This patch takes an initial step in that direction by refactoring the
    > internal IsolateAllocator into IsolateGroup.  The next patch will add
    > API and tests.
    >
    > Bug: v8:14625
    >
    > Change-Id: I75c9a120df467b511a0f1a5500caaf28d41223c0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279595
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Andy Wingo <wingo@igalia.com>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93272}
    
    Bug: v8:14625
    Change-Id: I0e03c2b9aa1cd54c2db68219a8f54adcd2ab6f1c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5440944
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Deepti Gandluri <gdeepti@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93274}

commit 5478e50bb40d4b8b91f2a3f1d199228619be9892
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Apr 9 13:32:06 2024 -0400

    Fix build with gcc12
    
    Fixes the following error:
       ```
       error: loop variable ‘json_in’ of type ‘const std::string&’ {aka
       ‘const std::__cxx11::basic_string<char>&’} binds to a temporary
       constructed from type ‘const char* const’
       ```
    
    Change-Id: I7f0df5d07997bf693cf621cb4ec50d1c077a7934
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5440536
    Reviewed-by: Yang Guo <yangguo@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93273}

commit 444c6033713578332970b657686d1da463c9cfa7
Author: Andy Wingo <wingo@igalia.com>
Date:   Fri Apr 5 13:56:53 2024 +0000

    [isolate-groups] Beginnings of isolate groups
    
    Up to now, for users that want pointer compression on >4GB heaps, the
    official answer has been to reserve one pointer cage per isolate.
    However this is perhaps wasteful of virtual memory space; it would be
    useful to offer an intermediate point, where the user can explicitly
    group isolates together, to allow them to be allocated in the same
    ranges of virtual memory.
    
    This patch takes an initial step in that direction by refactoring the
    internal IsolateAllocator into IsolateGroup.  The next patch will add
    API and tests.
    
    Bug: v8:14625
    
    Change-Id: I75c9a120df467b511a0f1a5500caaf28d41223c0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279595
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93272}

commit 57c39ff5a31042b8c7a36b2091cf5266459aec74
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Apr 9 09:05:08 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/d3191d3..6c18022
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/e76b306..3c7e162
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/4a26ea7..a56e90a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751120245954338337
    
    Change-Id: Ie491df5e9b7d4b23aa16862341804aa75dd84339
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5440533
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93271}

commit ad5d69b8b03efc0744786c039b9d3dce70cd9737
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Apr 9 13:59:45 2024 +0200

    [turboshaft][wasm][memory64] Fix bounds check for memory64 guard region
    
    Fixed: 332939161
    Change-Id: I52d8f2f35116acbd580a1aec0291aae2f6faec00
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435047
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93270}

commit 91f2d3aea4dfb18839c4e58eb22a9020cc804bca
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Apr 9 16:23:36 2024 +0200

    [wasm][liftoff] Fix check for statically OOB
    
    A classic off-by-one for computing whether a static index is statically
    known to be OOB (introduced in https://crrev.com/c/5425022).
    In most cases we would get a signature mismatch when reading the
    signature OOB from the dispatch table, but in rare cases we also get
    crashes because the signature check passes and we load a garbage pointer
    from the dispatch table.
    
    R=mliedtke@chromium.org
    
    Bug: chromium:333457544
    Change-Id: I34a6bc5082d73d79c14ee5b9ed0141ea6d6b1d0b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5439414
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93269}

commit af31d8b83dc398eca251555e3217598a8339f3d0
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Apr 9 15:51:43 2024 +0200

    [maglev] Enable on android by default
    
    Bug: v8:7700
    Change-Id: Ia46d780a7b6a670ac4f674ff21f91a03644fcd41
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5424735
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93268}

commit 268d535506cc9efc0a16130b3f0b23e410c9498e
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Apr 9 08:46:35 2024 -0400

    PPC/s390: [wasm][x64] Fix no-sandbox ptr-compr
    
    Port 63b57b518a0214a5f37ffaa751361270fc2340d6
    
    Original Commit Message:
    
        This adds decompression when loading the code pointer from the
        WasmApiFunctionRef.
    
    R=clemensb@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Iab764d4d9b5456e84490e8effc52251eed4d17ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438477
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93267}

commit 3e850f62e2aaf65e9cc2c36f7a1e02a7f4ad5217
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Apr 4 15:45:25 2024 +0200

    [tiering] Fix race in cached_tiering_decision
    
    The cached_tiering_decision on the sfi must not be modified on compile
    threads.
    
    Fixed: chromium:332004871
    Change-Id: Idfa482584838001804b53bd916bcd4f69bbe6ee6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5424731
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93266}

commit 89f08ea561eac32575bb50b33883b14bb911566a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Apr 9 14:05:18 2024 +0200

    [turboshaft] V<>ify Turboshaft WasmTypeAnnotationOp
    
    This CL also adapts some builtin call interfaces both in Turboshaft as
    well as in Torque.
    
    Bug: 331100916
    Change-Id: Id03dd150f099f00fa32c1a3d003a7014c11e5d4f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435319
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93265}

commit eb20072d4b84666d1027bdbaef4681ac3e9925a1
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Apr 9 13:34:41 2024 +0000

    [fuzzilli] Fix 32-bit builds
    
    The crash simulation code used by Fuzzilli would previously not compile
    on 32 bit systems for various reasons. This CL fixes that.
    
    Change-Id: Icc564f0fa79f5a45f75303b430a23a78c19cdd5a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5439415
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Carl Smith <cffsmith@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93264}

commit 644c2e2718d0c86ce59de3304027a11b8347dd9c
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Apr 9 12:19:56 2024 +0000

    Reland "[sandbox] Turn ArrayBufferExtension into a EPT::ManagedResource"
    
    This is a reland of commit f50c1f41e612d5302b0e6297c71babc10be72108
    
    We should invalidate the EPT entry during serialization as we're
    temporarily releasing ownership of the extension.
    
    Original change's description:
    > [sandbox] Turn ArrayBufferExtension into a EPT::ManagedResource
    >
    > The lifetime of an (out-of-heap) ArrayBufferExtension is tied to the
    > lifetime of an (in-heap) ArrayBuffer. As it is referenced through the
    > external pointer table, it should therefore become a ManagedResource to
    > explicitly tie the lifetime of the extension object to the EPT entry for
    > it and thereby avoid potentially dangling EPT entries.
    >
    > Bug: chromium:327550517
    > Change-Id: I217fcc1d719dcdcc2d9893c72fba616c78eb5b83
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434873
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93254}
    
    Bug: chromium:327550517
    Change-Id: I5fe146d342c58aaed79dde49a0e8d7f86a2ebe4f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438119
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93263}

commit 4aafbffa945e0b5b63042211d55a86771f2bf185
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Apr 9 12:51:20 2024 +0000

    Revert "[tracing] Use base::TimeTicks for trace macro timestamps"
    
    This reverts commit 33774bd08e6438f6d7e6a97b912777177e3bae7f.
    
    Reason for revert: Failing the chromium roll:
    https://ci.chromium.org/ui/p/chromium/builders/try/linux_chromium_compile_dbg_ng/1965774/overview
    
    Original change's description:
    > [tracing] Use base::TimeTicks for trace macro timestamps
    >
    > This fixes an issue where performance.measure slices had incorrect
    > timestamps when running with perfetto (the legacy tracing used
    > microseconds, while perfetto uses nanoseconds, and we were passing in an
    > int64_t without units).
    >
    > Change-Id: I42bec62fb350bd2090ed12b3b0db111625ff03f5
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435116
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93259}
    
    Change-Id: I424b7bc0b917bb95ece808e6dd155cfee39544d5
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5439413
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93262}

commit bb7e324cf9de0758eee05557542a1206ac757541
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Apr 8 16:35:09 2024 +0200

    [wasm] Serialize enabled features
    
    This adds the set of enabled features to the serialized data, such that
    mismatches in the enabled features (e.g. due to origin trials) are
    detected when deserializing. On a mismatch, the cached data is simply
    ignored and the module is recompiled from scratch. The cache entry might
    then be overwritten with the new version.
    
    R=jkummerow@chromium.org
    
    Fixed: v8:14711
    Change-Id: I79d01b984a16a886f49196d08b5ff102360d4ef6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435118
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93261}

commit ff9ad962ec3dfcbae93b32da2b7dc2b13b86b387
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Apr 9 11:34:26 2024 +0200

    [wasm] Simplify LinkError handling
    
    We don't need to pass around "module_name" and "import_name", as
    we can get both easily from the "import_index".
    
    Change-Id: Ice2fd8e183e652722cf8097d042b931b193fdbdb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438373
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93260}

commit 33774bd08e6438f6d7e6a97b912777177e3bae7f
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Apr 8 15:58:09 2024 +0200

    [tracing] Use base::TimeTicks for trace macro timestamps
    
    This fixes an issue where performance.measure slices had incorrect
    timestamps when running with perfetto (the legacy tracing used
    microseconds, while perfetto uses nanoseconds, and we were passing in an
    int64_t without units).
    
    Change-Id: I42bec62fb350bd2090ed12b3b0db111625ff03f5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435116
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93259}

commit 825ab7cde2d11ef584bb955d7c7e08525a06b21b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Apr 9 09:58:46 2024 +0000

    Revert "[sandbox] Turn ArrayBufferExtension into a EPT::ManagedResource"
    
    This reverts commit f50c1f41e612d5302b0e6297c71babc10be72108.
    
    Reason for revert: Failures on Mac arm64:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Mac%20-%20arm64%20-%20debug/16991/test-results?sortby=&groupby=
    
    Original change's description:
    > [sandbox] Turn ArrayBufferExtension into a EPT::ManagedResource
    >
    > The lifetime of an (out-of-heap) ArrayBufferExtension is tied to the
    > lifetime of an (in-heap) ArrayBuffer. As it is referenced through the
    > external pointer table, it should therefore become a ManagedResource to
    > explicitly tie the lifetime of the extension object to the EPT entry for
    > it and thereby avoid potentially dangling EPT entries.
    >
    > Bug: chromium:327550517
    > Change-Id: I217fcc1d719dcdcc2d9893c72fba616c78eb5b83
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434873
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93254}
    
    Bug: chromium:327550517
    Change-Id: Ib3728e97d5697359a232865d1154d8499bf82721
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438118
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93258}

commit c1ad2f948b6ce58f55504de5f19073415751eed8
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Apr 9 09:20:14 2024 +0000

    [sandbox] Fix handling of EPT::ManagedResources during table sweeping
    
    With the new managed resources, the external pointer table now
    effectively owns certain external objects. As such, when the entry
    referencing such an object is freed, the external object must be
    invalidated. Previously, we forgot to do that when taking a shortcut
    during sweeping: if an entire segment of the table was empty, we simply
    deallocated that segment but forgot to check for managed resources. This
    CL fixes that.
    
    Bug: chromium:333493383
    Change-Id: I44bbd409e8eff7fa5aea0d1c092eab6c1a353665
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438117
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93257}

commit 0eee57143da37c156b853d91047b6443c7a73f1d
Author: Marja Hölttä <marja@google.com>
Date:   Tue Apr 9 11:03:35 2024 +0200

    [metrics] Fix code cache related histograms
    
    CacheBehaviour::kHitIsolateCacheWhenProduceCodeCache is never emitted
    since ScriptCompileTimerScope::set_producing_code_cache() is never
    called. These samples were counted in the kHitIsolateCacheWhenNoCache
    bucket.
    
    Producing the code cache is a separate API call nowadays. We can't
    know for sure whether the embedder will make the API call or not.
    
    Currently, Chromium always sets the no_cache_reason to
    kNoCacheBecauseDeferredProduceCodeCache when it's going to produce the
    code cache, so this CL uses that as a signal.
    
    Change-Id: I0dc4cbdc2aebcb63f082700b0a3145014446e37f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435114
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93256}

commit 8cd948a898e7da4fbb2ba491ed3b598125ef23a5
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Apr 8 17:03:42 2024 +0200

    [tiering] Make NotifyICChanged consider sparkplug_compiled state
    
    A function that doesn't have baseline code, but is marked as
    sparkplug_compiled, should be considered as-if having sparkplug for the
    purposes of NotifyICChanged (since it will have sparkplug soon, and the
    interrupt budget is now for the next tier-up).
    
    Bug: chromium:332947111
    Change-Id: I6c9f2f382b08b80b22e65685cd64a6cbc5b4e8d0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435075
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93255}

commit f50c1f41e612d5302b0e6297c71babc10be72108
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Apr 8 13:04:01 2024 +0000

    [sandbox] Turn ArrayBufferExtension into a EPT::ManagedResource
    
    The lifetime of an (out-of-heap) ArrayBufferExtension is tied to the
    lifetime of an (in-heap) ArrayBuffer. As it is referenced through the
    external pointer table, it should therefore become a ManagedResource to
    explicitly tie the lifetime of the extension object to the EPT entry for
    it and thereby avoid potentially dangling EPT entries.
    
    Bug: chromium:327550517
    Change-Id: I217fcc1d719dcdcc2d9893c72fba616c78eb5b83
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434873
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93254}

commit 64fef3b160561e772ef5f0c4f744675909a91deb
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Apr 9 06:41:21 2024 +0000

    [sandbox] Fix handling of EPT::ManagedResources in snapshot stress mode
    
    When snapshot stress mode is active, we may serialize and deserialize
    external objects, in particular now EPT::ManagedResources. However, the
    original isolate effectively retains ownership of the resource, so this
    CL adds a small workaround into the Deserializer to deal with this. Once
    the external pointer table directly owns the external resource, this
    workaround can be removed again.
    
    Bug: chromium:331237575
    Change-Id: I4da6d74479183550a9692f5be5e6e4f2987dffe3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435074
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93253}

commit 31a98b03f9e6a879b9bdea8a48cc5d3de042a4ed
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Apr 9 09:57:55 2024 +0200

    [tiering] Increase invocation-count-for-maglev on android
    
    As noticed by George Wort the Maglev interrupt budget is too
    aggressive for android devices. Absent a clear cut root cause for now we
    determined a relaxed invocation count that works well across a large
    range of android devices.
    
    Bug: v8:7700, chromium:328115456
    Change-Id: I6f1653e241e5d73bcea6bf773691ce8893d255be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438054
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93252}

commit 44ecc94b4b56cf09a3d80dd473b13ace7fc44d5d
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Apr 8 22:06:20 2024 +0200

    [wasm-imported-strings] Include proper offset in LinkErrors
    
    This includes the correct offset in any LinkErrors about incorrect
    signatures of compile-time imported string functions.
    
    Bug: v8:14179
    Change-Id: I07c90e4fb4769a699f4f957c54a29a0648398129
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435048
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93251}

commit 7fd98f16f3580109b682ee37bd125fd9e1a11f23
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Apr 9 15:50:53 2024 +0800

    [loong64][mips64][wasm] Call on-heap import wrappers via a trampoline
    
    Port commit f18d6b0452142d5e411d502f5aa744ed9918307a
    
    Change-Id: I289bc3274f18e447fe1a1aa1c9948ea9e9da4ebc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5437897
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#93250}

commit 2c7a3a917ce1b007432b5c57e8314cff9dbe90b6
Author: pthier <pthier@chromium.org>
Date:   Tue Apr 9 09:44:09 2024 +0200

    [api] Deprecate VisitExternalResources
    
    This API doesn't have any known users. Chromium is the only known user
    of external strings and the last use of this API within chromium was
    removed ~10 years ago.
    
    Bug: v8:14172
    Change-Id: I304256b1151956be206c9d896fe7be0d9519838f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5438114
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93249}

commit d6901412103d7eb3dff37a3dbd6952dcfa922eaa
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Apr 8 17:19:06 2024 +0200

    [turboshaft][wasm-stringref] Annotate functions that can trap
    
    The changed stringref runtime functions can trap (see runtime-wasm.cc).
    Similar as:
    https://crrev.com/c/5419422
    https://crrev.com/c/5426675
    
    Fixed: v8:14710
    Change-Id: I8d9f7774ed1c19bcb2d31ed5f78e6d3c44080012
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435073
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93248}

commit bcd5bb2b71345618dd161ae93c719d51de065411
Author: Simon Zünd <szuend@chromium.org>
Date:   Mon Apr 8 10:16:42 2024 +0200

    Roll inspector_protocol to 64cc2301620c04f0fe0313ae94a9319f003603cf
    
    R=caseq@chromium.org
    
    Bug: 326554286
    Change-Id: I191d84567cf31774c3c6708fafe2913fd9063f38
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434035
    Reviewed-by: Yang Guo <yangguo@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93247}

commit f2d4e18f9c2329cac2974417b3dd306233db655e
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Apr 8 08:53:17 2024 +0200

    [snapshot] Faster deserialize for embedder fields
    
    Speed up context deserialization of embedder fields section.
    
    Bug: chromium:328117814
    Change-Id: I50544469f3e1dadee40a483e3aebbbf849118245
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5431935
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93246}

commit 9ac04ba7d35ef573231122f1f8b3e6afab4be77c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Apr 8 21:06:54 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/bbc1efa..d3191d3
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/17551f6..f85dd80
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/f10e11f..3d73dee
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/9ebe4a2..e76b306
    
    Rolling third_party/siso: git_revision:3cec541372ec0556127a641d9c6e4a90d46ba1b8..git_revision:437716714a744e272fabdf1377b8878ccac26b43
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751165544772906529
    
    Change-Id: Ie1564b804ee928e1e6ab86e6288b20909939c0a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435063
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93245}

commit 6ea594ff71328c4b692b3e424a45c5caa3535f8e
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Sun Apr 7 09:52:59 2024 +0800

    [riscv] Skip check sv57 when enable pointer compress
    
    Change-Id: I4332d3849d113af105630c0e20cd2b5e3deb9392
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5430889
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93244}

commit 2ce051bb21edff5e66c4e87180c9d90b18fdf526
Author: Daniel Cheng <dcheng@chromium.org>
Date:   Thu Apr 4 07:13:03 2024 +0000

    Work around pre-existing MSan violations in simulator
    
    The simulator relies on UB and occasionally leaves return values
    partially uninitialized: the functions it dispatches to may return
    Object or ObjectPair, but the trampoline helper assumes that all
    dispatched functions return an ObjectPair.
    
    MSan eager checks can now detect these types of violations. For now,
    simply suppress this MSan violation by unconditionally unpoisoning
    the result value to unblock further investigation and fixes.
    
    Bug: chromium:1369167
    Change-Id: I259b9bf76b9a888fedf1c189de875d6d9bf96aee
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5422077
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Daniel Cheng <dcheng@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93243}

commit ca1edecf40272f6b8a4f34dfefc1b214b06525e0
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Apr 8 09:23:58 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/9280ce2..492cad8
    
    Rolling third_party/clang-format/script: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/clang/tools/clang-format/+log/e533793..3c0acd2
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/246580c..17551f6
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/ac82d4f..9ebe4a2
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/c235897..4a26ea7
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751210839857433489
    
    Change-Id: I2c446021f409eb06a42982728fac510fdcccc90a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434821
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93242}

commit 0643224abbb0b801ef2c9066a23b6ec735a874b2
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Mon Apr 8 17:26:48 2024 +0000

    Revert "[turboshaft] V<>ify Turboshaft"
    
    This reverts commit b13ea5898e7465d5ccb8a35b505dbf2630a1f3fe.
    
    Reason for revert: Breaks Linux gcc debug bot: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20gcc%20light%20-%20debug%20builder/7353/overview
    
    Original change's description:
    > [turboshaft] V<>ify Turboshaft
    >
    > Operations processed:
    > - Projection
    > - Tuple
    >
    > Drive-by: Introduce Tuple<> for V<> and everything required for proper
    > handling of those.
    >
    > Bug: chromium:331100916
    > Change-Id: Ib7725e946ab3bf78a99efa431904b93af51007c7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426200
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93240}
    
    Bug: chromium:331100916
    Change-Id: I666d8dfa855c3b68282bac6584ab0edc9e27525f
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434666
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Owners-Override: Deepti Gandluri <gdeepti@chromium.org>
    Commit-Queue: Deepti Gandluri <gdeepti@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93241}

commit b13ea5898e7465d5ccb8a35b505dbf2630a1f3fe
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Apr 8 16:37:24 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - Projection
    - Tuple
    
    Drive-by: Introduce Tuple<> for V<> and everything required for proper
    handling of those.
    
    Bug: chromium:331100916
    Change-Id: Ib7725e946ab3bf78a99efa431904b93af51007c7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426200
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93240}

commit ae6712a83a1c1a3437de59c944155f87310a01f1
Author: Stephen Roettger <sroettger@google.com>
Date:   Mon Apr 8 16:06:08 2024 +0200

    [heap] replace std::bit_width with non-c++20 version
    
    Change-Id: Ic5b5c4cf34a0ea3b0710bfa6d7566019c0cd899c
    Bug: chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5435037
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93239}

commit a3eeefe020a8d401b22abfc1e50a98ff11d2f4c2
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Apr 8 09:57:24 2024 -0400

    PPC/s390: Reland "[wasm] Call on-heap import wrappers via a trampoline"
    
    Port f18d6b0452142d5e411d502f5aa744ed9918307a
    
    Original Commit Message:
    
        This is a reland of commit 435e04b08926f23861dd19938246dbf00a3bd7c9.
        PS2 adds the missing underscores for arm64 no-ptr-compression builds.
    
        Original change's description:
        > [wasm] Call on-heap import wrappers via a trampoline
        >
        > This allows us to remove the `code` field from WasmInternalFunction and
        > always call the stored `call_target`.
        > The only situation where we still needed the fallback to call via the
        > code pointer was for on-heap wasm-to-js wrappers. Those always receive
        > the WasmApiFunctionRef as first parameter, so we can instead store the
        > code pointer there and call a builtin which loads the instruction start
        > from the code pointer and then tail-calls (jumps) there.
        >
        > This generates smaller code for every call_ref by avoiding the check for
        > `call_target == 0` and the fallback to load the instruction start from
        > the code pointer table.
        >
        > R=ahaas@chromium.org
        > CC=manoskouk@chromium.org
        >
        > Bug: v8:14564
        > Change-Id: I40ea7d9b409dc654bd90c3360c0bf064cf4978ab
        > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419396
        > Reviewed-by: Andreas Haas <ahaas@chromium.org>
        > Commit-Queue: Clemens Backes <clemensb@chromium.org>
        > Cr-Commit-Position: refs/heads/main@{#93191}
    
    R=clemensb@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I5d879ad3e75e1b33bc9165235cb6944e0d941d50
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434296
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93238}

commit 6632dcfe2d12273589b9da8c094707120d588cba
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Apr 5 12:42:34 2024 -0400

    PPC: fix comment on patching the pc offset
    
    Change-Id: I2e38ff9f6be960e2e514f57a34c3ae4da0df74cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5428195
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93237}

commit ccd202a626002bbfab28e552dedb2694317476a9
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Apr 5 17:33:04 2024 +0200

    [log] Add LOGGING VMState
    
    ... and allow hiding it in profview, so that logging overheads don't
    dominate the profile.
    
    Change-Id: Ic4a7a8568b328c51e85a93dcbea77309ea954150
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426190
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93236}

commit 3f0a0f568ceaed276811364ed122eb0449deb5f2
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Apr 8 14:19:33 2024 +0200

    [wasm] Remove backlink from internal function to funcref
    
    The WasmFuncRef is the in-sandbox wrapper around the trusted
    WasmInternalFunction. They currently link each other, which makes it
    difficult to allocate the two together. Also, we mostly need to get from
    the function reference to the internal function.
    
    Hence this CL removes the link from the WasmInternalFunction back to the
    WasmFuncRef. In order to get the WasmFuncRef from a WasmFunctionData, we
    now link the WasmFuncRef from there instead of the WasmInternalFunction
    directly. This requires one more indirection for js-to-wasm calls.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14564
    Change-Id: Ifab716a11e6db0ccad54890d50c31db348b11a65
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426019
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93235}

commit 1205b95d81058856d53697117896fe8717ddaad2
Author: Stephen Roettger <sroettger@google.com>
Date:   Mon Apr 8 14:22:40 2024 +0200

    Reland "[sandbox] sandboxify the Metadata pointer"
    
    This is a reland of commit ad628eec26485a8d9d09e59520b5069cab4bb64a
    
    Fix:
    * re-disable pkey support with tsan (dropped by accident during rebase)
    * ensure that the atomic load for tsan is using the right size
    
    Original change's description:
    > [sandbox] sandboxify the Metadata pointer
    >
    > If the sandbox is enabled, keep a global array of metadata pointers for
    > all MemoryChunks. This fixes chromium:40849120.
    >
    > Change-Id: Ia19c49d41b2f69c0cfa79571749dbd5515d33ed6
    > Bug: chromium:40849120
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385872
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > Cr-Commit-Position: refs/heads/main@{#93224}
    
    Bug: chromium:40849120
    Change-Id: Ia254922a2c2b3c8923f272646c69a768003f53c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5433061
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93234}

commit ef58cad72c78506b85c55ace095200cc1d31c4de
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Apr 5 12:42:04 2024 +0200

    [wasm][arm] Avoid DCHECK for statically OOB function indexes
    
    Since https://crrev.com/c/5401777 we optimize the dispatch table access
    for static indexes on indirect calls. For very large indexes which would
    always trigger the bounds check (and trap) we then computed a dispatch
    table offset above kMaxInt, which triggered a DCHECK on arm.
    In release builds this would lead to the generation of wrong code, but
    this code would never get executed because we always hit the bounds
    check before.
    
    This CL refactors the code a bit to detect static OOB accesses in even
    more cases, and avoids the DCHECK by just using an offset of 0, which is
    OK because the code will never be executed anyway.
    
    Just not generating any code is difficult because we need to leave the
    value stack in a consistent state, so we just keep generating the
    unreachable code.
    
    R=ahaas@chromium.org
    
    Fixed: chromium:332572762
    Change-Id: I310135ac188701e780d8420e3eee8e9c1c3f99ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425022
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93233}

commit 63e4e0f3b53c8b6e089730727ba82e17689ad606
Author: pthier <pthier@chromium.org>
Date:   Mon Apr 8 12:40:35 2024 +0200

    [regexp] Fix modifier parsing
    
    Modifiers and Group Specifiers/Assertions cannot be mixed.
    
    Bug: v8:12956
    Fixed: 332927599
    Change-Id: I8f20589c1355972659ec00136bfacbf1ea94df9b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5433060
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93232}

commit 8d1fe7baa4b075a180b2f84f81ae6b70ae63ba12
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Apr 8 12:33:41 2024 +0200

    [wasm] Hold background compile scope for longer
    
    The JSToWasmWrapperCompilationUnit holds a pointer to the decoded
    WasmModule and the signature, hence we need to keep the NativeModule
    alive while compiling these wrappers.
    
    Instead of opening a new BackgroundCompileScope for every compilation
    unit, hold a single scope alive while compiling all wrappers. This
    reduces overhead for the common case that the NativeModule is still
    alive after wrapper compilation, and fixes a DCHECK for overflowing
    counters.
    
    R=thibaudm@chromium.org
    
    Fixed: v8:14626
    Change-Id: I58b8184ce2d3fca72845f9e367648f75f9fbbef2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5433059
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93231}

commit 63b57b518a0214a5f37ffaa751361270fc2340d6
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Apr 8 13:48:30 2024 +0200

    [wasm][x64] Fix no-sandbox ptr-compr
    
    This adds decompression when loading the code pointer from the
    WasmApiFunctionRef.
    
    R=ahaas@chromium.org
    
    Bug: v8:14709, v8:14564
    Change-Id: Ie745e35178d83948cd95986f107a3f13694d8793
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434613
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93230}

commit c40fc0cb4e5f0fdad224576c85f5de229c306570
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Apr 8 12:37:06 2024 +0200

    [maglev] Fix DeepForEachInputAndDeoptObject to consider nested captured objects
    
    The function passed as parameter to DeepForDeoptObject tree walker needs
    to consider nested escaped objects. We use a recursive lambda for that.
    
    In the test case, for instance, we should not try to apply argument `f`
    (the node marker) to a captured context (InlinedAllocation) that is
    the extension value of another captured context that will be
    materialized when/if we deopt.
    
    Fixed: 332947120
    Bug: 326091155
    Change-Id: Ibab8bb758cc7ce704cfeee4200f6fcab0eaf4728
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5431937
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93229}

commit 67b9a2503c6eefa1f27462e5c3dfd4b9ee2a9a53
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Apr 5 12:41:33 2024 +0000

    [sandbox] Introduce ExternalPointerTable::ManagedResource
    
    This is a (malloced) object located outside of the V8 heap whose
    lifetime is tied to something inside the V8 heap. Examples include the
    objects referenced via Managed objects or ArrayBufferExtensions. This
    class is used to make this relationship explicit, which is necessary for
    the sandbox: as these objects are referenced through the external
    pointer table (EPT), it must be ensured that they are never deallocated
    before their EPT entry is freed, or if they are, the entry must be
    zapped/invalidated. Failure to do so results in a dangling EPT entry
    that can lead to a use-after-free outside of the sandbox.
    
    For now, the ManagedResource does the latter: it keeps track of its
    entry in the EPT and zaps the entry when the resource itself is
    deallocated. However, in the future it might be more efficient to tie
    the lifetime of the external resource directly to the table entry and
    only free the resource when the table entry is freed. That, however,
    likely first requires minor GC support for the EPT so that resources are
    not kept around longer than necessary.
    
    Bug: chromium:331237575
    Change-Id: I13c4c9dcac101aa1f6d10b902aac9260f68fdbda
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425025
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93228}

commit 1576bd328084f496150d84cb95ea0782c02064d2
Author: Eric Leese <leese@chromium.org>
Date:   Fri Apr 5 17:39:48 2024 +0200

    Scan for chained calls to .catch() for catch prediction
    
    When doing catch prediction on a rejected promise assumed to be
    propagating up the call stack, we check on each js frame if the
    returned value is then used for chained promise methods like
    .then, .finally, and .catch, and if any call in the chain is
    .catch or a two-argument .then, we assume the rejection will be
    caught.
    
    Also overhauls how we scan through inlined frames and adds
    tests for catch prediction in inlined call stacks.
    
    Bug: b:40283993
    Change-Id: I3b327c6823b2da3d160a237aefba3bdac96ae808
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388436
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93227}

commit f16b8f7ebe8bb3d94337ef73184ca19322a04c9d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Apr 8 11:52:30 2024 +0000

    Revert "[sandbox] sandboxify the Metadata pointer"
    
    This reverts commit ad628eec26485a8d9d09e59520b5069cab4bb64a.
    
    Reason for revert: failure on TSAN mksnapshot:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20debug%20builder/7811/overview
    
    Original change's description:
    > [sandbox] sandboxify the Metadata pointer
    >
    > If the sandbox is enabled, keep a global array of metadata pointers for
    > all MemoryChunks. This fixes chromium:40849120.
    >
    > Change-Id: Ia19c49d41b2f69c0cfa79571749dbd5515d33ed6
    > Bug: chromium:40849120
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385872
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > Cr-Commit-Position: refs/heads/main@{#93224}
    
    Bug: chromium:40849120
    Change-Id: I0e980a14756695c83404cc6e56972ea1d665843f
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434614
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93226}

commit 2d7afd3b4c5a9f89e848c7e01ac00a0b0778e7f3
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Apr 4 17:45:17 2024 +0200

    [liftoff] Bump constants for reducing tiering budget
    
    Recent numbers seen in experiments seem to suggest that we trigger
    tier-up of often called functions very late. And indeed for very small
    functions we only reduce the tiering budget by a small amount. The
    actual time spent in the function is actually larger though, because we
    do not account for the time spent in the WasmLiftoffFrameSetup builtin,
    and for the code executed for the actual tier-up check.
    
    This CL bumps the constant for the latter from 1 to 20 (which is closer
    to the actual code size on x64), and introduces a new constant for the
    former according to the size of that builtin.
    
    R=dlehmann@chromium.org
    
    Change-Id: I304c9de63bcc8db1be0150e1c7b6ee52bd47430d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5424734
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93225}

commit ad628eec26485a8d9d09e59520b5069cab4bb64a
Author: Stephen Roettger <sroettger@google.com>
Date:   Mon Apr 8 10:28:30 2024 +0200

    [sandbox] sandboxify the Metadata pointer
    
    If the sandbox is enabled, keep a global array of metadata pointers for
    all MemoryChunks. This fixes chromium:40849120.
    
    Change-Id: Ia19c49d41b2f69c0cfa79571749dbd5515d33ed6
    Bug: chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385872
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#93224}

commit 54a2b83b908086bc50550c5e9158ac4c8a827f4c
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Apr 4 16:38:30 2024 +0200

    [heap] move MemoryChunk::Metadata accessor to inl.h
    
    In preparation for sandboxifying the metadata_ pointer. In the next CL,
    we need the definition of the Metadata class inside the
    MemoryChunk::Metadata accessor, so move it to -inl.h. This in turn
    requires a few other -inl.h files to be added.
    
    Change-Id: Ibc36e5489fd2f42895a55f7ec4e920ade241f13d
    Bug: chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412132
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#93223}

commit ec6d877a92b07ea77d36c425ab8f426e7173a735
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Apr 4 16:38:17 2024 +0200

    [heap] expose MutablePageMetadata::kPageSize in build_config.h
    
    In preparation for sandboxifying the metadata_ pointer. We want to
    access the kPageSize from inside the MemoryChunk header without adding a
    dependency on the Metadata header.
    
    Change-Id: Ibef102c2a6563abc6dbf6095f2fdf510c04626a7
    Bug: chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5409433
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93222}

commit 975627b0fd3176def9d1b8120a8998ce0fd4319f
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Apr 4 12:36:15 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Mark wasm arrays as nullable for:
    - ArrayGet
    - ArraySet
    - ArrayLength
    
    This is a follow-up to commit c05df3ed5fb7947d11fbcc4341bfdb6c91cecfd8.
    
    Bug: 331100916
    Change-Id: I0a8b8bfc81d8d80cb0240c420e148def59dab31b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419795
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93221}

commit 540fde5021b3fd9452d0827c19056f73a9d7f712
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Apr 8 10:26:37 2024 +0200

    [x64][wasm] Disable --deopt-every-n-times on wasm
    
    Wasm doesn't yet have deopt support, so this mode would only uncover
    the deoptimizer crashing.
    To support this flag, once wasm supports deopts, it will need to work
    in an isolate-independent way in wasm.
    
    Fixed: v8:14706
    Change-Id: Id4a4a0fb0e879e0f3a747fd11f2a0202e7a832ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434036
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93220}

commit 74582009a699a9d4fc6a380c7cb41a714494f7b3
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Apr 8 09:00:19 2024 +0000

    Revert "[maps] Always apply prototype transitions first"
    
    This reverts commit 77b6c4a02688950ed177d2697d401560378d1a8c.
    
    Reason for revert: chromium:333281864, chromium:333007256, chromium:333065494, chromium:332947126
    
    Original change's description:
    > [maps] Always apply prototype transitions first
    >
    > I.e., treat prototype transitions similar to elements kind
    > transitions. We move prototype transitions to the start of the map
    > tree, before ElementsKind transitions, using the MapUpdater.
    >
    > This allows us to finally not generalize all fields anymore on the
    > target map of UpdatePrototype. The additional benefit is that it
    > prevents us from collecting the map tree before a prototype
    > transition.
    >
    > Say we have the following code:
    >
    >     var x = new foo()
    >     x.a = 1.1
    >     x.__proto__ = bar.prototype
    >
    >
    > Before this CL we produce the following transition tree, where double
    > arrows are strong and single arrows are weak pointers:
    >
    >     foo {} <==--> foo {a} ----> bar {a} <==== x
    >                   ~~~~~~~
    >
    > Assuming x to be a live object, then the underlined subtree is still
    > only weakly reachable from x. In other words it can be collected and
    > if we later create a second such object, the existing `bar {a}` map is
    > not reachable anymore. We re-create the whole subtree and the new
    > object will have a fresh (but identical) map.
    >
    > The problems are:
    > 1. Accidental polymorphism.
    > 2. Unnecessarily duplicated maps.
    > 3. Prototype transitions must generalize all fields
    >    (because we have no back-pointers and thus field updates cannot be
    >     properly back-propagated).
    >
    > The solution here is to move prototype transitions to the beginning of
    > the map tree:
    >
    >     foo {} <==--> foo {a}
    >     ∧
    >     `==--> bar {} <==--> bar {a} <==== x
    >
    > And use the full MapUpdater to get from `foo {a}` to `bar {a}`
    > This fixes all issues. Generalization do not happens instantly, but
    > rather during the MapUpdate on UpdatePrototype.
    >
    > Bug: chromium:332914927
    >
    > Change-Id: I947e45448a9de1b14f4f8c0c4e1081910027390a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300551
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Commit-Queue: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93189}
    
    Bug: chromium:332914927
    Change-Id: Id2a261fdd727fc40f90c72f575c7ad4f41313b55
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5431936
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93219}

commit 2a84df6222ea3261320f5b0a9e1387e59fbee145
Author: Hans Wennborg <hans@chromium.org>
Date:   Mon Apr 8 10:51:40 2024 +0200

    Fix new Clang warnings about set-but-unused variables
    
    The latest version started warning about variables declared in condition
    expressions.
    
    Bug: chromium:332931387
    Change-Id: Ib033e17b3ee424fbab93c2d6d1f3c7823a49c405
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425028
    Commit-Queue: Hans Wennborg <hans@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93218}

commit f18d6b0452142d5e411d502f5aa744ed9918307a
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Apr 5 16:55:10 2024 +0200

    Reland "[wasm] Call on-heap import wrappers via a trampoline"
    
    This is a reland of commit 435e04b08926f23861dd19938246dbf00a3bd7c9.
    PS2 adds the missing underscores for arm64 no-ptr-compression builds.
    
    Original change's description:
    > [wasm] Call on-heap import wrappers via a trampoline
    >
    > This allows us to remove the `code` field from WasmInternalFunction and
    > always call the stored `call_target`.
    > The only situation where we still needed the fallback to call via the
    > code pointer was for on-heap wasm-to-js wrappers. Those always receive
    > the WasmApiFunctionRef as first parameter, so we can instead store the
    > code pointer there and call a builtin which loads the instruction start
    > from the code pointer and then tail-calls (jumps) there.
    >
    > This generates smaller code for every call_ref by avoiding the check for
    > `call_target == 0` and the fallback to load the instruction start from
    > the code pointer table.
    >
    > R=ahaas@chromium.org
    > CC=manoskouk@chromium.org
    >
    > Bug: v8:14564
    > Change-Id: I40ea7d9b409dc654bd90c3360c0bf064cf4978ab
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419396
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93191}
    
    Bug: v8:14564
    Cq-Include-Trybots: luci.v8.try:v8_linux64_arm64_no_pointer_compression_rel
    Change-Id: I4a476725ba0db2e55db0a7f5b95bd7031b82a140
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425171
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93217}

commit 1c74a324b283deea41de35196d31684b250ae599
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Apr 5 19:36:21 2024 +0200

    [wasm] Fix temporary object inconsistency
    
    The inconsistency was only observed by heap verification if a GC was
    triggered while allocating the dispatch tables.
    This CL slightly changes the order to setting fields on the
    WasmTrustedInstanceData so the stored information is always consistent.
    
    R=ahaas@chromium.org
    
    Fixed: v8:14705
    Change-Id: Ib78b7da5022ae56ef50469796bfb022f1c394545
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426677
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93216}

commit de417573b86f68b7de2978ef3387090b3f60cb0f
Author: Stephen Roettger <sroettger@google.com>
Date:   Mon Apr 8 10:07:03 2024 +0200

    [lsan] add mutex around the not_registered_regions_
    
    Change-Id: I69833884b9904992ddd6e3e91eab97ecc23f21c6
    Bug: chromium:332571370
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5434034
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#93215}

commit 5914658d637db5e275fc72801eeeab95e48dbd8d
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Sun Apr 7 16:52:53 2024 +0800

    [loong64][mips64][turboshaft] Fix TruncateInt64ToInt32 implementation
    
    The type of kWord64ShiftRightArithmetic's rhs is not int64.
    
    Change-Id: If2db921be1dd8f7bcfc6e11c24792e4b03fe3a62
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5431774
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93214}

commit 9e3c04a30922628a7424ed6df3fbddbc73fa4aa5
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Apr 8 08:35:21 2024 +0200

    [serializer] Add support for API wrappers using CppHeapPointer
    
    This patch adds serialization and deserialization support for API
    wrappers. The CppHeaPointer field is deserialized as null handle. The
    embedder can specify serialization data that is then threaded through
    for deserialization. This allows such wrappers to participate in Blink
    context snapshots, similar to wrappers with regular embedder fields.
    
    Change-Id: Ia1f91af3d3d1b5a0ab2d96a405a5ebb4bd597e03
    Bug: chromium:328117814
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5423133
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93213}

commit 8756cb9d376da1d63af25fb337d610b8d78396d6
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Apr 8 08:45:12 2024 +0200

    [turboshaft][arm64] Disable FORCE_UNROLL_LOOP on Arm64 Android
    
    Bug: chromium:332329850, v8:12783
    Change-Id: I55b908d4f0e5700fd463cc6e80653203cebd75ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5433993
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93212}

commit fb0a57643c7e1f200b628454f3ee92b60b6cddfa
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Mon Apr 8 11:08:58 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of Shuffle in
    turboshaft
    
    Bug: v8:12716
    Change-Id: I68b7e72d88bb03aa9e63f22dc4c27bd3bf969a17
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5384969
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93211}

commit cbc1bd9b97f4dbdff521e6d5e7a136fdc27211c2
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Sun Apr 7 09:41:54 2024 +0800

    [riscv][turboshaft] Fix more issues in Turboshaft's builtin pipeline
    
    Port commit aa116324c586e386b9cd3a6a058c6f4855acaeac
    Bug: v8:12783
    
    Change-Id: I5e15f3feef58f0c188a51c876136eb255075727c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5430887
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93210}

commit 6534dd9122af15f576c50610cb1e59057d8d04fe
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Apr 7 09:12:22 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/6d97454..bbc1efa
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751301437688205569
    
    Change-Id: I44d044367000f3b925bfa614aecbb667ad35d676
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5433193
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93209}

commit 021a921905321f8f2e67d6cd5e7180e035298956
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Apr 5 21:06:21 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/2f1eb75..6d97454
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/6dc6690..0b9e7b8
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/680bb6e..246580c
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/0af9766..f10e11f
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/0e58d44..d076d8b
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/93c7cf5..c235897
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751437335205784833
    
    Change-Id: I4218369ecd9ebbafd7900b58f5e748ff6cec453c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5430954
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93208}

commit ecdd566843ff7683f9eaafdb891102bd329b83b2
Author: Luis Pardo <lpardosixtos@microsoft.com>
Date:   Fri Apr 5 13:50:39 2024 -0700

    [shared-struct] Split out WaiterQueueuNodes into a different file
    
    Bug: v8:12547
    Change-Id: If4eb1b1c9c1726a513d9782232edc45560dee19b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5411156
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93207}

commit 50e83ca827e4b4bf60804a4a9e8206c122cdf5e4
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Mar 26 15:52:16 2024 +0100

    Reland "[build] Fix instrumented libs after deps change"
    
    This is a reland of commit 3c805fe68f794e08a53296416f1eb40b898a40fa
    
    Original change's description:
    > [build] Fix instrumented libs after deps change
    >
    > This ports https://crrev.com/c/5368675 to V8.
    >
    > Bug: 331352968
    > Change-Id: Ic5357bc197490ed3c3afa6130d67e53d334af7a0
    > Cq-Include-Trybots: luci.v8.try:v8_linux64_msan_rel
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5397916
    > Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    > Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93051}
    
    Bug: 331352968
    Change-Id: Id2dd283e0a7af95b3af100f2121a7408998b6f8b
    Cq-Include-Trybots: luci.v8.try:v8_linux64_msan_rel
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5424902
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Deepti Gandluri <gdeepti@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93206}

commit 25b14cfd8a03a8009f3ce855a3759523e2916efd
Author: Luis Pardo <lpardosixtos@microsoft.com>
Date:   Thu Apr 4 17:45:33 2024 -0700

    [shared-struct] Fix NumWaitersForTesting and UnlockSlowPath null paths
    
    In this CL:
    1. Fix race condition in NumWaitersForTesting where the code queries
       if there are waiters before taking the queue lock and assumes that
       there are still waiters after the queue lock is acquired.
    2. Update UnlockSlowPath to properly use the WaiterQueueLockGuard
    3. Terminate workers in test.
    
    Bug: v8:12547
    Fixed: v8:14704
    Change-Id: I1a67a6fc4547ece799010551f73d92f07edf888e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5427611
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93205}

commit b2244d1f2ff50364b048a77b28564265f733b632
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Fri Apr 5 19:05:45 2024 +0200

    [heap] Minor fix in stack scanning
    
    This CL removes a redundant call to `IterateBackgroundStacks` that
    existed in `IteratePointersUntilMarker`. This had resulted in a nested
    `SuspendTagCheckingScope`, which crashed on Android MTE builds. The CL
    also adds a check in `SuspendTagCheckingScope` to prevent nested usage
    earlier.
    
    Bug: v8:13257
    Change-Id: I2b7a041bed0155a814454845b8a43fc530199588
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426676
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93204}

commit 69306e635410a9019baf20db65586b7c7c890bf1
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Apr 5 09:13:47 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/42d0d21..2f1eb75
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/2d1be25..6dc6690
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/90d54ff..680bb6e
    
    Rolling third_party/fuchsia-sdk/sdk: version:19.20240328.3.1..version:20.20240404.3.1
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/c4fec74..0af9766
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/9595ace..93c7cf5
    
    Rolling tools/luci-go: git_revision:a84377ac0800e2330d02c3dcbf7b4b74a06d6a5b..git_revision:06dc7a1f2eeb1d095f7876799458328a44438df1
    
    Rolling tools/luci-go: git_revision:a84377ac0800e2330d02c3dcbf7b4b74a06d6a5b..git_revision:06dc7a1f2eeb1d095f7876799458328a44438df1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751482634219504433
    
    Change-Id: I067a01005b698cb9aa610d596971f4477854748d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5428517
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93203}

commit 36f6df4352006bfc7f486fc0ad4b964d8d588370
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 5 16:27:36 2024 +0200

    [turboshaft] Maglev-to-ts: untag phis in Maglev
    
    Until we have a dedicated representation selection (or simplified
    lowering) phase in Turboshaft, we might as well use Maglev's phi
    untagging phase.
    
    Bug: v8:12783, v8:14581
    Change-Id: I9270438157c5ba1fe697366b8001eb940b658004
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426674
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93202}

commit b42c968372a4a0b468582500e8c2974bdd6e95ce
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 5 17:42:22 2024 +0200

    [turboshaft] Maglev-to-ts: support loading the_hole from array
    
    Bug: v8:12783, v8:14581
    Change-Id: I5292b4d3a8ba646bf2b1bf2308d188f0563cb361
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426673
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93201}

commit 6e1363a7a3cb9c4012c20b987a6a43c2de01fa57
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Apr 5 17:09:14 2024 +0200

    [api] Fix offsets for CppHeapPointerTable
    
    The offsets are used for fast paths in the API headers.
    
    Bug: chromium:328117814
    Change-Id: Iabfe9ceaaa3a4ac1c0e0b8f954cc5e57d32af474
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5424740
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93200}

commit 0e5f72653d7f8ed243825bac0771c8e3368c634f
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Apr 4 15:50:23 2024 +0200

    [tiering] Set max number of compile threads to 2 and 4
    
    Currently TF jobs are unlimited whereas we only have 1 ML job.
    Especially on constrained devices this can lead to TF jobs starving ML
    of actually allocated worker thread time.
    
    Aditionally we sometimes see long running (potentially descheduled) ML
    jobs blocking further ML compilation.
    
    To address both issues we increase ML jobs to 2 and limit the number of
    TF jobs.
    
    Bug: chromium:328115456
    
    Change-Id: I5c03aee031684de2006fb68d440c31834ed2c7c1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5424732
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93199}

commit 04212ac35dadd3fe681cbc50a1a81597dd855077
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu Apr 4 15:12:57 2024 -0700

    [json-parse-with-source] Remove --harmony-parse-json-with-source
    
    The feature has shipped since Mar 2023.
    
    Bug: v8:12955
    Change-Id: I973580924ecfaab8accebcf63219dc9ac37e05f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425234
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93198}

commit 96d35b890a3cc902294d59742d14322e3724fd6f
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri Apr 5 17:09:41 2024 +0200

    [mac-tick-processor] Fix aslr slide handling
    
    - print the real library range at runtime instead of adding the slide
      there
    - only add the slide to functions we get from the library
    
    Change-Id: Ie062840c2170894a3e1175ebfa96d4a36736c8e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425027
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93197}

commit 9d0ff24b648cf2da7e3637d4b1797daceb1d9131
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Apr 5 17:01:24 2024 +0200

    [turboshaft][wasm-imported-strings] Annotate that some more functions can end with trap
    
    The changed stringref runtime functions can trap (see runtime-wasm.cc).
    Similarly as in https://crrev.com/c/5419422:
    The ability to trap was not annotated in these functions. Therefore, these operations
    might be considered as eliminatable, and if the result is unused, the operation can be
    dropped even if it would have trapped.
    
    Fixed: 330580823
    Change-Id: I4f2adec192b918f8ca32f2fcee326d8c1b6eba92
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426675
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93196}

commit b7e1f7a33f5f64c08812513e39520b8fab67dbb9
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 5 16:29:50 2024 +0200

    Reland "[turboshaft] Fix missing LoadElimination non-alias invalidation"
    
    Original change's description:
    > Fixed: v8:14700
    > Bug: v8:12783
    > Change-Id: If1a0c3a05a6e676c9b8068611b94af209ec8305d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425830
    > Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    > Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    > Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93184}
    
    Bug: v8:12783
    Change-Id: Ief311494214ee54ce0b9ffab2cd6cc7e2602a9d1
    Fixed: v8:14700
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426018
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93195}

commit a70c938b11c4f572edc9bac7c56cf79b70481723
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Apr 5 15:55:29 2024 +0200

    [wasm][turboshaft] Add graph building for a deopt on call_ref
    
    This CL adds a new feature flag --wasm-deopt, an experimental feature
    to allow the optimizing compiler to emit deopts in the wasm pipeline
    and for the runtime to support deopting wasm functions to their
    baseline (liftoff) variant.
    
    In a first version this will be built to deopt if the call target of a
    call_ref instruction is mispredicted.
    This first CL adds the code to emit a DeoptIf node and the FrameState
    required to be able to build the corresponding unoptimized stack frame.
    
    Bug: v8:14667
    Change-Id: I2f61fa45725934b55779de4c991420c4307b60a8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5421109
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93194}

commit 4dccc0ef9cdffd7dd86015aa62183acb4c6a7250
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Apr 5 16:10:16 2024 +0200

    [tools] Add tools/dev/setup-reclient.py
    
    For conveniently setting up reclient support.
    Currently supports Linux and Mac, both Google-managed and external.
    
    No-Try: true
    Change-Id: I7085643d6ba448407a6a07d3b177e44584c8656b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380194
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93193}

commit bf12805ec4f18dc9fdf97e8aac83bcbe884f3bdd
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Apr 5 13:31:54 2024 +0000

    Revert "[wasm] Call on-heap import wrappers via a trampoline"
    
    This reverts commit 435e04b08926f23861dd19938246dbf00a3bd7c9.
    
    Reason for revert: Fails on arm64 without pointer compression: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20arm64%20-%20no%20pointer%20compression%20-%20builder
    
    Original change's description:
    > [wasm] Call on-heap import wrappers via a trampoline
    >
    > This allows us to remove the `code` field from WasmInternalFunction and
    > always call the stored `call_target`.
    > The only situation where we still needed the fallback to call via the
    > code pointer was for on-heap wasm-to-js wrappers. Those always receive
    > the WasmApiFunctionRef as first parameter, so we can instead store the
    > code pointer there and call a builtin which loads the instruction start
    > from the code pointer and then tail-calls (jumps) there.
    >
    > This generates smaller code for every call_ref by avoiding the check for
    > `call_target == 0` and the fallback to load the instruction start from
    > the code pointer table.
    >
    > R=ahaas@chromium.org
    > CC=manoskouk@chromium.org
    >
    > Bug: v8:14564
    > Change-Id: I40ea7d9b409dc654bd90c3360c0bf064cf4978ab
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419396
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93191}
    
    Bug: v8:14564
    Change-Id: I1c9a21a2287b87630bca533db83c4e1d1592c439
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426202
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93192}

commit 435e04b08926f23861dd19938246dbf00a3bd7c9
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Apr 5 12:18:44 2024 +0200

    [wasm] Call on-heap import wrappers via a trampoline
    
    This allows us to remove the `code` field from WasmInternalFunction and
    always call the stored `call_target`.
    The only situation where we still needed the fallback to call via the
    code pointer was for on-heap wasm-to-js wrappers. Those always receive
    the WasmApiFunctionRef as first parameter, so we can instead store the
    code pointer there and call a builtin which loads the instruction start
    from the code pointer and then tail-calls (jumps) there.
    
    This generates smaller code for every call_ref by avoiding the check for
    `call_target == 0` and the fallback to load the instruction start from
    the code pointer table.
    
    R=ahaas@chromium.org
    CC=manoskouk@chromium.org
    
    Bug: v8:14564
    Change-Id: I40ea7d9b409dc654bd90c3360c0bf064cf4978ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419396
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93191}

commit e5d69fa1d3c2979dfa5011b5e9897a4533422b3e
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Apr 4 13:39:52 2024 +0200

    [heap] --no-concurrent-marking should also affect cppgc
    
    This CL fixes a crash in chromium when running with
    "--no-concurrent-marking --no-parallel-marking". When disabling
    parallel marking we do not finish concurrent marking. This is not
    an issue for V8 because disabling parallel marking also disables
    concurrent marking through flag implications. This CL solves this
    issue by disabling concurrent marking for cppgc as well when
    "--no-concurrent-marking" is given as an argument.
    
    Alternatively we could also finish concurrent marking for cppgc.
    However, we want flags like that anyways to apply to both GCs and
    we already have such an implication for "--no-incremental-marking".
    
    Bug: chromium:40278463
    Change-Id: Ib29d39fa98fdb6f0efdb2f0f2d32a9140524ec0c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5424090
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93190}

commit 77b6c4a02688950ed177d2697d401560378d1a8c
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri Apr 5 10:57:04 2024 +0200

    [maps] Always apply prototype transitions first
    
    I.e., treat prototype transitions similar to elements kind
    transitions. We move prototype transitions to the start of the map
    tree, before ElementsKind transitions, using the MapUpdater.
    
    This allows us to finally not generalize all fields anymore on the
    target map of UpdatePrototype. The additional benefit is that it
    prevents us from collecting the map tree before a prototype
    transition.
    
    Say we have the following code:
    
        var x = new foo()
        x.a = 1.1
        x.__proto__ = bar.prototype
    
    
    Before this CL we produce the following transition tree, where double
    arrows are strong and single arrows are weak pointers:
    
        foo {} <==--> foo {a} ----> bar {a} <==== x
                      ~~~~~~~
    
    Assuming x to be a live object, then the underlined subtree is still
    only weakly reachable from x. In other words it can be collected and
    if we later create a second such object, the existing `bar {a}` map is
    not reachable anymore. We re-create the whole subtree and the new
    object will have a fresh (but identical) map.
    
    The problems are:
    1. Accidental polymorphism.
    2. Unnecessarily duplicated maps.
    3. Prototype transitions must generalize all fields
       (because we have no back-pointers and thus field updates cannot be
        properly back-propagated).
    
    The solution here is to move prototype transitions to the beginning of
    the map tree:
    
        foo {} <==--> foo {a}
        ∧
        `==--> bar {} <==--> bar {a} <==== x
    
    And use the full MapUpdater to get from `foo {a}` to `bar {a}`
    This fixes all issues. Generalization do not happens instantly, but
    rather during the MapUpdate on UpdatePrototype.
    
    Bug: chromium:332914927
    
    Change-Id: I947e45448a9de1b14f4f8c0c4e1081910027390a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300551
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93189}

commit 456f2d5091fef7b5cc26b2cae2d5fd46cae6220d
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Apr 5 09:14:28 2024 +0000

    [sandbox] Add V8 Sandbox blog post to the sandbox README
    
    Bug: chromium:332914928
    Change-Id: Ib85db141482a1fd7f7679fde37e76b7b035e65b5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426198
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93188}

commit d8ffc71683cdf75ff4110854751a8e3b89c0dcf1
Author: Eva Herencsárová <evih@chromium.org>
Date:   Fri Apr 5 09:34:17 2024 +0000

    Revert "[turboshaft] Fix missing LoadElimination non-alias invalidation"
    
    This reverts commit 870daf9db9043b78eb47786c935e6a4b0846b670.
    
    Reason for revert: fails on https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Mac64/57014/overview
    
    Original change's description:
    > [turboshaft] Fix missing LoadElimination non-alias invalidation
    >
    > Fixed: v8:14700
    > Bug: v8:12783
    > Change-Id: If1a0c3a05a6e676c9b8068611b94af209ec8305d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425830
    > Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    > Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    > Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93184}
    
    Bug: v8:12783
    Change-Id: I430ef8cc10fe52adb011f380afc39e03bf059273
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425019
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Owners-Override: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93187}

commit 13dd0c670cd4274fcf6e44bee09b3d08c6e504b1
Author: Simon Zünd <szuend@chromium.org>
Date:   Fri Apr 5 09:51:01 2024 +0200

    [inspector] Avoid unnecessary message copy in test harness
    
    "StringBuffer" is already an owning data structure. No need to make
    an extra copy.
    
    Bug: 326554286
    Change-Id: I8813fa9d7981e11f5e164676d362268ece5917dd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426197
    Reviewed-by: Eric Leese <leese@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93186}

commit 592ae6daf9e296f80eb30ea551e185c8a02d415b
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Apr 5 10:25:43 2024 +0200

    [wasm][sandbox] Protected memory starts and sizes
    
    Put the memory starts and sizes for all memories (used in the
    multi-memory case) in the trusted space. This protects the memory size
    from manipulation by an attacker, and allows to store the memory start
    unsandboxed.
    
    R=ahaas@chromium.org
    CC=saelo@chromium.org
    
    Bug: v8:13957, v8:14702
    Change-Id: If23b053834ec9f779599d1035c31a4452e082e1a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426191
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93185}

commit 870daf9db9043b78eb47786c935e6a4b0846b670
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Apr 5 08:24:34 2024 +0200

    [turboshaft] Fix missing LoadElimination non-alias invalidation
    
    Fixed: v8:14700
    Bug: v8:12783
    Change-Id: If1a0c3a05a6e676c9b8068611b94af209ec8305d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425830
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93184}

commit 1d55d408c53ac2a7d99cf0507a62eb9e7d92a9d1
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 4 13:39:07 2024 +0200

    [turboshaft] Maglev-to-ts: fix bug in for-in loops
    
    We didn't notice this bug before because it was leading to deopts, and
    the test checked the result (which was correct) and not the
    optimization status.
    
    Bug: v8:12783, v8:14581
    Change-Id: I4533014aa79efeab3baab1678ca9a84c892a095f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5424050
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93183}

commit 38e23f3a5d07022def739030d877ea224dd7952d
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Apr 4 16:26:19 2024 +0200

    [wasm] Don't load WebAssembly object in CanInstallTypeReflection
    
    CanInstallTypeReflection has to check the same WebAssembly object that
    gets the type reflection functions installed. So far it always checked
    the WebAssembly object of the native context.
    
    Bug: 331358160
    Change-Id: I190f53a716a1abfeffc9569897c7c65f2ca94ad2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5423130
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93182}

commit c8e737f967c6e7f9a9c4d4b6594becf2effffe5f
Author: Eva Herencsárová <evih@chromium.org>
Date:   Fri Apr 5 06:03:01 2024 +0000

    Revert "Update V8 DEPS (trusted)"
    
    This reverts commit 3842d31fde7c9a9d4fee8ad5348a197cc7ad8e0c.
    
    Reason for revert: closed the tree, fails on https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Test%20Tools/16401/overview
    
    Original change's description:
    > Update V8 DEPS (trusted)
    >
    > Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/42d0d21..23fc242
    >
    > Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/2d1be25..6dc6690
    >
    > Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/90d54ff..f1098b6
    >
    > Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/c4fec74..0af9766
    >
    > Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/9595ace..6a87853
    >
    > Roll created at https://cr-buildbucket.appspot.com/build/8751527928300667457
    >
    > Change-Id: I37bdc572c0498130829f7b3d716c0e677b6b9918
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426354
    > Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    > Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    > Cr-Commit-Position: refs/heads/main@{#93180}
    
    Change-Id: I4707ac16a765b0aa2aab41840ee68e83e96bb79a
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426196
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93181}

commit 3842d31fde7c9a9d4fee8ad5348a197cc7ad8e0c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Apr 4 21:18:36 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/42d0d21..23fc242
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/2d1be25..6dc6690
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/90d54ff..f1098b6
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/c4fec74..0af9766
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/9595ace..6a87853
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751527928300667457
    
    Change-Id: I37bdc572c0498130829f7b3d716c0e677b6b9918
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426354
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93180}

commit 966f082be0f2df5129a49b6495d46180a5dad247
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu Apr 4 14:55:28 2024 -0700

    [regexp] Ship the modifiers proposal
    
    I2S with 3 LGTMs:
    https://groups.google.com/a/chromium.org/g/blink-dev/c/Hlh6DOL-Zvo/m/tvvsKLosBQAJ
    
    Bug: v8:12956
    Change-Id: If1a3678beb4b8aae21411ddd836be9d71f2dd941
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425233
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93179}

commit 7645728459bbe3a86631e0d54c2f269779a42d95
Author: Luis Pardo <lpardosixtos@microsoft.com>
Date:   Wed Apr 3 16:32:58 2024 -0700

    [shared-struct] Notify cv waiters while holding the queue lock
    
    When notifying a JS condition variable, currently we dequeue all the
    waiters, release the queue lock, and then notify the waiters. This can
    be an issue if when trying to notify a waiter that is being destroyed
    in another thread. This will be a bigger issue for async waiters but
    can happen with sync waiters that have timed out around the same time
    a notify is called in another thread.
    
    Drive-by: Scope the WaiterQueueNode lifetime in
    JSAtomicsCondition::WaitFor so that the waiter is deleted before trying
    to request the JS mutex.
    
    Bug: v8:12547
    Change-Id: I8d9a46082c8c99e7534eef8970d1be93ada40416
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5410368
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93178}

commit 28b2dae07eff3d73dc577955cbc317753683033a
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Apr 4 16:12:16 2024 -0400

    PPC/s390: [turboshaft] Fix more issues in Turboshaft's builtin pipeline
    
    Port aa116324c586e386b9cd3a6a058c6f4855acaeac
    
    Original Commit Message:
    
        E.g.
        - Use Turboshaft's instruction selection
        - Add support for BitcastWord32PairToFloat64 on 64 bit platforms
        - Fix missing frame deconstruction in some end blocks
        - Detect and replace WordEqual comparision used for tagged values
        - Constant fold Smi constants through TaggedBitcast
    
    R=nicohartmann@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Iea6a04088b6bf93e617af1cf136afe9559de6c38
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5426352
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93177}

commit 59bf00b15853ca9f9204048b7ed648dcfb1dc848
Author: Luis Pardo <lpardosixtos@microsoft.com>
Date:   Tue Apr 2 14:37:47 2024 -0700

    Reland "[shared-struct] Support RAII syntax to handle the waiter queue bit"
    
    This is a reland of commit 07277929c0968a6a3415343b59f89578bc92ef51
    
    Changes since revert:
    - Failing test was an unrelated flake.
    
    Original change's description:
    > [shared-struct] Support RAII syntax to handle the waiter queue bit
    >
    > RAII syntax provides better readability and reduced the likelihood of
    > introducing bugs by forgetting to release the waiter queue bit.
    >
    > Bug: v8:12547
    > Change-Id: I55a329f39ff87d9380eda494ce0e89b2d7626900
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5410312
    > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    > Cr-Commit-Position: refs/heads/main@{#93150}
    
    Bug: v8:12547
    Change-Id: I2cadc69f049602edaf9e3e4624f1a2bb2e6e7047
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5422075
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93176}

commit 6704593a8db9b00cbebe6e345308e1c02e5798fc
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Apr 4 09:14:14 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/a6f89b9..42d0d21
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/5dc83f8..90d54ff
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/fbd0a40..0e58d44
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/3571af4..9595ace
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751573227331033665
    
    Change-Id: I1dba7b5ac8f69f99d013a8e6227d1661a1a3c67e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5425112
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93175}

commit b98ecf0aba7a265a5c1cf6c29e236bc5c08b93a2
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 4 15:42:23 2024 +0200

    [turboshaft] Maglev-to-ts: support DataView new, load and store
    
    Bug: v8:12783, v8:14581
    Change-Id: I32eae9e89058c9e0a0d631b79c3c3abc45734898
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5423436
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93174}

commit 55139eb9cc17f9401975e0d72d1e52c3ec99f555
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Apr 4 15:09:30 2024 +0200

    [wasm][fuzzer] Do only output test code once
    
    The fuzzer sometimes runs a test multiple times, and with
    --wasm-fuzzer-gen-test we would output it multiple times.
    
    This CL adds a little check to only output the test case on the first
    invokation to make this slighly more convenient.
    
    R=jkummerow@chromium.org
    
    Fixed: chromium:331061797
    Change-Id: I93d7582de29a9acc6230667905014e211d95507b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5424470
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93173}

commit d15cfac30142aa8be8958c9a89d9b45ac0c0c843
Author: Etienne Pierre-doray <etiennep@chromium.org>
Date:   Tue Apr 2 16:49:27 2024 +0000

    [gc] Throttle incremental sweep while doing concurent sweep.
    
    Traces show incremental sweep does little work but has significant overhead on the mutator thread while concurrent sweep is running.
    This is made worse with UseUtilityThreadGroup experiment which slows
    down concurrent sweep.
    This CL throttle incremental sweep until the concurrent one is done, and
    then calls finalizing functions.
    
    Change-Id: Idf60268e10d3b2af3649a12886e0c19ff6ae8ea0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5400748
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Etienne Pierre-Doray <etiennep@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93172}

commit 5d3101f0d9d8f2fddcfcbd97b0d6d0941fb9d6f8
Author: Eva Herencsarova <evih@chromium.org>
Date:   Thu Apr 4 16:12:50 2024 +0200

    [turboshaft][wasm-imported-strings] Annotate that some builtins can end with trap
    
    The changed imported-string builtins can trap (see wasm.tq). However,
    this was not annotated in the builtins. Therefore, these operations
    might be considered as eliminatable, and if the result is unused, the
    operation can be dropped even if it would have trapped.
    
    Fixed: 40258436
    Change-Id: I393ef66f9af213da1c59a2a7a87f3f33573138de
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419422
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93171}

commit f426e631e07945be2ba69dca0778801c1f976e80
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Apr 4 15:26:35 2024 +0200

    Reland "[wasm] Also cache smaller code, after 2s delay"
    
    This is a reland of commit 27a0f364839889c194cb083cb4c1cd32c1ad284f.
    We now set the hard threshold in more tests to trigger immediate
    caching and avoid data races.
    
    Original change's description:
    > [wasm] Also cache smaller code, after 2s delay
    >
    > Finch experimentation showed that all more aggressive caching strategies
    > improve hit rates dramatically. We have to balance that against
    > increased time for serializing the module though.
    > Reducing the hard threshold results in pauses during background
    > compilation, hence we keep that at 1MB and additionally cache after 1kB
    > of new Turbofan code has been compiled, but no new code within 2
    > seconds.
    >
    > The latter two numbers don't seem to matter too much, but when
    > increasing the delay too much we see an increase of serialization
    > times on the highest percentiles, so keep it pretty low. This also
    > ensures that we still cache something if the user navigates away
    > after a few seconds.
    >
    > R=ahaas@chromium.org
    >
    > Bug: v8:14411
    > Change-Id: I67398acec39d29331fbd2428eec2f9387eeeb26a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412938
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93156}
    
    Bug: v8:14411
    Cq-Include-Trybots: luci.v8.try:v8_linux64_tsan_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux64_tsan_isolates_rel
    Cq-Include-Trybots: luci.v8.try:v8_linux64_tsan_rel
    Change-Id: I30acd82f94147c06646c0eca4e79a6ccc20b9102
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5423428
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93170}

commit ea8db4b1445de001d09879a7759fac1af5182d5d
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Apr 4 13:01:14 2024 +0200

    [cfi] disable pku support in TSAN builds
    
    With TSAN enabled, we get crashes because
    SetDefaultPermissionsForSignalHandler gets called while a
    RwxMemoryWriteScope is active. It seems that tsan's ProcessPendingSignals
    doesn't restore the pkru value after executing the signal handler.
    
    Also, add a missing RwxWriteScope in the tsan only memory fence code.
    
    Bug: v8:13355
    Change-Id: I0172f14fd37d508be3813bfc9b6ddc954371a3ca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419796
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#93169}

commit f92ec7d36b9ba73d404d682460bf19f93c229ef5
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Apr 4 14:15:06 2024 +0200

    [tiering] Don't delay tier up to Sparkplug on IC change
    
    We currently reset the interrupt budget on IC change, to delay tier up
    until functions have stable feedback.
    
    Sparkplug, however, doesn't need feedback to tier up. In most cases, we
    won't have a feedback vector while waiting to tier up to Sparkplug, so
    this mechanism works (no IC changes are observed at all with no feedback
    vector), but if a feedback vector is installed early (e.g. because of
    logging), this mechanism will delay Sparkplug tier-up.
    
    Fix this by bailing out early in NotifyICChanged for interpreted
    functions that can tier up to Sparkplug.
    
    Change-Id: Ib10e39b9a258004e4822d9dc40cda4f2527f2a98
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5424290
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93168}

commit aa116324c586e386b9cd3a6a058c6f4855acaeac
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Apr 4 10:34:21 2024 +0200

    [turboshaft] Fix more issues in Turboshaft's builtin pipeline
    
    E.g.
    - Use Turboshaft's instruction selection
    - Add support for BitcastWord32PairToFloat64 on 64 bit platforms
    - Fix missing frame deconstruction in some end blocks
    - Detect and replace WordEqual comparision used for tagged values
    - Constant fold Smi constants through TaggedBitcast
    
    Bug: v8:12783
    Change-Id: I0126b9e855b378461363cb6ea2de090209af067c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5273561
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93167}

commit 9e79a5ae4f3b2baf8c4b863fd9142324011bd452
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Apr 4 10:50:13 2024 +0200

    [wasm] Add missing include
    
    The missing include reportedly leads to compile failures on Mac, see
    https://groups.google.com/g/v8-dev/c/zOCUCw-rVYY/m/Z-jI0UM5AQAJ.
    
    R=ahaas@chromium.org
    CC=meir@redis.com
    
    Change-Id: Id233cd06140cd5eb3f6120988c47d5c3e0d3f1fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5423131
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93166}

commit 58e2dc5166eb1d804826f271cfd50ad0c6b01bba
Author: Eric Leese <leese@chromium.org>
Date:   Thu Apr 4 11:22:22 2024 +0200

    Allow lldb commands and visualizers to work together
    
    Currently, if you load both lldb_visualizers.py and lldb_commands.py,
    commands like jh are broken if they evaluate an expression, as the
    visualizer synthetic fields replace the field the command is looking
    for. This change fixes that. I've also improved the output when the
    expression has an error.
    
    Bug: None
    Change-Id: Idc85077d18ae98e2b29703e09007aad5e432f476
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5423132
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Auto-Submit: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93165}

commit d435f290e382f0296f647016cb5d70d54eca3fd8
Author: Simon Zünd <szuend@chromium.org>
Date:   Thu Apr 4 10:17:51 2024 +0000

    [error] Use message passed to constructor for Error.stack message
    
    Even though Error.stack is now a true JS accessor, the content itself
    is cemented after the first time the Error.stack getter is called.
    
    This means modifying the 'message' property of an Error object may or
    may not have any affect on the stack trace depending on whether
    Error.stack was accessed previously.
    
    This can be particularly confusing in the DevTools console or Node
    REPL, where a preview is built as the user types, and Error.stack is
    accessed as a side-effect.
    
    This CL proposes to make this more consistent: When V8 constructs
    a new Error object, we stash the original message in a private
    symbol similar to Error.stack. When we serialize Error.stack, we
    use the original message from the private symbol, rather than the
    current value of the 'message' property.
    
    If no private symbol is present along the prototype chain,
    we use the 'message property'.
    
    This CL does not change Error.captureStackTrace. For captureStackTrace
    it depends if the custom object subclasses "Error" and how the super
    constructor is called (only the Error constructor installs the private
    message symbol).
    
    Bug: 327467399
    Change-Id: I1ea92c96b96fa95bfc4fb8dcf1571bd647b3c68f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378709
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93164}

commit 99a817dd368dc0fbcbaa0c212ba98a26a709994e
Author: Jose Dapena Paz <jdapena@igalia.com>
Date:   Wed Feb 28 11:35:02 2024 +0100

    Allocate less times for heap worklists
    
    After observing that several JS contexts in independent threads
    belonging to the same isolate, would make Isolate::MeasureMemory
    very slow, tracing showed that this was because of many work lists
    being allocated through partition alloc in Chromium, so spinning
    locks would make that slow.
    
    To avoid that problem, reduce the number of allocations by storing
    worklists in an std::vector preallocated with reserve(), and index
    it using the V8 flatmap implementation in hashmap.h.
    
    Change-Id: I9d553e906c1a63b53f41e37a49dc6e7257964abf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419419
    Commit-Queue: José Dapena Paz <jdapena@igalia.com>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93163}

commit 18475c675617f0b18410c592323ca00ebc566f0c
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Apr 4 09:41:03 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - CheckException
    
    Bug: chromium:331100916
    Change-Id: If8bb37b2b5cafeb98580e2e7cf4f12f6448fec22
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419421
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93162}

commit 1f65eec374cb99bf7d67bf85bd19fa492d3991b8
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Apr 4 11:17:34 2024 +0200

    [cppgc] Sweep custom spaces first
    
    Blink's HeapVectors are the most likely to result in large objects that
    require finalization on the main thread. This CL sweeps the custom
    spaces first so that the large finalizations can occur while concurrent
    sweeping is still active, rather than after it is done.
    
    Change-Id: I520ab4117c6eb1d8876df86ec292da2101a5ca60
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5418934
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93161}

commit 88925272a7f14218bf8aa0c551f241b8f0955216
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Apr 4 11:25:40 2024 +0200

    [heap] Fix stack scanning for ASAN and safe stack
    
    Apart from the regular stack, there are two more stacks used by special
    builds: the fake stack, used by ASAN, and the unsafe stack, used when
    clang's safe stack feature is enabled.
    
    With this CL:
    
    - Stack::SetStackStart() uses the current stack information for all
      kinds of stacks.
    - Setting the stack marker takes into account all kinds of stacks, if
      appropriate.
    - Stack-related methods are removed from internal::HandleHelper and
      become static methods in heap::base::Stack.
    - Conservative stack scanning correctly scans all appropriate stacks.
    
    Change-Id: Ie5af66414d532cc20bdcb1417a987796895204a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412936
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93160}

commit 3cbd150c50b7030a92fc479829221cbd0943035e
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Apr 4 11:24:59 2024 +0200

    [json] Add recursive parser up to stack overflow...
    
    ... when we're about to overflow the stack, switch to the iterative
    parser instead. This improves performance by 5-10% for cases where the
    recursive parser works (most cases).
    
    Change-Id: I516cb8cc79b95d1da82648c4f149042566d78873
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5420110
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93159}

commit f52aa4903d1430ecb094da48f6517eb1bf643fc5
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Apr 4 09:36:40 2024 +0000

    Revert "[wasm] Also cache smaller code, after 2s delay"
    
    This reverts commit 27a0f364839889c194cb083cb4c1cd32c1ad284f.
    
    Reason for revert: Existing test now fails on TSan: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN/51897/overview
    
    Original change's description:
    > [wasm] Also cache smaller code, after 2s delay
    >
    > Finch experimentation showed that all more aggressive caching strategies
    > improve hit rates dramatically. We have to balance that against
    > increased time for serializing the module though.
    > Reducing the hard threshold results in pauses during background
    > compilation, hence we keep that at 1MB and additionally cache after 1kB
    > of new Turbofan code has been compiled, but no new code within 2
    > seconds.
    >
    > The latter two numbers don't seem to matter too much, but when
    > increasing the delay too much we see an increase of serialization
    > times on the highest percentiles, so keep it pretty low. This also
    > ensures that we still cache something if the user navigates away
    > after a few seconds.
    >
    > R=ahaas@chromium.org
    >
    > Bug: v8:14411
    > Change-Id: I67398acec39d29331fbd2428eec2f9387eeeb26a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412938
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93156}
    
    Bug: v8:14411
    Change-Id: I38ad0010aee23cbec1495df33ea2f351607b5b6d
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419794
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93158}

commit d9ccf0d07918094d656eae60b95ac27330f30576
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Apr 3 18:27:48 2024 +0000

    [sandbox] Introduce fine-grained type tags for Managed objects
    
    With this CL, every C++ type referenced via a Managed (a HeapObject
    referencing an external object whose lifetime is tied to the Managed)
    now requires an associated ExternalPointerTag. The association is
    established either by defining a kExternalPointerTag static field in the
    managed C++ class or through the ASSIGN_EXTERNAL_POINTER_TAG_FOR_MANAGED
    macro which, under the hood, uses template specialization. When done
    appropriately, this ensures type-safe access to the external objects.
    
    Bug: chromium:331237575
    Change-Id: I26203d5417b8cc75a681e50f3744588eff3b8aa0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5400699
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93157}

commit 27a0f364839889c194cb083cb4c1cd32c1ad284f
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Apr 3 14:16:25 2024 +0200

    [wasm] Also cache smaller code, after 2s delay
    
    Finch experimentation showed that all more aggressive caching strategies
    improve hit rates dramatically. We have to balance that against
    increased time for serializing the module though.
    Reducing the hard threshold results in pauses during background
    compilation, hence we keep that at 1MB and additionally cache after 1kB
    of new Turbofan code has been compiled, but no new code within 2
    seconds.
    
    The latter two numbers don't seem to matter too much, but when
    increasing the delay too much we see an increase of serialization
    times on the highest percentiles, so keep it pretty low. This also
    ensures that we still cache something if the user navigates away
    after a few seconds.
    
    R=ahaas@chromium.org
    
    Bug: v8:14411
    Change-Id: I67398acec39d29331fbd2428eec2f9387eeeb26a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412938
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93156}

commit 2ef6cd7a0dfd16302e77891c10223b852ffa01ad
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Apr 4 07:17:30 2024 +0000

    [sandbox] No longer mark the sandbox as experimental in BUILD.gn
    
    The sandbox has been enabled by default for a long time, so the
    corresponding gn build argument probably doesn't need to be marked as
    'experimental' anymore.
    
    Change-Id: I5a4affa3ded6541b1250985255d8984e0db1d62c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5423129
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93155}

commit fca5f79027b957e97a7f7025ded99e5c4d4d0973
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Apr 4 09:06:45 2024 +0200

    [maglev] Simplify node args iterators
    
    Nodes with special arguments often provide a `begin` and `end`
    iterators, which are always used just to build a range iterator. They
    now provide the range directly.
    
    Bug: v8:7700
    Change-Id: Ic2882ede4c39ed00bee63092b5d03553a5f2c104
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419420
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93154}

commit 2c6318e0c0848d3d2b526cc00dafd2e36d847ec3
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Apr 2 11:50:39 2024 +0000

    [sandbox] Introduce the sandbox testing mode
    
    The sandbox-testing mode is the generic mode for testing the sandbox's
    security properties. It is used specifically for demonstrating and
    validating sandbox bypasses. Currently, the requirements for a sandbox
    bypass are fairly strict: there must be a write to a specific page
    allocated at a random address outside of the sandbox at startup. In the
    future, it's expected that these requirements will eventually be relaxed
    to simply "memory corruption outside the sandbox".
    
    Bug: v8:12878
    Change-Id: Ifae611e3bb291c98d54ca26b26c1336b3e43044e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412311
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93153}

commit af134076c7b3c7cfc3cb069d834b4d66854135bd
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Apr 3 21:06:36 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/04c884c..a6f89b9
    
    Rolling buildtools/linux64: git_revision:93ee9b91423c1f1f53fb5f6cba7b8eef6247a564..git_revision:415b3b19e094cd4b6982147693485df65037f942
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/a766324..9280ce2
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/bb95c35..2d1be25
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/e545830..5dc83f8
    
    Rolling third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/5fc1a2c..30fee7b
    
    Rolling third_party/fuchsia-sdk/sdk: version:19.20240320.0.1..version:19.20240328.3.1
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/77afe8e..c4fec74
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/1317096..932d253
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/30bf3a7..fbd0a40
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/3db3d7b..3571af4
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751618528213700433
    
    Change-Id: I4fd16f5b8e27a21fd56aa5b53b7dcc01aaeffadd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5422770
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93152}

commit f37353033b037eee79e5c954f9a96c419f3355d9
Author: Eva Herencsárová <evih@chromium.org>
Date:   Thu Apr 4 05:30:13 2024 +0000

    Revert "[shared-struct] Support RAII syntax to handle the waiter queue bit"
    
    This reverts commit 07277929c0968a6a3415343b59f89578bc92ef51.
    
    Reason for revert: fails on: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Blink%20Linux/30062/overview
    
    Original change's description:
    > [shared-struct] Support RAII syntax to handle the waiter queue bit
    >
    > RAII syntax provides better readability and reduced the likelihood of
    > introducing bugs by forgetting to release the waiter queue bit.
    >
    > Bug: v8:12547
    > Change-Id: I55a329f39ff87d9380eda494ce0e89b2d7626900
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5410312
    > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    > Cr-Commit-Position: refs/heads/main@{#93150}
    
    Bug: v8:12547
    Change-Id: I32fd15da3a85add0ad6b3731804d68a9bcb5e1ad
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419418
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Owners-Override: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93151}

commit 07277929c0968a6a3415343b59f89578bc92ef51
Author: Luis Pardo <lpardosixtos@microsoft.com>
Date:   Tue Apr 2 14:37:47 2024 -0700

    [shared-struct] Support RAII syntax to handle the waiter queue bit
    
    RAII syntax provides better readability and reduced the likelihood of
    introducing bugs by forgetting to release the waiter queue bit.
    
    Bug: v8:12547
    Change-Id: I55a329f39ff87d9380eda494ce0e89b2d7626900
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5410312
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93150}

commit 49ba787fca9bd98daa1c1f4c36f0038d5640b6b2
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed Apr 3 14:01:52 2024 -0700

    [maglev] Parenthesize && inside || to quell gcc warning
    
    Bug: 331358160
    Change-Id: I307024dc5740c74d9e6ff0ce80765de4f9e27476
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419867
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93149}

commit c05df3ed5fb7947d11fbcc4341bfdb6c91cecfd8
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Apr 3 16:19:26 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - ArrayGet
    - ArraySet
    - ArrayLength
    
    Bug: 331100916
    Change-Id: I7349b83cfb9300a5b0035637eb815f18bb3caa85
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5420109
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93148}

commit 2d0a45ee703d2c834a265b7a3cdce4f9843bf384
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Apr 3 17:44:54 2024 +0200

    [tools] Improve profview visualisation
    
    In profview:
    
      * Add support for Maglev and Sparkplug in the summary view, with
        Maglev replacing Turboprop (which is long gone).
      * Include Sparkplug, Maglev, and Maglev deopts in the function
        timeline (with appropriate colours matching the legend).
      * Add dependency group deopts to the deopt kinds, so that we can see
        lazy deopts that discarded code which wasn't on the stack.
      * Remove soft deopts and bailouts, which no longer exist.
    
    Additionally, log the specific dependency leading to a dependency deopt,
    rather than the generic "code dependency" message.
    
    Change-Id: I0dacd6f53cce4c16f50960da7464623a45347668
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419180
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93147}

commit c21fbde1ee3e7ffe5353a5e3b4878cbacfdfbe4e
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Apr 3 16:28:24 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - Float64SameValue
    - FloatBinop
    - FloatIs
    - FloatUnary
    
    Bug: chromium:331100916
    Change-Id: If98f27ef8f5682fa9a8d60fb5d3914f2c24dbddd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419399
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93146}

commit 476bb169ea9a20ec1d5e2388cc8ef9db8ac36338
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Apr 3 11:33:34 2024 +0200

    [turboshaft] Maglev-to-ts: support TypedArray new, load and store
    
    Bug: v8:12783, v8:14581
    Change-Id: Ifa84d9859f3061224b8d7bd02e52d95f082b69ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412657
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93145}

commit 45dc385fb378d5927302936720c150dfa4d49555
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Apr 3 13:11:37 2024 +0200

    [maglev] Fix duplicated object input location position
    
    We don't need to use the input_locations for duplicated object, we
    should skip them.
    
    The input location size for an InlinedAllocation is either 1 when
    escaped, or GetInputLocationsArraySize when captured.
    
    Fixed: 332392668
    Bug: 326091155
    Change-Id: I3b8a1c8559a7feaef3bbf813dbdb27bcb081051e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419174
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93144}

commit 56fd7a8311b9ea2cc6e6ac03cad505342f4e2d03
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Apr 3 14:25:59 2024 +0200

    [maglev] Add source position for BuiltinContinuationFrame
    
    Fixed: 332570754
    Change-Id: I408febb75c2dacc18521b80e3d4a36fb47d4bbb7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419398
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93143}

commit 2061293b34e2af8227694b29917609d283e80989
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Apr 3 14:33:52 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - BigIntUnary
    
    Bug: chromium:331100916
    Change-Id: Ib9f97a4cf2f607b3c68a723289321a7a541cbdc1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419395
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93142}

commit f9c16ae4b5aea1f868f9ccd2864767cce341c1dd
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Apr 3 12:33:27 2024 +0000

    [sandbox] Fix handling of invalid enum value in ElementsKindToString
    
    When an invalid enum value is passed into ElementsKindToString, we
    previously had undefined behavior as the function would not return a
    value at the end. This could lead to a sandbox violation if the enum
    value inside the sandbox was modified by an attacker. Simply adding an
    UNREACHABLE fixes this. See also issue 326086002 for more details about
    this kind of pattern.
    
    Bug: chromium:332475841
    Change-Id: Ib276abe0954d2c76d1021f35eb25f69e2e77ebfe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5420108
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93141}

commit 764b484078173f17e828ae92967bdea63bd54e30
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Apr 3 13:18:37 2024 +0200

    [sandbox] Half the size of ExternalPointerTable reservation
    
    We are running out of address space on some Android devices because we
    added another table instance. Based on UMA data we can half the
    overall capacity though without significantly increasing table OOMs.
    
    Bug: v8:14698, chromium:328117814
    Change-Id: Ia9b12e448da33cc0585f4f0869e6ca93f9e98560
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419397
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93140}

commit de461a0af4426445453b28835164bd62172e603c
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Apr 2 18:48:22 2024 +0200

    [maglev] Fix phi untagging input hoisting with different hoist types
    
    In case multiple inputs of the same phi are hoisted, they might require
    different hoist types.
    
    Fixed: chromium:331836788
    Change-Id: I63a4c6d411a4d5a4922f2e55c1c4e7b35a954081
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412659
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93139}

commit c63e4c4954f38f68b69993c7f20bef6055d79ac4
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Apr 3 10:43:30 2024 +0200

    [wasm] Correctly lookup WebAssembly object in InstallConditionalFeatures
    
    The WebAssembly object was looked up partly from the NativeContext.
    However, after user code has been executed, the WebAssembly object has
    to be retrieved with a JavaScript property lookup, because the
    WebAssembly object may have been replaced or augmented by user code.
    
    Drive-by change: I added a regression test for a similar issue where I
    forgot to add the test to the CL.
    
    Bug: 331358160
    Change-Id: Iec81830afee3352a53a27f2658408f55d62a840c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419093
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93138}

commit dc5e4e401090fa7d5e6c796cea16f2cde5d6cc1a
Author: Hao Xu <hao.a.xu@intel.com>
Date:   Thu Mar 28 16:23:58 2024 +0800

    Add JCC erratum mitigation in AssembleArch(Deopt)Branch
    
    When jcc instruction is not fused with its previous instruction, we
    should align the single jcc instruction.
    
    Bug: v8:14225
    Change-Id: Ibf75b8f8c43f329de09300944298b40338740190
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5400345
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93137}

commit e0be9104a43fdb8c234e918078949c2a4f00ed11
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Apr 3 11:53:40 2024 +0200

    [wasm] Add likely/unlikely hints in Turboshaft wrappers
    
    This creates deferred blocks and avoid some spills in non-deferred
    blocks.
    
    R=ahaas@chromium.org
    
    Change-Id: I370a92f7d0d7f7d8d2e5cf2bbcc63580c6427ed2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419394
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93136}

commit 87f5679f31af39f634803f6e208de4a71225123f
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Apr 3 11:48:10 2024 +0200

    [wasm] Use appropriate stub call mode for Turboshaft wrappers
    
    R=ahaas@chromium.org
    
    Change-Id: I8d3c742abc071b655c8f75a0e96f7c1018b24895
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419393
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93135}

commit bbbb8c86fb8065a0be2fd8cdd9297917c793301b
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Mar 25 14:57:35 2024 +0100

    [gc][wasm] Refactor body descriptors
    
    Define a few generic helpers for defining custom body descriptors more
    declaratively. Use them for the straight-forward Wasm body descriptors.
    
    R=omerkatz@chromium.org
    CC=​mliedtke@chromium.org
    
    Cq-Include-Trybots: luci.v8.try:v8_linux_arm64_gc_stress_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux_gc_stress_dbg
    Cq-Include-Trybots: luci.v8.try:v8_mac_arm64_gc_stress_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux64_gc_stress_dbg
    Bug: v8:14564
    Change-Id: I6a2bbc96de0b433555a6d59f1a8ae4e29745bac9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383506
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93134}

commit 5ee743a2fd30233a2a900119cd05e0d16fba2de0
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Mar 21 14:59:42 2024 +0100

    [fuzztest] Add regexp fuzzer
    
    This adds a grammar-based regular-expression fuzzer using FuzzTest.
    The logical flow is inspired by the legacy libfuzzer fuzzer:
    https://source.chromium.org/chromium/chromium/src/+/main:v8/test/fuzzer/regexp.cc
    
    Unlike the previous fuzzer, the new fuzz test will explore valid
    regular expressions with a higher likelihood, based on an
    auto-generated InGrammar domain. The domain is based on a simplified
    antlr v4 regexp grammar from the wild. It can be replaced with a
    better version as soon as we find one.
    
    The new fuzzer also fuzzes over the subject strings the regular
    expression is tested on, which is now possible, because FuzzTest
    supports multiple parameters. The same holds for the regexp flags.
    
    Bug: 40941204
    Change-Id: I4f2bd7707a66d3fdb1cf7a147ae1f62aca4445b0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372053
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93133}

commit 9d0e6b1cbce0dc8c688801d63414907940ef81e2
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Apr 3 11:11:11 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - Goto
    
    Bug: chromium:331100916
    Change-Id: Ifd73fde32d034ce0976ee379ccf3bc2ede3023e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5419173
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93132}

commit 978c9e889f45fc2c9383872ba176050a6e78ef03
Author: Eva Herencsarova <evih@chromium.org>
Date:   Thu Mar 28 10:42:04 2024 +0100

    [wasm][fuzzer][cleanup] Use SmallVector instead of Vector
    
    Bug: v8:14679
    Change-Id: Id7768efbe801d072b6b86b6cf09dc045ec089385
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401786
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93131}

commit 07cb6825d22b53fda066797efd623b59b8b0f64a
Author: Yuheng Wei <yuheng.wei@intel.com>
Date:   Wed Apr 3 15:06:26 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of F32x4SConvertI32x4 and I32x4SConvertF32x4 in turboshaft
    
    Bug: v8:12716
    Change-Id: I81783af39c1956f83cf2032ed3128a2998300fed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5404727
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Yuheng Wei <yuheng.wei@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93130}

commit 549567808376c0caaeed2051cc71fd5adbf67b66
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue Apr 2 17:43:46 2024 +0200

    [api] Expose new ways to wrap  C++ objects with JS wrapper objects
    
    JS wrapper objects are generally constructed via ObjectTemplate. Such
    objects can now be constructed with 0 embedder fields and use the
    newly introduced Wrap/Unwrap methods to set and get the corresponding
    C++ pointers.
    
    Internally, these will use a CppHeapPointer field and dedicated
    external pointer table.
    
    Bug: chromium:328117814
    Change-Id: I9cb79a86ccdca8d185eaf79efffb16051dd75dc0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401858
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93129}

commit 636b17b1b0602041a4774a7d596b08e8fc32be72
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Apr 2 16:26:57 2024 +0200

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - ConvertJSPrimitiveToObject
    - ConvertJSPrimitiveToUntagged
    - ConvertJSPrimitiveToUntaggedOrDeopt
    - ConvertUntaggedToJSPrimitive
    - ConvertUntaggedToJSPrimitiveOrDeopt
    
    Drive-by: Improve conversions between V<Union<...>>
    
    Bug: chromium:331100916
    Change-Id: Ic9ad75ba215a7a5eb17de2616a1827ca22ba176c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412660
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93128}

commit 6b43b4c898a90a687ac807cd30096b563f1064d0
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 2 12:35:50 2024 +0200

    [turboshaft] Add unreachable code bailout in FaspApiCall lowering
    
    Bug: v8:12783
    Change-Id: Iad5fddb6d90d56c1063bb8da2e9b54a8bbbc4a59
    Fixed: 331909453
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412312
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93127}

commit 292c5a8536ae0a70ac59d8ea8b3bdcceac44e8a5
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Apr 2 13:53:10 2024 +0200

    [wasm] Check for all new fields before calling InstallTypeReflection
    
    The origin trial of JSPI can enable the type reflection proposal after
    some JavaScript code has already been executed. This JavaScript code can
    already add the fields to objects that would be added by the type
    reflection proposal. Therefore, if any of these fields already exists,
    the type reflection proposal cannot be activated.
    
    With this CL we check for all fields that get added with the type
    reflection proposal, and don't add any fields if one of them exists
    already.
    
    R=fgm@chromium.org
    
    Bug: 331383939
    Change-Id: I551f4aebf5429fd08b79435723100a4e93bba715
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412655
    Reviewed-by: Francis McCabe <fgm@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93126}

commit dce58c60b1fdb266ab334c19fd16289ab58a0010
Author: Seokho Song <seokho@chromium.org>
Date:   Tue Mar 26 12:31:07 2024 +0900

    Fix missing float16 enabled check on the serializer
    
    Due to the ArrayBuffer possibly being modified in the script,
    the serialized value type can be changed to 'h' which means
    a half-precision floating point.
    
    Since float16 is an experimental feature and should not be
    exposed without a flag, on reading the array buffer,
    Split the code path float16 or not and add a conditional statement
    that checks the float16 enabled.
    
    Bug: 330922408
    Change-Id: If7bff8812cc5b6e6450c257bbb6d0b2944d1ffce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5394893
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Seokho Song <seokho@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93125}

commit 4621a73ae3971b025a14f1981b30084c65053104
Author: Lei Zhang <thestig@chromium.org>
Date:   Thu Mar 21 15:21:18 2024 -0700

    Remove unnecessary includes from various headers
    
    Clean up unnecessary inclides in a few headers, and then add forward
    declarations and do IWYU to fix the build. Also remove a few instances
    of "v8::" usage inside namespace v8.
    
    Change-Id: I52717f321fe2fa584f266b53eab9b38adf6041ea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5384986
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Lei Zhang <thestig@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93124}

commit b352a2951dc6c19c7cebd66f3aa2818997ba4654
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Apr 2 09:04:38 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/c501627..04c884c
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/ac04c10..a766324
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/406a66d..bb95c35
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/a5c46d2..e545830
    
    Rolling third_party/fuchsia-sdk/sdk: version:19.20240328.1.1..version:19.20240320.0.1
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/eff443c..77afe8e
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/c0f9f17..ac82d4f
    
    Rolling third_party/siso: git_revision:3ccd47200355e0a6fc7fecf6b16aba559d26e23c..git_revision:3cec541372ec0556127a641d9c6e4a90d46ba1b8
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/279d79a..3db3d7b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8751754416935920529
    
    Change-Id: I502ab1ead7f2c56e4aeccf52e1393783187dd929
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412836
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93123}

commit 5243f676affddb7897f48c67549f4eea0ff0300e
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Mar 26 16:53:20 2024 +0100

    [parser] Fix reparsing of anonymous classes
    
    Use empty string as an anonymous class name when parsing instead of
    nullptr. This makes class parsing and reparsing code uniform (the
    latter gets the class name from SharedFunctionInfo where the anonymous
    class' name is set to an empty string).
    
    Bug: chromium:329693878
    Change-Id: I3272f21d8000ec1c7f5dfb315277630974b917f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380193
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93122}

commit ad6df30db51306f16b8590c9e59e4f238b134642
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Apr 2 17:09:13 2024 +0200

    [wasm][fuzzer] Fix over-zealous tierup triggering
    
    When fuzzing, we enable --wasm-sync-tier-up via flag implication,
    which contrary to production code didn't reset the tiering budget
    when triggering tier-up, and didn't check whether the function is
    already tiered up. So for long-running loops, we executed a fresh
    synchronous compilation job at each back edge.
    This patch fixes both problems: it resets the tiering budget, and
    skips repeated tier-up requests when the NativeModule already has
    optimized code for the given function.
    
    Fixed: 330745165
    Change-Id: Ie733180f0b47cf07a2e26a1b7bc67eb3624428ed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412662
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93121}

commit da5dd9b5f48dd0b3d0b3e984759002a21ce36937
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Apr 2 16:45:41 2024 +0200

    [frames] Merge frame singletons into a union
    
    Remove the concept of individual frame singletons in the stack iterator,
    replacing it with a union over the different frame types. This reduces
    the stack size of the stack iterator (which is important for profiling
    stack iterators that have a small stack in the signal handler).
    
    This requires in-place initialising the frame when setting it, which in
    turn requires updating code which thinks it can call SingletonFor
    without mutating the current frame. So, remove SingletonFor entirely,
    making it clear that this is a frame initialisation, and clean up the
    code that (mis)used it.
    
    Change-Id: I26b010415334ec6ae8c70ed10e828a19547d2470
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412661
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93120}

commit aea9fe122351cb36ec532e9638dcebf4a885b771
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Apr 2 16:01:05 2024 +0200

    [turboshaft] Relax effects of FindOrderedHashEntry
    
    We made the effects of FindOrderedHashEntry more strict in
    https://crrev.com/c/5385879 because we suspected that we were missing
    an effect, and that this was leading to crashes. This CL indeed
    stopped the crashes.
    
    The effect that we were missing is actually CanAllocate, since this
    builtin can flatten ConsStrings.
    
    Bug: v8:12783, 330720102
    Change-Id: I6c235016312042f43864a834c69de914eaac8030
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412658
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93119}

commit 7dcfe63d8f4ebd83eab75c28d07f1ca87064c4eb
Author: Marja Hölttä <marja@google.com>
Date:   Tue Apr 2 15:49:11 2024 +0200

    [string + string wrapper] Fix the case when we subclass String
    
    If we subclass String and the subclass has a custom @@toPrimitive
    function, we didn't detect it and ignore it (in all tiers).
    
    This CL invalidates the "string wrapper toPrimitive" protector also
    when we detect that something subclasses String (whether or not it
    has a custom toPrimitive) and when calling Reflect.construct with
    a String and a non-String new.target.
    
    Bug: v8:14688, v8:12199
    Change-Id: I65668e25c4dc7bd394cb80b569907a90c701f669
    Fixed: v8:14688
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401788
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93118}

commit c814d861f87539c89fc96aed0c6a41ef76f0ff53
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 28 14:15:28 2024 +0100

    [bazel] Disable warning flags that have been added to Wextra in clang
    
    Bug: b/330781959
    Change-Id: I14cd40fff79f52d83e8b1f669419efcde11671fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401791
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93117}

commit d31dc5ecb1f9f6993161424bb1ab205e6e08df75
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 2 11:26:57 2024 +0200

    [maglev] Remove FastField(ValueNode)
    
    We want FastObjects to continue to be constants, ie. they don't
    depend on generic ValueNodes.
    
    This removes FastField and wire inlined arguments elements
    differently.
    
    Bug: 326091155
    Change-Id: I91ca451d1a0c61ee11c94cab58325f5f44b0d938
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401861
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93116}

commit 7af646f3f595f1cd8ded60c6b709f72a637cbf39
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Apr 2 15:02:43 2024 +0200

    [maglev] Fix missing smi dependency in unsafe untag for index
    
    Untagging a smi to be used as index must mark input phis as requiring
    the Smi to not overflow.
    
    Fixed: chromium:331085620
    Change-Id: I82ed8d15984f43e0846b30dae549af9b54a1f1eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412935
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93115}

commit 9cdb7f2ecc61feab3e675c3fd546c0b490a6dc5d
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Apr 2 13:55:58 2024 +0200

    [liftoff] Optimize static index for indirect call
    
    If the index for an indirect call is statically known we can generate
    much leaner code by avoiding the computation of the dispatch table
    offset.
    
    Also in the case of a dynamic index this CL makes us emit one less
    addition, and instead adds the kEntriesOffset together with the kRefBias
    or kTargetBias later.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: Id92355a162fd260d517e172555c3d2801b3c2a94
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401777
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93114}

commit 23539f985205ead6960827238315d0bba4a009ea
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Mar 27 14:25:18 2024 +0100

    [d8][wasm] Add %WasmNull() intrinsic for testing
    
    Change-Id: Ibb577916a7f15f78ef3e6a8621ed120512c64704
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401772
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93113}

commit ae67bb956f3b42fed41fde8cb0726bb99352df42
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Mar 21 15:21:08 2024 +0100

    [multimodal] Consolidate efficiency_mode with single threaded GC
    
    Let the --efficiency-mode flag control both, the single-threaded GC
    and the efficient tiering.
    
    Drive-By:
    * Also let the GC battery saver mode be overwritten by --battery-saver
    * Cleanup some naming
    
    Bug: chromium:41485666
    Change-Id: I77620829e5d1def92938a14b733532c6eef8b4c0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383479
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93112}

commit a86652ce01367b99e21c619d4d5edab57009ab4f
Author: Omer Katz <omerkatz@chromium.org>
Date:   Mon Mar 25 16:05:54 2024 +0100

    [heap] Remove unneeded locks from page pool
    
    Bug: v8:14390
    Change-Id: If475a2f33866a07ee019c4f83a9bedfa2a09cb5a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388385
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93111}

commit 3bb73428217ab75892b258e5f8db8250dacfc888
Author: Omer Katz <omerkatz@chromium.org>
Date:   Mon Mar 25 14:34:18 2024 +0100

    [heap] Release pooled pages before finishing sweeping
    
    We can let concurrent sweeping do a bit more work while the main
    thread deals with releasing the pooled pages. This might help
    reduce syscall costs by having fewer pages allocated.
    
    Drive-by: Merge NumberOfChunks and NumberOfCommittedChunks
    
    Bug: v8:12612, v8:14390
    Change-Id: I827458cdebb70aa7b58648440174e766d237f0d3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385334
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93110}

commit 2deb4fc1ae91ec457e2b85bf9f316c8884b707a5
Author: Adam Klein <adamk@chromium.org>
Date:   Thu Mar 28 15:39:01 2024 -0700

    [wasm] Remove redundant setting of type_reflection feature flag
    
    The wasm feature is already set from the commandline flag in
    WasmFeatures::FromFlags, so there's no need to test the
    commandline flag again in WasmFeatures::FromContext.
    
    Change-Id: I048f3495f5a94bad406336de0cfae5aea580d4df
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5402108
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93109}

commit 27ebef493c41ae51d73c745e71d79727f7994602
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 2 10:01:34 2024 +0200

    [sandbox] Fix sandbox violation in maglev::VisitCreateBlockContext
    
    ScopeInfo is assumed to be corrupted, we then create a FastContext
    object that is smaller than Context::MIN_CONTEXT_SLOTS.
    
    Since we always assume that a context has at least the mandatory slots,
    we corrupt memory later.
    
    Fixed: 331837303
    Change-Id: I0b6e32b7457778777ade8257e907fe9d71bea206
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5412131
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93108}

commit c734674e03f9d065312c77016dc61bf046692429
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Mon Apr 1 09:23:04 2024 +0200

    [wasm][exnref] Fix null value for constant expressions
    
    Bug: v8:14398
    Change-Id: Ia00d2de97a897d608d6c043b6e267c7d6313a18b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5402583
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93107}

commit c239a176cd0a9d1bda0fce0883e5663713d007fd
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Apr 2 08:40:47 2024 +0000

    Revert "[build] Fix instrumented libs after deps change"
    
    This reverts commit 3c805fe68f794e08a53296416f1eb40b898a40fa.
    
    Reason for revert: The original was reverted.
    
    Original change's description:
    > [build] Fix instrumented libs after deps change
    >
    > This ports https://crrev.com/c/5368675 to V8.
    >
    > Bug: 331352968
    > Change-Id: Ic5357bc197490ed3c3afa6130d67e53d334af7a0
    > Cq-Include-Trybots: luci.v8.try:v8_linux64_msan_rel
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5397916
    > Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    > Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#93051}
    
    Bug: 331352968
    Change-Id: I0c10e675688fdad244e7aa551f6c009a27c954f2
    Cq-Include-Trybots: luci.v8.try:v8_linux64_msan_rel
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5409432
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93106}

commit 70e69c6d0a087aaee9a60a0041a2a5e13be80910
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 28 10:46:56 2024 +0100

    [maglev] Add FastContexts to escape analysis
    
    That is, it allows the allocation of contexts to be elided if
    it does not escape.
    
    This CL:
    - simplifies FastContext, since most fields are just undefined. This
    allows to easily identify runtime values. FastContext also does not
    use FastField(ValueNode*) anymore, which makes it possible to
    delete this constructor in a follow up CL.
    - updates DeepForEachInputImpl to also visit DeoptObjects.
    - adds InputLocations in DeoptInfos for value nodes in a DeoptObject
    - extends the lifetime of value nodes that are fields in a DeoptObject
    - allocates inputs for these value nodes during regalloc
    - create a CAPTURE_OBJECT for non escaping contexts to materialize
    them during deoptimization.
    
    Bug: 326091155
    
    Change-Id: I58a446bb17b702cb3dd90564c6793d16bcb7d43e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392586
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93105}

commit 898c2498abe88745ded74e6804dda0066a45b760
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Mar 27 17:45:05 2024 +0100

    [wasm] Avoid OOB writes of the WasmDispatchTable
    
    This adds a few SBXCHECK for ensuring that any write to the
    WasmDispatchTable is within the limits.
    We also add a similar check to WasmTrustedInstanceData::GetCallTarget
    for additional security on related code paths.
    
    R=saelo@chromium.org
    
    Bug: v8:14564, chromium:330760878
    Change-Id: I597141c3209adaf5bb5ee36d9ca92184df8f098b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401857
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93104}

commit b37aeec0eed67051678f488950cb9ca1b7089836
Author: Michaël Zasso <mic.besace@gmail.com>
Date:   Sat Mar 30 09:48:24 2024 +0100

    [sandbox] Update field in gen-postmortem-metadata
    
    Name changed in https://crrev.com/c/5372496.
    
    Change-Id: Id2e373538fd105d883bd5f14b27c08684ddeb98c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5402581
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michaël Zasso <mic.besace@gmail.com>
    Cr-Commit-Position: refs/heads/main@{#93103}

commit 3417c91e5f30bdcc3d6c7544ab5ae03e203206e4
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Apr 2 09:12:05 2024 +0200

    [maglev] Fix strict comparison HoleyFloat64 with constants
    
    We assume that if we strict compare an untagged value to a constant,
    then the comparison is false.
    
    This is not true with HoleyFloat64, since they can compare
    equal to the undefined value.
    
    This adds HoleyFloat64IsHole node and the optimization to use
    BranchIfFloat64IsHole.
    
    Fixed: 331711028
    Change-Id: I9e2ccbdeda1f12795406a1256b5a76e526453d27
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401864
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93102}

commit 3e7a20bad547b82fe64f717b7587b564799c9730
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Apr 2 08:20:26 2024 +0200

    [heap] Postpone releasing shared space pages
    
    Old-to-new can be overwritten with refs to shared objects. Thus
    releasing shared pages should be delayed, same as we do for young pages.
    
    Bug: 331837300
    Change-Id: If99d700729724e74392257e9cf92f7bf447fe24c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5403890
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93101}

commit a8f80a1648f9c32503b000d8cf171051c4a47fb2
Author: Luis Pardo <lpardosixtos@microsoft.com>
Date:   Wed Mar 27 17:37:01 2024 -0700

    [shared-struct] Fix JSMutex::UnlockSlowPath assumptions.
    
    The JSMutex::UnlockSlowPath assumes that the waiter queue cannot be
    emptied while waiting for the queue lock. After the introduction of
    timeouts this is not true anymore.
    
    Bug: v8:12547
    Change-Id: I3c8d3add70c6ed380585a35f028834a60e437b0e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5402399
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93100}

commit ca7e2e7750ac92d44fc695d7842e6a29bab66bfb
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Mar 28 17:48:37 2024 +0800

    [riscv] Add check before using int64_value()
    
    Fix failed after enable turboshaft-wasm
    
    Change-Id: Idabeb329f26280e7002e743750718076981672fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5402404
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93099}

commit 29dcf5b084221074483f797bf528069b424c463d
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri Mar 29 15:37:46 2024 +0100

    [wasm] Fix expected arity for wasm-to-js wrapper
    
    ... When importing a WasmJS function into a table.
    
    Context: since this CL:
    https://chromium-review.googlesource.com/c/v8/v8/+/5309905
    The expected arity must also be correctly initialized if the JS
    function's arity matches the import's signature, not just when it
    mismatches.
    
    R=manoskouk@chromium.org
    
    Bug: v8:14695
    Change-Id: I14b4adb7fb7f662b4b8820d0f7de4a47f301d444
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5405303
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93098}

commit 8e4d623f07fc5c30965af98b1a368852d04f6a0a
Author: Caitlin Potter <caitp@igalia.com>
Date:   Fri Mar 29 09:17:14 2024 -0400

    Reland "Don't allow Intl.Segmenter iterators to bypass termination."
    
    Without this, using Array.from() on a segment iterator will keep running until it finishes,
    ignoring calls to `TerminateExecution()`.
    
    If the input is large enough, it could hit the 4GB memory barrier and OOM-kill the process.
    
    Co-authored-by: Kenton Varda <kenton@cloudflare.com>
    Bug: v8:14681
    Change-Id: Id5e809f5703ac5ca9e4152d1fbd85c8e7c0b9efd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5389629
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Caitlin Potter <caitp@igalia.com>
    Commit-Queue: Caitlin Potter <caitp@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#93097}

commit 9113922d6e9490e4b92fd1f0524d30502bfe45d4
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Mar 28 15:30:34 2024 +0100

    [wasm] Fix decoding of try-table block type
    
    R=manoskouk@chromium.org
    
    Fixed: v8:14689
    Change-Id: I209a5ede968bdfea25b5ce9964d7b938247de30a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401863
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93096}

commit 4de5fbb0611926d88cdd6f7b637fb659bdcc8bb8
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Mar 28 21:19:05 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e5ff2ef..c501627
    
    Rolling buildtools/linux64: git_revision:cfddfffb7913868936e76a269ae824aadd737b1b..git_revision:93ee9b91423c1f1f53fb5f6cba7b8eef6247a564
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/15f1d1a..ac04c10
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/6afa408..406a66d
    
    Rolling third_party/fuchsia-sdk/sdk: version:19.20240320.0.1..version:19.20240328.1.1
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/ec88f0a..1317096
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/6598a8e..c0f9f17
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/41dfe5d..279d79a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752162106708856305
    
    Change-Id: I602c50ecf814028623fa183c40abcfd9cfff590a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5405423
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93095}

commit ba08b4db8f400e0bcd8c06a4ebaa586097538d48
Author: Alan Zhao <ayzhao@google.com>
Date:   Thu Mar 28 16:05:03 2024 -0700

    Add .att_syntax for inline asm for v8::internal::trap_handler::ProbeMemory
    
    With https://github.com/llvm/llvm-project/pull/85367, clang-cl uses
    -x86-asm-syntax=intel by default on Windows, so we need to add
    .att_syntax to tell clang to use AT&T instead of Intel syntax.
    
    Bug: chromium:330163686
    Change-Id: Ief192022802a1c22e5756123ef12e09a7ac05d81
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5405986
    Reviewed-by: Nico Weber <thakis@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Auto-Submit: Alan Zhao <ayzhao@google.com>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93094}

commit 4683daaf774982b1aa0e46ae38f2bdf9c995c90d
Author: Adam Klein <adamk@chromium.org>
Date:   Thu Mar 28 10:31:51 2024 -0700

    Remove APIs that have been deprecated for more than a year
    
    Removed:
      - ScriptCompiler::CompileFunctionInContext (2021)
      - CopyablePersistentTraits (2022)
      - Function::GetUnboundScript (2023)
    
    Bug: chromium:40195716, v8:12915, v8:13789
    Change-Id: I9f9bd79493a18df1e81a90d08df49ec0e6efb91e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5403708
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93093}

commit aeb1d7557503a8192105c84a17709d2df5ccf864
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Mar 28 09:06:37 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/bf8bf24..e5ff2ef
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/097ccfa..a5c46d2
    
    Rolling tools/luci-go: git_revision:7dd3e0506c6083aae7a0e413a30e0e11b76da08e..git_revision:a84377ac0800e2330d02c3dcbf7b4b74a06d6a5b
    
    Rolling tools/luci-go: git_revision:7dd3e0506c6083aae7a0e413a30e0e11b76da08e..git_revision:a84377ac0800e2330d02c3dcbf7b4b74a06d6a5b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752207409673784977
    
    Change-Id: I4be16afc7bf00f36212d941dcc4ddb91697e6536
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5405414
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93092}

commit 7f35a50a2fcfbf71032af03442f5b8f4094060e2
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Mar 28 16:09:34 2024 +0100

    [wasm] Set missing turboshaft wrapper node origins
    
    R=mliedtke@chromium.org
    
    Fixed: 331704408
    Change-Id: I791dea90db76a4db3906aba0fc8f7d534dbf2022
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401790
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93091}

commit 14c89d789b2b1e6362b15263e96f7a95716897be
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed Mar 27 16:15:05 2024 -0700

    [api] Deprecate v8::BackingStore::Reallocate
    
    Bug: chromium:331326406
    Change-Id: I4b83146a7ad8306c22ffb9a652e79487cfeea18b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5403926
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93090}

commit f082ddf74b25629b28ba117ce49642b50d931036
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Mar 28 14:50:54 2024 +0100

    [test] Fix test failing with no shared cage
    
    The GC introduced to test-serialize/ContextSerializerCustomContext in
    https://crrev.com/c/5383045 failed in builds with no shared cage,
    because at that point the isolate was not entered by the main thread.
    This CL fixes it.
    
    Bug: b/330450848
    Change-Id: I31cb44dcd715becbfaf7d152cf9740b46553b1f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5405293
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Auto-Submit: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93089}

commit 39351f00bbed5cae8cecc94e987b2e7e5671af8c
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Mar 28 14:40:24 2024 +0100

    [heap] Fix C++ heap snapshot for new JS API wrappers
    
    Not all objects with embedder fields are possible JS API wrappers.
    Properly check for the right type during heap snapshot generation when
    merging embedder nodes.
    
    Bug: chromium:331682626, chromium:328117814
    Change-Id: Ibe53a202870986552444e344bbb9881fbd9891fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5405292
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93088}

commit bdc833bde47fb5e7b2e4487a7d7e877287d0d911
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Mar 27 16:33:53 2024 +0000

    [sandbox] First step towards fine-grained type tags for Foreigns
    
    With this CL, the external pointer accessor of Foreign now requires a
    ExternalPointerTag template parameter. For now, all users of Foreigns
    use the generic kGenericForeignTag, but subsequent CLs will create
    fine-grained tags for the different types of external objects.
    
    Bug: chromium:40940623
    Change-Id: I0281757500c1ed42a255b84e474fbc3b2cad7fe5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5397437
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93087}

commit 949fc3ff7335374c1e0c64fad33ad0d73b550919
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Mar 28 08:01:09 2024 -0400

    [turboshaft] Fix compilation with gcc
    
    Change-Id: Ib00233c51d4535c84c6b49ed6cb3c59925559f86
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5403823
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93086}

commit f6c936e836b4d8ffafe790bcc3586f2ba5ffcf74
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Mar 26 16:40:24 2024 +0000

    [sandbox] Turn DeoptimizationData into a ProtectedFixedArray
    
    ... instead of a TrustedFixedArray. As such, all other objects
    referenced from it must now be in trusted space. In particular, this CL
    moves DeoptimizationLiteralArray, DeoptimizationFrameTranslation, and
    the InliningPosition array into trusted space as (some of them) contain
    sensitive information such as how to convert stack frames during deopt.
    In addition, the reference from DeoptimizationData to the
    SharedFunctionInfo must now be replaced by a reference to a
    SharedFunctionInfoWrapper living in trusted space.
    
    Bug: chromium:329677666
    Change-Id: I7e6ea5a65075976008696fb8c5e8f28cee38c1f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372496
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93085}

commit bd86b9daaf55eddd86ef17c64e0ad216a03d86b5
Author: Carl Smith <cffsmith@google.com>
Date:   Wed Mar 27 14:39:02 2024 +0100

    [fuzzilli] Clean up prints
    
    Make all fuzzilli prints go to stderr.
    
    Change-Id: I610b07fcc8a4ed349f5e16c0a796b2f1c3897222
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401773
    Commit-Queue: Carl Smith <cffsmith@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93084}

commit 19cfad59afd5361cb20c216f1c6da5e9405a0512
Author: Eva Herencsarova <evih@chromium.org>
Date:   Wed Mar 27 17:28:54 2024 +0100

    [wasm][fuzzer][cleanup] Change enum classes to enum
    
    This is the same as patchset 1: https://crrev.com/c/5396418/1
    
    Bug: v8:14679
    Change-Id: I29498fd4064f59ce664e66749db61ccee3743606
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401856
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93083}

commit ce55bab2ff99156ba5a65f96e2f8239736505961
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Mar 27 14:48:53 2024 +0100

    [turboshaft] V<>ify Turboshaft
    
    Operations processed:
    - CallOp
    
    Drive-by: Introduce `::Nullopt()` for optional values.
    
    Bug: chromium:331100916
    Change-Id: Iddeff0bb8e9a0c303286b64e55c0c8a90556c643
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401852
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93082}

commit b3905a6815ffad286414f9a5a7d0fa670b226379
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Mar 27 18:44:22 2024 -0400

    [turboshaft] Fix a typo on big endian
    
    Change-Id: Ib3948fdb9a26fe6edb89dc45fa789f4819b9d72a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5403806
    Auto-Submit: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93081}

commit 47efac641929a8db9ca6f9f01957e8e4ba20dbfd
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Mar 27 22:18:07 2024 -0700

    Update fuzztest (trusted)
    
    Rolling third_party/fuzztest: https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+log/19bfa07..bdb5d83
    
    fuzztest: fix runtime_deps for fuzztest fuzzers (Paul Semel)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/bdb5d83
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752248933365478353
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Change-Id: I60dfb82557ce5b67ba83691306fc48cd92282810
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5403819
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93080}

commit d744a3f04a255d0ae79398bdaba5601be19a10c4
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Mar 27 21:18:18 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/1139ce7..bf8bf24
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/7c64299..6afa408
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/79cfa04..097ccfa
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/d50741b..41dfe5d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752252708506406497
    
    Change-Id: I7746924656b7939ffa1e16fa23e337b810009aa8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5403816
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93079}

commit b2a3668cef5766bd85c2a7e8b34436529a048cb9
Author: 杨文明 <yangwenming@bytedance.com>
Date:   Wed Mar 20 18:46:16 2024 +0800

    [riscv] fix RISCV-build on Mac64.
    
    In MacOS, some int types such as int64_t & intptr_t
    are different from what defined in Linux, which makes
    RISCV-build on Mac64 fails.
    This CL makes the builds on Mac work:
    1. replace intptr_t with int64_t/int32_t;
    2. use cross-platform macros like PRIx64 as print
    formats.
    
    Bug: v8:14682
    Change-Id: I2dc21707f523c819024329d1ea373fd821f12674
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380178
    Auto-Submit: 杨文明 <yangwenming@bytedance.com>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93078}

commit 50a18270f02196e64deeb99c4559f8a0e5eb00eb
Author: Luis Pardo <lpardosixtos@microsoft.com>
Date:   Wed Mar 27 15:07:25 2024 -0700

    [shared-struct] Expose number of mutex waiters for testing.
    
    Expose number of mutex waiters and add test.
    
    Bug: v8:12547
    Change-Id: If8c5a0e374b5b13b66c4aa6200dce90a22ae0be7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5403494
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#93077}

commit 30db6d57fc00f1067b6fe80d1324a2bccd6b2a6c
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Mon Mar 25 15:39:32 2024 +0100

    [ro-promotion][sandbox] Fix promotion of code table entries
    
    After read-only promotion, some Code objects are promoted to the RO
    space. But the corresponding code pointer table (CPT) entries are not
    in the read-only segment. Therefore, if a GC is triggered at this
    point, they will be swept and this will leave such Code objects with
    an invalid self indirect pointer offset. If heap verification (e.g.,
    as part of the same GC) ever reaches such an object, it will fail.
    
    This CL:
    
    1. Adds the following invariant to the heap verifier: if an
       ExposedTrustedObject is in the RO space, its self indirect pointer
       entry must be in the read-only segment, and vice versa.
    2. Fixes read-only promotion, so that code pointer table entries are
       correctly promoted and the above invariant is satisfied.
    3. Triggers the verification of the mutable heap (as well as that of
       the read-only heap) after read-only promotion.
    4. Modifies cctest/ContextSerializerCustomContext so that a GC is
       triggered after read-only promotion (which crashes without the
       fix in this CL).
    
    Bug: b/330450848
    Change-Id: I5525579339a085082a4dc935f33a9800e1b946e0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383045
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93076}

commit 9729069a162f0b99e82803fe4ebf094aea53a710
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Mar 27 20:23:37 2024 +0100

    Add benchmark for bindings operations
    
    Adds a benchmark representing bindings setup.
    
    Results:
    ------------------------------------------------------------------
    Benchmark                                     Time             CPU
    ------------------------------------------------------------------
    OldBindings/AccessorReturningWrapper    1510244 ns      1510078 ns
    NewBindings/AccessorReturningWrapper    1248103 ns      1247787 ns
    OldBindings/AccessorReturningSmi         622348 ns       622332 ns
    NewBindings/AccessorReturningSmi         581722 ns       581705 ns
    
    Bug: chromium:328117814
    Change-Id: I6557a39b4c05c69e3751f6d0b7e172b29e47126c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5382158
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93075}

commit 6c5b752d1c02df06d2363d860a75f6c788a7c57b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Mar 27 09:04:32 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/89e1706..1139ce7
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/4bcca7b..8919328
    
    Rolling buildtools/linux64: git_revision:06cdcc8e1fa8e56f70efb4357d473345b7d1c083..git_revision:cfddfffb7913868936e76a269ae824aadd737b1b
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/0db9bf2..6ddb5cb
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752298005649171345
    
    Change-Id: I170676966fa2e63fe9387be81bb035d13cbc47db
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5402453
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93074}

commit 72d98331b56f01a6fd99ef5744c80aa09b7bfc55
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Mar 27 16:48:11 2024 +0100

    [api] Add new v8::PropertyCallbackInfo constructor
    
    This is a temporary workaround to ease migration of Chromium
    bindings code to the new interceptors Api.
    
    Bug: chromium:328490288
    Change-Id: Ib0c940361766ce1f2adfcbb2eef3062407d0be21
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401854
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93073}

commit aeaa2344c6de219b416933be641ee94bcf28cb92
Author: Adam Klein <adamk@chromium.org>
Date:   Tue Mar 26 15:49:59 2024 -0700

    Use d8.file.execute instead of load in mjsunit tests
    
    They do the same thing, but d8.file.execute is more commonly used,
    so standardizing on it seems preferable.
    
    Change-Id: Ic97533169040dab3f24cba2b9e0003ad3a53f760
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5397565
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93072}

commit 6be14e97ccb85b7cb71d559af9813ffae0df16ab
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Mar 27 13:16:55 2024 +0100

    [maglev] Enable escape analysis
    
    Bug: 326091155
    Change-Id: I7b0b4712b9199de8fce067c2006e130508728517
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5400701
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93071}

commit 205efb7337d8d04f97f47426862eb7ffdf8a5fab
Author: deepak1556 <hop2deep@gmail.com>
Date:   Wed Mar 27 21:40:09 2024 +0900

    [sandbox] Introduce CompactibleExternalEntityTable
    
    An intermediate class that abstracts garbage collection logic
    for all external pointer tables. This reduces duplication between
    ExternalPointerTable and upcoming ExternalBufferTable classes.
    
    Apart from change in class hierarchies there is no functionality
    change in this CL.
    
    Bug: v8:14585
    Change-Id: Iefada638df56dc8f5d0e564f6ea4d203831093f6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380315
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Deepak Mohan (Robo) <hop2deep@gmail.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93070}

commit 5030f3c4cf7ff8356476fb0db2f075fd2c0e2bfa
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Mar 27 15:44:40 2024 +0100

    Fix subclassing bounds checks in tests (again)
    
    The type of the slot changed and the tests were not robust againt
    this.
    
    Bug: chromium:328117814
    Change-Id: I3395db1d422c4abf60e794165cc1df0d4fdb695b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5401775
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93069}

commit 16a118f5a84c0b463c83ea758f7b2fa6cc42dd25
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Mar 27 15:26:17 2024 +0100

    [liftoff] Add helpers for managing temp registers
    
    This adds the TempRegisterScope and ScopedTempRegister classes.
    The first is a scope which manages temporary registers that are reused
    for different things in the course of generating code for an
    instruction.
    The latter is a scoped object which holds a temp registers and returns
    it to the first class when it gets out of scope.
    
    This will hopefully make it easier to write code which uses the same set
    of temporaries for different values during code generation in Liftoff.
    
    For now we only use it in CallIndirect which manages three temporaries.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: Id2d5d5f6d945ec7109029dd1c843fee08f1b6167
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5393445
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93068}

commit 8cf3c93290d5f4dc8102a9e49deca04362aa22b9
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Mar 27 14:19:52 2024 +0100

    [turboshaft] AtomicRMWOp: Fix confusing namings
    
    Calling the memory representation input_rep is somewhat misleading
    given that the input into the rmw isn't the memory but the register
    representation.
    The input register representation (i.e. the value to be written) is
    the same representation as the result representation, so it is renamed
    to in_out_rep.
    
    Change-Id: I49764f093d6366e5e45a75fbd975e3136e6a3d7c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385340
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93067}

commit 01ece321d8b00cc85dd341f09750074e35c9e7f3
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Mar 27 12:54:24 2024 +0100

    [heap, sandbox, api] Introduce CppHeapPointer and friends
    
    This introduces a CppHeapPointer that's always a EPT handle on builds
    using pointer compression and a full pointer otherwise.
    
    This means that even in builds with pointer compression and without
    sandbox we are using an EPT to access this external pointer. This is
    necessary to allow concurrent marking for such pointers as they would
    otherwise be unaligned 64-bit pointers.
    
    Bug: chromium:328117814
    Change-Id: I08d9c2463d7b7703a21169842e241c46d0375138
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392814
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93066}

commit fab3ba3a0e29d17ee6c24132e1286c44a555ac3d
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Mar 27 13:06:26 2024 +0100

    [turboshaft] Compute correct input_count in CreateOperation
    
    Fixed: 331241020
    Bug: v8:12783
    Change-Id: I30d5a1ebc7e10313fc95c42b31c065c35f95cc91
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5400799
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93065}

commit 661f05587fae383d0a269360a9e792e8671be4fd
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Mar 27 13:13:58 2024 +0100

    [maglev] Enable deopt verbose printing when --trace-deopt-verbose
    
    Bug: v8:7700
    Change-Id: Ia66ffd13f654d6fac3e6cf957292a86e5a16ce4c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5400700
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93064}

commit fd530d80472121f3d9a218b38b2f8cb2ddfcf300
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Mar 27 10:34:58 2024 +0100

    [turboshaft] Prepare V<>ification of existing Turboshaft
    
    Most notably:
    - Introduce `Union<...>` for `V<>`.
    - Change `implicitly_convertible_to` to
      `implicitly_constructible_from`
    - V<>ify `WordUnaryOp` as a first example
    - Add `V<>` for a few other operations
    
    Bug: chromium:331100916
    Change-Id: I14fff4b3733d15ef414e3b979aa524dfd3e7b199
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5400697
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93063}

commit cf022eb0940be4e25845b56b0fe9260457282ed2
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Mar 26 14:31:58 2024 -0400

    [compiler] Do not eagerly extend loads to 64 bit on big endian
    
    Doing so is not allowed on turboshaft after this cl:
    https://crrev.com/c/5380531
    
    Change-Id: Ibc14f7f53c64f9cc389027f5669e4555c00343db
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5391956
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93062}

commit e7a5d434638a43d6985bedd80fa88f392d8ba02c
Author: Eva Herencsarova <evih@chromium.org>
Date:   Wed Mar 27 10:23:49 2024 +0100

    [wasm][fuzzer][cleanup] Rename some enums in random-module-generation
    
    Bug: v8:14679
    Change-Id: I05966c0d27595d26081dd15de303ed857e27c4fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5396418
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93061}

commit 97166b301bb7ecdbb687786e19a741d1a15cb538
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Mar 27 10:24:49 2024 +0100

    [maglev] Fix wrong map in TryBuildInlinedAllocatedContext
    
    Fixed: 331420133
    Change-Id: I2e1eabd3d5357743a772fe8875f684d145f0410e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5400696
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93060}

commit 511bf2ae8646f6674071a95982d52749a83665d1
Author: pthier <pthier@chromium.org>
Date:   Mon Mar 25 15:16:19 2024 +0100

    [regexp] Add sanity check to RegExpGlobalCache
    
    ... to prevent OOB access of the register array used in the
    RegExpGlobalCache.
    
    Bug: v8:14656
    Fixed: 330803241
    Change-Id: I11bd6340c1d60a845cec7aaaa5ab88a2fab009bf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387892
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93059}

commit 2b70b69132e7035dbf77205cb75225f99fe8dd6f
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Mar 26 17:25:34 2024 +0100

    [wasm] Enable the Turboshaft wrappers behind --turboshaft-wasm
    
    We can enable the Turboshaft wrappers by default now, but they depend on
    the main turboshaft-wasm pipeline, so add them as a flag dependency of
    --turboshaft-wasm.
    
    R=ahaas@chromium.org
    
    Bug: v8:14108
    Change-Id: I6d8dabf7441735e7b46a2a5df9dbbb32ac1877e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5397438
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93058}

commit f1701d89d6e5f304244492fc7cc9a2c98222bc7c
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Mar 26 14:14:51 2024 +0100

    [d8][handles] Fix some context scopes
    
    This CL replaces some context scopes, which retain local handles to the
    context and should not be used at places where a non-nestable task can
    be executed (see https://crrev.com/c/5258097 for more details).
    
    Bug: v8:13270
    Change-Id: If9b551504c87b0b31e5ad4840c2d25f1b71ac72a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392587
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93057}

commit 980b37da26ad069648c497019fec2bde3fa7803d
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Mar 27 07:32:01 2024 +0100

    [turboshaft][x64] Port/enable ISEL unittests part 2
    
    The following optimizations were missing from the x64 instruction
    selector and were added:
    
     * Optimize ShiftLogicalRight(Load(x, 64 bits), 32) to
       Load(x, 32 bits). This is useful on non-pointer-compression
       builds.
    
     * Do not emit the sign extension in ShiftLeft(SignExtend(x), cst)
       when cst > 32. (same thing for zero extension)
    
    Bug: v8:12783
    Change-Id: I8419f9ff57f7b6bf026e849d855a0ed64a14a28c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383047
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93056}

commit 27feaed6cf4b1a521ca16cfd45a097f6f107690c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Mar 26 21:18:20 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/3039172..89e1706
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/89588ed..79cfa04
    
    Rolling third_party/siso: git_revision:a3d591f9996c1b28fe5762913bb5bbd69960e4d5..git_revision:3ccd47200355e0a6fc7fecf6b16aba559d26e23c
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/24c07df..30bf3a7
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752343300141084401
    
    Change-Id: I8df8f33769553281a37f05f1a9724b9b112f64d6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5398782
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93055}

commit 2b1bde83e2146daaed7bc4bcb3c985bae1ff4916
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Mar 25 14:07:18 2024 +0800

    [sandbox][riscv64] Fix instruction schedule for sandbox related opcode
    
    The StoreSandboxedPointer should be kHasSideEffect
    
    
    Change-Id: I347719433accd61b1434cc67e5fcd2da703a8ba3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5390231
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93054}

commit 570959508f4a608f4aab4d32eb0e6b0f350907a5
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Mar 26 16:15:18 2024 -0400

    Fix IncrementSmi on big endian with pointers compressed
    
    This cl fixes https://crrev.com/c/5381140 on big endian platforms.
    
    A bias was added by https://crrev.com/c/3893419 to `JumpIfTagged`
    which may now be used by `JumpIfForInDone`. As a result we
    also need to take bias into account here.
    
    Change-Id: I4f8b2633c0a09b832327edd64e900e22d090f975
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5397707
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93053}

commit a3d143c14db1163bfbee87899e1974202e7c9292
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Mar 26 09:05:12 2024 -0400

    PPC/s390: [turboshaft] Fix instruction selector regressions
    
    Port bd6b6f982be26f2e3a3153128b59f2e424037d01
    
    Original Commit Message:
    
        Three small improvements:
        - Comparison with smi 0 is correctly optimized
        - DidntThrowOp gets the effect of the call to be optimized away if not
          RequiredWhenUnused
        - Refined the effects on the FindOrderedHashEntryOp and descriptor
    
    R=nicohartmann@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I1e560e08e1c62c027eb978011fab30af6fa64f19
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5395832
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93052}

commit 3c805fe68f794e08a53296416f1eb40b898a40fa
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Mar 26 15:52:16 2024 +0100

    [build] Fix instrumented libs after deps change
    
    This ports https://crrev.com/c/5368675 to V8.
    
    Bug: 331352968
    Change-Id: Ic5357bc197490ed3c3afa6130d67e53d334af7a0
    Cq-Include-Trybots: luci.v8.try:v8_linux64_msan_rel
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5397916
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Alexander Schulze <alexschulze@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93051}

commit 8eb7fdbf13904912e1c96f127684565e5dc226cd
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Mar 26 16:36:47 2024 +0000

    [sandbox] Introduce SharedFunctionInfoWrapper
    
    This will be necessary when converting DeoptimizationData to a
    ProtectedFixedArray, at which point it can only reference other trusted
    objects (or Smis). As such, the current reference to the in-sandbox
    SharedFunctionInfo must then be replaced with a reference to the SFI's
    SharedFunctionInfoWrapper in trusted space.
    
    Bug: chromium:329677666
    Change-Id: I1e5889bc39f15a0ebbea0f057731e450275e38fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5371949
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93050}

commit 78fbb930bed4e333c286387a8283d1d8cbfc5db1
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Mar 26 09:18:49 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/2ffb671..4bcca7b
    
    Rolling buildtools/linux64: git_revision:cfddfffb7913868936e76a269ae824aadd737b1b..git_revision:06cdcc8e1fa8e56f70efb4357d473345b7d1c083
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/4331837..15f1d1a
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/9128ec6..7c64299
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/b83a303..89588ed
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/890351b..0db9bf2
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752388602785526465
    
    Change-Id: I78682c970d205dd89097023994747ce245633589
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5397998
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93049}

commit 837e286cec39e4421e8ebb5d67f7401f6300dceb
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue Mar 26 16:45:24 2024 +0100

    [heap,api,objects] Split off external pointers for CppHeap
    
    - Instead of using the regular EPT, we factor out `CppHeap` pointers
      into their own table `cpp_heap_pointer_table()`.
    - Visitation happens through `VisitCppHeapPointer()` which allows the
      GC to actually treat it as managed reference when reading the
      reference. For embedder data fields we currently have to snapshot
      the field after visiting the EPT entries.
    - The CL also introduces JSApiWrapper which is a value type that just
      wraps a tagged. This way we can have DCHECKs for casts on access to
      the CppHeap wrappable pointers.
    
    The rest of the CL merely wires up visitation.
    
    Bug: chromium:328117814
    Change-Id: I20c49580ba049c0c3d0ca3fa5969a0d77a008507
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392520
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93048}

commit c7d8916419a85c7f90d51592ed140eb1599212ec
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Mar 26 08:11:47 2024 -0700

    Remove realloc path in AB.p.transfer
    
    Bug: chromium:330575496
    Change-Id: I5e27994c9d4cc219270eb8a5f1120ed5bf18ebdd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5394731
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93047}

commit 1a541afcb89fb0e9a71860a0e86da044071ac773
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 21 17:11:58 2024 +0100

    [maglev] Inline context allocation
    
    Bug: 326091155
    Change-Id: I4c45e96a7fd13d550f09fe42dd4abcd7611a4c7d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5384034
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93046}

commit 536571f811e9a51756b4b71f471dd3436b97a6bf
Author: Stephen Roettger <sroettger@google.com>
Date:   Tue Mar 26 13:12:59 2024 +0100

    Reland "[heap] Use discard/recommit to manage RWX memory"
    
    This is a reland of commit 9da8b31f3b52d50c897207d727918545aed2dc34
    
    Changes:
    * remove DCHECK from GetCodeModificationPermission since Mac and Linux
      now behave the same.
    * disable pre-commiting the memory on Windows since it doesn't seem to
      be free on the platform.
    
    Original change's description:
    > [heap] Use discard/recommit to manage RWX memory
    >
    > Instead of allocating pages on demand, set the permissions on the whole
    > code cage at cage creation time and discard the region.
    >
    > Change-Id: Idb9dfecb0d9df12f094722b5bcb1243b561a9420
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372649
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > Cr-Commit-Position: refs/heads/main@{#93024}
    
    Change-Id: Ib255d8b64c31b1ce02749d6535bbccee6e7b4b1a
    Cq-Include-Trybots: luci.v8.try:v8_win64_rel,v8_mac_arm64_dbg
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392809
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93045}

commit fc0a2e1e5cb5790877498f5349d7098823fcdaa0
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Thu Mar 21 16:04:27 2024 +0800

    [loong64][mips64][interpreter] Microoptimise for-in bytecodes
    
    Port commit da2d5c29526d8bfbea2b5fe06fba81b21f1a4656
    
    Change-Id: I82a1f92567f3970ee6f0249d0f70ac6c90821700
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5382068
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93044}

commit 2b08d1021ff1adcfee7f5583192dc5beebe94284
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Mar 26 13:52:58 2024 +0100

    [wasm] Port wasm C API wrapper to Turboshaft
    
    R=jkummerow@chromium.org
    
    Bug: v8:14108
    Change-Id: Ia18dee433340f0d72c155866cf25bbf41dd951e3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392806
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93043}

commit 23c7483b79fcf42333ea967bbb51f6837cb869db
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Mar 26 14:25:02 2024 +0100

    [runtime] Allow exceptions in StringEscapeQuotes
    
    If the input string is close to the maximum string length, then the
    escaped string can be too large. In that case the factory raises a
    RangeError.
    This CL changes the runtime function to account for the possibility of
    this exception, and adds a regression test.
    
    R=ishell@chromium.org
    
    Bug: chromium:331074427
    Change-Id: I7ad0c18e5b0beb149441a40aa14828a4acbd496e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392585
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93042}

commit a454e7266ea336a2057611efeb4404d9237e8cf8
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Mar 26 14:08:36 2024 +0100

    [wasm] Reuse WasmDispatchTable for imports
    
    The ref and target for imports is currently stored in two different
    trusted data structures (imported_function_refs and
    imported_function_targets).
    Storing them in the same data structures avoids one load per direct call
    to an import and improves cache locality.
    
    For simplicity we re-use the WasmDispatchTable for this, even though we
    do not use the signature field. This wasted four bytes per entry. If we
    want to gain this back, we would need to introduce a separate class
    which only stores refs and targets.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564, chromium:330766602
    Change-Id: Id8e8f8fb9a659e892341a5b250262e9bab2df05d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392521
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93041}

commit 4360bf9fb986427db418b29073d4c5d0fafdfa58
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 26 13:37:59 2024 +0100

    [turboshaft][test] Avoid int64_t as input to Int32Constant
    
    Bug: v8:12783
    Change-Id: I16420760003b3bb98812cf2e248d88665a7b7a21
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5393446
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93040}

commit e5f2084c3ad8727e0bc319657f3dc0f99ee91cb6
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Mar 26 08:25:45 2024 -0400

    Fix build in big endian
    
    currently getting the following:
    error: comparison of integer expressions of
    different signedness: 'int' and 'long unsigned int'
    
    Change-Id: I03847bcc925cec28ff7ab7c96fe7162d26e47d25
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392310
    Auto-Submit: Milad Farazmand <mfarazma@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93039}

commit 2fa2cff7f8c896f23d5dd28550ae0f39ac92239e
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Mar 26 11:22:39 2024 +0100

    [heap] Minor changes around postponing page release
    
    1) Only postpone for spaces that need it. This is only needed for spaces
       that could have old-to-new references.
    2) Add comments why we postpone releasing pages.
    
    Change-Id: I2e3e9bc4da0c1a4a6f5fb36c562830fafd1c44e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392812
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93038}

commit 09d86ae39e2f1d806581f7d9a2ba39909d8a8111
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Mar 26 11:27:52 2024 +0000

    [sandbox] Introduce TrustedPodArray
    
    This is simply a PodArray in trusted space, backed by a
    TrustedByteArray. It will be used to move the InliningPositions array of
    a DeoptimizationData object out of the sandbox.
    
    Bug: chromium:329677666
    Change-Id: Ic36dbf9cd6ec18fde80902ee3d018e956b9af965
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372495
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93037}

commit 646faf72230d954959a92c82cf33a164214daad9
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Mar 26 03:53:52 2024 -0700

    Update fuzztest (trusted)
    
    Rolling third_party/fuzztest/src: https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/7c116cf..d7c63cd
    
    #Centipede Fix compile issue with `string_view` (FuzzTest Team)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/d7c63cd
    
    #Centipede Workaround for RELR incompatibility with :dso_example_test and :trace_pc_test (Fangrui Song)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/0594c8f
    
    #Centipede More informative logging in :customized_centipede_test (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/f628273
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752408601704801697
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Change-Id: Ie371d5cb1b5d64c81493a77a528ff8b0f1d8ba34
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5395830
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93036}

commit f10b74d0548ee4b5e6f64335ed6e60c81f9f05bd
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Mar 26 11:20:53 2024 +0100

    [builtins] Load builtin entry directly from isolate data
    
    Loading the builtin entry (instruction start) from the builtin's code
    object loads from the code pointer table. This CL adds an API to load
    the entry from the isolate data directly and uses it in Wasm and for
    relocating an instruction stream.
    
    R=ishell@chromium.org
    CC=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I33b12a408b78e06a2782f656363c64d1caae1651
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392811
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93035}

commit ded411d3a0204ad3487f20491741f168f7b2501a
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 26 11:10:18 2024 +0100

    [test] Add other missing iomanip include
    
    Change-Id: I177021acf7ba8078c15268a3561fdefc184f87a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392808
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93034}

commit 8c905145696c9514e8ef08d578425fc2c79ef1dd
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Mar 26 10:24:14 2024 +0000

    [sandbox] Expose Sandbox.base
    
    Having access to the base address of the sandbox when the sandbox
    testing mode is active can be useful in various situations, for example
    when decoding compressed- or sandboxed pointers.
    
    Bug: v8:12878
    Change-Id: Ibf47cdffd33f243107e9af16c5da987c10675c6e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392813
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#93033}

commit 2c1dd921fb0df335ff8ce603c753562500702147
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 26 11:06:17 2024 +0100

    [turboshaft] Maglev-to-ts: support JS eval()
    
    ... which in Maglev uses ArgumentsLength, ArgumentsElements,
    CreateFunctionContext and CallRuntime.
    
    Drive-by: support ThrowReferenceErrorIfHole and Deopt.
    
    Bug: v8:12783, v8:14581
    Change-Id: I3fe12dd5db814aaf86a4e55c04e8f37bb165b09e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388381
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93032}

commit dbf912d1443fa4edbd63d8a9a78482b9041daf47
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Mar 26 10:18:58 2024 +0100

    [wasm] Store call target for wasm-to-js wrapper directly
    
    In the WasmJSFunction constructor, when constructing the
    WasmInternalFunction, do store the call target directly if we call a
    builtin.
    
    This will eventually allow us to store a protected pointer to Code
    objects (once we do not store builtin Code objects there any more), and
    it will improve performance in the meantime.
    
    R=ahaas@chromium.org
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_gc_stress_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux_gc_stress_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux_arm64_gc_stress_dbg
    Bug: v8:14564
    Change-Id: I6f00b6c912db6fd121cee2236b3682173501143c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5384033
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93031}

commit 4e8ca3d53a8250af2e3f3920797765e32d46d4a5
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Mar 26 09:16:59 2024 +0000

    [sandbox] Introduce TrustedWeakFixedArray
    
    This is a WeakFixedArray in trusted space. It will for example be used
    to move DeoptimizationLiteralArrays out of the sandbox.
    
    Bug: chromium:329677666
    Change-Id: I89f2fb4eadd920c87c34b8725cc8b35069748e32
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372494
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93030}

commit 8fa4b5211af48069eac384997b4cd5b76d68dc35
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 26 10:09:49 2024 +0100

    [test] Add missing iomanip include
    
    The "V8 Linux64 gcc" bot has been red since a DEPS update; this CL
    fixes this issue.
    
    Change-Id: I562c71902a27f6a1e8876f3310e7655c074e9165
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392804
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93029}

commit ddd5ea9f01783549743e85773996cb0cb6f45357
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 26 09:29:53 2024 +0100

    [turboshaft][arm64] Port ISEL unittests part 3
    
    Bug: v8:12783
    Change-Id: I833671ecca385caa57f1172585610947461dc2a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392583
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93028}

commit b77bb166000e960683ff5f4aed7e1f7075fbc78d
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Mar 25 21:13:26 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/1104ba1..3039172
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/608975a..2ffb671
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/1cba129..b83a303
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/0c90b82..890351b
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/02fe4bd..d50741b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752433899248524081
    
    Change-Id: I88a7034e024badef54882af6043446f98b17c650
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392311
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93027}

commit f79be5c69ecdf4fbee447c2de95d7d578bd3d282
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Mar 26 09:26:15 2024 +0000

    Revert "[heap] Use discard/recommit to manage RWX memory"
    
    This reverts commit 9da8b31f3b52d50c897207d727918545aed2dc34.
    
    Reason for revert: Failing on Mac arm64 (with and without ptr compression):
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Mac%20-%20arm64%20-%20debug%20builder/17816/overview
    
    Original change's description:
    > [heap] Use discard/recommit to manage RWX memory
    >
    > Instead of allocating pages on demand, set the permissions on the whole
    > code cage at cage creation time and discard the region.
    >
    > Change-Id: Idb9dfecb0d9df12f094722b5bcb1243b561a9420
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372649
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > Cr-Commit-Position: refs/heads/main@{#93024}
    
    Change-Id: I9a4a6a08e50549ce6154e86265093bc788e98606
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392805
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93026}

commit 2e70d7210a3b610e855e93338755c364dd1404fd
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Mon Mar 25 17:28:30 2024 +0100

    [sandbox] Increase the code pointer table reservation size
    
    Increase the limit to 128MB after we previously lowered it in
    https://crrev.com/c/4958616.
    The previous limit led to reliably reproducible OOM crashes in PSWeb on
    a large-memory workstation, possibly (hypothesis) due to major GC being
    triggered too late.
    The fundamental fix would be to have minor GC support for the CPT.
    
    Bug: 331166919
    Change-Id: I2d313069856b1201088ef537d4fa86dd63d28864
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385339
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93025}

commit 9da8b31f3b52d50c897207d727918545aed2dc34
Author: Stephen Roettger <sroettger@google.com>
Date:   Mon Mar 25 16:59:44 2024 +0100

    [heap] Use discard/recommit to manage RWX memory
    
    Instead of allocating pages on demand, set the permissions on the whole
    code cage at cage creation time and discard the region.
    
    Change-Id: Idb9dfecb0d9df12f094722b5bcb1243b561a9420
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372649
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#93024}

commit e0cce0dfc28925bbc706bd7406e7f09ae3fd1f75
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon Mar 25 12:20:04 2024 +0100

    [turboshaft]  Maglev-to-ts: support String.fromCharCode and codePointAt
    
    ... and charCodeAt.
    
    Bug: v8:12783, v8:14581
    Change-Id: Iebadc4a356524346121f94707631a04adc74d095
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383476
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93023}

commit e9fc67a9b846d1ca96cd46756a34c3132d7365dc
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Mar 25 17:15:02 2024 +0100

    [compiler] Allow implicit truncation for graphs created from turbofan
    
    It would be nice to not have implicit truncations from Word64 to
    Word32 in Turboshaft as they are inconsistently sometimes explicit and
    sometimes implicit.
    
    However, as the same was true for Turbofan it is difficult to enforce
    it on Turboshaft graphs created from Turbofan.
    
    To have this asserted in Turboshaft-only cases (wasm, unittests,
    Maglev->Turboshaft), pass this information downwards and relax the
    assertion again in ValidOpInputRep.
    
    Note: The implicit truncation was disallowed in
    https://crrev.com/c/5380531 .
    
    Fixed: 330638812
    Change-Id: Id67d5781dfac88fd37131c0f49eb3fafa6cdcf0f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385337
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93022}

commit 4511fe2fe191b8605fc2c935d8d4d1376c942d44
Author: Adam Klein <adamk@chromium.org>
Date:   Mon Mar 25 12:21:23 2024 -0700

    [jspi][test] Clean up stack-switching-conditional test
    
    Don't duplicate stack-switching.js, just load it. And add an additional
    call to installConditionalFeatures to exercise the duplicate-call
    codepath.
    
    Change-Id: Ie8dce568e47ee28dfa6f1eb349ba569e177eb8fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5393249
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93021}

commit 18117404daea1e9fa3d1480ffdb909eba6f8ed79
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Mar 25 09:07:34 2024 +0800

    [riscv][turboshaft] Port ISEL unittests part 2
    
    Port commit e34579cf35a25633b50b6a00132ae91352e6de49
    Bug: v8:12783
    
    Change-Id: I69f02eace7a63ef8d8274dd2374ba1cfe7fe30d9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5390228
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#93020}

commit c49db3ab8548eef54606bc42a8e4aa36b153d3c0
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Thu Mar 21 13:03:30 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of Splat in
    turboshaft
    
    Add cpu-feature check before revec-phase by the way.
    
    Bug: v8:12716
    Change-Id: Id313277dac0692f6ab939ab5e41935d71755c457
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5370806
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#93019}

commit 04bd1e5e1f6d4129f033743a395dab836cbf5088
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Mar 25 14:29:19 2024 +0800

    [loong64][mips64][turboshaft] Port ISEL unittests part 2
    
    Port commit e34579cf35a25633b50b6a00132ae91352e6de49
    
    Change-Id: Ifc324d864602ddb28ec23dabb60f52ebee059a6f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5391165
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#93018}

commit 4f598b01de00065f72ddde1ea00cd0a042d3ba73
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri Mar 22 16:02:17 2024 +0100

    [heap] Reduce page table pressure for MinorMS
    
    This CL attempts to reduce pressure by:
    1) Allowing for more complaction in memory reducing GCs.
    2) Don't decommit partial pages.
    
    Bug: v8:12612
    Change-Id: I116bea97ab8fefcebd60d51a12ac1ec86be96c77
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380195
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93017}

commit aed8f8605115f1af5a4e5ca120027a9572d8e13d
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Mar 25 13:15:11 2024 -0400

    [turboshaft][s390] Port InstructionSelector part 4
    
    - Displacement on s390 needs to be limited to 20 bits signed
    - Load/Store lane and load_transform don't need BE changes as
      we already handle them here: https://crrev.com/c/3379820
    
    Change-Id: I35233dd600cdae385757d6a43f351bd1af074425
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387166
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93016}

commit 1a4ec4d4950072a816b16fe480f7964c0f2e4642
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Mar 25 18:23:08 2024 +0100

    [wasm][fuzzers][cleanup] Remove todo
    
    Change-Id: I92b366e8f5f5fc72435b1dfccffe5620b9ff9368
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392581
    Auto-Submit: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93015}

commit fd1ecaf93b5e7b713e4758ea2ee0000a82658267
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri Mar 22 19:15:38 2024 +0000

    [explicit-resource-management] Add using in bytecode generator
    
    This CL adds `using` to bytecode generator. This CL does not include exception handling and JSDisposableStack methods.
    Also, since `using` and `const` have the same behavior (except for disposing resources), we add required checks to the existing code.
    
    Bug: v8:13559
    Change-Id: I1d169859cc2a3e16c7cc9078219d5e4a466f4560
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5270855
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93014}

commit 17da058517a311ed32dd5c110032b1bee02eac13
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Mar 25 09:18:56 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/d9d8623..1104ba1
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/ca4997e..608975a
    
    Rolling buildtools/linux64: git_revision:06cdcc8e1fa8e56f70efb4357d473345b7d1c083..git_revision:cfddfffb7913868936e76a269ae824aadd737b1b
    
    Rolling buildtools/reclient: re_client_version:0.136.1.732f8b5-gomaip..re_client_version:0.134.1.2c9285b-gomaip
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/2c8fa67..4331837
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/949df61..9128ec6
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/4f7316c..1cba129
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/80307e6..0c90b82
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/b341c2d..02fe4bd
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752479200555426417
    
    Change-Id: Ic7236769a9aa39f76bc465cd08e5e855a6127fb2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5392301
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#93013}

commit cec30962145ab67bc9775bd3ca9a7d19351302eb
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Mar 25 16:44:28 2024 +0100

    [wasm][fuzzer] Introduce fuzzer that generates all expressions (PART 10)
    
    This change adds a new fuzzer that may generate WasmGC and also SIMD
    expressions in the module.
    
    Bug: v8:14679
    Change-Id: Ib0f18ee22a953be12b69ca75822c81ed1ffbdb3b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380199
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93012}

commit 6113e104c3283391d8bd6838ea6f3a49e8c01408
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Mar 25 15:57:10 2024 +0100

    [objects] Fix dispatch for JSApiObjects
    
    They should now refer to the descriptor that takes care of the
    cpp_heap_wrappable pointer as well. This is an issue with heap
    verification which dispatches via BodyDescriptor instead if VisitorId.
    
    Bug: chromium:328117814
    Change-Id: Ice624b7a991505ca8f11c341a3fe03ef230caf8e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387893
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93011}

commit 3f4102b370bb110358febdd835d9a5c2e6692445
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon Mar 25 16:48:50 2024 +0100

    [turboshaft] Fix wrong int64->int32 truncation in ISEL normalization
    
    Bug: v8:12783
    Change-Id: Icc36737a25d5d6413b15faa8fc0b2cda6f8d971b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387894
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93010}

commit 1aa00d1e374c9787206a0f8eb668ded0c8bed3a9
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Mar 22 18:30:08 2024 +0100

    [wasm][fuzzers][cleanup] Rename wasm-compile * fuzzer class to be more
    descriptive
    
    Bug: v8:14679
    Change-Id: Ic76d0d531408995a1505a9f380e6dfac4a20893e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388438
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93009}

commit e9da8f1988b15864a1322abe35e5a40ca780e10c
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Mar 22 18:24:21 2024 +0100

    [wasm][fuzzer] Introduce WasmGC fuzzer (PART 9)
    
    This change adds a new fuzzer that may generate WasmGC expressions in
    the module. The wasm-compile-fuzzer and the wasm-compile-simd-fuzzer
    generate wasmGC expressions only.
    
    Bug: v8:14679
    Change-Id: I36ef128376ffd666181ecac3f893f5b83f5476c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380197
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93008}

commit 25f36d9c6fd5a1456bb1d4705dd329ae7371a2b7
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 25 15:50:02 2024 +0100

    [maglev] Fix polymorphic named access
    
    Finish basic block with a Goto to label done only if
    TryBuildPropertyLoad finishes with a result.
    
    Otherwise, if it fails, the basic block would be empty,
    since we have Goto to the generic case.
    
    Fixed: 330427711
    Change-Id: I07078f52c0693fb954b2018e4380d0cec8012bf1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387762
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93007}

commit c949b7324b2e89709d5e3d92d42d2ddd69f19bb0
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Mar 25 15:09:53 2024 +0100

    [wami] Fix heap type immedates in mjsunit mode
    
    kWasmAnyRef is a negative integer and the module builder expects
    positive integers in the function body, therefore kAnyRefCode should
    be used instead.
    
    Change-Id: I0319b41a5b981d5e4fa26bff01f5f75ef014f965
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387890
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93006}

commit c619c42f8e94a20c08ec788b0848388a9c646bbc
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon Mar 25 15:36:01 2024 +0100

    [turboshaft] Normalize graph before instruction selection
    
    The instruction selector expects constants to be on the right-hand
    side of commutative binops. Most of the time,
    MachineOptimizationReducer is enough to maintain this invariant.
    However, CodeEliminationAndSimplificationPhase runs last in the
    pipeline, and can perform simplifications that lead to constants being
    on the left-hand side (for instance, when removing a Phi with a single
    input, it's possible that this input was a Constant, so it should go
    on the right side, but before it looked like a Phi and thus could
    have been on the left side).
    
    This CL introduced InstructionSelectionNormalizationReducer, which
    runs as part of CodeEliminationAndSimplificationPhase and puts
    constants on the right side of commutative binops.
    Additionally, it replaces multiplications by small constants by
    shifts.
    
    Fixed: 330638807
    Bug: v8:12783
    Change-Id: Iac95f8e49f683ea5e5f502c96e76f442831267ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388437
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93005}

commit cab020abbb0647f38b343253ad16da4be47eb575
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Mar 25 15:15:20 2024 +0100

    [compiler][wasm] Fix ChangeInt32ToInt64 in TS + TF ISel
    
    Fixed: 330767273
    Change-Id: I02f60c5cb1c3f09adf84c53ddd5966404f2edffd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388386
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93004}

commit de04b41791f2f3c47d4b5f90eff52d5adbf21b7b
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Mar 25 13:10:43 2024 +0100

    Reland "[heap] Add GC infrastructure for cpp_heap_wrappable"
    
    This is a reland of commit bdd01eef75b5f086c7ef1e316dc24bd179e09753
    
    Original change's description:
    > [heap] Add GC infrastructure for cpp_heap_wrappable
    >
    > Adds:
    > - Marking and write barrier infrastructure for cpp_heap_wrappable
    >   field.
    > - Heap snapshot support that extracts the field if the wrapper object
    >   doesn't contain 2 embedder fields.
    >
    > We currently use the regular EPT and not yet an Oilpan-specific table.
    >
    > Bug: chromium:328117814
    > Change-Id: Ia9e884146619fd8d88161e8dd67ed7a20c9494c5
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378400
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92997}
    
    Bug: chromium:328117814
    Change-Id: Iaef9462fb3af9f7710d213ddfd2f1e52e7d9e010
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385331
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93003}

commit facfe5dd19108cc538b66edb4f686e9641941152
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Mar 22 15:15:27 2024 -0400

    PP/S390 [turboshaft] Port ISEL unittests part 2
    
    Port e34579cf35a25633b50b6a00132ae91352e6de49
    
    Change-Id: Ibbe975ebd16ff9bb5ae9890fc38fbe036228e7dc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388272
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#93002}

commit 7dec59784535eac97053729969a42282ce1387b6
Author: Dave Tapuska <dtapuska@chromium.org>
Date:   Sat Mar 23 16:02:29 2024 -0400

    [ios] Include BrowserEngineKit as a framework dependency
    
    Other targets in V8 need the BrowserEngineKit dependency
    so add it explicitly where it is used.
    
    Bug: None
    Change-Id: Ifd6c0e0ad46d77e4d0001402cc2ebaec15b0430d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387168
    Commit-Queue: Dave Tapuska <dtapuska@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93001}

commit d74c3484649e60b5da7977a334a608b9cf156669
Author: wenqin.yang <wenqin.yang@intel.com>
Date:   Mon Mar 25 17:55:20 2024 +0800

    [cppgc] Remove redundant CageBaseGlobal::Get() in Decompress()
    
    It will call CageBaseGlobal::Get() in Decompress(), but the base
    already in the argument of "GetNextUnfinalized", we could avoid to
    call Decompress() by directing decompress the pointer with the base.
    
    Change-Id: Iffd52cb4bacee500dd634cffc3f406dc2d8143b1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5384970
    Commit-Queue: Wenqin Yang <wenqin.yang@intel.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#93000}

commit 35da0f92d75fe713147c2d374762a755f03a737c
Author: Eva Herencsárová <evih@chromium.org>
Date:   Mon Mar 25 11:46:57 2024 +0000

    Revert "[heap] Add GC infrastructure for cpp_heap_wrappable"
    
    This reverts commit bdd01eef75b5f086c7ef1e316dc24bd179e09753.
    
    Reason for revert: fails on https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20stress-incremental-marking/16117/overview
    
    Original change's description:
    > [heap] Add GC infrastructure for cpp_heap_wrappable
    >
    > Adds:
    > - Marking and write barrier infrastructure for cpp_heap_wrappable
    >   field.
    > - Heap snapshot support that extracts the field if the wrapper object
    >   doesn't contain 2 embedder fields.
    >
    > We currently use the regular EPT and not yet an Oilpan-specific table.
    >
    > Bug: chromium:328117814
    > Change-Id: Ia9e884146619fd8d88161e8dd67ed7a20c9494c5
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378400
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92997}
    
    Bug: chromium:328117814
    Change-Id: I1c2fee49ac3ed9213b8118540de2f5dce06f4fcb
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388382
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Eva Herencsárová <evih@chromium.org>
    Owners-Override: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92999}

commit a88a8de6ae43f664dd193e7bf834fb11564150b9
Author: Eric Leese <leese@chromium.org>
Date:   Fri Mar 22 17:57:31 2024 +0100

    Only compute expressions for unoptimized JavaScript.
    
    The existing code hits a check failure in ComputeExpressionsCount
    on some stack traces. The reason the jst command doesn't hit this
    is that it doesn't attempt to call this except for unoptimized JS
    frames.
    
    Bug: None
    Change-Id: Id6cbab075894e63cd1d3122c50aad3064c329aaf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380198
    Auto-Submit: Eric Leese <leese@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92998}

commit bdd01eef75b5f086c7ef1e316dc24bd179e09753
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Mar 25 09:44:49 2024 +0100

    [heap] Add GC infrastructure for cpp_heap_wrappable
    
    Adds:
    - Marking and write barrier infrastructure for cpp_heap_wrappable
      field.
    - Heap snapshot support that extracts the field if the wrapper object
      doesn't contain 2 embedder fields.
    
    We currently use the regular EPT and not yet an Oilpan-specific table.
    
    Bug: chromium:328117814
    Change-Id: Ia9e884146619fd8d88161e8dd67ed7a20c9494c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378400
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92997}

commit 2153524a0e22519681477a1df39f573c5bf6d80f
Author: Omer Katz <omerkatz@chromium.org>
Date:   Mon Mar 25 11:03:52 2024 +0100

    [heap] Fix trace id for background sweeping
    
    Concurrent sweeping may be stopped and resumed, which will compute a new
    trace id and break the connection to the previous steps.
    This CL persists the trace id throughout until sweeping is finished.
    
    Bug: v8:14147
    Change-Id: Iada0492befccf158b41559d2443ecb01fe70d9a8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388445
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92996}

commit dd56eccc0ac9fcef2284284ecab02b4a2871acfa
Author: jiepan <jie.pan@intel.com>
Date:   Mon Mar 25 14:26:56 2024 +0800

    [revec][wasm][turboshaft] Support Simd128Const in turboshaft
    
    Bug: v8:12716
    Change-Id: If824307a57f8730bb8d76ec227eb63c6e812bcc6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387066
    Commit-Queue: Jie Pan <jie.pan@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92995}

commit 504288831b1967ea8fcfb9f742d78f90d0249474
Author: David Benjamin <davidben@chromium.org>
Date:   Fri Mar 22 18:20:12 2024 -0400

    Account for current_weak_container_header_ being null
    
    UBSan in Chromium flagged that V8 was making null references. Since this
    code didn't care about whether the value was null, just make it a
    pointer instead.
    https://luci-milo.appspot.com/ui/inv/build-8752767322372882913/test-results?q=ListenerLeakTest.HiddenReferences&sortby=&groupby=
    https://luci-milo.appspot.com/ui/inv/build-8752767322372882913/test-results?q=ListenerLeakTest.ReferenceCycle&sortby=&groupby=
    
    Bug: chromium:40248746
    Change-Id: Ic9413a7196405bfdefd367e0f896d5f348e370dc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5386699
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: David Benjamin <davidben@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92994}

commit b10f2f47d0d907b7d17c017baa065942038d38cf
Author: Omer Katz <omerkatz@chromium.org>
Date:   Mon Mar 25 08:54:13 2024 +0000

    Revert "[heap] Disable page pooling for MinorMS"
    
    This reverts commit a27e7fbbe9aa0064d22b9c114b9f678de6aad071.
    
    Reason for revert: Got enough data from Canary. This CL is no longer needed.
    
    Original change's description:
    > [heap] Disable page pooling for MinorMS
    >
    > This CL temporarily disables page pooling in V8 when MinorMS is enabled.
    > This is meant to confirm that a increase in number of crashes with
    > MinorMS that was observed on canary [1] is triggered by the page pool.
    > This CL will regress benchmark scores and will be reverted in a few
    > days.
    >
    > [1] https://crash.corp.google.com/browse?q=expanded_custom_data.ChromeCrashProto.magic_signature_1.name%3D%27%5BRenderer+hang%5D+v8%3A%3Abase%3A%3AOS%3A%3ADiscardSystemPages%27+AND+EXISTS+%28SELECT+1+FROM+UNNEST%28expanded_custom_data.ChromeCrashProto.experiments.ids%29+expanded_custom_data_ChromeCrashProto_experiments_ids+WHERE+expanded_custom_data_ChromeCrashProto_experiments_ids%3D%27c77a0ff0-3f4a17df%27+OR+expanded_custom_data_ChromeCrashProto_experiments_ids%3D%27c77a0ff0-2fc45898%27+OR+expanded_custom_data_ChromeCrashProto_experiments_ids%3D%27c77a0ff0-a79d803f%27%29+AND+product_name%3D%27Chrome%27+AND+expanded_custom_data.ChromeCrashProto.channel%3D%27canary%27
    >
    > Bug: v8:12612
    > Change-Id: I6f0408756284efb042590df76db2c39ec7777477
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5381599
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92918}
    
    Bug: v8:12612
    Change-Id: I0619c709498da6600cb0015b74b6204ed5060928
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388716
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92993}

commit 929199e16e31eb8510b5d81603fdc31ad6a6e69c
Author: JialuZhang-intel <jialu.zhang@intel.com>
Date:   Fri Mar 22 15:07:28 2024 +0800

    [maglev] mark node type in enum cache as internalized string.
    
    Change-Id: Id7b9ef416213f7df538ba33bf4c5a52bd0478faf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5386846
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Jialu Zhang <jialu.zhang@intel.com>
    Cr-Commit-Position: refs/heads/main@{#92992}

commit f07c66017519c7daa531e307cbd05abd0686e37b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Mar 24 21:03:47 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e52fce4..d9d8623
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752524499047640865
    
    Change-Id: I16753507729e809c55b876f07041f9f810633d81
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5390945
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92991}

commit e8a45e0107be8803043425ee7bf38cd9de86de5f
Author: Eva Herencsárová <evih@chromium.org>
Date:   Mon Mar 25 09:50:12 2024 +0000

    Revert "Update V8 DEPS (trusted)"
    
    This reverts commit 4fd8fce51920ea532705f5763dc8b0456e2475a2.
    
    Reason for revert: fails on https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Centipede%20Linux64%20ASAN%20%20-%20release%20builder/1067/overview
    
    Original change's description:
    > Update V8 DEPS (trusted)
    >
    > Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/ca4997e..3fb3d59
    >
    > Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/2c8fa67..4331837
    >
    > Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/4f7316c..1cba129
    >
    > Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/80307e6..0c90b82
    >
    > Roll created at https://cr-buildbucket.appspot.com/build/8752660392192728289
    >
    > Change-Id: I8eefbad3d5fb9d9e5ce73071b361245fab6e6cae
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387167
    > Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    > Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    > Cr-Commit-Position: refs/heads/main@{#92989}
    
    Change-Id: I5f29495fce5f995cfdff5407325f5799d0755c56
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388444
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92990}

commit 4fd8fce51920ea532705f5763dc8b0456e2475a2
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Mar 23 09:18:51 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/ca4997e..3fb3d59
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/2c8fa67..4331837
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/4f7316c..1cba129
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/80307e6..0c90b82
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752660392192728289
    
    Change-Id: I8eefbad3d5fb9d9e5ce73071b361245fab6e6cae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387167
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92989}

commit 572db7fc9fa0d0cb9a1d33aad2ca986ec740c5a1
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Mar 22 21:12:05 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/58b3fdb..e52fce4
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/00b1292..949df61
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/880c680..4f7316c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752705690535338001
    
    Change-Id: I97deaf35a14f52acba9b4eb44914ab43a4e100ed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5389627
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92988}

commit dc593e271753e5227f9812182ad6a56e4cec81b8
Author: Adam Klein <adamk@chromium.org>
Date:   Fri Mar 22 17:27:29 2024 -0700

    [test] Skip stack-switching-conditional under unsupported configs
    
    Adds it to the same places as the test it forked from.
    
    No-Tree-Checks: true
    Change-Id: I8d4aeaf36e11817cdb7e4893700be44cdf873b4a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5389282
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92987}

commit b2bf3dd536763b83e56eef47777408c457a66b69
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri Mar 22 23:42:57 2024 +0000

    Revert "Don't allow Intl.Segmenter iterators to bypass termination."
    
    This reverts commit baaf811ec7ca7212cf39cc781213bb025da852c1.
    
    Reason for revert: failed on V8 Linux - noi18n - debug https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20noi18n%20-%20debug/52452/test-results?sortby=&groupby=
    
    Original change's description:
    > Don't allow Intl.Segmenter iterators to bypass termination.
    >
    > Without this, using Array.from() on a segment iterator will keep running until it finishes,
    > ignoring calls to `TerminateExecution()`.
    >
    > If the input is large enough, it could hit the 4GB memory barrier and OOM-kill the process.
    >
    > Co-authored-by: Kenton Varda <kenton@cloudflare.com>
    > Bug: v8:14681
    > Change-Id: I5e56364fab6a8a8cf17a77939ca59f2c4be934f3
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380757
    > Commit-Queue: Caitlin Potter <caitp@igalia.com>
    > Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92982}
    
    Bug: v8:14681
    Change-Id: I229e6ccc4974354021450bdf230bd51cff4ba87e
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5389278
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92986}

commit f73ee67ebd4fb6088735fec7efa2a4ac1cb6198a
Author: Adam Klein <adamk@chromium.org>
Date:   Fri Mar 22 15:22:28 2024 -0700

    [fuzztest] Roll fuzztest and boringssl
    
    Update to the latest versions in Chromium's DEPS.
    
    Fixes breakage due to Abseil roll (VLOG_IS_ON -> ABSL_VLOG_IS_ON)
    and removal of GN flag enable_rust_boringssl.
    
    Bug: chromium:330843012
    No-Tree-Checks: true
    Change-Id: Iab7934afe53da4189db69fc6b2710b75397f5157
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5389270
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92985}

commit df5a594736ade2f9e6e3be1e46aafa8f58f92988
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri Mar 22 20:38:10 2024 +0000

    Revert "Update boringssl in V8 DEPS"
    
    This reverts commit fefc6f55e00940206098dfafd60426c9bca58b1d.
    
    Reason for revert: fail on V8 Centipede Linux64 ASAN - release builder
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Centipede%20Linux64%20ASAN%20%20-%20release%20builder/1058/overview
    Original change's description:
    > Update boringssl in V8 DEPS
    >
    > This CL updates boringssl related DEPS in V8.
    >
    > No-Tree-Checks: true
    >
    > Change-Id: I6eeeec78e08ffb60c7140473080b47d13aad40a2
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388497
    > Reviewed-by: Adam Klein <adamk@chromium.org>
    > Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92980}
    
    Change-Id: Ib42b55bfd1720b241638c4c0be8a78790f7b168f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388995
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92984}

commit 0c2b15100d997a8f1b74fcc448da319c75f2e045
Author: Adam Klein <adamk@chromium.org>
Date:   Thu Mar 21 13:36:59 2024 -0700

    [wasm][jspi][d8] Add ability to test runtime-enabling of JSPI
    
    This adds an `enableJSPI` function to the d8 test runner which
    allows simulating the way the JSPI Origin Trial in Chrome enables JSPI.
    
    Then it makes a copy of the JSPI mjsunit test to use this approach,
    rather than using a commandline flag.
    
    Bug: v8:14576
    Change-Id: I637972dcf7de288d42b1325355b08c6b1b86d9ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385244
    Reviewed-by: Francis McCabe <fgm@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92983}

commit baaf811ec7ca7212cf39cc781213bb025da852c1
Author: Caitlin Potter <caitp@igalia.com>
Date:   Thu Mar 21 21:26:01 2024 -0400

    Don't allow Intl.Segmenter iterators to bypass termination.
    
    Without this, using Array.from() on a segment iterator will keep running until it finishes,
    ignoring calls to `TerminateExecution()`.
    
    If the input is large enough, it could hit the 4GB memory barrier and OOM-kill the process.
    
    Co-authored-by: Kenton Varda <kenton@cloudflare.com>
    Bug: v8:14681
    Change-Id: I5e56364fab6a8a8cf17a77939ca59f2c4be934f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380757
    Commit-Queue: Caitlin Potter <caitp@igalia.com>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92982}

commit 1ba780e892a4ac495d03de584f9306574d5b5595
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Mar 22 17:15:26 2024 +0100

    [wasm][fuzzer] Separate wasmGC expressions (PART 8)
    
    This change conditions the generation of WasmGC expressions. This means
    that the wasm-compile-fuzzer and the wasm-compile-fuzzer-simd don't
    generate them any longer.
    
    Bug: v8:14679
    Change-Id: I62ff9b93a4e2e4ec4e16ec5239550bb8672427ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5384035
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92981}

commit fefc6f55e00940206098dfafd60426c9bca58b1d
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri Mar 22 19:48:44 2024 +0000

    Update boringssl in V8 DEPS
    
    This CL updates boringssl related DEPS in V8.
    
    No-Tree-Checks: true
    
    Change-Id: I6eeeec78e08ffb60c7140473080b47d13aad40a2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388497
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92980}

commit 807cf7d0b7d96212c98ed2119e07f9b2c6a23f61
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Mar 22 17:55:04 2024 +0100

    [runtime] Recreate enum cache on map update if any previous map had one
    
    If any previous map in the transition tree had an enum cache, then we
    recreate one when updating the map.
    
    Bug: 330760873
    Change-Id: I9c434486716055f9fab6dfe73d78e99b3a45b490
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388435
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92979}

commit 47f485d09f4ddb897eff1796e42696783dcf4498
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Mar 22 09:13:27 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/bca3969..58b3fdb
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/68fce43..ca4997e
    
    Rolling buildtools/linux64: git_revision:59c4bb920542ee903ee1df39097ae024e2e8226f..git_revision:06cdcc8e1fa8e56f70efb4357d473345b7d1c083
    
    Rolling buildtools/reclient: re_client_version:0.134.1.2c9285b-gomaip..re_client_version:0.136.1.732f8b5-gomaip
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/b3ae305..2c8fa67
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/97c002a..00b1292
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/fe6a359..880c680
    
    Rolling third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/727f65f..5fc1a2c
    
    Rolling third_party/fuchsia-sdk/sdk: version:19.20240305.3.1..version:19.20240320.0.1
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/b479e7a..eff443c
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/fc6253a..ec88f0a
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/8bad7bd..419b03c
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/108914d..6598a8e
    
    Rolling third_party/siso: git_revision:110b1d8c0528de153cef259f09f3dc5ee627e6cb..git_revision:a3d591f9996c1b28fe5762913bb5bbd69960e4d5
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/c5bf1b5..24c07df
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/1ed379e..b341c2d
    
    Rolling tools/luci-go: git_revision:623f8d17a069eaea6d0fca13147888284ec76ff1..git_revision:7dd3e0506c6083aae7a0e413a30e0e11b76da08e
    
    Rolling tools/luci-go: git_revision:623f8d17a069eaea6d0fca13147888284ec76ff1..git_revision:7dd3e0506c6083aae7a0e413a30e0e11b76da08e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752750986302003137
    
    Change-Id: I0e579a3fc12fbccd3d6265a1519b61a017109e9a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5388262
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92978}

commit 500de8bd371b224bb5274e88d6c7b165a146d378
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Mar 22 13:11:38 2024 +0000

    [gcc] Fix gcc / bazel build
    
    Add <iomanip> includes to fix gcc/blaze builds. Also ignore a dangling
    pointer warning introduced in newer gcc, since it has false positives
    on some uses of scope classes.
    
    Change-Id: Ib86a2437ffc34b5497a5b8619013d6d5b4ea30fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380192
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92977}

commit 065b32314932fb12a03fa789dcf1a74c7b481530
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Mar 22 16:04:34 2024 +0100

    Fix subclassing bounds checks in tests
    
    The tests where assuming bounds of in object properties and embedder
    fields for JSObject wheras the object is really a JSAPIObject and the
    bounds recently changed due to adding another field in the header.
    
    Bug: chromium:328117814, chromium:330888550
    Change-Id: I26642371a30e555866a181c350d491c6af9d4155
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380196
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92976}

commit 4f34c6141a2226435c1502f1cd755fc905c5d856
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Mar 22 16:55:32 2024 +0100

    [turboshaft] More conservative effects for FindOrderedHashEntry
    
    We suspect that this builtin can actually allocate. The missing
    CanAllocate would lead to allocation folding happening around the
    builtin, but if a GC happens during the builtin, then it would see the
    uninitialized second half of the folded allocation, leading to all
    sort of memory corrumptions.
    
    Fixed: 330720102
    Bug: v8:12783
    Change-Id: I3c79b244298d6d4f9cef3024d050bfbf3b7939a8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385879
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92975}

commit 6ec883986bd417e2a42ddb960bd9449deb7e4639
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Mar 21 16:03:13 2024 +0100

    [api][cleanup] Deprecate SetAccessor and SetNativeDataProperty
    
    ... which were marked as V8_DEPRECATE_SOON in 12.1 and 12.4.
    
    This CL deprecates
      v8::Template::SetNativeDataProperty(v8::Local<v8::String>, ...);
      v8::ObjectTemplate::SetAccessor(v8::Local<v8::String>, ...);
    and
      v8::Template::SetNativeDataProperty(...); with AccessControl parameter.
    
    Additionally, the CL marks the following typedefs as V8_DEPRECATE_SOON
      v8::AccessorGetterCallback,
      v8::AccessorSetterCallback.
    
    Bug: chromium:326505377
    Change-Id: If6f30b3aba9f55785c573faf4a307c6de0d175ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383482
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92974}

commit a82a8032692982f18f5fa85e8c65588ca0aea995
Author: Dave Tapuska <dtapuska@chromium.org>
Date:   Fri Mar 22 09:44:27 2024 -0400

    [ios] Add V8_HEAP_USE_BECORE_JIT_WRITE_PROTECT
    
    https://chromium-review.googlesource.com/c/v8/v8/+/5377937 added
    the ability to compile but missed the flags in the heap that
    are relevant.
    
    Bug: chromium:40255826
    Change-Id: I6baa0ee2a96e5d9207fc4444ec762ba7895c3b05
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385577
    Commit-Queue: Dave Tapuska <dtapuska@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92973}

commit 0caa74013d249f6f6ae8ea042ad47a3f1ece7503
Author: Adam Klein <adamk@chromium.org>
Date:   Thu Mar 21 16:28:23 2024 -0700

    [cleanup] Remove stale documentation about non-owning BackingStores
    
    Since https://crrev.com/c/4890117, BackingStore always frees its
    allocation on destruction.
    
    Change-Id: If7b30ab1950ff7b462115d069cae37d9f2e8c0cf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5386372
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92972}

commit 73f1ef66f808bcc689e4a036c89d4192a5bd7bab
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Mar 21 16:47:59 2024 +0100

    [heap] move OldGen flag initialization to MemoryChunk constructor
    
    Writing code page flags requires a permission switch on some platforms
    and we can reduce the permission switches by moving out the RWX write
    scopes from the SetOldGenerationPageFlags function to the caller.
    This includes:
    * setting the Old/Young gen flags inside MutablePage::InitialFlags
    * only unlocking the code space once in Activate/DeactiveSpaces in
      marking-barrier.cc
    
    This resolves a speedometer3 perf regression on the M1 from the previous
    CLs in the relation chain.
    After this, pinpoint shows -0.1% (https://pinpoint-dot-chromeperf.appspot.com/job/12476146de0000)
    
    Change-Id: Ie840a11b36b585c1458bae3891fb8fdaaae7a193
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372470
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92971}

commit 41b33d7b5d2aeb61928e686e55d7390b38c2efc0
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Mar 21 16:47:49 2024 +0100

    [cfi] add a CFIMetadataWriteScope
    
    The metadata is currently not protected on all platforms that have RWX
    protections. So introduce a special write scope for metadata that is a
    noop on those platforms.
    
    Change-Id: I175514bd0a3ff45fac59d244917a5ca66e8453ce
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366892
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92970}

commit 0f7efa770efd87ed96d6bf315fe3a7b3154366d8
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Mar 21 16:47:40 2024 +0100

    [cfi] Remove CodePageHeaderModificationScope and nesting
    
    The header writes are now already handled by regular memory write scopes
    and we can get rid of the special header scopes.
    
    Change-Id: I299f9ca9c68cfbac9ca5d5ec6ed3fc83c79df524
    Bug: v8:13355, chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361458
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92969}

commit 9f8d19639a046d030d8fdd06d41d3b0052c6b288
Author: Zequan Wu <zequanwu@google.com>
Date:   Thu Mar 21 18:01:26 2024 -0400

    Add .att_syntax for inline asm under windows.
    
    clang-cl uses -x86-asm-syntax=intel by default, which failed to
    compile sources using AT&T syntax. And clang-cl doesn't have a
    flag to control it.
    
    Bug: 330163686
    Change-Id: I2159256e42fb8104d1a712393997fd0769615f53
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385998
    Auto-Submit: Zequan Wu <zequanwu@google.com>
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92968}

commit 184fa4f70a10f266cd8ec0dff0b9b8200bd5c218
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu May 25 15:33:39 2023 +0200

    [tiering] Abort optimization on context disposal
    
    Change-Id: Ib8a929867df2f24bb21cb77507b75b7db36b18c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4565379
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92967}

commit 68e6430d1540de11d221e9411a1a76c428b8c42f
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Mar 22 11:06:07 2024 +0100

    [turboshaft] Fix missing explicit truncation in smi tagging
    
    Fixed: 330765777
    Change-Id: If228cdb2566f935b587c695ea6ea04b6dcfc22b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387741
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92966}

commit e34579cf35a25633b50b6a00132ae91352e6de49
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Mar 22 10:58:39 2024 +0100

    [turboshaft][arm64] Port ISEL unittests part 2
    
    Bug: v8:12783
    Change-Id: Ic1e67e25d5e855bb0e295023064a0404216621dc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378282
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92965}

commit b9349d97fd44aec615307c9d00697152da95a66a
Author: pthier <pthier@chromium.org>
Date:   Fri Mar 22 10:43:27 2024 +0100

    [regex] Check bounds on register access in interpreter
    
    Registers in the interpreter are stored on the stack/heap outside the
    sandbox.
    The register index is stored in the bytecode, which is (not yet) in
    truested space.
    
    Bug: v8:14656
    Change-Id: I6e0afc8a4f1797e5cd08389487ecd8d5bf8d6ddd
    Fixed: 330404819
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385867
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92964}

commit 0c1231b6414d19468d6f7a35ff5b6167626f57a5
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Mar 21 16:41:37 2024 +0100

    Reland "Reland "[heap] remove empty space from executable MemoryChunks""
    
    This is a reland of commit 1b4d48e4d7e2c5b553cb0eed16ef6f177a8e05ee
    
    Clean reland, the tests will be fixed in the dependent CL:
    crrev.com/c/5385861
    
    Original change's description:
    > Reland "[heap] remove empty space from executable MemoryChunks"
    >
    > This is a reland of commit a800f7dcb03a4770bb3fe2c7812f745474b11782
    >
    > Changes: implemented support in ObjectStartOffsetInCodePage for the
    > case where kCodeAlignmentMinusCodeHeader < sizeof(MemoryChunk).
    >
    > Original change's description:
    > > [heap] remove empty space from executable MemoryChunks
    > >
    > > Since the metadata moved out, we can fix up the data offsets and
    > > allocate data right after the header. Since the headers become
    > > executable now for code MemoryChunks, we need to add write scopes to
    > > MemoryChunk initialization and flag writes.
    > > I split the SetFlag functions into three variants for this:
    > > * SetFlagNonExecutable for chunks that are never executable and don't
    > >   need unlocking (e.g. new space chunks)
    > > * SetFlagUnlocked for when the code space is already unlocked
    > > * SetFlagSlow which will do the unlocking but comes with a perf impact.
    > >
    > > Change-Id: I7d6854337ccdd56670cd6bd549956b6c9fe6f9e9
    > > Bug: v8:13355, chromium:40849120
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361037
    > > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#92926}
    >
    > Bug: v8:13355, chromium:40849120
    > Change-Id: I7668ebd30ead660e6f821ce21b7c371c9e1dc087
    > Cq-Include-Trybots: luci.v8.try:v8_mac_arm64_no_pointer_compression_dbg
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378292
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > Cr-Commit-Position: refs/heads/main@{#92935}
    
    Bug: v8:13355, chromium:40849120
    Change-Id: Iec2fe10590272826a34b90d120c75b06cf67d14e
    Cq-Include-Trybots: luci.v8.try:v8_mac_arm64_no_pointer_compression_dbg
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385862
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92963}

commit 78fb33a5e4cba0b297edb74a9b2a8372efcc48ad
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Mar 21 16:39:00 2024 +0100

    [test] split tests to avoid dangling local
    
    CheckDebuggerUnloaded triggers a GC with conservative stack scanning
    disabled, so any locals will not be valid anymore.
    Split the tests so that CheckDebuggerUnloaded is always the last
    function to be called.
    
    This fixes the reason for the revert in crrev.com/c/5383471.
    
    Change-Id: Ia75a12c8f9ecd823f271b349a2e8332368a854fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385861
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92962}

commit d9193c5c07c629bfe0f89853f7e6209e6f52f236
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Mar 22 09:03:32 2024 +0000

    Revert "Update fuzztest (trusted)"
    
    This reverts commit c760548bf077b5e20f2aed874e831645db1aae6b.
    
    Reason for revert: Breaks Centipede build - https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Centipede%20Linux64%20ASAN%20%20-%20release%20builder/1038/overview
    
    Original change's description:
    > Update fuzztest (trusted)
    >
    > Rolling third_party/fuzztest: https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+log/daea7ab..e0ec572
    >
    > Rollout fuzztest (Paul Semel)
    > https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/e0ec572
    >
    > Rolling third_party/fuzztest/src: https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/bddcd9f..7c116cf
    >
    > #Centipede More RAM/CPU-efficient `ReadShard()`, p.2 (measured > 20x RSS reduction) (Sergey Shevchenko)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/7c116cf
    >
    > No public description (FuzzTest Team)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/721e4ac
    >
    > #Centipede Write individual user feature counts to fuzzing-stats*.csv reports (Sergey Shevchenko)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/9fdaa59
    >
    > #Centipede Atomically write CSV lines to fuzzing-stats*.csv reports (Sergey Shevchenko)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/4dc7555
    >
    > No public description (Sara Qu)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/a7e9e93
    >
    > No public description (FuzzTest Team)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/951aada
    >
    > #Centipede Improve accuracy of reported fuzz time and execs/sec stats (Sergey Shevchenko)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/3dc657e
    >
    > #Centipede Errata in corpus_io.cc (Sergey Shevchenko)
    > https://chromium.googlesource.com/external/github.com/google/fuzztest/+/2942887
    >
    > ...
    >
    > Roll created at https://cr-buildbucket.appspot.com/build/8752792514343011249
    >
    > Change-Id: Ib70015838bee3084ece7c81d0dc7c6b0f1e92f7d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387261
    > Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    > Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    > Cr-Commit-Position: refs/heads/main@{#92960}
    
    Change-Id: I093ff5067539c6e8d8f2391e453d1273d2050d8d
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383049
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92961}

commit c760548bf077b5e20f2aed874e831645db1aae6b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Mar 21 22:11:47 2024 -0700

    Update fuzztest (trusted)
    
    Rolling third_party/fuzztest: https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+log/daea7ab..e0ec572
    
    Rollout fuzztest (Paul Semel)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/e0ec572
    
    Rolling third_party/fuzztest/src: https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/bddcd9f..7c116cf
    
    #Centipede More RAM/CPU-efficient `ReadShard()`, p.2 (measured > 20x RSS reduction) (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/7c116cf
    
    No public description (FuzzTest Team)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/721e4ac
    
    #Centipede Write individual user feature counts to fuzzing-stats*.csv reports (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/9fdaa59
    
    #Centipede Atomically write CSV lines to fuzzing-stats*.csv reports (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/4dc7555
    
    No public description (Sara Qu)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/a7e9e93
    
    No public description (FuzzTest Team)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/951aada
    
    #Centipede Improve accuracy of reported fuzz time and execs/sec stats (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/3dc657e
    
    #Centipede Errata in corpus_io.cc (Sergey Shevchenko)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/2942887
    
    ...
    
    Roll created at https://cr-buildbucket.appspot.com/build/8752792514343011249
    
    Change-Id: Ib70015838bee3084ece7c81d0dc7c6b0f1e92f7d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5387261
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92960}

commit 1e59b8fb300b39d4fb4287f74572d5b33f5d7598
Author: Francis McCabe <fgm@chromium.org>
Date:   Thu Mar 21 17:32:09 2024 +0000

    [wasm][jspi] Move V8 JSPI initialization to wasm-js.
    
    Crash occurred because JSPI initialization was not completed if OT only.
    
    Moved all of init code to bootstrap phase; guarded both by OT & non-heap serialization (during snapshot) tests.
    
    Bug: 330543313
    Change-Id: I3311e03a9216a405c78b69427621851041de2512
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385234
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92959}

commit 0b78693018b4411811d7fc790747c277e468928d
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Mar 21 16:49:44 2024 +0100

    [wasm] Store call target of builtins directly
    
    Builtin code does not move, hence we can store the call target directly
    in the WasmInternalFunction instead of getting it from the code pointer
    table at runtime.
    
    Most changes of this CL are actually to refactor the factory APIs to not
    pass the call target directly, but instead set it up separately after
    construction, which simplifies some call sites.
    
    R=ahaas@chromium.org
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_gc_stress_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux_gc_stress_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux_arm64_gc_stress_dbg
    Bug: v8:14564
    Change-Id: I6f6c48b345e4901e7e62eb702b01d2b7436b44cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383477
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92958}

commit c3c88b898452ddcb27f263a3e694bc00ab666cca
Author: Anton Kirilov <anton.kirilov@arm.com>
Date:   Wed Mar 20 13:24:20 2024 +0000

    [wasm-simd][arm64] Improve the 8- and 16-bit element bitmasks
    
    This requires implementing full support for the FEAT_PMULL
    instruction set extension.
    
    Also, make a couple of drive-by changes:
    * Add YIELD support to the disassembler and the simulator - there
    is already assembler support.
    * Detect support for the FEAT_LSE extension on Windows
    
    Change-Id: I4090ff793a3f9d7545410f1bf2f33c9912d42367
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367500
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Auto-Submit: Anton Kirilov <anton.kirilov@arm.com>
    Cr-Commit-Position: refs/heads/main@{#92957}

commit d18a6acdb5b98aab65da132a070efdf71d23b2ed
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Mar 21 17:04:57 2024 +0100

    [turboshaft] Maglev-to-ts: new explanation for predecessor_permutation_
    
    Bug: v8:12783, v8:14581
    Change-Id: Idf62a69b0177b0aad63e838449ca3bc93a16ba23
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5381541
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92956}

commit 7058e46284d281e18725ece23fe8d94e8ec8bec7
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Mar 21 16:22:46 2024 +0100

    [turbofan][wasm] Clamp byte length
    
    Bug: chromium:330575498
    Change-Id: I01104b994553612de355b43583bfa30bd2144296
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383483
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92955}

commit 69c41b1d929003aa697e47d9be86841333c38a2f
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Mar 21 15:29:20 2024 +0100

    [multimodal] Enable efficiency_mode_for_tiering_heuristics
    
    After investigating the effects of efficiency mode on various metrics
    more thoroughly it seems like we want to enable it rather sooner than
    later.
    
    See https://docs.google.com/document/d/1UQ9hec4k5_CDAXcMrYhOzfC8GWh1NJSQYwqygcpEcDw/edit?usp=sharing
    
    Bug: chromium:41485666
    Change-Id: I5a199427fed99c622b05ae2f80ff67e668bbfbf0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383480
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92954}

commit c8cf12e37b5ba362ba2ec813cb197601796dcf1e
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Mar 21 14:48:58 2024 +0100

    Introduce CppHeapWrapper field for types that can hold external pointers
    
    This introduces a new field `cpp_heap_wrappable` for holding references
    to a CppHeap object. The field is put on the two class hierarchies
    that can hold embedder fields:
    - JSObjectWithEmbedderSlots
    - JSSpecialObject
    
    The class hierarchies are separate due to instance type range
    constraints.
    
    Missing support:
    - Actually read/write of fields
    - GC support for field
    - Heap snapshot support for the reference
    - Triggering setup through FunctionTemplateInfo
    - Context serialization/deserialization
    
    Change-Id: Idd30c8540b5205c74eb50a7d588d9976cbc5afc8
    Bug: chromium:328117814
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5320908
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92953}

commit e5f3453ec63550a7c04de1048b56399c5b85beeb
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 19 13:41:54 2024 +0100

    [compiler] Avoid generating LoadTypedElement for Float16 arrays
    
    ... and avoid deopt loop for Float16 typed arrays in general, by
    always using a builtin call.
    
    Fixed: v8:14675
    Bug: v8:14012
    Change-Id: Ie9ebaa75a4ba8987cddd8452299465161a8709b5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378406
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92952}

commit cef0c00b86d29414b8f4f820aca8aa032ca169a1
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Mar 20 11:18:55 2024 +0100

    [turboshaft] Maglev-to-ts: support loops with multiple forward edges
    
    Loops in Maglev can have multiple forward edges, while in Turboshaft
    they can only have one. Thus, while building the TS graph from Maglev,
    this CL inserts a new block before the loop where it wires all of the
    forward edges and than then acts as the only forward edge of the loop,
    so that we end up with a TS loop that has a single forward edge.
    
    Bug: v8:12783, v8:14581
    Change-Id: If92ee4f2af761306c9e39f97d1f61460caa07dca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5381540
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92951}

commit dabef9f806a9aea580c803884123ca69806551e2
Author: Dave Tapuska <dtapuska@chromium.org>
Date:   Tue Mar 19 09:46:37 2024 -0400

    [ios] Enable BrowserEngineKit JIT APIs
    
    In SDK 17.4 BrowserEngineKit gives us APIs to adjust the RX mode of
    pages. Use these new APIs.
    
    Bug: chromium:40255826
    Change-Id: I2d723f9b84afa1c9b4e5ed649924def439396c49
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5377937
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Commit-Queue: Dave Tapuska <dtapuska@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92950}

commit 8252f870d1c31592d2cb70b66d112e4a885ffcf4
Author: Etienne Pierre-doray <etiennep@chromium.org>
Date:   Wed Mar 20 19:22:45 2024 +0000

    [tasks] Fix maglev recompilation priority
    
    Re-schedule maglev job with the same priority.
    
    Bug: 329474305
    Change-Id: Id351f989e77fbb03767fda9a7b9647b18a0e3e3f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383689
    Commit-Queue: Etienne Pierre-Doray <etiennep@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92949}

commit 29674d6f1c295afbc11e67b6f06b5cfad783ac34
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 21 14:22:39 2024 +0100

    [maglev] Drop input use from stores to non-escaping allocations
    
    Previously, inputs to initialization stores were often constants,
    so optimizing them away had little impact. However, the escape
    analysis of the arguments object introduces runtime values
    (ArgumentsLength and ArgumentsElements) that can't be eliminated.
    
    This change saves stores during the AnyUseMarkingProcessor phase,
    allowing us to process their inputs after identifying allocations
    that did not escaped.
    
    The inputs to the store would then be eliminated in
    DeadNodeSweepingProcessor if their use reaches zero.
    
    Bug: 326091155
    Change-Id: I8aeca146c03008fab285b4fc52f3ed74c2cf09a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383474
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92948}

commit 886049f870d45b7e18f22c044dc4167fd168e163
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Mar 21 12:56:30 2024 +0100

    [turboshaft] Stop using saturated_use_count for liveness for all ops
    
    So far, all alive operations had a saturated_use_count of 1 or
    more. In particular, operations that were RequiredWhenUnused were
    created with saturated_use_count of 1, so that they would appear
    alive even though they didn't have uses.
    
    This was confusing ("what does my store have a use count of 1?") and
    lead to subtle mistakes (like in is_exclusive_user_of in the
    instruction selector, which returns the wrong result for
    RequiredWhenUnused operations, because they have a higher
    saturated_use_count than actual uses).
    
    Now, to mark an operation as dead, Analyzers should call
    Graph::KillOperation, which will replace the operation by DeadOp
    in the graph.
    
    Bug: v8:12783
    Change-Id: I559ae71c1349fe9694619463fb406d6d495cdb48
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383470
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92947}

commit 4449b14383c01b497a2bf108c9b50260db70e766
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Mar 21 09:59:33 2024 +0100

    [turboshaft] Extend CanCover to support impure operations
    
    Operations that "produce" impure effects (like write memory, control
    flow, etc) can now be covered if their effect level is the same as
    the current_effect_level. This used to be the behavior in Turbofan.
    
    This will impact mainly TaggedBitcasts, which were almost never
    covered, because their effects produce 'after_raw_heap_access' (so
    that they can't be reordered with operations that can trigger
    GCs). However, if a TaggedBitcast has the same effect level as its
    user, then it can safely be covered.
    
    This will also allow covering Protected Loads (= loads with trap
    handler), which produce 'control_flow' (but once again, only if the
    effect level is the same, that's ok).
    
    Bug: v8:12783
    Change-Id: Ie5d9252a2ef3be8f50307933d9c1e4d0e0d8583a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378294
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92946}

commit 7219d3597b11bd4bce3745fc956c013192dea2ac
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Mar 21 13:54:06 2024 +0100

    [turboshaft] Disallow implicit truncation from word64 to word32
    
    Bug: v8:12783
    Change-Id: I432c378d4fe0e60d106a7530883b64f115a72bdc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380531
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92945}

commit b2f3aea23a015430f02b5241fa9897f8088d9aa7
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Mar 21 11:09:53 2024 +0000

    [wasm][exnref] Do not allow exnref at the wasm/JS boundary
    
    R=mliedtke@chromium.org
    
    Bug: v8:14398
    Change-Id: I5bb75a83e9de9f838d8e530c77c89aa031f473f9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5381603
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92944}

commit 87e9015d130a468b3652870261ae07924d4ef8fa
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 21 13:01:45 2024 +0100

    [maglev] Fix type when checking the equivalence with a known value
    
    ... where equivalence doesn't imply same NodeType.
    
    For instance, we cannot assume that a TypeCombine with a HeapNumber
    and a generic tagged value yields another HeapNumber.
    
    In particular, the node Float64ToTagged may return a Smi instead of
    a HeapNumber.
    
    Fixed: 329476993
    Change-Id: I3f1c06e0b870ba3c84a1f3ea19f8d2a7b03cdd8f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383097
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92943}

commit 1017c6c27737773e082c1a264b0dbdf765d313a1
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Mar 21 12:45:41 2024 +0100

    [wasm-stringref] Allow array inputs with type "none"
    
    The four instructions that take i8/i16 arrays as inputs (i.e.
    string.{new,encode}_wtf{8,16}_array) already considered these
    to be nullable references, but optimistically rejected inputs
    that were statically known to have type "none".
    That doesn't match the general principle of allowing implicit
    upcasting, so this patch relaxes the decoder to permit "none"
    types at validation time (they'll trap at runtime, of course).
    
    Context: https://github.com/WebAssembly/stringref/issues/66
    
    Bug: v8:12868
    Change-Id: I813f8adc273c9e7ac23590ce239e47ce6117973b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5385442
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92942}

commit b852ad701db21d6db5b34e66f4ec1cdccd2ec4d4
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Mar 21 11:38:08 2024 +0100

    [wasm] Check for type-definition count limit
    
    Bug: chromium:330575498
    Change-Id: I395f0ed6d823b7d1e139da6551486e3627d65724
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378419
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92941}

commit 28877c5520793115f8272876a2581b2e5068cffa
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Mar 21 12:20:01 2024 +0000

    Revert "Reland "[heap] remove empty space from executable MemoryChunks""
    
    This reverts commit 1b4d48e4d7e2c5b553cb0eed16ef6f177a8e05ee.
    
    Reason for revert: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20css%20-%20debug/7060/overview
    
    Original change's description:
    > Reland "[heap] remove empty space from executable MemoryChunks"
    >
    > This is a reland of commit a800f7dcb03a4770bb3fe2c7812f745474b11782
    >
    > Changes: implemented support in ObjectStartOffsetInCodePage for the
    > case where kCodeAlignmentMinusCodeHeader < sizeof(MemoryChunk).
    >
    > Original change's description:
    > > [heap] remove empty space from executable MemoryChunks
    > >
    > > Since the metadata moved out, we can fix up the data offsets and
    > > allocate data right after the header. Since the headers become
    > > executable now for code MemoryChunks, we need to add write scopes to
    > > MemoryChunk initialization and flag writes.
    > > I split the SetFlag functions into three variants for this:
    > > * SetFlagNonExecutable for chunks that are never executable and don't
    > >   need unlocking (e.g. new space chunks)
    > > * SetFlagUnlocked for when the code space is already unlocked
    > > * SetFlagSlow which will do the unlocking but comes with a perf impact.
    > >
    > > Change-Id: I7d6854337ccdd56670cd6bd549956b6c9fe6f9e9
    > > Bug: v8:13355, chromium:40849120
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361037
    > > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#92926}
    >
    > Bug: v8:13355, chromium:40849120
    > Change-Id: I7668ebd30ead660e6f821ce21b7c371c9e1dc087
    > Cq-Include-Trybots: luci.v8.try:v8_mac_arm64_no_pointer_compression_dbg
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378292
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > Cr-Commit-Position: refs/heads/main@{#92935}
    
    Bug: v8:13355, chromium:40849120
    Change-Id: I974e55b355d47b12c9b5635ac4644859a7c5dcbd
    Cq-Include-Trybots: luci.v8.try:v8_mac_arm64_no_pointer_compression_dbg
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383471
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92940}

commit e9cd3a6e4995d5f296e175cba2c69ee9abd0a0df
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Mar 19 17:43:39 2024 +0100

    [api][tests] Update tests for new interceptors Api, pt.3
    
    ... and mark the old interceptors Api as V8_DEPRECATE_SOON.
    
    Drive-by: use anonymous namespaces instead of `static` in tests.
    
    Bug: chromium:328490288
    Change-Id: I58d40618048195e1243ec72c14fad830a59663f0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372060
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92939}

commit 80aef2091884c9cdec53f552e8c226ef87261285
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Mar 20 15:47:46 2024 +0100

    [test][asmjs] Avoid data race in test by increasing sampling interval
    
    There seems to be a data race in the CPU profiler when two samples get
    collected at the same time. This happens in tests where samples get
    collected explicitly through a test API, in addition to the samples that
    get collected periodically by the profiler.
    
    With this CL we increase the sampling interval of the profiler, so that
    the test finishes before the profiler wants to collect its sample.
    
    This CL also reverts a fix that was attempted before but does not, as
    far as I understand help in all cases.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14549
    Change-Id: I9608776065f30f7f98040f418235e1ca60f8deae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383508
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92938}

commit 65278e5b0413f8b8ba90676e6a46db7d3166810b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Mar 15 16:57:49 2024 +0100

    [wasm][liftoff] Use subtype check in LoadNullValueForCompare
    
    This is a follow-up to https://crrev.com/c/5371985.
    
    Bug: v8:14034
    Change-Id: I57abfaf9342863f54952b17b6575b7547d0069e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372471
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92937}

commit 80dad0bec2061ae0620895da97dfc1bf89b100f9
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Mar 21 10:46:17 2024 +0100

    [wasm] Use TrustedFixedAddressArray for imported function targets
    
    This CL introduces trusted versions of the integer arrays (based on the
    existing TrustedByteArray) and uses a TrustedFixedAddressArray to store
    the call targets of imported functions.
    
    This closes a gap in the V8 sandbox which allowed attackers to easily
    manipulate call targets stored on the JS heap.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564, 40927374
    Change-Id: Ifc477274c5652f3b87287aa89d0d325047c0c484
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380602
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92936}

commit 1b4d48e4d7e2c5b553cb0eed16ef6f177a8e05ee
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Mar 21 09:54:16 2024 +0100

    Reland "[heap] remove empty space from executable MemoryChunks"
    
    This is a reland of commit a800f7dcb03a4770bb3fe2c7812f745474b11782
    
    Changes: implemented support in ObjectStartOffsetInCodePage for the
    case where kCodeAlignmentMinusCodeHeader < sizeof(MemoryChunk).
    
    Original change's description:
    > [heap] remove empty space from executable MemoryChunks
    >
    > Since the metadata moved out, we can fix up the data offsets and
    > allocate data right after the header. Since the headers become
    > executable now for code MemoryChunks, we need to add write scopes to
    > MemoryChunk initialization and flag writes.
    > I split the SetFlag functions into three variants for this:
    > * SetFlagNonExecutable for chunks that are never executable and don't
    >   need unlocking (e.g. new space chunks)
    > * SetFlagUnlocked for when the code space is already unlocked
    > * SetFlagSlow which will do the unlocking but comes with a perf impact.
    >
    > Change-Id: I7d6854337ccdd56670cd6bd549956b6c9fe6f9e9
    > Bug: v8:13355, chromium:40849120
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361037
    > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92926}
    
    Bug: v8:13355, chromium:40849120
    Change-Id: I7668ebd30ead660e6f821ce21b7c371c9e1dc087
    Cq-Include-Trybots: luci.v8.try:v8_mac_arm64_no_pointer_compression_dbg
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378292
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92935}

commit 0635970934bac7e7114612b1ffa3adf0bcd1ee8e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 21 09:42:20 2024 +0100

    Reland^2 "[maglev] Support arguments object in inlined function"
    
    This is a reland of commit 12c69e482dfdc795ae7f111154d546637fccc8f9
    
    This fixes the index of mapped parameters in the function context:
    For the top function, mapped_count = parameter_count_without_receiver,
    but this is not the case for inlined functions.
    
    Original change's description:
    > Reland "[maglev] Support arguments object in inlined function"
    >
    > This is a reland of commit 38554cc99f7a5c19e3a26a6d8574d9dc632a8691
    >
    > Original change's description:
    > > [maglev] Support arguments object in inlined function
    > >
    > > We actually already support them via runtime function calls
    > > We only need to enable them.
    > >
    > > Drive-by: if the number of rest parameters is zero (empty
    > > fixed array), we could fail GetWriteBarrierMode.
    > > So instead, we return the rest object earlier.
    > >
    > > Bug: v8:7700
    > > Change-Id: Ib07c8b91cf9c0bc668358de47b1b9b74adb715ad
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366455
    > > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > > Reviewed-by: Patrick Thier <pthier@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#92819}
    >
    > Bug: v8:7700
    > Change-Id: I7812c8da58ede3b66af4b5202587d070cd0b332b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5382159
    > Commit-Queue: Patrick Thier <pthier@chromium.org>
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Patrick Thier <pthier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92924}
    
    Fixed: 330578127
    Bug: v8:7700
    Change-Id: Ic9be959cf3a16acb9cc8b1c7ec2adf5326849056
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383081
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92934}

commit adc7a7c47d751503c566884b174895253893ee73
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Mar 13 17:06:39 2024 +0800

    [mips64][compiler] Port some changes about fast C calls
    
    Port commit e50ab13bbfaaf72717fd73d9a01434e4c3c1a0a8
    
    Change-Id: I7993fc5a0ea7f4cc9724499ff0094f23d8ede315
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5368869
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92933}

commit 6503a987d9666e0f4f320c222de2683a7dae1e84
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 21 09:59:19 2024 +0100

    [objects] Deal with large strings in NoSideEffectsErrorToString
    
    If name is too big, StringBuilder will fail to even add
    "<a very large string>" suffix.
    
    In this case, we truncate name first.
    
    Bug: 329699609
    Change-Id: I6e4440c07eae84371f44b54f88127e2c70af0db5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378286
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92932}

commit 6d9bbd9c6132c7f290490fab888ec525b5df935d
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Mar 20 17:43:37 2024 +0100

    [wasm] Store WasmInternalFunction::call_target as raw pointer
    
    Now that the WasmInternalFunction lives in trusted space it can hold raw
    pointers again.
    
    This CL stores the call_target as a raw pointer instead of a code
    pointer. This makes indirect function calls faster because we can just
    load the call target directly instead of via the external pointer table.
    
    R=ahaas@chromium.org
    CC=saelo@chromium.org
    
    Bug: v8:14564
    Change-Id: I90acbe0641899df42bc48b60efc9112c2f7a2f10
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383046
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92931}

commit 075f878fde9242c54aac80d05bb4c6e80d86cb66
Author: Benedikt Meurer <bmeurer@chromium.org>
Date:   Wed Mar 20 19:57:10 2024 +0100

    [inspector] Allow custom formatters to return `null` from `body()`.
    
    As per (unofficial) custom formatter specification[1], it is perfectly
    valid to return `null` from the `body()` function, and the developer
    tools should fall back to using the default body formatter in those
    cases. This CL removes the check from the inspector, that the result
    of calls to `body()` has to be an `Array`.
    
    [1]: https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html#custom-formatter-structure
    
    Bug: b:329400119
    Change-Id: I901116ef79bc169163f83d0db4aabe182f7ae4f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378291
    Commit-Queue: Kim-Anh Tran <kimanh@chromium.org>
    Auto-Submit: Benedikt Meurer <bmeurer@chromium.org>
    Reviewed-by: Kim-Anh Tran <kimanh@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92930}

commit 12233c5254ed4bf54bf478c5799653aef704bfea
Author: Adam Klein <adamk@chromium.org>
Date:   Wed Mar 20 23:17:18 2024 +0000

    Revert "Reland "[maglev] Support arguments object in inlined function""
    
    This reverts commit 12c69e482dfdc795ae7f111154d546637fccc8f9.
    
    Reason for revert: blocking V8 roll into Chromium:
    https://crrev.com/c/5382246
    
    Original change's description:
    > Reland "[maglev] Support arguments object in inlined function"
    >
    > This is a reland of commit 38554cc99f7a5c19e3a26a6d8574d9dc632a8691
    >
    > Original change's description:
    > > [maglev] Support arguments object in inlined function
    > >
    > > We actually already support them via runtime function calls
    > > We only need to enable them.
    > >
    > > Drive-by: if the number of rest parameters is zero (empty
    > > fixed array), we could fail GetWriteBarrierMode.
    > > So instead, we return the rest object earlier.
    > >
    > > Bug: v8:7700
    > > Change-Id: Ib07c8b91cf9c0bc668358de47b1b9b74adb715ad
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366455
    > > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > > Reviewed-by: Patrick Thier <pthier@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#92819}
    >
    > Bug: v8:7700
    > Change-Id: I7812c8da58ede3b66af4b5202587d070cd0b332b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5382159
    > Commit-Queue: Patrick Thier <pthier@chromium.org>
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Patrick Thier <pthier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92924}
    
    Bug: v8:7700
    Change-Id: Ic0f066a9ac87a5c1b3c01c70781b9b371243be6d
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5384352
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92929}

commit 9bf38176b0b17ed9fe6354197ade6778a4e8604c
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Mar 20 21:16:34 2024 +0100

    [intl] Speed up Intl.Segmenter iteration
    
    Segmenting a string into words or graphemes returns a
    "Segment Data Object" for every segment. By predefining these
    objects' map, we can populate their properties much faster than
    with CreateDataProperty().
    This speeds up the microbenchmark from the linked bug (c#5) by
    around 3x.
    
    Bug: 326176949
    Change-Id: I2791143f514654ab3d1673a94169b4fb96238840
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5382161
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92928}

commit 8124ec657c3cf911bc2b5f956e292b78a8de2ea5
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Wed Mar 20 17:12:54 2024 +0000

    Revert "[heap] remove empty space from executable MemoryChunks"
    
    This reverts commit a800f7dcb03a4770bb3fe2c7812f745474b11782.
    
    Reason for revert: failed on V8 Mac - arm64 - no pointer compression debug builder
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Mac%20-%20arm64%20-%20no%20pointer%20compression%20debug%20builder/9839/overview
    
    Original change's description:
    > [heap] remove empty space from executable MemoryChunks
    >
    > Since the metadata moved out, we can fix up the data offsets and
    > allocate data right after the header. Since the headers become
    > executable now for code MemoryChunks, we need to add write scopes to
    > MemoryChunk initialization and flag writes.
    > I split the SetFlag functions into three variants for this:
    > * SetFlagNonExecutable for chunks that are never executable and don't
    >   need unlocking (e.g. new space chunks)
    > * SetFlagUnlocked for when the code space is already unlocked
    > * SetFlagSlow which will do the unlocking but comes with a perf impact.
    >
    > Change-Id: I7d6854337ccdd56670cd6bd549956b6c9fe6f9e9
    > Bug: v8:13355, chromium:40849120
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361037
    > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92926}
    
    Bug: v8:13355, chromium:40849120
    Change-Id: I607071d48768f844bee35ec1de7c82c75d12e7c1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5381731
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92927}

commit a800f7dcb03a4770bb3fe2c7812f745474b11782
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Mar 14 14:30:20 2024 +0100

    [heap] remove empty space from executable MemoryChunks
    
    Since the metadata moved out, we can fix up the data offsets and
    allocate data right after the header. Since the headers become
    executable now for code MemoryChunks, we need to add write scopes to
    MemoryChunk initialization and flag writes.
    I split the SetFlag functions into three variants for this:
    * SetFlagNonExecutable for chunks that are never executable and don't
      need unlocking (e.g. new space chunks)
    * SetFlagUnlocked for when the code space is already unlocked
    * SetFlagSlow which will do the unlocking but comes with a perf impact.
    
    Change-Id: I7d6854337ccdd56670cd6bd549956b6c9fe6f9e9
    Bug: v8:13355, chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361037
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92926}

commit 8735916ba1a75ebf1720e4c841685d9eb5b800b2
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Mar 14 14:29:03 2024 +0100

    [heap] Move Metadata out of the MemoryChunk
    
    Allocate the MutablePageMetadata objects on the C++ heap, only the
    ReadOnlyMetadata stays inline. This will allow us to:
    * get rid of the CodePageHeaderModificationScope on Apple silicon
    * make our code space compatible with memory sealing
    * fix sandbox bypasses once we sandboxify the metadata pointer
    
    There's a slight performance regression with this CL on x64 due to the
    changed cache line offset of the Metadata objects.
    Speedometer3: -0.2%
    Jetstream2: -0.1%
    https://pinpoint-dot-chromeperf.appspot.com/job/13ab6ae8de0000
    https://pinpoint-dot-chromeperf.appspot.com/job/1290a2425e0000
    
    Change-Id: If956b09dba4d1de623618eec03ddfd0054ad166b
    Bug: v8:13355, chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5354914
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92925}

commit 12c69e482dfdc795ae7f111154d546637fccc8f9
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Mar 13 15:17:25 2024 +0100

    Reland "[maglev] Support arguments object in inlined function"
    
    This is a reland of commit 38554cc99f7a5c19e3a26a6d8574d9dc632a8691
    
    Original change's description:
    > [maglev] Support arguments object in inlined function
    >
    > We actually already support them via runtime function calls
    > We only need to enable them.
    >
    > Drive-by: if the number of rest parameters is zero (empty
    > fixed array), we could fail GetWriteBarrierMode.
    > So instead, we return the rest object earlier.
    >
    > Bug: v8:7700
    > Change-Id: Ib07c8b91cf9c0bc668358de47b1b9b74adb715ad
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366455
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Patrick Thier <pthier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92819}
    
    Bug: v8:7700
    Change-Id: I7812c8da58ede3b66af4b5202587d070cd0b332b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5382159
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92924}

commit c112cb6cf85a18c66c5cda21f41cfe2397c27610
Author: Eva Herencsarova <evih@chromium.org>
Date:   Wed Mar 20 15:44:47 2024 +0100

    [wasm-compile-fuzzer] Change order of types in GenerateInitExpr
    
    This CL changes the constant order of some types that we choose
    randomly from. This is becuase if there are no more random bits
    available, the default choice is element 0 which is a
    HeapType::kStruct. To generate the first struct we could have a deep
    stack of recursive calls GenerateInitExpr() and
    GenerateStructNewInitExpr.
    After this change the type 0 is I32 that can be easily initialised.
    
    Change-Id: Id1550f7237f4d9d854928625de986a2b1777265e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383507
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92923}

commit d50d68eaa779e0d018937205720b0a7dedb733b8
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Mar 20 12:10:51 2024 +0100

    Reland "[maglev] Inline allocation of arguments object inside inlined functions"
    
    This is a reland of commit 85bc9e47a69e90bf6d92988666c532e9a81b0bf6
    
    The bot issue was fixed on https://chromium-review.googlesource.com/c/v8/v8/+/5374908
    
    This also adds a fix for 330095905 (emit empty fixed array when
    arguments size equals to 0) and some test cases.
    
    Original change's description:
    > [maglev] Inline allocation of arguments object inside inlined functions
    >
    > Bug: 329474405, 326091155
    > Change-Id: If984c6ab448ee85cafba7f7fccd1d767174ff79b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5371987
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92870}
    
    Bug: 330095905, 329474405, 326091155
    Change-Id: I67d1f38b69e119b5df5d8eec0633db0f5766d4c2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378630
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92922}

commit 83152483eacf8bb4b9d15e430e94052f400798c7
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Mar 20 15:03:58 2024 +0100

    [gm.py] Fix reclient config on macs
    
    No-Try: true
    Change-Id: I859e7bef8471f3749e50d2d42e33011ed765f11a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5381546
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92921}

commit 3f63eb1076c77620ed5cfc0de55d6212dd55ad49
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Mar 18 13:38:25 2024 +0000

    [sandbox] Set the correct size for the InstructionStream::Code field
    
    At currently this is a no-op since protected pointers and indirect code
    handles have the same size. Still we should use the correct one.
    
    Change-Id: I4d3bc142b9a5107993ca77c241fa32eb0b9e2923
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5370194
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92920}

commit 084bd3d7565254a023c8f517a7e8b5f9e0aaa732
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Mar 20 12:40:49 2024 +0100

    [wasm] Add body descriptors of WasmFunctionData subclasses
    
    WasmFunctionData has its own body descriptor since
    https://crrev.com/c/5372497, but two of its subclasses did not invoke it
    yet.
    This CL adds object body descriptors for those two subclasses which call
    the super-class body descriptor.
    
    R=mliedtke@chromium.org
    
    Bug: v8:14564
    Change-Id: I294eacee51aa37787907a55d401fefbf5faea767
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5383037
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92919}

commit a27e7fbbe9aa0064d22b9c114b9f678de6aad071
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Mar 20 09:53:20 2024 +0100

    [heap] Disable page pooling for MinorMS
    
    This CL temporarily disables page pooling in V8 when MinorMS is enabled.
    This is meant to confirm that a increase in number of crashes with
    MinorMS that was observed on canary [1] is triggered by the page pool.
    This CL will regress benchmark scores and will be reverted in a few
    days.
    
    [1] https://crash.corp.google.com/browse?q=expanded_custom_data.ChromeCrashProto.magic_signature_1.name%3D%27%5BRenderer+hang%5D+v8%3A%3Abase%3A%3AOS%3A%3ADiscardSystemPages%27+AND+EXISTS+%28SELECT+1+FROM+UNNEST%28expanded_custom_data.ChromeCrashProto.experiments.ids%29+expanded_custom_data_ChromeCrashProto_experiments_ids+WHERE+expanded_custom_data_ChromeCrashProto_experiments_ids%3D%27c77a0ff0-3f4a17df%27+OR+expanded_custom_data_ChromeCrashProto_experiments_ids%3D%27c77a0ff0-2fc45898%27+OR+expanded_custom_data_ChromeCrashProto_experiments_ids%3D%27c77a0ff0-a79d803f%27%29+AND+product_name%3D%27Chrome%27+AND+expanded_custom_data.ChromeCrashProto.channel%3D%27canary%27
    
    Bug: v8:12612
    Change-Id: I6f0408756284efb042590df76db2c39ec7777477
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5381599
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92918}

commit 3f0d50dc63af69e65083fc0490fbf9e01bc77494
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Mar 20 09:58:34 2024 +0100

    [maglev] Enable escape anlaysis on maglev-future
    
    Bug: 326091155
    Change-Id: Ic337d261281414c8430d574363bd26eef46eeab5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372855
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92917}

commit 2da1da50d99e28407b66fdb59935f1d5d16b3281
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Mar 19 13:56:33 2024 +0100

    [wasm] Move WasmInternalFunction to trusted space
    
    This moves the WasmInternalFunction objects to the trusted space.
    References from WasmFuncRef and WasmFunctionData become indirect
    pointers with the kWasmInternalFunctionIndirectPointerTag.
    
    In a follow-up we can then un-sandboxify all fields of the
    WasmInternalFunction to gain some performance back.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I28ffab48805df5c9c8cd58de9503e7b10d5b2518
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372497
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92916}

commit a091b1721b2f39bb81986b9504c494912a7ec5c1
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Mar 20 09:51:11 2024 +0100

    [turboshaft] Print predecessors on Bind with --turboshaft-trace-emitted
    
    Bug: v8:12783
    Change-Id: I063be3d96194bff1ad8b18b7489fca6f65a3dfe7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374341
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92915}

commit bd6b6f982be26f2e3a3153128b59f2e424037d01
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Mar 19 19:23:46 2024 +0100

    [turboshaft] Fix instruction selector regressions
    
    Three small improvements:
    - Comparison with smi 0 is correctly optimized
    - DidntThrowOp gets the effect of the call to be optimized away if not
      RequiredWhenUnused
    - Refined the effects on the FindOrderedHashEntryOp and descriptor
    
    Bug: chromium:329965274
    Change-Id: I3b07b3a555126279adaaf13f5c8c397b1204b19b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5379301
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92914}

commit 3ca1bdef7b6f7a75dc7b9e47cf03ebd37861c212
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Mar 19 16:24:40 2024 -0700

    [regexp] Ship duplicate named capture groups
    
    I2S with 3 LGTMs:
    https://groups.google.com/a/chromium.org/g/blink-dev/c/882bEYP9yKw/m/cZ1J9IogAAAJ
    
    Bug: v8:13173
    Change-Id: I8ea0aeee1570e423d6d344c078483be930ceac57
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5379754
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92913}

commit dc0fe325c540ef4f84147c438449cd52090dd797
Author: Yuheng Wei <yuheng.wei@intel.com>
Date:   Wed Mar 20 12:16:08 2024 +0800

    [x64] Implement 256-bit assembly for some FMA instructions
    
    Bug: v8:12228
    Change-Id: Ia99469472f9d69aed5fb6ea1a3689dc8ddf304da
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4548680
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Yuheng Wei <yuheng.wei@intel.com>
    Cr-Commit-Position: refs/heads/main@{#92912}

commit 080b42713c6ca2026a269d827a973f16ef4ca2d1
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Mar 20 09:23:54 2024 +0800

    [riscv][interpreter] Microoptimise for-in bytecodes
    
    Port commit da2d5c29526d8bfbea2b5fe06fba81b21f1a4656
    
    
    Change-Id: I2aa9d7179775db7856653fbc4300bf93d38c02ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5381798
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92911}

commit 1fd3f98c07afc527a68ee15a9e0d6869defec2a9
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Mar 19 16:40:34 2024 -0400

    PPC/s390: [interpreter] Microoptimise for-in bytecodes
    
    Port da2d5c29526d8bfbea2b5fe06fba81b21f1a4656
    
    Original Commit Message:
    
        Two micro optimisations for for-in loops:
    
          * JumpIfForInDone replaces ForInContinue+JumpIfFalse. ForInContinue
            was only ever used for exiting the loop anyway, so now it's explicit
            and unoptimised tiers don't need to materialise the boolean.
          * ForInStep <reg> mutates its register instead of writing to the
            accumulator. It was anyway always followed by a Star to the same
            register, so may as well skip the middle step.
    
        This requires two changes to the bytecode compiler:
    
          * Add support for Jumps with other scalable operands than just the
            jump offset (this affects how constant pool entries for long jumps
            are reserved).
          * Add support for in-out Reg operands.
    
    R=leszeks@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Ib2cf97c0256f92e4685c066cebb814b7a2383556
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5381140
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92910}

commit ab654ee42a99996e6414b764a8ecf7bce49c376c
Author: Yuheng Wei <yuheng.wei@intel.com>
Date:   Wed Mar 20 09:30:22 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of sign extension op in turboshaft
    
    Bug: v8:12716
    Change-Id: I93ce2cdad7ff870ed3d4698bf0bc0c9974640db0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5369702
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Yuheng Wei <yuheng.wei@intel.com>
    Cr-Commit-Position: refs/heads/main@{#92909}

commit 22a49c146929ece92c7c97cc9a51f7ab384a4e03
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Mar 19 14:26:39 2024 +0000

    [OWNERS] Add olivf@ to COMMON_OWNERS
    
    NoTry: True
    Change-Id: Ie3cb0156573ee6a0a343f48ac0b5f53839022bfa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380600
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92908}

commit 0f3f358fb27f1002880f9f75315727541781d982
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Mar 19 18:03:48 2024 +0100

    [wasm] Rename protected fields on WasmTrustedInstanceData
    
    This CL introduces the convention that protected fields start with a
    "Protected" prefix to make it easier to know in compilers how to load
    them.
    
    Liftoff and Turboshaft already have macros for loading protected fields
    from the instance, those automatically add that prefix now. For Turbofan
    we introduce a similar macro in this CL.
    
    We also slightly extend the Turboshaft macro to include the V::Cast.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: Id3811644fb8f72f0a64026de58c964e1e248605c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380597
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92907}

commit 24fe8ec3fcd0a107f500d7ced950ff234d149d6a
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Mar 19 17:13:56 2024 +0100

    Reland "[heap] Minor cleanups around HeapController"
    
    This is a reland of commit 55ace32d8b57295208975c5f794241d84b0ceefa
    
    Original change's description:
    > [heap] Minor cleanups around HeapController
    >
    > Change-Id: I27836c8512b4b676f3a24e6b58e91bdf4e1cffca
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378407
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92896}
    
    Change-Id: I8016e8be69831ee225800f5a5c974ab1639825fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378409
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92906}

commit caefbbc17f48b12f91b15ee2b0ddd57f752d2235
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Mar 19 15:56:14 2024 +0100

    [turboshaft] Add more Wasm owners
    
    Several Wasm team members were owning the Turbofan wasm files; make the
    same set of people own Turboshaft wasm files.
    
    Drive-by: Remove Tobias.
    
    R=dmercadier@chromium.org, nicohartmann@chromium.org
    CC=ahaas@chromium.org, dlehmann@chromium.org, gdeepti@chromium.org, jkummerow@chromium.org
    
    Change-Id: I3dcaeaf47ef6c08fd296d29b04ba8ebda9282e3c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380601
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92905}

commit 14fc1457024499cd93f20e6d2d1c267a62c93a06
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Mar 19 17:06:44 2024 +0100

    [maglev] Add trace escape analysis flag
    
    Bug: 326091155
    Change-Id: Iec92db0791ccfc712bf2b7402f1586b22d1a645e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378629
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92904}

commit 05fb4036251c49a8530fbab3db729474819299ca
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 19 16:12:07 2024 +0100

    [turboshaft][x64] Port/enable ISEL unittests part 1
    
    Porting these tests revealed some issues in the instruction selector,
    which lead to the following changes:
    
      * BaseWithScaledIndexAndDisplacement matching now tries to swap
        left and right inputs of commutative binops.
    
      * VisitTruncateInt64ToInt32 now avoids emitting the truncation
        in a few more cases.
    
    Bug: v8:12783
    Change-Id: I9216a975b5ca492e0528452960b7bcccd431844f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372724
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92903}

commit c08f399c1609c3fd6eb5a6fe4e4e4a94fe98da20
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Mar 19 15:49:25 2024 +0100

    [maglev] Use a DisjointSet for allocation dependencies
    
    ... and analyse them after AnyUseMarkingProcessor, which will
    delete most of unused nodes.
    
    The non escaped allocations and its stores are them removed from the
    graph in DeadNodeSweepingProcessor.
    
    If the store makes nodes unused, it is then too late to remove them.
    
    This fixes the issue when we have 3 allocations (A, B, C)
    and the dependencies (A, C) and (B, C).
    
    Assuming A and C are not escaping, but B is.
    
    If we process A first, we will remove the node, since it
    is non-escaping.
    
    But later, we process B, which forces C to escape.
    Therefore, A needs to escape as well!
    
    This CL also allows multiple dependencies.
    
    This CL also simplifies the HasEscaped predicate:
    After EscapeDependentAllocationsIfNeeded, we use a simple boolean
    flag to denote escaped objects.
    
    Bug: 329474361, 326091155
    Change-Id: I4682c0b78f9514a2aef804d55a81ba9954209f79
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374908
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92902}

commit da2d5c29526d8bfbea2b5fe06fba81b21f1a4656
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Mar 18 11:01:11 2024 +0000

    [interpreter] Microoptimise for-in bytecodes
    
    Two micro optimisations for for-in loops:
    
      * JumpIfForInDone replaces ForInContinue+JumpIfFalse. ForInContinue
        was only ever used for exiting the loop anyway, so now it's explicit
        and unoptimised tiers don't need to materialise the boolean.
      * ForInStep <reg> mutates its register instead of writing to the
        accumulator. It was anyway always followed by a Star to the same
        register, so may as well skip the middle step.
    
    This requires two changes to the bytecode compiler:
    
      * Add support for Jumps with other scalable operands than just the
        jump offset (this affects how constant pool entries for long jumps
        are reserved).
      * Add support for in-out Reg operands.
    
    Change-Id: If8c3bbf7524af9502b40af2b1a715389fb13210b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5353508
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92901}

commit 82167182a78cfb2ca5a5ddb6094fcecb86d69d5b
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Mar 19 14:35:10 2024 +0100

    [turbofan] Remove unused parts of the TurboFan backend
    
    In particular:
    - ControlFlowOptimization
    - EffectControlLinearization
    - StoreStoreElimination
    - and corresponding unittests
    
    Bug: v8:12783
    Change-Id: Iaa2553457dbb973a979164fc3336e1115bfa6041
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374761
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92900}

commit e099da06697d0fcb650a552c7168d40666e8b9db
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Mar 19 15:03:23 2024 +0000

    Revert "[heap] Minor cleanups around HeapController"
    
    This reverts commit 55ace32d8b57295208975c5f794241d84b0ceefa.
    
    Reason for revert: GC stress failures: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20gc%20stress/48448/overview
    
    Original change's description:
    > [heap] Minor cleanups around HeapController
    >
    > Change-Id: I27836c8512b4b676f3a24e6b58e91bdf4e1cffca
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378407
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92896}
    
    Change-Id: If9d347797d91c01509ac6024ba3560cbaffaaa41
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378408
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92899}

commit 802107648df9cfd8b9384a205422e979f9c432ea
Author: Zequan Wu <zequanwu@google.com>
Date:   Mon Mar 18 15:01:32 2024 -0400

    Add .att_syntax for inline asm under windows x64.
    
    clang-cl uses -x86-asm-syntax=intel by default, which failed to
    compile sources using AT&T syntax.
    
    Bug: chromium:330163686
    Change-Id: I6e3d1b001e2812d5e232d8dadbd51844f952e443
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378642
    Commit-Queue: Nico Weber <thakis@chromium.org>
    Auto-Submit: Zequan Wu <zequanwu@google.com>
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92898}

commit 531bf3a21114598472d3523a1bc60d51d2ed03ec
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon Mar 18 15:04:48 2024 +0100

    [api][tests] Update tests for new interceptors Api, pt.2
    
    ... in order to be able to mark the old interceptors Api as
    V8_DEPRECATE_SOON.
    
    Drive-by: use anonymous namespaces instead of `static` in tests.
    
    Bug: chromium:328490288
    Change-Id: Ieadd0016bf6afa676b6543cc10053afbd7a59137
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374905
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92897}

commit 55ace32d8b57295208975c5f794241d84b0ceefa
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Mar 19 15:00:04 2024 +0100

    [heap] Minor cleanups around HeapController
    
    Change-Id: I27836c8512b4b676f3a24e6b58e91bdf4e1cffca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378407
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92896}

commit 77e38a2767c3795757ba291a397ff1b166b65be9
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Mar 19 13:53:54 2024 +0100

    [wasm-compile-fuzzer] Refactor GenerateRandomWasmModule (PART 7)
    
    This CL refactors GenerateRandomWasmModule():
    - introduces a new class ModuleGen (similar to BodyGen);
    - introduces helper functions (as ModuleGen methods) for parts
      of the wasm module generation.
    
    This improves the readability and is an intermediate step for
    modularisation.
    
    This CL shouldn't change the generated modules.
    
    Bug: v8:14679
    Change-Id: I38a16d9dd4f470e8e718afeb5e04e1c3e2d23432
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374763
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92895}

commit 884a49384271111e3bb05b62091de7c73df7c393
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Mar 18 18:28:49 2024 +0100

    [wasm-compile-fuzzer] Rename WasmGenerator class to BodyGen (PART 6)
    
    This CL is an intermediate clean-up step for modularising the wasm
    compile fuzzer.
    
    This CL shouldn't change the generated modules.
    
    Bug: v8:14679
    Change-Id: Ib1f57c305b4e39a825e71bc9cb0ec748a8889772
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374902
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92894}

commit 2cfc118b6d316f90b4e6c167deeab43d39588522
Author: Seokho Song <seokho@chromium.org>
Date:   Thu Mar 14 07:09:58 2024 +0900

    Optimize Math.hypot for arguments length <= 3
    
    The loop has a hidden cost of 'comparison' to check escape.
    If the length of the argument is 2, there are 3 times of comparison occurs.
    The slow path, which was the previous implementation, has two loops which means there are 6 times of comparisons exist.
    
    This can be overhead for a few arguments.
    
    Hence, remove the loop for less than the or to equal 3 arguments.
    
    This optimization can improve the performance of Math.hypot
    about 180%~200% for less than or equal to 3 arguments.
    
    Benchmarks:
    
    1. Without a fast path
    
    average data of ATTEMPT:  10
    
    // (if not avg, * was very fast it about takes ~100)
    * took 613.0956999999997
    hypot took 1598.6501
    ** took 674.5127000000002
    pow took 667.6956999999991
    
    args 3: * took 666.9542000000001
    args 3: hypot took 2085.3667
    args 3: ** took 728.8081999999995
    args 3: pow took 724.6164999999994
    
    ----
    
    2. With the FastMathHypot
    
    average data of ATTEMPT:  10
    
    * took 609.4125999999994
    hypot took 820.8915000000001
    ** took 673.3835000000001
    pow took 667.825
    
    args 3: * took 658.825
    args 3: hypot took 1159.8915999999995
    args 3: ** took 724.5956999999995
    args 3: pow took 720.9337000000011
    
    
    Bug: v8:13801
    Change-Id: I41e4116323fb283aaf6af12100b5683a160d32c9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5329686
    Commit-Queue: Seokho Song <seokho@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92893}

commit 7fc698c9039dc9764512823c46d9805824ec8427
Author: Joyee Cheung <joyee@igalia.com>
Date:   Wed Mar 13 02:28:49 2024 +0800

    [snapshot] allow NativeContext serialization to be deferred
    
    To serialize the context embedder data, we just need the back
    reference to the embedder data array. The context can be deferred.
    
    Bug: v8:14662
    Change-Id: I6a3c9f35596cd17b7e6bc773cf598922b5b7488d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367362
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92892}

commit 7f11ec26aaba957a7ea4d7247dd028e6a375bc82
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Mar 19 12:05:33 2024 +0100

    [turboshaft] DeoptimizeIfOp: pretty print options
    
    DeoptimizeIfOp printed a raw pointer.
    This CL also changes cases where we used operator<<(const char*) to
    print a single character.
    
    Bug: v8:12783
    Change-Id: I52ee8bf0c34013827e851be8045bafaffef0100e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5377873
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92891}

commit 53b462c2336a19745ea455d457a037cf0228bdaf
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Mar 18 19:47:19 2024 +0100

    [test][asm.js] Robustify mjsunit/asm/log-lazy-code
    
    Sampling the stack isn't always reliable, so this patch slightly
    loosens the test's expectations to be more robust.
    
    Fixed: v8:14653
    Change-Id: I53f721aea759bee8a6810c0f80369245040a4248
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378403
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92890}

commit f6b1dd8ec7cad9f9794b5176be1bed7e06584015
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Mar 18 17:41:16 2024 +0000

    Reland "[object] Fast path for adding props with existing transition"
    
    This is a reland of commit 84993aa80bc5fae1a068a036ca5bcd10c12ce63e
    
    Fixes the attributes in the transition search to not be NONE.
    
    Original change's description:
    > [object] Fast path for adding props with existing transition
    >
    > Add a fast path to AddProperty/CreateDataProperty, which first searches
    > the transition array for an existing transition. If a transition exists,
    > we can skip a bunch of checks around whether the property already exists
    > and is writable.
    >
    > Change-Id: I57dd37bb9fe649755e972a469cb53163c34faf8f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5342763
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92683}
    
    Change-Id: Icf03e2a72c847a764bd5900bdb1be19acd774247
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378402
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92889}

commit 28e0aa348e520f7e1532b2e2f9584b26275d30b1
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon Mar 18 15:02:09 2024 +0100

    [api][wasm] Update Wasm for new interceptors Api
    
    ... in order to be able to mark the old interceptors Api as
    V8_DEPRECATE_SOON.
    
    Bug: chromium:328490288
    Change-Id: Ibc01ece25f92672d8c5d6012cd16183f82e221a2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374904
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92888}

commit 6fc3eab3c572770325e0617c1dc24173c20ab048
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Mar 19 10:37:10 2024 +0100

    [profiler] Avoid data race in test by increasing sampling interval
    
    There seems to be a data race in the CPU profiler when two samples get
    collected at the same time. This happens in tests where samples get
    collected explicitly through a test API, in addition to the samples that
    get collected periodically by the profiler.
    
    With this CL we increase the sampling interval of the profiler, so that
    the test finishes before the profiler wants to collect its sample.
    
    R=cbruni@chromium.org
    
    Bug: v8:14549
    Change-Id: Ie7678961e6b10a5250b2460b79a046f9c6b864ea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5377871
    Auto-Submit: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92887}

commit 1c307dac01ae4f6d2404b1f6c47bbceaa7dbb465
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon Mar 18 14:55:21 2024 +0100

    [api][tests] Update tests for new interceptors Api, pt.1
    
    ... in order to be able to mark the old interceptors Api as
    V8_DEPRECATE_SOON.
    
    Drive-by: use anonymous namespaces instead of `static` in tests.
    
    Bug: chromium:328490288
    Change-Id: Ib74d222f479e2f714bc6998d58a4468040b63985
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374903
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92886}

commit 82416ea4361f5b06f9d218f2fde1cc88a4ad3643
Author: pthier <pthier@chromium.org>
Date:   Tue Mar 19 10:25:22 2024 +0100

    [regexp] Check for stackoverflow in RegExpLookaround::ToNode
    
    RegExpLookarounds can be deeply nested, potentially resulting in a
    stackoverflow when compiling them.
    Add a check for stackoverflow to this node.
    
    Bug: 329935787
    Change-Id: I6771a3c2bbbda58d74e53ac37022198485976485
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5380181
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92885}

commit 6e89395d930d8ef7552eaefa9e8ca86bc92b4c2f
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 18 15:52:06 2024 +0000

    Revert "[maglev] Enable escape analysis"
    
    This reverts commit ebf059d7fa88b06c9580a80ca767439bd6ee3345.
    
    Reason for revert: 328812070
    
    Original change's description:
    > [maglev] Enable escape analysis
    >
    > Bug: 326091155
    > Change-Id: I876e0ff6f0f264f58a9bd849c9e25f8a464aad27
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366029
    > Commit-Queue: Patrick Thier <pthier@chromium.org>
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Patrick Thier <pthier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92809}
    
    Bug: 326091155
    Change-Id: I61e3b58317cbae6d269f961eaec2c29371b4841c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378145
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92884}

commit 825835364ad93cc456c09bf7cf362aa9716ddc92
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 18 15:43:12 2024 +0000

    Revert "[maglev] Support arguments object in inlined function"
    
    This reverts commit 38554cc99f7a5c19e3a26a6d8574d9dc632a8691.
    
    Reason for revert: Performance regressions.
    
    Original change's description:
    > [maglev] Support arguments object in inlined function
    >
    > We actually already support them via runtime function calls
    > We only need to enable them.
    >
    > Drive-by: if the number of rest parameters is zero (empty
    > fixed array), we could fail GetWriteBarrierMode.
    > So instead, we return the rest object earlier.
    >
    > Bug: v8:7700
    > Change-Id: Ib07c8b91cf9c0bc668358de47b1b9b74adb715ad
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366455
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Patrick Thier <pthier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92819}
    
    Bug: 330096622, v8:7700
    Change-Id: Idd52f310c26e2476b372eced4a5da86a5bf6ddb9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374912
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92883}

commit 73f62bd5882f878d4aea8b5b7249084eecd97525
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Mar 18 16:12:54 2024 +0100

    [wasm] Fix ClearWeakScriptHandleTask shutdown issue
    
    When an Isolate shuts down at an inconvenient moment and instructs its
    task runner to destroy all waiting tasks, these tasks must not free
    memory that later steps in the Isolate shutdown sequence will still
    write to. This patch fixes such a situation for ClearWeakScriptHandleTasks
    by letting the Isolate itself own the memory in question.
    
    I have never been able to reproduce the reported issue myself, so
    this is a somewhat speculative fix.
    
    Fixed: 326607001
    Change-Id: Ie708439d924e9344c2df6bbba1cd864336756881
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372733
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92882}

commit e679458d1e95dac5f715cdd3f8be010b00468156
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Mar 18 15:46:13 2024 +0000

    Revert "[maglev] Inline allocation of arguments object inside inlined functions"
    
    This reverts commit 85bc9e47a69e90bf6d92988666c532e9a81b0bf6.
    
    Reason for revert: Roll failures: https://ci.chromium.org/ui/p/chromium/builders/try/win-rel/542154/overview
    
    Original change's description:
    > [maglev] Inline allocation of arguments object inside inlined functions
    >
    > Bug: 329474405, 326091155
    > Change-Id: If984c6ab448ee85cafba7f7fccd1d767174ff79b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5371987
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92870}
    
    Bug: 329474405, 326091155
    Change-Id: I259fe0fbff749e36269a34e955987a3c4509cf8b
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378143
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92881}

commit e7763c77100e25f28cf17fed2c650ccda161694d
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon Mar 18 15:13:18 2024 +0100

    [zone-stats] Enable resource integrity check for pako_inflate.js
    
    Bug: chromium:328875408
    Change-Id: I083095f76f0c84e8bf59767e9b0e1654d6a2a850
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374906
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92880}

commit b0331fe8985fee32222a008027d406a023ece3dd
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Mar 18 15:59:07 2024 +0100

    [wasm-gc][liftoff] Fix off-by-one in RefAsNonNull
    
    When we implement `ref.as_non_null` as a fake load from the object
    (which would trap if the object is null, handled by the trap handler),
    we should take into account that the object base address is tagged,
    so the "word after the map word" is at offset +3, not +4. Otherwise,
    in the special case where the object is a non-null zero-fields struct
    that was allocated right before the end of a page, we'd get an invalid
    memory access and hence erroneously consider the struct to be `null`.
    
    Fixed: 329145803
    Change-Id: Ib8ce2668b767de9de6bf4632b022c71a3b8bd027
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5378140
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92879}

commit b93975a48c722c2e5fe9b39437738eb2e23dac74
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Mar 18 15:25:15 2024 +0100

    [wasm][gc] Scan the code field of the WasmInternalFunction
    
    The code field in the WasmInternalFunction is a code pointer since
    https://crrev.com/c/5110559, so it has to be scanned explicitly.
    
    Bug: 329130358
    Change-Id: Ifc7a7cddb245e46fb9c006e560073a8d7ac65389
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374907
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92878}

commit 38f83e8b782ebfcc5c4cc76f248f829a1721034b
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Mar 18 12:57:38 2024 +0100

    Fix building x64 with GCC-12
    
    - Mostly making unreachable code paths easier for the compiler
      to detect
    - Dropping one unused field from a struct
    - Dropping one unnecessary std::move preventing copy elision
    
    Other target platforms than x64 may need additional fixes.
    The build takes a long time but it does finish eventually.
    
    Change-Id: I314b1ca41959d7433d83bc2065facdcada91cc52
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318004
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92877}

commit 23a7e955400ac87d3fade4bb8e35fe3aa9e22174
Author: José Dapena Paz <jdapena@igalia.com>
Date:   Fri Nov 17 16:16:19 2023 +0100

    [heap] Add method GetLineEnds
    
    Add new method that allows to obtain the line ends vector from a script
    without modifying the heap.
    
    Bug: v8:14617
    Change-Id: Ia93866b57aae58f8a0da0bc54192a55c62df5e06
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5147608
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: José Dapena Paz <jdapena@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#92876}

commit 85e611b2f2f638ed40b56247767436f8455df32c
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Mar 18 09:51:38 2024 +0100

    [tiering] Prioritize already queued turbofan compilation jobs
    
    If we see a second tiering request for an already queued function move
    it to the front of the queue.
    
    Drive-By: Refactor the turbofan input queue into its own class (which
              in the end wasn't really needed)
    
    Change-Id: I39ae5d33f494895023b85cd52a7eb2d385f6c78e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372183
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92875}

commit 1675cf36f7b3ce1838457a824122d4b6dfc963d7
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Mar 13 16:18:57 2024 +0100

    [BUILD] Add templates for v8 and wasm fuzzers
    
    Instead of specifying a separate source set for each fuzzer, let the
    "v8_fuzzer" template take care of this.
    Also add a separate "v8_wasm_fuzzer" template which adds more
    dependencies for Wasm fuzzers.
    
    R=machenbach@chromium.org
    CC=​​evih@chromium.org, ahaas@chromium.org
    
    Change-Id: I949f0ce9c39d343439871e9e0ccdb9d20dbe971c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366453
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92874}

commit f4b1732e026b431e5ed5b9644d633cb2c75bbd00
Author: Simon Zünd <szuend@chromium.org>
Date:   Mon Mar 18 09:51:05 2024 +0100

    [inspector] Change command line API allow list to deny list
    
    We are actually only worried about 'debug', 'monitor' and friends,
    since they can run JS across origins.
    
    For the selectors we should be more lenient and allow them in the
    preview (side-effect-free mode). In particular for xpath and the other
    Blink injected helpers.
    
    R=bmeurer@chromium.org
    
    Fixed: 329409675
    Change-Id: I03b57059f00aa02f201ea60fd646089b717f81ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374329
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92873}

commit 7090e76795b389f6c0194208921f6137117aecdd
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Mar 15 15:05:41 2024 +0100

    [turboshaft] Ship instruction selection on remaining platforms
    
    Bug: v8:12783, chromium:40272314
    Change-Id: Iccf2cd3a2075bb6a845aca7ea4f7832ed2418f68
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374762
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92872}

commit 8c809928de300373aa2e2a0427ad2f9430292f6a
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Mar 18 10:44:27 2024 +0100

    [tiering] Back-off profile guided tiering
    
    The current value seems a bit too aggressive and causes us to fill the
    queue with jobs which might not be the highest priority.
    
    Bug: chromium:41490281
    Change-Id: I6938b0e871731bc9b66576055748b899df1db261
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5371997
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92871}

commit 85bc9e47a69e90bf6d92988666c532e9a81b0bf6
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 18 11:05:22 2024 +0100

    [maglev] Inline allocation of arguments object inside inlined functions
    
    Bug: 329474405, 326091155
    Change-Id: If984c6ab448ee85cafba7f7fccd1d767174ff79b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5371987
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92870}

commit 595cbca0a38fa9476fc6832c87d881edf16de7e6
Author: Pierre Langlois <pierre.langlois@arm.com>
Date:   Fri Mar 15 18:06:43 2024 +0000

    [arm64][cfi] Add "cc" to clobber list in authentication inline asm
    
    When authenticating in inline assembly, we do a comparison to check if
    the authentication was successful. This means we write to the
    PSTATE.NZCV flags and so need to tell the compiler it cannot insert this
    assembly between a comparison and a branch.
    
    Add "cc" to the clobber list to fix this.
    
    As a quick cleanup, add a comment clarifying why LR is restored, as it's
    not obvious.
    
    Bug: v8:10026
    Change-Id: I62ad7bab72cb686cde71be9d657942c7930b86a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372731
    Auto-Submit: Pierre Langlois <pierre.langlois@arm.com>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92869}

commit 1c45dd0fb1f86ffe1de10647f894153b5251f565
Author: Milad Fa <mfarazma@redhat.com>
Date:   Sun Mar 17 21:27:46 2024 -0400

    [turboshaft] Fix optimization on big endian platforms
    
    Value needs to be merged with high bits on the
    left side on big endian.
    
    Change-Id: Ic5318c37d882fad37b42a8f4d868eaaec37f706e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374797
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92868}

commit 5f1342c20b5932c170c4c113dd4e78f6e25fdad3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Mar 18 10:36:29 2024 +0100

    [wasm][exnref] Fix broken abstract casts
    
    ref.test, ref.cast, br_on_cast, br_on_cast_fail allow arbitrary heap
    types, so they also allow exnref and noexnref.
    
    This CL also fixes the missing type checks in the js to wasm wrapper.
    
    Bug: v8:14398
    Change-Id: Ieefb9a8e99d3d7a4b175db60f55b7fa9a96c5203
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372489
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92867}

commit 3b30510a1ad42c32e97a34a15420198fca84dd16
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Mar 15 19:14:39 2024 +0100

    [wasm][fuzzer] Make all types static constexpr
    
    This allows to avoid copying them in a follow-up refactoring
    (https://crrev.com/c/5374763).
    
    R=evih@chromium.org
    
    Change-Id: I5f8ff945f36a5522522be3f99e031724dede20cf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372732
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92866}

commit 6c1c3de642264c88dad697cc034c9fdd6ba692ca
Author: V8 Autoroll <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Mar 18 02:30:09 2024 -0700

    Version 12.5.0
    
    Change-Id: I2ac0748239367ea34f22c100400f6f8c2ee4fd38
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5373495
    Reviewed-by: Lutz Vahl <vahl@chromium.org>
    Commit-Queue: Lutz Vahl <vahl@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92865}

commit ecb0fd047fbfef7a05e621c9c5a276247825b5d4
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Mar 18 10:11:06 2024 +0100

    [wasm] Update spec tests
    
    This change was generated automatically with the script
    v8/tools/wasm/update-wasm-spec-tests.sh
    
    Change-Id: Iec3371adce4939c7d278ffabb8870bf07114b4b6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5371998
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92864}

commit 654b5a9a5c56347f7e1d81cbdbf53f0f2218dd32
Author: pthier <pthier@chromium.org>
Date:   Mon Mar 18 09:17:47 2024 +0100

    [regexp][test] Enable test262 for RegExp modifiers
    
    Bug: v8:12956
    Change-Id: I575aa08239c39d324388267fc0806c3600bdd53e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372114
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92863}

commit 5dc24701432278556a9829d27c532f974643e6df
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Mar 16 19:09:29 2024 -0700

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/263ed652..0b1abd5e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8753256824909807473
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: Ic64a380e56b284019078fe48a7f207b2fd2b6533
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5376701
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92862}

commit 6f722a9861a97adf88f25133402764ed23ec57ef
Author: Shu-yu Guo <syg@chromium.org>
Date:   Fri Mar 15 11:47:33 2024 -0700

    [compiler] Support Int32Pair[Add,Sub] in verifier
    
    Bug: v8:14012
    Cq-Include-Trybots: luci.v8.try:v8_linux64_verify_csa_rel,v8_linux_verify_csa_rel
    No-Tree-Checks: true
    Change-Id: I8b3413d3f4c8b45ab2bfe554ccd0a840e574666f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374890
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92861}

commit 71b0a26f4c7543f6617ccbe479dfa60203572f0c
Author: Shu-yu Guo <syg@chromium.org>
Date:   Fri Mar 15 08:49:00 2024 -0700

    [float16array] Fix double->half conversion
    
    Double->half conversion is not equivalent to double->single->half
    conversion due to rounding of intermediate values. This CL fixes
    double->half conversion to not use single precision floats as
    intermediates.
    
    Bug: v8:14012
    Change-Id: I60aeae7d4d881d3562cba4ed500fae2200930105
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367248
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92860}

commit 13e1699a981c50e262f69a03215676ba97e8313c
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Mar 15 16:46:09 2024 +0100

    [wasm] Use WasmFuncRef for function references
    
    This CL switches function references from WasmInternalFunction to
    WasmFuncRef. This requires changes for any JS<->Wasm conversion.
    
    This is a prerequisite for moving the WasmInternalFunction to the
    trusted space.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: Ic1988952e6e36d4d6e454fd93a1e85df3cb236b0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366893
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92859}

commit a18d302cdb248c7c5acda7cd575e2c45f7e26dc4
Author: Nico Weber <thakis@chromium.org>
Date:   Fri Mar 15 09:36:03 2024 -0400

    v8/win: Use optimize_speed instead of optimize_max on Windows too
    
    No behavior change yet since both currently mean /O2 on Windows.
    But I'd like to change that.
    
    Bug: chromium:329238562
    Change-Id: I17f5e67183b59f17b17b072aa27beb8b830a9a3a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5374582
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Nico Weber <thakis@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92858}

commit 7c7a2030c68800eb22a679fd4e4eeaa193d90f2a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Mar 15 16:43:27 2024 +0100

    [wasm][liftoff] Fix missing register on memory64 64 bit atomics
    
    Fixed: 329706236
    Change-Id: Idc620ce62cb44adb9cf9a12ad519578682a0f666
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372052
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92857}

commit e215c29036082a0bf6ea705b9ef28f24069d4814
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Mar 15 12:40:36 2024 +0100

    [turbofan] Fix CHECK in ConstantNoHole
    
    Comparing NaNs works best by bit-casting them to an integer.
    
    Change-Id: I087c2943d9e7e79c69b57b3d4448afa262fb827e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366452
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92856}

commit feb6a577d594a430a871d1a86fecbd6e6bf46111
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Mar 15 10:20:28 2024 -0400

    [turboshaft][wasm] fix byte reversing for big endian platforms
    
    Change-Id: Ifdf30fc9d0b442e63ad91f86f3fe820a8e0ec5c9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5373046
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92855}

commit 6ef09918ed200d3390a4f472e461b474e4f835c2
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Mar 15 14:40:18 2024 +0100

    [turboshaft] Change some OpIndex to V<>
    
    Bug: v8:12783
    Change-Id: Idc263e5cf6cba05fa6090d1ac9614fb55c72769b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372121
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92854}

commit e87c39783d17c26a7912216a1c8b3d62c7e28c8a
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Mar 15 13:38:53 2024 +0000

    [OWNERS] Add leszeks to ENG_REVIEW_OWNERS
    
    Change-Id: Ic8cb71c9077cba9d8d90a2e2ad941ade535fd4f9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5371491
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92853}

commit 93cb22c99ca00c8bea486c38dc119f60a2c83cfc
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Mar 15 12:07:06 2024 +0100

    [wasm] WasmNull: Use static roots
    
    Bug: v8:14034
    Change-Id: I0312fe1fabff732eb1253b4636f2713ea9308636
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5371985
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92852}

commit 6d9eb2856465918334b25b05d5009cf9d7c2ed07
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Mar 15 09:35:47 2024 -0400

    [turboshaft][s390] Port InstructionSelector part 3
    
    s390x supports *(base + index + displacement), element_size isn't
    supported.
    
    Setting kMaxElementSizeLog2 =0 assures we don't use the element_size
    (aka scale). kMinOffset and kMaxOffset are set similar to x64 to make use of displacement.
    
    kNeedsUntaggedBase is set to true as we process it under the
    instruction selector similar to x64.
    
    Change-Id: Iff07e6400a6c49746340f7bbda917afd703c2185
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5368246
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92851}

commit 9e044a014766423c352b24c6955a22472a6f9412
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Mar 15 14:26:14 2024 +0100

    [turboshaft][wasm] Clean up LOOPs
    
    A few minor cosmetic changes:
    - Replace a few LOOPs with WHILE
    - Rename LOOP to BIND_LOOP to be less confusing what this actually does
    - Make ScopedVar<> initialized with a Reducer (this) to be consistent
      with Labels.
    
    Bug: v8:12783
    Change-Id: Ic1f2f56df6a34bf7cfab8f5429492917841da2b5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372844
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92850}

commit b287ab3ff1d465b00164d89b9bba4327d7964915
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Mar 15 11:32:24 2024 +0100

    [turboshaft] Improve ScopedVar<> to properly work with ConstOrV
    
    Bug: v8:12783
    Change-Id: I531605a6d8294079f5034b225fa46c2defaf435e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372647
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92849}

commit a455f14a600e680df7e464a8cf1d6ec031f114c5
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Mar 15 13:44:19 2024 +0100

    [wasm] Refactor APIs between internal and external functions
    
    Refactor the APIs for linking between internal and external functions.
    
    The main motivation is the ReplaceWrapper function in which we know that
    both the internal and the external function already exists, so there is
    no point in calling a "GetOrCreate" accessor.
    
    This change ensures that we don't accidentally create such objects while
    replaceing wrapper code, and it also allows us to unhandlify a bunch of
    accessors.
    
    Drive-by: Avoid creating a HandleScope in the common cases in
    WasmGenericWasmToJSObject.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I9bb39e2cc4b0c5a73d4d1941acc19c209c810387
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361783
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92848}

commit ab6d2d00cb29363e79d941ba0f217c137379c4f3
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Mar 13 12:49:44 2024 +0100

    [turboshaft] Drop NaN handling in ConstantOp::operator==
    
    We used to have a special case to make "op1 == op2" return true if
    both ops were NaN constants (with possibly different bit patterns).
    This special case is unnecessary for JavaScript, because we canonicalize
    JS NaNs anyway, and a spec violation for Wasm, because Wasm must
    preserve the payloads of NaN values that are being passed around.
    
    Fixed: 328209289
    Change-Id: I7a4595b72f17643d57cfd1e739d9a5409fb5bd0a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366030
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92847}

commit 58788be3f7ad4e84be1769b4061eaa66eeae46dc
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Mar 15 11:45:18 2024 +0100

    [wasm] Introduce WasmFuncRef
    
    The WasmFuncRef will be the on-heap wrapper for a WasmInternalFunction
    which will move to the trusted space.
    The WasmFuncRef will hence be stored in tables, globals, and will be
    used as the WasmGC value for function references.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: Ied997d3cbf7b16f1f8cc7a0499d130c7a20bc956
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5365461
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92846}

commit 0fbe276b5e88a9fcfa53579dc31daf6fd621c9a7
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Mar 14 18:04:08 2024 +0100

    [turboshaft][x64] Add x64 instruction selector unittest (disabled)
    
    This CL just copy-pastes Turbofan's
    instruction-selector-x64-unittest.cc without any changes beyond
    disabling it with `#if 0`.
    
    This looks like a fairly useless commit, but now we can port the
    instruction-selector-x64-unittest to Turboshaft, and reviewing
    will be much easier (because we'll see the delta from Tubofan to Turboshaft, which we wouldn't see easily if we were to port this
    file in the same CL that creates it).
    
    Bug: v8:12783
    Change-Id: I35ff05e3b47ec2259e51738a705caf90275df433
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5368860
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92845}

commit e27eb15d64e34d10a5ee7fb540c3237c543033b3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Mar 14 19:53:01 2024 +0100

    [cleanup][wasm] Decoder: Share br_on_cast* validation
    
    Bug: v8:14034
    Change-Id: Ic260ffe24570dd9d1eb52f5d191af3c9f7dfa862
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5371764
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92844}

commit 9a0d2ae30dd1e20f8959e286e591f699b7dcb363
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Mar 14 23:10:31 2024 +0100

    [cleanup][wasm][liftoff] Remove BrOn*, RefAs*, RefIs* functions
    
    These functions used to be exposed to the decoder but aren't any more.
    
    Bug: v8:14034
    Change-Id: I2582c1ab6a7a8bc490c6936a1d922e3e75dd8ba4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372448
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92843}

commit 50e10b1586bf10bbb0fe25b1f1ed4260da86166f
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Mar 15 10:29:58 2024 +0100

    [wami] mjsunit mode: Add missing comma for kExprI64Const
    
    Change-Id: Ibe03b89da1eff050ebbbc81822817239f67cc6b0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372648
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92842}

commit b22ca55e19612fc42d4f0edcd00d5dd44708e8e9
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Mar 15 09:51:24 2024 +0100

    Reland "[maglev] Fix too aggressive DCHECK in HoleyFloat64/Float64 phi untagging"
    
    This is a reland of commit e681e99b6687a2810100ab45dbfc9a9204154f0b.
    
    The only change of this reland is in the test, where the function now
    runs twice instead of once before being optimized.
    
    Original change description:
    > [maglev] Fix too aggressive DCHECK in HoleyFloat64/Float64 phi untagging
    >
    > This CL fixes a DCHECK that was too strict. Here is what's happening in the repro:
    >
    > Initially, we have 2 Tagged loop phis, n54 and n55, where n55 is the backedge input of n54:
    >
    > │││   54: φᵀ r1 (n51, n55) (compressed) → (x), 3 uses
    > │││   55: φᵀ r2 (n52, n65) (compressed) → (x), 4 uses
    >
    > n51 is a HoleyFloat64ToTagged, n52 is a Float64ToTagged, and n65 is a Float64ToTagged. Both of these Phis are in a loop that has been peeled.
    >
    > In principle, we shouldn't be able to untag n54 because its backedge is a Tagged phi which will only be untagged later. But, since the loop has been peeled, there is a special case in phi representation selection to ignore the backedge, speculatively assuming that it will have the same representation as the forward edge (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=121-129;drc=4d88fa58dce74d3e20d258bb2183d534bd4fc97a).
    > (see footnote 1)
    >
    > So, we decide to untag n54 to HoleyFloat64 (because its first input (the only one we're considering) has HoleyFloat64 representation), and insert a conversion node on its backedge (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=520-530;drc=54b5f6dcc0e51751aec186771b4012ef663b538b): a CheckedNumberOrOddballToFloat64.
    >
    > Later, we decide to untag n55 as well, to Float64 this time (because both its inputs have Float64 representation).
    >
    > Then, we keep processing the graph in order, and eventually reach the end of the loop and in particular the CheckedNumberOrOddballToFloat64 node that we inserted when untagging n54. Given that the input of this CheckedNumberOrOddballToFloat64 is n55, we need to update this conversion since its input is a Phi that has been untagged (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.h;l=89-101;drc=d771d0d479be93a6a9e815c36dd1c27dd1b9c1e4). In essence, instead of CheckedNumberOrOddballToFloat64, it should become Checked<WhateverTheNewRepresentationOfItsInputIs>ToFloat64. UpdateUntaggingOfPhi is thus called, where from_repr (= the representation of the input of the conversion (which is n55)) is Float64 and to_repr (= the representation of the output of the conversion = the repr of n54) is HoleyFloat64. We eventually reach this point https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=716-717;drc=54b5f6dcc0e51751aec186771b4012ef663b538b, which decides that the right conversion to convert from Float64 to HoleyFloat64 is Identity (= no conversion is needed) (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=381;drc=54b5f6dcc0e51751aec186771b4012ef663b538b). So, we replace the CheckedNumberOrOddballToFloat64 with an Identity (where "replace" = "override in place").
    >
    > Then, we reach the JumpLoop that ends the loop, and call FixLoopPhisBackedge, whose job is to remove the Identity inputs of LoopPhis, and trigger this DCHECK https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=982-983;drc=54b5f6dcc0e51751aec186771b4012ef663b538b because the input of a HoleyFloat64 phi doesn't have HoleyFloat64 but Float64. In practice, this is perfectly safe, since Float64 is a subset of HoleyFloat64.
    >
    >
    > footnote 1: for completeness, note that there is another mechanism to untag Phis whose input is a loop phis that hasn't been untagged yet (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=52-56;drc=54b5f6dcc0e51751aec186771b4012ef663b538b), but given that it can't deal with mutually recursive Phis, having this speculative untagging of loop phis seems still useful.
    >
    >
    > Fixed: 329161136
    > Change-Id: Ie61cef28ac4b2cc29d66bdb62cde607acbac73f7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366885
    > Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92824}
    
    Fixed: 329161136
    Change-Id: I76596daab754ea03eceac976546f68c75612f89f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372051
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92841}

commit db4358cf7ccdddb825b7ad0f8e03962914e10079
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Fri Mar 15 16:43:00 2024 +0800

    [turboshaft] Optimize js object initialization during store store
    elimination phase.
    
    When v8 create a new js object, it will initialize it's in object
    fields to some constant value after allocation, like `undefined`.
    
    When pointer compression is enabled, they are continues 32-bits stores,
    and the store values are usually constants (heap object). This CL will
    try to merge 2 continues 32-bits stores into a 64-bits one.
    
    Take x64 platform as an example, the jit code which initialze object
    generated by turbofan(turboshaft) may like this:
    ```
    movl [rcx+0x3],0x6f5
    movl [rcx+0x7],0x6f5
    movl [rcx+0xb],0x61
    movl [rcx+0xf],0x61
    movl [rcx+0x13],0x61
    movl [rcx+0x17],0x61
    ```
    This CL optimizes such pattern to:
    ```
    REX.W movq r8,0x6f5000006f5
    REX.W movq [rcx+0x3],r8
    REX.W movq r9,0x6100000061
    REX.W movq [rcx+0xb],r9
    REX.W movq [rcx+0x13],r9
    ```
    Obviously the memory access number is reduced from 6 to 3.
    
    We observe about 10% improvement from followed micro-bench
    ```
    function foo(){
      const num=1000000;
      let ret;
      for(let i=0;i<num;++i){
        let obj = {};
        ret = obj;
      }
      return ret;
    }
    ```
    
    Change-Id: Ia53594600fc7a18438288cccc63b4397b037ec79
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5363942
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92840}

commit 258048adcd4f6820f35f404e456882ff8adbf68e
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Mar 15 08:43:38 2024 +0000

    [sandbox] Use SafeEquals in StubCache::Set
    
    Since we're comparing a runtime-generated Code object in trusted space
    with a builtin Code object in the read-only space, we need to use full
    pointer comparison instead of tagged comparison.
    
    Bug: v8:14672
    Change-Id: I01554110a0acfb6f9d45ddfad0e786ad0d32edad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372451
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92839}

commit 7d34b8649dbcab6aaabff3a5f8a3c8a6f54ac662
Author: pthier <pthier@chromium.org>
Date:   Thu Mar 14 13:42:02 2024 +0100

    [regexp] Account for modifiers when filling BMInfo
    
    Filling boyer-moore info is a separate (partial) graph traversal that
    didn't consider RegExp modifiers so far. That would lead to false
    negatives for some optimized, unanchored patterns.
    
    Bug: v8:12956
    Change-Id: I4f8d2b8dca1c2ce518d86d132788f11de84904fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366890
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92838}

commit ded0914f2c2d237db7705a4a1faccf3ec230f876
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Mar 15 07:11:45 2024 +0000

    Revert "Switch msan testers to Focal"
    
    This reverts commit f899839e9a95d2985cfffffbb6a840e5cb8e65e3.
    
    Reason for revert: Blocking bug is mitigated.
    
    Original change's description:
    > Switch msan testers to Focal
    >
    > No-try: true
    > Bug: 329036740
    > Change-Id: I29848e79f98221af6acb2289d8045e6a7cc6c17c
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366646
    > Commit-Queue: Liviu Rau <liviurau@google.com>
    > Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92808}
    
    Bug: 329036740
    Change-Id: I2e3f6f50397ac96a5c9212c1834dc271d8e519a3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372466
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92837}

commit 0734b243935a2212a031cbb06171fdab58d27362
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Mar 15 14:44:54 2024 +0800

    [riscv][sandbox] Tag entries in the TrustedPointerTable
    
    Port commit c68f02dc2efcc19bc1be11c10e229adf2ebbc5fa
    Bug: chromium:40069826
    
    Port commit 897e1a3bbfe488b9d911a2bf9a80802c034b2992
    [wasm] Move WasmApiFunctionRef to trusted space
    Bug: v8:14564
    
    Change-Id: Iaff91921ba78311c5d82e4583258fdbf3d1322d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5373845
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92836}

commit a824782d8338aa07c20563ef9067360c134441d6
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Mar 14 17:04:13 2024 +0000

    [wasm] Fix missing smi untagging in wasm wrapper
    
    R=ahaas@chromium.org
    
    Fixed: v8:14668
    Change-Id: I0073944aab0cc9ce6161ec90f9d48696107d9313
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5368859
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92835}

commit c8afa0fe56b59b25abdebcf61ee0b7b7644a2264
Author: Eva Herencsarova <evih@chromium.org>
Date:   Thu Mar 14 19:09:24 2024 +0100

    [wasm-compile-fuzzer] Add new options in WasmModuleGenerationOptions
    (PART 5)
    
    This CL introduces new options kGenerateAll and kGenerateWasmGC.
    The kGenerateWasmGC is not used yet at all.
    
    This CL also changes the runtime-test-wasm to generate all expressions
    when generating a random Wasm module
    
    Change-Id: Ic7d3e5523bad75b41bb23e424e86d4b18405075c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5369913
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92834}

commit c4739f3974651effe5a1cc2d85b71db2cf59d88d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Mar 14 19:11:44 2024 +0100

    [cleanup][wasm] Drop 'generic' suffix from br_on_cast
    
    Bug: v8:14034
    Change-Id: I41880b7d1d8b5100ce0829f249b1c7a346876b85
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366894
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92833}

commit 0945c5bddb64d3cad3615aee8f4dfd8c7287e9b3
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Mar 14 15:31:35 2024 +0100

    [wasm][turboshaft] Only dereference valid OpIndex
    
    With the combination of exceptions and imported strings, we can get to
    a state where the decoder thinks we are in reachable code and calls
    the interface functions, but the interface knows we are not. In this
    case, an invalid OpIndex can be passed as {index} to {BoundsCheckMem}.
    
    Bug: chromium:329464129
    Change-Id: Id6676af75ac60c055bd9d97c72c2cccd58e92c4f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366888
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92832}

commit 4b094342a009350bada546ba87b40dc66abb9660
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Mar 14 08:58:58 2024 +0100

    [turboshaft] Implement WHILE, BREAK and CONTINUE assembler macros
    
    Bug: v8:12783
    Change-Id: Ida8e42db78f6f79adfd3ed952671b2b5a9664716
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361880
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92831}

commit 728bb4a20d6a47ff1363c90e7024d0e861d55f50
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Mar 14 12:12:10 2024 +0100

    [deoptimizer] Minor cleanups
    
    Bug: v8:14667
    Change-Id: I07078d9ef887154ba9542930ea132264a5f36788
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5372184
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92830}

commit 32247a0b361f57c23f2543c11ae7790da65a5ca6
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Mar 13 15:37:37 2024 -0400

    S390: fix pntr compressed builds
    
    Port 897e1a3bbfe488b9d911a2bf9a80802c034b2992
    
    Change-Id: Id03113e7522033047fe4b8b92ab36810a34314e4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5369683
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92829}

commit e681e99b6687a2810100ab45dbfc9a9204154f0b
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Mar 14 12:42:22 2024 +0000

    Revert "[maglev] Fix too aggressive DCHECK in HoleyFloat64/Float64 phi untagging"
    
    This reverts commit 94824a730db0a46780d6389c04333309ff75f897.
    
    Reason for revert: https://ci.chromium.org/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20single%20generation/14055?
    
    Original change's description:
    > [maglev] Fix too aggressive DCHECK in HoleyFloat64/Float64 phi untagging
    >
    > This CL fixes a DCHECK that was too strict. Here is what's happening in the repro:
    >
    > Initially, we have 2 Tagged loop phis, n54 and n55, where n55 is the backedge input of n54:
    >
    > │││   54: φᵀ r1 (n51, n55) (compressed) → (x), 3 uses
    > │││   55: φᵀ r2 (n52, n65) (compressed) → (x), 4 uses
    >
    > n51 is a HoleyFloat64ToTagged, n52 is a Float64ToTagged, and n65 is a Float64ToTagged. Both of these Phis are in a loop that has been peeled.
    >
    > In principle, we shouldn't be able to untag n54 because its backedge is a Tagged phi which will only be untagged later. But, since the loop has been peeled, there is a special case in phi representation selection to ignore the backedge, speculatively assuming that it will have the same representation as the forward edge (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=121-129;drc=4d88fa58dce74d3e20d258bb2183d534bd4fc97a).
    > (see footnote 1)
    >
    > So, we decide to untag n54 to HoleyFloat64 (because its first input (the only one we're considering) has HoleyFloat64 representation), and insert a conversion node on its backedge (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=520-530;drc=54b5f6dcc0e51751aec186771b4012ef663b538b): a CheckedNumberOrOddballToFloat64.
    >
    > Later, we decide to untag n55 as well, to Float64 this time (because both its inputs have Float64 representation).
    >
    > Then, we keep processing the graph in order, and eventually reach the end of the loop and in particular the CheckedNumberOrOddballToFloat64 node that we inserted when untagging n54. Given that the input of this CheckedNumberOrOddballToFloat64 is n55, we need to update this conversion since its input is a Phi that has been untagged (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.h;l=89-101;drc=d771d0d479be93a6a9e815c36dd1c27dd1b9c1e4). In essence, instead of CheckedNumberOrOddballToFloat64, it should become Checked<WhateverTheNewRepresentationOfItsInputIs>ToFloat64. UpdateUntaggingOfPhi is thus called, where from_repr (= the representation of the input of the conversion (which is n55)) is Float64 and to_repr (= the representation of the output of the conversion = the repr of n54) is HoleyFloat64. We eventually reach this point https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=716-717;drc=54b5f6dcc0e51751aec186771b4012ef663b538b, which decides that the right conversion to convert from Float64 to HoleyFloat64 is Identity (= no conversion is needed) (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=381;drc=54b5f6dcc0e51751aec186771b4012ef663b538b). So, we replace the CheckedNumberOrOddballToFloat64 with an Identity (where "replace" = "override in place").
    >
    > Then, we reach the JumpLoop that ends the loop, and call FixLoopPhisBackedge, whose job is to remove the Identity inputs of LoopPhis, and trigger this DCHECK https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=982-983;drc=54b5f6dcc0e51751aec186771b4012ef663b538b because the input of a HoleyFloat64 phi doesn't have HoleyFloat64 but Float64. In practice, this is perfectly safe, since Float64 is a subset of HoleyFloat64.
    >
    >
    > footnote 1: for completeness, note that there is another mechanism to untag Phis whose input is a loop phis that hasn't been untagged yet (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=52-56;drc=54b5f6dcc0e51751aec186771b4012ef663b538b), but given that it can't deal with mutually recursive Phis, having this speculative untagging of loop phis seems still useful.
    >
    >
    > Fixed: 329161136
    > Change-Id: Ie61cef28ac4b2cc29d66bdb62cde607acbac73f7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366885
    > Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92824}
    
    Change-Id: I50ae186dac9f0648779de5e3eeb9d95f567094a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366891
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Owners-Override: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92828}

commit e46adfcc0a9919a804cec4a1282111771843baec
Author: Marja Hölttä <marja@chromium.org>
Date:   Thu Mar 14 10:16:34 2024 +0100

    [cleanup] Remove misleading comment
    
    As of https://chromium-review.googlesource.com/c/v8/v8/+/3256692/4/src/codegen/compiler.cc ,
    the parser is not kept alive any more.
    
    Change-Id: Ib185af44d3b75ba268abc6f5dc876ee008733dfa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366459
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92827}

commit 395a61a5bfe3d962fe1e7f427da1ad82928e45a1
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Mar 14 12:19:59 2024 +0100

    [turboshaft] Maglev-to-ts: support for-in loops
    
    Bug: v8:12783, v8:14581
    Change-Id: I62bdb7e86e6d8b4b5dd831e04abbdac38f094138
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5342758
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92826}

commit c08c465aa5c54e5f6ef17758594c383c3118faa3
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Mar 14 10:20:31 2024 +0000

    [wasm] Enable the wasm-to-js turboshaft wrapper behind a flag
    
    Make --turboshaft-wasm-wrapper activate the turboshaft wasm-to-js
    wrapper, which was accidentally commented out. This is still off by
    default.
    
    R=ahaas@chromium.org
    
    Bug: v8:14108
    Change-Id: Ib4bc3a3a4bb9865ded9defa61537622d78bb4d62
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5342760
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92825}

commit 94824a730db0a46780d6389c04333309ff75f897
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Mar 14 10:21:43 2024 +0100

    [maglev] Fix too aggressive DCHECK in HoleyFloat64/Float64 phi untagging
    
    This CL fixes a DCHECK that was too strict. Here is what's happening in the repro:
    
    Initially, we have 2 Tagged loop phis, n54 and n55, where n55 is the backedge input of n54:
    
    │││   54: φᵀ r1 (n51, n55) (compressed) → (x), 3 uses
    │││   55: φᵀ r2 (n52, n65) (compressed) → (x), 4 uses
    
    n51 is a HoleyFloat64ToTagged, n52 is a Float64ToTagged, and n65 is a Float64ToTagged. Both of these Phis are in a loop that has been peeled.
    
    In principle, we shouldn't be able to untag n54 because its backedge is a Tagged phi which will only be untagged later. But, since the loop has been peeled, there is a special case in phi representation selection to ignore the backedge, speculatively assuming that it will have the same representation as the forward edge (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=121-129;drc=4d88fa58dce74d3e20d258bb2183d534bd4fc97a).
    (see footnote 1)
    
    So, we decide to untag n54 to HoleyFloat64 (because its first input (the only one we're considering) has HoleyFloat64 representation), and insert a conversion node on its backedge (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=520-530;drc=54b5f6dcc0e51751aec186771b4012ef663b538b): a CheckedNumberOrOddballToFloat64.
    
    Later, we decide to untag n55 as well, to Float64 this time (because both its inputs have Float64 representation).
    
    Then, we keep processing the graph in order, and eventually reach the end of the loop and in particular the CheckedNumberOrOddballToFloat64 node that we inserted when untagging n54. Given that the input of this CheckedNumberOrOddballToFloat64 is n55, we need to update this conversion since its input is a Phi that has been untagged (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.h;l=89-101;drc=d771d0d479be93a6a9e815c36dd1c27dd1b9c1e4). In essence, instead of CheckedNumberOrOddballToFloat64, it should become Checked<WhateverTheNewRepresentationOfItsInputIs>ToFloat64. UpdateUntaggingOfPhi is thus called, where from_repr (= the representation of the input of the conversion (which is n55)) is Float64 and to_repr (= the representation of the output of the conversion = the repr of n54) is HoleyFloat64. We eventually reach this point https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=716-717;drc=54b5f6dcc0e51751aec186771b4012ef663b538b, which decides that the right conversion to convert from Float64 to HoleyFloat64 is Identity (= no conversion is needed) (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=381;drc=54b5f6dcc0e51751aec186771b4012ef663b538b). So, we replace the CheckedNumberOrOddballToFloat64 with an Identity (where "replace" = "override in place").
    
    Then, we reach the JumpLoop that ends the loop, and call FixLoopPhisBackedge, whose job is to remove the Identity inputs of LoopPhis, and trigger this DCHECK https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=982-983;drc=54b5f6dcc0e51751aec186771b4012ef663b538b because the input of a HoleyFloat64 phi doesn't have HoleyFloat64 but Float64. In practice, this is perfectly safe, since Float64 is a subset of HoleyFloat64.
    
    
    footnote 1: for completeness, note that there is another mechanism to untag Phis whose input is a loop phis that hasn't been untagged yet (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/maglev/maglev-phi-representation-selector.cc;l=52-56;drc=54b5f6dcc0e51751aec186771b4012ef663b538b), but given that it can't deal with mutually recursive Phis, having this speculative untagging of loop phis seems still useful.
    
    
    Fixed: 329161136
    Change-Id: Ie61cef28ac4b2cc29d66bdb62cde607acbac73f7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366885
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92824}

commit 162af01028c070f7498d6f69afd370740838a7a5
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Mar 14 10:51:05 2024 +0100

    [wasm][fuzzer] Catch OOMs with NearHeapLimitCallback
    
    and treat them like exceeding "max steps".
    This is meant to handle cases where randomly-generated functions
    allocate many live heap objects, which would previously crash
    the fuzzer process when running into the heap limit.
    
    Fixed: 328146362
    Change-Id: Id998947a57c94c5ad2e3a978aa1cd1015ab78f59
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366886
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92823}

commit 963852c7847457221b039100d8d181a045fa8518
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Thu Mar 14 15:27:40 2024 +0800

    [mips64][turboshaft] Port InstructionSelector part 3
    
    Add support for a bunch of comparisons.
    
    Change-Id: Ib19d7d27291ead59885e4d14ee88332aaca9f2ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5371821
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92822}

commit a0ee8d65eadb6a9a3ad391b7346db0f9f443adab
Author: pthier <pthier@chromium.org>
Date:   Wed Mar 13 11:50:48 2024 +0100

    [regexp] Harden experimental engine against sandbox escapes
    
    - Add SBXCHECKs when accessing data structures outside the V8 sandbox
      with indices inside the sandbox.
    - Additionally change DCHECKs to ensure the experimental engine is
      enabled via runtime flag to CHECKs. This should prevent executing
      any RegExp with the experimental engine in-the-wild, since the
      experimental engine is likely lacking fuzzer coverage.
    
    Fixed: 329171423
    Bug: v8:14656
    Change-Id: I70da0ca223630fa5eaf3a7d5be21f1f1c166fa57
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366648
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92821}

commit 30defdfab42d6340984a87aec431bd190cb213ed
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Mar 13 12:27:52 2024 +0100

    [wasm] Remove tier-up of js-to-js wrapper
    
    The js-to-js wrapper gets used when a JS function gets wrapped with the
    WebAssembly.Function constructor and then called from JavaScript. This
    scenario is, however, unlikely and most likely not performance critical.
    Therefore, this CL removes the tier-up of the js-to-js wrapper. The CL
    removes the code that triggers tier-up, and it removes the TurboFan code
    to compile an optimized js-to-js wrapper.
    
    R=thibaudm@chromium.org
    
    Bug: 328918912
    Change-Id: I747c6a17799903a3d00a6b3d49f1279abf6f98b8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366645
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92820}

commit 38554cc99f7a5c19e3a26a6d8574d9dc632a8691
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Mar 13 15:17:25 2024 +0100

    [maglev] Support arguments object in inlined function
    
    We actually already support them via runtime function calls
    We only need to enable them.
    
    Drive-by: if the number of rest parameters is zero (empty
    fixed array), we could fail GetWriteBarrierMode.
    So instead, we return the rest object earlier.
    
    Bug: v8:7700
    Change-Id: Ib07c8b91cf9c0bc668358de47b1b9b74adb715ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366455
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92819}

commit de2a08d89590140767dca58c4d38e5c049da7c22
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Mar 13 15:08:34 2024 +0100

    [fuzztest] Add json fuzzer
    
    This adds an exemplary fuzz test for json, inspired by the existing
    libfuzzer json fuzzer.
    
    The inputs are structurally aware and focus on valid json inputs,
    generated with the help of jsoncpp (while the existing libfuzzer
    implementation would work on arbitrary strings mostly leading to
    parse errors). In the future, we could also add another fuzz test
    with arbitrary inputs.
    
    Domains for FuzzTest are constructed with utilities from:
    https://github.com/google/fuzztest/blob/main/doc/domains-reference.md
    
    Bug: 40941204
    Change-Id: I76c7337ffb1a5a530dedcfba092e0d9260cdec66
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367021
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92818}

commit cc228d780efd329d999e43bd2ff8bccbf36eee27
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Mar 12 16:38:36 2024 +0100

    [arm64] Fix veneers for large code objects
    
    Consider the following scenario:
      [previous code]
      b.eq label     # instruction 0
      [20KB of code]
      tbz label      # instruction 1
      [20KB of code]
      tbz label      # instruction 2
      [12KB of code]
      <<< position 1
      [around 960KB of code]
      <<< position 2
      [more code]
      label:
    When we reach "position 1", instruction #1 is reaching the end of its
    encodable jump distance, so we emit a veneer for it. We would like to
    rewire the instruction chain so that instruction #2 points at #0, but
    that is also out of encodable range, so we make instruction #0 branch
    to the veneer as well, and mark instruction #2 as the end of the chain
    of linked branch instructions referring to the label.
    However, instruction #0 is still in the list of unresolved branches,
    from which we must remove it; otherwise when we reach position 2,
    where instruction #0's encodable jump distance ends, we will try to
    emit a veneer for it, which involves trying to find it by walking the
    label's chain of linked instructions -- where we won't find it, because
    that chain now ends at instruction #2.
    
    This bug was flushed out by --turboshaft-wasm, but is neither Wasm nor
    Turboshaft specific (e.g. in a local repro that is too slow to check
    in as a regression test, I can trigger it with Turbofan as well).
    
    Fixed: 328738218
    Change-Id: Ic98eaddbecf52bce72e25ea256e1f00d33a29b66
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367100
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92817}

commit 78efe86c8a87994da34afc4bf37dc444c58587e5
Author: Choongwoo Han <choongwoo.han@microsoft.com>
Date:   Mon Mar 11 11:24:19 2024 -0700

    [osr] Avoid baseline compile in the middle of OSR
    
    In InterpreterAssembler::OnStackReplacement, code is checked whether
    it's marked for deoptimization before calling Budget Interrupt. And,
    the interrupt can trigger GC and deoptimize the OSR code when running
    baseline compile, which will lead to jumping to the deoptimized OSR
    code. Thus, avoid baseline compilation if the function has optimized OSR
    code.
    
    Bug: chromium:328474015
    Change-Id: I863ec4efac73b56cda20c145ae472d64bcf25085
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5362494
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92816}

commit 69f4d2edf746cd9a029303f82ee0c43627ca8bff
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Mar 13 14:32:45 2024 +0000

    Revert "[ycm] Deduplicate compilation flags"
    
    This reverts commit 094a9fa79416c21630bc65c7af04bd96b8ece5f8.
    
    Reason for revert: The actual problem are arguments that need to appear in pairs, like -Xclang, but we only pass one of them.
    
    
    Original change's description:
    > [ycm] Deduplicate compilation flags
    >
    > Duplicate flags show up as diagnostics errors in ycm.
    >
    > Change-Id: Ifc29e09df6cf288318f8e9d8c27dcdbaac4c7615
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366641
    > Reviewed-by: Clemens Backes <clemensb@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92801}
    
    Change-Id: Ib04dcca2b0d959918b1aae56fd915d07d68ba97c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5369796
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92815}

commit 69c60d5cd05353c259f82f5866a126860f5e7178
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Mar 13 15:29:45 2024 +0100

    [maglev] Support inlining allocation of mapped arguments
    
    Bug: 326091155
    Change-Id: I82c856938830f7510e9f5b6d8684842a70b41f11
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366454
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92814}

commit 560d9a8634721b9e380302e3e32989e063b54600
Author: Eva Herencsarova <evih@chromium.org>
Date:   Wed Mar 13 15:06:40 2024 +0100

    [wasm-compile-fuzzer] Remove condition checking for empty generated
    module (PART 4)
    
    The generated module can be empty only if SIMD expressions are generated on hardware that does not support it.
    
    This is the continuation of the the fuzzer modularisation CL sequence:
    PART 1: https://crrev.com/c/5353507
    PART 2: https://crrev.com/c/5355860
    PART 3: https://crrev.com/c/5366202
    
    
     (https://crbug.com/v8/14639).
    
    Note: there is a TODO to disable SIMD expressions in these cases
    Change-Id: I3484eabec6cf8d80cd08040c87538653795686e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367020
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92813}

commit ab43aee368d84d3947351a8bc67830b7b1ba4197
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Mar 13 14:15:52 2024 +0100

    Replace all uses of V8_FALLTHROUGH
    
    Change-Id: Ic2157d51e942e31cf80e6a9ff981d49fd8e23f40
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5362053
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92812}

commit 6a19d446e48d4b9b3fc341251fcb68169e7d67e1
Author: Samuel Parker <sam.parker@arm.com>
Date:   Wed Mar 13 13:33:11 2024 +0000

    [compiler][arm64] Try to reduce 32x4 shuffle movs
    
    For a single source, check whether it would be profitable to use a
    dup first before the remaining movs.
    
    Change-Id: I0a2c4d1acb19ed0e86a74e93a1cc504a97bc8301
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366031
    Commit-Queue: Sam Parker-Haynes <sam.parker@arm.com>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Martyn Capewell <martyn.capewell@arm.com>
    Cr-Commit-Position: refs/heads/main@{#92811}

commit 9bb0142d5fe127a6f0b8c9ac4d62b6b54c86358b
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Mar 13 13:54:55 2024 +0100

    [heap] Account for trusted_lo_space in old gen size and capacity
    
    Change-Id: I6f752989bc030c2c3f8851878a67f0b8b691c15b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366033
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92810}

commit ebf059d7fa88b06c9580a80ca767439bd6ee3345
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Mar 13 12:35:16 2024 +0100

    [maglev] Enable escape analysis
    
    Bug: 326091155
    Change-Id: I876e0ff6f0f264f58a9bd849c9e25f8a464aad27
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366029
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92809}

commit f899839e9a95d2985cfffffbb6a840e5cb8e65e3
Author: Liviu Rau <liviurau@chromium.org>
Date:   Wed Mar 13 10:42:46 2024 +0100

    Switch msan testers to Focal
    
    No-try: true
    Bug: 329036740
    Change-Id: I29848e79f98221af6acb2289d8045e6a7cc6c17c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366646
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92808}

commit 2aca2b620b03e1a5bcc4521176b41b465fe48fca
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Mar 12 17:00:31 2024 +0100

    [wasm][turboshaft] Optimize statically-in-bounds memory offsets
    
    This is a port of the Turbofan implementation.
    
    Bug: v8:14108
    Change-Id: Ida7db02b0ee83b3e5c4a2906a70f307dd9902571
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367024
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92807}

commit 73254f40a24cb710d1beabd1cf1f5bcc1ff98653
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Mar 13 10:16:58 2024 +0100

    [codegen] Add dmercadier@ to OWNERS
    
    Drive-by: cleanup existing owners.
    Change-Id: Ia9cae3e4aca1632b9c3cfadbdad607e3ee6fcaf9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366644
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92806}

commit ab542a8ab70cf1e2b9befb441b8d97017e2a79bc
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Mar 13 10:05:46 2024 +0100

    [maglev] Fix sandbox vialotion when inlining functions
    
    ... with a corrupted formal parameter count.
    
    Fixed: 329214797
    Change-Id: I56d93528663ffd55e8dc1ad6441105ed23eb95e3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367281
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92805}

commit f41ff4c714b4eac511aea1d125ecd38fd83c9f12
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Mar 13 11:42:19 2024 +0800

    [loong64][mips64][wasm] Move WasmApiFunctionRef to trusted space
    
    Port commit 897e1a3bbfe488b9d911a2bf9a80802c034b2992
    
    Change-Id: I108e28495a29a5e97c0c9dc108fc7c543ce335c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5369096
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92804}

commit e3f157d4b959c50b0dbabbb22294235fe41b3619
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Mar 13 09:32:46 2024 +0100

    [tiering] Fix profile guided tiering flag in the case of missing fbv
    
    The test for profile_guided_optimization_for_empty_feedback_vector did
    not consider the case where a function does not have a feedback vector
    attached.
    
    Bug: chromium:41490281
    Change-Id: I7b8c28007445c182bb73cbdd499b02ccebf677bb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366642
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92803}

commit f6de8774fca3e9b27cdc14c22b282760936d6714
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Mar 13 08:43:07 2024 +0000

    [sandbox] Handle invalid enum value in DateTimeStyleAsString
    
    Without an explicit UNREACHABLE() at the end, the compiler generates
    invalid code for the switch in case of an invalid enum value, resulting
    in a SIGILL. This is similar to issue 326086002.
    
    Bug: chromium:329239272
    Change-Id: I5845a5b428402fe097ee50ca082b3cb50c6ea3a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366643
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92802}

commit 094a9fa79416c21630bc65c7af04bd96b8ece5f8
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Mar 13 09:15:04 2024 +0100

    [ycm] Deduplicate compilation flags
    
    Duplicate flags show up as diagnostics errors in ycm.
    
    Change-Id: Ifc29e09df6cf288318f8e9d8c27dcdbaac4c7615
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366641
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92801}

commit 6bb41e1b224c1473041432b4f5a1fe5f6ca1fc62
Author: jiepan <jie.pan@intel.com>
Date:   Wed Mar 13 10:51:34 2024 +0800

    [revec][wasm][turboshaft] Support LoadTransform in turboshaft
    
    Bug: v8:12716
    Change-Id: I625a5427fdcf3f847242e39ba0d02dfe98a7bc66
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5342947
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jie Pan <jie.pan@intel.com>
    Cr-Commit-Position: refs/heads/main@{#92800}

commit fb2ceded1eccc2fb2b16b9cb0c5b2df47cb07d35
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Mar 12 16:51:46 2024 +0100

    [cleanup][wasm] Add inlining positions to NativeModule::AddCode
    
    AddCode() is only called for wrappers, so the inlining_positions
    is always empty. Still, as all use the WasmCompilationResult, it's just
    as easy to pass through the vector from the compilation result as to
    create a dummy vector.
    
    Change-Id: I3288c4239d3d9788664434b92186349520845b07
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367023
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92799}

commit 25d1f16cbd3e9027ac67305c28890638ac6168a7
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Mar 12 20:06:03 2024 +0100

    [test] Skip failing tests on Android
    
    The problem is tracked and the failures obscure the builder.
    
    No-Try: true
    Bug: v8:14545
    Change-Id: I5dce1bad231cc9e62fc656a1b089e935dac5a528
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367102
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92798}

commit d76fd9ca2f183acf40c36df78f52762558b7ee02
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Mar 13 15:32:27 2024 +0800

    [riscv] Handle unordered comparison
    
    Port commit 897e1a3bbfe488b9d911a2bf9a80802c034b2992
    [wasm] Move WasmApiFunctionRef to trusted space
    Bug: v8:14564
    
    Change-Id: Ibdd1c74f631145ab8a3571d4ff5ed4425303ad59
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5364233
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92797}

commit c9f774573ff5686946f0ac5b36363f242f65430c
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Mar 13 11:44:53 2024 +0800

    [loong64][sandbox] Tag entries in the TrustedPointerTable
    
    Port commit c68f02dc2efcc19bc1be11c10e229adf2ebbc5fa
    
    Change-Id: I5a26d985d8f082c06d74681be096d4f80a5ca435
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5369530
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92796}

commit 45bb62fbe697acec5407b874e0b1c254da2511fe
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Mar 12 21:19:29 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/8a71ad6..bca3969
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/9491ff1..68fce43
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/8180c27..97c002a
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/e13a42f..1ed379e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8753611663027814657
    
    Change-Id: I6f154add807f454c07febf3342b911ff8b0fa2ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5365858
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92795}

commit d349a74d48b2f0c90536b5a7cd8436d601dbd26b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Mar 12 19:49:08 2024 +0100

    [compiler][wasm] ISel: Fix missing effect for StoreLane instruction
    
    This CL also adds the StorePair and StoreIndirectPointer instruction to
    the increment_effect_level_for_node routine.
    
    Fixed: 329032153
    Change-Id: If386548f7cd8b5e2be4d5b8c6f4574e11b6e717e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367502
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92794}

commit 3264b2fb5dfdaac25f63dd7b114a97fd7f16ea1d
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Mar 12 09:12:43 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/29a8709..8a71ad6
    
    Rolling buildtools/reclient: re_client_version:0.132.0.1a8ff94-gomaip..re_client_version:0.134.1.2c9285b-gomaip
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6ec5a9a..fe6a359
    
    Rolling third_party/siso: git_revision:8632c71c8cadd9cb9ea4d43e6b30eeae4dffcd12..git_revision:110b1d8c0528de153cef259f09f3dc5ee627e6cb
    
    Roll created at https://cr-buildbucket.appspot.com/build/8753656960932051201
    
    Change-Id: I543e1ed0f21a6e720dd8f31673f856f47f48c2ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5365765
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92793}

commit f83b4e52fed49cf63b79bca89a95ccba40b4d361
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Mar 12 11:30:27 2024 -0400

    PPC/s390: [wasm] Move WasmApiFunctionRef to trusted space
    
    Port 897e1a3bbfe488b9d911a2bf9a80802c034b2992
    
    Original Commit Message:
    
        This makes the WasmApiFunctionRef a trusted object, which allows to
        reference either the WasmApiFunctionRef or the WasmTrustedInstanceData
        directly as the "ref" stored in the WasmDispatchTable. We were storing a
        WasmInstanceObject (or WasmApiFunctionRef) there before, which required
        an additional load for the trusted data from the instance on every
        indirect call to a Wasm function.
    
    R=clemensb@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I2f7f0fa82c139b71039e224fa78bc24bc0711639
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5365844
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92792}

commit 00c3c4a0d21e435f219d6038aa5ed9d1804ce0d4
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Mar 12 16:35:39 2024 +0100

    [wasm] Introduce flag --wasm-eager-tier-up-function
    
    Making it easier to test compiler issues that are triggered by a
    particular function.
    
    Change-Id: I974be8f1046513ba6ca9a2b84e4be877e2dab46a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5367022
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92791}

commit 3270515849b3652bc3ae58bdbe00b9612ad956c6
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Mar 12 15:53:53 2024 +0100

    [maglev] Consider HoleNaNs when create deopt info
    
    ... for holey double fixed arrays.
    
    Fixed: 328846303
    Bug: 326091155
    Change-Id: I8ab16fd190f1e680f77cbba4a30a684a0aecdcc8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366200
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92790}

commit 73c469965befba832fb73091bea9b3ffa9e3f1e5
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Mar 12 15:50:25 2024 +0100

    [wasm-compile-fuzzer][simd] Introduce SIMD fuzzer (PART 3)
    
    This is the continuation of the the fuzzer modularisation CL sequence:
    PART 1: https://crrev.com/c/5353507
    PART 2: https://crrev.com/c/5355860
    
    This change adds a new fuzzer that may generate SIMD expressions in the
    module. The Wasm compile fuzzer generates non-simd expressions only.
    
    Change-Id: I3ceb8c81877ead6f18a414a945f93e3070a107d0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5366202
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92789}

commit 564b3a8c611c2ffded448af4fbca842f83e68161
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Mar 11 08:55:57 2024 -0400

    [turboshaft][s390] Port InstructionSelector part 2
    
    Change-Id: If34ebb577292ae25d1f9182681f8af4220b89af4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5359835
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92788}

commit 60ebb1a5b25ac5dd913797aeb904e199ca1fd2f9
Author: Hao Xu <hao.a.xu@intel.com>
Date:   Mon Mar 11 16:05:22 2024 +0800

    [interpreter] Introduce get enumerated keyed property bytecode
    
    Add this bytecode to Ignition/Sparkplug.
    
    Bug: v8:14245
    Change-Id: Ibdd76ee5128f843933e58fa96ee7466c31171348
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4750231
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92787}

commit 11db6ccd6fea9f5a1eb0d876f388324704213f1a
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Mar 12 14:17:09 2024 +0100

    [wasm-compile-fuzzer] Modularise the fuzzer PART 2
    
    Continuation of https://crrev.com/c/5353507
    
    This change conditions the generation of SIMD expressions on the
    template parameter WasmModuleGenerationOptions for the Wasm compile
    fuzzer.
    
    This CL should not change the modules generated by the Wasm compile
    fuzzer so far.
    In an upcoming change, we will split the Wasm compile fuzzer into 2:
    one that generates and one that doesn't generate SIMD expressions.
    
    Change-Id: I1d8db5878c4cb61adf02d6ec938529438a0ae2be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355860
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92786}

commit a806087e66d798a87b3dfba96db3900a70d4e129
Author: Samuel Parker <sam.parker@arm.com>
Date:   Tue Mar 12 11:39:54 2024 +0000

    [compiler][arm64] one-lane swizzle
    
    Generic wasm simd shuffle pattern matching for a one lane swizzle,
    with isel and codegen for arm64.
    
    Change-Id: I3bdb4dc8cca14d8de9cfc03b310792963b47ab23
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5365342
    Commit-Queue: Martyn Capewell <martyn.capewell@arm.com>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92785}

commit 6ff81a19bc79d1bb3047dbfa1ab03d411a2be5ec
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Mar 12 13:09:21 2024 +0100

    [maglev] Always escape inlined arguments
    
    ... since they might be accessed by an arguments object
    later on, even if they don't have any uses in the inlined
    function.
    
    Fixed: 328680228
    Bug: 326091155
    Change-Id: I4c7929d1a7e3f130706bcdab3e9acb77bf566153
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361782
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92784}

commit 976b4f5e8d9e310722380c3c1a96ee1510dabfc2
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 12 12:17:24 2024 +0100

    [turboshaft] Maglev-to-ts: take filter into account when tracing
    
    OptimizedCompilationInfo::trace_turbo_graph() is only true when the
    function name passed the filter passed with --trace-turbo-filter (if
    any), unlike v8_flags.trace_turbo_graph, which doesn't take the filter
    into account.
    
    Bug: v8:12783, v8:14581
    Change-Id: I8723b49ecc8ad711be5c8aff83571627f86a8955
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361881
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92783}

commit 4a3890db6c9abb5ce4311342bbf352bf65b94e3b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Mar 11 15:23:24 2024 +0100

    [turboshaft][wasm] Add byte reversing for big endian platforms
    
    The implementation is based on the existing Turbofan implementation in
    wasm-compiler.cc.
    
    Fixed: v8:14658
    Change-Id: Ib6d6ea710c218585763057f6e428ce3ee9034b26
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361036
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92782}

commit c68f02dc2efcc19bc1be11c10e229adf2ebbc5fa
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Mar 12 10:34:00 2024 +0000

    [sandbox] Tag entries in the TrustedPointerTable
    
    Until now, we were only using the IndirectPointerTags to decide which
    table to use (TrustedPointerTable or CodePointerTable), but weren't
    actually tagging anything with them. With this CL, the entries in the
    TPT now contain the tag in their top bits and need to be untagged with
    the same tag on access. This ensures type-safety for trusted objects.
    
    Bug: chromium:40069826
    Change-Id: Ib12a01470bb0f11eacda3f7e4931f8dc63b1cde9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339885
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92781}

commit 10687fbb7deca6db2a10ac5315d6b1e13c226412
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 12 10:40:34 2024 +0100

    [turboshaft][test] Port test-select-combine
    
    Bug: v8:12783
    Change-Id: I0d4f694493e03576ad39704723f2b776b4a0b811
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361876
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92780}

commit 1c1b6c95d731ee00009653fc0ed557508036746e
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 12 11:30:39 2024 +0100

    [compiler][test] Remove left-over serializer-tester.h
    
    serializer-tester.cc was removed 3 years ago (in
    https://crrev.com/c/3059683), but it looks like the associated header
    file was forgotten.
    
    Change-Id: Ia3e3e0ffc1e9efdc6f7ff0e44744a10c567fff81
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361780
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92779}

commit 9cc6cd7e935b7d31ce9938b5f9418484a4f42562
Author: Marja Hölttä <marja@chromium.org>
Date:   Tue Mar 12 11:36:23 2024 +0100

    [turbofan] Fix LoadValue / PropertyCell typing
    
    This is a fix to the String + string wrapper CL
    ( https://chromium-review.googlesource.com/c/v8/v8/+/5360753 ).
    
    Bug: v8:12199, b/329153104
    Change-Id: I6fdf8728e97712ed3e23fc4d61f5935edf0b9c7b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5365341
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92778}

commit 11d7d87d7856c9b30197c7d22c2eb3d166f57e9a
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 12 11:17:55 2024 +0100

    [compiler] re-enable test-run-unwinding-info
    
    Because v8config.h was not included, the `#if` was always false, and
    this test never ran.
    
    Change-Id: I2e2f82ed5667c73abb034f52674604037a4e7179
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361879
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92777}

commit cf40a3a3d3684395c024151f6464ba9d49568926
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Mar 12 10:46:40 2024 +0100

    [heap] Fix string shortcutting in MinorMS
    
    The code broke with the migration from HeapObject to Tagged<HeapObject>.
    
    Bug: v8:12612
    Change-Id: I47c1e2b7d6e3a2e38dc6d4ced5b1002e32e6cd72
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361779
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92776}

commit c6d936814fe9b761ac890589f2784c91d9f4389c
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 12 10:44:30 2024 +0100

    [compiler][test] Remove support for Turbofan Graphs in FunctionTester
    
    ... in order to support Turboshaft with the FunctionTester.
    
    The FunctionTester is always used with Javascript code (as a string)
    as input, abd this path with a Graph as input was never used. Since
    are currently porting cctests to Turboshaft, it makes more sense to
    remove the support for Turbofan graphs as input, rather than add
    support for Turboshaft graphs (since it would never be useful).
    
    Bug: v8:12783
    Change-Id: Ie49795d61dcd42d11e9abe1a861807a666aacbc9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361778
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92775}

commit a42dfc697209e0d750e4c949ffb90fd9f239d548
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Mar 12 10:32:20 2024 +0100

    [cleanup] Fix TODO warning during presubmit
    
    The space results in the following warning on `git cl upload`:
    v8/src/maglev/maglev-graph-builder.cc:9288:
    (cpplint) Missing username in TODO; it should look like
    "// TODO(my_username): Stuff."  [readability/todo] [2]
    
    Change-Id: I30467c6fcda8650487a7e44a555b04355bef14e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361877
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92774}

commit 18508714d8f0dbe1c2e59a416404108240194837
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 12 09:49:04 2024 +0100

    [turboshaft][test] Add test-select-combine (disabled)
    
    This CL just copy-pastes Turbofan test-select-combine without any
    changes beyond disabling them with `#if 0`.
    
    This looks like a fairly useless commit, but now we can port
    test-branch-combine to Turboshaft, and reviewing will be much easier
    (because we'll see the delta from Tubofan to Turboshaft, which we
    wouldn't see easily if we were to port this file in the same CL that
    creates it).
    
    Bug: v8:12783
    Change-Id: I6f183fe927f068488f04a2a5fd1b20aae2c857b9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361776
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92773}

commit 897e1a3bbfe488b9d911a2bf9a80802c034b2992
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Mar 12 10:31:52 2024 +0100

    [wasm] Move WasmApiFunctionRef to trusted space
    
    This makes the WasmApiFunctionRef a trusted object, which allows to
    reference either the WasmApiFunctionRef or the WasmTrustedInstanceData
    directly as the "ref" stored in the WasmDispatchTable. We were storing a
    WasmInstanceObject (or WasmApiFunctionRef) there before, which required
    an additional load for the trusted data from the instance on every
    indirect call to a Wasm function.
    
    R=ahaas@chromium.org
    CC=saelo@chromium.org
    
    Bug: v8:14564
    Change-Id: I32d3846abf69418ac6dd90ec0eb1cc6498c5ac13
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355862
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92772}

commit 73d0c02f8afcc81268be3ab6dfbce82713c1822c
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Mar 11 23:16:33 2024 +0000

    [wasm] Reintroduce old exception handling flag
    
    Reintroduce the old eh flag under the name "legacy-eh".
    The main purpose is to allow producers to disable it with
    --no-experimental-wasm-legacy-eh to ensure that they completely switched
    to the new proposal (--experimental-wasm-exnref).
    
    The "throw" instruction exists in both proposals, so keep it enabled
    regardless of the flag.
    
    R=jkummerow@chromium.org
    
    Change-Id: Iac669c705410589167ac42cec263e09b2e1b665b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361034
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92771}

commit 4e07ad4eddd008786964a77db47bf6b586b910cf
Author: Omer Katz <omerkatz@chromium.org>
Date:   Mon Mar 11 11:11:33 2024 +0100

    [heap] Prioritize MinorMS over full GC
    
    Bug: v8:12612
    Change-Id: Icef44df969bd30db926431cfe59890e06de8d7eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5359996
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92770}

commit 63bae4f4fd65479daa22d78f55a371b20b8b8d7a
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 5 09:22:16 2024 +0100

    [turboshaft] Maglev-to-ts: print Maglev graph with --trace-turbo-graph
    
    Bug: v8:12783, v8:14581
    Change-Id: I4e4052567c8b5cf6bd1cdab934535c87046dc67a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5342757
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92769}

commit eab6126aab5ed00e75114c85a76bcf89130b5b29
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Mar 11 20:56:42 2024 +0100

    [wasm-compile-fuzzer] Modularise the fuzzer PART 1
    
    This change templatizes the GenerateRandomWasmModule() function and the
    WasmGenerator class with the WasmModuleGenerationOptions enum.
    
    The WasmModuleGenerationOptions will be used in the upcoming changes to
    specify which subset of expressions should be generated (e.g. SIMD,
    wasmGC..).
    
    This CL should not change the modules generated by the Wasm compile
    fuzzer so far.
    It only prepares the code to modularise the fuzzer in upcoming changes.
    
    Change-Id: I2d5922ea4437bfe865518f17c41d8a1611f515f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5353507
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92768}

commit 1579dd25f4f650df43d039a81ad909f8bac46af3
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Mar 11 17:31:27 2024 +0100

    [wasm][compiler] Add support for trusted and protected pointers
    
    As more objects will move to the trusted space and FixedArrays will
    become TrustedFixedArrays and ProtectedFixedArrays, we will have to load
    trusted and protected pointers from Wasm.
    
    This CL adds the compiler support for that, without using it yet.
    Usages will be added in the follow-up CL (https://crrev.com/c/5355862).
    
    R=dmercadier@chromium.org
    CC=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: If6bc013e22e34cc2e9b1aa5359f0ecdefb9ccacc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355970
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92767}

commit 8ed9229d1e45dbb5e0d3bdd44fcd4fccd9d762d0
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 11 16:59:53 2024 +0100

    [maglev] Give fresh object ids in inlined functions
    
    Object ids should be unique. In particular, object allocated
    inside inlined functions should have different ids than the
    ones allocated in the parent function. Otherwise we will
    materialize the wrong object in the deoptimizer.
    
    Fixed: 328868985
    Bug: v8:7700, 326091155
    Change-Id: Icfb803a38fd94520d5b4dae6d90cb72f67e119bc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361455
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92766}

commit 082c139c0e9a35f2c7287b986a155ea1cfc60b64
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Mar 11 12:01:47 2024 +0100

    [maglev] Enable osr phi untagging
    
    Bug: v8:7700
    Change-Id: I9f25fec67dbd2a4924e560fe5dc676e558fb7a6b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5340718
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92765}

commit 07024f0c420f8d28f6a2005350dbc076e087d406
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Mar 11 15:20:31 2024 +0800

    [riscv][sandbox] First step towards fine-grained entrypoint tags for builtins
    
    Port commit 25df12c34d2c644cb54a9e1ff8dca6261f685296
    Bug: chromium:1500887
    
    Port commit 69a0ef2ddda9bdea1f05c17411ca3faa41ba3200
    [sandbox] Use a protected pointer to reference Code from IStream
    Bug: chromium:1520333
    
    Change-Id: Ic6d41c77ab9cb2c2a4fb51c4293348d801ef9057
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5360473
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92764}

commit 0b704630160f243e53514a3d9dc725124e7531ea
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Mar 11 21:12:29 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/5e8aba5..29a8709
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/51564d2..b3ae305
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/2f8033e..8180c27
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/29e08c1..6ec5a9a
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/e1a38bc..b479e7a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8753702258300965745
    
    Change-Id: Ib0e584be04d9d292b95a53fbd13df52dbfa4cbb2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361957
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92763}

commit 2abbfbf2a4c15688b267cfde66083541f37d8efc
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Mar 9 18:32:17 2024 -0800

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/62626e08..263ed652
    
    Roll created at https://cr-buildbucket.appspot.com/build/8753891000512445025
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: I69785e3c69d6ba0a7167d7b7e97e63e8e2e98bb0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5358222
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92762}

commit dcb81ecb032b0c114b1633aa6e020c04d0da0821
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Mon Mar 11 11:47:07 2024 -0700

    Make gen-static-roots.py and gm.py Windows friendly
    
    Change-Id: Ifa510d4fd6e0c68b328ae5319dc7fba01b204af3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5362493
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92761}

commit 0d0b0174d76184cde693737e156b2b7bf716cf28
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Mon Mar 11 10:23:42 2024 +0100

    [heap] Avoid GC upon isolate deinitialization
    
    At isolate deinitialization, the optimizing compile dispatcher is
    stopped, flushing its queue and waiting for any pending compile tasks
    to complete. In this process, a safepoint may be requested, which may
    trigger a GC. This CL ensures that, in this case, local GC requests
    will be ignored and no GC will be triggered.
    
    Change-Id: I1426d75e093314e05b1d265e74be3b95e0355753
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355974
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92760}

commit ab7f1f9bbffc1ac68d99ee8f05c077caebf8ea91
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Mar 11 09:19:28 2024 -0700

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e9a12f2..5e8aba5
    
    Rolling buildtools/linux64: git_revision:88e8054aff7bd0cb2295c7d9361d2be0b7355f27..git_revision:59c4bb920542ee903ee1df39097ae024e2e8226f
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/2b09b9d..51564d2
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/774e7f5..2f8033e
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/726042b..29e08c1
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/27536b0..108914d
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/e72885f..c5bf1b5
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/0effaef..e13a42f
    
    Rolling tools/luci-go: git_revision:47b2cf1a0385b9802fd16640ed6503dcd9b0968d..git_revision:623f8d17a069eaea6d0fca13147888284ec76ff1
    
    Rolling tools/luci-go: git_revision:47b2cf1a0385b9802fd16640ed6503dcd9b0968d..git_revision:623f8d17a069eaea6d0fca13147888284ec76ff1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8753747557289029505
    
    Change-Id: I6c5f3110eccaa85ad9a8977c4cc7b873966afd0f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361275
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92759}

commit 59c8a4462e8b390f95462e0d772ce7d58ffd596e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 11 16:57:21 2024 +0100

    [maglev] Always escape receiver for inlined functions
    
    This also unfortunately forces all inlined allocated constructors to
    escape.
    
    Fixed: 328676392
    Bug: v8:7700, 326091155
    Change-Id: Iec22c3f29ce445c3507d228600d0a3222d0ab430
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361035
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92758}

commit 29829daa01ed644a57d99122ddaf59eaf091901a
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Mar 8 15:08:12 2024 +0100

    [wasm-stringref] Fix string-from-data shortcut
    
    It turns out that the right combination of instructions from the
    stringref proposal also ends up on the fast path we built for
    imported strings, where we shortcut an array-from-data and a
    string-from-array operation to a combined string-from-data. Since
    stringref instructions support additional strictness modes
    (specifically: kUtf8NoTrap, i.e. attempt strict UTF-8 decoding, and
    return `null` instead of trapping on failure), the fast path needs
    to support these too.
    
    Fixed: v8:14657
    Change-Id: I4610cf821e709d56459fb5b1b2515d4bf4c691fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355703
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92757}

commit 56d3afb4809728c9703388caf8d7992d96cc3f88
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Mar 11 16:44:28 2024 +0800

    [loong64][mips64] Handle unordered floating-point comparison conditions.
    
    Add some unordered floating-point comparisons support, and fix previous
    implementation when comparison predicate is false, which also didn't
    take unordered operands into consideration.
    
    Change-Id: I57414d9836f01d0383959f84c8e2fd9017bbe7b7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5359019
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#92756}

commit 5b9f11825204b808d96b685cfd812678de3a530f
Author: Kevin Babbitt <kbabbitt@microsoft.com>
Date:   Sat Mar 9 15:56:17 2024 -0800

    cppgc: Defer age table commit until generational GC is enabled
    
    Chromium does not currently use generational GC in Oilpan. Avoiding
    allocation of the age table until it's needed saves 1MB of commit charge
    per renderer on Windows, or more if we were to enable expansion of the
    caged heap.
    
    Bug: chromium:40264706
    Change-Id: Ic6e5eeb9b928aeb787071554b20479b75ce120d0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5357630
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Kevin Babbitt <kbabbitt@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#92755}

commit 99b8f489fcb092736f95974b99fe51ba6ea1ada0
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Mar 11 16:40:07 2024 +0100

    [base] Move V8_FALLTHROUGH to c++17
    
    I just ran into a file complaining about not knowing what
    V8_FALLTHROUGH is. I don't think there is any benefit for this macro
    any more and we should move to using `[[fallthrough]]` instead.
    As a first step, just changing what the macro does so that the change
    and the renaming can be done in two steps to avoid reverts in case of
    unforeseen issues.
    
    Change-Id: I29186124fba3e7f6fb581c3c70fd39abb08e1291
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5361456
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92754}

commit 206fe2a11ecd9107b148e693e01ebf086838a158
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Mon Mar 4 14:48:07 2024 -0800

    [cleanup] Remove unused label in bytecode-generator.cc
    
    Change-Id: I0545c2bb25c8fcf361a3c2a8b67602c980b2ba5b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5341559
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#92753}

commit 4175acf8517eb07e13f6555d4521e6396b7deab6
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Mar 11 12:20:36 2024 +0000

    Fix handling of cleared function_data in SFI::HasBuiltinId()
    
    When calling SharedFunctionInfo::HasBuiltinId() from a background
    thread, it can happen that a SetData() call on the foreground thread
    transitions that SFI from function_data to trusted_function_data. In
    that case, HasBuiltinId() may see a Smi value for function_data even
    though the SFI is not a builtin SFI. With this CL, this scenario is now
    handled correctly and HasBuiltinId() will return false.
    
    Bug: chromium:328294186
    Change-Id: I8198002030cb9e6316091580c00881bff3043906
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5358819
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92752}

commit 36f44c4ea6b962d574efe94ef22722c7b0970c5c
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri Mar 8 18:35:37 2024 +0100

    [tiering] Slow down loop interrupts in Maglev
    
    Due to cross-talk via the shared interrupt budget there is currently
    no way of setting interrupt budgets for osr-from-maglev independent of
    changing either the normal turbofan or maglev interrupt budget.
    
    To alleviate the situation we simply count maglev loops less than
    interpreter loops. This at least puts the cross talk roughly in line
    with the actual cost of running these loops.
    
    Bug: chromium:328115456
    Change-Id: Ia2861213b2a0079c9e473064f91f221e53c9f48b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5342764
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92751}

commit 104eb8947299cde47fe4d0874e5ec07beca000aa
Author: Marja Hölttä <marja@chromium.org>
Date:   Mon Mar 11 12:19:39 2024 +0100

    Reland2: [turbofan] Optimize "String + StringWrapper" concatenation
    
    date-format-xparb has this code:
    
    String.leftPad = function (val, size, ch) {
        var result = new String(val);
        ...
        while (result.length < size) {
            result = ch + result; // string + string wrapper
        }
        return result;
    }
    
    Currently this addition falls into the generic path, since we
    only fast path "string + string" but not "string + string wrapper".
    
    Last try: https://chromium-review.googlesource.com/c/v8/v8/+/5355693
    
    Fix: serialize the JSPrimitiveWrapper objects
    
    Bug: v8:12199
    Change-Id: If362810b7a73335379bc902e3218af95716f6ee7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5360753
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92750}

commit d857cadf1a95867fc93bbbbb67d7c3296dd3f653
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Mar 8 12:37:33 2024 -0500

    [turboshaft][test] skip cctests on s390
    
    Change-Id: Iefdd21d9f6687bff5f30cf9b2d91c5d92c167677
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5356119
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92749}

commit 953c993938e05e6cb3aa76984b98e48084bed2ba
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 7 16:11:24 2024 +0100

    [maglev] Inline some arguments object allocation
    
    Caveats:
    - We do not inline the allocation for inlined functions.
    - We do not support aliased/mapped arguments.
    - Allocation currently always escape (we do not add the non escape uses).
    
    Bug: v8:8800, 326091155
    Change-Id: Ia4dc2d248169bef08fc25caf16f9d8f79d8c7e9f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5344756
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92748}

commit fb8f62c37c4d8e85695d822741ede6f9b43f78b7
Author: Stephen Roettger <sroettger@google.com>
Date:   Fri Mar 8 13:51:37 2024 +0100

    Reland "[heap] Update MemoryChunk/Metadata accessors"
    
    This is a reland of commit cd8ccac694f4486d02f95db1e8950b89aba4b5e1
    
    Fix: added a TSAN only load/store on the metadata pointer, similar to
    how we access the heap_ pointer in the metadata for synchronization.
    
    Original change's description:
    > [heap] Update MemoryChunk/Metadata accessors
    >
    > so that they don't assume that Chunk and Metadata are at the same
    > address. For this, introduce a Metadata* inside the MemoryChunk.
    >
    > Change-Id: Ia3dcedf5569673d543e23d4348ff1a0d57d2add3
    > Bug: v8:13355, chromium:40849120
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5351603
    > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92726}
    
    Bug: v8:13355, chromium:40849120
    Change-Id: I3a39ff18d05baadd08163c7b02c391cc5c795ba4
    Cq-Include-Trybots: luci.v8.try:v8_linux64_tsan_dbg,v8_linux64_tsan_rel,v8_linux64_tsan_isolates_rel
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355695
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92747}

commit 7765d36eae2f9704996b29543ca219a4a4e92763
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Mar 11 09:16:40 2024 +0100

    [multimodal] Fix: prevent osr-from-maglev while in battery saver mode
    
    This was supposed to be disabled by not increasing the urgency in the
    tiering manager. However, if the urgency is already armed we might
    still end up in this case causing a synchronous turbofan OSR.
    
    Bug: chromium:41485666
    Change-Id: I284e286df22aecb90f2f0ac747e644187f7d3c54
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5354916
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92746}

commit 2d265b93b0ba686b8b4e6e858884ae47fb2c7d59
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Mar 11 09:38:19 2024 +0000

    [sandbox] Protect against OOB access in GetBailoutReason
    
    The BailoutReason enum value is read directly from a SharedFunctionInfo
    object and must therefore be considered untrusted. As such, it should be
    validated using a SBXCHECK before using it as index into a global array.
    
    Bug: chromium:328858270
    Change-Id: Ie141db4bc89ae2add85a1cb773d623300283e97d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5358817
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92745}

commit 32a7f3f9fa94539027fea4ae89b8376d6beab402
Author: Bruno Pitrus <brunopitrus@hotmail.com>
Date:   Sat Mar 9 09:05:37 2024 +0000

    Fix “constexpr used before its definition” GCC error
    
    Bug: v8:14449
    Change-Id: I86fcab89d1b5e2046003826115c8c692670b8e01
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5335107
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Bruno Pitrus <brunopitrus@hotmail.com>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92744}

commit 7f07d1a19955cc7c1484998262bdca3e8df2e5b3
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 11 08:39:29 2024 +0100

    [maglev] Add flag and disable escape analysis
    
    Temporarily disable escape analysis until all known
    bugs are fixed.
    
    Bug: v8:7700, 326091155, 328751844
    Change-Id: Ib7d6fdaebe7e8018f650c883a0776e5ad18680b0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5358394
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92743}

commit f1dfd97e2648c095ea51b67324cd066928b82906
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Mar 11 08:54:17 2024 +0000

    Revert "[object] Fast path for adding props with existing transition"
    
    This reverts commit 84993aa80bc5fae1a068a036ca5bcd10c12ce63e.
    
    Reason for revert: Suspect for https://issues.chromium.org/issues/328922190
    
    Original change's description:
    > [object] Fast path for adding props with existing transition
    >
    > Add a fast path to AddProperty/CreateDataProperty, which first searches
    > the transition array for an existing transition. If a transition exists,
    > we can skip a bunch of checks around whether the property already exists
    > and is writable.
    >
    > Change-Id: I57dd37bb9fe649755e972a469cb53163c34faf8f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5342763
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92683}
    
    Change-Id: Id81cf877c6b9aff186ea93f53746af18f445f399
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5358818
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92742}

commit c9dcce12008a90d405de657fb56a502f64cbcc42
Author: Stephen Roettger <sroettger@google.com>
Date:   Fri Mar 8 09:35:50 2024 +0100

    [heap] Implement MemoryChunk hash
    
    Move the hash implementation from MemoryChunkMetadata to MemoryChunk
    which is already used by the page tracking for conservative stack
    scanning.
    
    Change-Id: If6372d7ae6e3647aeeaba0cdf5ce36bf4c4ef8f5
    Bug: v8:13355, chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355687
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92741}

commit c53c7952e1a4c69df7884250711c755e41d0d8a1
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Mar 8 08:07:20 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/6c3e5c2..e9a12f2
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/256143e..774e7f5
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/fb76ce5..726042b
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/926f681..e1a38bc
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/7eeec10..0effaef
    
    Roll created at https://cr-buildbucket.appspot.com/build/8754019347724376001
    
    Change-Id: I14a16289d43c06e09a95c597d36624de32405f3f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5356196
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92740}

commit 23e86f4e7aa7361e97c7b1d6e84ee1a9d85d408c
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Mar 7 15:41:34 2024 +0100

    [turboshaft][test] Port codegen-tester and test-branch-combine
    
    Bug: v8:12783
    Change-Id: I11b3ba86de33a12219076005ff7f54422cb27a9a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349362
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92739}

commit e86892c39db5fa95d068566748ee624b632e8e44
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri Mar 8 16:15:22 2024 +0100

    [multimodal] Fix: prevent osr-from-maglev while in efficiency mode
    
    This was supposed to be disabled by not increasing the urgency in the
    tiering manager. However, if the urgency is already armed we might
    still end up in this case causing a synchronous turbofan OSR.
    
    This is a likely cause for additional main thread congestion in the
    ..WithTurbofan experiment group for efficiency mode.
    
    Bug: chromium:41485666
    Change-Id: I8f6790ba760e77c85ce180ae78574548cb33c9ba
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355702
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92738}

commit e7470e816293cc4b918dce810fe169710fa2eb1d
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Mar 8 15:42:51 2024 +0000

    Revert "Reland: [turbofan] Optimize "String + StringWrapper" concatenation"
    
    This reverts commit 4e5fbc4202f4f74d17eae14471e9cfa83c0c7fdb.
    
    Reason for revert: Suspect for newly flaky failures: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Mac%20-%20arm64/1669/overview
    
    Original change's description:
    > Reland: [turbofan] Optimize "String + StringWrapper" concatenation
    >
    > date-format-xparb has this code:
    >
    > String.leftPad = function (val, size, ch) {
    >     var result = new String(val);
    >     ...
    >     while (result.length < size) {
    >         result = ch + result; // string + string wrapper
    >     }
    >     return result;
    > }
    >
    > Currently this addition falls into the generic path, since we
    > only fast path "string + string" but not "string + string wrapper".
    >
    > First try: https://chromium-review.googlesource.com/c/v8/v8/+/5245432
    >
    > Fix 1: missing shifts in machine-lowering-reducer-inl.h
    > Fix 2: HeapConstant typing
    > Fix 3: ToObject returns type StringWrapperOrOtherObject now
    >
    > Bug: v8:12199
    > Change-Id: I271cf1430548a58eb9c79ecc57cfd285817d17eb
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355693
    > Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Marja Hölttä <marja@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92735}
    
    Bug: v8:12199
    Change-Id: I2155e8d841b1ad062b4fe44f8d16fc4c0bf4c54b
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355971
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92737}

commit c163161b234393a67fcce2cb452f8368c1d10179
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Mar 8 15:22:41 2024 +0100

    [bigint] Harden Divide/Modulo for sandbox fuzzing
    
    Requesting division by zero (which is only possible with already-
    corrupted heap contents) should CHECK-fail in Release mode to
    prevent subsequent escalation to off-heap memory corruption.
    
    Fixed: 328692018
    Change-Id: If7b96eac0a39eb0de3185d5851528549e2b8e47d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355705
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92736}

commit 4e5fbc4202f4f74d17eae14471e9cfa83c0c7fdb
Author: Marja Hölttä <marja@chromium.org>
Date:   Fri Mar 8 14:50:44 2024 +0100

    Reland: [turbofan] Optimize "String + StringWrapper" concatenation
    
    date-format-xparb has this code:
    
    String.leftPad = function (val, size, ch) {
        var result = new String(val);
        ...
        while (result.length < size) {
            result = ch + result; // string + string wrapper
        }
        return result;
    }
    
    Currently this addition falls into the generic path, since we
    only fast path "string + string" but not "string + string wrapper".
    
    First try: https://chromium-review.googlesource.com/c/v8/v8/+/5245432
    
    Fix 1: missing shifts in machine-lowering-reducer-inl.h
    Fix 2: HeapConstant typing
    Fix 3: ToObject returns type StringWrapperOrOtherObject now
    
    Bug: v8:12199
    Change-Id: I271cf1430548a58eb9c79ecc57cfd285817d17eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355693
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92735}

commit 442e16a3204a865dd3969b67bd182f055b819147
Author: Marja Hölttä <marja@chromium.org>
Date:   Fri Mar 8 14:34:56 2024 +0100

    [turboshaft] Disable the 'turbofan but no turboshaft' combo
    
    Bug: v8:12783
    Change-Id: I1db84b8bbea3a1b0aebfaf966b7c013d84de22f6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355700
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92734}

commit 7be1c32c0866f11e981569d031eb5d77ddefda5f
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Mar 8 14:23:14 2024 +0100

    [api] Introduce indexed interceptor callbacks with new signature
    
    The new callback should return bool value indicating whether the
    operation was intercepted. This replaces the old approach where
    the callback used to return the hole value if the request wasn't
    intercepted.
    
    The new Api will allow us to remove the hole check for Api function
    callback and native data properties accessor callbacks.
    
    Tests will be migrated to the new Api in follow-up CLs.
    
    Bug: chromium:328490288
    Change-Id: I9dab518fd3b43daeee6a08a2781a5f0688619144
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355689
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92733}

commit 42d9b5fc0d334a090ed30d7277141539c79355bf
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Mar 8 14:10:57 2024 +0100

    [api] Introduce named interceptor callbacks with new signature
    
    The new callback should return bool value indicating whether the
    operation was intercepted. This replaces the old approach where
    the callback used to return the hole value if the request wasn't
    intercepted.
    
    The new Api will allow us to remove the hole check for Api function
    callback and native data properties accessor callbacks.
    
    Tests will be migrated to the new Api in follow-up CLs.
    
    Bug: chromium:328490288
    Change-Id: I6446529bbd454c698a2432566be853baa68a2f6a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5353146
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92732}

commit b9392e8956bc0f6031c69990b1dc5fa5be26d558
Author: pthier <pthier@chromium.org>
Date:   Thu Mar 7 09:06:35 2024 +0100

    [json] Don't internalize short 2-byte strings in parser
    
    The idea behind internalizing short strings in JSON content is that
    they might be enums that appear often.
    This seems very unlikely for 2-byte strings, so don't internalize them.
    
    Change-Id: I4e5d484482cd5988e497477c85630939c59fb8ba
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349004
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92731}

commit 2256c4ec70f369d61989da1a27746e15f4bd24b6
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Mar 7 08:35:09 2024 -0500

    PPC/s390x: Fix debug builds with RHEL gcc toolset
    
    Currently linking v8_hello_world causes a link failure
    during a v8 debug build with the following error:
    ```
    undefined reference to symbol '_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE14__xfer_bufptrsD1Ev@@GLIBCXX_3.4.21'
    ```
    I've created a ticket to look into the cause but in the meantime
    adding the ldflag `-lstdc++` fixes the issue:
    https://bugzilla.redhat.com/show_bug.cgi?id=226818
    
    Bug: v8:14652
    Change-Id: Ie3131e8bf426018f2da147e92d6fc205783c2f2f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348144
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92730}

commit a11bc7f0b8e8741e33f1137dfd61466b571eff5c
Author: Liviu Rau <liviurau@chromium.org>
Date:   Fri Mar 8 11:44:20 2024 +0100

    Add official on release branch builder
    
    Bug: b/328490282
    Change-Id: I73de0026cf48c4333fea9622ddeec70efec38bbb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5352266
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92729}

commit b1b4677539326fcdcbd8fea3909019ad4e46108c
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Mar 8 11:35:32 2024 +0100

    [builtins-pgo] Fix cross-building on Linux host for Windows
    
    Bug: chromium:327457581
    Change-Id: I10f5bdd71e6f9697bf8a608cc1671d7064b278d7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355690
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92728}

commit cd5e1d896f5bbd9b491d5f9b083f2328c633cc8c
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Mar 8 10:30:44 2024 +0000

    Revert "[heap] Update MemoryChunk/Metadata accessors"
    
    This reverts commit cd8ccac694f4486d02f95db1e8950b89aba4b5e1.
    
    Reason for revert: TSAN: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN/51559/overview
    
    Original change's description:
    > [heap] Update MemoryChunk/Metadata accessors
    >
    > so that they don't assume that Chunk and Metadata are at the same
    > address. For this, introduce a Metadata* inside the MemoryChunk.
    >
    > Change-Id: Ia3dcedf5569673d543e23d4348ff1a0d57d2add3
    > Bug: v8:13355, chromium:40849120
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5351603
    > Commit-Queue: Stephen Röttger <sroettger@google.com>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92726}
    
    Bug: v8:13355, chromium:40849120
    Change-Id: Ica13786227fe666eb8249246b162048956c24437
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355667
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92727}

commit cd8ccac694f4486d02f95db1e8950b89aba4b5e1
Author: Stephen Roettger <sroettger@google.com>
Date:   Fri Mar 8 09:39:36 2024 +0100

    [heap] Update MemoryChunk/Metadata accessors
    
    so that they don't assume that Chunk and Metadata are at the same
    address. For this, introduce a Metadata* inside the MemoryChunk.
    
    Change-Id: Ia3dcedf5569673d543e23d4348ff1a0d57d2add3
    Bug: v8:13355, chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5351603
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92726}

commit 37675853887e335423dc05aa8e59ff328a82c8c0
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri Mar 8 09:25:18 2024 +0800

    [loong64][mips64] Remove a UNREACHABLE statement in WordCompareZero
    
    The turboshaft isel of loong64 and mips64 is not finished, and may
    go into the UNREACHABLE statement now.
    
    So temporarily remove the statement in case program aborts.
    
    Change-Id: Idd265955bffcfaf682a4acf6475836ba1d2c426f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5355026
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#92725}

commit 9626b450b1f45b0820ecedfe8a2391eaceae04bc
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Mar 7 16:28:29 2024 +0100

    [heap] return MemoryChunk in LookupChunkContainingAddress
    
    and use MemoryChunk pointers in the page sets. The pointer to chunk
    lookup currently casts an arbitrary value to a MemoryChunkMetadata
    pointer. This won't work anymore once MemoryChunks and Metadata are
    separate, so do the lookup using the Chunks instead.
    
    Bug: v8:13355, chromium:40849120
    Change-Id: I2dac1ffa85b6b3b541ec08adc73e154e5918c62d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349000
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92724}

commit ca5ad701eedaed99a7eada3acd637c885a5a6a30
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri Mar 8 08:18:19 2024 +0100

    [heap] Run more tests on css bot
    
    Bug: v8:13257
    Change-Id: Ic60735840ed95a884bd23c12348930d79a0156d1
    Cq-Include-Trybots: luci.v8.try:v8_linux64_css_dbg
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5353506
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92723}

commit 8f477f936c9b9e6b4c9f35a8ccc5e65bd4cb7f4e
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu Mar 7 14:55:28 2024 -0800

    [parser] Fix home object proxy to work off-thread
    
    Because the home object has special scope lookup rules due to class
    heritage position, VariableProxies of the home object are currently
    directly created on the correct scope during parsing. However, during
    off-thread parsing the main thread is parked, and the correct scope
    may try to dereference a main-thread Handle.
    
    This CL moves the logic into ResolveVariable instead, which happens
    during postprocessing, with the main thread unparked.
    
    Fixed: chromium:327740539
    Change-Id: I3a123d5e37b6764067e58255dd5a67c07e648d02
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5350482
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92722}

commit 85a3db3ff1fe03e244b56d7f3407bcc047be3c6f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Mar 7 20:23:15 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/6fb28f9..6c3e5c2
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/dce5ffc..256143e
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/3c79cfc..fb76ce5
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/dda72ef..926f681
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/dbf15a2..27536b0
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/aedd9b5..e72885f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8754064644380657569
    
    Change-Id: I5049f02e1d54c2679e4be384133dce68944eb6d3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5354531
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92721}

commit f9edd2621408fd32f8e2f7e79b7a757a213d24c7
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Mar 7 10:08:56 2024 -0500

    [turboshaft][s390] Port InstructionSelector part 1
    
    Change-Id: Ibf2a5ea7d0905b4ff103eb315297aacdaf7d2a89
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349724
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92720}

commit 5c16484da316820d6da7c79607ef3497a470fce4
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Mar 7 13:58:21 2024 +0100

    [wasm] Initializer expressions: Fix ref.i31 on 32 bit
    
    ref.i31 in the constant expression evaluator:
    static_cast<intptr_t>(i32_val << 2) >> 1
    
    As intptr_t is 32 bits as well, this loses a bit of information.
    
    Fixed: 328499555
    Change-Id: Ic60bae8b8a3c06633906905bdbd6d892c94ffd11
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5351806
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92719}

commit 9328cf039e8c299557b861242e38f92da94df2dd
Author: Sebastien Marchand <sebmarchand@chromium.org>
Date:   Thu Mar 7 08:53:27 2024 -0500

    Ensure that the PGO download step uses the proper depot_tools
    
    The download_profiles.py script has a flag that allows specifying the
    path to depot_tools but this value might be silently unused if there's
    some other version of depot_tools in the PATH. The issue is that this
    supplied path gets appended to the global PATH and then the script does
    an "import foo" to import a module from that path, but if there's
    another path in the PATH exporting "foo" (like a local install of
    depot_tools) then it'll have priority over the supplied value.
    
    Change-Id: I9569a1de39262eab60005bb0286cd8f8c358ce28
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5352286
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Sébastien Marchand <sebmarchand@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92718}

commit 713ad9514b840d195b1e11a78adb2455ee07612f
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Mar 7 14:44:38 2024 +0100

    [builtins] Fix CallApiGetter for direct locals
    
    With v8_enable_direct_local=true, which requires conservative stack
    scanning, locals are just direct pointers to objects. This CL fixes
    the CallApiGetter builtin to correctly support direct locals.
    
    Bug: v8:13270
    Change-Id: I4737bae14c97359e8e4b693f8e5a54e5c306f39b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5351787
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92717}

commit 44fbf8779b2a20462bd65563d45b098dd90955c6
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Mar 7 08:04:40 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/253f9e7..6fb28f9
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/308441d..2b09b9d
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/e2d639b..dce5ffc
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/de6a9a9..3c79cfc
    
    Rolling third_party/siso: git_revision:86b0e81fba4005098b1bec9ca40018fc3dacd523..git_revision:8632c71c8cadd9cb9ea4d43e6b30eeae4dffcd12
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/353f979..7eeec10
    
    Rolling tools/luci-go: git_revision:3df60a11d33a59614c0e8d2bccc58d8c30984901..git_revision:47b2cf1a0385b9802fd16640ed6503dcd9b0968d
    
    Rolling tools/luci-go: git_revision:3df60a11d33a59614c0e8d2bccc58d8c30984901..git_revision:47b2cf1a0385b9802fd16640ed6503dcd9b0968d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8754109944877332017
    
    Change-Id: I8f3915e437fae311080cb61f58081e895213c8bd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5352289
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92716}

commit b1d70eb723d8b34bd9126e9e91658f697e0653ad
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Mar 7 14:39:41 2024 +0100

    [heap] Fix the renaming of some constants
    
    This CL fixes an issue introduced in https://crrev.com/c/5335159.
    Fields kPointers(From|To)HereAreInterestingMask are now in MemoryChunk,
    not in MutablePageMetadata. This should fix the builds for loong64 and
    mips64.
    
    Change-Id: I0c370462edfe39ec80f7353f95aee5ac4a3ba094
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349508
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92715}

commit 048a21c5c123d3d9cc2d125c3df077ef106cba81
Author: Etienne Pierre-doray <etiennep@chromium.org>
Date:   Wed Mar 6 21:20:01 2024 +0000

    [wasm] Make Async compile on threadpool user blocking
    
    Boost priority of async compile task. This is necessary to address
    crbug.com/40272906 and unblock UseUtilityThreadGroup.
    
    Bug: 40866812, 40272906
    Change-Id: I09425572f35e5b438c08982cd19018bf366075f5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349727
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Etienne Pierre-Doray <etiennep@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92714}

commit e06c1f474291d570a90b110d7d7d7e3f5833150c
Author: Marja Hölttä <marja@chromium.org>
Date:   Thu Mar 7 13:32:47 2024 +0000

    Revert "[turbofan] Optimize "String + StringWrapper" concatenation"
    
    This reverts commit 94b3d99e996d3297b49147e37b901dfd1b291c3b.
    
    Reason for revert: b/328483357
    
    Original change's description:
    > [turbofan] Optimize "String + StringWrapper" concatenation
    >
    > date-format-xparb has this code:
    >
    > String.leftPad = function (val, size, ch) {
    >     var result = new String(val);
    >     ...
    >     while (result.length < size) {
    >         result = ch + result; << string + string wrapper
    >     }
    >     return result;
    > }
    >
    > Currently this addition falls into the generic path, since we
    > only fast path "string + string" but not "string + string wrapper".
    >
    > Bug: v8:12199
    > Change-Id: I350c9dda8f2fa4605f338458f329a6988ecb82da
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245432
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Marja Hölttä <marja@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92688}
    
    Bug: v8:12199
    Change-Id: I4b28f1208d0833112dcd16786c4c7d7b3263e7aa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5351604
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Marja Hölttä <marja@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92713}

commit d9d9eee6d616b0d71902ce384c653f4da1be65d4
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Mar 7 12:55:08 2024 +0000

    [sandbox] Use custom CodeEntrypointTag for Wasm functions
    
    With this CL, runtime-compiled and builtin Wasm functions (in other
    words, Code with Wasm linkage) now use a unique CodeEntrypointTag. This
    way, when calling a Wasm function via the Code Pointer Table (CPT), the
    call is guaranteed to end up in a "compatible" function even if an
    attacker manipulates code pointers (i.e. CPT indices) on the heap.
    
    Bug: chromium:40948502
    Change-Id: I1a0e0afa6776db50336a7010ec677ccab0ff17d9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5345771
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92712}

commit f3db93bd7cef3c405db14634288928640d261f16
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Mar 7 10:42:42 2024 +0000

    [sandbox] Tag remaining InterfaceDescriptors for Builtins
    
    With this CL, all InterfaceDescriptors for Builtins now have an explicit
    CodeEntrypointTag and there is no longer a default tag in the
    StaticCallInterfaceDescriptor class. As such, when adding new interface
    descriptors in the future, a tag must also always be specified.
    
    Bug: chromium:40948502
    Change-Id: Ifcc001a66d7dec7a2fac9b7cb99a47644a1701be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5345410
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92711}

commit 9efbcfffc2608afa7497128640937f70bddf1c3d
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Mar 7 13:01:01 2024 +0100

    [heap] Split MemoryChunkMetadata::address into two
    
    Split MemoryChunkMetadata::address into MetadataAddress and
    ChunkAddress and use MemoryChunk::address() when useful.
    After moving the Metadata out of the MemoryChunk, the addresses won't be
    the same anymore (go/v8-cfi:ool-mem-chunks).
    
    Change-Id: Ibd27a8915cafe4fca252cbc7d1416c4dd085083e
    Bug: v8:13355, chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348785
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92710}

commit 65798e42b23b2809f3346781c50423abdae8663c
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Mar 6 15:37:23 2024 +0100

    [heap][test] Fix test-heap/TransitionArrayShrinksDuringAllocToZero
    
    This test fails occasionally on the CSS bot.
    
    Bug: v8:13257
    Change-Id: Id4f65869cfd7fe35af1fa79356eb7b34d332680f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349001
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92709}

commit 05e95a69f3b5fc82670edc817e68fcfd576d7819
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 7 11:21:28 2024 +0100

    [maglev] Avoid deopt loop when optimizing builtin calls
    
    If we don't have a feedback source, we should always
    disallow speculation. Otherwise we might create a deopt loop.
    
    Bug: v8:8800
    Change-Id: Iaaf334d07e5e71ae451f10f638d0ac1ab943f43d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5350602
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92708}

commit 6614707a0c93107b7b7fc6b7832ae4aa44822bb5
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Mar 6 14:01:58 2024 +0100

    [wasm][turboshaft] Run AnalyzeLoopAssignment
    
    Only generate loop phis for locals and the instance cache if they have
    an assignment in the loop body. This reduces loop sizes for functions
    with a lot of phis and therefore improves loop unrolling heuristics.
    
    Bug: v8:14108, v8:14655
    Change-Id: Ief504336a19931e46ad1b92a2bf8a400719ccf1d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348786
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92707}

commit 5e0fda1faab8b4087bfdb9d15f7dee87e827e0b9
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Mar 6 17:15:54 2024 +0100

    [turboshaft][test] Add codegen tester (disabled)
    
    This CL just copy-pastes Turbofan codegen-tester and
    test-branch-combine without any changes beyond disabling them with
    `#if 0`.
    
    This looks like a fairly useless commit, but now we can port the
    codegen-tester and test-branch-combine to Turboshaft, and reviewing
    will be much easier (because we'll see the delta from Tubofan to Turboshaft, which we wouldn't see easily if we were to port these
    files in the same CL that creates them).
    
    Bug: v8:12783
    Change-Id: Ie761e46223de7a0c0f4d171e603b4268f1346d57
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349003
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92706}

commit b896372d4760003040369f0ec8649e25af394d99
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Mar 7 08:27:19 2024 +0100

    Reland "[fuzztest] Roll abseil/fuzztest and fix fuzztest flags"
    
    This is a reland of commit 8157ec839b888edbe8520c30c7b1761594e75734
    
    The reland also rolls fuzztest, which contains a part of the abseil
    CL.
    
    Original change's description:
    > [fuzztest] Roll abseil and fix fuzztest flags
    >
    > This manually rolls abseil to https://crrev.com/c/5342394
    > and ports the change to V8.
    >
    > Bug: 40286621, 327992211
    > Change-Id: If1ce838ee72f148659facf700ff2a6a4cb47b1de
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349151
    > Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92697}
    
    Bug: 40286621, 327992211
    Change-Id: I76f19c94baddb58fe785005bea60dcf37330440d
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_rel
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5350598
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92705}

commit 1b90bcf8c66f240d84cc6a6dc138b73b8f35befb
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 7 10:36:15 2024 +0100

    [maglev] Change overzealous DCHECK in GetDeoptFrameForLazyDeopt
    
    Bug: 328483400
    Change-Id: Ic575f8579b25f0ca835d86d6a448a1322f502e76
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5351785
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92704}

commit 96eac73c0595e54ee64e766e137e8448b245a7ac
Author: Stephen Roettger <sroettger@google.com>
Date:   Wed Mar 6 16:26:07 2024 +0100

    [heap] Hash MemoryChunk address in *Metadata hash functions
    
    Once the *Metadata classes are out-of-line, the Metadata address won't
    be page aligned anymore. So hash the metadata->Chunk() address instead.
    (http://go/v8-cfi:ool-mem-chunks)
    
    Change-Id: Ifda2b2db5ac7f1549398f98287eff1cb964daef3
    Bug: v8:13355, chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348998
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92703}

commit b2aa3d670833d453eff217e2f79730cd92da75c1
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Mar 6 16:35:33 2024 +0100

    [wasm] Unhandlify SetWasmInternalFunction
    
    When introducing the WasmInternalFunctionWrapper we don't always have
    the value in a handle, and since the method does not allocate a handle
    is not needed. Hence unhandlify the method.
    
    Also move {WasmInternalFunction::FromExternal} to
    {WasmExternalFunction::internal} and unhandlify it; this is only a
    simple getter after all. This requires also handling C-API functions as
    WasmExternalFunction.
    This fits nicely the often-used pattern where we first check
    "IsWasmExternalFunction" and then get the corresponding internal object.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I219bfb8bb5d321b105d9e8a43559ba7c3ba3288d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5345770
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92702}

commit 9f2083388e71ba12e3df3b8caa31eb310e9f03f4
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Mar 7 08:55:21 2024 +0100

    Reland "[maglev] Simple escape analysis for inlined allocated objects"
    
    This is a reland of commit 576176291b947034ea598ea034f225387bb673f1
    
    Fix 3 issues:
    - Fix hole issue in Float64
    - Always escape constructors that have any use in the inlined function
    - Always escape if object is allocated inside a try-block, since
    we do not currently support materialization of the object in the catch
    block.
    
    Original change's description:
    > [maglev] Simple escape analysis for inlined allocated objects
    >
    > Only escape objects that have no use, other than its initializing
    > stores.
    >
    > Bug: v8:8800, 326091155,
    > Change-Id: I8c25fdd7da12058cf33501f03d43d4f357c2bc46
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306934
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92667}
    
    Fixed: 328280144, 328096360, 328134548
    Bug: v8:8800, 326091155
    Change-Id: Ia1e18df1d5d807184cd3f05c0b9b1be5fbd0c4de
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348997
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92701}

commit f1afb960c0c94719d846263aacbdf5be139b730f
Author: Yuheng Wei <yuheng.wei@intel.com>
Date:   Thu Mar 7 11:05:13 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of Ternary op(S128Select) in turboshaft
    
    Bug: v8:12716
    Change-Id: Icb6a71a14e80b67d76293e7ebb8655ad9e420e2c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5347281
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Yuheng Wei <yuheng.wei@intel.com>
    Cr-Commit-Position: refs/heads/main@{#92700}

commit 848a3638a4d31d75188394bf6f133c011e226e6f
Author: Yolanda Chen <yolanda.chen@intel.com>
Date:   Wed Mar 6 18:20:30 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of Simd128ShiftOp
    
    Also include a fix to Simd128Binop support
    
    Bug: v8:12716
    Change-Id: I02122d6480e84c9540462e7c7611bfb753a8bb6f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5342939
    Commit-Queue: Yolanda Chen <yolanda.chen@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92699}

commit 9b4792873210c67deed34c82eec79b054f74c8d5
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Mar 6 21:01:22 2024 +0000

    Revert "[fuzztest] Roll abseil and fix fuzztest flags"
    
    This reverts commit 8157ec839b888edbe8520c30c7b1761594e75734.
    
    Reason for revert:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Centipede%20Linux64%20ASAN%20%20-%20debug%20builder/774/overview
    
    Original change's description:
    > [fuzztest] Roll abseil and fix fuzztest flags
    >
    > This manually rolls abseil to https://crrev.com/c/5342394
    > and ports the change to V8.
    >
    > Bug: 40286621, 327992211
    > Change-Id: If1ce838ee72f148659facf700ff2a6a4cb47b1de
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349151
    > Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92697}
    
    Bug: 40286621, 327992211
    Change-Id: I1fe36c5606e03f9e5cd7cbc61b5cd14a51503735
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5350597
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92698}

commit 8157ec839b888edbe8520c30c7b1761594e75734
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Mar 6 19:21:06 2024 +0100

    [fuzztest] Roll abseil and fix fuzztest flags
    
    This manually rolls abseil to https://crrev.com/c/5342394
    and ports the change to V8.
    
    Bug: 40286621, 327992211
    Change-Id: If1ce838ee72f148659facf700ff2a6a4cb47b1de
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349151
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92697}

commit 21b24dd93f34cae7a4ef211f28be5d112b62acc9
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Mar 6 17:29:35 2024 +0100

    [wami] mjsunit mode
    
    This adds `wami --mjsunit`, producing JS source that uses the
    WasmModuleBuilder from test/mjsunit/wasm/wasm-module-builder.js
    to define the module.
    
    Change-Id: I6ad43c033de60f6252fc09d3a5e5436344a34250
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339908
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92696}

commit ae02432bed2864a1e0c89d6422bcd9c4fa5581c7
Author: José Dapena Paz <jdapena@igalia.com>
Date:   Fri Nov 17 15:27:53 2023 +0100

    [heap] Added String::CalculateLineEndsVector
    
    As an initial step to make heap snapshot fast without adding line ends
    information to heap (that implies modifying the heap), move the part of
    CalculateLineEnds that generates a vector of line ends to an independent
    function.
    
    Bug: v8:14617
    Change-Id: I43e8d8db51c1cd29ceb668c2ff8b3e4835633919
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5147607
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: José Dapena Paz <jdapena@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#92695}

commit 385416a114cd2e24314f95acbaf098215d09f188
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Mar 6 15:00:08 2024 +0100

    Print representations to --trace-turbo
    
    Drive-by: Add join_string
    
    Bug: v8:12783
    Change-Id: I43b536645b724fe634788df9fb94a199ba17557f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348999
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92694}

commit c85852ef2a312cd10df3e0ee4e2432abfe0f92c5
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Mar 6 16:13:58 2024 +0100

    [wasm-fuzzer] Add NaN check to Relaxed FMA operations
    
    To stop the fuzzer from reporting NaN-related differences.
    
    Fixed: 328279045
    Change-Id: Id1a6adb5eb41502d103c9b648d0e32da64725621
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349361
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92693}

commit 5e3d40050617feb75fa2b1bc00269a445e0fa9af
Author: Stephen Roettger <sroettger@google.com>
Date:   Wed Mar 6 16:14:00 2024 +0100

    [heap] Pass offset into RememberedSet::Insert
    
    This makes it consistent with InsertTyped and also saves some
    MemoryChunkMetadata::MemoryChunk lookups.
    
    Change-Id: Ic1116bbe1a9f03388a328e207dbe639d6ad961b8
    Bug: v8:13355, chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5344421
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92692}

commit fbbcdd42665ed9d2b5ed4c1d2c66c256b3ef6ff4
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Tue Mar 5 13:43:31 2024 -0800

    Mark trusted constant pool objects in heap snapshots
    
    Constant pools for bytecode now use TrustedFixedArray rather than
    ordinary FixedArray. This change updates the logic which marks constant
    pools as such in heap snapshots, so they show up with a more meaningful
    name.
    
    Bug: chromium:1515075
    Change-Id: I58657b6680578e829ee3173cf7a88133d2ccb46f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5346492
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92691}

commit ddeac8bb2735919597ba14bd237350be19f41343
Author: Dmitry Bezhetskov <dima00782@gmail.com>
Date:   Thu Feb 29 17:44:40 2024 +0100

    Fix FindInstanceInPrototypeChain to check for a non JSObject callee
    
    Bug: v8:14646
    Change-Id: I8247d935343ae0ebcc36dbc5956eaea40a51a556
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331698
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92690}

commit 68644b780d986043187b3fce558254d2dcfd9347
Author: Liviu Rau <liviurau@chromium.org>
Date:   Wed Mar 6 11:56:16 2024 +0100

    Add arm64 no-ptr-compression bot configs
    
    Bug: v8:14609
    Change-Id: If0ff73b30e0805e8547fc12d1958014f50ed781b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5344411
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92689}

commit 94b3d99e996d3297b49147e37b901dfd1b291c3b
Author: Marja Hölttä <marja@chromium.org>
Date:   Wed Mar 6 13:33:10 2024 +0100

    [turbofan] Optimize "String + StringWrapper" concatenation
    
    date-format-xparb has this code:
    
    String.leftPad = function (val, size, ch) {
        var result = new String(val);
        ...
        while (result.length < size) {
            result = ch + result; << string + string wrapper
        }
        return result;
    }
    
    Currently this addition falls into the generic path, since we
    only fast path "string + string" but not "string + string wrapper".
    
    Bug: v8:12199
    Change-Id: I350c9dda8f2fa4605f338458f329a6988ecb82da
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245432
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92688}

commit 0f3f76e4148e8bb595e036b4d5681109121ad356
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Mar 6 12:20:27 2024 +0100

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/6f2ff82..253f9e7
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/1db15eb..9491ff1
    
    Rolling buildtools/linux64: git_revision:f19d5817e7ba85c2fda92e2697be11a4465d3267..git_revision:88e8054aff7bd0cb2295c7d9361d2be0b7355f27
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/98ad12d..7dcda6c
    
    Rolling third_party/android_sdk/public: BRpfUGFd3WoveSGTLVgkQF7ugIVyywGneVICP4c0010C..mU9jm4LkManzjSzRquV1UIA7fHBZ2pK7NtbCXxoVnVUC
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/56ba67e..e2d639b
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6b84fbf..de6a9a9
    
    Rolling third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/959d1a2..727f65f
    
    Rolling third_party/fuchsia-sdk/sdk: version:18.20240227.3.1..version:19.20240305.3.1
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/76bb2af..dda72ef
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/b5fe27d..80307e6
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/204deaa..fc6253a
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/f9550c3..dbf15a2
    
    Rolling third_party/siso: git_revision:8632c71c8cadd9cb9ea4d43e6b30eeae4dffcd12..git_revision:86b0e81fba4005098b1bec9ca40018fc3dacd523
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/3787595..aedd9b5
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/5a776b1..353f979
    
    Roll created at https://cr-buildbucket.appspot.com/build/8754225871412810401
    
    Change-Id: Icedeb568850a24d09a1cc15b14d7ac85cd60a3a3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348378
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92687}

commit d102590fbb883bcc04d23511e5046c82ed607989
Author: pthier <pthier@chromium.org>
Date:   Wed Mar 6 12:38:29 2024 +0100

    [regexp] Check output register count in interpreter
    
    Output register count is stored on the V8 heap in the RegExp data
    FixedArray. Corrupting it can lead to stack corruption in the
    interpreter.
    Add a hard check and crash gracefully in such a case.
    
    Bug: v8:14656, chromium:327522280
    Change-Id: Ieb650f814575c1dc96b8710f494d6112d7ea99c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348780
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92686}

commit e2b15cead68bfdaf0a23056993edfa56217d9467
Author: pthier <pthier@chromium.org>
Date:   Wed Mar 6 12:47:39 2024 +0100

    Use SIMD for String comparison on x64
    
    Port the SIMD string comparison that was already implemented for ARM
    Neon to x64 SSE2.
    
    Change-Id: I810e109e3e06b84a38d9575dfa232e48c0beac3f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331715
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92685}

commit b4d5db92b064ca1ab2956530474b25035e6303e2
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Mar 5 15:35:34 2024 +0100

    [heap] Don't delay incremental marking due to concurrent sweeping
    
    This CL aligns MinorMS with Scavenger in regards to triggering full
    GC incremental marking. Incremental marking will be triggered either
    after a minor GC or from a old gen allocation.
    
    If concurrent sweeping for MinorMS is still active, it will be force
    finalized. This may result in large complete sweeping phases on the
    main thread. This CL does not contain a mitigation for it since it
    does not seem to affect benchmarks.
    
    Bug: v8:12612
    Change-Id: I5b20473416ae31a849b05c4822cd9518be9a387f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339887
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92684}

commit 84993aa80bc5fae1a068a036ca5bcd10c12ce63e
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Mar 6 11:35:36 2024 +0100

    [object] Fast path for adding props with existing transition
    
    Add a fast path to AddProperty/CreateDataProperty, which first searches
    the transition array for an existing transition. If a transition exists,
    we can skip a bunch of checks around whether the property already exists
    and is writable.
    
    Change-Id: I57dd37bb9fe649755e972a469cb53163c34faf8f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5342763
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92683}

commit ea5970384dfe8905f0d3b763cdb2c32166050076
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Mar 6 09:52:12 2024 +0000

    [sandbox] Use JSEntryDescriptor for JSEntry trampilines
    
    The JSEntry trampolines are used for "converting" between C++ calling
    convention ("linkage") and JS linkage, for example when calling into a
    JS function from C++ code. As such, they themselves use C++ linkage and
    should therefore not use the JSTrampolineDescriptor which specifies JS
    linkage (e.g. via the `kJSEntrypointTag`).
    
    Bug: b/328280137
    Change-Id: I72fb49d7ebe379dddbfe9b8b65339c286e67d391
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5349416
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92682}

commit 10e78eaa8433b41738684bc2f78963470aa03c75
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Mar 6 10:40:30 2024 +0100

    Reland "[turboshaft][arm64] Port/enable ISEL unittests part 1"
    
    Original change's description:
    > [turboshaft][arm64] Port/enable ISEL unittests part 1
    >
    > This ports and enables a few unit tests for the instruction selector
    > on Arm64. While enabling these tests, some of them didn't pass, so I
    > fixed the following issues in the Arm64 instruction selector:
    >
    >  * Better matching of `ChangeInt32ToInt64(x & 0xff)`.
    >   (in that case, both the ChangeInt32ToInt64 and &0xff can be done
    >    using specific addressing modes)
    >
    >  * Better matching of `(x << 16) >> 16)`
    >   (this is a sign extension, and can be done using specific
    >    addressing mode)
    >
    >  * Better matching of Loads that can do zero extension.
    >
    >  * `-cst + x` can now be compiled to `x - cst` (which avoids
    >    materializing the constant in a register)
    >
    >  * OverflowCheckedBinop can now do zero-extension (this was broken
    >    because of they are always used through projections rather than
    >    directly by sign-extending change ops).
    >
    > Bug: v8:12783
    > Change-Id: I91c42ea57ab07ff5bed648f5568f422a4f147140
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331549
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92609}
    
    Change-Id: Icb18b486c6de126fa3b742a5a81f05cc0066fa5e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348995
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92681}

commit 454b87a953e3501f81dfaefe837ccc51f13f2700
Author: Marja Hölttä <marja@chromium.org>
Date:   Fri Feb 23 13:03:13 2024 +0100

    Reland2 "[const tracking let] Turn const tracking let on by default"
    
    This is a reland of commit 35e6f1998faa7575cbdeb54903a1ea172b2c7bb1
    
    The second fix was: https://chromium-review.googlesource.com/c/v8/v8/+/5339897
    
    Original change's description:
    > Reland "[const tracking let] Turn const tracking let on by default"
    >
    > This is a reland of commit b54de357db5627771466b082d986b471a12be087
    >
    > The fix was: https://chromium-review.googlesource.com/c/v8/v8/+/5331532
    >
    > Original change's description:
    > > [const tracking let] Turn const tracking let on by default
    > >
    
    Bug: v8:13567
    Change-Id: I88ce68d62314364dc6e974090593e2e2eec771d8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5344417
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92680}

commit 9fec3cfb8ec4a9bcaa4a1c27bbc2ebe201fe0969
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Mar 6 08:47:28 2024 +0100

    [build] Add gn variable to unblock deps roll
    
    This is needed to roll:
    https://crrev.com/c/4994044
    
    Bug: b/328287875
    Change-Id: I9db69298f6b4a9b2e05cdfa04fce6a08282fcc76
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5347618
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92679}

commit bda0a410fa72185df7c41a827681b96e93cd3cd6
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Mar 6 08:48:38 2024 +0000

    Revert "[maglev] Simple escape analysis for inlined allocated objects"
    
    This reverts commit 576176291b947034ea598ea034f225387bb673f1.
    
    Reason for revert: Suspect for blocked roll (https://chromium-review.googlesource.com/c/chromium/src/+/5345199)
    
    Original change's description:
    > [maglev] Simple escape analysis for inlined allocated objects
    >
    > Only escape objects that have no use, other than its initializing
    > stores.
    >
    > Bug: v8:8800, 326091155
    > Change-Id: I8c25fdd7da12058cf33501f03d43d4f357c2bc46
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306934
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92667}
    
    Bug: v8:8800, 326091155
    Change-Id: Ib6ebd150697eae2b00958212ef6d665a7964888c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348996
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92678}

commit 6959ff7f8d372044d1b04318df337eacc460ebb7
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Mar 6 10:48:43 2024 +0800

    [riscv][heap] Always use MemoryChunk:: for flag names
    
    And Generalize InstructionSelectorT for Turboshaft on riscv32
    Port commit 3c2714d57370a05ea5ce99d79d92bf4980bb5d39
    Bug: v8:12783
    
    Change-Id: I1683931ba08a9c05944a6c88bbdfda66994a7f9a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5348235
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92677}

commit 76b0db73e66c7aaffca234ce4c72c7105d2c9f74
Author: Marja Hölttä <marja@chromium.org>
Date:   Mon Mar 4 16:25:02 2024 +0100

    [const tracking let] Fix missing invalidation w/ StaLookupSlot
    
    StaLookupSlot bytecode must also invalidate const tracking let side
    data.
    
    In all tiers, the lookup slots are handled by runtime calls
    (Runtime::kStoreLookupSlot_Strict or Runtime::kStoreLookupSlot_Sloppy).
    
    Bug: v8:13567, b/327517317
    Change-Id: Ie0234fd5dd59541eec71e6cef1e8596a8ee328ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339897
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92676}

commit b639938e99fa6b5ffa9c859b18c72a251fd56942
Author: Joyee Cheung <joyee@igalia.com>
Date:   Thu Feb 29 18:03:38 2024 +0100

    [snapshot] support context embedder data serialization
    
    Previously all context embedder data are serialized verbatim,
    so if a context embedder data slot contains a pointer, embedders
    need to figure out how to store data for it on the side for the
    snapshot. They also have to reset the pointers to null to make
    the snapshot reproducible.
    
    To address this issue this patch adds
    v8::(Des|S)erializeContextDataCallback as part
    of v8::(Des|S)erializeEmbedderFieldsCallback and use them during
    (de)serialization of context embedder data. The bahavior is similar
    to that of v8::(Des|S)erializeInternalFieldsCallback: If the
    returned data is not empty, the returned data is going to be
    written into the snapshot blob and passed to the embedder during
    deserialization. Otherwise the data is serialized verbatim.
    
    Change-Id: I4113c76fc6dc8e3503cde5533320402454e62097
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5074252
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#92675}

commit 23e3b6f650162ed2b332e55aa802adb8f41b50f2
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Mar 5 16:08:34 2024 +0100

    [api] Remove deprecated API
    
    This CL removes and cleans up some API that has been marked as
    deprecated since M122 or earlier.
    
    Bug: chromium:1454114
    Change-Id: Iaaf313da2217505f5f40d72619021fc509b7f312
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5345409
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92674}

commit 8372e2cf5e5ebf9bb7b283206e076725473304f6
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Mar 5 17:42:52 2024 +0100

    [heap] Tweak sweeping scopes for array buffer sweeping
    
    The array buffer sweeper may contribute to promoted page iteration.
    Separate scopes to distinguish promoted page iteration from actual array
    buffer sweeping.
    
    Drive-by: Reduce code duplication in heap.cc by reusing
              PauseConcurrentThreadsInClients.
    
    Bug: v8:12612
    Change-Id: I6c257dbfe975f1c7487b5e0c279152a484cc93a6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5345789
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92673}

commit 8dd7bd9b9886d59410ca8a42a9344450272676f9
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Mar 5 16:50:22 2024 +0100

    [wasm-imported-strings] Fix string-from-data fast path
    
    There were two bugs:
    - Turboshaft failed to take the fast path despite meaning to.
    - The fast path accidentally inherited the stringref proposal's
      stricter throw-on-invalid-data behavior, while imported string
      operations are supposed to silently use the replacement character.
    
    Fixed: 327643791
    Change-Id: I536c8355d2a8e4dcd4f41af16a0fa1da062aef4a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5345411
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92672}

commit d3e4b311fc31fc0342eef1c096c5519c06c84575
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Mar 5 15:39:00 2024 +0000

    [sandbox] Harden Turbofan's Signature objects
    
    If there is heap corruption, Turbofan may get confused about the number
    of parameters during compilation, leading to out-of-bounds access. This
    CL defends against that.
    
    Bug: b/327550516
    Change-Id: I723204cda9e5213b7182db998c63611195743a35
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5344418
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92671}

commit 6be86c09abcd22f15f2a313379eaacb6d7fa90d3
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Mar 5 15:47:00 2024 +0100

    [asm] Remove sqlite3 tests
    
    Those tests are among the slowest (in optdebug) and asm code will not
    change any more. We also have other more targeted test for asm code
    generation, and fuzzers that check that a program produces the same
    result with and without asm validation.
    
    Hence remove the slow sqlite3 tests.
    
    R=ahaas@chromium.org
    
    Change-Id: I388960b7c0f5a3edf3a253463b679c35da7baa5f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5344416
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92670}

commit 110320866880720ea0c6b5be1421b3dcb008b97a
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Mar 5 15:29:31 2024 +0100

    [turbofan] Move protected pointer loads to CodeAssembler
    
    This refactors the API to be in line with default on-heap field loads:
    The CodeStubAssembler works with field offsets and calls out to a
    lower-level method in the CodeAssembler which works with raw offsets.
    The naming now also follows that of other field loads.
    
    R=dmercadier@chromium.org
    
    Bug: v8:14564
    Change-Id: I7289d1ae3443e2a142b7d3515f834da28537af2c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331725
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92669}

commit 46c241eb99557fe8205acac5c526650c3847d180
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Mar 5 14:37:08 2024 +0100

    [api][cleanup] Deprecate accessor callbacks with Local<String>
    
    It's been a while since a more generic accessor callbacks accepting
    Local<Name> were introduced, so it's time to deprecate the old ones.
    
    This CL deprecates
      v8::Template::SetNativeDataProperty(v8::Local<v8::String>, ...);
      v8::ObjectTemplate::SetAccessor(v8::Local<v8::String>, ...);
    
    Bug: chromium:326505377
    Change-Id: Ie2d10de0625d64d40ea526fa05e94dc8fdf5fe51
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5344409
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92668}

commit 576176291b947034ea598ea034f225387bb673f1
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Mar 5 15:01:27 2024 +0100

    [maglev] Simple escape analysis for inlined allocated objects
    
    Only escape objects that have no use, other than its initializing
    stores.
    
    Bug: v8:8800, 326091155
    Change-Id: I8c25fdd7da12058cf33501f03d43d4f357c2bc46
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306934
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92667}

commit 536c2b3a8f446c67a027ff351d795389a3512f42
Author: pthier <pthier@chromium.org>
Date:   Tue Mar 5 13:41:36 2024 +0100

    [heap] Add extra info for invalid visitor IDs in HeapVisitor
    
    Add information about object/map/visitor-id to crashdumps to help debug
    crashes in the wild, encountering invalid visitor id's.
    
    Bug: chromium:327992715
    Change-Id: Ifb0c963a4427981dcd0637327f186e39f9772f48
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5340420
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92666}

commit 45619f09c3ae8a50c4962ea1cfe72c3384e5c7ec
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon Mar 4 16:34:05 2024 +0100

    [objects] Skip age field when comparing SFIs byte-for-byte
    
    The age field can be reset concurrently, which can result in DCHECK
    failures when comparing SFIs using memcmp. This CL fixes this by
    splitting memcmp into two invocations.
    
    Bug: chromium:327483131
    Change-Id: I031ad43047faf44bc8e4db45f5d3935f166826aa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339883
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92665}

commit 6a642a89488d88f6ee06f69e9daf07c2da118aac
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Mar 5 12:25:58 2024 +0000

    [sandbox] Tag more builtins with the kInvalidEntrypointTag
    
    With this CL, some more builtins are marked as "internal" builtins which
    causes them to not be invokable from within the sandbox as they use the
    kInvalidEntrypointTag in the code pointer table.
    
    Bug: b/40948502
    Change-Id: I83568c6588a758d1abe5a1817a677339b3da2b47
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5340716
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92664}

commit 7034841106af99cf8ec349f797ca0988a4765394
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Mar 5 13:42:45 2024 +0100

    [turboshaft] Port Bitfield optimizations to MachineOptimizationReducer
    
    Bug: v8:12783
    Change-Id: Ic9ab64bb9c2bcd81cbb3aa9b703632aaba9b8129
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268903
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92663}

commit 161a3dbab1f538f6dab4a66780f361ce5bce10cc
Author: Marja Hölttä <marja@chromium.org>
Date:   Tue Mar 5 11:35:30 2024 +0100

    [compile hints] Don't delete compile hints when they're fetched
    
    We already [try to] produce crowdsourced and local compile hints at the
    same time, so we cannot clear them when we fetch them.
    
    In addition, if we want to produce local compile hints early and augment
    them later, we'd need to keep the earlier hints around.
    
    The extra memory consumption of keeping the data around longer should be
    negligible in comparison to compiled code.
    
    Bug: b/40286622
    Change-Id: I542a7ab99f502ea36f3a4b42f9d7c9c1761e81f9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5340715
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92662}

commit 5c277284b0127fb1c3ce36dbbdaa4fd44d349a67
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Mar 5 10:32:45 2024 +0100

    [fuzzer][wasm] Fix UB in fuzzer implementation
    
    Fixed: 328144636
    Change-Id: Idc56894530a41b7054a4d95b15ab8ee6abd9f922
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5340714
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92661}

commit f08185224194dc90b662ebe973d06cda623fec21
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Mar 5 11:44:15 2024 +0100

    [test] Skip turboshaft frontend in Google3
    
    It currently fail during import:
    http://sponge2/55b896b3-b51b-462c-93cc-013f6a2f2613
    
    Bug: v8:14581
    Change-Id: Icb4508b5fbea4d2fa6f1a316cf08856c6417bf2d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5340717
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92660}

commit 63ba6244e7187c1cfefafce568a3df0fd80cd2bf
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Mar 5 09:11:24 2024 +0100

    Reland "[turboshaft] Skeleton of instruction selector unittests"
    
    Original change's description:
    > [turboshaft] Skeleton of instruction selector unittests
    >
    > Bug: v8:12783
    > Change-Id: If6c933e15767f8acc3582bfeb784748508c83353
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328569
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92604}
    
    Bug: v8:12783
    Change-Id: I6df08645623770890c766d35cec87c8c25705678
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5340713
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92659}

commit dc8157b603892886afaed14e6480ac6fa0dc001d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Mar 5 11:36:32 2024 +0100

    [wasm][decoder] Rewrite stack types on most branch instructions
    
    This fixes the behavior to be aligned with the spec.
    Detailed discussion on this:
    https://github.com/WebAssembly/gc/issues/516
    
    Fixed: v8:14643
    Change-Id: Icaebf96ef3710bb5aeba19192e8245287f5fcb49
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339891
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92658}

commit 5748834cc5813a8acda0aa378b42b242a186b07e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Mar 5 11:28:04 2024 +0100

    [bazel] Fix some bazel buildifier complains
    
    Change-Id: Ic49ac7e647ce14081b271dc5baf0cfe8c5a7b438
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5342761
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92657}

commit dc7219333ba36a8bef1e0af18a83e76e48ee42df
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Mar 5 10:57:15 2024 +0100

    [wasm-disassembler] Expose OffsetsProvider in .h
    
    And also expose uint64_t printing.
    This CL is just moving code in preparation for future work, there
    are zero functional changes here.
    
    Change-Id: Ic140a0e44bc08be476741096084d7f5256074f36
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339907
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92656}

commit 0ef26427d37acdf911e5c1d3c5100118620ba83d
Author: Stephen Roettger <sroettger@google.com>
Date:   Mon Mar 4 15:09:37 2024 +0100

    [heap] Embed the MemoryChunk in MemoryChunkMetadata
    
    instead of using a subclass.
    This enforces that all Metadata => Chunk accesses go through the right
    accessors and the other way round.
    This is a no-op at the moment, but will be needed once the Metadata
    moves out of the Chunk.
    In a follow up, I'll do some refactoring to remove unnecessary lookups.
    
    Change-Id: I91e8bce5dcba611b87738237522a7031ae432960
    Bug: v8:13355 chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339895
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92655}

commit 5b1b767a316e6a281cbc25429d62d5e27e55dd79
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Mar 4 21:35:19 2024 +0100

    [wasm][cleanup] Misc fixes to tests and disassembler
    
    Minor improvements I noticed while working on other things.
    See review comments for details.
    
    Change-Id: I7ac3d52b1d28f6ff324c8ca6a768bf249bb32263
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339906
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92654}

commit cdfb6dbc194555bdb05b7ce9cdb256204ab30fea
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Mon Mar 4 10:54:59 2024 +0100

    Avoid vector allocation in IC::IsTransitionOfMonomorphicTarget.
    
    This allocation is the top contributor to temporary allocations on
    NewsSite-Nuxt.
    
    Bug: 327940237
    Change-Id: I4c83fafe2375fc39d464548f6fc58fc4476b07d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331688
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92653}

commit cd7bb1f9a0a75ad5de11a013f48724a2df35d2a4
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Mar 4 22:20:37 2024 +0100

    [wasm] Fix Suspender initialization order
    
    Initialize {has_js_frames} first so that it already contains a Smi when
    we allocate the other properties of the Suspender object, which
    potentially trigger a GC.
    
    R=ahaas@chromium.org
    
    Bug: v8:14648
    Change-Id: I13d9482c0a67d165f3dfdf76a4465837cdca07ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339886
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92652}

commit 4f16e2f78afe48b04e8cf0428a82eac85e63287e
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Mar 4 21:30:50 2024 +0100

    [asm.js] Use unsigned LEBs where appropriate
    
    When building Wasm modules from asm.js sources, we should use
    unsigned LEBs where appropriate, specifically: for global indices
    and branch depths.
    Using signed LEBs should be harmless, but is wasteful, because it
    can require an additional byte that would be avoidable. For an
    extreme example, see "TestLargeSwitch" near the end of
    test/mjsunit/wasm/asm-wasm-switch.js.
    
    Change-Id: Id04f4ca51819b3054ff6589bdbcb54113dbdc814
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339888
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92651}

commit ebf24454cf5b0615c4bec327c617120779341dc5
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Mon Mar 4 16:12:59 2024 +0100

    [handles] Enable direct locals for conservative stack scanning
    
    With this CL, setting v8_enable_conservative_stack_scanning=true
    sets also v8_enable_direct_local=true (unless explicitly overriden).
    This means that the default configuration for CSS will now use both
    direct (internal) handles and direct locals.
    
    Bug: v8:13257
    Bug: v8:13270
    Change-Id: Iddd9b8da42e5e42fcb77a152dce2f0c488736260
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339871
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92650}

commit b26554ec368e9553782012c96aa5e99b163eaff2
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 4 15:24:04 2024 +0100

    [bazel] Remove deprecated _allowlist_function_transition
    
    Change-Id: I52deb503ed1a8ab933d903b2212b85673fef59e9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339880
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92649}

commit 065098087154769b4948886964dd73ad58b0006c
Author: Andrew Grieve <agrieve@chromium.org>
Date:   Thu Feb 29 20:49:47 2024 +0000

    Enable 16k pages for x64 Android
    
    Bug: 326991793
    Change-Id: Id3fcfd6b0aef531cd5f081cb32f36bc407a53e58
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5335402
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Andrew Grieve <agrieve@chromium.org>
    Commit-Queue: Andrew Grieve <agrieve@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92648}

commit 796b8bc6ffdbafecc0ef69cda142ec3143ec47d6
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 4 15:00:35 2024 +0100

    [bazel] Update prebuilt bazel to 7.1
    
    Bug: v8:14110
    Change-Id: Ie726b83c75c0008c54e118bbd4cee6b4b2095a6f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339878
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92647}

commit f5c2f14be0465d51174899d0300aff963067ccc4
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 4 14:27:36 2024 +0100

    [bazel] Update script to run bazel 7+
    
    - Use label instead of relative paths.
    - Remove ctx.workspace_name use.
    
    Change-Id: Ifce2d9b6d6646e2a0f20f9e4d4fea7ffa675c03d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339896
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92646}

commit cca94e7c661899b9cd53a6e186d6199da93999a3
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Mar 4 09:14:53 2024 -0500

    Remove the default block from compiler tiers
    
    It's not necessary to have the default block in this case.
    More details can be found under the comment section of
    https://crrev.com/c/5331756
    
    Change-Id: Ib7079e5531652b6aebb1acb9001635eada8fdf39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339993
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92645}

commit 56339afebb084c7b22a689e9d8daee1dbc9aa938
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Mar 4 15:14:49 2024 +0100

    [fuzzer][wasm] Init expression fuzzer: Deep comparison of structs and arrays
    
    Change-Id: I86966fdd3cf48ecf4b39fe2f4d2d42645b62a96d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331540
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92644}

commit 030f11450be0634c7f4c9c156adbdb3509b100c4
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Mar 4 15:16:20 2024 +0100

    [wasm-imported-strings] Fix Number-to-uint32 conversions
    
    The helper function we used previously produced unexpected results
    for negative inputs.
    
    Fixed: 327517308
    Change-Id: Iceb2e79c357e1f09622ad5ae0e0f52e9234769ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339898
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92643}

commit 2741fdc5fc6962bfce278ed9e377343652378d9f
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Mar 4 14:02:32 2024 +0100

    [wasm] Add explainer why the elem spec test is disabled
    
    R=mliedtke@chromium.org
    
    Bug: v8:14644
    Change-Id: Ibf1ef3542dafab6a2ba81dc76fdae40986582cfe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339894
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92642}

commit 6f7fd2c374688c68628d1306c02b58530b2805f0
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Mar 4 13:09:43 2024 +0100

    Use empty trusted fixed arrays "automatically"
    
    This makes us use the empty_trusted_byte_array,
    empty_trusted_fixed_array, and empty_protected_fixed_array when
    requesting a 0-sized array from the factory.
    
    In order to avoid reading the field for initializing the field itself,
    the initialization uses the more explicit <Type>::New method.
    
    R=saelo@chromium.org
    
    Bug: v8:14564
    Change-Id: Ib428ee0a37b75540dffc25fd5063cbd72c6a254d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331542
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92641}

commit 5c7468289ffd5d41a09c422ce4b9f11de43c624e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Mar 4 13:29:30 2024 +0100

    [bazel] Remove glob directives
    
    Change-Id: I952d8a0a0c777e67652865605b5ff6e5bce798f5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339872
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92640}

commit 7ba16eadb311ceb6f62c437ef25a79d47e8b4623
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Feb 28 14:21:14 2024 +0100

    [wasm] Skip random module generation code in official builds
    
    The code now lives in src/ so the GenerateRandomWasmModule runtime
    function can use it; this increases the size of libv8.so though, so skip
    this code in official builds. To avoid compile failures we still define
    the GenerateRandomWasmModule function, but make it crash with an
    "UNIMPLEMENTED" message if it is ever invoked.
    The runtime function will just not be defined in official builds.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14637
    Change-Id: I306e73b74152f7432180a407e08d1cd381bb2372
    Cq-Include-Trybots: luci.v8.try:v8_linux64_official_rel
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328108
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92639}

commit a582c1fc3044e5b483f94d3711d11e1c9441fe38
Author: Omer Katz <omerkatz@chromium.org>
Date:   Mon Mar 4 11:59:11 2024 +0000

    Revert "[heap] Delay incremental marking when concurrent sweeping is running"
    
    This reverts commit 5cba930221993e4b558f8cdb79e4a693d93695c4.
    
    Reason for revert: Dev channel hangs remain stable, indicating sweeping finalization simply moved from tasks to during allocations.
    
    Original change's description:
    > [heap] Delay incremental marking when concurrent sweeping is running
    >
    > To avoid expensive complete sweep phases on the main thread, bail out of
    > incremental marking start when starting from a task (soft limit) and try
    > again later. This should give concurrent threads more time to finish
    > sweeping.
    >
    > Bug: v8:12612, b/40943580
    > Change-Id: Ia2401739ee149ae3038920964f05e5906ca41980
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5289016
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92436}
    
    Bug: v8:12612, b/40943580
    Change-Id: I845c3fb2e1f5cc55c728a6868619a69bd291ea21
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5339870
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92638}

commit fd1c413693f8fd7f9bb0cfe7530ee0947db63220
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Feb 29 20:54:29 2024 +0100

    [heap][wasm] Remove dead parameter
    
    The instance size is encoded into the WasmTypeInfo after creating it;
    the parameter on the factory method is unused.
    This CL removes it and only computes the instance size for structs where
    we encode it in the map afterwards.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14564
    Change-Id: I2aade26cef65096db87955cb055fd9a02d3e56e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5332007
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92637}

commit 3908d48c25b7dd92d513595bbe28b3e142aa7607
Author: Samuel Parker <sam.parker@arm.com>
Date:   Mon Mar 4 11:16:27 2024 +0000

    [compiler][arm64] Recognise simd 32x4 reverse
    
    Add wasm simd pattern matching for 32x4 reverse shuffle, with isel
    and codegen for arm64.
    
    Change-Id: If330fb18ce16a8ad52ee7cb65213ab88dafa2098
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5332380
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92636}

commit b6f51c06a1571db2c6793bbb8f88d501a41847b1
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Mar 1 13:14:54 2024 -0500

    [DEPS] skip siso on ppc and s390
    
    `infra/build/siso` doesn't have binaries for ppc/s390 which ends
    `gclient sync` mid way.
    
    Bug: v8:14633
    Change-Id: I02fa9c6eb16d265d6c8532bbd6ce1ab880422196
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5335820
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92635}

commit d52a8a05d6ec5fcf3f0bca31c5de3e4506fed59c
Author: Pierre Langlois <pierre.langlois@arm.com>
Date:   Fri Mar 1 11:28:41 2024 +0000

    [arm64] Remove push/pop pairs before and after C calls.
    
    When invoking MacroAssembler::CallCFunction(), we have many registers
    available as scratches, as calling a C function implicitly clobbers
    caller-saved registers (x0-x17).
    
    We used x4 and x5, which may also be used as parameters so need to be
    saved and restored on the stack before. We can instead use any registers
    from x8-x17.
    
    Change-Id: I14ff98fac104587afbd16a40b24c4d9c5816dffd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5335339
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Pierre Langlois <pierre.langlois@arm.com>
    Cr-Commit-Position: refs/heads/main@{#92634}

commit 97b7d0066254778f766214d247b65d01f8a81ebb
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Feb 29 16:25:56 2024 +0000

    [sandbox] Do not use SA_RESETHAND when installing the crash filter
    
    This flag causes the handler to be reset to the default handler upon
    invocation, which is probably not what we want: for example, it can
    happen that corrupting heap memory causes two threads to segfault in
    short succession. In that case, the first thread will invoke the crash
    filter, but the second may cause the process to terminate with the
    SEGFAULT before the crash filter has finished executing. Instead, we
    probably want both threads to execute the crash filter in this case.
    
    Bug: v8:12878
    Change-Id: I3971c621db216b5b2782004908e9dcfe584604df
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331699
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92633}

commit 9ccc32bed80a2e892252b924b6cdab9d82b58037
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Mar 4 09:06:16 2024 +0000

    [sandbox] Validate SharedFunctionInfo::builtin_id
    
    The builtin id is read from the heap so must be considered untrusted
    when accessed. However, other code, such as SharedFunctionInfo::GetCode,
    treats the builtin id as a trusted value (e.g. for indexing into the
    Isolate's builtin_table). To support this, we now simply validate the
    builtin id after reading it from the heap.
    
    Bug: b/327732554
    Change-Id: I19fe66d41deb51fb782d954f546bc0cc74f157af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5332218
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92632}

commit 8fcd3f809ba5c71f7a29bc6623c1f93a9eac72fe
Author: Seokho Song <seokho@chromium.org>
Date:   Sun Mar 3 13:22:42 2024 +0900

    Implement Float16Array, Math.f16round, and related DataView
    
    The half-precision floating point after the machine representation
    layer depends on the machine architecture.
    
    Hence, represents the half-precision floating point as uint16
    with software conversion from third_party/fp16.
    Deoptimize Maglev and Turbofan until there is machine-level support.
    
    Proposal: https://github.com/tc39/proposal-float16array
    
    Bug: v8:14012
    Change-Id: I10316cf8b67cd54a2cd7dedc6e3e368448be2559
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5082566
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Seokho Song <seokho@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92631}

commit da824b438674745396a603c13288139252408c12
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Mar 2 18:10:01 2024 -0800

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/a2597599..62626e08
    
    Roll created at https://cr-buildbucket.appspot.com/build/8754525180882605745
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: Id1cd8b8d925e200b9846fd85a2563a2b515ad770
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5332085
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92630}

commit f178406b59d91240ffb9c149cb01e98a560da16d
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Fri Mar 1 10:52:34 2024 +0100

    [heap][handles] Stack scanning for background threads
    
    This CL adds support for conservatively scanning the stacks of
    background threads. If such a thread has a non-trivial stack, it
    should use Stack::SetMarkerForBackgroundThreadAndCallback to register
    its stack for scanning and wait in the callback for a GC to occur.
    This method is automatically invoked by the family of
    LocalHeap::BlockWhileParked methods.  Threading cctests use the
    same mechanism for alternating between different threads.
    
    Bug: v8:13257
    Bug: v8:13270
    Change-Id: I9bcced9e80d2e07f2a4a02f45cb6d129a79a16ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331543
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92629}

commit 12f60d9ae501f51292bbb37c2dcbe73a7e176e07
Author: Marja Hölttä <marja@chromium.org>
Date:   Fri Mar 1 06:47:28 2024 +0000

    Revert "Reland "[const tracking let] Turn const tracking let on by default""
    
    This reverts commit 35e6f1998faa7575cbdeb54903a1ea172b2c7bb1.
    
    Reason for revert: https://issues.chromium.org/issues/327517314 and others
    
    Original change's description:
    > Reland "[const tracking let] Turn const tracking let on by default"
    >
    > This is a reland of commit b54de357db5627771466b082d986b471a12be087
    >
    > The fix was: https://chromium-review.googlesource.com/c/v8/v8/+/5331532
    >
    > Original change's description:
    > > [const tracking let] Turn const tracking let on by default
    > >
    > > Bug: v8:13567
    > > Change-Id: Idf294a4a63c16d34ca442c8752eba0addaa4cf8f
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318000
    > > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > > Commit-Queue: Marja Hölttä <marja@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#92551}
    >
    > Bug: v8:13567
    > Change-Id: I9682432a1adaece62bd152772e5d994c39e46c66
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331534
    > Commit-Queue: Marja Hölttä <marja@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92600}
    
    Bug: v8:13567
    Change-Id: I7be9077bf83c4bb73e680c57bdd89d91349ae834
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5332379
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Auto-Submit: Marja Hölttä <marja@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92628}

commit ec8af078231ee5d3fd1d78a662b352db7c9cac25
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Mar 1 14:38:17 2024 +0800

    Reland "[riscv][sandbox] Generalize indirect pointers"
    
    This is a reland of commit eb887e8d70f82e1dc0325fb2c4a479a9d8fdbdf5
    
    Original change's description:
    > [riscv][sandbox] Generalize indirect pointers
    >
    > Port commit 11c55ef5b4229f4fb6eb497aba9903d3252044e7
    > Port commit b0ae8877e53259eb5967a8f3e50a72c3630512af
    >
    > Change-Id: I79cc34a7436c06b3cca44fd02d04cb6989220a67
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328157
    > Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    > Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    > Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    > Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    > Cr-Commit-Position: refs/heads/main@{#92625}
    
    Change-Id: Id2fe5b84409c3cd095cd74e4f94d6b0fac20ebc1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5334543
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92627}

commit 61c730ad5fddec7638729ec6a92ad302ae5ab333
Author: Yahan Lu <yahan@iscas.ac.cn>
Date:   Fri Mar 1 06:03:02 2024 +0000

    Revert "[riscv][sandbox] Generalize indirect pointers"
    
    This reverts commit eb887e8d70f82e1dc0325fb2c4a479a9d8fdbdf5.
    
    Reason for revert: Build failed
    
    Original change's description:
    > [riscv][sandbox] Generalize indirect pointers
    >
    > Port commit 11c55ef5b4229f4fb6eb497aba9903d3252044e7
    > Port commit b0ae8877e53259eb5967a8f3e50a72c3630512af
    >
    > Change-Id: I79cc34a7436c06b3cca44fd02d04cb6989220a67
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328157
    > Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    > Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    > Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    > Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    > Cr-Commit-Position: refs/heads/main@{#92625}
    
    Change-Id: I5dcdf0637953c610a59765d09794b217fa33f0f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5333260
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92626}

commit eb887e8d70f82e1dc0325fb2c4a479a9d8fdbdf5
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Mar 1 10:51:45 2024 +0800

    [riscv][sandbox] Generalize indirect pointers
    
    Port commit 11c55ef5b4229f4fb6eb497aba9903d3252044e7
    Port commit b0ae8877e53259eb5967a8f3e50a72c3630512af
    
    Change-Id: I79cc34a7436c06b3cca44fd02d04cb6989220a67
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328157
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92625}

commit 5461427b8b5347c002f13033bfbe9e2dbadfc5cb
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Wed Feb 28 16:14:54 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of BinOp in turboshaft
    
    Bug: v8:12716
    Change-Id: I78691cf0d5c579ec556d5bdb3319b342d53ad5d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319783
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#92624}

commit 96effddf1dcb1e514432e39b4af4b2cd406d3201
Author: Eva Herencsárová <evih@chromium.org>
Date:   Thu Feb 29 17:13:33 2024 +0000

    Revert "[turboshaft] Skeleton of instruction selector unittests"
    
    This reverts commit 1b9069bb6ae25c5761cb1773860593041ff1d024.
    
    Reason for revert: Failures on the roll: https://ci.chromium.org/ui/p/chromium/builders/try/android_compile_dbg/1828799/overview
    
    (dependent revert https://crrev.com/c/5335699)
    
    Original change's description:
    > [turboshaft] Skeleton of instruction selector unittests
    >
    > Bug: v8:12783
    > Change-Id: If6c933e15767f8acc3582bfeb784748508c83353
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328569
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92604}
    
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Bug: v8:12783
    Change-Id: Id8ba2b85b3d36c1f20f699e56af3bf678d7ed4d0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331797
    Owners-Override: Eva Herencsárová <evih@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92623}

commit 9f4e86ad203f83e3fb688577f5d0a63f3b87b176
Author: Eva Herencsárová <evih@chromium.org>
Date:   Thu Feb 29 17:07:47 2024 +0000

    Revert "[turboshaft][arm64] Port/enable ISEL unittests part 1"
    
    This reverts commit a606d61f1ef7f0b17481c812fb57413c51f9833a.
    
    Reason for revert: Failures on the roll: https://ci.chromium.org/ui/p/chromium/builders/try/android_compile_dbg/1828799/overview
    
    Original change's description:
    > [turboshaft][arm64] Port/enable ISEL unittests part 1
    >
    > This ports and enables a few unit tests for the instruction selector
    > on Arm64. While enabling these tests, some of them didn't pass, so I
    > fixed the following issues in the Arm64 instruction selector:
    >
    >  * Better matching of `ChangeInt32ToInt64(x & 0xff)`.
    >   (in that case, both the ChangeInt32ToInt64 and &0xff can be done
    >    using specific addressing modes)
    >
    >  * Better matching of `(x << 16) >> 16)`
    >   (this is a sign extension, and can be done using specific
    >    addressing mode)
    >
    >  * Better matching of Loads that can do zero extension.
    >
    >  * `-cst + x` can now be compiled to `x - cst` (which avoids
    >    materializing the constant in a register)
    >
    >  * OverflowCheckedBinop can now do zero-extension (this was broken
    >    because of they are always used through projections rather than
    >    directly by sign-extending change ops).
    >
    > Bug: v8:12783
    > Change-Id: I91c42ea57ab07ff5bed648f5568f422a4f147140
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331549
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92609}
    
    Change-Id: I615bd273e6342199905e16e0cc7ba0d5021a93d4
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Bug: v8:12783
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5335699
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Owners-Override: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92622}

commit 5bdda7d5edcac16b698026b78c0eec6d179d3573
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Feb 29 15:55:54 2024 +0100

    [static-roots] Fix fast setting of a function callback return values
    
    This CL ensures that the upper 32-bits of the ReturnValue<T> are never
    ever modified by making SetInternal() function a bottleneck and using
    it everywhere.
    
    The issue was that setting a Smi value corrupted the upper 32-bits
    and subsequent setting of an undefined/null/true/false didn't
    recover them.
    
    Drive-by: use SetNonEmpty() for relevant use cases.
    
    Bug: v8:14445
    Change-Id: I7f3da1469afed2f5c23e670e13ef89fdd7bf573a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331689
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92621}

commit 77f65f0888e55e1fc721f055480e1bff69a11d65
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Feb 29 09:39:03 2024 -0500

    PPC/s390: [heap] Always use MemoryChunk:: for flag names
    
    Port bf91d67b666c787dbd08f71b154cfdc4cedbf808
    
    Original Commit Message:
    
        A refactor to make it easier to split the MemoryChunk from the
        MemoryChunkMetadata in the future.
        This CL was completely created with search&replace and shouldn't change
        any logic.
    
    R=sroettger@google.com, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Iafc9f2be133597f8d0a21edadc10cc7c1ac7deab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331842
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92620}

commit 5a3a5a251704d0687cd7998c12e5e2658a7dacdf
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Feb 29 15:20:33 2024 +0000

    [sandbox] Defend against corrupted Map in JSNativeContextSpecialization
    
    Normally, map.NextFreePropertyIndex() will always be larger than
    map.GetInObjectProperties(). However, an attacker able to corrupt heap
    memory can break this invariant by corrupting a Map object. In that
    case, BuildExtendPropertiesBackingStore in JSNativeContextSpecialization
    would get confused as it subtracts the two and expects a positive
    integer as result, which is then used as length of a vector. To defend
    against this, this CL simply inserts a SBXCHECK.
    
    This bug is quite similar to b/326355031.
    
    Bug: b/327518873
    Change-Id: I3b0aba22c26cffa7a05cffec0ddd8346dc938740
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5335696
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92619}

commit bb6891dac2cbeaa27b42172673010a0941bd032a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Feb 29 16:11:20 2024 +0100

    [fuzzer][wasm] Init expression fuzzer: Validate funcrefs
    
    Change-Id: I033cc09e690f4757b187386747c6697e6202a8fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331026
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92618}

commit e52df3832fd12e14b7b261b6680801d22ccbc539
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Wed Feb 28 16:27:06 2024 -0800

    [shared-struct] Exclude primitive's external pointer from serialization
    
    Explicitly state that serialization of external pointers stored in
    JSSynchronizationPrimitive is not supported to stop failing stress
    snapshot bots.
    
    Bug: v8:12547
    Change-Id: I06b8f89d7ddd546ea21e829c05ff63236c727fda
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331288
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#92617}

commit 8822d0064074d637fb10b6d324e0fd014d7a503e
Author: Scott Haseley <shaseley@chromium.org>
Date:   Wed Feb 28 13:38:03 2024 -0800

    Make Continuation Preserved Embedder Data more robust
    
    This CL fixes 3 issues with CPED found while simplifying blink's
    task attribution (and decreasing how frequently we propagate state).
    
    Note (A): When running a promise reaction job, the CPED stored on the
    reaction object is only restored if it's not undefined (done as an
    optimization). If CPED was modified prior to running a microtask, it's
    set to undefined after.
    
     1. From (A), CPED can never be set to Undefined, otherwise the CPED
        can be incorrect (it can leak the previous value). This isn't a
        problem for blink's Task Attribution currently since it ensures
        there's something to propagate for each JS callback, but we're
        working towards propagating less frequently, in which case Undefined
        will be valid / be the default when there's nothing to propagate.
    
     2. Also from (A), since the previous CPED value isn't restored after a
        microtask runs, CPED can become undefined when the embedder might
        expect it to still be set. In blink, this happens in event
        processing; for example, if CPED/task state is set before
        dispatching an event, it can become undefined between callbacks if
        there are multiple event listeners.
    
     3. Only promise reactions propagate CPED, but blink makes extensive
        use of the EnqueueMicrotask API. There was a hack in place in blink
        to fall back to a cached version of CPED, but that has edge cases
        (CPED and the cached version get out of sync when cleared in (A)).
    
    To fix (1) and (2), this CL caches the the Isolate's CPED before running
    microtasks and clears/restores it in RunMicrotasks. This leaves the
    optimization in place to only set the CPED if it's not undefined since
    it's being cleared at the start of the checkpoint and after each
    microtask.
    
    To fix (3), this CL adds the isolate CPED as a field in Microtask and
    makes all Microtask subclasses CPED-aware (new for EnqueueMicrotask and
    PromiseResolveThenableJobTask tasks). Blink _probably_ only needs the
    former, but being consistent seemed better here.
    
    We could alternatively do these in embedder, but at least (1) seems like
    something the API should support (unless we require embedders to clear
    CPED before a microtask checkpoint). (2) can be solved in the embedder
    by storing/restoring CPED after each callback, but it's simpler/cheaper
    to do in v8 and seems like a reasonable API guarantee. (3) could also be
    done in the embedder for EnqueueMicrotask, but it would also be more
    expensive (likely involving an GC allocation to wrap the isolate's
    CPED value).
    
    Bug: b/326368637
    Change-Id: If6b93c68146f0d8c01a59b4d37e869ec25829a9d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5316657
    Commit-Queue: Scott Haseley <shaseley@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92616}

commit c4be0a97f981ce08bad854684c941e4c98647025
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Feb 28 13:54:56 2024 -0500

    Fix build with gcc12
    
    - A number of erroneous flags have been added to BUILD.gn
    - wasm-init-expr.cc is creating an 8 byte buffer witch may be
      much smaller than max size_t output. We also need to make room
      for the `f` character and the terminating null character
    - inspector_protocol currently generates the following error
       ```
       error: loop variable ‘json_in’ of type ‘const std::string&’ {aka
       ‘const std::__cxx11::basic_string<char>&’} binds to a temporary
       constructed from type ‘const char* const’
       ```
    
    Change-Id: I1139899b2664e47d01ebc44f2e972fc4c0ec212d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331756
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92615}

commit d672ed2bd5894d29b7cc203921ec0909eebde922
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Feb 28 17:09:34 2024 +0100

    [test][handles] Fix some tests for conservative stack scanning
    
    - The DisableConservativeStackScanningScopeForTesting is narrowed as
      much as possible and comments are added to explain why it is needed.
    - Add two such scopes two disable CSS in two tests.
    
    Bug: v8:13270
    Change-Id: I1e2385aa1a1764fa590992c586a50db8fa916f63
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331541
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92614}

commit d5ba3f9c2b3a0525eaaba16e98ba8c6fbf8d34eb
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Feb 29 08:56:53 2024 -0500

    Skip turboshaft unittests on s390x
    
    ... TS instruction selectors are not fully supported yet.
    
    Change-Id: I64847963617cb3929245092c531bea5ef56619b1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5333690
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92613}

commit d22627e2125c85172c5a7caeff09bcb234aa1cbc
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Feb 29 14:22:27 2024 +0100

    [heap] undo the cppgc rename of LargePage
    
    crrev.com/c/5335159 renamed the cppgc LargePage by accident, undo.
    
    Bug: v8:13355 chromium:40849120
    Change-Id: Ifd8a1b944bc1630cb0d9e5bda20dd7cd92dc5566
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331695
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92612}

commit 76a5cea8606647b767792174876bc3bb501b1526
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Feb 29 14:14:03 2024 +0100

    [runtime] Inline CallHandlerInfo into FunctionTemplateInfo
    
    ... and remove the former.
    
    This CL removes one indirection when calling Api functions from
    non-optimized code.
    
    Bug: chromium:326505377
    Change-Id: I3a9cf9ab27bf2e6dfb3d9edf36441b5310d672bd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331530
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92611}

commit ac35f7d601dd7b82e3bbf5604ce986e0bba79edc
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Feb 23 09:41:27 2024 +0100

    [cleanup] Clang tidy fixes
    
    Change-Id: I54409824a68abb8c974114043e52e92ebf720be8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318115
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92610}

commit a606d61f1ef7f0b17481c812fb57413c51f9833a
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 29 09:50:13 2024 +0100

    [turboshaft][arm64] Port/enable ISEL unittests part 1
    
    This ports and enables a few unit tests for the instruction selector
    on Arm64. While enabling these tests, some of them didn't pass, so I
    fixed the following issues in the Arm64 instruction selector:
    
     * Better matching of `ChangeInt32ToInt64(x & 0xff)`.
      (in that case, both the ChangeInt32ToInt64 and &0xff can be done
       using specific addressing modes)
    
     * Better matching of `(x << 16) >> 16)`
      (this is a sign extension, and can be done using specific
       addressing mode)
    
     * Better matching of Loads that can do zero extension.
    
     * `-cst + x` can now be compiled to `x - cst` (which avoids
       materializing the constant in a register)
    
     * OverflowCheckedBinop can now do zero-extension (this was broken
       because of they are always used through projections rather than
       directly by sign-extending change ops).
    
    Bug: v8:12783
    Change-Id: I91c42ea57ab07ff5bed648f5568f422a4f147140
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331549
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92609}

commit bf91d67b666c787dbd08f71b154cfdc4cedbf808
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Feb 29 13:35:53 2024 +0100

    [heap] Always use MemoryChunk:: for flag names
    
    A refactor to make it easier to split the MemoryChunk from the
    MemoryChunkMetadata in the future.
    This CL was completely created with search&replace and shouldn't change
    any logic.
    
    Bug: v8:13355, chromium:1338512
    Change-Id: If7eebb4dba89c253b563c9535e5371a064e75e7f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331617
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92608}

commit 1817961ada6198e376054cd3b938b4be6bd944ef
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Feb 29 12:54:46 2024 +0100

    [heap] rename MemoryChunk classes
    
    Rename the MemoryChunk classes to make them more intuitive once we're
    moving the metadata out of the MemoryChunk.
    This renames:
    MemoryChunkHeader => MemoryChunk
    BasicMemoryChunk => MemoryChunkMetadata
    ReadOnlyPage => ReadOnlyPageMetadata
    MemoryChunk => MutablePageMetadata
    Page => PageMetadata
    LargePage => LargePageMetadata
    
    Change-Id: I6161fa56e884aa1f0dca51455dc8b9b4bc2d77d8
    Bug: v8:13355 chromium:40849120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5335159
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92607}

commit ba99e4bc964769f8c307e5f77e3f87e0df1d2457
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 29 12:31:53 2024 +0100

    [turboshaft] Maglev-to-ts: support a few more Int32 and Float64 ops
    
    Bug: v8:12783, v8:14581
    Change-Id: I41738e08d2fc6dcd325345cb3aeea82a0b68d92a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324565
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92606}

commit d8edfb3916a8138a7cc5353c9beeda76ca9234bd
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 29 08:46:10 2024 +0100

    [turboshaft][arm64] Add Arm64 instruction selector unittest (disabled)
    
    This looks like a fairly useless commit, but now we can port the
    unittests to Turboshaft one by one, and reviewing will be much easier
    (because we'll see the delta from Tubofan to Turboshaft, which we
    wouldn't see easily if we were to add the tests one by one).
    
    Bug: v8:12783
    Change-Id: I72ccf9fb84810cdd2e23f822d980bbcbd2f4ef48
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331548
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92605}

commit 1b9069bb6ae25c5761cb1773860593041ff1d024
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 29 11:51:26 2024 +0100

    [turboshaft] Skeleton of instruction selector unittests
    
    Bug: v8:12783
    Change-Id: If6c933e15767f8acc3582bfeb784748508c83353
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328569
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92604}

commit a7867100acb90faf809a6b6c6c61ecd594095d40
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 29 11:07:29 2024 +0100

    Reland "[turboshaft] Maglev-to-ts: support generic binops/unops"
    
    With --single-generation, the unit test for generic operations
    triggers array transitions, which are not yet supported by the
    Maglev->Turboshaft graph builder. So, we skip this test in this
    configuration.
    
    Original change's description:
    > [turboshaft] Maglev-to-ts: support generic binops/unops
    >
    > Bug: v8:12783, v8:14581
    > Change-Id: I7dcc24d4ac5cf0f5306dd299ee18a8e9f1a80694
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321528
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92554}
    
    Bug: v8:12783, v8:14581
    Change-Id: I6c7dfc55fa61a20f7dc8fdc47d932a721313b1aa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5335157
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92603}

commit e523a94466a38c84b07ead9ded39481bd46778c2
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Feb 29 10:46:04 2024 +0100

    [wasm] Port the wasm-to-js wrapper to Turboshaft
    
    R=ahaas@chromium.org
    
    Bug: v8:14108
    Change-Id: I60a9ea6f88407ae41286f1bbf258fd0983013e4f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5326176
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92602}

commit 76ae04522173630185977fb72f3fc8783a3a9911
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Feb 29 09:04:25 2024 +0000

    [sandbox] Fix stack out-of-bounds write when heap memory is corrupted
    
    In Intl::ToICUUnicodeString we have a fast path for small strings where
    the contents is copied into an 80-byte large stack-allocated buffer.
    However, the check to determine whether the string was small enough was
    performed on signed integers. As an attacker could corrupt the on-heap
    string length to be a negative number, that check would pass and the
    code would continue with essentially a wild memcpy onto the stack.
    
    Bug: b/327473424
    Change-Id: I24c0fb7b7b2b40b24bf8a129a17c9bb8a1904d5b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5335156
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92601}

commit 35e6f1998faa7575cbdeb54903a1ea172b2c7bb1
Author: Marja Hölttä <marja@chromium.org>
Date:   Fri Feb 23 13:03:13 2024 +0100

    Reland "[const tracking let] Turn const tracking let on by default"
    
    This is a reland of commit b54de357db5627771466b082d986b471a12be087
    
    The fix was: https://chromium-review.googlesource.com/c/v8/v8/+/5331532
    
    Original change's description:
    > [const tracking let] Turn const tracking let on by default
    >
    > Bug: v8:13567
    > Change-Id: Idf294a4a63c16d34ca442c8752eba0addaa4cf8f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318000
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Marja Hölttä <marja@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92551}
    
    Bug: v8:13567
    Change-Id: I9682432a1adaece62bd152772e5d994c39e46c66
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331534
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92600}

commit fdd351654e9f50597b8ab028d87f088ec18c551e
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Feb 28 17:00:42 2024 +0100

    [d8][inspector][test] Fix pumping the message loop
    
    When pumping the message loop, we may trigger the execution of a
    non-nestable task (e.g., a stackless GC), which assumes that there are
    no handles on the current stack. With v8_enable_direct_local=true
    (which requires conservative stack scanning), violating this invariant
    may result in a crash. This CL fixes d8 and the inspector task runner,
    installing a scope to enforce scanning the stack in this case. It also
    fixes a unit test that was occasionally failing with conservative stack
    scanning.
    
    Bug: v8:13270
    Change-Id: I48916866b7bd4ab235736073b66827e71d78feb8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331539
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92599}

commit 57b37fee26d6d802e2d8f4e1a32154b8690f9ff7
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Wed Feb 28 18:09:39 2024 +0100

    Avoid allocation in std::function<> for MarkCodeForDeoptimization
    
    Looking at the heaptrack profile, the allocations needed for
    std::function<> in MarkCodeForDeoptimization are most frequent ones
    (at least on NewsSite-Nuxt and
    TodoMVC-JavaScript-ES6-Webpack-Complex-DOM stories).
    
    For the context:
    std::function uses the type-erasure idiom and stores a large-enough
    callable object out-of-line. Use a template parameter instead to avoid
    allocations.
    
    Bug: 324462735
    Change-Id: Ib1835d93b19a43c53262f387101546c79ac863be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331717
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92598}

commit 4ff2d3237eb25eb44982dea2cb4591fc4f7ecbe7
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Feb 28 18:48:55 2024 +0100

    [runtime] Prepare for inlining CallHandlerInfo into FunctionTemplateInfo
    
    ... which will allow to remove one indirection when calling Api
    functions.
    
    This CL
     - introduces custom visitor for FunctionTemplateInfo,
     - stores flags, length and instance type values as raw data and
       packs length and instance type into 32-bits value,
     - stores FunctionTemplateInfo instead of CallHandlerInfo as an
       instance call handler for callable ObjectTemplates.
    
    The latter comes with a memory overhead because FunctionTemplateInfo is
    bigger than CallHandlerInfo but it's ok since callable ObjectTemplates
    are rarely used in practice. It also temporarily adds an additional
    indirection when calling callable Api objects until the CallHandlerInfo
    is inlined into FunctionTemplateInfo.
    
    Bug: chromium:326505377
    Change-Id: I0a6645f228f413ff5412403e05aee1dfceb65966
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5329250
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92597}

commit e50ab13bbfaaf72717fd73d9a01434e4c3c1a0a8
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Feb 28 17:03:21 2024 +0800

    [loong64][compiler] Port recent changes about fast C calls
    
    Port commit e19a4024f6b7bd8ceb22a5267b878ee2bd20807d
    - Always emit safepoint for fast C calls
    
    Port commit dab24c400946493724fa527b3cd65516a4ecb654
    - Add fake handles slots to safepoint table
    
    Port commit 1da38a4017181e548ddd031c0902405c262020e1
    - Do not use SetIsolateDataSlots::kYes in CEntry
    
    Port commit dd8d0b44d5d5b4bc3912026bf78f25ed3cafda1a
    - Support stack iteration from fast C calls
    
    Change-Id: I882a56e3d04c1098e56b61ab6d67b86550c07d83
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5329692
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92596}

commit 4b2aee4f07959b7cc482f128fe844fffc9e092b9
Author: Eva Herencsarova <evih@chromium.org>
Date:   Wed Feb 28 17:50:08 2024 +0100

    [test][wasm] Reenable random module generation
    
    After fixes, we should always generate a valid wasm module
    
    Fixed: v8:14642
    Change-Id: If3ac29dd1681185c2e06cd549dbf035bb023e0fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331718
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92595}

commit 88f24f5ae17dd6c90aef6b4d15fdb014aaf548c2
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Mon Feb 26 12:04:51 2024 -0800

    [shared-struct] Move WaiterQueueNode into JS JSSynchronizationPrimitive
    
    Currently the futex implementation for JSAtomicsMutex and
    JSAtomicsCondition uses an ExternalPointerHandle encoded in its
    uint32 state field while also keeping a reference in the isolate to
    handle the GC marking. This approach works, but prevent us from having
    more than one primitive waiting at a time in the same thread, which
    could happen in the upcoming async lock/wait implementation.
    
    This CL moves the ExternalPointerHandle out of the state field and into
    a regular field so it can be visited whenever its synchronization
    primitive is visited.
    
    Bug: v8:12547
    Change-Id: I39958f503ce7f88d9cc461ad8b31e892f6b2e6f0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5274251
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#92594}

commit 1b95623017e01ae81eccc48f379eba9cbee09d9f
Author: Scott Haseley <shaseley@chromium.org>
Date:   Tue Feb 27 17:53:46 2024 -0800

    Remove Context::[Get|Set]ContinuationPreservedEmbedderData()
    
    Per-Context continuation preserved embedder data is being deprecated in
    favor of per-Isolate data which is more performant for blink use cases
    and is a better conceptual fit.
    
    Note: These APIs were previously marked as V8_DEPRECATE_SOON. The
    V8_DEPRECATE skip was inadventently skipped, but the APIs have been
    marked as V8_DEPRECATE_SOON for 3 versions. They are being removed
    without the intermediate step as an exception.
    
    Bug: b/40234574
    Change-Id: I5a9dd251c15cca50ad1237f0367215b0db5a1edb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5330039
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Scott Haseley <shaseley@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92593}

commit 82692993d30c4bb77965e2b9b757c9369167d56f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Feb 28 08:18:45 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/3d82e4a..6f2ff82
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/135784c..1db15eb
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/db06f03..98ad12d
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/fa6a888..56ba67e
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/af26c1d..6b84fbf
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/aff3a0b..b5fe27d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8754834720372858897
    
    Change-Id: Iefe6aecb1ac1efb9ee063362d72bb7452877f2a2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5332271
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92592}

commit a6a3724e07b55162d58e71aeedde6e7ad65e68c2
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Feb 28 16:42:39 2024 +0100

    [wasm] Update spec tests
    
    R=mliedtke@chromium.org
    CC=thibaudm@chromium.org
    
    Bug: v8:14643, v8:14644
    Change-Id: I74db8671ddd0ee480c3483975ec688e5d5016efd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331538
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92591}

commit ad762b5fcdfba2d53ae292e95b3a9686a295ea13
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Feb 28 16:14:15 2024 +0100

    [wasm] Fix Suspender body descriptor
    
    The custom body descriptor did not visit the Suspender object header.
    Use the default JS object body descriptor instead, which visits
    everything.
    Therefore, also change the {has_js_frames} property type from
    uint32_t to Smi so that all properties are tagged.
    
    R=ahaas@chromium.org
    
    Fixed: 326106962
    Change-Id: Id07f65b99ecf783c3cdfbb5c8e654ef4f67ff145
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331537
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92590}

commit f79093ca5915f941c7f8b1b5b102121a7d6a007c
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Feb 28 16:24:59 2024 +0100

    [wasm] Avoid storing the whole signature for fast API calls
    
    Booleans in C++ are a single bytes, and if loaded into a register, the
    upper bytes in the register may be non-zero. When the C++ bool gets
    converted into a WebAssembly I32, the values in the upper bytes of the
    register therefore become observable if no explict zero-extension is
    happening in WebAssembly. Therefore WebAssembly has to know if the
    return value of a fast API function is boolean, so that the result value
    gets converted.
    
    So far the whole signature of the fast API function was provided to the
    wasm compiler, which included the information if the return value was
    boolean. However, 1) the whole signature does not seem to be needed, and
    2) the signature may get deallocated before it gets accessed by the
    compilation. This can happen because each isolate has its own copy of
    the signature, but the wasm compilers don't have access to the signature
    of the isolate, only to a pointer to the signature of the last
    registered isolate in the NativeModule. Therefore, if the last
    registered isolate dies before the wasm compiler accesses the signature,
    then the wasm compiler accesses a stale pointer.
    
    Therefore the NativeModule now only stores the information if the return
    type is bool.
    
    Additionally the array in the NativeModule that stores if the return
    type is bool is changed to std::atomics<bool> to avoid a TSAN report.
    
    R=evih@chromium.org
    
    Bug: v8:14638
    Change-Id: I7ae1b9c0a088a9f12c4c127d1189cd4537cbd3ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331712
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92589}

commit 3295097575e8b4fd4aa46018e03ac4f669130dc4
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Feb 28 15:14:43 2024 +0100

    [wasm] FunctionBodyDecoder: Fix ref.eq in unreachable code
    
    We might have nothing on the stack in unreachable code when decoding a
    ref.eq.
    
    Bug: v8:14616, v8:14642
    Change-Id: I2f47433c75f36e84cead1ac0a5bd088497eb8e2f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331713
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92588}

commit c5327b007e7de0f7ca771a3fc56ddae2db2a533b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Feb 28 15:04:58 2024 +0100

    [fuzzer][wasm] Align section generation better with order in module
    
    Otherwise the init expressions for tables end up potentially using
    global.get which they may not as the global section appears after the
    table section.
    
    Bug: v8:14642
    Change-Id: Ie4cdc5fc52f600c8005e4e5ec137f3a8717c3816
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331710
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92587}

commit d5b54b106edc7c7469cc34c099baa13e1bee65bd
Author: Marja Hölttä <marja@chromium.org>
Date:   Wed Feb 28 14:26:52 2024 +0100

    [const tracking let] Fix context depth
    
    When we were bailing out because the value we're writing is already
    not a constant, the context depth was wrong.
    
    Bug: v8:13567, b/327247469
    Change-Id: Ia50d85a653ed67327942a9e35f685ca90aae7cad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331532
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92586}

commit 04fa84d3ece44e6ab09685e38ffece61767cc86f
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Feb 28 13:35:19 2024 +0100

    [wasm] Disable random module generation
    
    We sometimes generate invalid modules. This is a bug. For now, just
    disable the test and leave a TODO to reenable it later when the bug is
    fixed.
    
    R=mliedtke@chromium.org
    
    Bug: v8:14642
    Change-Id: I4ad6fca254af573182cc525ef2cd3102a10c10a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328573
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92585}

commit 1048caa3f67b0af7fe0039478ad2deddb5b1b4ea
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Feb 28 13:31:16 2024 +0100

    [wasm][test] Enable staging features in test
    
    The modules generated by %WasmGenerateRandomModule use staged features,
    hence the test needs to enable them.
    
    This CL also adds comments in both places to keep them in sync.
    
    R=mliedtke@chromium.org
    
    Bug: v8:14642
    Change-Id: If60f75fce8fc1ac91f44895d1acacdb753a20990
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5329249
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92584}

commit faa66682fbdb6568c524ab4a9985f2b21bc9a258
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Feb 28 17:25:03 2024 +0800

    [loong64][mips64][sandbox] Refactor Code::source_position_table
    
    Port commit 13f886c703b435e148a6be970b078a3e8c706549
    
    Change-Id: Iab78208ebeb90dcea3c1088ec8970c920b8a8796
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5329693
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92583}

commit 123d6131e7e633936a2aceb370cfd269467e0cc2
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Feb 27 16:26:54 2024 +0100

    [compiler][fastcall][handles] Move AdaptLocalArgument
    
    This CL moves method AdaptLocalArgument so that it is accessible
    via the __ macro. This method is used to correctly pass parameters
    of type v8::Local<T>; notice that with v8_enable_direct_local=true,
    which requires conservative stack scanning, locals are just direct
    pointers to objects.
    
    It also merges this method with AdaptHandlifiedArgument, that was
    used in the wasm compiler for the same purpose.
    
    Bug: v8:13270
    Change-Id: I4ce39eb745dda7fc5b0dba93431d95dd82b9a2ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321466
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92582}

commit a9d553d24c4d1e97821a8fe331fc00182bd6f77f
Author: Marja Hölttä <marja@chromium.org>
Date:   Wed Feb 28 11:00:25 2024 +0000

    Revert "[const tracking let] Turn const tracking let on by default"
    
    This reverts commit b54de357db5627771466b082d986b471a12be087.
    
    Reason for revert: https://issues.chromium.org/issues/327247469 ; apparently several memory corruption -style issues
    
    Original change's description:
    > [const tracking let] Turn const tracking let on by default
    >
    > Bug: v8:13567
    > Change-Id: Idf294a4a63c16d34ca442c8752eba0addaa4cf8f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318000
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Marja Hölttä <marja@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92551}
    
    Bug: v8:13567
    Change-Id: Ia16c2b65b7294a60c68a0af28961a7c80c6ade44
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328572
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92581}

commit 6270ee3a021c76c1819f7175ecf69e0f2c8822a3
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Feb 27 18:03:31 2024 +0100

    [wasm] Skip generate-random-module test on official builds
    
    Official builds do not implement the runtime function (it always returns
    the undefined value), hence skip the test there.
    
    R=jkummerow@chromium.org
    
    Fixed: v8:14641
    Cq-Include-Trybots: luci.v8.try:v8_linux64_official_rel
    Change-Id: I71396bae13f5e2cc441e8cc290947ac0ae7ae6dd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328107
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92580}

commit 3a115ba1598804cf307881f663e55b1bac635e73
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Wed Feb 28 10:53:28 2024 +0100

    Reapply "cppgc: Implement --cppgc-random-gc-interval=<n>."
    
    The test is fixed for stress-incremental-marking configuration.
    
    Original change's description:
    > cppgc: Implement --cppgc-random-gc-interval=<n>.
    >
    > The flag is analogous to the V8 counterpart, which runs GCs at random
    > intervals (from 0 to n). The flag is useful for fuzzing bots.
    >
    > Bug: v8:14590
    > Change-Id: Id9b115a0fecfe85176a512ef64b0f920c9129d8b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5260141
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92385}
    
    Bug: v8:14590
    Change-Id: Ie22750161809839d0ddcdbbd8c33d7d311032196
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328106
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92579}

commit 9353164a3379274201eef83c0351c28690cd15a2
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Feb 28 11:56:00 2024 +0100

    [wasm][fastcall][handles] Fix fast API calls for direct locals
    
    With v8_enable_direct_local=true, which requires conservative stack
    scanning, locals are just direct pointers to objects. This CL fixes
    fast API calls from wasm for well-known imports, to correctly support
    direct locals.
    
    Bug: v8:13270
    Change-Id: I0eb62cd4c805d7f405f1047dbda8a26764b5d566
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5327550
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92578}

commit 5468004eb8f1759f794939db8ddaf3b553595a7b
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Feb 28 10:42:50 2024 +0100

    [turboshaft][fastcall][handles] Move AdaptLocalArgument
    
    This CL moves method AdaptLocalArgument so that it is accessible
    via the __ macro. This method is used to correctly pass parameters
    of type v8::Local<T>; notice that with v8_enable_direct_local=true,
    which requires conservative stack scanning, locals are just direct
    pointers to objects.
    
    Bug: v8:13270
    Change-Id: If0eb0ec77dfa83bb7504d0044510c22878a8fbcf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5327547
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92577}

commit bc29e44490b39c63bd6153a2cb4e0f206b0152fc
Author: Patrick Thier <pthier@chromium.org>
Date:   Wed Feb 28 10:47:45 2024 +0000

    Revert "[regexp] Optimizing capture group filtering in Experimental"
    
    This reverts commit be15181ceb4a717e192291a543b552a0656c9d3f.
    
    Reason for revert: Breaks FYI bots: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20fyi/30658/overview
    
    Original change's description:
    > [regexp] Optimizing capture group filtering in Experimental
    >
    > Instead of dynamically clearing registers during the regexp's
    > execution, those are filtered after the final match is found. This
    > changes the bytecode's size from quadratic to linear in the size of the
    > regexp.
    >
    > This requires to store, in each thread, the time where each capture
    > groups and quantifiers were last entered, using a global `clock`. Then,
    > using a bytecode encoding of the AST containing only capture groups and
    > quantifiers, we traverse the AST to determine which capture group
    > should be kept.
    >
    > This work was supervised by Aurèle Barrière, from SYSTEMF at EPFL.
    >
    > Bug: v8:14097
    > Change-Id: Ia6bbbe7b52b4a8a8250ed46f29d9bf139a22f024
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258237
    > Reviewed-by: Patrick Thier <pthier@chromium.org>
    > Commit-Queue: Patrick Thier <pthier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92552}
    
    Bug: v8:14097
    Change-Id: Ib5cae913c93be522fb72a000d670675ec2d2884a
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5331029
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92576}

commit 104036a2890d97a778870b4f3d66afeda70ba9f0
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Feb 28 09:32:17 2024 +0800

    [loong64][mips64][sandbox] First step towards fine-grained entrypoint tags for builtins
    
    Port commit 25df12c34d2c644cb54a9e1ff8dca6261f685296
    
    Also port commit 3fdb4d596b84acdbe1fc3db6d9f81490d80d2586
    - Use kInvalidEntrypointTag for some internal ASM builtin
    
    Change-Id: Ie436cb9c4b3d45329377bad3cdfc08be2c6b5056
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307474
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92575}

commit ae099690284813c30aa0ae46bb116d8076c1a24f
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Feb 28 17:43:15 2024 +0800

    [loong64][mips64][turboshaft] Re-enable maglev-to-ts
    
    Port commit fdd67fafa12e1e43931cf1fb586313701f5daaa9
    
    Change-Id: Ib2ad307e94de5a0c6bbace139bf8b98a75a7f96c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5329695
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#92574}

commit d01ae0d6650dfddae4cc8d3dc8ebf62cf42feda4
Author: Simon Zünd <szuend@chromium.org>
Date:   Wed Feb 28 09:50:57 2024 +0100

    [inspector] Consider getting $0..$1 and $_ from window side-effect free
    
    R=bmeurer@chromium.org
    
    Fixed: 326117121
    Change-Id: I6390bf672e5f3f5b881a0e8eedcb1080d6766824
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328567
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92573}

commit c376971cdb356e48e7fa339d9171932d36c27caf
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Feb 28 08:51:05 2024 +0000

    [sandbox] Harden parser against type confusions after heap corruption
    
    If an attacker corrupts a in-sandbox Script object or the unique_id of
    an SFI, we can get confused about which type of Scope object we're
    operating on during parsing. This CL simply converts some existing
    DCHECKs into SBXCHECKs to defend against that.
    
    Bug: b/327245454
    Change-Id: I44181d1fc7b3eade3c13b11991f366f4bf5e1133
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328568
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92572}

commit 055c12cedf2811c782c9f4916ef92c14a1454d3d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Feb 27 15:53:00 2024 +0100

    [fuzzer][wasm] Fuzz global.get in initializer expressions
    
    Change-Id: Ia4f2d4c97c380e1f36082f1b63284d59f8a4b540
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5327548
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92571}

commit ab84e8e8baf50425ff081e0f629404660cdb0702
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Feb 27 16:30:08 2024 +0100

    [fuzzer][wasm] Add fuzzer for init expressions
    
    This CL adds a new fuzzer that fuzzes initializer expressions.
    Initializers (e.g. for globals, tables, ...) are evaluated using an
    interpreter and therefore don't share a common implementation with the
    functions that are run via Liftoff Or Turbofan.
    The fuzzer creates globals with random initializers and corresponding
    functions with the same body as these initializers.
    
    Then, the functions are executed and compared to the initial value of
    the global.
    
    Possible next steps:
    - Fuzz more expressions in the initializers (e.g. `global.get`)
    - Use initializers not only in globals but also for Tables etc.?
    
    Change-Id: I76ea8aabe9792c5c749da87a7b49277e37acb136
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324481
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92570}

commit 89366ea6695b8f6285ce47174c4f0d2b8579c195
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Feb 27 14:02:43 2024 +0100

    [wasm] Prepare pipeline for turboshaft import wrappers
    
    Drive-by: mark --turboshaft-wasm-wrappers as experimental.
    
    R=ahaas@chromium.org
    
    Bug: v8:14108
    Change-Id: I0a1484eeb78cc3342d9cfdb3cf9cbc000a6af3d7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5326156
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92569}

commit 8abfc5351ce9079dfacc6a50b06b60d21bcec2e2
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Feb 27 20:06:40 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/8af52f1..3d82e4a
    
    Rolling buildtools/linux64: git_revision:6253a39dbc436d292e3567faa637c9d3302e1e5f..git_revision:f19d5817e7ba85c2fda92e2697be11a4465d3267
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/6f4a0d6..fa6a888
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/4df6114..af26c1d
    
    Rolling third_party/fuchsia-sdk/sdk: 18.20240215.1.1..version:18.20240227.3.1
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/5b35c9f..204deaa
    
    Roll created at https://cr-buildbucket.appspot.com/build/8754880020298951281
    
    Change-Id: Ia32239ba50e1708ed7c749665fa15001eab28f35
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5327770
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92568}

commit 62badb069298351bad0615dc8eea2d5a526ae3e4
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Feb 27 07:57:32 2024 -0800

    Add backwards compat explainer to value-serializer
    
    Change-Id: Ib026a938d2bb37971c8a595aafb0fa12a1588adc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324811
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92567}

commit 3e80847effc3aaa31fb62b54350c6605041d72f0
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Feb 27 17:19:45 2024 +0000

    [sandbox] Fix unsafe switch in FeedbackMetadata::GetSlotSize
    
    This is similar to b/326086002: we have an exhaustive switch over an
    enum with no default case and are missing a `return` or `UNREACHABLE`
    after the switch, causing the compiler to generate unsafe code in case
    an invalid enum value is used, which can happen in the sandbox attacker
    model. The fix is the same as for b/326086002: add the `UNREACHABLE`.
    
    Bug: b/326086002
    Change-Id: I9455b9e36850e39e9635ca7f6555487c40e8626a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5328109
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92566}

commit 7d3f11e7947bf49ca5de8840ac15e8ff053e0b51
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Feb 27 08:19:07 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/4e0feeb..8af52f1
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/9eedca5..135784c
    
    Rolling buildtools/linux64: git_revision:5787e994aa4cb6cdb09c2c72ae6f1c6a7f1cf91a..git_revision:6253a39dbc436d292e3567faa637c9d3302e1e5f
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/08b8dfd..aff3a0b
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/ee25a45..5a776b1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8754925317130634881
    
    Change-Id: I08a89985fb218b26e6872655a205da9af1d4f438
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5327846
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92565}

commit 0dca1b002539bef2f49097e0872a6bef3b595fec
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Feb 27 16:24:17 2024 +0100

    [json] Extract JSDataObjectBuilder code to use an iterator
    
    Extract the fast -> slow path iteration logic in BuildJsonObject to a
    helper on JSDataObjectBuilder which iterates an iterator provided by
    BuildJsonObject. This moves the complexity of switching between fast and
    slow property initialisation into the helper, and the only thing the
    iterator has to do is allow re-visiting the values visited in the fast
    path.
    
    Change-Id: I8f567d284c8b537d9f9d986128ffba3d2da09289
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321529
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92564}

commit f5fefaedb545a39041256dd867cbd844f2a99015
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Feb 27 16:44:57 2024 +0000

    Revert "Reland "[wasm][flags] Add implications from --no-turbofan""
    
    This reverts commit f08cc61038e2b224c4ccfa63cf9f538585e5eb60.
    
    Reason for revert: Still fails tests upstream, see https://crbug.com/v8/14640
    
    Original change's description:
    > Reland "[wasm][flags] Add implications from --no-turbofan"
    >
    > This is a reland of commit 7222c3b6f1bfe6caaadd58eb249dcab57db5502e.
    >
    > As Liftoff still has bailouts for unsupported CPU features and
    > experimental Wasm features, we can't fully disallow Turbofan compilation
    > yet.
    >
    > Original change's description:
    > > [wasm][flags] Add implications from --no-turbofan
    > >
    > > --no-turbofan should also disable tiering in Wasm, and disable asm.js
    > > validation to force asm code through the JS pipeline.
    > >
    > > We also add CHECKs that we only compile Turbofan Wasm code if --turbofan
    > > is enabled and --liftoff-only is disabled.
    > > In order to pass that, we disable some tests that explicitly execute
    > > Turbofan compilation in the nooptimization variant. We also add some
    > > "--validate-asm" flags to tests that depend on that. The test-runner
    > > will then automatically skip those tests in the nooptimization variant.
    > >
    > > R=saelo@chromium.org, ahaas@chromium.org
    > >
    > > Change-Id: Ic4e5f6db0c48c6f5b51b071ab001d217a587eaf6
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317610
    > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#92511}
    >
    > Change-Id: I1877bd18c24533878f5922264110ca2986c71171
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324361
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92550}
    
    Change-Id: I99ee6ac62337469817043cc56c21be828f6d0ff4
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Bug: v8:14640
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5326933
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Clemens Backes <clemensb@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92563}

commit 179110353d97ecb426100188333531b43a6b3b7d
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Feb 27 16:16:01 2024 +0100

    [wasm][liftoff] Missing test for security bug
    
    Bug: chromium:1462951
    Change-Id: I249415ed55d19feab48a27c3869a4a6ceeb72bfe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319506
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92562}

commit 0ac8bb2b98f281d766953277054e55bd7f62e2e2
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Feb 27 15:50:42 2024 +0100

    [wasm][turboshaft] Wrap locals at loop exit due to well-known import
    
    Bug: chromium:326894018
    Change-Id: I4ad9e9cc48f0cff108cff3824092cd0675ecf1c4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324480
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92561}

commit b1423d50e0d49a445b61902b73c73e8e917fb22c
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Feb 27 16:59:17 2024 +0100

    [test] Disable generate-random-module on non-simd
    
    Failure: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20debug/47366/overview
    
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Change-Id: Ic1eaea692b4d737a8384ed12ad10583bb57942e6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5323856
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92560}

commit fee4fda3b1ef6e0e9ecd9400c4c911f132cb7808
Author: Eva Herencsárová <evih@chromium.org>
Date:   Tue Feb 27 15:41:46 2024 +0000

    Revert "[turboshaft] Maglev-to-ts: support generic binops/unops"
    
    This reverts commit 6776a27d5fb0cab20cbc5a8c3a1e271d73df5207.
    
    Reason for revert: Fails on https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20debug/47366/overview
    
    Original change's description:
    > [turboshaft] Maglev-to-ts: support generic binops/unops
    >
    > Bug: v8:12783, v8:14581
    > Change-Id: I7dcc24d4ac5cf0f5306dd299ee18a8e9f1a80694
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321528
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92554}
    
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Bug: v8:12783, v8:14581
    Change-Id: Idc231e156c7ace35ea3760e34946131dc705180f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5327706
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Owners-Override: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92559}

commit 5b023f03ce36bdc269656c4dc02466306edaee8f
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Feb 23 13:02:14 2024 +0100

    [turboshaft] Recover END_IF removal binary size increase
    
    Removing END_IF caused a binary size regression; recover this by:
    
      a) Storing the state in an `if` wrapping the `for`, so that clang's
         loop unrolling is able to detect the fixed iteration count,
      b) Forcing the unrolling of the two iteration IF loop with a pragma
         (this causes a compile-time error if it fails to unroll, and the
         unrolling is necessary for eliminating the various iteration
         checks),
      c) Re-introducing helper methods that operate on the state, which
         are allowed to not be inlined.
    
    Change-Id: I9eb647c85e43ea70990cab0c355b9cd699c2f108
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318121
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92558}

commit 7b746939d0482247b1a1d30fbcd9d9808ca77658
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Feb 27 15:39:51 2024 +0100

    [test] Disable fast-api-calls-with-wellknown-imports on TSAN
    
    Disabling because it closes the tree.
    Seems to be flaky since: https://crrev.com/872c734f6aea41ce2a7772decaea3e8f693fe3fc
    
    Failure: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20isolates/29400/steps
    
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Change-Id: Icc728f0b4e5e0dd3e1a57e02c2a2fef740ea0c1f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5327546
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92557}

commit 2ac9eb2dea6b940f2e1dd37a08b47904113feecf
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Feb 27 14:35:51 2024 +0100

    [turboshaft] Replace Tagged with Object
    
    Bug: v8:12783
    Change-Id: Ie33efb4806d4a2eb104dac45564127ceac1bb077
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5323854
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92556}

commit a40a983f310f7d41e4d5e008bc6138de6fba4a00
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Feb 27 14:28:25 2024 +0100

    [wasm-compile-fuzzer][cleanup] Typo fix, make function constexpr
    
    Change-Id: I9454a2fd71b8537b537e2121a73008fac53b3c74
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5323853
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92555}

commit 6776a27d5fb0cab20cbc5a8c3a1e271d73df5207
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Feb 27 14:05:57 2024 +0100

    [turboshaft] Maglev-to-ts: support generic binops/unops
    
    Bug: v8:12783, v8:14581
    Change-Id: I7dcc24d4ac5cf0f5306dd299ee18a8e9f1a80694
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321528
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92554}

commit 8037ca7811208b414b42ef491196a2ebc0fe2b69
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Feb 27 14:02:15 2024 +0100

    [wasm] Add WasmGenerateRandomModule runtime function
    
    Add a runtime function which generates a "random" module from given
    input bytes. If no input is given, the random input is taken from the
    isolate's RNG, otherwise input bytes are derived from the input.
    
    This runtime function only actually generates a random module in
    non-official builds. In official builds it always returns undefined (to
    save binary size).
    
    R=jkummerow@chromium.org
    
    Bug: v8:14637
    Change-Id: If00b5a8a6977a1925e86155343fda0e31646baec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324364
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92553}

commit be15181ceb4a717e192291a543b552a0656c9d3f
Author: Ludovic Mermod <ludovic.mermod@gmail.com>
Date:   Fri Feb 23 22:42:51 2024 +0100

    [regexp] Optimizing capture group filtering in Experimental
    
    Instead of dynamically clearing registers during the regexp's
    execution, those are filtered after the final match is found. This
    changes the bytecode's size from quadratic to linear in the size of the
    regexp.
    
    This requires to store, in each thread, the time where each capture
    groups and quantifiers were last entered, using a global `clock`. Then,
    using a bytecode encoding of the AST containing only capture groups and
    quantifiers, we traverse the AST to determine which capture group
    should be kept.
    
    This work was supervised by Aurèle Barrière, from SYSTEMF at EPFL.
    
    Bug: v8:14097
    Change-Id: Ia6bbbe7b52b4a8a8250ed46f29d9bf139a22f024
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258237
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92552}

commit b54de357db5627771466b082d986b471a12be087
Author: Marja Hölttä <marja@chromium.org>
Date:   Fri Feb 23 13:03:13 2024 +0100

    [const tracking let] Turn const tracking let on by default
    
    Bug: v8:13567
    Change-Id: Idf294a4a63c16d34ca442c8752eba0addaa4cf8f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318000
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92551}

commit f08cc61038e2b224c4ccfa63cf9f538585e5eb60
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Feb 26 15:21:42 2024 +0100

    Reland "[wasm][flags] Add implications from --no-turbofan"
    
    This is a reland of commit 7222c3b6f1bfe6caaadd58eb249dcab57db5502e.
    
    As Liftoff still has bailouts for unsupported CPU features and
    experimental Wasm features, we can't fully disallow Turbofan compilation
    yet.
    
    Original change's description:
    > [wasm][flags] Add implications from --no-turbofan
    >
    > --no-turbofan should also disable tiering in Wasm, and disable asm.js
    > validation to force asm code through the JS pipeline.
    >
    > We also add CHECKs that we only compile Turbofan Wasm code if --turbofan
    > is enabled and --liftoff-only is disabled.
    > In order to pass that, we disable some tests that explicitly execute
    > Turbofan compilation in the nooptimization variant. We also add some
    > "--validate-asm" flags to tests that depend on that. The test-runner
    > will then automatically skip those tests in the nooptimization variant.
    >
    > R=saelo@chromium.org, ahaas@chromium.org
    >
    > Change-Id: Ic4e5f6db0c48c6f5b51b071ab001d217a587eaf6
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317610
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92511}
    
    Change-Id: I1877bd18c24533878f5922264110ca2986c71171
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324361
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92550}

commit f43bbfa51a94b5c1833bd377981ece7a45a8e1e7
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Feb 27 02:00:09 2024 +0100

    [wasm][turboshaft] Skip wasm lowering for wrappers
    
    In the wrapper graphs, only two operations rely on the wasm lowering
    phase currently: IsNull and AnnotateWasmType. Replace uses of IsNull
    with the equivalent lowered code (like we did for TurboFan already) and
    remove AnnotateWasmType.
    
    R=mliedtke@chromium.org
    
    Bug: v8:14108
    Change-Id: Iab057a9dd16387e7331a172f76448a27205afeb9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324445
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92549}

commit 47da4bed3927c26c985c4703d3600ade2162b8cf
Author: Eric Leese <leese@chromium.org>
Date:   Tue Feb 27 11:51:09 2024 +0100

    Revert "Remove PromiseOnStack"
    
    This reverts commit 9901577dba02a46bcbcbeb36b0b8ded630864029.
    
    Reason for revert: Broke async call stacks on some build configurations.
    
    Bug: b:327085705
    
    Original change's description:
    > Remove PromiseOnStack
    >
    > Follow-up to https://crrev.com/c/v8/v8/+/5291617
    >
    > We no longer use the promise stack.
    >
    > Bug: b:40283985, b:40283987
    > Change-Id: I0d0208a2184d0a2d21226981f3dfbdb342c9a714
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296143
    > Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Reviewed-by: Simon Zünd <szuend@chromium.org>
    > Commit-Queue: Eric Leese <leese@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92343}
    
    Bug: b:40283985, b:40283987
    Change-Id: Id110e4fcbcff668686400eceece8cbecd31772e6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324393
    Commit-Queue: Eric Leese <leese@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92548}

commit 117bca95d04e51656d2b915b208fa0c580483280
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Feb 27 11:15:04 2024 +0100

    [json] Avoid unnecessary MakeString on BuildObject slow path
    
    If we fall off the fast path in BuildJSObject, we may have created and
    dropped a key string. Cache the last string created to avoid this.
    
    Change-Id: I83cab5a1ef9f05f515646c6e25e91471faa2fdb7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324362
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92547}

commit 499819a8fab1dd1ab880adfd40d2bbd0589324b4
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Feb 27 10:05:57 2024 +0100

    [wasm] Mark --wasm-fast-api as experimental
    
    Change-Id: I13981dc35cfe0dd48c7dcd11ef4fc39d6bd4fb84
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324389
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92546}

commit 792f32c947343a8b7f8b728ceb445cc87ddba144
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon Feb 26 14:13:03 2024 +0100

    [api] Refactor FunctionTemplate::New() and ObjectTemplate::New()
    
    ... by moving internal object allocation from api.cc to Factory.
    
    This CL is a preliminary cleanup before inlining CallHandlerInfo object
    into FunctionTemplateInfo.
    
    Drive-by fixes:
     - remove unused TemplateInfo::tag field,
     - fix broken instance type range check for FunctionTemplateInfo,
     - untie embedder-provided instance types from V8-internal
       instance type range of JSApiObjects and expect value in the
       range [0, 1000] as proposed in the design doc (see v8:11476).
    
    Bug: chromium:326505377, v8:11476
    Change-Id: I109d8cc8b11f61389be58f6e5a7984dbeb8d3c41
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317945
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92545}

commit 57adeced2df3714435eafe2d5dd168936c21653c
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Feb 26 18:28:01 2024 +0100

    [turbofan] Fix gap moves in End block
    
    The End block doesn't have a frame, so trying to access spill slots
    inside it will DCHECK-fail.
    
    Fixed: 326904344
    Change-Id: Ie2b1d7a87493b057e07eab26ffd2ba0f6a1ee004
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5320907
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92544}

commit 8e740fc79fd18ab2774dfd519280f2cb66897a90
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Feb 22 15:16:56 2024 +0000

    [sandbox] Move source position tables out of the sandbox
    
    This CL turns the BytecodeArray::source_position_table,
    Code::source_position_table, and Code::bytecode_offset_table fields into
    TrustedByteArrays and moves them into trusted space.
    
    For the most part, this change simply converts "ByteArray" into
    "TrustedByteArray" in various places throughout the source code.
    
    Bug: chormium:40927183
    Change-Id: I1c3167190c4b2905f5ae41c897a1f01a837e2e47
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5274749
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92543}

commit b2c3b1a04b06714393f386df8807ce9f34774c74
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 26 21:18:25 2024 -0800

    Update fuzztest (trusted)
    
    Rolling third_party/fuzztest: https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+log/9fc64e5..1aeb930
    
    Roll fuzztest. (Adrian Taylor)
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/1aeb930
    
    Rolling third_party/fuzztest/src: https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/61d9520..bddcd9f
    
    No public description (FuzzTest Team)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/bddcd9f
    
    Encapsulate the type erasure in the domain API. (Filip Niksic)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/58f6ead
    
    Enable the stack limit change tests for Centipede. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/54bafe4
    
    Insert comparison entries into integer dictionaries. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/a4c6283
    
    #Centipede Only report stack limit error once. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/a6a6e66
    
    Add disclaimer to the compatibility mode. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/3a611b2
    
    Reduce verbose errors in the compatibility mode. (Xinhao Yuan)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/c217c31
    
    WithOneofAlwaysSet takes effect only for fields that are not "unset" (Hadi Ravanbakhsh)
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+/6b652e7
    
    ...
    
    Roll created at https://cr-buildbucket.appspot.com/build/8754966840427356385
    
    Change-Id: I49aba0455d017ae7eb9658e85dac28096183f17d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324652
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92542}

commit 3a53940bbff0f3de07b1e22181778c746a99f276
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 26 20:06:33 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/4f4f972..4e0feeb
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/4dc7721..6f4a0d6
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/cb43b5d..4df6114
    
    Rolling third_party/fuchsia-sdk/sdk: version:18.20240215.1.1..18.20240215.1.1
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/a7b3d96..5b35c9f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8754970614207241569
    
    Change-Id: Ia47c8da784cbc2f6971a4b785f01fde87697d777
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324651
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92541}

commit 37985f43d2ccd28b7e2ca64c36bd3068b3f0e793
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Feb 26 10:33:09 2024 +0800

    [riscv] fix turboshaft/turboshaft-maglev-frontend
    
    Change-Id: Ib710f316bbe102136f7c467bba806ec7b190c46e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5323535
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92540}

commit 0398669ec66489745ac3d8aa66882ce5080d5b58
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 26 08:19:14 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/90b471f..9eedca5
    
    Rolling buildtools/linux64: git_revision:03d10f1657b4ddace618c34ab61b6357d1ae9c9a..git_revision:5787e994aa4cb6cdb09c2c72ae6f1c6a7f1cf91a
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/5a3d13e..08b8dfd
    
    Rolling third_party/siso: git_revision:b52a6552a2e17e34b747fd5d29875fc4aba99da8..git_revision:8632c71c8cadd9cb9ea4d43e6b30eeae4dffcd12
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/751dcda..ee25a45
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755015912149072737
    
    Change-Id: I8eb997ede451f68ea5dea9b0f914c5029276b8a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318988
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92539}

commit db6a00f65bb5798051ab7d696c68307a361981a8
Author: punithnayak <npunith125@gmail.com>
Date:   Sun Feb 25 14:03:33 2024 +0530

    Fix iterator incrementation in loop after erase operation
    
    The previous implementation contained a logical error where
    the iterator was incremented (++it) in the second branch of
    the loop even after the 'erase' operation in the first branch.
    This could lead to undefined behavior. The correct approach
    is to use 'it = container->erase(it)' to update the iterator
    after erasing the element. This ensures proper iterator handling
    and avoids potential issues with iterator invalidation.
    
    Bug: none
    Change-Id: I7ca307cf5b1a023a39a14aeb867383cbd08cab81
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5320060
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92538}

commit 24bce45507c00eca8aee8fabbf160c973720c8b6
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Feb 23 17:25:12 2024 +0100

    [wasm][shared] Update typing of ref.eq
    
    Bug: v8:14616
    Change-Id: I2259ce1cbfd808e574a0d959ff2b6c43592dbb2d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321518
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92537}

commit fbb2a6ff34b061c2fac0b8e38485d28378a796d0
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Feb 26 15:29:55 2024 +0100

    Sync V8's google_benchmark version with chrome's
    
    The chrome google_benchmark was bumped to 1.8.3 and the
    google/benchmark/src was set to
    344117638c8ff7e239044fd0fa7085839fc03021 recently:
    https://crrev.com/c/5300965
    https://chromium.googlesource.com/external/github.com/google/benchmark.git/+/344117638c8ff7e239044fd0fa7085839fc03021
    
    However, the V8 autoroll had a newer version 7f7c96a26497a380b63259be928bbe29394ef2ae:
    https://crrev.com/c/5318068
    https://chromium.googlesource.com/external/github.com/google/benchmark.git/+/7f7c96a26497a380b63259be928bbe29394ef2ae
    
    This CL changes the V8's version back to the old chrome's version to
    roll in sync.
    
    Change-Id: I191a46c6464f345e63083fef969cbd4ad5f62618
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324363
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92536}

commit 6abf7d6361c2919458ef3bde03933f2cc70946c7
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Feb 26 14:58:08 2024 +0100

    [wasm] Move module generation logic to src directory
    
    In order to re-use the logic in a runtime function, move it to a
    separate header and implementation file in the src directory.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14637
    Change-Id: I3cfd1778269d8e07fa8bb45bdc9402cb651d7b19
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321524
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92535}

commit ab2c836de63f0465db74c0b06bf015396fcc8ac7
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Feb 26 14:52:00 2024 +0100

    [wasm][fuzzer] Avoid use of TestSignatures
    
    If we move the logic for generating Wasm module to the src directory we
    can not include a header from test/common. Hence replace the single
    signature index we use from there by a static fixed-size signature.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14637
    Change-Id: Iafa3aeb81f8e022184fb38638a87e041785442e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321527
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92534}

commit 03168b543a83b68feb77163e17f1376b8c7277c3
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Feb 22 19:57:48 2024 -0500

    PPC/s390: [execution] Support stack iteration from fast C calls
    
    Port dd8d0b44d5d5b4bc3912026bf78f25ed3cafda1a
    
    Original Commit Message:
    
        This CL extends the StackFrameIterator to support stack frame
        iteration in a fast c call. When invoked in a fast c call, iteration
        starts from the fast_c_call_caller_fp/fast_c_call_caller_pc fields
        in IsolateData.
    
        We don't know the stack pointer for the first frame, however this
        shouldn't be an issue because we only require the stack pointer to
        scan outgoing arguments and there are none in fast c calls.
    
    R=dinfuehr@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I4fb7c7ad9d0d6b1d10201cdafb2c98623ee5324f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317845
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92533}

commit ee105c9a96c7600cab1374c4f11d5e7ee65147df
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Feb 23 14:55:50 2024 +0100

    [DEPS] Add siso support
    
    Bug: v8:14633
    Change-Id: I89a77390eafe133655b377e626f96f6780696531
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318002
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92532}

commit a71837cacada664699694c56ec103211981ef8ab
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon Feb 26 14:14:02 2024 +0100

    [turboshaft] Maglev-to-ts: prevent too aggressive compilation in test
    
    If the threshold for Turbofan compilation is too low, then we end up
    compiling helpers, which might contain features that are not yet
    supported by the maglev-to-turbofan graph builder, leading to reaching
    UNIMPLEMENTED during graph building.
    
    Bug: v8:14581
    Change-Id: I92b09c03528fc499bb0b956d6ca0fdc3b08baa08
    Fixed: v8:14636
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5324360
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92531}

commit a2d51bef3e3c2b41fe4e50f615181fde8f3e97e4
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Feb 26 14:08:27 2024 +0100

    [ic] Ensures the clone IC without fbv supports all fast cases
    
    When we have no feedback vector attached we should fall back to the miss
    handler, since the slow handler actually supports fewer optimizations.
    This avoids creating differently shaped objects during the early phase
    where no fbv is created yet.
    
    Bug: chromium:40764103
    Change-Id: I6cd1270b4b091b7b49a1366f38dfca79f8d3e082
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321526
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92530}

commit 12db7d3a8687aa5cb076f966187453c2ef2bc70d
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Feb 26 12:36:49 2024 +0000

    [sandbox] Fix type confusion in compiler when corrupting meta maps
    
    During compilation, the JSHeapBroker provides access to the heap object
    graph, for which it potentially serializes (snapshots) parts of it. Type
    checking in that serialized graph happens based on the instance type
    obtained from the (serialized) map. However, in case an object's map
    points to itself, we assume that this object must be a meta map and so
    of type MAP_TYPE. This, however, isn't necessarily true in case of heap
    memory corruption, in which case other code may get confused. This CL
    addresses that by CHECKing that objects that we believe to be a (meta)
    map really are Map objects when serializing the original object.
    
    Bug: b/326700497
    Change-Id: If51433143bcd67766d483e3b164aad24ad544cfb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321525
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92529}

commit 234a269a7da611bd837c371ba0222ccf24dee689
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Feb 23 14:24:41 2024 +0100

    [turboshaft] Maglev-to-ts: support most string operations
    
    Bug: v8:12783, v8:14581
    Change-Id: I5ebf64bc8025f87e87ea55f797b4befbc1065fa2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318001
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92528}

commit 3864f90c98e12cb9fd0b90b3fd6a3dcd66253137
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Feb 26 10:48:06 2024 +0100

    [intl] Remove unnecessary string copy in JSSegment iterator
    
    We already store the unicode string of the iterator on the
    JSSegmentIterator object, so there's no need to copy it out of the break
    iterator.
    
    h/t https://twitter.com/fabiospampinato for the report
    
    Change-Id: I13ff1376006f219dea9eeb4670b811fef0ea5a8c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318008
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92527}

commit 960e6f4877f36db6f066ee41a259f3d36d731092
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Feb 23 15:50:11 2024 +0100

    [maglev] Make boilerplate iteration robust against heap corruption
    
    Bug: chromium:326355031
    Change-Id: Ieca4f86a6ed04fba5610a2b0abf06b5bc19a174f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319502
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92526}

commit b47900767ebe3be9a15f95e88a47da83214a0145
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Feb 25 21:39:00 2024 -0800

    Update google_benchmark (trusted)
    
    Rolling third_party/google_benchmark_chrome: https://chromium.googlesource.com/chromium/src/third_party/google_benchmark/+log/c300add..f049b96
    
    [third_party] Bump google_benchmark to 1.8.3 (Matthias Liedtke)
    https://chromium.googlesource.com/chromium/src/third_party/google_benchmark/+/f049b96
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755055551961117633
    
    Change-Id: Ib5ff28b4139eb95a96a0655095114b69353aba46
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318068
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92525}

commit 79d35279dd7045be4d9c4204baafe59f0644ba77
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Feb 25 08:18:57 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/9d43b27..76bb2af
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755106512419150257
    
    Change-Id: I4604d71fe7993403bb00fa6348ee308c4074adcd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5323438
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92524}

commit 69fd5608129003fe8ab4ecd1f6025d863c07827b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Feb 24 20:21:50 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/d50a0a6..4f4f972
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/76bb2af..9d43b27
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755151807829063041
    
    Change-Id: I0a39ad62729ca6961c51e303e32b8315791ea74b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321649
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92523}

commit 9dde03c90939100dbcd63493a8d817cd7e74d154
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Feb 24 18:09:28 2024 -0800

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/0fd1675f..a2597599
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755159360362094817
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: Ia677c6e4bffdfc621d34a61978b84744bcc7cbfd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5322859
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92522}

commit 0463121080730deb8fb0f2dd46cd3c72e93dd374
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Feb 24 08:02:15 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/googletest/src: https://chromium.googlesource.com/external/github.com/google/googletest/+log/af29db7..76bb2af
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755197109534402417
    
    Change-Id: I9ddbd7b806894833b935272765b29c18a0da5d07
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5322858
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92521}

commit bb04465fbc309245aef711cd38a48899e5263790
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Feb 23 20:19:26 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/5d5f0c9..d50a0a6
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/189b13f..4dc7721
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/9d64ace..cb43b5d
    
    Rolling third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/fa3c41d..959d1a2
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/74a1c50..3787595
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/acd6cf5..751dcda
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755242405925044721
    
    Change-Id: I7e25a975d3b97fb070e0b520d3e95161903d92dd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5322125
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92520}

commit f92857de81d0fae6274d42e0fc4a06aa99ba7f43
Author: Frank Tang <ftang@chromium.org>
Date:   Fri Feb 23 14:47:51 2024 -0800

    [intl] Implement ECMA402 PR758
    
    Spec https://github.com/tc39/ecma402/pull/758
    
    Change the hourCycle for not returning h24 while hour12 is false
    
    Bug: v8:14542
    Change-Id: I65a6719ed0da1fd43c3ac25bd107c89a25ae7f21
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319663
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Frank Tang <ftang@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92519}

commit a8ed33877b95fafd0f7ec9fb1227c1ea7173f354
Author: Shu-yu Guo <syg@chromium.org>
Date:   Sat Feb 24 00:12:09 2024 +0000

    Revert "[wasm][flags] Add implications from --no-turbofan"
    
    This reverts commit 7222c3b6f1bfe6caaadd58eb249dcab57db5502e.
    
    Reason for revert: Blocking roll
    https://ci.chromium.org/ui/p/chromium/builders/try/linux-rel/1716667/overview
    
    Original change's description:
    > [wasm][flags] Add implications from --no-turbofan
    >
    > --no-turbofan should also disable tiering in Wasm, and disable asm.js
    > validation to force asm code through the JS pipeline.
    >
    > We also add CHECKs that we only compile Turbofan Wasm code if --turbofan
    > is enabled and --liftoff-only is disabled.
    > In order to pass that, we disable some tests that explicitly execute
    > Turbofan compilation in the nooptimization variant. We also add some
    > "--validate-asm" flags to tests that depend on that. The test-runner
    > will then automatically skip those tests in the nooptimization variant.
    >
    > R=saelo@chromium.org, ahaas@chromium.org
    >
    > Change-Id: Ic4e5f6db0c48c6f5b51b071ab001d217a587eaf6
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317610
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92511}
    
    Change-Id: Ia969abcf50f8c8fd6832cb7a8f795be8fc7f150c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321831
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Owners-Override: Shu-yu Guo <syg@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92518}

commit 919c71e484b57f9f51e6e73e89330b47e8123c9f
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Fri Feb 23 20:10:17 2024 +0100

    [heap] Refactor scopes for overriding embedder stack state
    
    This CL refactors the scopes for overriding the embedder stack state,
    which are used for testing and other purposes to control whether
    conservative stack scanning is performed,
    
    - A distinction is made in internal::EmbedderStackStateScope between
      implicit and explicit scopes. The latter take precedence over the
      former.
    - Explicit scopes are required to force the scanning of the stack,
      in case a stackless GC is implicitly invoked by pumping the message
      queue from a point where the stack is non-trivial. Such a case is
      fixed in Shell::DoHostImportModuleDynamically, in d8.
    - In Oilpan, cppgc::testing::OverrideEmbedderStackStateScope uses
      internal::EmbedderStackStateScope as the underlying implementation,
      unless in stand-alone heaps.
    
    Change-Id: Ibab78f89be16d0e856dac09cb13efc2f1a3ae8a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306761
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92517}

commit f68b857b9d36bf493c72ebafd2438437ebd748e0
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Feb 23 12:26:26 2024 +0100

    [flags] Allow allocations in fast C calls by default
    
    Enable the flag by default, which means that fast API calls can now
    potentially allocate and start a GC because of that.
    
    Bug: chromium:325123663
    Change-Id: I6f66b7b894f108736059dfd9ca3a5c4021dbe1f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318117
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92516}

commit 01a0d8b4e9e0862483b632b2922022e858e90dbc
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Feb 23 08:17:43 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e36f984..5d5f0c9
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/88acf0d..90b471f
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/1506720..5a3d13e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755287706500143857
    
    Change-Id: I1cb3e2b6774093608597080cd947b26a5000e759
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5321205
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92515}

commit 1a114815001332b0d7fc7bff179e889fcb58ff99
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Feb 23 16:50:59 2024 +0100

    [wasm-gc] Add missing test for security bug
    
    Bug: chromium:1466183
    Change-Id: I38a56f75d166fac7d64290c71bf4c0bac5515ca7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319507
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92514}

commit e76bf0a50385ffb005f03bb763d06eae878e8b54
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Feb 23 16:30:53 2024 +0100

    [wasm][shared] Introduce shared abstract types
    
    Bug: v8:14616
    Change-Id: Ibf67d2920ace74490396a2c54b7e1cebfc1545ea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306763
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92513}

commit 3caece38d1374b51b99e5f4ed135a3c6fd503a39
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Feb 23 14:43:56 2024 +0100

    [flags] Example fuzz test
    
    This adds a fuzz test demonstrating the use of the InRegexp domain
    and applying this to stress flag setting and implication processing.
    
    This test is more of a fuzz-test example than it is an actual
    valuable fuzz test from which we expect any errors to be found.
    
    Stress tested locally to ensure it's not running into anything
    obvious.
    
    Bug: 41497291, 40941204
    Change-Id: I197b1555e09bf01173f241e576d48b2da3e29546
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319503
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92512}

commit 7222c3b6f1bfe6caaadd58eb249dcab57db5502e
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Feb 23 15:46:50 2024 +0100

    [wasm][flags] Add implications from --no-turbofan
    
    --no-turbofan should also disable tiering in Wasm, and disable asm.js
    validation to force asm code through the JS pipeline.
    
    We also add CHECKs that we only compile Turbofan Wasm code if --turbofan
    is enabled and --liftoff-only is disabled.
    In order to pass that, we disable some tests that explicitly execute
    Turbofan compilation in the nooptimization variant. We also add some
    "--validate-asm" flags to tests that depend on that. The test-runner
    will then automatically skip those tests in the nooptimization variant.
    
    R=saelo@chromium.org, ahaas@chromium.org
    
    Change-Id: Ic4e5f6db0c48c6f5b51b071ab001d217a587eaf6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317610
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92511}

commit 3a8d2e99040f706aa7147fc303b939839dfdae42
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Feb 23 15:11:27 2024 +0100

    [wasm][turbofan] Emit loop exits after well-known import
    
    Bug: chromium:326273468
    Change-Id: I96917dce42338376cbec291218f55b61b27cd022
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318003
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92510}

commit 3fe82e7f4a3a1f86f56bff05332dd8c5b3c8f7d4
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Feb 23 14:58:47 2024 +0100

    [wasm-gc] Relax static type reqs for call_indirect
    
    As discovered on https://github.com/WebAssembly/binaryen/pull/6336,
    we erroneously required that the immediate type of a call_indirect
    instruction be a subtype of the referenced table's type, but there
    is no such requirement in the spec. This patch drops the check.
    This change is backwards-compatible because it makes V8's behavior
    strictly more permissive.
    
    Bug: v8:9495
    Change-Id: I198822e3d1ef8d8dd349fa92ed9e49d043d5d192
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319505
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92509}

commit bbdcc772ffe10f6dbf841a1146551bde55acccee
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Feb 23 14:21:17 2024 +0100

    [flags] Add tests for flag look-ups
    
    This implicitly tests now the functionality for looking up flags
    fast using binary search, introduced in:
    https://crrev.com/c/5272499
    
    Bug: 41497291
    Change-Id: I6faff65252158796d703569f0659f4991423231f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318116
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92508}

commit 872c734f6aea41ce2a7772decaea3e8f693fe3fc
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Feb 23 09:15:51 2024 +0100

    [wasm] Well known imports support for fast API calls
    
    With this CL, direct calls from WebAssembly to C++ are possible
    without any wrappers in between. More details about the implementation
    is available in [1].
    
    [1] https://docs.google.com/document/d/13SGO2m1Jt_fzbttYWktfMJ2IgfkEmA_fEhb7WNNtVEc
    
    
    Change-Id: Ib704073a55209ff833b2ecd5d1dd994fe741d6fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5225044
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92507}

commit 971f457081003ca968e358eea20586f31a459915
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Feb 23 11:14:39 2024 +0100

    [turboshaft] Maglev-to-ts: support allocations
    
    Bug: v8:12783, v8:14581
    Change-Id: I3b9c728651126d064c38d4c43630dc968eab963a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5318119
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92506}

commit 4d88fa58dce74d3e20d258bb2183d534bd4fc97a
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Feb 23 11:40:47 2024 +0000

    Revert "[maglev] Inline the TypedArray.prototype.length accessor"
    
    This reverts commit f6fbef25f12c1ba754a6cfecba9933c9678a6615.
    
    Reason for revert: Blocking roll (https://chromium-review.googlesource.com/c/chromium/src/+/5318237?tab=checks)
    
    Original change's description:
    > [maglev] Inline the TypedArray.prototype.length accessor
    >
    > TypedArray.prototype.length returns the integer length of the
    > TypedArray. We can inline this getter into a simple field load for
    > non-resizable typed arrays.
    >
    > This unfortunately requires expanding the IntPtr representation to be a
    > "first-class" representation in the graph, with all the conversions,
    > since it can now appear as an arbitrary value in the graph and not only
    > an input into bounds checks. To keep things explicit about the value range
    > of this representation (0 ≤ value ≤ max_safe_int), rename it to
    > TypedArrayLength.
    >
    > Drive-by fix BuildLoadTypedArrayLength to bail out fully on RAB/GSAB,
    > since even the uncached LoadTypedArrayLength is still unsafe.
    >
    > Bug: v8:7700
    > Change-Id: Iad010d65f1c1ac41627abf45fe7a4f3838e34581
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257837
    > Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92482}
    
    Bug: v8:7700
    Change-Id: I8fc75db4054a06114ed2ef653fdbf9afd1472f04
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319675
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92505}

commit cba6eed1e34117b0ad40740959ecf5fe445cbf06
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Feb 23 10:24:57 2024 +0000

    [sandbox] Ensure safe execution in case of invalid enum in RegExp::Exec
    
    The Type enum value of a JSRegExp is stored as a Smi on the heap and so
    it must be assumed that an attacker can change it arbitrarily. In
    RegExp::Exec, the enum loaded in this way is used for a `switch`
    statement with no default case. In this case, the compiler should
    generate code such that an invalid enum value executes none of the
    cases. In particular, as the compiler would like to emit a jump table
    for this switch, it should also emit a bounds check before that. However, the (non-void) function doesn't return a value after the switch
    (only the individual cases do), as such reaching this point is UB and
    the compiler can assume that this will never happen. Therefore, the
    compiler omits the bounds-check, leading to an OOB access into the jump
    table when an invalid enum value is observed.
    
    Simply putting an UNREACHABLE() after the switch fixes this.
    
    Bug: b/326086002
    Change-Id: I8ad5d47f90edd081da80e0dc9c1768e70dfb8a54
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319496
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92504}

commit 5983ef36a851b98f852f13d3238e36cde20339f2
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Feb 22 18:18:48 2024 +0100

    Reland "[heap] MinorMS cycles are never memory reducing"
    
    This is a reland of commit e9ffc293ecdde353898f8b8730576614ae92058a
    
    GC flags were not always reset after a GC. That meant that an incremental
    memory reducing full GC would set the flags to indicate memory reducing,
    and a minor GC following the end of the full GC would still observe the
    memory reducing GC flags. This is fixed by resetting the flags after
    every full GC.
    
    Original change's description:
    > [heap] MinorMS cycles are never memory reducing
    >
    > Enforce and document (in DCHECKs) that MinorMS cycles should never be
    > memory reducing. We expect all memory reducing GCs to be full GCs.
    >
    > This may improve jank in the rare case of finalizing a concurrent
    > MinorMS because a full GC is requested. In such cases we currently
    > finish the minor GC and force finalize sweeping, before we start the
    > full GC. Sweeping for memory reducing GCs is expensive so force
    > finalizing it right after it started may actually cause jank.
    >
    > Bug: v8:12612
    > Change-Id: If3fbe9f778ac5dff700c7c1d765f5bc15bcbd8c7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5310169
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92451}
    
    Bug: v8:12612
    Change-Id: Ib9c56d1cc0cd11f3a12c77b729e7b5a34ae56ec1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314417
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92503}

commit 27b237b3121d82868c0c19c82b2f07487d7efe37
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Feb 23 11:13:02 2024 +0100

    [fuzzer] Fix GCC compilation (missing include)
    
    Instead of including <cstring> just for this single strcmp, just
    implement it manually, which is probably faster anyway.
    
    R=jkummerow@chromium.org, machenbach@chromium.org
    
    Bug: 326276749
    Change-Id: I4f9d0c391770a36df0a2933e412242c7984d2925
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319499
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92502}

commit fdd67fafa12e1e43931cf1fb586313701f5daaa9
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Feb 23 10:21:21 2024 +0100

    [turboshaft] Maglev-to-ts: re-enable on IA32 and Arm32
    
    The maglev-to-turboshaft translation was previously disabled on IA32
    because in order to compile some constructions, Maglev checks what the
    architecture supports, and if no native instruction exists, it falls
    back to a function call, and function calls were not yet supported by
    the translation.
    
    We now support function calls, which means that the
    Maglev-to-Turboshaft translation should work on all architectures
    supported by Turbofan/Turboshaft (even those not supported by Maglev,
    since we only use the Maglev graph builder, which should be almost
    fully CPU-agnostic).
    
    Bug: v8:12783, v8:14581
    Change-Id: Ic10c49e04f06aecc65d19a184bbbbbc29a254279
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319495
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92501}

commit d9673c8f6c78f8fbc8005aa13a4bd1bccddef3cf
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Feb 23 10:36:55 2024 +0100

    [heap] Mostly keep code space compaction with fast C call allocations
    
    This CL removes the implication to --compact-code-space-with-stack for
    supporting allocations in fast C calls since it is so trivial to
    disable code space compaction just in that case.
    
    Drive-by: Renames flag from --allow-allocation-in-fast-c-call to
    --allow-allocation-in-fast-api-call.
    
    Bug: chromium:325123663
    Change-Id: Id5015e3d51e84d50fe74e3dff6c56bb08f402cc4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319489
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92500}

commit 90b4b746b9c8fcb0f4e0bf091a5ac9a42e4759c1
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Feb 23 15:13:31 2024 +0800

    [riscv][builtins] About fast C calls CLs
    
    Port commit e19a4024f6b7bd8ceb22a5267b878ee2bd20807d
    [compiler] Always emit safepoint for fast C calls
    
    Pot commit dab24c400946493724fa527b3cd65516a4ecb654
    Reland "[compiler] Add fake handles slots to safepoint table"
    
    Port commit 1da38a4017181e548ddd031c0902405c262020e1
    [builtins] Do not use SetIsolateDataSlots::kYes in CEntry
    
    Port commit 13f886c703b435e148a6be970b078a3e8c706549
    [sandbox] Refactor Code::source_position_table
    
    Port commit dd8d0b44d5d5b4bc3912026bf78f25ed3cafda1a
    [execution] Support stack iteration from fast C calls
    
    Bug: b/40927183
    Bug: chromium:325123663
    Change-Id: Id50551389440878650be3b5c88cbb48d551f6de1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319782
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92499}

commit dc609bf63a6d8473022ffa1d03807760cd42fe73
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Feb 23 08:35:57 2024 +0000

    Skip regress-crbug-1520697 and regress-708247 in slow configurations
    
    These tests take a long time to execute in jitless/nooptimization on the
    arm simulator and can lead to timeouts.
    
    Bug: b/325974501
    Change-Id: I38a806687f8fb46ce07565b89e5bba911319d9f7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319490
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92498}

commit bf2d8bef8d204754fcb6b81ff620504c2b6ac34d
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Feb 22 16:15:09 2024 +0100

    [wasm] Add printing to the WasmInstanceObject
    
    In particular, print the trusted_data field which is missing in the
    torque-generated output.
    
    Drive-by: Remove a stray newline.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I71ace03e31f80034a5f0af9d5ae0324361f7ebd4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317611
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92497}

commit ab48753401c1421aafa097a97d866db9e2ba1c4e
Author: Yuheng Wei <yuheng.wei@intel.com>
Date:   Fri Feb 23 14:38:13 2024 +0800

    [revec][wasm][turboshaft] Support revectorization of Unary op in turboshaft
    
    Bug: v8:12716
    Change-Id: I7a2a88f5c4f8966686af15850ed3ec000b44b485
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5311562
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Yuheng Wei <yuheng.wei@intel.com>
    Cr-Commit-Position: refs/heads/main@{#92496}

commit 3ab097883af332fddf13d82e16bb19acfce6835d
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Feb 22 20:07:00 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/878a639..e36f984
    
    Rolling buildtools/reclient: re_client_version:0.131.1.784ddbb-gomaip..re_client_version:0.132.0.1a8ff94-gomaip
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/0185f0f..189b13f
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/03821ae..9d64ace
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/4ec280b..acd6cf5
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755333004198555361
    
    Change-Id: Id5204c596823ab6a1d776123dc156285e0e4528d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317847
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92495}

commit 0e8fb8620a443cdaa206cec115182f9bce3cb71d
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Feb 22 16:23:33 2024 -0500

    PPC/s390: [sandbox] Refactor Code::source_position_table
    
    Port 13f886c703b435e148a6be970b078a3e8c706549
    
    Original Commit Message:
    
        In preparation for moving source position tables out of the sandbox,
        this Cl refactors how they are used. In particular:
    
        * The Code::source_position_table field can now be Smi::zero() in case
          of builtin Code in RO space. This is because we cannot currently have
          RO -> Trusted Space references.
        * There are new accessors to check if, for example, a Code object has a
          source position table.
        * The CodeBuilder's handling of source position tables is refactored to
          make it explicit when a source position table is expected and when it
          may be missing.
        * We introduce helper methods like CodeKindUsesBytecodeOffsetTable.
    
    R=saelo@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Iaaabae23fc6fd6c5d98631cd3c6a8a0231a2eebd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317843
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92494}

commit 30316ee3a3d30c749689854002e7669661778300
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Feb 22 16:02:00 2024 -0500

    PPC/s390: [builtins] Do not use SetIsolateDataSlots::kYes in CEntry
    
    Port 1da38a4017181e548ddd031c0902405c262020e1
    
    Original Commit Message:
    
        When invoking CallCFunction from CEntry, it is not necessary to
        use SetIsolateDataSlots::kYes because we can already iterate the heap
        through the ExitFrame set up by CEntry.
    
    R=dinfuehr@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Id5bb462708b20005e9b8cbd8100daa38a34d9a14
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5319611
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92493}

commit 6986a4a0397138ebda8df2d7b53a90c4e0b10c13
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Feb 22 15:56:24 2024 -0500

    PPC/s390: Reland "[compiler] Add fake handles slots to safepoint table"
    
    Port dab24c400946493724fa527b3cd65516a4ecb654
    
    Original Commit Message:
    
        This is a reland of commit 7bf829ef929898868eab1557bd049db4520f3524
    
        On ARM64 we need to use the Str method in the MacroAssembler to
        properly handle large immediates.
    
        This CL now DCHECKs that stack slots use fp-relative offsets
        when clearing. This should be the case because those tagged slots
        should only be used for fast C calls and calls force a frame.
    
        And to be extra sure slots are now cleared only at the very end
        of AssembleConstructFrame(). At that point the distance between
        fp <--> sp should now match what the compiler statically thinks it
        is - even though we don't use stack-relative addressing.
    
        Original change's description:
        > [compiler] Add fake handles slots to safepoint table
        >
        > When emitting a safepoint in a fast C call, the indirect handles
        > passed to the fast callback, need to be included in the safepoint.
        > This is necessary such that the GC can find those slots and update
        > pointers in case that object got relocated during GC.
        >
        > This CL implements this by adding an is_tagged field to a StackSlot.
        > When set the stack slot should become part of the safepoint.
        > Currently these slots are simply made part of all safepoints. However,
        > this requires us to initially clear the slots in the function
        > prologue. This is necessary because all slots need to contain valid
        > pointers on a GC.
        >
        > Bug: chromium:325123663
        > Change-Id: I5f9aeb507fb3aecf5776ac7ad1a6b1ea75b1d66b
        > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291382
        > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
        > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
        > Cr-Commit-Position: refs/heads/main@{#92312}
    
    R=dinfuehr@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Ic67a8ccdab717cbadb6280872f9b17561c2aa9a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317841
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92492}

commit ebb19d1f6b2619f48f12d2378d5174717e91117d
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Feb 22 14:45:29 2024 -0500

    PPC/s390: [compiler] Always emit safepoint for fast C calls
    
    Port e19a4024f6b7bd8ceb22a5267b878ee2bd20807d
    
    Original Commit Message:
    
        This CL starts recording safepoints for fast c call sites in order
        to eventually allow allocations in them. The safepoint needs to be
        recorded exactly after the call site such that the StackFrameIterator
        is able to find it. For this MacroAssembler::CallCFunction now
        returns the pc_offset for the actual raw call instruction. This
        return value is then used as input to RecordSafepoint().
    
        Wasm-C-API was using an approximate return address of that call site,
        so far this was okay because the safepoint was recorded there as well.
        In order to not emit two different safepoints for each fast c call,
        MacroAssembler::CallCFunction also optionally takes a label as
        argument. This label is bound to the exact return address of the
        raw call instruction.
    
    R=dinfuehr@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I673c6d13af2800d763295ea2cc87bb757e03f28d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317822
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92491}

commit 11790def914f494511a82da038884cd6e591b2cb
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu Feb 22 15:02:32 2024 -0800

    Skip octane/zlib in debug mode because too slow
    
    Bug: b/325974501
    Change-Id: Idb4681a7023438055914903dc716806e77ddc654
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5320149
    Reviewed-by: Deepti Gandluri <gdeepti@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92490}

commit 79fd9fd996f21fbf29788f89bbc07d86db830b63
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Feb 22 06:02:19 2024 -0800

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/e4f91b63..0fd1675f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755388347459849329
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: Ie6106df2a4616d48b53cf6d9d32ad15223586fe4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317810
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92489}

commit 5135438f6ab3c4e3276809073df0b99bc5914c47
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Feb 22 16:37:02 2024 +0000

    [flags] Introduce --disable-optimizing-compilers
    
    As the name implies, this simply disables all optimizing compilers
    (currently Turbofan and Maglev) while leaving the baseline compilers
    (currently Sparkplug and Liftoff) enabled.
    
    Bug: b/325974501
    Change-Id: I7012855e37bc5ccc38e4c8c4ce2ec6277189f8f9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317951
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92488}

commit d09f312a14717fccc5ee0c4e8613bc83db4874d9
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Feb 21 15:04:05 2024 +0100

    [wasm][exnref] Add kNoExnCode
    
    https://github.com/WebAssembly/exception-handling/pull/298
    
    R=manoskouk@chromium.org
    
    Bug: v8:14398
    Change-Id: I71800778370b6146685c16b45130be6e4947c526
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5313520
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92487}

commit 4d80e17833a017debd6002ddfdaa6ab6666fcfae
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Feb 22 08:18:52 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/74f88ce..878a639
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/60df7b9..db06f03
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/49366de..0185f0f
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/03c356e..74a1c50
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755378303610945857
    
    Change-Id: Id8b7b27e1cab0c9408e5b61e88fe1a7e1502e921
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317834
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92486}

commit 85027ade89a7ba6981f8656da7372c911bb75004
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Feb 22 16:26:37 2024 +0100

    [fuzzer][flags] Ignore conflicting flags in fuzzers
    
    The fuzzer binaries produced for libfuzzer-based fuzzers also process
    flags and their implications, hence can run into conflicting flags.
    This CL invokes `ResolveContradictionsWhenFuzzing` after parsing the
    flags to avoid that (and print a warning instead of crashing on
    conflicting flags).
    We also slightly refactor where the warning for unknown flags is
    printed. We move this from fuzzer.cc to fuzzer-support.cc, where also
    parsing of flags, removing conflicts, and applying implications (via
    `V8::Initialize()`) is done.
    
    As a drive-by, we now stop processing arguments on a "--" argument,
    which is a standard convention.
    
    Drive-by 2: Use more early returns / continues to reduce indentation.
    
    Drive-by 3: Fix comments to be proper sentences.
    
    R=machenbach@chromium.org
    
    Fixed: 326276749
    Change-Id: Ie39423c791d8fd6ed7a5320625751ea7907fa193
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317950
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92485}

commit bd99d7543662990623c0594637b3844258b03af7
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Wed Feb 7 13:19:35 2024 -0800

    Fix deserialization order of ScopeInfos for modules
    
    Edge has seen some crashes when deserializing code cache data for
    modules. Here is a series of steps which could have led to those
    crashes:
    
    1. Begin deserializing a ScopeInfo.
    2. Trigger garbage collection when allocating some sub-object which the
       ScopeInfo will refer to.
    3. The garbage collector reads the incorrect size for the ScopeInfo
       because the module_variable_count field is not yet initialized.
    4. The garbage collector moves the ScopeInfo to a new location which is
       too close to the end of the containing memory chunk. The memory chunk
       happens to be followed by an uncommitted region.
    5. Deserialization continues, and attempts to write a field past the end
       of the memory chunk, causing a crash.
    
    This is just one of many possible bad outcomes; most forms of corruption
    after step 3 wouldn't be so clearly detectable. I introduced this bug
    several years ago in https://crrev.com/c/2733037 when I removed the
    length field from ScopeInfo to save a few bytes.
    
    The simplest fix is to move module_variable_count near the beginning of
    the object so that the garbage collector computes the correct size.
    
    Change-Id: Ia2854f223f08b628727f38ad1d47d8111cc3711e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5277325
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#92484}

commit a9d0c91b3b3dcf2cd5d088c98eec9c6ce1d319c9
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 22 15:21:35 2024 +0100

    [turboshaft] Maglev-to-turboshaft: support more branches
    
    Bug: v8:12783, v8:14581
    Change-Id: Iccef2bf8fc82591be76527841c9bbb5be8dd1c3d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317350
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92483}

commit f6fbef25f12c1ba754a6cfecba9933c9678a6615
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Feb 22 14:38:48 2024 +0100

    [maglev] Inline the TypedArray.prototype.length accessor
    
    TypedArray.prototype.length returns the integer length of the
    TypedArray. We can inline this getter into a simple field load for
    non-resizable typed arrays.
    
    This unfortunately requires expanding the IntPtr representation to be a
    "first-class" representation in the graph, with all the conversions,
    since it can now appear as an arbitrary value in the graph and not only
    an input into bounds checks. To keep things explicit about the value range
    of this representation (0 ≤ value ≤ max_safe_int), rename it to
    TypedArrayLength.
    
    Drive-by fix BuildLoadTypedArrayLength to bail out fully on RAB/GSAB,
    since even the uncached LoadTypedArrayLength is still unsafe.
    
    Bug: v8:7700
    Change-Id: Iad010d65f1c1ac41627abf45fe7a4f3838e34581
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257837
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92482}

commit b683db69ded3215bf034cf053439deef2bc09784
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Feb 20 10:16:28 2024 +0000

    [sandbox] Mark trusted roots as immovable
    
    This will prevent the garbage collector from moving them during
    compacting GC, which in turn allows these roots to be accessed when
    handle dereference would otherwise be forbidden. This is necessary for
    follow-up CLs that replace empty_byte_array (a read-only root) with
    empty_trusted_byte_array (a trusted root).
    
    Bug: b/40069826
    Change-Id: I04ff9888cd3a8c92e6f2f0f68c2e0fbe4512aa53
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300207
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92481}

commit 8097fba5dd84091d237c312da89228dc0d9c393c
Author: Liviu Rau <liviurau@chromium.org>
Date:   Thu Feb 22 14:04:58 2024 +0100

    [test262] Propagate argument name change
    
    Failure: https://logs.chromium.org/logs/v8/buildbucket/cr-buildbucket/8755391007578083201/+/u/Update_test262_import_deps/Import_Test262_changes_into_V8./stderr
    
    No-try: True
    Bug: v8:14002
    Change-Id: I1d9917755f9da0d5d0496e48e96e6c47dd5c53fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5317949
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92480}

commit 748409a1ab9103fe2882497685e26605223e95b7
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 22 13:27:50 2024 +0100

    [turboshaft] Maglev-to-turboshaft: support field/FixedArray stores
    
    Bug: v8:12783, v8:14581
    Change-Id: I5e8de1818577718643423b616ec3e81c25657005
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309913
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92479}

commit bc1dfb69751c04327d73ba670042caee2edf2b20
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 22 13:00:35 2024 +0100

    [turboshaft] Maglev-to-turboshaft: support builtin calls
    
    Bug: v8:12783, v8:14581
    Change-Id: I6787c6a975c9b893c173d53802d94765d5cfcca8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309901
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92478}

commit 2c81ce965c0878a5744ac72a458a3d133bd354fa
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Feb 22 12:55:25 2024 +0100

    [heap] Reorder GC selection conditions
    
    When selecting a garbage collector for a GC cycle, we would force a full
    GC if incremental marking was complete and allocation limit is overshot,
    even if a minor GC was requested.
    This should never happen with MinorMS due to separate GC phases.
    Reorder the conditions so that allocation limit overshot never needs to
    be checked for MinorMS.
    
    Drive-by: Remove unused Heap::IsMajorMarkingComplete method.
    
    Change-Id: I478c013380abc1769e39553bc6ec083acec0fb7a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309909
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92477}

commit ee500e47d46ff90005e1fd275eca169593187ce1
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Feb 22 12:02:45 2024 +0100

    [turboshaft][wasm] WasmGCTypeAnalyzer: Skip backedge on previously unreachable loops
    
    Fixed: 326156493
    Change-Id: I7cb1a4e556926e4ed03dcd3e00757957ec8d4ff4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314662
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92476}

commit 82d6168cb2965b09e026af9819d247b58d36470f
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Feb 22 12:35:52 2024 +0100

    [wasm-imported-strings][turbofan] string-from-data must always check for traps
    
    We erroneously marked the optimized string-from-data path (replacing an
    array-from-data + string-from-array sequence) as "eliminatable", which
    means when its result is unused, the operation could be dropped entirely,
    even when it would have trapped.
    To avoid differences in trapping behavior between optimized/unoptimized
    code, we must never eliminate this operation.
    
    Fixed: 326260438
    Change-Id: If15c0b66455e70c4ee51f3c4f69e07f4e87d1366
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314730
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92475}

commit 13f886c703b435e148a6be970b078a3e8c706549
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Feb 20 10:16:00 2024 +0000

    [sandbox] Refactor Code::source_position_table
    
    In preparation for moving source position tables out of the sandbox,
    this Cl refactors how they are used. In particular:
    
    * The Code::source_position_table field can now be Smi::zero() in case
      of builtin Code in RO space. This is because we cannot currently have
      RO -> Trusted Space references.
    * There are new accessors to check if, for example, a Code object has a
      source position table.
    * The CodeBuilder's handling of source position tables is refactored to
      make it explicit when a source position table is expected and when it
      may be missing.
    * We introduce helper methods like CodeKindUsesBytecodeOffsetTable.
    
    Bug: b/40927183
    Change-Id: I5d40236afb6a5e8968335be315bd93dc39883f5a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293802
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92474}

commit b96d51e8f5d8ed1c710c17186a3a39baf5196598
Author: Liviu Rau <liviurau@chromium.org>
Date:   Thu Feb 22 12:20:41 2024 +0100

    [test262] Update renamed tests
    
    On import it can happen that tests got renamed in the test262 while they are still referenced by the old name in the status file. We take care of renames in the status file in this CL (and refactored the test removal case).
    
    No-try: True
    Bug: v8:14002
    Change-Id: I73ee6e578a1515138e6dc1db365688f64860819b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309910
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92473}

commit 74530c3ff422d6e10ece2d9b68f0caec74c94a63
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Feb 21 17:26:14 2024 +0100

    [fuzztest] Restructure example fuzz test
    
    This enables using one of the fuzz-test toy examples as a probe for
    monitoring the fuzz-test integration (i.e. verifying that we really
    detect all the failure types we test for).
    
    Bug: 40941204
    Change-Id: I8a527e42f5301b515c913d56654ce6007d1edadd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314560
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92472}

commit dd8d0b44d5d5b4bc3912026bf78f25ed3cafda1a
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Feb 22 08:26:23 2024 +0100

    [execution] Support stack iteration from fast C calls
    
    This CL extends the StackFrameIterator to support stack frame
    iteration in a fast c call. When invoked in a fast c call, iteration
    starts from the fast_c_call_caller_fp/fast_c_call_caller_pc fields
    in IsolateData.
    
    We don't know the stack pointer for the first frame, however this
    shouldn't be an issue because we only require the stack pointer to
    scan outgoing arguments and there are none in fast c calls.
    
    Bug: chromium:325123663
    Change-Id: I8da29ae29e6b1b3a32505e7dda9ce100407728fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250228
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92471}

commit ca1b752554f3426afbc7d8b48f9260c2a433266d
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Feb 21 18:12:00 2024 +0100

    [wasm] Check for missing dispatch tables
    
    Wrapper tier up iterates all dispatch tables to find the relevant entry.
    Not all tables also allocate dispatch tables though. We need to skip
    non-existing ones.
    
    R=ahaas@chromium.org
    
    Fixed: 325878101
    Change-Id: I52266ddb23563cee9e5eee3537173ca98792b933
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314660
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92470}

commit f8aaedc642edbd441baa2dc5983edfd9a137e6f1
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Feb 21 16:54:30 2024 +0100

    [gm.py] Fix bash completion
    
    Fixes bash completions used by tools/bash-completion.sh
    
    Drive-By: Remove duplicates and ensure we also have completions for
              targets defined via ACTION.
    
    No-Try: true
    Change-Id: If30d50afa9860746f0485cc6c719dec6ba13c0ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309922
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92469}

commit c0a1d2215c05da8fff1dd5aeaa3b9325dd205099
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Feb 22 11:23:12 2024 +0800

    [wasm][liftoff][riscv] Fix LoadTaggedPointer
    
    The previous way to compute the protected_load_pc didn't account for
    the possibility of a constant pool getting emitted.
    
    Change-Id: I62da4185a5b5c42cb1e952d8f17d692349e3e15e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5316165
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92468}

commit d970d6a80bc38513b884b71e46cf37972516173f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Feb 21 20:12:41 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/9368e7e..74f88ce
    
    Rolling buildtools/linux64: git_revision:0cdb7dd27f5cbafb31704a5d849efe17ef2a0acc..git_revision:03d10f1657b4ddace618c34ab61b6357d1ae9c9a
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/d64859b..49366de
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7dc148f..03821ae
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/4b5807f..03c356e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755423601163857169
    
    Change-Id: I93bcc1c2e55f2561d790620f4f78e56326375f2b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314098
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92467}

commit 321530cb3532455775a6a45f93d571aebaaca4ce
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Feb 22 00:10:15 2024 +0000

    [foozzie] Fix calling possibly modified isArray and map
    
    This CL calls the original `Array.isArray` static method
    and original `array.map` prototype method to prevent calling
    the user modified versions of these methods.
    
    Bug: chromium:325992260
    Change-Id: Ie78e5e40b52d12868a1c25548b15b12401f4db5b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5315309
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92466}

commit f8bb47371f7ff84c2d1020787bd8d0ddaa6d0ebd
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Feb 21 14:52:40 2024 -0500

    Fix JumpIfEqual and JumpIfLessThan
    
    We need to emit a 32 bit compare similar to other platforms.
    
    Change-Id: I6d0e58198feb8042a506c03f4f1dba4632b6acdc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314485
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92465}

commit ee7f22e00ef8932c7f7c6e318c817c1ae4857913
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Feb 21 19:19:48 2024 +0000

    Revert "[heap] MinorMS cycles are never memory reducing"
    
    This reverts commit e9ffc293ecdde353898f8b8730576614ae92058a.
    
    Reason for revert: failures on ChromeOS (https://ci.chromium.org/ui/p/chromium/builders/try/linux-chromeos-rel/1886067/overview)
    
    Original change's description:
    > [heap] MinorMS cycles are never memory reducing
    >
    > Enforce and document (in DCHECKs) that MinorMS cycles should never be
    > memory reducing. We expect all memory reducing GCs to be full GCs.
    >
    > This may improve jank in the rare case of finalizing a concurrent
    > MinorMS because a full GC is requested. In such cases we currently
    > finish the minor GC and force finalize sweeping, before we start the
    > full GC. Sweeping for memory reducing GCs is expensive so force
    > finalizing it right after it started may actually cause jank.
    >
    > Bug: v8:12612
    > Change-Id: If3fbe9f778ac5dff700c7c1d765f5bc15bcbd8c7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5310169
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92451}
    
    Bug: v8:12612
    Change-Id: Ie70e8f2c258390823f06f1a30ba333df57c0a4c4
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314724
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92464}

commit 4ccb925fe5be0a18e99c6dd70ff9b5e44a59a27e
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Feb 21 18:05:00 2024 +0100

    [wasm-compile-fuzzer] Various fixes and improvements
    
    - Switch --wasm-tier-mask-for-testing to apply to declared (as opposed
      to possibly-imported) function indices. This makes sure that the
      fuzzer's selection of functions to be optimized has an effect.
    - Disable lazy compilation for the fuzzer, to make sure we compile
      everything right away.
    - Before giving up on a generated module that runs for too long, tier
      up all functions in it, to possibly catch compiler DCHECKs. To avoid
      non-determinism, we perform this tier-up synchronously on the main
      thread, using a new flag --wasm-sync-tier-up.
    - Make the fuzzer check for compile-time imports properly.
    - Leave tiering enabled for fuzzer runs, to be closer to production
      behavior and enable inlining based on call counts.
    - Fix: when clearing the global type canonicalizer, also clear the
      per-heap list of cached canonical RTTs to prevent them from being
      reused erroneously.
    - Fix: when checking whether a function should be compiled with
      Turboshaft, compare the mask bit "!= 0" instead of "== 1".
    
    Changes:
    Change-Id: I11ac329b82bc9c8acb5157bc418ee48b2a85198f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314659
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92463}

commit 7317b73749493c4fd2757c5b2a7eb8c62e5e773e
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Feb 21 18:56:40 2024 +0100

    Add TrustedObject::VerifyProtectedPointerField
    
    Similar to Object::VerifyObjectField, this method verifies a protected
    pointer field.
    
    We use it for verifying protected pointer fields in the
    WasmTrustedInstanceData, and it will probably get more uses as more
    trusted objects and protected pointers are introduced.
    
    R=saelo@chromium.org
    
    Bug: v8:14564
    Change-Id: I404b3991ff3326c845f6b7c02a7827037171d0a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5277247
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92462}

commit cfe1cccfb86ca4c21e21cff47712894c2a83c61a
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Feb 21 18:44:03 2024 +0100

    [wasm-imported-strings][turbofan] Use HeapType::kExternString
    
    ...instead of the concept of "implicit internalization".
    
    Bug: v8:14179
    Change-Id: I3bc8ac7e3204a3ba4f71af526f433829d12bb920
    Fixed: 326091470
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314561
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92461}

commit b1f3b1b10def6c6707aeed572502e231a5c6eccf
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Feb 21 16:33:15 2024 +0100

    Reland "[maglev] Cache elements array"
    
    This is a reland of commit 94b71ec6f3c71a2f38ce740d53e51290ae038951
    
    Original change's description:
    > [maglev] Cache elements array
    >
    > Drive-by: also record JSArray::kLength in FastObjects
    >
    > Bug: v8:7700
    > Change-Id: I0440f5682ada55cf9ee7a34a6f31c0895c8c3428
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306756
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92422}
    
    Fixed: b/325992259, b/326142592
    Bug: v8:7700
    Change-Id: I137ea524a2fd42d2f0071224ab5072bd3ba145d5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309912
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92460}

commit daf9edb34e7200d85f0ae15063006bb130ac54d1
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Feb 21 17:07:15 2024 +0100

    [ignition] Always clobber accumulator on JumpLoop
    
    This clobbers the accumulator on all paths which makes the
    (actually unobservable) behavior more predictable.
    
    Fixed: v8:14605
    Change-Id: I4f197d4adcd8c37024b81bee056f4c12f1c79d78
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314559
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92459}

commit 33cf9287fb27ff7e9d7a33536b584439ecfb2626
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Feb 21 08:07:27 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/33cc0d5..9368e7e
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/ae5d810..88acf0d
    
    Rolling buildtools/linux64: git_revision:d4f94f9a6c25497b2ce0356bb99a8d202c8c1d32..git_revision:0cdb7dd27f5cbafb31704a5d849efe17ef2a0acc
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/0285388..1506720
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/ebfc67b..4ec280b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755468899880204865
    
    Change-Id: I154b9b90d1619d39372aefbcfd3b7f75e8a6ac0f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5314084
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92458}

commit 14cb4e7edb67caba247cb263ed7af109ccdec52c
Author: Francis McCabe <fgm@chromium.org>
Date:   Tue Feb 20 20:40:24 2024 +0000

    Fix for WebAssembly.Function messing up devtools.
    
    Bug: 325123665
    Change-Id: I04a96f64a829ef4247abfe8e260bc50909fe0c47
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309588
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92457}

commit 6f0a8c51ce93a29cb5fd2f327fd3adc9092c1c22
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Feb 21 12:00:04 2024 +0000

    [sandbox] Also add a non-ASan sandbox testing builder
    
    In some situations, it can be useful to have a non-ASan build when
    testing the sandbox. This CL creates a builder for that.
    
    Drive-By: drop 'symbolized' from the builder name as it's not an
    important property of the builder.
    
    Bug: v8:12878
    Change-Id: I78eed50b17f12cb664ab1b8c098dd601d5d0a254
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309906
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92456}

commit c692fab817aaa0c572e9e26c9c7b67ccb705d5d6
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Feb 21 16:21:18 2024 +0100

    [maglev] Fix to prevent phi untagging for resumable (non-)loops
    
    This reverts the misguided attempt at fixing the issue in
    `regress-crbug-325678240.js` attempted in
    https://crrev.com/c/5197678. The actual problem were not
    exception handlers at all.
    
    The issue is that when osr is attempted inside of a resumable loop,
    then this loop might not be a loop at all (if the back-edge
    unconditionally deopts). Therefore we have a block where
    `block->is_loop()` is false, however
    `block->state()->is_resumable_loop()` is true. The solution is to block
    hoisting on the latter predicate alone.
    
    Fixed: chromium:325678240
    Change-Id: I52aaa2c19f5daaa3af273cd6651474db45660042
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5310170
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92455}

commit 5c9a9d62bd12779692987b6b3ddd8ac5bbe64c98
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Feb 21 11:19:49 2024 +0100

    [wasm][shared] Introduce shared tables and element segments
    
    Bug: v8:14616
    Change-Id: I0b656c1aada98aba904ff60fd4b28c57cd12008e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300309
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92454}

commit 955d1972ef0a32cf44fc27cd32d055a7ddc30fcf
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Feb 21 15:14:49 2024 +0100

    [wasm] Ensure empty safepoints for protected instructions
    
    Protected instructions do not emit a safepoint, except in debug code.
    Hence we should not use a previously defined safepoint which might have
    tagged spill slots which are not valid any more at the protected
    instruction.
    
    R=ahaas@chromium.org
    
    Fixed: 325866363
    Change-Id: I2f301def79a4532738b45ee08596f71d2f8cd499
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309911
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92453}

commit bbaad9bf8a7642ea53d5a7746658ad465fb0af2d
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Feb 20 15:02:45 2024 +0100

    [maglev] Implement polymorphic loads using the sub graph builder
    
    Bug: v8:7700
    Change-Id: I406f55875ceb328961172fe87543300afc9e3531
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272238
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92452}

commit e9ffc293ecdde353898f8b8730576614ae92058a
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Feb 21 15:35:32 2024 +0100

    [heap] MinorMS cycles are never memory reducing
    
    Enforce and document (in DCHECKs) that MinorMS cycles should never be
    memory reducing. We expect all memory reducing GCs to be full GCs.
    
    This may improve jank in the rare case of finalizing a concurrent
    MinorMS because a full GC is requested. In such cases we currently
    finish the minor GC and force finalize sweeping, before we start the
    full GC. Sweeping for memory reducing GCs is expensive so force
    finalizing it right after it started may actually cause jank.
    
    Bug: v8:12612
    Change-Id: If3fbe9f778ac5dff700c7c1d765f5bc15bcbd8c7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5310169
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92451}

commit 1da38a4017181e548ddd031c0902405c262020e1
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Feb 21 14:49:03 2024 +0100

    [builtins] Do not use SetIsolateDataSlots::kYes in CEntry
    
    When invoking CallCFunction from CEntry, it is not necessary to
    use SetIsolateDataSlots::kYes because we can already iterate the heap
    through the ExitFrame set up by CEntry.
    
    Bug: chromium:325123663
    Change-Id: I19cd92b64326c7d4a57ca2bfcb2a4f568f059226
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309908
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92450}

commit 5539e74015969a542571c8697134c7f42ff1efa4
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Feb 21 12:59:20 2024 +0100

    [wasm][cleanup] Simplify wasm-to-js wrapper
    
    In the wasm-to-js graph builder, the "arity match" branch is just a
    special case of the "arity mismatch" branch. Merge the two cases into
    one.
    In the "arity match" case, we did not use the {expected_arity} argument.
    Use it to check that the arity does match in debug mode, which is
    required now for correctness, and fix some places where we forgot to
    take JSPI into account.
    
    R=ahaas@chromium.org
    
    Change-Id: I430582215f6ccf9a7f3cd52bd83115bdf4504788
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309905
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92449}

commit 393e32fa96a32e35d32d3405f540c9b191ce97a5
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Feb 20 13:18:26 2024 +0100

    [cppgc] Revise "sweeping out of work" condition
    
    On ToT, out of work means the concurrent sweepers are out of work and
    there are no unswept pages left. There could still be unfinalized pages
    that need handling on the main thread. This may take a long time and be
    too expensive for a minor GC.
    
    This CL revises the condition such that there should also be no
    unfinalized pages. This may happen if pages are finalized as part of
    on allocation sweeping.
    
    Change-Id: I5e2b08d30a9a8f00c26d6a96a570b33fc165a602
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5285155
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92448}

commit 33049eddc8476dec61fbc27859e4d90c83a740b3
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Feb 21 12:42:09 2024 +0000

    [sandbox] Prevent OOB access into elements_accessors_ array
    
    The global elements_accessors_ array is accessed with an ElementsKind
    read from within the sandbox (from a Map, typically) as index. As such,
    an attacker can fully control the index. Previously, the array had only
    as many entries as there are element kinds, which meant that an attacker
    could access the array out-of-bounds. This CL now fixes that by making
    the array 256 elements large. As the ElementsKind is a uint8_t under the
    hood, and because the array contains pointers, this now guarantees that
    any out-of-bounds access (index >= kElementsKindCount) leads to a
    (harmless) nullptr dereference crash.
    
    Bug: b/326109685
    Change-Id: I6cc8edec49b9e7bb280ddd04d42341967898ca30
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309907
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92447}

commit 79fa9bab28da6ac11438b9313ebae12fe3a1f536
Author: Liviu Rau <liviurau@chromium.org>
Date:   Wed Feb 21 12:28:15 2024 +0100

    [test262] Make auto-roller account an owner of staging folder
    
    CV still fails to trigger on test262 imports. The pattern originally proposed seems to be insufficient.
    
    https://chromium-review.googlesource.com/c/v8/v8/+/5311261#:~:text=CV%20cannot%20start%20a%20Run%20because%20this%20CL%20is%20not%20satisfying
    
    Bug: v8:14002
    Change-Id: I5c300d356893ab6df6016d42779d4368140c1154
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5313519
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92446}

commit 238208841757700c284b52f297bfb007e71c2e26
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Feb 21 11:49:01 2024 +0000

    Revert "[maglev] Cache elements array"
    
    This reverts commit 94b71ec6f3c71a2f38ce740d53e51290ae038951.
    
    Reason for revert: Suspected for https://ci.chromium.org/ui/p/chromium/builders/try/dawn-linux-x64-deps-rel/46528/overview
    
    Original change's description:
    > [maglev] Cache elements array
    >
    > Drive-by: also record JSArray::kLength in FastObjects
    >
    > Bug: v8:7700
    > Change-Id: I0440f5682ada55cf9ee7a34a6f31c0895c8c3428
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306756
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92422}
    
    Bug: v8:7700
    Change-Id: I32695191996400f63c49b7f1d83efaed35244ba0
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309904
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Owners-Override: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92445}

commit bc26f1ffa0b2e10fce1a4b5ca231ff44bd46bb9c
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Feb 20 21:07:13 2024 +0100

    [flags] Move some definitions to the implementation header
    
    This will enable unit testing more functionality exposed in the
    header.
    
    Bug: 41497291
    Change-Id: I1932ef48b1658c746aa3ad98511a35d1bee851f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309895
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92444}

commit 6c390135c23eff6e56190ddcf30b07ecfe8473c5
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Feb 21 09:58:44 2024 +0000

    [sandbox] Redesign sandbox testing mode
    
    This CL refactors and extends the sandbox testing mode:
    
    - It removes the d8-only --enable-sandbox-crash-filter flag and replaces
      it with a new --sandbox-fuzzing flag.
    - The sandbox-fuzzing mode is, as the name implies, useful for fuzzing
      the sandbox. It enables the memory corruption api and the sandbox
      crash filter, which filters out crashes that are not considered
      sandbox violations.
    - It changes the exit codes in the sandbox crash filter from 0 to -1 so
      that fuzzers can see that the program terminated unsuccessfully.
    - It changes the gn flag to v8_enable_memory_corruption_api (instead of
      v8_expose_memory_corruption_api) to be consistent with other feature
      flags and because the api is now only actually exposed if sandbox
      testing mode is also enabled.
    
    Bug: v8:12878
    Change-Id: I11263e7b47e2b24d01229cf86d5055d6c3c5c9ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309902
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92443}

commit 7330f46163e8a2c10a3d40ecbf554656f0ac55e8
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Feb 20 16:27:22 2024 +0100

    [wasm] Add bounds check in tier-up of wasm-to-js wrapper
    
    The entry index in the WasmApiFunctionRef was used to look for the given
    WasmApiFunctionRef in the indirect function tables, but it was not
    considered that the indirect function tables can have different lengths.
    
    R=clemensb@chromium.org
    
    Bug: 325893559
    Change-Id: I0497c7a769515345d586d250cc71e0dfc7c70394
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309898
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92442}

commit 2357a3d680a4d03d92eac82a4e28d7cc66b891ec
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Feb 21 09:43:03 2024 +0100

    [turboshaft] Maglev-to-turboshaft: support exception handlers
    
    Bug: v8:12783, v8:14581
    Change-Id: I9c789e505f090bb6a150bee982adb24556039856
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309897
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92441}

commit 023502f43e62e2271130dded86ffe510b1253ea9
Author: JiQiu <qiuji@iscas.ac.cn>
Date:   Tue Feb 20 22:43:24 2024 +0800

    [gm.py] Support android_riscv64 builds
    
    This patch adds support for "gm.py android_riscv64.release.check"
    and similar invocations.
    
    Bug: v8:14632
    
    Change-Id: Ic18e33fc4a7df5ecc2274f28be083067023bd882
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309945
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92440}

commit 1cf87372c372bc3f326e2f6940e3b228051bd00d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Feb 20 19:19:26 2024 +0100

    [turboshaft][wasm] Fix load type for LOAD_TAGGED_ROOT
    
    The root pointers are stored as uncompressed pointers, therefore
    loading from the roots table should load with pointer size.
    This breaks on big endian platforms otherwise as we are loading the
    wrong half of the pointer then.
    
    This change also simplifies the existing macros to load a root value
    with a single macro that uses the root index information to figure out
    which load to generate and whether a bitcast is required.
    
    Change-Id: I4b419a7707bf811691dfeebe1e6e89f225dd7870
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309903
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92439}

commit d17ddd4c5fe7538428611f6228aff5b9196fbfc8
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Feb 20 20:18:24 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/6d07599..33cc0d5
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/9cb2dc6..d64859b
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/280bb93..7dc148f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755514199092901985
    
    Change-Id: I16d383268ff2229bd7d297e3664d46d70f2b3fbe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5311196
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92438}

commit c08629b2fdd20ad796b868b21810b98a32c9fc86
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Tue Feb 20 14:34:16 2024 +0800

    [riscv] Enable OOB trap handler
    
    Port commit 5154f22c8cdf24c3054a620e989024610b479a27
    Reland "[wasm][mac][arm64] Enable OOB trap handler"
    
    Port commit e312038dafa9412b6a4a3dbc541428a0471b913a
    [wasm] Add trap-handler support for arm64 simulator
    
    Port commit 49d78b893bffdaf59db5bd68fda73280914c15a8
    Reland "[wasm] Single landing pad for trap handlers"
    
    Change-Id: Id26567a65cde60d2a0e49da1e9cb9f3a71cf1a91
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5227604
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Mark Seaborn <mseaborn@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92437}

commit 5cba930221993e4b558f8cdb79e4a693d93695c4
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Feb 20 13:59:06 2024 +0100

    [heap] Delay incremental marking when concurrent sweeping is running
    
    To avoid expensive complete sweep phases on the main thread, bail out of
    incremental marking start when starting from a task (soft limit) and try
    again later. This should give concurrent threads more time to finish
    sweeping.
    
    Bug: v8:12612, b/40943580
    Change-Id: Ia2401739ee149ae3038920964f05e5906ca41980
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5289016
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92436}

commit 0375d51d6341fc3141e25d4baa5faea19b2eb4c8
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Feb 20 08:06:20 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/05c489d..6d07599
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/36dc95f..ae5d810
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/d02875c..60df7b9
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/834e97d..0285388
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755559497084237585
    
    Change-Id: Ic47865504efe3438042ba5fc653cbc17ebeef61d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309720
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92435}

commit 92b543461dbdb0ed951c5fa5f878c8848db3cca4
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Feb 20 16:54:45 2024 +0100

    [runtime] Fix HeapObject::RehashBasedOnMap()
    
    ... which missed some cases that required rehasing according to
    HeapObject::NeedsRehashing().
    
    This CL also adds a PushParamsAndDie instrumentation in order to
    investigate attempts to rehash objects with non-existing instance
    type values.
    
    Bug: chromium:326043780
    Change-Id: Ie13af1c335fcbf816e2de66d97ccb964d5d5fc9c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309919
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92434}

commit 98c4099fcdd133e1cd6d62535f2b5e2007c48c2c
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Feb 20 16:36:52 2024 +0100

    [cleanup] Deduplicate BuildModifyThreadInWasmFlag
    
    ... by moving it in the base class.
    
    R=ahaas@chromium.org
    
    Change-Id: Ia6ebe10264292859ef041919ca3131f5d5ecb55b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309899
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92433}

commit 92c58b615fa173405fb1d0a414673808302c80ea
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Feb 15 10:36:38 2024 +0100

    [turbofan] Support StorePair in MachineGraphVerifier
    
    Fixed: chromium:324994854
    Change-Id: I57ffea6f38ca91d7b8fe68e5e1d38f891fb00bb8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300054
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92432}

commit d771d0d479be93a6a9e815c36dd1c27dd1b9c1e4
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Feb 20 16:18:28 2024 +0100

    [maglev] Prevent hoisting phi untaggings over exception handlers
    
    Hoisting across exception handler merges would require us to add more
    exception phis.
    
    Drive-By: Add hole check when the new representation is non holey.
    
    Fixed: chromium:325678240
    Change-Id: I76dba06c442336ce28bc469cfab1cdd03c42e96a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197678
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92431}

commit 7be465a435b53ca3c8168d76ed81f42514e8d12e
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Feb 20 16:04:22 2024 +0100

    [fuzzer] Support arbitrary number of arguments
    
    The standalone binaries generated for libfuzzer-based fuzzers currently
    require to pass exactly one argument.
    For fuzzers that can also be invoked similarly to d8, this breaks the
    "bad build" check in Clusterfuzz, where the binary is being invoked with
    no arguments.
    
    Also, if unknown flags are passed, we try to open a file with that name
    and fail, which is also interpreted as a bad build.
    
    This CL fixes both issues by allowing an arbitrary number of arguments,
    including 0, and ignoring additional arguments that start with '--'
    (after printing a warning).
    
    R=machenbach@chromium.org
    
    Bug: 325533621
    Change-Id: I2d2eab1ba5fc67b7fda19e262201a2b859fef590
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309915
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92430}

commit ebc3cb9d6ac9131ab083dd3fdac1c3a45ad4fee7
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Feb 20 15:59:23 2024 +0100

    [turboshaft][wasm] Fix reachability tracking for unreachable loop
    
    This requires a loop that consists of a single block at the time of
    running the WasmGCTypeAnalyzer whose predecessor is unreachable.
    In that case the loop gets marked as unreachble as well.
    If there are some previous outer loops, we can end up revisiting this
    unreachable loop. At that point in time we have backedge information
    for this loop and we run the MergeSnapshot(block) for this loop after
    resetting the reachability of the loop.
    The backedge is now marked as reachable and the whole loop will be
    marked as unreachable.
    
    This CL fixes it by marking a loop always unreachable if its forward
    edge is unreachable.
    
    Ideally, the loop revisitation of previous loops would not revisit
    blocks outside of their respective loop bodies.
    Unfortunately the AnalyzerIterator isn't smart enough for that.
    (It should also be possible to construct a similar scenario where the
    unreachable loop is embedded in a reachable outer loop that requires
    revisit, in that case we'd probably end up hitting the exact same
    DCHECK independently of the AnalyzerIterator visitation order.)
    
    Fixed: 325756545
    Change-Id: I7cf4a4d8a51e9c4bc8cf580171bfc2ca73068a14
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309896
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92429}

commit f9c2749c41b4c2a7dbbba8849933f2cc0bad32f9
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Feb 20 14:39:02 2024 +0100

    [wasm] Fix data race in EstimateCurrentMemoryConsumption
    
    The TypeFeedbackStorage was accessed concurrently by compilation on a
    background thread and the GC on the main thread in
    EstimateCurrentMemoryConsumption. This CL moves the access in
    EstimateCurrentMemoryConsumption behind a lock.
    
    R=mliedtke@chromium.org
    
    Bug: v8:14631
    Change-Id: I309614433824eaa2429e99f4aa8d6d532933ecc3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309914
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92428}

commit c28786b6e2c60871a42bab099f08301718677c83
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Feb 20 14:38:57 2024 +0100

    [object] Fix enable_if in FixedArray to actually work
    
    trigger a substitution failure -- fix TaggedArrayBase to use this
    correctly (including adding an additional intermediate dependent
    typename as necessary).
    
    std: :enable_if needs to access the actual enabled_if<...>::type to
    Change-Id: Icedf23fbcdf97e4fe650acc29a65614d9cad2625
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5309894
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92427}

commit ff216c02c49d42188639af63cf485278db041ad7
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Feb 20 10:25:33 2024 +0100

    [heap] Reschedule MinorMS concurrent marking
    
    On allocation slow path, reschedule concurrent marking.
    This will affect cases where there are relatively few roots (resulting
    in low initial concurrency), but the worklist later grows and concurrent
    marking can have enough work for additional threads.
    
    Bug: v8:12612
    Change-Id: I4a43e008d542f285a9fce4f6464b092062b296f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272837
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92426}

commit 817c2db36492002466eb77a576c07693fc66dd28
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Feb 20 14:00:37 2024 +0100

    [turboshaft] Disallow --stress-concurrent-inlining with frontend tests
    
    Bug: v8:14630
    Change-Id: Ia47dd7767d9ea2b9bf399b8d01390e012e4ec744
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306766
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92425}

commit 0c5178fd82fc809ec14a8ce149c0b4c406d4ac11
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Feb 20 12:53:46 2024 +0000

    [sandbox] Support ASan in the sandbox crash filter
    
    To support ASan with the sandbox crash filter, we need to do two things:
    
    1. We should uninstall the crash filter upon detecting an ASan error as
       ASan may be configured to report errors through abort(), which we
       would otherwise ignore.
    2. We should check if the ASan error occurred inside the sandbox address
       space, and if so ignore it. This can be done with the help of
       __asan_get_report_address().
    
    Both of these are accomplished by installing a custom "death callback".
    
    Bug: v8:12878
    Change-Id: I01ba70127906878282c3a1eef7e7704d14bd1966
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307541
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92424}

commit 30dd929a26f7e8774307589a6d788d5a588c949e
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue Feb 20 13:21:45 2024 +0100

    [heap] Fix exceptions in intrinsic gc() call
    
    - Preserve exceptions that happen during parsing the options bag.
    - Bail out of GC on any exceptions.
    
    Bug: b/325302591
    Change-Id: I2e5c7c8a153af08687fc2def94e2352d481066e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307540
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92423}

commit 94b71ec6f3c71a2f38ce740d53e51290ae038951
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Feb 20 13:07:40 2024 +0100

    [maglev] Cache elements array
    
    Drive-by: also record JSArray::kLength in FastObjects
    
    Bug: v8:7700
    Change-Id: I0440f5682ada55cf9ee7a34a6f31c0895c8c3428
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306756
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92422}

commit a671d001286adf49ed888f1d2a8738db8c2b890a
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Feb 20 11:53:12 2024 +0100

    [turboshaft] Fix flaky test because of aggressive inlining
    
    Fixed: v8:14630
    Bug: v8:14629, v8:14581, v8:12783
    Change-Id: I73ec8c890c7a3555383c15a95a4fe99d1d4e3b7d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307539
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92421}

commit fbd00f2178c1a437fd1362dab39c0144ea6b1b08
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Feb 20 09:41:00 2024 +0100

    [wasm] Fix no-generic-wrapper case in GetOrCreateWasmInternalFunction
    
    The existing code always used the generic wrapper, even when the
    generic wrapper was disabled. With this CL we use the generic wrapper
    only if it is enabled.
    
    R=thibaudm@chromium.org
    
    Bug: 323694592
    Change-Id: I6b4b1264125b650d3be4fe1bf1a70c4aeeb06511
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307515
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92420}

commit 72b00552e079d631a1da38d33f7137eee3626546
Author: Samuel Parker <sam.parker@arm.com>
Date:   Mon Feb 19 18:17:19 2024 +0000

    [compiler][arm64] Enable csel use of zr.
    
    Also use the designated fp_zero reg for fcsel, which is now
    initialised in MacroAssembler::InitializeRootRegister.
    
    Change-Id: Ie2d98d067aef9dd66e180924b28afd27f2b89bce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300535
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Martyn Capewell <martyn.capewell@arm.com>
    Cr-Commit-Position: refs/heads/main@{#92419}

commit 07ecad053674ba5d184be4183d196a288d969487
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Feb 20 10:44:57 2024 +0100

    [wasm][fuzzer] Mark certain instructions as "heavy"
    
    Our somewhat simplistic detection mechanism for long-running
    randomly-generated modules relies on counting executed Wasm
    instructions. Some instructions ("bulk" instructions operating
    on tables/memories/arrays/strings) can take significantly longer
    to execute than simple instructions, so when functions used many
    of those, they could run long enough to cause timeouts without
    bumping into the "max steps" budget. This CL mitigates that by
    marking relevant instructions as "heavy", so they count as 1000
    steps.
    We could be fancier and take actual lengths into account, but
    perhaps this simple approach is good enough.
    
    Fixed: 325738876
    Change-Id: Ib325be4d6864db2840ec7d81a6d13cdf24fd01ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307538
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92418}

commit 4af6461ae38db31c6fe4b356d19d0ceb452efdbc
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Feb 16 18:47:59 2024 +0100

    [flags] Split off header with implementation details
    
    Bug: 41497291
    Change-Id: I930f6157e2a5ffbc1ac9bd9c76b008029ce7de63
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300310
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92417}

commit f48b34735ebb8dddeeb4ae8d05421ecdd3825c2c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 19 17:06:08 2024 -0800

    [tools] Update gcmole
    
    R=clemensb@chromium.org
    
    Change-Id: I33ac8f5257ee842cdabdcf0cbc1abcf44bf5a699
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307663
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92416}

commit 246a3d1c15b3426f695a60932e957fecb431be5c
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Feb 19 19:43:35 2024 +0100

    [gm.py] Reclient config update for manual build dirs
    
    The automatic args.gn update to apply the goma->reclient change
    only worked for "managed" output directories; this patch brings
    them to "manual mode" output directories (`gm out/foo`).
    
    No-Try: true
    Change-Id: Ia970d111f612cbd907cc370981f6c8cb744a9795
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306762
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92415}

commit fc437c335c727caf6c22f880809bf63cc34a4a62
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon Feb 19 16:29:58 2024 +0100

    [heap] Perform at most 2 MemoryReducer GCs
    
    Finch experiment has shown that we can reduce Full GCs by about 3.3%
    on Android by only performing at most 2 MemoryReducer GCs without
    regressing memory usage.
    We could also perform a single MemoryReducer GC but that would regress
    memory.
    
    Drive-by: Remove --memory-reducer-single-gc flag.
    
    Bug: v8:13842
    Change-Id: I421be6519bd66be8920abd3e56e357edff4e3e76
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306758
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92414}

commit b637d37d76c50afbaefca8813b7a2576d6a7f683
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 19 20:17:40 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/9d7c8e7..280bb93
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/0ff0fab..f9550c3
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755604795583618881
    
    Change-Id: I155ab1f761c05daedcd47e67b86a48d65945e413
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307045
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92413}

commit 3f04ab3849936177a4cb85f53d82358bf755a440
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Feb 19 19:59:06 2024 +0100

    [wasm][liftoff][arm64] Fix LoadTaggedPointer
    
    The previous way to compute the protected_load_pc didn't account for
    the possibility of a constant pool getting emitted.
    
    Fixed: 325359458
    Change-Id: I7c284175d3c0e9d802ad307adf8d93e721d35361
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307536
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92412}

commit 5bed1f2574e292c2def45c334bd4e168ebfd2ac3
Author: François Doray <fdoray@chromium.org>
Date:   Fri Feb 16 21:50:24 2024 +0000

    [v8-tasks] Add source location to v8::TaskRunner, step 1/4.
    
    Steps:
    1. Add Post*TaskImpl variants of v8::TaskRunner::Post*Task methods,
       which take a v8::SourceLocation argument. Embedders should override
       these methods.
    2. Override Post*TaskImpl instead of Post*Task in Chromium.
    3. Override Post*TaskImpl instead of Post*Task in Node.js.
    4. Make Post*Task methods non-virtual and add a v8::SourceLocation
       argument which defaults to SourceLocation::Current().
    
    Bug: chromium:1424158
    Change-Id: I0606308d31d1f060e3f7ecc1a123759fb91ba8fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300502
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Francois Pierre Doray <fdoray@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92411}

commit e15a09c90f11ccd9e91f0400b9f4c63b703b4163
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Feb 19 16:22:44 2024 +0100

    [static-roots] Expose the actual value in the api
    
    Instead of relying on LTO to supply the constant value expose some
    static roots by their actual value in the API.
    
    Bug: v8:14445
    Change-Id: Ia65b2dee84e56f31cbe9f315fc76510b71f2c359
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121898
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92410}

commit ff8d16414e5c9aca8998a4de6078ebca4e901b6d
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Feb 19 17:24:19 2024 +0100

    [tagged-ptr] Introduce MaybeWeak for MaybeObject
    
    Introduce MaybeWeak<T> as a weakness sentinel type, representing a value
    in a Tagged<>/Handle<>/TNode<> which can be weak. This fulfils the role
    of MaybeObject in a more generic way, and indeed MaybeObject becomes a
    typedef for MaybeWeak<Object>. The methods on MaybeObject and
    HeapObjectReference become free functions, or are removed entirely in
    favour of implicit conversions (after all, any strong ref is also a
    maybe weak ref).
    
    This requires a few new specializations of Tagged, and some additional
    conversion logic. This CL is designed to be minimally invasive,
    converting MaybeObject to Tagged<MaybeObject> but trying to use the
    typedef and TaggedImpl methods as much as possible to minimise
    non-trivial code changes. In the future, we'll want to add a distinct
    Weak<T> for definitely weak values, and have conversions from
    Tagged<MaybeWeak<T>> to Tagged<T> that don't erase the type.
    
    Bug: v8:12710
    Change-Id: I1b5df70b3d2028d46a09ca2cd9bd894a3fd8cb27
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268603
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92409}

commit a4eaf6f397b883fad797da152530a14bfa9d2146
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 19 08:06:44 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e5cf1b3..05c489d
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/3426591..36dc95f
    
    Rolling buildtools/linux64: git_revision:0a2b8eac80f164f10b2cbc126890db0d295790cd..git_revision:d4f94f9a6c25497b2ce0356bb99a8d202c8c1d32
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/f1c5751..d02875c
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/3d6c152..9cb2dc6
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/6d83791..834e97d
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/d00d1e9..0ff0fab
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/a4df104..ebfc67b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755650092009760417
    
    Change-Id: Iede77c2b676b01d68aa5b1143fcddf1256596308
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306721
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92408}

commit 351046895a99af12b274d05f76eb8538f8bbbd13
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Feb 19 16:01:45 2024 +0100

    [wasm] Support --wasm-tiering-budget=1
    
    It was an oversight to define the maximum budget to use per decrement as
    "flag value / 4", which breaks any flag values < 4.
    
    This CL fixes that by making sure that we do not limit the used budget
    to 0.
    
    R=ahaas@chromium.org
    
    Change-Id: Ifc1e033f0ac23f100eed973f2d27d97b0aca044c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307537
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92407}

commit ada1b752f9f5028ca6d50f7ad41fd4a41b136d8b
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Feb 19 10:19:56 2024 -0500

    [wasm][turboshaft] fix for big endian platforms
    
    Root pointers do not get compressed, reading 4 bytes will
    load the wrong half on big endian platofrms.
    
    Change-Id: I4eb8add616a6c47509fd42bdfef6f10d2387ac8e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5304917
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92406}

commit efc98a02bfe87106d991c14bcee5e00340bf2377
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Feb 19 13:58:01 2024 +0100

    [turboshaft] Remove END_IF macro and if stack
    
    Previously, the IF/ELSE_IF/ELSE macros were implemented as separate
    single-iteration for loops, which communicate via pushing/popping off an
    if stack, and require an explicit END_IF to terminate them (since we
    don't know ahead of time if an IF needs and ELSE).
    
    Now, they are implemented as an if-else in a single two-iteration for
    loop, which wraps both IF and ELSE, allowing the for loop to maintain
    state and handle teardown, removing the need for an if stack or an
    END_IF macro. Notably, ELSE_IF becomes a separate ELSE and IF (similar
    to C++ semantics), with the inner if nested inside the outer else.
    
    Additionally, clean up clang formatting of ELSE to not introduce a new
    line.
    
    Change-Id: I41705c5550b6fdcae6150d89a2c499bd855c743f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272318
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92405}

commit 3880f45699dade105a19c55a39267192b478696c
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Feb 19 14:40:07 2024 +0000

    Fix non-atomic load in BytecodeArray::raw_source_position_table
    
    The function is an ACQUIRE_GETTER so it must use ::Acquire_Load instead
    of the non-atomic ::load for loading the TaggedField.
    
    Bug: b/40927183
    Change-Id: Ic7c0739e9b58afa3dfa3fdb5853cdd94a95e67ca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306757
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92404}

commit 6d26d2b5f88fbb3e3ea7020c2ec16e47ed1aceb6
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Feb 19 13:52:47 2024 +0100

    [wasm][fuzzing] Add jit_fuzzing implication for wasm
    
    R=saelo@chromium.org
    
    Change-Id: Icf7507797e62cd9956098394a070bdee2328b914
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300094
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92403}

commit 4832bfa3edea01c1010b9d50a529734b6d41df6d
Author: Yolanda Chen <yolanda.chen@intel.com>
Date:   Mon Feb 19 18:03:00 2024 +0800

    [revec][wasm][turboshaft] Port wasm revec phase to turboshaft, part 3
    
    Estimate cost and reduce revectorizable loads and stores when benefits.
    Add one test to revectorize load/store only and verify the result.
    
    Bug: v8:12716
    Change-Id: Ib24aaaee354be587300917c500720d2f3f0dadfd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252427
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92402}

commit 30290a6ff1cfe3843bee44a78a2f643caaab8cf2
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon Feb 19 12:31:14 2024 +0100

    [compiler] Support Float32Constant and Float64Constant in ConstantView
    
    Change-Id: I5ec4b77ba46e40bd95f0fb8dca84489399b11dcc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307516
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92401}

commit 218de0f340075db597e8bcc91eb9d855ee271e55
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Feb 19 19:21:43 2024 +0800

    [loong64][sandbox] Port some sandbox patches to loong64 part2
    
    Port commit 2311eb0e5676d88f655951cd7df35926a54f1434
    - Make DeoptimizationData a trusted object
    
    Port commit 098127338d8bd05d260d10c146208fc87ddf6cfe
    - Turn Code::deopt_data_or_interpreter_data into a trusted pointer
    
    Port commit 606956c91c47af3953a48f5d65faf02b890cfd3c
    - Use protected ptr for Code::deopt_data_or_interpreter_data
    
    Port commit f75673f4a941d9ea3afbd9c5c8c41f45329df5c5
    - Use protected pointers in InterpreterData
    
    Port commit 0b518174b2a03ef512345852f4b36142921486da
    - Fix handling of InterpreterData in InterpreterEnterAtBytecode
    
    Change-Id: Ie19ba0b52d215b4e2da8191f5aaf4e02f027cacb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307435
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92400}

commit 8d9647d36c5159fcc34c1f4390aa401a64dd42c6
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Mon Feb 19 12:07:42 2024 +0100

    [turboshaft] Maglev-to-turboshaft: Fix flaky tests
    
    Feedback collection sometimes only starts on the 2nd time the function
    is called rather than the 1st time, even when
    %PrepareFunctionForOptimization is used.
    
    Bug: v8:14581, v8:12783
    Change-Id: I6b26928e2f26f54792ac7b63e316b72495561c62
    Fixed: v8:14629
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307514
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92399}

commit 9d9854f134302fcd4e55e0e7ea45b1dc3a64be9e
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Feb 19 18:52:05 2024 +0800

    [loong64][mips64][liftoff] Use WasmDispatchTable for indirect calls
    
    Port commit e8513f44391a41938f1ac8538c80177f95ebd122
    
    Change-Id: Id866b288437d647d1dd9b8c77aab66a14f856878
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5307434
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92398}

commit 66be05befa301325fa11dd13b2242e0ccf794b71
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Feb 19 11:48:28 2024 +0100

    [test] Add missing reproducer for imported string bug
    
    https://crrev.com/c/5293801 missed the repro test case.
    This CL also removes an unused import.
    
    Bug: 324747822
    Change-Id: Ibcca8291a47a95a8c43513632628bac73e7c6a64
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306935
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92397}

commit 8ddb5aeb8669a0ae8cde9170edf9c3fd4d6c1d80
Author: V8 Autoroll <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 19 02:09:17 2024 -0800

    Version 12.4.0
    
    Change-Id: I14217452b6469d7d82a61675b318f7d507bdbf78
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306716
    Commit-Queue: Lutz Vahl <vahl@chromium.org>
    Reviewed-by: Lutz Vahl <vahl@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92396}

commit 471aeba455c35f456ffb270fd44dc549896d6744
Author: Carlos Caballero <carlscab@google.com>
Date:   Fri Feb 9 17:10:06 2024 +0000

    Reland "Fix string generation"
    
    This is a reland of commit c04ebf953da2d1410afe0b5be45725d148c3f91c
    
    It fixes the referenced compile error by not using ConstBytes at all.
    
    Original change's description:
    > Fix string generation
    >
    > The current code was not properly extracting strings when the v8 string
    > was not flat.
    >
    > Bug: b/283794416
    > Change-Id: Ibf72d6a4017ede877fe1211e8e328599e7690687
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5273565
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    > Cr-Commit-Position: refs/heads/main@{#92247}
    
    Bug: b/283794416
    Change-Id: I2a06b0a86d9e734e9a529919a34286abe93c7b7b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279450
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    Cr-Commit-Position: refs/heads/main@{#92395}

commit f8a0dd29536c0d520978219bc896295f28d56944
Author: Andy Wingo <wingo@igalia.com>
Date:   Tue Feb 13 11:48:31 2024 +0100

    Fix sense of ShouldEagerlyProcessPromotionList method in scavenger
    
    The logic is to process copied objects as long as the promoted object
    list isn't too long, but ShouldEagerlyProcessPromotionList was returning
    the opposite of what its name suggests.
    
    Change-Id: Ifde0723b6e5c43876a7729cbc13f1739a83a1f1e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5289018
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#92394}

commit e91f5da28e580c5366da27fbc836bb5604061abc
Author: Andy Wingo <wingo@igalia.com>
Date:   Tue Feb 13 11:34:34 2024 +0100

    Fix JSArrayBuffer iterator to pass object to VisitExternalPointer
    
    Previously we were passing the map.  It seems that up to now, this field
    is only used by debug checks, but still it's a bug.
    
    Change-Id: Ia353505d88ab64ff12666ef8d5b3900c86933ab3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5289017
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#92393}

commit 496f467bb727a572686c8c7b886f9191993c2c54
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Feb 19 10:23:22 2024 +0100

    [maps] Do not preserve constness across prototype transitions
    
    Since we also don't update it across prototype transitions.
    
    Fixed: chromium:325020448
    Change-Id: I6d7b3cf9363bb43f17dc8b487eaed9aa1b4c2d6d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300797
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92392}

commit 3539eb693a8fd9132c75c9c3d393ee363df88449
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Feb 15 15:53:30 2024 +0000

    [sandbox] Refactor BytecodeArray::source_position_table
    
    The source_position_table field of a BytecodeArray can now only have two
    legitimate values: a ByteArray (follow-up CLs will turn this into a
    TrustedByteArray) and Smi::zero(), indicating that the field is
    unavailable/uninitialized. With this, it becomes impossible to determine
    whether the position table is missing because it was never computed, or
    because there was an error during the computation. However, this does
    not currently appear to be relevant.
    
    This change prepares for a follow-up change that turns the position
    table ByteArray into a TrustedByteArray, and the references to it into
    protected pointers. For that, all possible values must either be Smis or
    trusted objects (located in trusted space).
    
    Bug: b/40927183
    Change-Id: Idd93a88223be6e27fb393c6c4eea3fb00bab04f0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5277148
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92391}

commit 266929b1dee5e4837e46e71b627cfb6f5dba7fe6
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Feb 18 21:39:18 2024 -0800

    Update google_benchmark (reviewed)
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    Rolling third_party/google_benchmark_chrome/src: https://chromium.googlesource.com/external/github.com/google/benchmark/+log/b177433..7f7c96a
    
    sysinfo.cc: Always abort on GetNumCPUs failure (#1756) (Sam James)
    https://chromium.googlesource.com/external/github.com/google/benchmark/+/7f7c96a
    
    CycleClock: Add support for Alpha architecture (#1753) (Sam James)
    https://chromium.googlesource.com/external/github.com/google/benchmark/+/385033b
    
    fix typo in GetBenchmarkVersion() (#1755) (Matthias Liedtke)
    https://chromium.googlesource.com/external/github.com/google/benchmark/+/b7ad5e0
    
    Deflake CI (#1751) (Roman Lebedev)
    https://chromium.googlesource.com/external/github.com/google/benchmark/+/b04cec1
    
    Add `BENCHMARK_TEMPLATE[12]_CAPTURE`, fusion of `BENCHMARK_CAPTURE` and `BENCHMARK_TEMPLATE` (#1747) (Roman Lebedev)
    https://chromium.googlesource.com/external/github.com/google/benchmark/+/e990563
    
    set library version in bazel (#1746) (dominic)
    https://chromium.googlesource.com/external/github.com/google/benchmark/+/30a37e1
    
    Output library / schema versions in JSON context block (#1742) (Roman Lebedev)
    https://chromium.googlesource.com/external/github.com/google/benchmark/+/17bc235
    
    ignore new bzlmod lock file (Dominic Hamon)
    https://chromium.googlesource.com/external/github.com/google/benchmark/+/8e2d258
    
    ...
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755689730923800081
    
    R=v8-waterfall-sheriff@grotations.appspotmail.com,mtv-sf-v8-sheriff@grotations.appspotmail.com,mlippautz@chromium.org
    
    Change-Id: I8d248df1b885f3433a20bf7ece806460f86aa11a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5303813
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92390}

commit a07b906b86225d4e1ed8e8754fa68b1a3d92688d
Author: pthier <pthier@chromium.org>
Date:   Thu Feb 15 11:55:55 2024 +0100

    [csa] Add LookupMode kFindExistingOrInsertionIndex
    
    This new mode for NameDictionaryLookup behaves like kFindExisting, but
    is guaranteed to provide a valid insertion index in case no entry was
    found.
    This replaces the previously added label
    if_not_found_with_insertion_index.
    
    Change-Id: If60b6e5c43278955ace58aae05075abb4312cbfe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300198
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92389}

commit 315fa574fc7ae98b8c6abb9d465a6f9d436f8857
Author: Shu-yu Guo <syg@chromium.org>
Date:   Fri Feb 16 13:52:09 2024 -0800

    [parser] Rename some tokens to be more readable
    
    Renames the tokens that became less readable following the ALL_CAPS to
    kCamelCase restyling to follow Google style. In particular, expand the
    ones that are excessively short given the style like kGt to
    kGreaterThan.
    
    Bug: none
    Change-Id: I68973c5ac77f332b582f62b750b4582c2023ced2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5304302
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92388}

commit 4590732aa8ebcdaa6c7da60c2df781d74c290d4f
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Feb 14 12:31:23 2024 +0000

    [sandbox] Clean up unused IsolateForSandbox parameters
    
    Now that Code::deoptimization_data_or_interpreter_data is a protected
    pointer, we no longer need an IsolateForSandbox when accessing it.
    
    Bug: b/40941143
    Change-Id: I94312be4c90acaf362966dede90a7175a1b90d8f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293560
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92387}

commit c1a505304579da10fa03c95fd22936e1b4c48f81
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Mon Feb 19 09:11:32 2024 +0000

    Revert "cppgc: Implement --cppgc-random-gc-interval=<n>."
    
    This reverts commit 21869f7f6f3e8f5a58a0b2e61e0f7412480230b1.
    
    Reason for revert: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20stress-incremental-marking/15648/overview
    
    Original change's description:
    > cppgc: Implement --cppgc-random-gc-interval=<n>.
    >
    > The flag is analogous to the V8 counterpart, which runs GCs at random
    > intervals (from 0 to n). The flag is useful for fuzzing bots.
    >
    > Bug: v8:14590
    > Change-Id: Id9b115a0fecfe85176a512ef64b0f920c9129d8b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5260141
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92385}
    
    Bug: v8:14590
    Change-Id: I615329f109f705afa5d9730e7f4e51c4f9ea6408
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5306434
    Owners-Override: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92386}

commit 21869f7f6f3e8f5a58a0b2e61e0f7412480230b1
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Sun Feb 18 18:37:33 2024 +0100

    cppgc: Implement --cppgc-random-gc-interval=<n>.
    
    The flag is analogous to the V8 counterpart, which runs GCs at random
    intervals (from 0 to n). The flag is useful for fuzzing bots.
    
    Bug: v8:14590
    Change-Id: Id9b115a0fecfe85176a512ef64b0f920c9129d8b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5260141
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92385}

commit 16d63a20b344255f12b285685dac88dc0648ef5d
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Feb 18 08:14:42 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/3af847f..3426591
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/ac8924b..6d83791
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755740688827755889
    
    Change-Id: If86a1a996d9e65f490e78742843186dada53438b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5304918
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92384}

commit 2b7cfa54e68d172125d18cecccf5b462648a83fc
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Sun Feb 18 09:58:44 2024 +0800

    [riscv] Port some patch
    
    Port commit 9fb92407592e15ea83f006ddb41e1df909839031
    - Reference Code from InstructionStream via a code pointer
    
    Port commit 8cd1e89fae9005237bba014fad72bddc0434394b
    - Move runtime-generated Code objects out of the sandbox
    
    Port commit 69a0ef2ddda9bdea1f05c17411ca3faa41ba3200
    - Use a protected pointer to reference Code from IStream
    
    Port commit e8513f44391a41938f1ac8538c80177f95ebd122
    - [liftoff] Use WasmDispatchTable for indirect calls
    
    
    Change-Id: I9330354ceaa30657ed50d2dcae0054e65e1bbd95
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5304570
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92383}

commit 330c88e06f05b1569225546c8e6af0c2d2de6145
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Feb 17 20:11:03 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/b09864a..e5cf1b3
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755785990216430145
    
    Change-Id: Iefe145c095af372da647d85440572b53b7bd07dd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5303808
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92382}

commit 98cd348e5c3fe919a339df8020c99dfaf0d91b64
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Feb 16 20:18:15 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/a11ae46..b09864a
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/f35a7d8..3af847f
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/c543d97..9d7c8e7
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/9d119c1..ac8924b
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/ed9fc26..d00d1e9
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/4775661..a4df104
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755876583784624657
    
    Change-Id: I2d66f810e8045b89d864d0c8c4f5a40a05bb4504
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5304914
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92381}

commit 0a12b33e3feb914a052be97578201856c8743b3b
Author: Peter Kasting <pkasting@chromium.org>
Date:   Fri Feb 16 07:25:28 2024 -0800

    Rename Token::Value enum identifiers from SHOUTY_CASE to kCamelCase.
    
    This follows Google style.
    
    In this case, I happened to #include a header with a token name in a
    file that #included <windows.h>, which #defines things like DELETE,
    which broke the build. Changing this will hopefully prevent other
    people from tripping over this same thing.
    
    Bug: none
    Change-Id: Ic3c29b57df71f001dece008d566810cde8978658
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293733
    Commit-Queue: Peter Kasting <pkasting@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Philip Pfaffe <pfaffe@chromium.org>
    Auto-Submit: Peter Kasting <pkasting@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92380}

commit 72700602b005b43fa56b4cfee01c01ac0a72aae0
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Feb 16 18:59:21 2024 +0100

    [turboshaft] Maglev-to-turboshaft: support JS calls and (some) inlining
    
    Drive-by: fix broken deopts (dead local registers were ignored
    and raw float64/int32 were not correctly typed).
    
    Bug: v8:12783, v8:14581
    Change-Id: Iaec5f97cc933da75f0c330b844cb938a363ebe7b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300800
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92379}

commit fb0d378309d03ff07979003b844051b7dadb2595
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Fri Feb 16 18:32:23 2024 +0100

    heap: Remove stale debugging printf
    
    Remove stale debugging printf.
    
    Change-Id: Ia147378705ac63b76fd5d8bdf512844f15c290c4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300552
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92378}

commit 0c9f9732d333d3f73d4eb01c80fc6a2904ed3cce
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Feb 16 15:35:29 2024 +0100

    [flags] Add example fuzz test
    
    This adds a test using https://github.com/google/fuzztest/. The test
    itself serves more as an example of how to add such a test. We
    don't expect it to find much. We might delete it again as soon as
    we have enough better examples.
    
    Bugs: 41497291, 40941204
    Change-Id: I7f27ba9079fb7958bbbadfcdcea395d4ba9042e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300802
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92377}

commit e8c9aede1306e1fbe686ca343d5ea29937a5c764
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Feb 16 14:07:20 2024 +0100

    [turboshaft][wasm] Adjust inlining budgets for shipment for wasm linear
    
    Design doc: https://docs.google.com/document/d/1DzL-bWJwS1BpdeRymK49GPJIE5V3DvOxdzLLxrdcSZY/
    This change changes the upper inlining budget for wasm modules based
    on the function size distribution of the given wasm module.
    A wasm module with many small functions can be an indiation, that the
    toolchain (like emscripten, binaryen, ...) didn't perform much
    inlining yet.
    So in these cases we use the budget we already use for wasm-gc modules
    that is rather "aggressive" in inlining causing potentially large
    compile time increases.
    If the module contains very few small functions, we reduce the upper
    budget based on the assumption that more inlining was already
    performed on the module, so inlining has probably less potential for
    performance gains (assuming the toolchain performed good inlining
    decisions).
    
    Bug: v8:12166
    Change-Id: I38e422230a941e6f05b9035b0b9926478d6fc3f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268507
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92376}

commit b5c55c156ebe3c1dba4b059f8c379ad8a70a2743
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Feb 16 17:15:49 2024 +0100

    [turboshaft] Introducing tracing of intermediate reduction steps
    
    Drive-by: add "lowering" in the name of some reducers to make more
    obvious what they do (eg, StackCheckReducer sounds like it could be
    inserting stack checks or removing stack checks, but
    StackCheckLoweringReducer clearly lowers existing stack checks).
    
    Bug: v8:12783
    Change-Id: I91cc44efca607b8ae37de3b5bb9dfc2f6c24b700
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272858
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92375}

commit c1e5f66876c6806b45985a83f02fba8212529e60
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Feb 16 08:07:06 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/de25224..a11ae46
    
    Rolling buildtools/linux64: git_revision:8b973aa51d02aa1ab327100007d4070c24b862b0..git_revision:0a2b8eac80f164f10b2cbc126890db0d295790cd
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/984707e..f1c5751
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/addb98c..3d6c152
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/b1b1a43..c543d97
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755921882049229201
    
    Change-Id: Idba09c52e1379cd4d26b1620b0953cd9b74e446f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5303794
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92374}

commit 360cf3286974633fe72403125e8c4953662048c7
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Feb 16 16:56:56 2024 +0100

    [wasm][shared] Introduce shared data segments
    
    Bug: v8:14616
    Change-Id: I11c730777f2e957fbb0c2cc33749d13d7e0cdc6f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300299
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92373}

commit b8dad743dbce9ecdb6ddc920dc7354a1b0fceb9e
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Wed Feb 14 00:32:31 2024 +0000

    [test262] Add staging test for RegExp named groups (search)
    
    This CL adds a staging test for testing test262 bot.
    
    Bug: v8:13173
    Change-Id: Id8982a3d18bca219133f672736064e4d57d6da59
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5294455
    Reviewed-by: Liviu Rau <liviurau@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92372}

commit b945cdd6a73f4654cab15827cfff268c1b199df9
Author: Junliang Yan <junyan@redhat.com>
Date:   Fri Feb 16 10:30:51 2024 -0500

    s390x: fix test failure on regex
    
    Change-Id: Id0d8dfc6879c675847596f5d7c662f2859e91565
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300845
    Reviewed-by: Milad Farazmand <mfarazma@redhat.com>
    Commit-Queue: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92371}

commit 4765e4b73fcbd98af3eda5da531aab8d36109b32
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Feb 16 16:21:36 2024 +0100

    [wasm-imported-strings] Fixup Turbofan part of bb756705
    
    We shouldn't use an IfFalse as a value node. The regression test
    has been extended to cover this mistake.
    Bonus: clean up some unused things in the regression test.
    
    Bug: 324690505
    Change-Id: Ifb6d9ee5a718d6abb99a3d8646af75b46fe7e567
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300308
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92370}

commit 644ae3b23a1eccd84e25c32d40cb718cca694d25
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Fri Feb 16 15:43:21 2024 +0100

    heap: Fix allocation timeout flags
    
    The branch returning allocation failure was never exercised.
    
    Change-Id: Ia8c4c81f8a74da1f86e2fe78d0ec09e477925e3e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300307
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92369}

commit 04288c568f7484783a48c0c280fd376dd848b12a
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Feb 16 15:24:13 2024 +0100

    [wasm][turboshaft] Fix call_ref in unreachable code
    
    Part of the implementation of CallRef() does not work when generating
    unreachable operations, so bail out in that case.
    
    Fixed: 325372946
    Change-Id: I3da38247d967f2fc9fde9ae6207c27417f4d5fb4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300306
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92368}

commit 1bd45a28e8d47fc0673ba06a641d732cb1aed541
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Feb 16 06:05:10 2024 -0800

    Update google_benchmark (trusted)
    
    Rolling third_party/google_benchmark_chrome: https://chromium.googlesource.com/chromium/src/third_party/google_benchmark/+log/992199c..c300add
    
    [third_party] Fix google_benchmark BUILD.gn for newer versions (Matthias Liedtke)
    https://chromium.googlesource.com/chromium/src/third_party/google_benchmark/+/c300add
    
    [buganizer] Migrate DIR_METADATA in third_party/f*-m* (Jeff Yoon)
    https://chromium.googlesource.com/chromium/src/third_party/google_benchmark/+/4292ce1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755930226759204209
    
    Change-Id: I17569825fbbc5d4abc50bb615f4091453eeba9d3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300832
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92367}

commit 8933ed0fc3eae259eb73a4aae98d43d0d2aaed67
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri Feb 16 14:44:03 2024 +0100

    [wasm] Move code behind the --turboshaft-wasm-wrappers
    
    This is a tentative fix for the linked bug. I could not reproduce it
    locally, but this is the only code that is related to the failing DCHECK
    in the culprit CL.
    
    R=ahaas@chromium.org
    
    Bug: v8:14626
    Change-Id: Ib1125ee4d0cf1d0985dd2574f5d40b1c23cda7d3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300304
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92366}

commit 951584f6f1730dba7dc324953779c7212fd49fad
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Feb 14 15:01:00 2024 +0100

    [heap] Revise ParallelSweepSpace
    
    1) Prioritize pages that are not marked as never-allocate.
    2) Count never-allocate pages against max_pages limit (to bail out
       quicker when sweeping for allocations and fallback to trying to
       allocate a new page).
    3) Only try to allocate from freelist if sweeping found
       non-never-allocate pages.
    4) Revise max_pages limit from int with default 0 to uint32_t with
       default -1.
    
    Change-Id: I0ffa4879b257b00b00043ff2a8fb124c80d24dc6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293615
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92365}

commit 9ab05b06538d815f243bffbab08779172b029280
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Feb 16 14:26:57 2024 +0100

    [wasm-compile-fuzzer] Delete recursive groups from type canonicalizer
    
    The wasm compile fuzzer creates random types every run that are saved as recursive groups in the type canonicalizer. It is unnecessary to keep them for the fuzzer runs.
    This CL adds a method that deletes the storages used by the type canonicalizer for every fuzzer test run.
    
    Change-Id: I5919e020703795846f210e0012518dc689a0c4be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300302
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92364}

commit e72f6244a321547f4ceedb61435e6ba195842903
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Wed Feb 14 00:40:17 2024 +0000

    [test262] Add staging test for RegExp named groups (replace)
    
    This CL adds a staging test for testing test262 bot.
    
    Bug: v8:13173
    Change-Id: Id24a5b5665bbc491acd59c16ede80d6780bbd4b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293730
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Liviu Rau <liviurau@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92363}

commit bb75670599aa8cea04409f995c995017b2792189
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Feb 16 12:21:10 2024 +0100

    [wasm-imported-strings] Fix IsArrayNewSegment in unreachable code
    
    The node we query is invalid in unreachable code, so we must check
    for that before fetching it from the graph.
    
    Bonus: running the regression test in Turbofan revealed an unrelated
    issue having to do with reachability of catch blocks after replacing
    a well-known import, so this CL includes a fix for that too.
    
    Fixed: chromium:324690505
    Change-Id: If648faf7dd466ed857d723eec44fc01fc7a6a6fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300801
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92362}

commit ac449fd14490f2c11d29144d93bc33bb366535c3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Feb 16 11:17:41 2024 +0100

    [presubmit] No-prefix on issue numbers is valid now
    
    Change-Id: I51194a33adb81f8854a8ea9feca7417ce40fb341
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300547
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92361}

commit 3e3c4bc6c44611ea4b0de2662a809c7fe722195e
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Fri Feb 16 11:09:13 2024 +0100

    [test][handles] Fix cctest/test-heap for direct locals
    
    - The DisableConservativeStackScanningScopeForTesting is narrowed as
      much as possible and comments are added to explain why it is needed.
    - In one cctest, an array of local handles to contexts is replaced with
      an array of global handles, to allow for GC without a stack.
    - Formatting and miscellaneous minor fixes.
    
    Bug: v8:13270
    Change-Id: I3c6d4edc2ccd9c7d31ed2fc3d07f082b8f4c3eed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300204
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92360}

commit 093905e35887c0359da4beb69897d2279b68a34b
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Feb 15 15:35:05 2024 +0100

    [wasm] Move wrapper builder in its own file
    
    Change-Id: I2b9c1d976259cfe843a6cda449747d05c7e06a6b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300796
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92359}

commit 07533b7fe414b2e3d68427cb2559a4ae9d901fa9
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri Feb 16 08:26:37 2024 +0000

    Revert "[heap] MinorMS cycles are never memory reducing"
    
    This reverts commit 3fc8d899228d086fc3bbfb21e47a9722aa689792.
    
    Reason for revert: Roll failures (https://ci.chromium.org/ui/p/chromium/builders/try/linux-chromeos-rel/1880321/overview)
    
    Original change's description:
    > [heap] MinorMS cycles are never memory reducing
    >
    > Document in DCHECKs that MinorMS cycles should not be memory reducing.
    > We expect all memory reducing GCs to be full GCs.
    >
    > Bug: v8:12612
    > Change-Id: I84ed040e7fa16cebb5a464f6b7ced6fee9deed60
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293799
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92340}
    
    Bug: v8:12612
    Change-Id: Ia54ca1fdf49297029b55274412315a300574e790
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300213
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92358}

commit 18a46cc14afd828aa0f0a536e69876c2b0399e39
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Feb 15 20:19:55 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/790a731..de25224
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/d353dfb..984707e
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/072f218..addb98c
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/72bf410..b1b1a43
    
    Rolling third_party/fuchsia-sdk/sdk: version:18.20240207.3.1..version:18.20240215.1.1
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/b4c6fe0..ed9fc26
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/f0ceb07..4775661
    
    Roll created at https://cr-buildbucket.appspot.com/build/8755967176707769361
    
    Change-Id: Id555ae6ab5753368f342f7f32ad5839bbc1cc495
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300831
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92357}

commit 2150029747d5aaa64e9f80428fd364fa0e3293a0
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Feb 15 18:58:37 2024 +0100

    [wasm][fuzzer] Fix test case generation for new features
    
    The string builtins have to be added to the builder.instantiate() call.
    The canonical array[i8] and array[i16] need to be marked as final.
    The builder.addGlobal() parameters changed due to an inserted "shared"
    flag.
    
    Change-Id: I6c727c8d56713bad59cfe739b7ed91979594545c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300301
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92356}

commit dc12c74eae050b2e170b3b5f15a862677f32b9b5
Author: Eva Herencsarova <evih@chromium.org>
Date:   Thu Feb 15 18:43:39 2024 +0100

    [wasm-compile-fuzzer] Fix parameter consuming and breaking in finite
    loop
    
    Change-Id: I7d1f34b4bf84184103393380d88252482f851df3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300544
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92355}

commit 8884d19c6a1db798cf781587ef632d9bf73b05a7
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Feb 15 08:06:16 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/476dadf..790a731
    
    Rolling buildtools/linux64: git_revision:a3dcd7a7ad861a9c1b9930a654f2feaeb03b4c0c..git_revision:8b973aa51d02aa1ab327100007d4070c24b862b0
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756012480534957617
    
    Change-Id: I1a3304bbc6189b055d14d075e4a157db41dad015
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300817
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92354}

commit 9fa91fbda95e5db21bd5e3eb3f8c2f5fd4127a1b
Author: Nicolò Ribaudo <nribaudo@igalia.com>
Date:   Wed Jan 17 15:05:44 2024 +0100

    [import-attributes][api] Rename `ModuleRequest::GetImportAssertions` to `GetImportAttributes`
    
    The rest of the renaming due to the assertions->attributes change has
    been done in Ia2ea13adbfdb65c0a724ef0eab38d1057440e6c2. I'm submitting
    this as a separate patch because it affects the public API.
    
    Bug: v8:13856
    Change-Id: I5b8776f07b22fe866bdc172ec62628853ba5b8de
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5205273
    Commit-Queue: Nicolò Ribaudo <nribaudo@igalia.com>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92353}

commit ef966869d7c2be8276faa7d8b64cc510d635b08c
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Feb 15 16:42:58 2024 +0100

    [wasm][test] Refactor mjsunit data segments
    
    They should use constant expressions as offset. Also, change their
    parameter order.
    
    Change-Id: I9eec0edcc4b5eb9a0b774863200c6ea0589d52d2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300541
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92352}

commit 81623d243bad41d6a3291b1bea3d0b4433689797
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Feb 15 15:53:36 2024 +0100

    [flags] Add some flag-helpers tests
    
    Bug: b/41497291
    Change-Id: I8cdf6c329b9b373f89ed38db4fd5f5b43f32874e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300538
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92351}

commit 25f60bb1d08235c43df246dac594cfa08cfec913
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Feb 15 12:50:43 2024 +0000

    Fix use of wrong comparison function in MarkTransitiveClosureLinear
    
    Since this is a unordered_multimap, we must use KeySafeEqual (i.e. full
    pointer equality) rather than FullPtrComparer (less than comparison).
    
    Bug: b/325132945
    Change-Id: I9400d7be46a1573ccea2544b7bd4e7973fdc653a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300298
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92350}

commit 1be2ab508cb41770a1ea4b5eaa0c142b7ad7986c
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Feb 15 15:06:56 2024 +0100

    [wasm][shared] Introduce shared types
    
    - Add shared flag to type declarations.
    - Add shared flag to WasmDecoder. Validate that shared functions only
      have shared locals and shared stack values, and only access shared
      globals.
    - Update subtyping rules.
    
    Bug: v8:14616
    Change-Id: If0c88b22bb957fd90b4d47f821271297ee43cb39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296037
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92349}

commit 841c7c1117f8f40cf17fb24a33255f05477d315a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Feb 15 14:37:09 2024 +0100

    [wasm] Introduce new heap type 'imported string'
    
    This heap type does not exist in the wasm spec. It is used as an
    internal type to mark externref values in our optimizations for which
    we know that it is a (potentially nullable) JS string.
    
    Previously the wasm string type from the stringref proposal was used
    for that. This can cause all kinds of issues as ref.string is a subtype
    of any, not extern. (It also uses a different null representation.)
    
    Fixed: chromium:324747822
    Change-Id: I9cc2975b8612510de18e02d3b66ed54489d9cc22
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293801
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92348}

commit a8732870790f3e82dbb46808bce6264a9f57a649
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Feb 15 11:26:41 2024 +0100

    Reland "[wasm] Port the js-to-wasm wrapper to Turboshaft"
    
    This is a reland of commit 2ce046f282f09eb0b7b5a78d50855105f3f1d66d
    
    Fix: ensure that the signature zone is still alive during async
    export wrapper compilation by moving the compilation unit execution
    inside the compile scope, which keeps a strong pointer to the
    NativeModule.
    
    Original change's description:
    > [wasm] Port the js-to-wasm wrapper to Turboshaft
    >
    > Bug: v8:14108
    > Change-Id: Ife71ec11d7a3e1d30fa60e2b3b2646f6e3967f83
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250229
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92320}
    
    Bug: v8:14108
    Change-Id: I998beacf0ec07b6775a1f5ddfa29ce50e8df740c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300196
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92347}

commit 0a5c59fca3c0a6e6fac1166a6898dc32a7e14a15
Author: Andy Wingo <wingo@igalia.com>
Date:   Fri Feb 9 12:01:23 2024 +0100

    [isolate-groups] Move allocation of Isolate memory back to isolate.cc
    
    A drive-by refactoring while investigating feasibility of implementing
    isolate groups.
    
    Bug: v8:14625
    
    Change-Id: If03a2a04f2e0f148d0ad12f541cba3d45c521d14
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279445
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Andy Wingo <wingo@igalia.com>
    Commit-Queue: Andy Wingo <wingo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#92346}

commit 403a37ccb09caf09891646d46232c698da0259d1
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri Feb 9 19:01:45 2024 +0000

    [test262] Add new staging test for RegExp named groups
    
    This CL adds a staging test for testing test262 bot.
    
    Bug: v8:13173
    Change-Id: I7f3d3aa3fbcf30b08cf3ebf2c61a683b7d2cf7c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5281634
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92345}

commit 41656b88b399302e1dcc5fef0ef86edff39ec127
Author: Eric Leese <leese@chromium.org>
Date:   Wed Feb 14 17:38:42 2024 +0100

    Remove promise_debug_marker symbol
    
    Follow-up to https://crrev.com/c/v8/v8/+/5291617
    
    We no longer use this to silence promises.
    
    Bug: b:40283985, b:40283987
    Change-Id: I4c5ae4281f38119e28c626c30b1dba95de69ce62
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296144
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92344}

commit 9901577dba02a46bcbcbeb36b0b8ded630864029
Author: Eric Leese <leese@chromium.org>
Date:   Wed Feb 14 17:36:26 2024 +0100

    Remove PromiseOnStack
    
    Follow-up to https://crrev.com/c/v8/v8/+/5291617
    
    We no longer use the promise stack.
    
    Bug: b:40283985, b:40283987
    Change-Id: I0d0208a2184d0a2d21226981f3dfbdb342c9a714
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296143
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92343}

commit 29025d46e5eb0443e35250b0c8186057bc62bd16
Author: Eva Herencsarova <evih@chromium.org>
Date:   Thu Feb 15 12:36:17 2024 +0100

    [wasm-compile-fuzzer] Generate small, finite loops
    
    This CL introduces a loop that iterates for 10 times. With this change
    we have a bigger probability of having finite loops in testcases.
    
    Change-Id: Ic4f6ad60dc0dd6257b3fe94e7478dbd46cebdd10
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296416
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92342}

commit 30a87006ac7b9729f4785dc2b086355bc4e5a173
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Feb 14 17:56:03 2024 +0100

    [heap] Add DCHECK for Heap::FinishSweepingIfOutOfWork
    
    The stack trace for the crash in [1] shows that
    FinishSweepingIfOutOfWork is called, but there is still sweeping
    work to do. This CL adds a DCHECK to find similar cases in the
    future and let fuzzers find them as well.
    (the stack trace in [1] should be resolved by crrev.com/c/5296146)
    
    Drive-by: Remove unused DrainSweepingWorklistForSpace method.
    
    [1] https://crash.corp.google.com/browse?q=ReportID%3D%2739f026b4e907a2be%27&stbtiq=&reportid=&index=0
    
    Bug: b/40943580
    Change-Id: Icb2812ba733bcc02c94f0886f189cfa2a0bfd20d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293616
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92341}

commit 3fc8d899228d086fc3bbfb21e47a9722aa689792
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Feb 14 14:54:24 2024 +0100

    [heap] MinorMS cycles are never memory reducing
    
    Document in DCHECKs that MinorMS cycles should not be memory reducing.
    We expect all memory reducing GCs to be full GCs.
    
    Bug: v8:12612
    Change-Id: I84ed040e7fa16cebb5a464f6b7ced6fee9deed60
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293799
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92340}

commit e93782f6e991f2ffb85d59f16567af179b88270e
Author: Eric Leese <leese@chromium.org>
Date:   Thu Feb 15 11:54:49 2024 +0100

    Restore promise silencing behavior
    
    Follow-up to https://crrev.com/c/v8/v8/+/5291617
    
    Previous refactor removed the check for the JSPromise->is_silent
    bit when stopping on promise rejections, as it was unused in v8.
    However this is part of the v8 public API and is used by
    blink streams and could also be used by non-chromium v8 users,
    so the debugger may now pause in locations it shouldn't.
    This change restores the silencing behavior and adds a test.
    
    Bug: b:40283985, b:40283987, chromium:40150651
    Change-Id: Id68a4e619945582166253153fa80d78a2bc64f16
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300295
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92339}

commit 179dae05c5884bf55e1a4477f7a9f5e25c7c4268
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Feb 14 17:51:49 2024 +0100

    [debug][handles] Migrate some indirect handles to direct
    
    This CL replaces some indirect handles to direct handles. It is
    essentially a selective search-and-replace and should not affect
    behaviour.
    
    Bug: v8:13270
    Change-Id: I75df8eede516a93181c4e5464841f747c651b998
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296038
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92338}

commit 0c86ce8471f83b0004a61a4d5fb7be29ac60e2cc
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Feb 14 16:02:00 2024 +0000

    [sandbox] Change the value of kInvalidEntrypointTag
    
    We should not use 0xffff as the invalid code entrypoint tag as this may
    cause a pointer to look like a freelist entry if the other 2 top bytes
    are also 0xffff (which probably shouldn't happen under normal
    circumstances). Instead, this CL now explicitly creates a
    kFreeCodePointerTableEntryTag as 0xffff and changes the value of the
    kInvalidEntrypointTag to 0xff.
    
    Bug: b/40948502
    Change-Id: I3f6784489ae0de7a2869326c7f2e05770dc7500e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5297054
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92337}

commit dab24c400946493724fa527b3cd65516a4ecb654
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Feb 15 11:53:38 2024 +0100

    Reland "[compiler] Add fake handles slots to safepoint table"
    
    This is a reland of commit 7bf829ef929898868eab1557bd049db4520f3524
    
    On ARM64 we need to use the Str method in the MacroAssembler to
    properly handle large immediates.
    
    This CL now DCHECKs that stack slots use fp-relative offsets
    when clearing. This should be the case because those tagged slots
    should only be used for fast C calls and calls force a frame.
    
    And to be extra sure slots are now cleared only at the very end
    of AssembleConstructFrame(). At that point the distance between
    fp <--> sp should now match what the compiler statically thinks it
    is - even though we don't use stack-relative addressing.
    
    Original change's description:
    > [compiler] Add fake handles slots to safepoint table
    >
    > When emitting a safepoint in a fast C call, the indirect handles
    > passed to the fast callback, need to be included in the safepoint.
    > This is necessary such that the GC can find those slots and update
    > pointers in case that object got relocated during GC.
    >
    > This CL implements this by adding an is_tagged field to a StackSlot.
    > When set the stack slot should become part of the safepoint.
    > Currently these slots are simply made part of all safepoints. However,
    > this requires us to initially clear the slots in the function
    > prologue. This is necessary because all slots need to contain valid
    > pointers on a GC.
    >
    > Bug: chromium:325123663
    > Change-Id: I5f9aeb507fb3aecf5776ac7ad1a6b1ea75b1d66b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291382
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92312}
    
    Bug: chromium:325123663
    Change-Id: I90998b119be585d95c976d16fd030ac5f1dcc1e6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300197
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92336}

commit d52e02599a18e0b284dd15715a2ed0efd8256aaa
Author: Omer Katz <omerkatz@chromium.org>
Date:   Mon Feb 5 18:06:33 2024 +0100

    [heap] Free LAB only after allocating a new one
    
    Freeing a LAB pushes it to the front of the freelist. Freeing it
    right before allocating, means we're adding a too small entry to
    the freelist and potentially trying it out again which is simply inefficient.
    This CL should not have perf impact.
    
    Change-Id: Ie7ecadf0b1e189b44d2d9f8ba4b7707b4d266beb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268385
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92335}

commit b2ca02df0c2815f986664b6db1bf9e76e68c1192
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Feb 14 17:42:40 2024 +0100

    [wasm][shared] Add shared flag to globals
    
    Also, add the new --experimental-wasm-shared flag.
    
    Bug: v8:14616
    Change-Id: Ib5b079fedea2a2216d4f4ac864ad68e02ce2b3ed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5287541
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92334}

commit 56876de413c5ddd4930b067e405b121707ff34ef
Author: pthier <pthier@chromium.org>
Date:   Wed Feb 14 18:05:10 2024 +0100

    [cleanup] Streamline Swiss-/NameDictionary usage
    
    - Use PropertyDictionary instead of branching were appropriate.
    - Introduce AllocatePropertyDictionary.
    - Introduce IsPropertyDictionary.
    
    Bug: v8:11388
    Change-Id: I7e3558627c2d5200ef8786dc2f84e21bda6e80f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296039
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92333}

commit f6a1b4e7060f2af02e02742404ca582d3776018c
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Feb 15 08:36:27 2024 +0000

    Revert "[compiler] Add fake handles slots to safepoint table"
    
    This reverts commit 7bf829ef929898868eab1557bd049db4520f3524.
    
    Reason for revert: Seems to be causing crashes.
    
    Original change's description:
    > [compiler] Add fake handles slots to safepoint table
    >
    > When emitting a safepoint in a fast C call, the indirect handles
    > passed to the fast callback, need to be included in the safepoint.
    > This is necessary such that the GC can find those slots and update
    > pointers in case that object got relocated during GC.
    >
    > This CL implements this by adding an is_tagged field to a StackSlot.
    > When set the stack slot should become part of the safepoint.
    > Currently these slots are simply made part of all safepoints. However,
    > this requires us to initially clear the slots in the function
    > prologue. This is necessary because all slots need to contain valid
    > pointers on a GC.
    >
    > Bug: chromium:325123663
    > Change-Id: I5f9aeb507fb3aecf5776ac7ad1a6b1ea75b1d66b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291382
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92312}
    
    Bug: chromium:325123663
    Change-Id: If054d56ba6a57b5d0dede8a195dca2508e57f644
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5299854
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92332}

commit 2704c2d68598dbff4f82d0d0794744f3335ceefd
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Feb 14 11:39:14 2024 +0000

    [sandbox] Add design doc for hardware-supported sandbox
    
    ... to src/sandbox/README.md
    
    Change-Id: I402dd39dada3849b3f57b3ca6494d81e7c6d28eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291620
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92331}

commit 8bbbc5d3e55f2d316a1175dd49d4797c8c86d28d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Feb 15 09:27:22 2024 +0000

    Revert "[wasm] Remove unnecessary include"
    
    This reverts commit 290d67650661a0a81868b90cee172b5146562fa4.
    
    Reason for revert: Compile bots failing
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20css%20-%20debug%20builder/8432/overview
    
    Original change's description:
    > [wasm] Remove unnecessary include
    >
    > Change-Id: Id41a7c4fc005c5fb6d041c864ec7704167f2b6f8
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296035
    > Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    > Commit-Queue: Andreas Haas <ahaas@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92325}
    
    Change-Id: I587eadc266373a7c8e81398ef2412e60e2183246
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5300014
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92330}

commit a714c124902ba7eb4daa97b00c2bf2c15e7b57e6
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Feb 14 17:04:59 2024 +0100

    [wasm][turboshaft][cleanup] Fix various type inprecisions
    
    * WasmNull was loaded as a pointer instead of a tagged;
    
    * WasmCanonicalRtts were loaded as a pointer instead of a tagged;
    
    * CallOp expected the callee to be tagged in all cases, even though it's
      only tagged when the callee is a HeapObject;
    
    * The C-Entry stub was loaded as a pointer instead of a tagged;
    
    Change-Id: Ifa08770a995fea29c65117737c2b197581989b25
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279382
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92329}

commit 262dac1fd41d7a7a6da4da5016d55fd8f2e121ac
Author: Alan Screen <awscreen@chromium.org>
Date:   Wed Feb 14 08:54:53 2024 -0800

    Add build_with_v8_embedder build override variable
    
    V8 builds need the ability to distinguish when V8 is being built
    standalone vs. embedded by another target.  Using just
    `build_with_chromium` as such an indicator is insufficient, as there can
    be other embedders besides Chromium where that variable would be false.
    
    Introduce a build override variable to explicitly distinguish when V8
    is being built within the scope of an embedder.  This works in
    conjunction with https://crrev.com/c/5291676 so that Chromium behavior
    is unchanged.  This will allow other embedders, like PDFium, to then
    similarly avoid dependencies upon V8 fuzztest.
    
    Bug: pdfium:2124
    Change-Id: Ifbd6ec341e19cfd486b6a8e6186be0e6acecf318
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291895
    Commit-Queue: Alan Screen <awscreen@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92328}

commit 3030cb1af3642a505fabfa4018cd4f4eeddb6c54
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Feb 14 14:09:58 2024 +0100

    [wasm] Introduce generic js-to-js wrapper for invalid signatures
    
    The CL also adds a DCHECK in the generic js-to-js wrapper to make sure
    that references are indeed references.
    
    The CL adds parsing for the type `v128` in the new WebAssembly.Function
    constructor.
    
    R=thibaudm@chromium.org
    
    Bug: v8:14507
    Change-Id: Id344eaf72af62d62203ac549bb3d696f5f9c7383
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293558
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92327}

commit 82c92753d12a6d560fdbad5ec41915d431be4429
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Feb 14 20:18:55 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/d05f30e..476dadf
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/51589f4..072f218
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/a5a09d2..72bf410
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/786fced..f0ceb07
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756057763576174001
    
    Change-Id: I6d127edec24b029c24cfc2caa527ba4b8bcfa676
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296605
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92326}

commit 290d67650661a0a81868b90cee172b5146562fa4
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Feb 14 15:55:16 2024 +0100

    [wasm] Remove unnecessary include
    
    Change-Id: Id41a7c4fc005c5fb6d041c864ec7704167f2b6f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296035
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92325}

commit 2f3efcee5c57bbb3fb7da193bb48962199dcc861
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Feb 15 09:14:47 2024 +0000

    Revert "[wasm] Port the js-to-wasm wrapper to Turboshaft"
    
    This reverts commit 2ce046f282f09eb0b7b5a78d50855105f3f1d66d.
    
    Reason for revert: Failures in WasmModule destruction:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20debug/4782/overview
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20debug/4783/overview
    
    Original change's description:
    > [wasm] Port the js-to-wasm wrapper to Turboshaft
    >
    > Bug: v8:14108
    > Change-Id: Ife71ec11d7a3e1d30fa60e2b3b2646f6e3967f83
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250229
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92320}
    
    Bug: v8:14108
    Change-Id: I83fea9108a89c03d49df01cff8bad46acd9dbaf8
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5299994
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92324}

commit ed3c1170334fc215917de4409750d22f484475f1
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Feb 14 17:59:11 2024 +0100

    [heap] Use concurrent sweeping on background threads
    
    Change-Id: I45a4ce955a0156aa347521a55a3113d6685c8dc4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296146
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92323}

commit e87f9947d99eeb2b4205c162798f1171a48d2fc8
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Feb 14 16:50:30 2024 +0100

    Reland "[handles] Process non-nestable tasks with trivial stack in samples/shell"
    
    This is a reland of commit 26b7b9650f721804a39225402b2c3bfa79103112
    
    Original change's description:
    > [handles] Process non-nestable tasks with trivial stack in samples/shell
    >
    > When pumping the message loop, we may trigger the execution of a
    > non-nestable task (e.g., a stackless GC), which assumes that there are
    > no handles on the current stack. With v8_enable_direct_local=true
    > (which requires conservative stack scanning), violating this invariant
    > may result in a crash. This CL fixes the V8 shell provided as a sample
    > to correctly pump the message loop.
    >
    > Bug: v8:13270
    > Change-Id: I5ed594f5d1b3a0d4514bf2d36f21789f3942fa4b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5262697
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92309}
    
    Bug: v8:13270
    Change-Id: I705d77f8fce155025d957a39df3c6a393beaba75
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296139
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92322}

commit 93bd3dee6edbffc24512d651c30c2731afb82d01
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Feb 14 08:06:58 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/f8c5fdf..d05f30e
    
    Rolling buildtools/linux64: git_revision:a2e2717ea670249a34b0de4b3e54f268d320bdfa..git_revision:a3dcd7a7ad861a9c1b9930a654f2feaeb03b4c0c
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7571749..a5a09d2
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/894ad69..786fced
    
    Rolling tools/luci-go: git_revision:c7b026b3a6a1f877ce46a90c5f761b10e5149891..git_revision:3df60a11d33a59614c0e8d2bccc58d8c30984901
    
    Rolling tools/luci-go: git_revision:c7b026b3a6a1f877ce46a90c5f761b10e5149891..git_revision:3df60a11d33a59614c0e8d2bccc58d8c30984901
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756103078255259873
    
    Change-Id: Ic6b70ba27d8ebf7f124af50f64fd5149126cd344
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296058
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92321}

commit 2ce046f282f09eb0b7b5a78d50855105f3f1d66d
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Feb 14 17:06:01 2024 +0100

    [wasm] Port the js-to-wasm wrapper to Turboshaft
    
    Bug: v8:14108
    Change-Id: Ife71ec11d7a3e1d30fa60e2b3b2646f6e3967f83
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250229
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92320}

commit 3d55a89a1ea397c874f9089e2e0a71f47c250002
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Feb 14 12:59:39 2024 +0100

    [wasm] Add dchecks for js-to-wasm wrapper with invalid signatures
    
    Drive-by change: also add a missing DCHECK in the wasm-to-js wrapper.
    
    Change-Id: I31c3ddc43143533dbf68964bb18a68d232430b96
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293797
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92319}

commit de06cf0f00c19e02aaceb3178bf33e3569475477
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Feb 14 12:38:05 2024 +0100

    [wasm] Add dcheck in the wasm-to-js wrapper for the signature pod
    
    The return count in the Pod has to be less than the length of the pod,
    because otherwise the parameter count would become negative.
    
    Bug: chromium:324511423
    Change-Id: Id7665e13fcb3ebd6ebcdf442e758a0dab1051fd2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293561
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92318}

commit 9ae958a24f83351ca90a515657f98b3be977416b
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Wed Feb 14 15:32:30 2024 +0100

    [ast] Fix clang-tidy issue
    
    Change-Id: I1d4022479c86885e9865bd8c626187bb1a5a7f86
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296415
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Auto-Submit: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92317}

commit 2e0e30ed641858f391df5ce63f8a85759f338123
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Feb 14 14:25:46 2024 +0000

    Revert "[handles] Process non-nestable tasks with trivial stack in samples/shell"
    
    This reverts commit 26b7b9650f721804a39225402b2c3bfa79103112.
    
    Reason for revert: This fails the chromium roll:
    https://chromium-review.googlesource.com/c/chromium/src/+/5294592
    ChromeOS compile error involving v8_shell:
    https://ci.chromium.org/ui/p/chromium/builders/try/linux-chromeos-compile-dbg/1692478/overview
    
    Original change's description:
    > [handles] Process non-nestable tasks with trivial stack in samples/shell
    >
    > When pumping the message loop, we may trigger the execution of a
    > non-nestable task (e.g., a stackless GC), which assumes that there are
    > no handles on the current stack. With v8_enable_direct_local=true
    > (which requires conservative stack scanning), violating this invariant
    > may result in a crash. This CL fixes the V8 shell provided as a sample
    > to correctly pump the message loop.
    >
    > Bug: v8:13270
    > Change-Id: I5ed594f5d1b3a0d4514bf2d36f21789f3942fa4b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5262697
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92309}
    
    No-Try: true
    Bug: v8:13270
    Change-Id: Ic79bc6884799c13da77510615befc7aa763f2089
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5296234
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92316}

commit 5e11716a5f2b30643a303b96404fcc006292d41f
Author: Eric Leese <leese@chromium.org>
Date:   Wed Feb 14 15:09:14 2024 +0100

    Refactor to get rid of GetPromiseOnStackOnThrow()
    
    Changes catch prediction to work more like async stack traces without
    relying on the promise stack. This will allow the promise stack to be
    deleted in a future cl.
    
    In the course of this I have also fixed
    handling of exceptions in the Promise constructor, cases
    where promise rejections were thought to be handled by synchronous
    try/catch blocks, cases where promise rejections are forwarded to
    promises that are not pending (e.g. Promise.race that is already
    fulfilled.), and cases where a promise has multiple listeners,
    some of which handle it and some of which leave it uncaught.
    
    Bug: b:40283985, b:40283987
    Change-Id: If2c62af8c183f27a89bd4ca8aa95b3112a6a59cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291617
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92315}

commit d9d74bbb6f663a86e272391caacf5bbc81b27f07
Author: Liviu Rau <liviurau@chromium.org>
Date:   Wed Feb 14 14:58:27 2024 +0100

    [test262] Expect no args after flag
    
    Failure: https://ci.chromium.org/ui/p/v8/builders/ci-hp/Test262%20PR%20approver/b8756114037899638401/overview
    
    No-try: true
    Bug: v8:14002
    Change-Id: I3265917892475238922aa666b33ea9e57e87d22a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293397
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92314}

commit 92bff23bdea5880d7610d3794742a0a7ded2c6eb
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Feb 14 13:46:21 2024 +0100

    [api] Add missing field type check in DictionaryTemplate
    
    ... instance constructor.
    
    Bug: chromium:1499222, b/41497140
    Change-Id: I6059e807da378ae166bd33fb8a1e63adb7203935
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293800
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92313}

commit 7bf829ef929898868eab1557bd049db4520f3524
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Feb 14 12:57:19 2024 +0100

    [compiler] Add fake handles slots to safepoint table
    
    When emitting a safepoint in a fast C call, the indirect handles
    passed to the fast callback, need to be included in the safepoint.
    This is necessary such that the GC can find those slots and update
    pointers in case that object got relocated during GC.
    
    This CL implements this by adding an is_tagged field to a StackSlot.
    When set the stack slot should become part of the safepoint.
    Currently these slots are simply made part of all safepoints. However,
    this requires us to initially clear the slots in the function
    prologue. This is necessary because all slots need to contain valid
    pointers on a GC.
    
    Bug: chromium:325123663
    Change-Id: I5f9aeb507fb3aecf5776ac7ad1a6b1ea75b1d66b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291382
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92312}

commit 50d0ce8de0e0470f5d598cf7429bbf5aa96d2a07
Author: Marja Hölttä <marja@chromium.org>
Date:   Wed Feb 14 12:48:13 2024 +0100

    [turbofan] Fix assert generation
    
    Bug: chromium:325135399, v8:13567
    Change-Id: Ife6a9b2f996d1b3c9d893827d3888d5a7d7616c0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5295438
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92311}

commit e6299cb1410f30f9ee7c1b5709ad8aa6ed9459af
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Feb 14 12:02:48 2024 +0100

    [flags] Set implication for --compact-code-space-with-stack
    
    This CL sets an implication, so that whenever --compact-with-stack is
    disabled, --compact-code-space-with-stack is also disabled.
    
    The motivation for this is that with conservative stack scanning all
    heap compaction should be disabled when the stack is non-trivial.
    The existing implication was between --conservative-stack-scanning
    and --compact-with-stack, but --compact-code-space-with-stack was
    until now unrelated.
    
    Bug: v8:13257
    Change-Id: I8266dbe0a11f5923b7ad91cc4b310a16206fd60b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293796
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92310}

commit 26b7b9650f721804a39225402b2c3bfa79103112
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Mon Feb 5 16:13:00 2024 +0100

    [handles] Process non-nestable tasks with trivial stack in samples/shell
    
    When pumping the message loop, we may trigger the execution of a
    non-nestable task (e.g., a stackless GC), which assumes that there are
    no handles on the current stack. With v8_enable_direct_local=true
    (which requires conservative stack scanning), violating this invariant
    may result in a crash. This CL fixes the V8 shell provided as a sample
    to correctly pump the message loop.
    
    Bug: v8:13270
    Change-Id: I5ed594f5d1b3a0d4514bf2d36f21789f3942fa4b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5262697
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92309}

commit 0e4c8a377978a72040012e4498e8ca54d69a7573
Author: Eric Leese <leese@chromium.org>
Date:   Wed Feb 14 10:26:48 2024 +0000

    Reland "Inspector tests now ignore promise duplicate rejection/fulfill messages"
    
    This reverts commit 3ea0614bc639f1dc7d44eff10efaaef73c126040.
    
    Reason for revert: Failures are unrelated. This change is only compiled into the V8 inspector tests, which is not the same as the inspector-protocol test, which remains flaky.
    
    Original change's description:
    > Revert "Inspector tests now ignore promise duplicate rejection/fulfill messages"
    >
    > This reverts commit b081f3b25b0bbc2bf2cd8c8878ef602622a60274.
    >
    > Reason for revert: Failed build on linux-rel https://ci.chromium.org/ui/p/chromium/builders/try/linux-rel/1704106/overview
    >
    > Original change's description:
    > > Inspector tests now ignore promise duplicate rejection/fulfill messages
    > >
    > > This matches the behavior of the blink handlers, so that what inspector
    > > tests report matches what the DevTools console shows.
    > >
    > > Bug: b:40283985
    > > Change-Id: I9fd5ff3742e0deed3747c7a99ecbcefc63a8f255
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5290934
    > > Commit-Queue: Eric Leese <leese@chromium.org>
    > > Reviewed-by: Simon Zünd <szuend@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#92288}
    >
    > Bug: b:40283985
    > Change-Id: Ia5e6e950d4471c6d6458ed131196d9e084019cee
    > No-Presubmit: true
    > No-Tree-Checks: true
    > No-Try: true
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293486
    > Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    > Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92297}
    
    Bug: b:40283985
    Change-Id: Ic4af47e209cfc668cd341243432504948c94a40f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293557
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92308}

commit 332d3021dc2a3ec93f418ec6848b2ed538a56191
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Fri Feb 9 19:03:46 2024 +0100

    [d8][handles] Process non-nestable tasks with trivial stack
    
    When pumping the message loop, we may trigger the execution of a
    non-nestable task (e.g., a stackless GC), which assumes that there are
    no handles on the current stack. With v8_enable_direct_local=true
    (which requires conservative stack scanning), violating this invariant
    may result in a crash. This CL fixes d8 to correctly pump the message
    loop.
    
    Bug: v8:13270
    Change-Id: Ie42ac21719572c1fb533a5f084a271593d46757f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258097
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92307}

commit a8900729b4ecb05586c6a2118911fa0a402bfe7d
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Feb 14 11:19:31 2024 +0100

    [wasm] Prepare int64 lowering phase for wrappers
    
    - Add a JSToWasm pipeline kind
    - Convert the wasm signature to the appropriate machine signature
      depending on the pipeline kind
    - Handle special parameter indices
    - Convert specific call descriptors to their known lowerings
    
    Bug: v8:14108
    Change-Id: I6129ec66f3b7cc21057d439fe6d992903080235e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279381
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92306}

commit ccc52e441b38cd62bc7381e0efe93eddd11ccf96
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Feb 14 10:31:26 2024 +0100

    [compiler] Fix inspector test case
    
    The JSGraphAssembler uses effect and control for the assert without
    it being explicitly initialized.
    
    Change-Id: I5827082810bb5b715d8959b051df670bf703d19c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293556
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92305}

commit b1c9b5a377cdaa5fa407b4abff0b37705c1d99c5
Author: Liviu Rau <liviurau@chromium.org>
Date:   Wed Feb 14 10:11:59 2024 +0100

    [test262] Handle PR approval in a separate workflow
    
    By adding --approval flag we now have 2 flows through the original blinkpy export implementation:
     - one for creating PRs that excludes any approval or merging attempts
       - expected to be used by the test262-pr-bot
     - another one for approving and merging those PRs and excludes the
       creation of any new PRs
       - expected to be used by the test262-merge-bot
    
    Bug: v8:14002
    Change-Id: I7ffd0b011c78a296194599ffeedf9bc67512f865
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293554
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92304}

commit 56c8cdd1dad6a4dd14138a0ce01731dd925260d6
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Feb 14 08:43:48 2024 +0100

    [google3] Skip tests that sometimes timeout
    
    R=victorgomes@chromium.org
    
    Change-Id: I55409d48d42b9c1fd212c6db471a1a9715faaf34
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293555
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92303}

commit 25cd628103afcc9d0aab4408d25397ebf0c24aa2
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Feb 13 19:17:42 2024 -0500

    [import-attributes] Add Chrome version to deprecation message
    
    Fixed: chromium:324798859
    Change-Id: I22cebf7bdf68f5dae65fb7fdfd9325b681360e5e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293007
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92302}

commit e19a4024f6b7bd8ceb22a5267b878ee2bd20807d
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Feb 13 11:19:20 2024 +0100

    [compiler] Always emit safepoint for fast C calls
    
    This CL starts recording safepoints for fast c call sites in order
    to eventually allow allocations in them. The safepoint needs to be
    recorded exactly after the call site such that the StackFrameIterator
    is able to find it. For this MacroAssembler::CallCFunction now
    returns the pc_offset for the actual raw call instruction. This
    return value is then used as input to RecordSafepoint().
    
    Wasm-C-API was using an approximate return address of that call site,
    so far this was okay because the safepoint was recorded there as well.
    In order to not emit two different safepoints for each fast c call,
    MacroAssembler::CallCFunction also optionally takes a label as
    argument. This label is bound to the exact return address of the
    raw call instruction.
    
    Bug: chromium:1523607
    Change-Id: I73c458b590e2dad938f505308066bfe3c07e9e6e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5286014
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92301}

commit 2109613ad4622028778a38fb418956fab8b478b6
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Feb 13 14:14:59 2024 +0100

    [wasm] Use correct signature index for tier-up of wasm-to-js wrapper
    
    The wasm-to-js wrapper tierup used the canonicalized signature id lookup
    for module-independent signatures to look up the canonicalized signature
    id of module-specific signatures. With this CL the signature id is
    looked up with the function index of imported functions and from the
    dispatch table for indirect function calls instead.
    
    R=jkummerow@chromium.org
    
    Bug: chromium:324596281
    Change-Id: I5e47e48ad5e2f103a4c731302ebf3464b59762b8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291374
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92300}

commit 73b7bbbf52ce9dc9ea16e85afb326f4bab730cd6
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Feb 13 14:54:28 2024 +0100

    [turboshaft] Avoid generating invalid Stores in unreachable code
    
    ... since they lead to crashes in the register allocator.
    
    Bug: v8:12783
    Change-Id: I5fd33193cfa205505c84718fa4d1aa8675388e72
    Fixed: chromium:324782095
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291376
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92299}

commit 08ad4e0479fe1608c3ef42e37cc97cc8202e2463
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Feb 13 20:18:28 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/40c43d8..f8c5fdf
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/c712e9c..51589f4
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/f765505..7571749
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/ab7c591..b4c6fe0
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756148378112159633
    
    Change-Id: Iafa11844b9acb0cb2a81e4fa24d782ab0bb10391
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5292304
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92298}

commit 3ea0614bc639f1dc7d44eff10efaaef73c126040
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Tue Feb 13 21:59:26 2024 +0000

    Revert "Inspector tests now ignore promise duplicate rejection/fulfill messages"
    
    This reverts commit b081f3b25b0bbc2bf2cd8c8878ef602622a60274.
    
    Reason for revert: Failed build on linux-rel https://ci.chromium.org/ui/p/chromium/builders/try/linux-rel/1704106/overview
    
    Original change's description:
    > Inspector tests now ignore promise duplicate rejection/fulfill messages
    >
    > This matches the behavior of the blink handlers, so that what inspector
    > tests report matches what the DevTools console shows.
    >
    > Bug: b:40283985
    > Change-Id: I9fd5ff3742e0deed3747c7a99ecbcefc63a8f255
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5290934
    > Commit-Queue: Eric Leese <leese@chromium.org>
    > Reviewed-by: Simon Zünd <szuend@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92288}
    
    Bug: b:40283985
    Change-Id: Ia5e6e950d4471c6d6458ed131196d9e084019cee
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5293486
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92297}

commit f7b140d8f91d2ce3db60c49a41ae1c164c88e69d
Author: pthier <pthier@chromium.org>
Date:   Tue Feb 13 18:20:54 2024 +0100

    [regexp] Fix replace with callback for duplicate named capture groups
    
    Handling of duplicate named capture groups was missing in the slow path
    called for String.replace() when the replacement is a function and not a
    string.
    
    Bug: v8:13173, b/41496530
    Change-Id: Ic5bac8f9ba2b18894f3ccd9c71bfe8ed003a8488
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291383
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92296}

commit 6172b50fc275002ee1deeee4b023e3bb4788e14c
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Feb 13 18:25:51 2024 +0100

    Use FullPtrComparer in MarkTransitiveClosureLinear
    
    The key_to_values unoredered_multimap is used to check if a newly
    discovered, live object is used as key in a WeakMap, in which case the
    corresponding value must also be marked now. This map is indexed using
    the pointer to the HeapObject, and so it must use full pointer
    comparison (rather than compressed pointer comparison) as it may see
    pointers to objects in other pointer compression cages.
    
    Bug: b/324656752
    Change-Id: Ie97175aa1c0b6bdad012d4537c91ed1a0cbb68e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291384
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92295}

commit dc33eb55fbc540cd9de3cb3c7c812bd722188674
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Feb 13 18:43:10 2024 +0100

    [wasm] Add Turboshaft wrapper compilation job
    
    R=ahaas@chromium.org
    
    Bug: v8:14108
    Change-Id: Ie07bb59f5c286b12f170ad995988284d366d6ed7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250117
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92294}

commit b22c5221b833498416c4ed7845952289bf472cb7
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Feb 13 08:11:31 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/a301b4f..40c43d8
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/99cae58..c712e9c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756193675439491057
    
    Change-Id: I0e356ec9c1ba10de30ec931238f907bf26aaa448
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291957
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92293}

commit ffaa65d9685a009de3bdf561de41119c61a5268e
Author: Marja Hölttä <marja@chromium.org>
Date:   Tue Feb 13 15:53:17 2024 +0100

    [const tracking let] Add a test for the Runtime_StoreGlobalIC_Slow fix
    
    Bug: v8:13567
    Change-Id: If630ac48e7550d28a0167ca9833e9808579ab161
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291615
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92292}

commit 199fcbb5e6da748c73c0c1d0800020aad55f3e68
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Feb 13 14:44:31 2024 +0000

    [sandbox] Don't mark table entries in ReferenceSummarizerMarkingVisitor
    
    The ReferenceSummarizerMarkingVisitor inherits from MarkingVisitorBase
    but doesn't actually perform any marking of objects. However,
    previously the marking of pointer table entries (e.g. in the code
    pointer table) was performed in MarkingVisitorBase, and so the
    ReferenceSummarizerMarkingVisitor would mark table entries but not their
    host objects, leading to inconsistent state. This CL now factors out the
    table entry marking logic into the FullMarkingVisitorBase and provides a
    no-op implementation for the ReferenceSummarizerMarkingVisitor.
    
    Bug: v8:14619
    Change-Id: Ifae0b255a3a8d6675bb5aff9bbb646d860be975f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291378
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92291}

commit 74f5141e03b31b9d7f85b4bc39630a8c819711f8
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Feb 13 15:09:13 2024 +0100

    [maglev] Fix sandbox violation when allocating an empty array
    
    Initial JSArray map shouldn't have any in-object properties,
    we add a check to verify that this was not mutated by an
    attacker.
    
    Bug: b/324482838
    Change-Id: Ia3ccf6f5cc00521ac154e3d6230a70603b455a72
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5291375
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92290}

commit 549acb4d1a74b12a5017121d4870c46d6536fd97
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Feb 13 12:41:54 2024 +0100

    [maglev] Fix loading mutable heap number field
    
    ... from inlined allocated objects (FastObject).
    
    Bug: b/41497204
    Change-Id: I8209ae63bc9cdf2f548b6c9f52e0b352c93717a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5289019
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92289}

commit b081f3b25b0bbc2bf2cd8c8878ef602622a60274
Author: Eric Leese <leese@chromium.org>
Date:   Tue Feb 13 13:21:07 2024 +0100

    Inspector tests now ignore promise duplicate rejection/fulfill messages
    
    This matches the behavior of the blink handlers, so that what inspector
    tests report matches what the DevTools console shows.
    
    Bug: b:40283985
    Change-Id: I9fd5ff3742e0deed3747c7a99ecbcefc63a8f255
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5290934
    Commit-Queue: Eric Leese <leese@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92288}

commit 919967e39da47878ece550c1e2c30dfd7edcf310
Author: Marja Hölttä <marja@chromium.org>
Date:   Tue Feb 13 14:01:30 2024 +0100

    Reland2: [const tracking let] Const tracking for lets
    
    Track the const-ness of top-level let variables.
    - Embed them as constants in optimized code
    - Deopt code which depends on the const-ness if the value is no longer
    a constant
    
    Design doc:
    https://docs.google.com/document/d/18F1syu8314lcz1pm9e2LNi3pYzp5t1ah5EpmR4mE4Tg/edit?usp=sharing
    
    Diff from previous reland:
    
    Fix 1:
    
    https://chromium-review.googlesource.com/c/v8/v8/+/5268601/1..6
    
    The Maglev parts for handling StaGlobal were working by accident
    (~always deopting functions writing to const tracking let variables).
    
    Fix 2:
    
    https://chromium-review.googlesource.com/c/v8/v8/+/5268601/8..10
    
    Runtime_StoreGlobalIC_Slow was missing the side data updating code.
    
    Bug: v8:13567
    Change-Id: I28542209455a7b08841c28f7eff019196b5ac73b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268601
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92287}

commit de83dc26cbc5d12f8c7572ccae32399d03e99213
Author: Eric Leese <leese@chromium.org>
Date:   Mon Feb 12 15:25:01 2024 +0100

    Update promise catch prediction test
    
    This improves the test in a number of ways:
     - Runs test case only once stopping on all exceptions, but check to see if
       it is reported as uncaught, rather than running twice to see whether we
       stop when only stopping on caught or only stopping on uncaught
     - Don't print uncaught exception details when they are immediately revoked.
       These two changes lead to less verbose output.
     - By using the reported uncaught exceptions as ground truth for the prediction
       when paused, we can provide a summary of whether each test case is right,
       so regressions and improvements are more obvious.
     - Added a number of new test cases to avoid regressing in upcoming changes,
       including cases with generators and more cases where exceptions should be
       immediately rewrapped as promises.
    
    Bug: b:40283985
    Change-Id: I855fa9569a1f20060a4a24807481ad9569f5612f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279452
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92286}

commit 6e801be7a567757c893b2a4f3329ed6de961ec02
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Feb 13 10:22:16 2024 +0000

    [sandbox] Increase the size of the trusted range
    
    As we now have many more objects in trusted space, we may require a
    larger trusted range (the address space reservation containing the
    per-Isolate trusted spaces). This CL increases the size of the trusted
    range to 1GB, up from 256MB. In the future, we may want to increase it
    further. The theoretical limit is currently 4GB since we use 32-bit
    compressed pointers ("protected pointers") within trusted space.
    
    Bug: b/40069826, b/324939063
    Change-Id: I0e77c7be923519bdbdd62d6a5286e069b5230538
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5287542
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92285}

commit 0c8b2a9236a0cdfadb3e67c3538282aa2e1c4296
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Feb 13 11:13:50 2024 +0100

    [wasm] Fix handling of Wasm object receivers in Reflect.set()
    
    Fixed: chromium:324772606
    Change-Id: If464c68372f83faf75302f9c4f5f25c6db4e6449
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5289015
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92284}

commit b2dd8ba634ec204fe943d7b837c8bf3a4b179a07
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Fri Feb 9 15:37:39 2024 +0000

    Revert "Enable JCC mitigation by default temporarily"
    
    This reverts commit dfb87674678f523c033b1a8ce624c025f3d9482f.
    
    Reason for revert: Was just temporary for perf bots.
    
    Original change's description:
    > Enable JCC mitigation by default temporarily
    >
    > ...to get some more data on non-`--future` bots.
    >
    > Bug: v8:14225
    > Change-Id: I5fe61002114aa92e306f9769cca798db83cd0175
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272838
    > Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92248}
    
    Bug: v8:14225
    Change-Id: Ib34b926fcb9924c807194d8c89fff94f10e34258
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5282164
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92283}

commit 7c0baa7eb67c24f13053d4f1c1cbd63d04578b46
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Feb 8 17:06:38 2024 +0100

    [turboshaft] Replaced PointerSized() representations with WordPtr
    
    Bug: v8:12783
    Change-Id: I5d819abd5143b552b206ee05d9a1850e199bf1a0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5274745
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92282}

commit 95325c30452a3e83741cbdd8220dd598873f57d9
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 12 20:07:35 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/100a2e5..a301b4f
    
    Rolling buildtools/reclient: re_client_version:0.130.0.546556b-gomaip..re_client_version:0.131.1.784ddbb-gomaip
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/d63a07f..d353dfb
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/4495ac1..99cae58
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/32769fe..f765505
    
    Rolling third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/5e9fac6..fa3c41d
    
    Rolling third_party/instrumented_libraries: https://chromium.googlesource.com/chromium/src/third_party/instrumented_libraries/+log/0011c28..0893d76
    
    Rolling third_party/jinja2: https://chromium.googlesource.com/chromium/src/third_party/jinja2/+log/e2d0243..c9c7752
    
    Rolling third_party/markupsafe: https://chromium.googlesource.com/chromium/src/third_party/markupsafe/+log/0bad08b..e582d7f
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/646b7f5..4b5807f
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/3946e5a..894ad69
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756238974827574801
    
    Change-Id: I14e1b11e8254211adbe75d96a62a577bcf69de11
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5287757
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92281}

commit 594010895313f41be64a790848fad0a3a6a15c57
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Feb 12 19:43:49 2024 +0100

    [wasm-gc] Update disassembler for type section
    
    - Print recgroups
    - Print "sub" and "sub final" instead of outdated "_subtype" suffix
    - Since offsets must now always be computed, the performance impact
      is mitigated by collecting them during initial decoding when we
      are decoding just for the disassembler. (When disassembling an
      existing module, we have no choice but to let the OffsetsProvider
      decode it again.)
    
    Bug: v8:14034
    Change-Id: I41f55d597e05fae7e6599a7810240ed4ce25a1fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5286275
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92280}

commit eeaaf7bc26fec7adc9a441a03327c654c933a1d7
Author: Garo Bournoutian <gbournou@google.com>
Date:   Thu Jan 11 01:17:38 2024 -0800

    Deprecate SbTime APIs
    
    (cherry picked from commit d0d3d1d1982d4379eadd65141e6fdb22b0edb61d)
    
    Bug: chromium:156155426
    Change-Id: I87cb3221ba4998c26cc8bba158ee13b8b66cc3c1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269621
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Cr-Commit-Position: refs/heads/main@{#92279}

commit 18ad4e3098c389b89cce81cd2e0c4d637dc84b1f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 12 08:23:21 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/f90248f..f35a7d8
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756284272433357649
    
    Change-Id: Ifd4feb847fc21aa311b8e8e8ee6b9aa03792cdce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5285518
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92278}

commit 32ca4fddfb043465fbcb42179b4772af0d13c9ab
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Feb 12 14:39:15 2024 +0100

    [maglev] Negative index does not invalidate NoElements protector
    
    When alllowing OOB access, we rely on no elements protector to
    invalidate the optimization. But since negative index is not
    consider an element access, it is transformed to a name and
    loaded as a property, it does not invalidate the protector.
    
    Here (as in TF) we force a deoptimization if index is negative.
    
    Bug: v8:7700, chromium:41496337
    Change-Id: I1eb7287f7a26e97e44df32cc63cc7aa633608532
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5286015
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92277}

commit eacf7f40e7dd2ca11b6e2f63dd8e8bd681ca91c4
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Feb 12 15:05:50 2024 +0100

    [wasm] Add generic wasm-to-js wrapper for invalid signatures
    
    So far a specific wasm-to-js wrapper got compiled when a wrapper was
    requested for a signature that was not compatible with JS, e.g. a
    signature that contains a simd. This CL introduces a generic wrapper for
    invalid signatures that throws an exception unconditionally.
    
    There was a code path where the generic wrapper was used for invalid
    signatures. This code path now also  uses the new wrapper for invalid
    signatures.
    
    R=thibaudm@chromium.org
    
    Bug: chromium:323694592
    Change-Id: I79fe09c864fef145292fcf2ec428352b6b4f6980
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5285394
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92276}

commit 735444b9694548df49867ea5b010b59b59dfc23f
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Feb 12 10:52:18 2024 +0100

    [maglev] Fix 32 bit move in ToBoolean
    
    __ Move does a 64 bit move instead of 32 bit.
    We should use a 32 bit here, otherwise we might crash (or leak data).
    
    It was introduced by the cleanup:
    https://crrev.com/c/5252429
    
    Bug: v8:7700, chromium:323698366
    Change-Id: I6262aa16218a8b946bf65e1a3e44a5c6c3054206
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5285154
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92275}

commit d6f3ed466c66257310edc8ce7d75610c5f88cde6
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Feb 12 11:58:08 2024 +0100

    [tools] update-compile-commands.py: support reclient
    
    No longer start Goma.
    Run `gcert` for Googlers who need it.
    Drive-by: modernize string templates to f-strings.
    
    No-Try: true
    Change-Id: Ib956619872386bdbb9103d38e66d3cfcbd3eceea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279554
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92274}

commit 409958a77b40c3a2eabb6b03af090a206dc03ba1
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Feb 12 11:24:32 2024 +0100

    Roll V8 DEPS fuzztest
    
    Rolling third_party/fuzztest/src: https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/a6db991..61d9520
    
    Rolling third_party/fuzztest:
    https://chromium.googlesource.com/chromium/src/third_party/fuzztest/+/29cebc2..9fc64e5
    
    Manual roll as third_party/fuzztest doesn't seem to be rolling
    automatically but needs to be kept in sync with
    third_party/fuzztest/src.
    
    Change-Id: Ie1d8ff12c0911bcec582dbbfb0535fc89e662456
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5282124
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92273}

commit 2cf9117fd381e5614b41dedcc3c810d06321a1a9
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Feb 5 11:04:41 2024 +0100

    [cleanup] Clang Tidy: heap/cppgc readability findings
    
    Spotted by G3 Clang Tidy:
    go/clang_tidy/checks/readability-redundant-smartptr-get
    go/clang_tidy/checks/misc-unused-using-decls
    
    Change-Id: I711711072b71b27e3f23a89ad95d4fbf8016a56e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268301
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92272}

commit 6e1f9038ebf8cf49394cb425b5ef4542460418e0
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Feb 12 10:35:31 2024 +0100

    Update V8 DEPS (trusted)
    
    Manual changes:
    Removing roll for fuzztest
    https://chromium.googlesource.com/external/github.com/google/fuzztest/+log/a6db991..61d9520
    which causes linker errors to unblock the roll.
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e106e0d..100a2e5
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/262e0f6..f90248f
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/8c68241..d63a07f
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/6d39c23..4495ac1
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/1f441eb..32769fe
    
    Rolling third_party/fuchsia-sdk/sdk: version:18.20240127.1.1..version:18.20240207.3.1
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/fc50574..8bad7bd
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/d5858b5..3946e5a
    
    Rolling tools/luci-go: git_revision:0d11be367258bfe14a13ff1afcf43a0bc6aedb45..git_revision:c7b026b3a6a1f877ce46a90c5f761b10e5149891
    
    Rolling tools/luci-go: git_revision:0d11be367258bfe14a13ff1afcf43a0bc6aedb45..git_revision:c7b026b3a6a1f877ce46a90c5f761b10e5149891
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756329569076310049
    
    Change-Id: Ib0dbeecf55615518e535444307782ef77848e496
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5281485
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92271}

commit e60674b62e2957195a1f91eafb751977bd6e9fb0
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Sun Feb 11 19:30:03 2024 +0100

    [flags] Speed up flag implication processing
    
    Flag-implication processing is called through V8's api each time
    a flag is set via SetFlagsFromString. Currently, this happens ~30
    times per isolate during Chrome start-up adding up to ~2ms time
    spent on this.
    
    While the implication processor already bails out on no-change and
    on premise==false, it still spends a considerable amount of time
    on minimum-one-iteration per call, processing all premise==true
    cases.
    
    This speeds up the look-up of flags by name, which is where most of
    the time is spent. Initializing the structure costs ~0.3ms and all subsequent implication processing adds up to ~0.4ms, improving
    this with factor x3. Also in d8 (and mksnapshot), implications are
    processed 4 times, leading to a small improvement.
    
    Bug: b/41497291
    Change-Id: Ia36141fdefba7fd969dea62d699a0f75dba31b8c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272499
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92270}

commit 82ca43300e88e7b9f3eb423279e3e36c08657ef3
Author: Garo Bournoutian <gbournou@google.com>
Date:   Thu Dec 21 18:41:31 2023 -0800

    Deprecate SbTime APIs (partial)
    
    - Fully deprecate `SbTimeIsTimeThreadNowSupported` and
    `SbTimeGetMonotonicThreadNow`
    
    (cherry picked from commit 94c596614b97a1b262526d662a00ef3ede93a8ae)
    
    Bug: chromium:156155426
    Change-Id: I6e80b53c377ecc18c7e43d3f9b00d1d29aa395b1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269260
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92269}

commit b82d13cdd57e3100dda93e58266ba2a9fafbc524
Author: Max Zhang <60412045+maxz-lab@users.noreply.github.com>
Date:   Thu Dec 21 14:18:25 2023 -0800

    Deprecate SbStringFormat functions
    
    (cherry picked from commit 87fe8d87f6548d1e660d38c359682eb0e55974aa)
    
    Bug: chromium:156155426
    Change-Id: Ia106c23b1fbaeaf00d03095d999b79f1bc2e47cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269259
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92268}

commit 84983a07f150d6e799b2ad70c3712eafe3f090cd
Author: Garo Bournoutian <gbournou@google.com>
Date:   Wed Dec 20 19:48:32 2023 -0800

    Deprecate SbTime APIs (partial)
    
    (cherry picked from commit 0b4d11a267cb926cc7c5901621f2abaddb6d5d5c)
    
    Bug: chromium:156155426
    Change-Id: Ife7746f3566d5ce3f6f9d918028336c58b350361
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269258
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Cr-Commit-Position: refs/heads/main@{#92267}

commit 2ddb4b5164423b0ffecd11455f71ba5bf2555c46
Author: Yavor Goulishev <yavor@google.com>
Date:   Tue Dec 19 12:45:38 2023 -0800

    Deprecate SbMemoryMap APIs
    
    (cherry picked from commit 139da0d41b47f6bbd1f1957cd224c42bd0dc971a)
    
    Bug: chromium:156155426
    Change-Id: Ib39c1be51584588c7272bd62ce91a61c3a95cb27
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269257
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92266}

commit 12ec87446cae376e9571d6236cc34c7071bddd45
Author: Garo Bournoutian <gbournou@google.com>
Date:   Fri Dec 15 13:10:30 2023 -0800

    Deprecate SbTime APIs (partial)
    
    (cherry picked from commit f615309bc34d95efea090b93e92c764821fdc8f4)
    
    Bug: chromium:156155426
    Change-Id: Ibccc2847d2afdf06e318c140970f141190c8a454
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269256
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92265}

commit 9a6f3dff377938b12871a3eb0f7a11604f000caf
Author: Yavor Goulishev <yavor@google.com>
Date:   Mon Nov 13 14:25:50 2023 -0800

    Deprecate SbMemory allocation APIs
    
    (cherry picked from commit f4ded6ce3b8a9df295f8967f8172691542db1945)
    
    Bug: chromium:156155426
    Change-Id: Ie5b7a38875cfc03c64a643cf6a7520317deb1ae0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269255
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Cr-Commit-Position: refs/heads/main@{#92264}

commit ebdd617f041be27989f36bccfdd6ba1bbe65659f
Author: Yang Yang <yyangwin@google.com>
Date:   Thu Apr 21 17:18:12 2022 -0700

    Deprecate starboard 11: update SB_API_VERSION checks
    
    (cherry picked from commit d58e98fd3b3a613a7b3819fb3f9da20e88124567)
    
    Bug: chromium:156155426
    Change-Id: Id8f97668bfb4ce4b825017841e00707a95f8011a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269254
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Cr-Commit-Position: refs/heads/main@{#92263}

commit 666a1b2c596a500cbe713d5152d824820f414136
Author: Andrew Savage <andrewsavage@google.com>
Date:   Mon Dec 6 11:29:06 2021 -0800

    Define GetStackStart in v8's platform-starboard.cc
    
    Before, we'd resolve to the host's definition for GetStackStart.
    This is incorrect behavior, we should resolve to the Starboard
    definition of it when using platform-starboard.cc.
    
    (cherry picked from commit e80f8e007ec83726e48a0db28eb8406c947e623b)
    
    Bug: chromium:156155426
    Change-Id: I69f3ec731cfed7f775d4558e77acc454605aa041
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269253
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Cr-Commit-Position: refs/heads/main@{#92262}

commit cd0481108254f02619822d2ade64f4b9440c9dd3
Author: Toan Pham <toanpham@google.com>
Date:   Fri Dec 3 16:57:21 2021 -0800

    Fix calls to deprecated starboard memory functions
    
    * SbMemoryFree -> SbMemoryDeallocate
    * SbMemoryFreeAligned -> SbMemoryDeallocateAligned
    
    (cherry picked from commit d18dd5c727b0deef3cab7597173e45245c3699df)
    
    Bug: chromium:156155426
    Change-Id: I19a5e0e3b9d8c15f314f5d529bb5479b14b6ba57
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269252
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Cr-Commit-Position: refs/heads/main@{#92261}

commit efbf9582701a82345d3a523624c3d3635f4737ee
Author: Kaido Kert <kaidokert@google.com>
Date:   Sun Jun 13 08:48:40 2021 -0700

    Deprecate SbStringCopy, StringCopyWide and StringCopyUnsafe
    
    Note, SbStringCopy is defined and implemented as an equivalent of
    BSD non-standard strclpy, which behaves differently than standard
    strncpy, in that it always null-terminates.
    Most of the reverted code in Chrome upstreams and third_party code
    however uses strncpy in original, and takes care of zero-termination,
    so the reverts use strncpy too.
    In Starboard code, strlcpy implementation is moved to starboard/common
    string.h header.
    
    (cherry picked from commit 4cfc9b6b14d633dbe8b3fb3c471ede6c3a93c6da)
    
    Bug: chromium:156155426
    Change-Id: If95b628a7861f50134a80cd7bbb6312d2eacb8ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269251
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92260}

commit bc9320445db6f282879519d2fbdfe57b69051051
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri Feb 9 18:09:22 2024 +0100

    [maglev] Minor improvements to array support
    
    - inline simple cases of Array.isArray
    - track NodeType::kJSArray for allocated arrays and array maps/constants.
    - for symmetry also add the nodetype for Create*ObjectLiteral.
    
    Bug: v8:7700
    Change-Id: I3301fa7ec4d379ba517f6f966721ff0ef7b03bd4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279446
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92259}

commit 1b39b18629a12d55575004fff8b8ae714b32d4b7
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Feb 9 18:06:55 2024 +0100

    [heap] Fix handling of not-yet deserialized NativeContext
    
    ... when accounting per NativeContext memory stats.
    
    Bug: chromium:324117288
    Change-Id: I52f3007a53dc915307042f3e53ddf4b28ca6c83f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279451
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92258}

commit 3814fa528f910201da816adc5ae67757e78fc0bf
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Feb 9 17:51:07 2024 +0100

    [wasm-strings] FromCodePoint can trap
    
    Optimizing compilers must not optimize out string.from_codepoint even
    when the result is unused, because an invalid codepoint traps, which
    is observable.
    Drive-by fix: Liftoffs corresponding error message in the imported
    strings variant didn't include the to-uint conversion of the codepoint.
    
    Fixed: chromium:324475066
    Change-Id: I0066350da25936b3b48ae0f2c1b3adb89aa77133
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279449
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92257}

commit 83291609fac2ab3644d030d8500bac0a09a431a3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Feb 9 16:31:03 2024 +0000

    Revert "Fix string generation"
    
    This reverts commit c04ebf953da2d1410afe0b5be45725d148c3f91c.
    
    Reason for revert: This fails the chromium roll:
    https://chromium-review.googlesource.com/c/chromium/src/+/5281451
    Failure on the android binary-size bot during compilation:
    https://ci.chromium.org/ui/p/chromium/builders/try/android-binary-size/1778234/overview
    
    Original change's description:
    > Fix string generation
    >
    > The current code was not properly extracting strings when the v8 string
    > was not flat.
    >
    > Bug: b/283794416
    > Change-Id: Ibf72d6a4017ede877fe1211e8e328599e7690687
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5273565
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    > Cr-Commit-Position: refs/heads/main@{#92247}
    
    Bug: b/283794416
    Change-Id: I254a5080f499645d02ef5e57dcb5432945489a27
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279448
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92256}

commit 6369269485d9ba151d363c15992b30119530db6e
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Feb 9 15:27:01 2024 +0100

    [cleanup][turboshaft] Remove TODOs for immutable map loads
    
    Even for wasm map and instance type loads, they cannot be treated as
    fully immutable. While wasm objects cannot change their map and for
    most JS objects it wouldn't matter for wasm code, for strings it is
    relevant.
    
    As this is just semantically wrong in Turbofan but does not create any
    observable bug, this doesn't need to be changed.
    Still, for Turboshaft the safest bet is to keep these loads as mutable.
    
    By the latest when more complex inlining of JS code or more complex
    inlining of wasm code is possible, these could lead to hard to find
    bugs.
    
    Bug: v8:14108
    Change-Id: I2c345fb013a5147c3aba4caa12ecf42465c410e6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279447
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92255}

commit 8c4efb05fb7c81f61bb15781e38d1478d0bea9a2
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Feb 9 15:18:52 2024 +0100

    [json] Fix fast map init when you can't insert a transition
    
    Bail out of the fast path if we can't insert more transitions to a map.
    
    Bug: chromium:324342761
    Change-Id: I31127d70dc54587891ade6451b782657217d76d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5279593
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92254}

commit c2074b33ecd16726cbaa4cdef46247957838031d
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Feb 9 14:22:31 2024 +0100

    [turboshaft] Maglev-to-turboshaft: support FixedArray/TaggedField loads
    
    Bug: v8:12783, v8:14581
    Change-Id: I959c3193046fc1aefc8fde1d645f2126145117e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5274746
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92253}

commit f8d5e576b814c92c39ec0cea80c21e4162270e12
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Feb 8 13:32:00 2024 -0500

    Fix build with older versions of GCC.
    
    This ports the change from bazel on v8:
    https://crrev.com/c/3368869
    
    Compilation errors started showing after this CL:
    https://crrev.com/c/5199515
    
    Change-Id: I8c161a0d9ad5c04d452c444ef4feafae2ef4f6db
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5280535
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92252}

commit 8e77dafbfbff944810b4c441032db77c35fd7c40
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Feb 8 14:07:59 2024 +0000

    [sandbox] Introduce TrustedRoots
    
    These are roots in trusted space, for example empty trusted fixed- and
    byte arrays. As we currently do not have a trusted RO space, they are
    mutable roots, allocated per Isolate.
    
    Bug: chromium:40069826
    Change-Id: I015a68add1595ed23f7c16615e234f022851661e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272269
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92251}

commit 33d5d3ce0a0b9f855db5c94e30a8d20eea79e61f
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Feb 7 14:50:16 2024 +0100

    [wasm] Remove WasmIndirectFunctionTable
    
    This is now replaced by WasmDispatchTable.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: If6d3b23004b0e1cd01fde55b122e792e10373ef8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5277241
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92250}

commit 823a88dd1596d6151202b5dcfa17210dd36607ca
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 8 10:53:26 2024 +0100

    [turboshaft] Less aggressive cloning of Return blocks
    
    https://crrev.com/c/5260139 already tuned downed cloning of non-return
    blocks and assumed that cloning of return blocks was rare enough that
    it didn't need a similar limit. It turns out that this is not always
    true, and adding the limit avoids increasing the size of some graphs
    too much.
    
    Bug: v8:12783
    Change-Id: Ia64a12bf6fe1ea3ac2a53fb672a585b35d41732b
    Fixed: chromium:41496105
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272268
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92249}

commit dfb87674678f523c033b1a8ce624c025f3d9482f
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Fri Feb 9 11:18:30 2024 +0100

    Enable JCC mitigation by default temporarily
    
    ...to get some more data on non-`--future` bots.
    
    Bug: v8:14225
    Change-Id: I5fe61002114aa92e306f9769cca798db83cd0175
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272838
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92248}

commit c04ebf953da2d1410afe0b5be45725d148c3f91c
Author: Carlos Caballero <carlscab@google.com>
Date:   Wed Feb 7 15:07:24 2024 +0000

    Fix string generation
    
    The current code was not properly extracting strings when the v8 string
    was not flat.
    
    Bug: b/283794416
    Change-Id: Ibf72d6a4017ede877fe1211e8e328599e7690687
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5273565
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    Cr-Commit-Position: refs/heads/main@{#92247}

commit cd8db5ba16f5ed6e77cdf6bd548e169a6f4ba85b
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Feb 9 09:24:21 2024 +0100

    [turboshaft] Maglev-to-turboshaft: prevent optimizing assertEquals
    
    The Maglev-to-turboshaft graph builder doesn't support everything that
    assertEquals needs (in particular, function calls), so we prevent
    optimizing it for now.
    
    Bug: v8:12783
    Change-Id: Id2b5e0246abbf2574a1c8e284693c9cb9af6d6d6
    Fixed: v8:14614
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5277123
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92246}

commit 7d53371fd66bcd71936375e6dea79ef8668f6d89
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Feb 9 07:07:30 2024 +0100

    [wasm][turboshaft] Speculative inlining of tail calls
    
    Bug: v8:14108
    Change-Id: I6c416b3956d25bc1965947a0c8a5cc14caba42eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5274744
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92245}

commit a1531d29f2e04972beb134cffdfbaa6bf6b9913b
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Feb 9 06:01:44 2024 +0100

    [wasm][turboshaft] Inline tail calls
    
    We implement inlining for direct tail calls in Turboshaft. All
    combinations of regular and tail calls should be inlineable.
    Drive-by: Fix traces for inlined tail calls.
    Drive-by: Bailout if the inlinee decoder bails out.
    
    Bug: v8:14108
    Change-Id: Ied88183b86373d9fb5b3822b0198640413d71044
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272239
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92244}

commit 9a0087fa2e3c13c9796b9105592fc9eb35749217
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Feb 8 17:52:45 2024 +0100

    Stage JCC erratum mitigation behind future
    
    We expect >1% JetStream 2 score improvement on JCC erratum-affected CPUs
    (Skylake) at ~5-6% TurboFan-generated code size increase.
    There should be no change on non-affected CPUs (in particular non-x64).
    Let's confirm the effect on Skylake CPUs on our bots.
    
    Bug: v8:14225
    Change-Id: Ib938b921b08a1369db351f9c8342a950e631a04d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5274747
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92243}

commit 3f2471d0abe711c92ddb3d6fe17bc22d9955f2b8
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Feb 7 16:34:41 2024 +0100

    [turboshaft][wasm] WasmGCTypeReducer: Check for uninhabited, not bottom
    
    wasm::Type::AsNonNull() converts `ref null T` to `ref T`.
    For any T in {none, nofunc, noextern} this will result in types which
    do not have a valid value, i.e. cannot occur in reachable code.
    
    Therefore we should check for `type.is_uninhabited()` instead of
    `type == kWasmBottom` in all cases where we care about "invalid" types.
    
    Bug: v8:14108
    Change-Id: I2ab7c542527938535bcb6eb9ac29d7a8748209d5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5277240
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92242}

commit e8853bff8b2e632af89fcb10d3f4f5198e587a41
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Feb 8 17:04:26 2024 +0100

    [turboshaft] Make operations provide their explosion implementation
    
    Bug: v8:12783
    Change-Id: Ie205e4d84a7b7a585fc315a4bee1f8ae2d991083
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5274743
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92241}

commit ac4d681bb5c11d58e995c97dac8bc958470be33d
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 8 11:07:09 2024 +0100

    [turboshaft] Maglev-to-turboshaft: support simple loops
    
    Bug: v8:12783, v8:14581
    Change-Id: I62efd064d54efad3a3e8586fb9369e03b2e3d942
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250111
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92240}

commit 3e941d84819ba97a637247efa6f6889ef0db45de
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Jan 30 14:36:04 2024 +0100

    [turboshaft] Maglev-to-turboshaft: support bitwise int32 operations
    
    Bug: v8:12783, v8:14581
    Change-Id: Ic6e37005b71bd3c97bad9623f77f5c033251081e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245612
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92239}

commit 2c774a016ea0e763abaca2d7b87531c6088a2bc9
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Jan 30 14:10:24 2024 +0100

    [turboshaft] Maglev-to-turboshaft: support Int32 comparisons
    
    Bug: v8:12783, v8:14581
    Change-Id: Id3fddcfa19d862b27837889816921f437c3ac29e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249308
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92238}

commit d53e4fa2f252c3c7afaf84ebb6b6e9187eaeb683
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Feb 8 10:08:53 2024 +0100

    [wasm] Change type of node of the TrustedInstanceData
    
    The node type has to be Tagged, because otherwise no safepoint entry
    gets created for the TrustedInstanceData node, and the
    TrustedInstanceData would not survice a GC.
    
    R=mliedtke@chromium.org
    CC=saelo@chromium.org, clemensb@chromium.org
    
    Bug: chromium:323698305
    Change-Id: I1317530395b1008259dd95436c10a0549bcef02d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5277246
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92237}

commit ec89cca93594ef6ae683d6608904cd5e30378115
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Feb 7 15:59:55 2024 -0500

    PPC/s390: [liftoff] Use WasmDispatchTable for indirect calls
    
    Port e8513f44391a41938f1ac8538c80177f95ebd122
    
    Original Commit Message:
    
        This switches Liftoff to use the WasmDispatchTable instead of the
        WasmIndirectFunctionTable for indirect calls.
    
    R=clemensb@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Ic85893ac47adc123f84d53a9ab985721de0352c2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5273698
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92236}

commit a8ebbdaa7682de435750db680d3e127c441c2d68
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Feb 7 15:07:13 2024 +0100

    [wasm] Remove indirect function tables from instance data
    
    All compilers are switched to use the WasmDispatchTable. Hence the
    fields are unused and can be removed.
    
    A follow-up CL will remove the whole WasmIndirectFunctionTable class.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I06469401ab6aa1b565cd8552e98b749b96f5985d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272234
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92235}

commit 44b1ec034ad2ff2948b67ca82692aa1aa243eaa9
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Feb 7 15:30:29 2024 +0100

    [wasm] Switch runtime functions to use dispatch tables
    
    We want to remove the indirect function tables, so switch the runtime
    functions to work on the dispatch tables instead.
    
    We also unhandlify the "CountUnoptimizedWasmToJSWrapper" runtime
    function which never allocates.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I6b95d36bd161c927e7d6069a632d4178a71a8acc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5277239
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92234}

commit f518529f107528f5e3f2f64b5ee257feee100498
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Feb 7 15:53:15 2024 +0100

    [cleanup] Remove obsolete TODO
    
    The only case in which the Turbofan X64 instruction selection
    optimizes truncation for Int32Sub is if the rhs is 0.
    In that case the MachineOptimizationReducer will already reduce the
    pattern:
    1) lhs - k  => lhs + -k    (with k being 0)
    2) lhs + 0  => lhs
    
    For the added wasm test case the function boils down to
      movl rax,rax
    (excluding function prologue / epilogue.)
    
    Bug: v8:12783
    Change-Id: I9db96d8089b1c0d4561b56808a3514411700678a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272237
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92233}

commit d8dd4d730f3539e7754fcda458e075054b65b882
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Feb 7 13:04:28 2024 +0100

    [regalloc] Fix quadratic behavior with interval cache
    
    When a LiveRange does not cover the current position,
    {LiveRange::Covers()} does not advance the {current_interval_} cache.
    This is because the last processed interval in the loop starts after
    the current position.
    This can result in quadratic behavior where the cache never moves and we
    iterate an increasingly longer list of intervals.
    
    The fix is to pass the last processed interval *starting before the
    current position* to {AdvanceLastProcessedMarker()}.
    
    R=dlehmann@chromium.org
    
    Bug: b/41496962
    Change-Id: I048656d7f52352d5985927808c0771e8134a5928
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272824
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92232}

commit e7c2855a8dd4c8ab37f442ab1d06397181d01e73
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Feb 7 14:45:38 2024 +0100

    [turboshaft][wasm] WasmGCTypeReducer: Improve tracking of unreachable blocks
    
    This CL addresses the known cases where unreachability did not
    propagate to succeeding blocks.
    this change also adds DCHECKs that we only see the bottom type as a
    result of unreachable predecessors.
    Still, as the bottom type handling is still in the regular code,
    if those DCHECKs are hit, it shouldn't be an observable bug in any
    release builds.
    
    Bug: v8:14108
    Change-Id: I715c1e2fa8cbd7bce1edbac6ced61cc75367e9c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5277238
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92231}

commit a1c30e47d0bd4cda15fafa58c91ec5566ca116c6
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Feb 6 16:01:33 2024 +0800

    [loong64][mips64][heap] Check that we do not allocate in fast c calls
    
    Port commit 391a474d7b829ea1a44d1c25dceeded421a3e023
    
    Change-Id: I42b3e11a26ec9493be2c0000dfc95cfccd485c78
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269513
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#92230}

commit 4f46325b21509a4e90f5c87257670599f4552218
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Feb 7 10:32:38 2024 +0100

    [api] Introduce fast-path for ArrayBuffer::IsResizableByUserJavaScript()
    
    Most ArrayBuffer that go through the standard bindings code checks for
    IsResizableByUserJavaScript. The existing implementation first acquired
    the BackingStore from the ArrayBuffer, and then load
    IsResizabelByUserJavaScript from there. However, acquiring the
    BackingStore requires creating a new std::shared_ptr, which showed up in
    profiles of benchmarks. The new API introduces a fast path for
    IsResizableByUserJavaScript that avoids the shared_ptr.
    
    Bug: chromium:41492790
    Change-Id: Id1dc27ca778962690c31fa4552e80f61b50a3b78
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5273190
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92229}

commit 199e786fe0212a76d62c8546136b4ba5df613ef5
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Feb 6 17:50:43 2024 +0100

    [turboshaft] Use WasmDispatchTable for indirect calls
    
    This switches Turboshaft to use the WasmDispatchTable instead of the
    WasmIndirectFunctionTable for indirect calls.
    
    R=ahaas@chromium.org
    CC=saelo@chromium.org
    
    Bug: v8:14564
    Change-Id: Idc8e721346c33dc572889b7e796e4e850f207fd8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272491
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92228}

commit 27b80801f772d9bae24ad5f230800a3b57c8ff1a
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Feb 5 10:58:37 2024 +0100

    [cleanup] Use 'empty' to check for emptiness
    
    Spotted by G3 Clang Tidy:
    go/clang_tidy/checks/readability-container-size-empty
    
    Change-Id: Ia6996023619836ea8353aa2215efdcb1fec368f9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268281
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92227}

commit 41dd803aaaba04c36403c28225a36bd61ee26572
Author: Simon Zünd <szuend@chromium.org>
Date:   Tue Feb 6 13:02:17 2024 +0100

    [inspector] Don't interrupt while building console messages
    
    This CL fixes a use-after-free of the InspectorSession. This can
    happen for workers since they are killed (and the DevToolsSession
    detached) during an interrupt.
    
    The problem is that we might have already entered the inspector and
    the inspector entered JavaScript land. This could mean that we detach
    a session on which we are currently operating on (e.g. building a
    console message to send it to the frontend).
    
    The fix is to postpone interrupts until after we are done building
    console messages so we don't lose the DevTools session half-way
    through it.
    
    R=dsv@chromium.org
    
    Fixed: b:323813642
    Change-Id: I495d926830bc0ed129b0632d454b2d94f3123180
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272444
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92226}

commit e8513f44391a41938f1ac8538c80177f95ebd122
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Feb 6 11:50:32 2024 +0100

    [liftoff] Use WasmDispatchTable for indirect calls
    
    This switches Liftoff to use the WasmDispatchTable instead of the
    WasmIndirectFunctionTable for indirect calls.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: Idf955693d9154d2d2c6e6f775739c2609f9740f6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268509
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92225}

commit c1719ae4931e96ab38da5dc418180810da5e4546
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Feb 6 12:00:48 2024 +0000

    [maglev][cse] Don't expire instructions tagged CanAllocate
    
    Only mutable heap numbers cannot be shared. Any other remaining
    instructions which are tagged can_allocate but idempotent can be
    shared.
    
    Bug: v8:7700
    Change-Id: I7ca45f839320aa6a1c6d1230bbf6a2aeed0b4f8e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269541
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92224}

commit 980c63055d93845c2ca3a4a0941e3a63d0a36de0
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Feb 6 17:26:53 2024 +0100

    [maglev] Don't needlessly tag the accumulator in ToName
    
    If the accumulator is of type name already there is no need to tag it.
    This fixes the case where the input is the impossible type and we are in
    dead code.
    
    Fixed: chromium:323944030
    Change-Id: Ibebc900360e86ea831939195cf2e015686d29b39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272489
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92223}

commit c46f50e9627d7061eef528ad8658eab7ba88b083
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Feb 6 20:07:26 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/f454278..e106e0d
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/2bda660..262e0f6
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/f092a86..6d39c23
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/120efcb..1f441eb
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/6024b26..9d119c1
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/fb27868..a7b3d96
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756782553617934433
    
    Change-Id: If2e54e8f027347ecb400e6c54e0bca8b4e8a7820
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5273020
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92222}

commit ebd3e99c85fb93e7ddea207233e35f53742c2e05
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 1 09:29:18 2024 +0100

    [turboshaft] Introduce Smi Constants
    
    Currently, constant Smis are represented in Turboshaft as
    TaggedBitcast(Constant(kind = Word32/Word64). This causes the
    Instruction Selector to later allocate a register for such Smis,
    instead of using them as Constants operands.
    
    This CL introduces a Smi kind for ConstantOp, which in addition for
    fixing this Instruction Selector problem, will also be useful to more
    easily pattern match Smi constant, and will be useful when working on
    the front-end, where quite a lot of constant Smis will be created.
    
    Bug: v8:12783
    Change-Id: I0f2aa1b03ab512b111e65e4e20f84b7afc23813a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4953364
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92221}

commit db84d2a68a8974e9500ca9318172218e104ae1df
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Feb 6 08:17:23 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/d1fe472..2bda660
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/d391aa3..8c68241
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/c2c3cef..f092a86
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/0696c42..120efcb
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/3c2f388..6024b26
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756827854160314561
    
    Change-Id: Ibad9becd3276845a7cece3e30daf99b30ed38888
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5273682
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92220}

commit fceed6b15911b573a2fd9642dd443173279243ce
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Feb 5 12:40:27 2024 +0100

    [maglev][cse] Ignore zero cost nodes
    
    Nodes which are free to execute should have the smallest possible
    liveness interval instead of being tracked for cse.
    
    Fixes a regression in gaussian-blur.
    
    Fixed: chromium:41497279
    Change-Id: I7d3b78ce8fb2821bc5dba5634a411553d9f04bc5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268502
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92219}

commit 29f0359a4d6f304677b0e34e5d7e2f735e3bf6c2
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Feb 5 18:37:36 2024 +0000

    [maglev][cse] Do not remember the value number of input nodes
    
    Since we de-duplicate expressions as we construct them there is no
    need to store the computed value number on the node itself. If we can
    de-duplicate two different input nodes we already did it and thus
    the inputs will be pointer identical.
    
    Change-Id: I92a1a5b39b7cdf1a8133996f27c0573beaa6dc7c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268386
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92218}

commit ba69602f6b5f1b6f79c0edabd6bad247fcdd16b8
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue Feb 6 13:01:26 2024 +0100

    [arm64] Use qword move to move float/double
    
    On a microbenchmark
    
    ```for (let i = 0; i < ...; i++) r += i```
    
    when I ended up getting a gap-mov double->double for r it was 20% slower
    with mov.d instead of mov.q, probably because the size doesn't match the
    fadd size.
    
    Change-Id: Ida5de7bb698cfe893a75f1d1ffe348405d6ae670
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272483
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92217}

commit 08170169a305fab1dca42bc11d86d7400f25421e
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Feb 6 15:40:33 2024 +0100

    [wasm-imported-strings] Implement encodeStringToUtf8Array
    
    Contrary to the "Into" variant, this implicitly allocates an array
    of appropriate size.
    
    Bug: v8:14179
    Change-Id: I01974624683eef961f6c8b8c6cbe33aa65d2df6a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5273182
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92216}

commit 54f4902ea2fd08959e4a9a244135147726b06ce0
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Feb 6 08:07:18 2024 +0000

    [sandbox] Introduce kRegExpEntrypointTag
    
    This CodeEntrypointTag is used for code using the RegExp calling
    convention, in particular compiled RegExp code and the RegExp
    interpreter trampoline builtins.
    
    Bug: chromium:40948502
    Change-Id: I3927381c5924189ed559791d01f88841065e18df
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268510
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92215}

commit f4a761d1493a9dc473f319dfa43eccbf7adbf2f9
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Feb 6 14:46:54 2024 +0100

    [run_perf] Add optional default value for regexps that don't match
    
    This supports adding regular expressions for results that don't match
    in all perf variants. In case it doesn't match, a default value will
    be used if configured.
    
    Bug: v8:14610
    Change-Id: I53594faea375cf8bde1afa4414bdab5c8be7bf2c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5273181
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92214}

commit 8d8889ff725cfa0149ad64da53667cb55657c89d
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Feb 6 13:27:59 2024 +0100

    [object] Use zero-length arrays for FAM macro if possible
    
    Bug: v8:12710
    Change-Id: I113069c2864ba76466f52e067f3a548d9b893107
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5199515
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92213}

commit 5ca5cf0c56d8b3ce3a31a89737590b9f276d5a76
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Feb 6 12:42:52 2024 +0100

    [fuzzing] Suppress another known flag contradiction
    
    See e.g.:
    https://clusterfuzz.com/testcase-detail/5434718461296640
    
    # Cycle in flag implications:
    --stress-concurrent-inlining-attach-code
    -> --stress-concurrent-inlining
    --predictable
    -> --no-stress-concurrent-inlining
    
    This is the only remaining error currently showing up on
    Clusterfuzz. Though we might find more, once this one gets closed.
    
    Bug: b/41497291
    Change-Id: I2242229e8cef10dd247019e99203547de5d0048c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5272482
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92212}

commit a04b0c422b2825407c33c77e69f121b945fc51e8
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Feb 6 16:46:32 2024 +0800

    [loong64][sandbox] Port some sandbox patches to loong64
    
    Port commit 9fb92407592e15ea83f006ddb41e1df909839031
    - Reference Code from InstructionStream via a code pointer
    
    Port commit 8cd1e89fae9005237bba014fad72bddc0434394b
    - Move runtime-generated Code objects out of the sandbox
    
    Port commit 69a0ef2ddda9bdea1f05c17411ca3faa41ba3200
    - Use a protected pointer to reference Code from IStream
    
    Change-Id: Iff71e1d1abc16ec89e92045f2bd2146534497678
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5269514
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92211}

commit 8b5165522e26458d429cd19972a0ba3efd36bd18
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Jan 31 16:50:26 2024 +0800

    [loong64][mips64] Skip turboshaft-maglev-frontend
    
    Maglev is not supported on loong64 and mips64 port yet.
    
    Change-Id: Ia090b0ca05ac26f7c5142ab2438cea2147e9f0fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252414
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92210}

commit 12a7dd6b0a57c8412c51fbb0b3f26575510c7eb0
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 5 20:06:33 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/432aa4a..c2c3cef
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/af6eabf..0696c42
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/0c4e8fa..fb27868
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/e3b05db..d5858b5
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756873152328826081
    
    Change-Id: I9090e0d7d69ed95ddd423e733f784b38b10e5473
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5270424
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92209}

commit cb7200fe5408bd6f3e3c54e64329ec2d84f3905a
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Feb 5 14:18:59 2024 -0500

    [sandbox] First step towards fine-grained entrypoint tags for builtins
    
    Port 25df12c34d2c644cb54a9e1ff8dca6261f685296
    
    Change-Id: I6db217c00e60c7d5c079c72577c05447b3e48982
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268709
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Reviewed-by: Milad Farazmand <mfarazma@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92208}

commit 25db56a754ded7dc6ee635f87b663a5dd8315afb
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri Feb 2 23:57:57 2024 +0000

    [explicit-resource-management] Add using to parser
    
    This CL adds using as a new token to the parser so it
    will be added to the AST of the code.
    
    Bug: v8:13559
    Change-Id: Ief4d92c38673ed3096ed2fa6b05d69f34e6f394c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4933199
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92207}

commit c66228a5cd89830194d48cb0e5838619acc3b410
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Feb 5 17:09:15 2024 +0100

    [wasm][turbofan] Use WasmDispatchTable for indirect calls
    
    This ports indirect calls in TurboFan to the new
    WasmIndirectFunctionTable object.
    
    Other instructions and compilers will follow separately.
    
    R=thibaudm@chromium.org
    
    Bug: v8:14564
    Change-Id: I679b081fe102c28bd674545fc1b67e752f1efc02
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268381
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92206}

commit b2b1ebad4c96208ce24f73695c5ac4a4cae74e87
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Feb 5 17:49:43 2024 +0100

    [wasm-compile-fuzzer] Minor tuning around i32
    
    - Give higher probability to i32 values in general
    - Distribute i32 constants over their possible bit widths
    
    Change-Id: I03c23c2ff0a60e9edcaa3d166a58720dcb017ec9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268508
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92205}

commit 56e832866202c537fe403f59397768142f28b7f1
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Feb 5 08:18:19 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/90c5422..f454278
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/fc9e646..d1fe472
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/371aa99..af6eabf
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/262783c..e3b05db
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756918450100582401
    
    Change-Id: Ifa4a5abd46cc728b863bc8f57e9722832aa49aa7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268704
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92204}

commit 60c827944ddbcb37624fbbed0a005c8586745f98
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Jan 29 16:47:48 2024 +0100

    [turboshaft] Set proper loop header on InstructionBlocks
    
    This is important for register allocation, since when spilling
    variables, the register allocator will avoid to spill inside of loops
    and instead spill outside (when possible of course).
    
    If the loop headers of InstructionBlocks are not set, then more
    spilling will happen during loop, which will slow down the generated
    code.
    
    Drive-by: add a few `const` annotations (I either needed to remove
    some or to add some; I opted for the latter).
    
    Bug: v8:12783, chromium:1522129
    Change-Id: Ib6b92a25a2a646ea7c4049bd83fa802a69b0b37f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5244668
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92203}

commit 3e9bd981d42c060a028eb290b15678811a38c963
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Feb 5 12:48:33 2024 +0100

    [arm64][simulator] Export a symbol
    
    This fixes a compile error I get locally when building an optdebug arm64
    simulator build.
    
    R=ahaas@chromium.org
    
    Change-Id: I03092f38b0e50398c947f9bd4993df8239e28899
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268503
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92202}

commit b776fc756a9871b807fe505725b99e18cada7d04
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Feb 5 15:55:42 2024 +0100

    [wasm-imported-strings] Fuzzer support
    
    This adds support for imported strings to the wasm-compile fuzzer.
    Drive-by: fix the first bug that this fuzzing support uncovered,
    which is an over-zealous DCHECK when validating modules that have
    no imports but enable compile-time imports.
    
    Bug: v8:14179
    Change-Id: I6a2b3dea76456f42df4f8cae499eee5d32736342
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253193
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92201}

commit 70539260d91a7f974a73d7e80cd203c7253f8031
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Feb 5 12:58:25 2024 +0100

    [liftoff][arm][arm64] Expand macros for binops
    
    Reduce complexity of the LiftoffAssembler by removing the macros for
    binary (and some unary) operations.
    The multiplication instruction can only operate on registers, so it does
    not fit the existing macros, and before adding a new variant it's way
    simpler to just define each operation in isolation.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I91db353c1d5b16e25cb9d7029970dc3f16752d70
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268504
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92200}

commit 4b41b926e7292d75a1101ac5bc49c605ae1a8da3
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Feb 5 14:37:10 2024 +0100

    [wasm] Fix data race when growing WasmDispatchTable
    
    Use acquire load from the GC thread and release store from the main
    thread when growing a table in-place.
    
    R=omerkatz@chromium.org
    
    Bug: v8:14608
    Change-Id: I252bef13772c2db4c23545432b632859f56009ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268604
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92199}

commit 8f73ed848a9c0c8724d4ca6f2ab2ce550e556605
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Feb 5 13:01:55 2024 +0100

    [liftoff] Remove source location from code comments
    
    Liftoff emits one code comment for every Wasm opcode. The source
    location which emits this is always the same. Generally all the source
    locations emitted by the LiftoffCompiler itself do not benefit from
    source location information, so skip it for all code comments emitted
    from there.
    
    R=ahaas@chromium.org
    
    Change-Id: Iabc1a7c5459d397f1f46847cd93595efdc083468
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268602
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92198}

commit 7308802bfe4593b9358c8a65198c268274b5fc7e
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 1 14:25:30 2024 +0100

    [turboshaft] Remove more Gotos during DeadCodeElimination
    
    Bug: v8:12783
    Change-Id: Idb58aa5efb5e110324513cd6ecc360064c186d5d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253157
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92197}

commit 3fdb4d596b84acdbe1fc3db6d9f81490d80d2586
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Feb 5 14:06:31 2024 +0000

    [sandbox] Use kInvalidEntrypointTag for some internal ASM builtins
    
    With this CL, some of the ASM builtins that are only used internally and
    only called into directly from other code now use the
    kInvalidEntrypointTag. This makes it impossible for code inside the
    sandbox to invoke these builtins.
    
    Bug: chromium:1507800
    Change-Id: I254118789963d902483b6966278c119b9f7f22f7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252520
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92196}

commit f07f654e192ad30bf3f156e116543ab5176e7ed7
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Feb 1 13:23:08 2024 -0500

    [turboshaft][ppc] Port InstructionSelector part 3
    
    All tests now pass with the following -extra-flags:
    ```
    --turboshaft-wasm-instruction-selection-experimental
    --turboshaft-future
    --turboshaft-instruction-selection
    ```
    
    Bug: v8:12783
    Change-Id: I71f49f01483599e8c3532f25722170088aabd8db
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249514
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92195}

commit bc54916ae37d134e94b613f56687be79582c2255
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Feb 5 14:32:22 2024 +0100

    [turboshaft][csa] Fully reenabling write barrier elimination
    
    Bug: v8:12783
    Change-Id: I547e598eed55679ad87a44711901cdb3c7efc1fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268061
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92194}

commit 2287b223af9e08a4db0aaf9154fab6a8d3805612
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Feb 5 12:17:37 2024 +0000

    [sandbox] Allow double-initialization of EPT entries
    
    Previously, we tried to avoid double-initialization of EPT entries as it
    would lead to slightly inefficient table compaction: we might relocate
    an entry that doesn't need to be relocated. However, we can avoid this
    simply by checking whether the current entry is already below the
    evacuation area (where it must be if it has been newly allocated). What
    remains is the inefficieny of (potentially) allocating a new table
    entry, although depending on the context that can be hard to avoid if
    the entry is cleared in between.
    
    The problem with the previous DCHECKs was that they were unactionable:
    they would only tell us that a slot was re-initialized somewhere, but
    couldn't point us in any direction for where to look. As such, with this
    CL we now simply allow double-initialization and adjust the algorithm to
    deal with that efficiently.
    
    What does remain though is the limitation that we must not share EPT
    entries between multiple objects. So far this has never been an issue
    though (e.g. as there are no APIs that would do this).
    
    Bug: chromium:41482529
    Change-Id: I96185130524ffc2a9bfcd90c709f1fe40719f0a3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268505
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92193}

commit a0508919e6d22b252dafc7099aaf25cd94551ba9
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Feb 5 14:25:12 2024 +0100

    [codegen] Disable CHECK causing false positives in unreachable code
    
    Bug: chromium:41497374
    Change-Id: I51a5ba208adc95ee4c75981dad1656daa9e3460e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268506
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92192}

commit a08ad97bf9c447cfc45f6a872bb34cd279b26709
Author: Nicolò Ribaudo <nribaudo@igalia.com>
Date:   Thu Feb 1 18:53:34 2024 +0100

    Remove unused HostImportModuleDynamicallyWithImportAssertionsCallback code
    
    This code was only used by old public APIs that have been removed in
    46224e75f3a42fb7ab1291c63d642e69dcdb4ac9
    
    Bug: v8:14577
    Change-Id: I69a9bbc4cb176ddc707f86bf9c3cf5fb25e23aa0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5219272
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Nicolò Ribaudo <nribaudo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#92191}

commit 71b446d7af355dd3fc20ca40ad1a56f947083f4f
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Feb 2 16:32:20 2024 +0100

    [fuzzing] Reset some contradictory flags when fuzzing
    
    Avoid some known contradictory flag cycles when --fuzzing is passed.
    The biggest known offenders are now manually listed and resolved
    when passed together on the command line (which happens in a certain
    percentage of fuzzer runs).
    
    In the future we could turn this manual into a more generic solution
    that calculates all possible contradictory flag pairs, but for now
    we only want to check how much this change impacts the Clusterfuzz
    crash statistics.
    
    Bug: chromium:1524346
    Change-Id: Id1de135dba20825b8763d72c0397586004dbd81c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258482
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92190}

commit 930014347e5c981ead1da9494e55a650f0120738
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Feb 5 10:33:56 2024 +0100

    [maglev] Fix load length prop type on keyed access
    
    TryReuseKnownPropertyLoad can return a Int32 node instead of a Smi.
    
    Drive-By: Change BuildLoadJSArrayLength to return a ValueNode instead
    
    Bug: v8:7700, chromium:41496720
    Change-Id: Id66063af3ad881119fb3d80a03530db335cb71a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268062
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92189}

commit a58d6f7739fa126c1ba2f45176a8686b0cc76c34
Author: David Bokan <bokan@chromium.org>
Date:   Wed Dec 20 16:42:42 2023 -0500

    Update gdb pretty-printer for Member-types
    
    The used Member-type of a variable can sometimes be obfuscated in GDB
    when passed through template arguments and typedefs. The current
    pretty-printer won't trigger in these cases, which are common when using
    WTF containers.
    
    In these cases, fallback to stripping all typedefs and pretty-printing
    the underlying BasicMember.
    
    Change-Id: I5a081c80a74f4ad92d73a759f5441861529afbe9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5142508
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: David Bokan <bokan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92188}

commit b9c79ca2ac9419b2a0ec37128e5b26171f82d39b
Author: Liviu Rau <liviurau@chromium.org>
Date:   Mon Feb 5 10:47:45 2024 +0100

    [test262] Catch approval failure and log it
    
    No-try: true
    Bug: v8:14002
    Change-Id: Ib07890011e0e6cb00697d1bd369ca62dfe7e6151
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268063
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92187}

commit 5c27b141d1b51a68f3ecd8bb384de17ad245ee74
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Feb 5 11:34:41 2024 +0000

    Fix compiler error on non-ptr-compr arm64
    
    We recently changed the signature of CallCodeObject so have to add the
    new argument to this callsite.
    
    Bug: chromium:1520333
    No-Tree-Checks: true
    Change-Id: Ib2d7074e258dfc201297e2a470a6311880ee6abf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5268501
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92186}

commit 25df12c34d2c644cb54a9e1ff8dca6261f685296
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Feb 5 09:34:57 2024 +0000

    [sandbox] First step towards fine-grained entrypoint tags for builtins
    
    Many builtins are only used internally (e.g. called directly from a
    compiled function or another builtin) and do not expect to be called
    directly from script (e.g. through a JSFunction). Until now, however,
    they could still be invoked from within sandbox as they were exposed
    through the code pointer table (CPT).
    
    To avoid this, CodeEntrypointTags should be used: these are XORed into
    the top bits of the entypoint pointer in the CPT, and the caller must
    untag the entrypoint pointer with the expected tag before jumping to it.
    On Arm64, instead of using XOR, the entrypoint pointers could, in the
    future, also be signed using PAC, which may be more efficient.
    
    This CL now implements the basic machinery for assigning fine-grained
    code entrypoint tags to (groups of) builtins. It then assings a new
    entrypoint tag to the IC handler builtins. Other builtins will be
    handled in subsequent CLs.
    
    Bug: chromium:1520333
    Change-Id: I6bfa22d541905219f50f4a6197432d25f056a229
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5240366
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92185}

commit 5d5060da8100f8ecfea5dbb325f7c5a06d54a738
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Feb 2 20:22:31 2024 +0100

    [test][wasm] Fix and speed up mjsunit/wasm/module-memory.js
    
    The final loop in this test had a typo in its starting point, which
    caused it to skip an interesting value, and a typo in its end point,
    which caused it to do much more work than intended.
    
    Change-Id: I7604b95478f6975244932339607607bc089c1750
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5263197
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92184}

commit 13b4b6d80f2c8eac43b85e972071e113a8369b86
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Feb 5 09:45:10 2024 +0100

    [wasm] Enable generic wasm-to-js wrapper by default
    
    Bug: v8:14035, chromium:1489280
    Change-Id: I6b45d6c1b88d76591be913a8798722ec0eadb4e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5259577
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92183}

commit 2ccb82b04747da6d471197951dc75816150ca598
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Feb 2 21:54:53 2024 +0100

    [heap] Optimize WriteBarrierForRange
    
    When only the generational and/or shared write barries are
    needed, we can skip pointers to uninteresting targets quickly
    if they are located on a page that has already been determined
    to be uninteresting. Remembering all uninteresting pages would
    be slow, but remembering the last uninteresting page improves
    a microbenchmark by around 2x.
    
    Change-Id: I15c9b72608971d61f5964e1b00c8f59d11a54bf3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5262698
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92182}

commit 9e435a2797788084050a5ac94bc90fcc589c3b17
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Feb 4 20:07:01 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/266936e..432aa4a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8756963750097502849
    
    Change-Id: If6609a696fe7c05e19378b1db94a34daf6c4c6c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5265518
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92181}

commit d5d02314f0e951913d7328ee31e41395ea087f2c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Feb 3 20:06:32 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/449de3e..90c5422
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/7cd06cd..ab7c591
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757054345799597745
    
    Change-Id: Id1c2b2eba4bac69fd9963484f8d21e45361d21ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5265777
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92180}

commit e1610ada22658dcac81976d83c3912a66867ce52
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Feb 3 08:18:01 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/fc45ae9..449de3e
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/c4d4aa6..fc9e646
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/ab0f0c1..266936e
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/8ca1945..3c2f388
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757099645413078273
    
    Change-Id: I2468092be7882dcbafe9f4442ec1d68805616278
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5262566
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92179}

commit a046d47b8e3b7f2b2014e9273ce0985dac311429
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Feb 2 20:06:22 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/386c656..fc45ae9
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/e8367e6..ab0f0c1
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7142bf1..371aa99
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/283636f..7cd06cd
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/812060a..262783c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757144944388496177
    
    Change-Id: I2ce6dbd0986d77035a8ba6d52d3952b63ff12bc6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5262963
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92178}

commit 4a613043a788f974e0f9231a9f5942d954c1a38d
Author: Shu-yu Guo <syg@chromium.org>
Date:   Fri Feb 2 16:19:23 2024 -0800

    [test262] Update test262 expectations after upstream fixes
    
    Bug: v8:7834
    Change-Id: I81f0a0c44d4cfdbb7e4c6bad185274361440419d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5264027
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92177}

commit 0205fee4d4ad68b8ee4569a101bc9898cb0b0832
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Jan 27 23:17:22 2024 -0800

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/97a2e443..e4f91b63
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757696075285232161
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: I02fb3fe8a4723ee2d79c1c5da48979980c16560a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5242904
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92176}

commit 32252096f67f54374529859d8cc84da5515bd3ed
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Feb 2 16:27:45 2024 +0100

    [turboshaft] Avoid +0 addition in LoadStoreSimplification
    
    We were occasionally introducing a "+ 0" addition in
    LoadStoreSimplificationReducer. In most phases, this isn't an issue
    because MachineOptimizationReducer will probably run afterwards and
    get rid of such useless additions, but LoadStoreSimplification runs in
    the last phase, which doesn't have a MachineOptimizationReducer.
    
    We thus ended up emitting additional machine instructions in such
    cases, which lead to a few performance regressions.
    
    Bug: v8:12783
    Change-Id: I8254d7ff29df801d4530b1441af77ac7f34c4bd5
    Fixed: chromium:1524335
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5259308
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92175}

commit ca5617a78cf2016a3d2d5f5c1b79859dfd9b9e35
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Feb 2 15:27:57 2024 +0100

    [test262] Add a new staging test for Array.p.flatMap
    
    Bug: v8:14306
    Change-Id: Ibc7a04288a0c31bfcf601aa864e02b6c067045c2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5259306
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92174}

commit a268680be5db1a3d691be10375446a99afb995a9
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Feb 2 08:18:57 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/78ad07d..386c656
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/43e7696..c4d4aa6
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/c75e763..e8367e6
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/030b3ed..8ca1945
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/de6b303..812060a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757190242009027137
    
    Change-Id: I32d4ab0a09b1b03d4fbe169b369a1196fb30ffc8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5261865
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92173}

commit af499fcd80e77b2c22d0eab520bc1ca9fb189dae
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Fri Feb 2 15:39:41 2024 +0100

    [turboshaft] Less aggressive block cloning
    
    Cloning large blocks lead to having larger graphs, which lead to
    slower compile time, and larger generated code size.
    
    Bug: v8:12783
    Change-Id: I16206fb698c740c29432cb4706093409e9ded508
    Fixed: chromium:1523151
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5260139
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92172}

commit 3221c38dc2d2a5910da4968fb50740ef31216c24
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Feb 1 14:28:10 2024 -0500

    PPC/s390: [heap] Check that we do not allocate in fast c calls
    
    Port 391a474d7b829ea1a44d1c25dceeded421a3e023
    
    Original Commit Message:
    
        Fast c calls are not allowed to allocate or start a GC. Add DCHECKs
        and CHECKs to ensure that this is indeed the case through all of V8.
    
        Wasm-c-api was using fast c calls with allocation as well. We could
        either disable the checks for it or simply do not set
        fast_c_call_caller_fp for those calls. I chose the latter approach
        because then we can ensure the (D)CHECKs hold all the time.
    
    R=dinfuehr@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I66f4b3685d479b8b56487100d76539f1585a259d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5259898
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92171}

commit 2eb530ff76cd9d2ff7e80f26714c6732e0f79ac5
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Feb 2 12:23:35 2024 +0100

    [wasm] Populate the WasmDispatchTable
    
    This adds WasmDispatchTables for all indirect function tables in an
    instance. For now they are populated together with the indirection
    function table. Long-term, the indirect function tables will be removed.
    
    We have verification in place to check that we update both data
    structures consistently.
    
    Follow-up patches will switch code over to use the new dispatch tables,
    and will then move the "refs" to trusted space.
    
    R=thibaudm@chromium.org
    CC=saelo@chromium.org
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_gc_stress_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux_gc_stress_dbg
    Cq-Include-Trybots: luci.v8.try:v8_linux_arm64_gc_stress_dbg
    Bug: v8:14564
    Change-Id: Ic8eff04b7ed6eebc6f54383ad3702b876ca3724c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257324
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92170}

commit c6c1e4bc88077b8005d9b83f1a70cdbdf246071c
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Feb 2 12:59:36 2024 +0100

    [wasm][wami] Add option to print function statistics
    
    This CL adds the new argument --function-stats to print the binary wire
    bytes size distribution for the functions in the provided module.
    
    Example:
    $> wami --function-stats 100 5 mymodule.wasm
    
    Function distribution:
      0 -  99  bytes:  12575  (67.9%)
    100 - 199  bytes:   2598  (14.0%)
    200 - 299  bytes:   1088  ( 5.9%)
    300 - 399  bytes:    633  ( 3.4%)
    400 - 499+ bytes:   1623  ( 8.8%)
    Total function count: 18517
    
    Change-Id: Iad3b73c3990c0258064d3d3bbb7fb15819e9f1fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5261997
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92169}

commit 7966216f5c10dc141272b325cddb2380f7d2bcfd
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Feb 2 13:40:12 2024 +0100

    [object] Move object initialization loop to JSDataObjectBuilder
    
    Move the initial object initialization loop from JsonParser to
    JSDataObjectBuilder. This means that:
    
      * Object creation now takes an iterator over existing values -- it's
        up to the caller to preserve values between the initial fast loop
        and the object initializer (e.g. the value serializer keeps a vector
        of values, the JsonParser can use the property stack but needs to
        skip over index properties).
      * The handling around reusing HeapNumbers as mutable HeapNumbers in
        double fields is abstracted into JSDataObjectBuilder, as an
        additional configuration option.
    
    Change-Id: Icc39a42e8040d1891d4a740c4cbc3b1573ecdce0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237383
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92168}

commit 98f8c1534dfed5215aecf36c3b154ccca5851ece
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Feb 2 13:39:40 2024 +0100

    [object] Clean up JSDataObjectBuilder bailouts
    
    * Don't search the ObjectLiteralMap cache if we have an expected map --
      only search it if we need to rewind back to a map with zero properties
      (i.e. an expected map miss on the first property).
    
    * We can still emit transitions to data properties even if there is an
      existing transition to an accessor property; stop differentiating
      between these two kinds of found maps, and always try to create a new
      transition on the fast path.
    
    * FindTransitionToDataProperty is only ever used for
      FindTransitionToField, and data properties can only ever be fields
      (ever since we removed constant data in descriptors). Merge these two,
      and furthermore specialize FindTransitionToField for Strings rather
      than generic Names since that's all the uses anyway. Use this instead
      of using SearchTransition directly.
    
    * Get rid of next_map_ -- we only needed it for allowing rewinding to
      the current map when the current map had zero properties, and this is
      done by looking up in the ObjectLiteralMap cache now, so we can just
      have local handles for the next target and a single `map_` field.
    
    * Make the expected map, expected properties, and elements kind
      initialisation all happen in the same place (the constructor), so that
      there's no weird ordering requirements on the method calls.
    
    Change-Id: I17083b978997263533fe22ac7690812f08161341
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237040
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92167}

commit cba60722ad3a3515560da12e2e8638a544e1f239
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Feb 2 11:38:31 2024 +0100

    [map] Fix bad enum cache DCHECK
    
    Fix the documentation DCHECK that enum caches stay owned by the old map
    chain (rather than moving ownership to the new map chain) by actually
    caching the enum cache, rather than trying to mess around with old
    descriptors and the complexity that integrity transitions add.
    
    Fixed: chromium:1523713
    Change-Id: Ib9f440d41fe9aaf214b29676f6cebed6fac2b766
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5259301
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92166}

commit 81074184fac65ce0a916f24e44c2036f189a1ad3
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Feb 1 17:11:17 2024 +0100

    Reland "[heap] Consider young gen size for allocation overshoot"
    
    This is a reland of commit 3c517d65ac9954fb1dcfc4658ce00eb4f8a89140
    
    Original change's description:
    > [heap] Consider young gen size for allocation overshoot
    >
    > Take young gen size into account when checking allocation overshot for
    > full gc incremental marking finalization. This should limit the growth
    > of new space during full gc incremental marking.
    >
    > Note that in theory, since young gen size is not used for calculating
    > allocation limit and overshoot, adding the young gen size for checking
    > if allocation is overshot could push us beyond the overshoot limit as soon as incremental marking as started. However, since new space size when incremental marking is not running is at most 72MB and the
    > overshoot limit is generally more than that, this situation seems very
    > rare and unlikely.
    >
    > Bug: v8:12612
    > Change-Id: Ie7c1ea8516e2955ef170a28a45ee4aee677134bd
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5248827
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92137}
    
    Bug: v8:12612
    Change-Id: Ifd6a42b7f4f6d6645bc72344dfa0264c5cbe13ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258919
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92165}

commit 78a3788238c739908bb4dd073d16dbf484acf6ec
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Feb 2 11:54:29 2024 +0000

    Fix clearing of dead TRUSTED_TO_TRUSTED remembered set entries
    
    During mark-compact GC, it can happen that an object with slots recorded
    in in a remembered set is freed (e.g. because there is custom weak
    marking logic for the object, as is the case for e.g. baseline Code). In
    that case, the remembered set entries must be cleared prior to
    potentially evacuating other objects into the now-free memory. This is
    done in Sweeper::CleanupRememberedSetEntriesForFreedMemory, which was,
    however, missing the TRUSTED_TO_TRUSTED set. This CL fixes that.
    
    Bug: chromium:1524115
    Change-Id: I945284a636b4cd2ab4d3f198544ac41f1c1f7695
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258483
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92164}

commit 7d7798e7d2128682b7a25a84d38840e643e9601e
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Feb 2 11:51:03 2024 +0100

    [wasm] Introduce WasmDispatchTable
    
    This CL introduces the WasmDispatchTable alongside the existing
    WasmIndirectFunctionTable.
    The WasmDispatchTable lives in trusted space, so it improves security by
    making it much harder to manipulate signatures or call targets. It also
    improves performance because the stored information is close together
    per index, requires less code for loading and touching fewer cache
    lines.
    
    For now the "ref" stored in the WasmDispatchTable is still either a
    WasmApiFunctionRef or a WasmInstanceObject. After the refactoring is
    complete, the WasmApiFunctionRef will also be stored in trusted space
    and we will store either the WasmApiFunctionRef or the
    WasmTrustedInstanceData directly. This will make the code for indirect
    calls even smaller.
    
    Future CLs will first start to fill the dispatch table alongside the
    existing indirect function tables, then switch over all compilers to use
    the dispatch table, and then finally remove the indirect function
    tables.
    
    R=ahaas@chromium.org
    CC=saelo@chromium.org
    
    Bug: v8:14564
    Change-Id: Ib965a653ac391ba87117ccf9e913c173fcea2866
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250108
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92163}

commit e6cf8b6d24f9285603de629ae5467dc3b1e8ab1c
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Feb 1 17:25:52 2024 +0100

    [wasm] Fix use-after-free in WasmFullDecoder's zone
    
    We should only reset the Zone after the Decoder's destructor is
    invoked, because it modifies the Zone.
    
    Bug: chromium:1523999
    Change-Id: I3281b4384d9c0a17aebd9a8bf2cb512b0441a014
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258979
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92162}

commit 360a56392e863109838e6f7159772e32956489b2
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Feb 2 14:12:57 2024 +0800

    [riscv][heap] Check that we do not allocate in fast c calls
    
    Port commit 391a474d7b829ea1a44d1c25dceeded421a3e023
    
    Fast c calls are not allowed to allocate or start a GC. Add DCHECKs
    and CHECKs to ensure that this is indeed the case through all of V8.
    
    Wasm-c-api was using fast c calls with allocation as well. We could
    either disable the checks for it or simply do not set
    fast_c_call_caller_fp for those calls. I chose the latter approach
    because then we can ensure the (D)CHECKs hold all the time.
    
    Bug: chromium:1523607
    
    
    Change-Id: I2fc6e21a8f438e61b121cba6cb03669c89c91920
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5260614
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92161}

commit 0b518174b2a03ef512345852f4b36142921486da
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Feb 2 08:44:24 2024 +0000

    [sandbox] Fix handling of InterpreterData in InterpreterEnterAtBytecode
    
    After crrev.com/c/5210475, InterpreterData references the trampoline
    code through a protected pointer, but the InterpreterEnterAtBytecode
    builtin still assumed that the field was a code pointer.
    
    Bug: chromium:1524089
    Change-Id: I26aa5254cf6cfe828c5ec2cb40d06d7acf0a87b9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258982
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92160}

commit 53da91493e0bf7d6d18cb7161d8068f4ee79b88f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Feb 1 20:09:46 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/c798d54..78ad07d
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/d8688b9..43e7696
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/92469e0..7142bf1
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/28aa23f..030b3ed
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757235540887148529
    
    Change-Id: I9426bb78fc94f561ed5a6599232d28e64ae4e25f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258707
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92159}

commit 7bf5e884f69c3200f443c844ef4a5636df20b025
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Feb 1 16:17:00 2024 +0100

    [maglev] Fix deopt loop for empty for-in iteration
    
    ... that was deopting because of empty indices. Also fix the empty
    indices check to check against the empty fixed array root instead of
    loading the length.
    
    Bug: v8:7700
    Change-Id: Iadd89bc8b817732028464118b1cbef3ee5323e70
    Fixed: chromium:1523798
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258918
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92158}

commit a84e1f0c63a6c3e217af8f701f41dd4c50beffef
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Feb 1 17:27:00 2024 +0100

    [wasm] Remove obsolete flag --enable-wasm-arm64-generic-wrapper
    
    Change-Id: If8620d81c58bc5ab93e1b87786763df0fb7a71be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5259578
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92157}

commit b6e516bff102074d6fff303118476dd8dbce02ae
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Feb 1 17:29:02 2024 +0100

    [cleanup][wasm] Remove unused labels
    
    Change-Id: I907cdf279df28444ef79d0f7ef00ba34524eef34
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258980
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92156}

commit 3f447d01de21d6afe4d26ddae268ade7c557b29e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Feb 1 08:17:44 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/16c7c6a..c798d54
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/3107c57..c75e763
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/db0dcbb..92469e0
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757280838997584385
    
    Change-Id: Ib9fb4de13952cffb42ca87e7941fbd1910bd5234
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258959
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92155}

commit c20913215e2db26bdc57d8992b4d6b8ae4299f71
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Feb 1 16:29:18 2024 +0100

    Introduce ProtectedFixedArray
    
    A is a subtype of FixedArrayBase. It lives in trusted space and contains
    pointers to other trusted objects (i.e. protected pointers).
    
    It will be used for storing the imported_function_refs and the array of
    WasmDispatchTables in Wasm.
    
    R=saelo@chromium.org
    
    Bug: v8:14564
    Change-Id: Idaf98088bc8c55a0ef03dcf109c232a47d7f65bb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252526
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92154}

commit 391a474d7b829ea1a44d1c25dceeded421a3e023
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Feb 1 14:53:32 2024 +0100

    [heap] Check that we do not allocate in fast c calls
    
    Fast c calls are not allowed to allocate or start a GC. Add DCHECKs
    and CHECKs to ensure that this is indeed the case through all of V8.
    
    Wasm-c-api was using fast c calls with allocation as well. We could
    either disable the checks for it or simply do not set
    fast_c_call_caller_fp for those calls. I chose the latter approach
    because then we can ensure the (D)CHECKs hold all the time.
    
    Bug: chromium:1523607
    Change-Id: Iebc0ee3eae791ed2ae2435d2ca6f1d34937b3476
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253159
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92153}

commit 519e41a82b8a5bbf10fb38412c6e3e93afe30640
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Feb 1 15:09:46 2024 +0000

    Revert "[heap] Consider young gen size for allocation overshoot"
    
    This reverts commit 3c517d65ac9954fb1dcfc4658ce00eb4f8a89140.
    
    Reason for revert: Failing on chromium gpu tests:
    https://ci.chromium.org/ui/p/v8/builders/ci/Mac%20V8%20FYI%20Release%20%28Intel%29/24367/overview
    
    Original change's description:
    > [heap] Consider young gen size for allocation overshoot
    >
    > Take young gen size into account when checking allocation overshot for
    > full gc incremental marking finalization. This should limit the growth
    > of new space during full gc incremental marking.
    >
    > Note that in theory, since young gen size is not used for calculating
    > allocation limit and overshoot, adding the young gen size for checking
    > if allocation is overshot could push us beyond the overshoot limit as soon as incremental marking as started. However, since new space size when incremental marking is not running is at most 72MB and the
    > overshoot limit is generally more than that, this situation seems very
    > rare and unlikely.
    >
    > Bug: v8:12612
    > Change-Id: Ie7c1ea8516e2955ef170a28a45ee4aee677134bd
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5248827
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92137}
    
    Bug: v8:12612
    Change-Id: Ibba7c545e10a609d622dbeeb6c9fe2cf994ac286
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258917
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92152}

commit 86ae25eb721f81cfa67bfde298bfb09cbdaf567a
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Feb 1 15:25:54 2024 +0100

    [wasm-compile-fuzzer] Refactor handling of struct/array types
    
    This refactors the wasm-compile fuzzer to use arrays of struct/array
    type indices instead of implicitly-known ranges of type indices.
    This mirrors how function signature types have already been handled.
    This is a prerequisite for adding fuzzer support for imported strings,
    the included addition of default i8/i16 array types is a first step
    in this direction.
    
    Bug: v8:14179
    Change-Id: I6d46d3a75a50640523c7a14fc4da11b7de4d909d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253192
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92151}

commit 5a261bc66a0f92aab6a833b61ebc98985d3882bb
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Feb 1 12:37:38 2024 +0100

    [wasm] Small cleanups
    
    Change-Id: Iea15da443ccca26178a2dc6605ed98abc1b6fb44
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257718
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92150}

commit c331a24052a331fe24b700b9fb7a3291a931d7dc
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Feb 1 14:22:35 2024 +0000

    Revert "Reland: [const tracking let] Const tracking for lets"
    
    This reverts commit 2feb2a662c0d82cd0a032eca48282a0b036862d6.
    
    Reason for revert: Failing on linux single generation:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20single%20generation/13500/overview
    Next build without infra failures:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20single%20generation/13501/overview
    
    Original change's description:
    > Reland: [const tracking let] Const tracking for lets
    >
    > Track the const-ness of top-level let variables.
    > - Embed them as constants in optimized code
    > - Deopt code which depends on the const-ness if the value is no longer
    > a constant
    >
    > Design doc:
    > https://docs.google.com/document/d/18F1syu8314lcz1pm9e2LNi3pYzp5t1ah5EpmR4mE4Tg/edit?usp=sharing
    >
    > Previous try: https://chromium-review.googlesource.com/c/v8/v8/+/4085141
    >
    > This code is the same, just https://chromium-review.googlesource.com/c/v8/v8/+/5244806
    > is needed.
    >
    > Bug: v8:13567
    > Change-Id: I9dedd73e8507fac3f0004e57703c359f7595cce9
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250124
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Commit-Queue: Marja Hölttä <marja@chromium.org>
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92142}
    
    Bug: v8:13567
    Change-Id: Ib183fab3c01bb3c83e1ea08e371adbda57de30a8
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5258497
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92149}

commit 39d18b4734d86dbc80eec293957d99cdd8f75bea
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Feb 1 11:34:23 2024 +0100

    [wasm] Fix DCHECKs for memory growing
    
    The --stress-wasm-memory-moving flag makes us skip the try to grow
    memory in place. Later code paths then assumed that the memory must
    actually grow by at least one page because otherwise the in-place
    growing would not have failed.
    
    This CL fixes the respective DCHECKs and adds a regression test.
    
    R=jkummerow@chromium.org
    
    Fixed: chromium:1523740
    Change-Id: I963bef3be53cb959f328edff46bc4eaf3aadccb4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257322
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92148}

commit d659cfc0655e99bdcd9827553e9a62c79ddf84c1
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 1 14:20:07 2024 +0100

    [turboshaft] ISEL: avoid more gap moves for Smi bitcasts
    
    In CL https://crrev.com/c/5246025, I only updated one of the callsite
    of VisitBitcastSmiToWord but not the other one.
    
    This CL now moves the logic to VisitBitcastSmiToWord so that we don't
    forget more callsites.
    
    Bug: v8:12783
    Change-Id: I4a09a66bf532345935551e2423847939911ee51a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257340
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92147}

commit cf01268aced73452b4e4d6180614f9ab03be2ca7
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Feb 1 12:59:53 2024 +0000

    Remove TrustedObject::kize static field
    
    This probably was meant to be kSize, but apparently it is not used
    anywhere, so remove it.
    
    Change-Id: Ifd43c1be2680ae0eda1f4ecd87dc19d5d39dfc66
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257838
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92146}

commit b2ffce949fc47d349b444848c2f6a2aa6dfb54f9
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Feb 1 14:10:46 2024 +0100

    Introduce a SmiCompressionScheme
    
    In addition to the V8HeapCompressionScheme,
    TrustedSpaceCompressionScheme, and ExternalCodeCompressionScheme, this
    CL introduces a SmiCompressionScheme which can be used in places where
    we know that all objects we deal with will be Smis (e.g. for Smi-field
    accessors).
    
    This prepares a CL to introduce a ProtectedFixedArray, which will
    require specifying the CompressionScheme for any Shape for
    TaggedArrayBase. In the case of Smis, there is no point in specifying
    V8HeapCompressionScheme or any of the other schemes.
    
    We also add some more "V8_ASSUME" and "constexpr" to maybe get some
    better code generated by clang.
    
    R=ishell@chromium.org
    
    Bug: v8:14564
    Change-Id: Ia6b860b168f87f5064380bfa86cf513ffa4f3a49
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252525
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92145}

commit 9b18456bfcbf16b50dad24f7a23ec96db54da8a1
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Feb 1 13:31:41 2024 +0100

    [maglev][cse] Don't eliminate GetSecondReturnedValue
    
    This instruction is implicitly tied to the last builtin call.
    
    Fixed: chromium:1523482
    Change-Id: I0ad1d6796e2387e65cd5c92ba175f64249da7b88
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257661
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92144}

commit d849926aec41e3b90e3cc0fa10c6461b7d191d6b
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Feb 1 10:48:15 2024 +0000

    [sandbox] Make BytecodeArray::constant_pool a trusted object
    
    While the constant pool mostly contains untrusted values like string
    constants, it also contains things like jump tables as Smis which are
    considered trusted. As such, this CL now turns the constant pool into a
    TrustedFixedArray, i.e. a FixedArray in trusted space containing regular
    tagged values.
    
    Bug: chromium:1515075
    Change-Id: Id4d888f9ee87ccd9162fa2df19c3107385cd939c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5241065
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92143}

commit 2feb2a662c0d82cd0a032eca48282a0b036862d6
Author: Marja Hölttä <marja@chromium.org>
Date:   Wed Jan 31 08:12:11 2024 +0100

    Reland: [const tracking let] Const tracking for lets
    
    Track the const-ness of top-level let variables.
    - Embed them as constants in optimized code
    - Deopt code which depends on the const-ness if the value is no longer
    a constant
    
    Design doc:
    https://docs.google.com/document/d/18F1syu8314lcz1pm9e2LNi3pYzp5t1ah5EpmR4mE4Tg/edit?usp=sharing
    
    Previous try: https://chromium-review.googlesource.com/c/v8/v8/+/4085141
    
    This code is the same, just https://chromium-review.googlesource.com/c/v8/v8/+/5244806
    is needed.
    
    Bug: v8:13567
    Change-Id: I9dedd73e8507fac3f0004e57703c359f7595cce9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250124
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92142}

commit 70376624c5311c99deaaa991b8533cc7a4737e37
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Feb 1 12:52:55 2024 +0100

    [turboshaft][wasm] RecreateSchedule: Mark exception block deferred
    
    It was noted that RecreateSchedule does not preserve the deferredness
    of catch blocks ("IfException" in Turbofan).
    Note that this was noted because with deferred block the
    RegisterAllocator is significantly slower in certain situations, so if
    this CL causes significant compile time regressions, these should be
    investigated in the RegisterAllocator.
    
    Bug: chromium:1519099, v8:12783, v8:14108
    Change-Id: I24cb0fd79d950a7c583a59928ac0d80b8eb27f57
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257662
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92141}

commit f75673f4a941d9ea3afbd9c5c8c41f45329df5c5
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 31 16:32:22 2024 +0000

    [sandbox] Use protected pointers in InterpreterData
    
    Now that InterpreterData, BytecodeArray, and Code objects are all
    located in trusted space, we can use protected pointers (instead of
    trusted/indirect pointers) for references between them.
    
    Bug: chromium:1473677
    Change-Id: I213dd657fc5745c3ca52e55e5c72299712a5d9ba
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210475
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92140}

commit e528bc9abc813f24e221a8e10cfb611900732de0
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Feb 1 11:52:44 2024 +0100

    [maglev][cse] fix dcheck for NaN in LoadPolymorphicAccess
    
    Ensure we use the correct equality for NaN constants in
    LoadPolymorphicAccess. By storing the double as Float64 we
    automatically ensure that the equality of
    `LoadPolymorphicAccess::options()` is what we expect for instructions.
    I.e., we want observational equality (NaN's are interchangeable) for the
    constant instead of double equality (NaN's are unequal).
    
    Fixed: chromium:1523716
    Change-Id: Ib281e396374658b1c2b94edea858f56f91b36b1e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257578
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92139}

commit 16168e31434e8db3784d1a8c44a0141bb5f1459e
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Feb 1 10:53:28 2024 +0100

    [wasm] Fix delegated exception in inlined call
    
    When delegating an exception to an inlined callee with an exception
    handler, we should make sure the exception is handled by that handler
    instead of rethrowing it.
    
    Bug: chromium:1523414
    Change-Id: I71ef1471c85cf2135664a7c83e64e7c719f0e635
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252522
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92138}

commit 3c517d65ac9954fb1dcfc4658ce00eb4f8a89140
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Jan 30 12:39:50 2024 +0100

    [heap] Consider young gen size for allocation overshoot
    
    Take young gen size into account when checking allocation overshot for
    full gc incremental marking finalization. This should limit the growth
    of new space during full gc incremental marking.
    
    Note that in theory, since young gen size is not used for calculating
    allocation limit and overshoot, adding the young gen size for checking
    if allocation is overshot could push us beyond the overshoot limit as soon as incremental marking as started. However, since new space size when incremental marking is not running is at most 72MB and the
    overshoot limit is generally more than that, this situation seems very
    rare and unlikely.
    
    Bug: v8:12612
    Change-Id: Ie7c1ea8516e2955ef170a28a45ee4aee677134bd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5248827
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92137}

commit cc5c4f4679e2f09e5721ed70e167fc56748f1911
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Feb 1 10:47:51 2024 +0100

    [turboshaft] Set correct current_input_block when inlining blocks
    
    This also fixes https://issues.chromium.org/u/1/issues/323308902.
    
    Bug: v8:12783
    Change-Id: Ia3ef37da971b04b99880a6409b69085f187d32f1
    Fixed: chromium:1523833
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257320
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92136}

commit 69ad08767c4f692b17d462026a93dc247394aaec
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Jan 30 20:18:55 2024 +0100

    [turboshaft][wasm] WasmGCTypeReducer: Fix branch on ref.test
    
    Fixed: v8:14600
    Bug: v8:14108
    Change-Id: I7ca95074bb2a5b1c4a0ad5aeb5e2deb152bebc79
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250123
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92135}

commit f3a14bcc416262b6ee402dc3bb1293e66041991c
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Feb 1 09:05:28 2024 +0100

    [heap] Fix cppgc architecture macros
    
    Most code was using V8_TARGET_* when really this macro is used for
    determining the JIT target. All of Oilpan runs on the host though, so
    we should use the V8_HOST_* macros.
    
    A side effect of this is fixing a cross-compilation issue. Previously,
    when setting target_cpu=x64 on arm64, we would get write barriers in
    cppgc's public API wrong because the macro override is not propagated
    to the API and the information about guard pages got out of sync.
    Using the host macro fixes this because it is never overriden using GN
    (but only via compilers directly).
    
    Bug: chromium:1520621
    Change-Id: Iba034f53b90b6f76f24d57f584e957cdde9d2177
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257317
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92134}

commit e3169f1354a91f2fa65633f03586eada2e20e95e
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Feb 1 08:56:19 2024 +0100

    [clusterfuzz] Mark more flag contradicions for fuzzers
    
    These flags lead to contradictory cycles when used together. Add more
    of these known contradicions to the global trial configs and to
    specific flag picking by js_fuzzer.
    
    Bug: chromium:1175943
    Change-Id: I6bd67d94d99574c6b474a9bd34686de2b5c4e1d8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5257199
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92133}

commit c119a0f4a7735bfe1d751833a89c82edb548bc53
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Jan 31 17:06:31 2024 +0100

    [turboshaft] Do not call VisitBlockTerminator from unreachable code
    
    Bug: v8:12783
    Change-Id: I63ee68dce029863bece68e6cf887806f24fd40a0
    Fixed: chromium:1523313
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253160
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92132}

commit 8b4776002a1567012735b45650368583ed2bca40
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Jan 31 22:27:38 2024 +0100

    [fuzztest] Qualify fuzzer names and fix centipede link
    
    Prefix fuzzer names with v8_ to better qualify them on Clusterfuzz.
    
    Additionally this replaces the symlink to centipede with a bash
    wrapper that redirects the execution to the build output folder,
    in order for shared libraries in the same directory to load.
    
    Bug: chromium:1500944
    Change-Id: Iefba53ed32c9457aa2f500982041ea462cee37b7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5254638
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92131}

commit 31995ec1b2f28b42a4a400cfd2f91c098fbbbdad
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Jan 31 21:57:21 2024 +0100

    [fuzztest] Roll fuzztest
    
    Bug: chromium:1500944
    Change-Id: I32c20fecb1cb6193da972ab39409934c5a5a57fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5254637
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92130}

commit b9eed8950c875c0cbc2073b80aa2648ab5f360d8
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Jan 31 20:07:03 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/4bcfd86..16c7c6a
    
    Rolling buildtools/reclient: re_client_version:0.128.1.7c74998-gomaip..re_client_version:0.130.0.546556b-gomaip
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/719cd9d..3107c57
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/10bd39f..db0dcbb
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/f48a08b..0c4e8fa
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/9665465..283636f
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/17502a3..de6b303
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757326136842788785
    
    Change-Id: Iba0a25caf4774b9b74258cc6335deb436f6920ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5255982
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92129}

commit a70744697a3e57254691ba23bae9b52c116ceaa3
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Jan 31 10:32:51 2024 +0800

    [riscv] Skip turboshaft-maglev-frontend
    
    RISC-V don't support maglev, so skip turboshaft-maglev-frontend.js
    
    Change-Id: Id4f8be55cd3e90845e0215e66ff2860699640ef4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252428
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#92128}

commit 57c74dab6b021c66bf9d33788334646ca9778cb3
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Feb 1 00:52:03 2024 +0000

    Revert "[map] Maintain is_double bit on enum cache"
    
    This reverts commit a05a3a8f8bcfb1e718b4e051be68a868520c2734.
    
    Reason for revert: Probably the cause of roll build failure on  dawn-linux-x64-deps-rel
    
    https://ci.chromium.org/ui/p/chromium/builders/try/dawn-linux-x64-deps-rel/45524/overview
    
    Original change's description:
    > [map] Maintain is_double bit on enum cache
    >
    > ... when updating field types.
    >
    > Change-Id: I08f40380d9f33a9c2a90cda86655b3aea6610700
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252519
    > Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92121}
    
    Change-Id: I56ee8ef6efae44d8d550939cfa05ea095cfbe880
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5255697
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92127}

commit 74dc53b2d081bb1c5fd6960807c7a06449e14551
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Jan 31 17:31:53 2024 +0100

    [wasm] Avoid std::vector for constant expressions
    
    During constant expression evaluation, we used std::vector to
    temporarily store wasm values. These allocations showed up in heap
    profiling. It's better to use the decoder Zone for this temporary data.
    
    Change-Id: I66054714632a0d6253a4b6f0556ffaeb3e0ef081
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252523
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92126}

commit 76db501151f478f7025e2b780d381a8a693dbfd2
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Jan 31 17:49:43 2024 +0100

    [fuzztest] Fix msvc build
    
    Bug: chromium:1500944
    Change-Id: Ic1b9184474a2c322ca753cbafb2974b35bf5c164
    Cq-Include-Trybots: luci.v8.try:v8_win64_msvc_compile_rel
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252524
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92125}

commit 95f8155029402a21768f3bdb8e88902e508472e4
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Jan 31 17:44:47 2024 +0100

    [turboshaft] Prevent Loads/Stores with offsets that are out of range
    
    Bug: v8:12783, chromium:1523415
    Change-Id: I087611da51d4a6c1fe0d60512a17ae5046b3abd2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249899
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92124}

commit 26fd1dfa9cd6d56eae8ecfc7a136fd6709fba161
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Jan 30 16:28:06 2024 -0800

    [import-attributes] Deprecate 'assert' for dynamic import as well
    
    Bug: v8:10958
    Change-Id: I7847bdb5d2c79f057f4e1df99f8f5889788f09cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249778
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92123}

commit 867e6c4af65d3a175c6dc1c3dbd426c5999fc1a8
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Jan 31 08:17:28 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/11baf0c..4bcfd86
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/594e0ed..d391aa3
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/3ccf8c4..17502a3
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757371435942950225
    
    Change-Id: Ie89de27c8f6ac811edaf4fe957b78361a05cd8bb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249205
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92122}

commit a05a3a8f8bcfb1e718b4e051be68a868520c2734
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Jan 31 16:20:00 2024 +0100

    [map] Maintain is_double bit on enum cache
    
    ... when updating field types.
    
    Change-Id: I08f40380d9f33a9c2a90cda86655b3aea6610700
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252519
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92121}

commit 47b954139cc4f5e595dc5f6fa9be4147baeb4ee7
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Jan 31 16:11:04 2024 +0100

    [maglev] Cache JS array length on element loads
    
    Bug: v8:7700
    Change-Id: I8d7f9866ed9ee279ae28904280842428473f85fd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252518
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92120}

commit 3a9d58f440a232bff8b0fd3bc18a61d889ea1ed5
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Jan 31 15:47:16 2024 +0100

    [maglev] Record properties of inlined allocated objects
    
    Bug: v8:7700
    Change-Id: Idd866cfd12dc474525e22b6f41e9260b1abf0ff1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253161
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92119}

commit 7add90b6b71734b2530de077702b9f1c1ebc6445
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Jan 31 15:46:29 2024 +0100

    [maglev] Cache enum cache indices in for-in
    
    The enum cache indices in the descriptor array may get cleared if the
    descriptor array is extended with an accessor, but this doesn't
    invalidate the old enum cache indices, so we can cache these across the
    for-in.
    
    Bug: v8:7700
    Change-Id: I472884d3ce127f5a54429c76342e5b6e78e4d372
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250230
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92118}

commit 29371c3b7d6276d744506935288255adcae84be5
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Jan 31 14:27:17 2024 +0100

    [wasm] Add stress mode to move memory
    
    This adds a --stress-wasm-memory-moving flag which causes Wasm memory to
    move whenever possible (if not shared and without guard regions).
    It also adds a regression test which uses this flag to reproduce a
    previous bug.
    
    R=jkummerow@chromium.org
    
    Bug: chromium:1518257
    Change-Id: I504ea4769ab7b5eb32f764fe63e2ace8c7f85507
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253155
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92117}

commit 769d7ab5ced2d3a1a7c04db169dda2468d326012
Author: Marja Hölttä <marja@chromium.org>
Date:   Tue Jan 30 16:16:17 2024 +0100

    [isolate] Fix a data race with the allow_compile_hints_magic_ cache
    
    Background inline streaming threads might read the value before its
    available, and race with setting the value.
    
    We can't delay background inline streaming until the value is surely
    available, so, handle the data race gracefully.
    
    Bug: chromium:1519976
    Change-Id: I6e8ebce47ad3918dad12ba11f7b0c318d32b5a7a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250112
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92116}

commit 78a7a24019bf1f71421d46b74632d083e143d09f
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Jan 30 10:54:13 2024 +0100

    [wasm] Reset Zone after constant expression evaluation
    
    For performance, we use the same Zone for all decoders that evaluate constant expressions during module instantiation, or parse them during
    module decoding. This way however, memory from these decoders adds up
    (to up to 70MB for Sheets headless benchmarks).
    Resetting the Zone after each constant expression reduces maximum
    malloced memory for Sheets headless by almost 50MB.
    
    
    Change-Id: I12464f4d2bf5a3c642ad764608efb5d2a66c605c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245690
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92115}

commit 41a7527eeb04280f4d6e43eb36a5822d2c320179
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Jan 31 08:22:41 2024 -0500

    PPC/s390x: fix turboshaft/turboshaft-maglev-frontend
    
    Change-Id: Ida3c1a0781941363655364508d22c2a521c797e8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249052
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92114}

commit cf46188a7222ac4ef1e260c730025fd77bfae097
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Jan 31 14:19:48 2024 +0100

    [turboshaft] Fix FinalizeLoop call for single-block loops
    
    Bug: v8:12783
    Change-Id: Id3791782a87e4e6e16d1308947b19858e3f914bf
    Fixed: chromium:1523316
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249900
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92113}

commit e369bbde7d0b5959811b6242a502389f802997dd
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Jan 31 14:02:52 2024 +0100

    [fuzztest] Disable fuzztest with gcc and msvc
    
    Bug: chromium:1500944
    Change-Id: I0b135f4f6c1023500d36b696fab5af7b54eeb5b6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249898
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92112}

commit 1f08f90385a582a8735c2b91adcd7956ac6b73b8
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Jan 30 10:38:37 2024 +0100

    [heap] Refactor new space allocation path
    
    This is a partial reland of crrev.com/c/5116541 containing only the
    refactoring but not yet taking allocation overshot into account.
    
    Bug: v8:12612
    Change-Id: If31b0c6ec7a75898d7e31dacb82f799b721ca0b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245689
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92111}

commit aaddd8ec45b400feff5988e1e55cc142a557f196
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Jan 30 16:47:01 2024 +0100

    [turboshaft][wasm] WasmGCTypeReducer: Fix bottom type in snapshot merge
    
    This is a very similar change to https://crrev.com/c/5204427 .
    Back then the assumption was that bottom types can not happen in the
    snapshot merging for blocks marked as unraechable.
    As part of the analysis of https://crbug.com/1514072 it was also
    uncovered that reachability tracking doesn't propagate causing
    predecessors to be marked reachable which in fact are unreachable.
    
    This CL fixes the handling of bottom types. Once reachability fully
    propagates, bottom types shouldn't appear for reachable blocks in the
    snapshot merging. Still, for defensive reasons it might still be
    valuable to keep these checks alive.
    
    Fixed: chromium:1521371
    Bug: v8:14108
    Change-Id: I720fac5d2cd1e3f2b6933e9797d2881385b52f96
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250116
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92110}

commit a3d04ecb4635cd3d4e4097a958b13e9f751ebe8f
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Jan 31 11:49:03 2024 +0100

    [turboshaft] Fix inlining of blocks with Phis with a single input
    
    It can happen that we inline a block that has Phis with a single
    input (because its used to be in a loop header that got turned into
    a regular block).
    When DeadCodeElimination sees that such a Phi is unused and that its
    input is also then unused, it will skip the input, meaning that when
    we reach this Phi, we shouldn't look at its input but should instead
    let DeadCodeElimination deal with it (because we would only see
    OpIndex::Invalid() in the MapToNewGraph of the input).
    
    Bug: v8:12783
    Change-Id: Ia6a87916bd88b55e4f185ce9d6446e175806cbe7
    Fixed: v8:14601
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253127
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92109}

commit aa7e3a4fdfa401a76ee0e622dba1d9eddc8993e4
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Jan 31 12:30:48 2024 +0100

    Reland "[wasm] Always clear code_to_log vector"
    
    This is a reland of commit 030cbb8d65fb248e55db5ea434bc133836b219c2.
    The lock-order-inversion is fixed by modifying the respective field
    atomically.
    
    R=thibaudm@chromium.org
    
    Original change's description:
    > [wasm] Always clear code_to_log vector
    >
    > We had the assumption that if there is no task scheduled for logging
    > code, then the code_to_log vector must already be empty. This is not the
    > case if a code logging request is issued to an isolate that is about to
    > shut down. In that case the platform may decide to never execute the
    > foreground task and therefore delete it immediately. This will reset the
    > log_codes_task field but not the code_to_log vector.
    >
    > The solution is to simply always reset the code_to_log vector,
    > independent of the log_codes_task field.
    >
    > R=ahaas@chromium.org
    >
    > Fixed: v8:14561
    > Change-Id: I2b269d5d191bf0c6b80f7f6cdc1382f09d9e102d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253187
    > Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92098}
    
    Change-Id: Ic6e6c02d6193c1ca629efcc86ed0a720542ad343
    Cq-Include-Trybots: luci.v8.try:v8_linux64_tsan_rel
    Cq-Include-Trybots: luci.v8.try:v8_linux64_tsan_isolates_rel
    Cq-Include-Trybots: luci.v8.try:v8_linux64_tsan_dbg
    Fixed: v8:14561
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253133
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92108}

commit 45a9bd0e44372cdcc5aa574a16be89fa0bb621b7
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Jan 30 13:09:54 2024 +0000

    [sandbox] Un-expose TrustedFixedArray
    
    Now that TrustedFixedArrays are located in trusted space and referenced
    through protected pointers, we no longer need to expose them directly to
    untrusted objects and so can change their base class from
    ExposedTrustedObject to TrustedObject. In general, container objects
    (and other generic data structures) should not directly be exposed to
    untrusted objects as their general-purpose nature may weaken the type
    safety guarantees for trusted objects. For example, it is probably not
    safe to type-confuse TrustedFixedArrays from different contexts, but
    this will be possible since both technically have the same type.
    
    Bug: chromium:1473677
    Change-Id: I404b6b50707bff7dd705cf36cde81540d1cfe170
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210474
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92107}

commit e373a3f6831d2043d18875c2c06b939d47245ef0
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Jan 31 13:14:41 2024 +0100

    [turboshaft] Disable automatic inlining during DeadCodeElimination
    
    Bug: v8:12783
    Change-Id: Ib09fea6af466532fd462c75472b9038e21e3c513
    Fixed: chromium:1523407
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249897
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92106}

commit d5acece0c9b89b18716c177d1fcc8f734191e1e2
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Jan 31 11:52:45 2024 +0100

    [fuzztest] Enable the FuzzTest framework in V8's unit tests
    
    This enables FuzzTest (https://github.com/google/fuzztest) in V8
    to write parameterized tests or simple fuzzers for running later
    on ClusterFuzz. For more details, see the internal design doc
    (go/v8-fuzztest).
    
    This enables three modes of compilation and running tests:
      - FuzzTest has no effect, v8_enable_fuzztest=false
      - FuzzTest runs as GTest, v8_enable_fuzztest=true
      - Centipede build, like before with use_centipede=true
    
    On unsupported configurations, FuzzTest is off, while on supported
    ones, FuzzTest runs like GTest, enabling smoke-testing the fuzzers.
    The Centipede mode is used to upload to Clusterfuzz, where fuzz
    tests will run with coverage feedback enabled.
    
    The centipede build uses the v8_fuzztests group target and
    dynamically creates executable wrappers for all fuzz tests during
    compilation. All wrappers will be stored in the fuzztests/
    directory in the build output.
    
    FuzzTest is off when V8 is embedded and won't have any effect on
    the shipped build. However, since it's on on most stand-alone
    configurations, we unconditionally include the fuzz-test
    dependencies. We only conditionally include boringssl, since this
    is only required for the Centipede build.
    
    This CL also adds one demo example of a parameterized test using
    an existing V8 unit test with a test fixture class. We also
    provide two probe-testing fuzz-test puzzles, which will be used
    to demonstrated error discovery on Clusterfuzz.
    
    Bug: chromium:1500944
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_rel
    Cq-Include-Trybots: luci.v8.try:v8_linux64_asan_centipede_compile_dbg
    Change-Id: I27fca07abf523c532cbce3e4dfa1cffbf8f11526
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003626
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#92105}

commit 606956c91c47af3953a48f5d65faf02b890cfd3c
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Jan 29 13:06:00 2024 +0000

    [sandbox] Use protected ptr for Code::deopt_data_or_interpreter_data
    
    Now that all possible values of this field (DeoptimizationData,
    BytecodeArray, or InterpreterData) are located in trusted space, we can
    use a protected pointer to reference them and thereby avoid the pointer
    table indirection on access.
    
    Bug: chromium:1500887
    Change-Id: I853300bd3eb8f21b5934067a8fede41eaee87a8a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210473
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92104}

commit 30ec05d6222e1c49595b57aee373d98b01a02dc7
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Jan 30 16:32:33 2024 +0100

    [maglev] Do not canonicalize smi from holey double by default
    
    We read a holey double only if the feedback has seen a hole.
    Most likely we do not need to convert the result to a smi.
    
    Since smi canonicalization is actually expensive, we avoid it
    by default. If we need to read the value as a Smi, we force
    canonicalization.
    
    Phis will still try to canonicalize.
    
    Bug: v8:7700, v8:14568
    Change-Id: I3bffdfb9e62b2a24eab988d1b704f6f1a4eb06fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250113
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92103}

commit ac015a9b35ee6d9d274f77e37caaa5dfe116dfb2
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Jan 31 08:55:28 2024 +0100

    [maglev] Only handle OOB if we can treat hole as undefined
    
    Bug: v8:7700, v8:1523361
    Change-Id: I2c117fcf1bea350fb8ad3b04e8f91faba5e32c91
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250126
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92102}

commit da2ee835641d3ba4d78e6a4a0704084cbb0e26a3
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Jan 31 10:51:18 2024 +0100

    [turboshaft] Fix Block::HasBackedge for single-block loops
    
    Bug: v8:12783
    Change-Id: I3eb45342bf5ccc9f9a1ddbdee7119a7c7b3da959
    Fixed: chromium:1523287
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253188
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92101}

commit 6866b2076814703f89a62f3565bfc4ab23497bf5
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Jan 31 10:36:29 2024 +0000

    Revert "[wasm] Always clear code_to_log vector"
    
    This reverts commit 030cbb8d65fb248e55db5ea434bc133836b219c2.
    
    Reason for revert: TSAN failure:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20no-concurrent-marking/18654/overview
    
    Original change's description:
    > [wasm] Always clear code_to_log vector
    >
    > We had the assumption that if there is no task scheduled for logging
    > code, then the code_to_log vector must already be empty. This is not the
    > case if a code logging request is issued to an isolate that is about to
    > shut down. In that case the platform may decide to never execute the
    > foreground task and therefore delete it immediately. This will reset the
    > log_codes_task field but not the code_to_log vector.
    >
    > The solution is to simply always reset the code_to_log vector,
    > independent of the log_codes_task field.
    >
    > R=ahaas@chromium.org
    >
    > Fixed: v8:14561
    > Change-Id: I2b269d5d191bf0c6b80f7f6cdc1382f09d9e102d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253187
    > Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92098}
    
    Change-Id: I12463859e1873f919be24d013d0e27083a26d901
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253131
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92100}

commit 1b50df89e4aeb25c26368fb98d8f1da5415b4416
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Jan 31 10:19:06 2024 +0100

    [wasm] Remove checks for gc / typed_funcref features
    
    This is a follow-up to https://crrev.com/c/5199138 .
    
    Bug: v8:14034
    Change-Id: If78be6b875d4aec4a516b0699d148977886a2a32
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5244673
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92099}

commit 030cbb8d65fb248e55db5ea434bc133836b219c2
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Jan 31 09:37:38 2024 +0100

    [wasm] Always clear code_to_log vector
    
    We had the assumption that if there is no task scheduled for logging
    code, then the code_to_log vector must already be empty. This is not the
    case if a code logging request is issued to an isolate that is about to
    shut down. In that case the platform may decide to never execute the
    foreground task and therefore delete it immediately. This will reset the
    log_codes_task field but not the code_to_log vector.
    
    The solution is to simply always reset the code_to_log vector,
    independent of the log_codes_task field.
    
    R=ahaas@chromium.org
    
    Fixed: v8:14561
    Change-Id: I2b269d5d191bf0c6b80f7f6cdc1382f09d9e102d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253187
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92098}

commit 789cf5a6a1e7898812378c4fe5292bcf87734e69
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Jan 31 09:56:01 2024 +0100

    [x64][sandbox] Avoid a move in LoadProtectedPointerField
    
    Bug: chromium:1500887
    Change-Id: Ic25ba00c5ce5a4efa2dac9f60c7e068e94c2d894
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5253129
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92097}

commit e2622f32f451fd35f55fecc1cd52a7e53a15cf94
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Jan 31 16:02:23 2024 +0800

    [maglev] Replace CompareRoot/JumpIf by JumpIfRoot or JumpIfNotRoot
    
    
    And remove duplicate functions CompareRootAndJumpIf.
    
    Bug: v8:7700
    
    Change-Id: I9498bf702e634dbfaabf871a0c6a603b165da5d5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5252429
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92096}

commit 41d82b814c1f438205a8aa136fb3a4dc0f9c8714
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Jan 30 16:09:30 2024 +0100

    [maglev] Support OOB load for Strings
    
    Bug: v8:7700
    Change-Id: I7ff3f5926470862cfaaa45fdd743467e1d5984f9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250227
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92095}

commit 4a474b27175fb280cb3c02f8c3bb21129619725c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 30 20:07:29 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/2f48d64..11baf0c
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/92b51e4..719cd9d
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/b808b1b..10bd39f
    
    Rolling third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/6ad82ea..5e9fac6
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/f56cbe2..9665465
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757416732206493425
    
    Change-Id: Ied5ccf03e208e4d1f4d7ce00d267895d695bcdef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249512
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92094}

commit a11b7de5c6666b2b212c4646f79523ebb10900cb
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 30 08:17:39 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/9ab1bbf..2f48d64
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/45b6f98..92b51e4
    
    Rolling third_party/re2/src: https://chromium.googlesource.com/external/github.com/google/re2/+log/974f44c..f56cbe2
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757462033253423265
    
    Change-Id: Icb0e07ee7d3b55fb95991438dae369101e8fe8a5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5249049
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92093}

commit 7fd7063c22f3daa7b07864562f000a60a735b9b5
Author: Francis McCabe <fgm@chromium.org>
Date:   Fri Jan 26 22:49:25 2024 +0000

    [wasm][type reflection] Implement dynamic flag for wasm type reflection.
    
    Enables origin trial for JSPI.
    
    Bug: v8:7742
    Change-Id: I6745e62406fc17a64845b48380a6099d58e8ea15
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5230821
    Reviewed-by: Ilya Rezvov <irezvov@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92092}

commit f643676d18f86c80c416cbb1c5ed78ad64b674ca
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Jan 30 16:16:28 2024 +0100

    [js_fuzzer] Resolve a known V8 flag contradiction
    
    This prevents js_fuzzer from outputting any pairs of flags marked
    as contradictory. This CL adds one known contradiction which is
    probably the biggest offender. We'll check afterwards if the crash
    stats for such contradictions decline.
    
    See also: https://github.com/google/clusterfuzz/issues/3687
    
    Bug: chromium:1175943
    Change-Id: I32853e137e7622f79cd8abc34cff056c8a48c9d6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250109
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92091}

commit c81a82005f7fd9e102652bafedcafd3b28843eed
Author: Yao Xiao <yaoxia@chromium.org>
Date:   Mon Jan 29 14:37:56 2024 -0500

    [V8] Log errors during Genesis's initialization
    
    Log some errors to help investigate a crash due to failed
    v8::Context::New() (see the bug link).
    
    How this logging will be used:
    In ChromeOS, the standard error will redirected ([1]) to
    /var/log/ui/ui.LATEST, and the crash log file will read from
    ui.LATEST based on the custom filtering logic in
    crash_reporter_logs.conf (with patchset [2] in addition).
    
    [1] https://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/platform2/login_manager/init/upstart/ui.conf;l=69-71;drc=18fee2ae49b47fe9a4a3b2516546974e7e0968c8
    [2] https://crrev.com/c/chromiumos/platform2/+/5238468
    
    Bug: chromium:1501387
    Change-Id: I30b747df8ac98d21cf27761667a08ebc32182d44
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237774
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Yao Xiao <yaoxia@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92090}

commit 53bc02ca122940e361eb858a124b598eb984be71
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Jan 30 16:06:40 2024 +0100

    [turboshaft][arm64] Relax DCHECK in instruction-selector-arm64
    
    Bug: v8:12783, chromium:1523233
    Change-Id: I93e125c9f288670cbb70ea058eee5220c45f949a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5250110
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92089}

commit d4582c0ab79c4ec3fa17d7bb6c7fc3b63e7b9ae9
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Jan 30 15:33:45 2024 +0100

    [maglev] Consider HandleHoles when loading from holey doubles arrays
    
    Bug: v8:7700, v8:14568
    Change-Id: I6dc2aca57c4cb7fbfd3dbaf65a2d6b61cdc5ee10
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5248828
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92088}

commit 04b777ed4ff4fadb22061eee00467ecb6ee47b52
Author: Marja Hölttä <marja@chromium.org>
Date:   Mon Jan 29 15:29:39 2024 +0100

    [maglev & arm] Make sure we have enough scratch registers in AssertFeedbackVector
    
    Feedback vector instance type will soon increase so that it won't fit
    into the instruction any more. Thus, MacroAssembler::CompareObjectType
    needs an additional scratch register.
    
    Change-Id: I077a99f9fe3d7745fdbbe90cb7954443f4340b36
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5244806
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92087}

commit cd9cbfbbeb2e69f48d4123bcf8c2d5a3fb08f50e
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Jan 25 11:34:15 2024 +0100

    Reland "[maglev] Enable CSE"
    
    This is a reland of commit 3d079338333c4e8fdaf0a35441888be34f62abf2
    
    Fixes in crrev.com/c/5245405 and crrev.com/c/5244669
    
    Original change's description:
    > [maglev] Enable CSE
    >
    > Bug: v8:7700
    > Change-Id: I21bf0116506772ec5ac442a5e7649fc36af0845b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5215646
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92001}
    
    Bug: v8:7700
    Change-Id: Ie51550bf8eb7e3f9b044baf56febdba888f394bd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245611
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92086}

commit f04e828b78f827641690404736477273426441fd
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Jan 30 11:27:21 2024 +0100

    [maglev] Fix NaN handling in BuildCheckValue
    
    The NaN handling introduced in crrev.com/c/5244669 was not correct. To
    check that the input is NaN we can't compare against `value()`, as
    this is guaranteed to set the `ConditionForNaN()`.
    
    Bug: v8:7700
    Change-Id: I3d7f151b3dd7574a624d28888f14af4b5360ab46
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245691
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92085}

commit 23889e320538024bc00c9613b9ec9c277ad4309e
Author: Stephen Roettger <sroettger@google.com>
Date:   Tue Jan 30 11:26:20 2024 +0100

    [pku] don't pkey tag the thread isolation data
    
    We're pkey-tagging the trusted thread isolation data to make sure it
    can't be overwritten by an attacker. This can lead to problems if
    there's a thread that doesn't have read access to the pkey.
    What we really want is to make the mapping read-only and to seal it,
    which we can use the mseal syscall for in the future.
    
    Change-Id: Ibcd80181f10280b691955cb2afaa21bfad8c4f2d
    Bug: v8:13355, chromium:1521358, chromium:1522236
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245692
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#92084}

commit 9c90411fb6bd2624674e58034854de0b2b6d1e3b
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Jan 30 10:43:11 2024 +0100

    [turboshaft] Maglev-to-turboshaft: handle more Smi binops
    
    Bug: v8:12783, v8:14581
    Change-Id: I30f2941a9513e0db0dce8535e4d5699d6027b5c0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224221
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92083}

commit c246537e422b71d7d9b54014701581105a5fc58e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Jan 30 11:03:37 2024 +0100

    [ic] Always handle holes when the elements kind is HOLEY_ELEMENTS
    
    Always handle holes when the elements kind is HOLEY_ELEMENTS, since the
    optimizer compilers can not benefit from this information to narrow the
    type. That is, the load type will always just be a generic tagged value.
    This avoid an IC miss if we see a hole.
    
    Bug: v8:14568
    Change-Id: I807ec83fc452012c302ed2257cb9e0befde78e17
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245610
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92082}

commit 2414b1c31a87d40de79acfcd2a3b0c068f27442e
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Jan 30 10:51:02 2024 +0100

    [maglev] CSE: clear available expressions for exception handlers
    
    Available expressions are not preserved across exceptions.
    
    Fixed: chromium:1521770, chromium:1521643
    Change-Id: Ieae7ef9ed685ef2f682083ff3cc279e9e11395cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245405
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92081}

commit 7330a562767c51001f8b2b3c679c825a02742c5c
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Jan 30 10:05:34 2024 +0100

    [maglev] Support OOB keyed load on JSArrays and JSObjects
    
    Bug: v8:7700
    Change-Id: I869841247d7db8dc216f44860ca73666cd33a45c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237469
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92080}

commit 7b250f3cd41ddcdbac21f3ccd9a9b80de90b1729
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Jan 30 09:59:07 2024 +0100

    [turboshaft] Maglev-to-turboshaft: handle some float64 binops
    
    Bug: v8:12783, v8:14581
    Change-Id: I952f5e8c3585253e3803f71aca75f8d193b790c1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5222520
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92079}

commit 83de3e7af8fbb67a047c0bbbe1c2001822795f9e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Jan 25 10:43:56 2024 +0100

    [turbofan] Use ChangeFloat64HoleToTagged on JSCall reducers
    
    Fixes: v8:7409
    Bug: v8:14568
    Change-Id: Icb35e239e9f51204ede50dc3fd9d1c1397de5dad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233717
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92078}

commit 0cd74a5241eb3cd8591bab8ab96d2a1930c70b49
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Jan 30 08:20:38 2024 +0000

    Fix handling of deopt data in TraceMarkForDeoptimization
    
    Now that DeoptimizationData lives in trusted space, we should not
    compare these objects with main-cage objects, in particular roots. In
    this case, the comparison is no longer necessary as we don't use the
    empty fixed array constant anymore.
    
    Bug: v8:14599
    Change-Id: I7016d8107429ed6d1751a85b5b1eee382dfd4958
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245628
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92077}

commit 602d28c60ada9faf0226e4d3bca45e8af69a11c5
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Jan 29 08:05:35 2024 +0100

    Add re2 to dependencies for FuzzTest
    
    This prepares the FuzzTest integration, which depends on re2. We
    land this in a separate CL for a simpler and less error-prone
    roll-out.
    
    The Chrome-side files are forked as per suggestion in:
    https://chromium-review.googlesource.com/c/chromium/src/+/5033300/comments/65b414ac_409f7a07
    
    All files are 1:1 copies from Chromium with the following changes:
    README.chromium -> README.v8
    Security Critical: yes -> no
    Shipped: yes -> no
    In BUILD.gn, dropped reference to libfuzzer that doesn't exist in
    V8.
    
    Bug: chromium:1500944
    Change-Id: Id960d00e42687ea9f0502c57ed09926d3f17dde7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210751
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Hannes Payer <hpayer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92076}

commit 422504f0c6507ae6e9d5259a870f1f1e0710668f
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Jan 29 17:37:41 2024 +0100

    [maglev] NaN support in BuildCheckValue
    
    Support for checking identity of NaN's with BuildCheckValue.
    
    Bug: v8:7700
    Change-Id: I06f9ee436702eef627bb2080a4b9e8a42767411b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5244669
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92075}

commit b5e273892f3312d9215aa69e3cf6c5ba2668b839
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Jan 29 18:03:42 2024 +0100

    [turboshaft] isel: avoid Gap Move for Smi bitcasts
    
    As mentioned in the TODO in the code, the gap move is more correct,
    but it's worse for performance. Fixing the register allocator to fix
    the performance regression will likely be a lot of work, so I'm
    partially reverting CL https://crrev.com/c/5237468 until this is done.
    
    Bug: v8:12783
    Change-Id: Ib479effcf1fe9a80ddf728a515507836fb04c3f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5246025
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92074}

commit 2159da0c4eabb171cf5fdc436188cb585970480e
Author: Peter Boström <pbos@chromium.org>
Date:   Mon Jan 29 11:45:19 2024 -0800

    Use std::optional for v8::base::Optional
    
    This file is no longer present in upstream base/optional.h which uses
    std::optional directly.
    
    Bug: chromium:1202909
    Change-Id: I5c73d91338ab7a593f33bc2837e3b6588aef77bc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5246687
    Auto-Submit: Peter Boström <pbos@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92073}

commit 6ea41078b625da4b13a4bb6279360a8a2ed9d31e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Jan 29 20:03:16 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/ddaf87b..9ab1bbf
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/f448d5b..45b6f98
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/1b57e24..b808b1b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757507331660498465
    
    Change-Id: I3b4da2723d2a00b8cf08df4a09ec937b5a5e1e62
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5246670
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92072}

commit 1497b4f451a1b8fccaa7fdc00315740b86f509fc
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon Jan 29 19:16:37 2024 +0100

    [wasm] Avoid wrapping of the module's start function
    
    ... in case it's an imported JSFunction. This is simpler than creating
    a wrapper and setting its context. This also avoids breaking the
    invariant about native context-specific maps:
      function->map->meta_map->native_context == function->native_context.
    
    Drive-by: module's start function is a one-shot one, so we can clear
    it once it's called.
    
    Bug: chromium:1522153
    Change-Id: Ic86a793ada04e4c9efa812378188a6797632a95f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245552
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92071}

commit 2084c9998e9a4073e9d8efa599435a6a14d5d433
Author: Andrey Kosyakov <caseq@chromium.org>
Date:   Sun Jan 28 21:19:48 2024 -0800

    Ensure prototype is appropriate for creation context in DictionaryTemplateInfo::NewInstance()
    
    Bug: chromium:1499222
    Change-Id: I42e7a201035e274c1d5757f8db5e5544d5bb81b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5241921
    Commit-Queue: Andrey Kosyakov <caseq@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92070}

commit 405a5baa6d870b3c676a4c794bc7c23df550cce1
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Jan 29 17:31:50 2024 +0100

    [turboshaft] Remove recursion from BranchElimination
    
    Bug: v8:12783
    Change-Id: I2bc94bdafbcd0f27a7484a4c4b327b3a08b4416f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210480
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92069}

commit 6e912aae2df9a5e627e9a42f248d994782842353
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Jan 29 08:02:36 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/68c5113..1b57e24
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/63c0cec..646b7f5
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757552630543234417
    
    Change-Id: Ic0cb38b18fb2d4b4d503f5e24ac2196e136748bc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5245386
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92068}

commit 8c2eadd3db62a2d37f0ba7dd125ff964656c7778
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Jan 29 15:47:04 2024 +0100

    [wasm] Remove feature flags for wasm-gc
    
    The following feature flags are removed:
      --experimental-wasm-gc
      --experimental-wasm-typed-funcref
      --experimental-wasm-js-inlining
    
    Their usages in tests have been removed in
    https://crrev.com/c/5197694.
    The chromium changes to remove the OT are in
    https://crrev.com/c/5198990.
    
    Bug: v8:14034
    Change-Id: Ic434a8dead0ab0e646091f0c75c7f3e25b8d4bb2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5199138
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92067}

commit 49ca1765466e89b2ab432a7cb5725d012283ef66
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Jan 29 15:38:46 2024 +0100

    [maglev] Fix overzealous load mode DCHECK
    
    Remove LoadModeInBounds: it can be confusing, due to kHandleHoles
    also be in bounds.
    
    Change all LoadModeInBounds for the negation of handles OOB.
    
    Bug: v8:7700, chromium:1521864
    Change-Id: I7e15eeb036161af705baa33b7aca0ae04cccf1ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5244672
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92066}

commit 65861d096e276c408f823c9088565d9f322d1764
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Jan 25 21:42:44 2024 +0100

    [wasm][relaxed-simd] LaneSelect: Make TF/Liftoff consistent
    
    This ports crrev.com/c/4035091 to Liftoff: ia32 and x64 can use
    `blendvps` and `blendvpd` for 32/64 bit wide lane selection, as
    opposed to using bytewise selection regardless of lane width.
    Turbofan/Turboshaft do this already; this patch brings the same
    logic to Liftoff, ensuring that functions compute the same results
    before and after optimization.
    
    Fixed: chromium:1516878
    Change-Id: Iff69603954661cf2701fe48805edc3e41dc2307c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239025
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92065}

commit fdb8ec4d0318a4af4bcd28edf5613465f032f303
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Jan 29 14:10:22 2024 +0100

    [ic] Enable holey double arrays to set/check AllowReadingHole bit
    
    ... additionally modify keyed access optimization to consider
    the bit.
    
    Bug: v8:14568, chromium:1522335
    Change-Id: I72286f79e5feb15e61c7e3d5e1687dec7e9e2425
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5242825
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92064}

commit 14303a5e442a06af9fefab3be817aac398d0ee08
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Mon Jan 29 12:14:40 2024 +0100

    [test][handles] Fix unified heap unit tests for direct locals
    
    - UnifiedHeapTest and YoungUnifiedHeapTest are subclasses of
      TestWithHeapInternalsAndContext and they already install an external
      handle scope and context.
    - Local handles should not be kept around during a stackless GC, unless
      the referenced objects are independently retained.
    - Code snippets assuming that handles are always indirect are revised.
    
    Bug: v8:13270
    Change-Id: Ic6928bc2c01967a4d0a21cca50eeff41f6ae2196
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5242824
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92063}

commit 94f819f39ee5b698e0b82cbcefb2d6cdae640913
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Mon Jan 29 11:43:53 2024 +0100

    [test][handles] Fix some cctests for direct locals
    
    - The DisableConservativeStackScanningScopeForTesting is narrowed as
      much as possible and comments are added to explain why it is needed.
    - Local handles, esp. Local<Context>, should not be kept around during
      a stackless GC, unless the referenced objects are independently
      retained. LocalContext in cctests provides a good replacement in some
      cases, as it contains a persistent handle to the context.
    - In one cctest, several threads were entering the same isolate
      simultaneously. In another one, threads were using an isolate without
      entering.
    
    Bug: v8:13270
    Change-Id: I80c6407cbbb6c6b6e470058d01dfeb629b493103
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5244805
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92062}

commit dbae2c04157dc4b3a6765a1b2fe551aa7f6c7d97
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Jan 29 13:12:58 2024 +0000

    [sandbox] Introduce CSA_SBXCHECK and use it to validate generator state
    
    When resuming a generator function, we have to assume that the offset
    into the jump table is untrusted. With this CL, we now validate it using
    the equivalent of a SBXCHECK in CSA.
    
    Bug: chromium:1515075
    Change-Id: Ic65ca86319c773f510bd5521eed91ef5a4159c32
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5240369
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92061}

commit 1336b3a085f908b24171411f40ab561aca6050c3
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Jan 29 11:34:31 2024 +0800

    [loong64][mips64][heap] Prepare splitting of MemoryChunk Metadata and Header
    
    Port commit 165268cc8d2ff34afb0ec0e81f938561958fa786
    
    Change-Id: If5ad49c8022ac26d30c284251a21e409b90d711c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239390
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#92060}

commit b2d7a7d5c1de8a985a828b41b9df3dc2fd169ffe
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Jan 29 11:41:36 2024 +0000

    [sandbox] Move DeoptimizationData out of the sandbox
    
    Similar to Code objects themselves, their deoptimization data is also
    considered trusted and should therefore be located in trusted space.
    
    Bug: chromium:1500887
    Change-Id: I8b906b419614c9938eaab23f78257de82b6541cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210472
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92059}

commit 25aeff681f470969af13be2cdbbf1318c7777864
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Jan 29 12:26:17 2024 +0100

    [wasm][turboshaft] Fix reachability tracking in WasmGCTypeReducer
    
    During loop revisits, previously unreachable blocks can become
    reachable again.
    
    Fixed: chromium:1514072
    Change-Id: Icb8b5f99e7257b5c503453d9334a6bf79857fabe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5244649
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92058}

commit 99fc6c9b4d6d5ef2684a4e0918c0842a71752deb
Author: Stephen Roettger <sroettger@google.com>
Date:   Fri Jan 26 14:03:15 2024 +0100

    [heap] fix some accesses to MemChunk vs. MemChunkHeaders
    
    At the moment, MemoryChunk and MemoryChunkHeader are at the same
    address, making this a no-op. But the distinction will matter once we
    split the MemoryChunk metadata out of the header.
    
    Change-Id: I40e0607dfa2f5b3eeec726d506cf88cef381ba48
    Bug: v8:13355, chromium:1338512
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239027
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92057}

commit 7c42077e0a1163d6e6c808a70ef3dfc113137181
Author: Alexey Fedorov <alexey.fedorov@lge.com>
Date:   Wed Jan 24 16:41:24 2024 +0300

    Fix use after free in mksnapshot
    
    SnapshotCreatorImpl owns the allocator and set it for the isolate.
    If it doesn't own the isolate, the allocator is destroyed before
    calling Isolate::Dispose.
    If the isolate uses the allocator during Dispose crash occurs.
    
    This CL refactors mksnapshot to use Isolate::CreateParams and
    SnapshotCreator.
    
    Bug: v8:14503
    Change-Id: Ic6a3d67a5e0d272babc1ced08c6a14bbd054536e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095098
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92056}

commit 9ad44615e82a3d2289d9803fb792d5e30ac9d203
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Jan 29 09:08:50 2024 +0000

    [sandbox] Move InterpreterData out of the sandbox
    
    With this CL, InterpreterData objects are now allocated in trusted
    space, outside of the sandbox.
    
    Bug: chromium:1502461
    Change-Id: I5a520738ede894645445f229f9137d986717e6cf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054641
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92055}

commit c878c6816066178b4801d913f2ae108ad11c0482
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Jan 29 11:30:16 2024 +0800

    [loong64][mips64][tagged-ptr] Make HeapNumber & BigInt layout classes
    
    Port commit 784eb5e6ff2faa412723a65aa11e1badfdb75262
    
    Change-Id: I06428b1d710f68fe4d72846aa80895128dd1222c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239389
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#92054}

commit 564d886c6e8652f081c1d37f0960bf2217b8079b
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Jan 29 08:15:02 2024 +0100

    [map] Fix typo in TransitionRootMapToPrototypeForNewObject DCHECK
    
    The dcheck should guard that the base map finishes slack tracking first.
    In other words the construction counter must be lower.
    
    Drive-By: Upgrade it to a CHECK
    
    Fixed: v8:1522393
    Change-Id: If939ea26df293e50d18674db181c2c2740413da1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239035
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92053}

commit 3f87f020bf944ef8cd39bf5ffa793ee5af9d2b30
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Jan 29 11:31:08 2024 +0100

    [test][compiler] Fix compilation error on Android arm64 bot
    
    Fix for
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Android%20Arm64%20-%20builder/56497/overview
    
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Change-Id: I3f8cf034601a97ddaa2eed1c3c754db12d4ddf3a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5244647
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92052}

commit 9cdd7badf29bccb842f0e2daf9ba0173a2a426a4
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Jan 29 10:34:24 2024 +0100

    [turboshaft] Optimize int32 truncated loads in CSA pipeline
    
    This CL adds an additional optimization to LateLoadEliminationReducer
    that turns the pattern
    
      TruncateInt64ToInt32(
          BitcastTaggedToWordPtrForTagAndSmiBits(Load[Tagged]))
    
    into a simple Load[Int32] if there are no uses of the load that do not
    do such a truncation.
    
    Bug: v8:12783
    Change-Id: I59a5c7952030a0d0b0dc2cb07cf4a07dcfd0ea2f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5225041
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92051}

commit 62c2caf4ad25249d6a19635d1ec27ca1541272d9
Author: jiepan <jie.pan@intel.com>
Date:   Fri Jan 26 15:58:07 2024 +0800

    [revec][wasm][turboshaft] Port wasm revectorization phase to turboshaft, part 2
    
    Start from seed, build a SLP tree recursively.
    The Operations to Blocks mapping is authored by Darius Mercadier
    (https://chromium-review.googlesource.com/c/v8/v8/+/3784596)
    
    Bug: v8:12716
    Change-Id: I0700be0e2c990ffb00014a02cdce6c3a64b7282e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5203607
    Commit-Queue: Jie Pan <jie.pan@intel.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92050}

commit 93b1d15b620bdaa9b0d183401249242cf152138f
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Jan 29 11:38:19 2024 +0800

    [loong64][turboshaft] Port Simd128ReverseBytes
    
    Port commit 37d2127aa903dc65d47f49f3818aae095dd68fcb
    
    Change-Id: I0a6c28af075fbf0bf0f5d0a82fab61aac8fc88a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239391
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#92049}

commit 02b83630cb526c7ddd1fcab7ca265ec81b2301e5
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Jan 28 20:18:29 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/31bf504..f448d5b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757597929104932833
    
    Change-Id: Ice2ac746df5c46b8b6a67f29976bd4761afbfd34
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239179
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92048}

commit bbf40ddaa411c503f758e0ca64b46c666a6b58c3
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Jan 27 20:17:17 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/1ea5466..ddaf87b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757688525119415969
    
    Change-Id: I7eeb52e87d566af552ff28dfab956181a905cbcd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5242102
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92047}

commit 8f441f7209562ef5294e0f19fc700f4d04b10b92
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Jan 27 08:06:18 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/de33c7d..31bf504
    
    Rolling third_party/fuchsia-sdk/sdk: version:17.20240120.1.1..version:18.20240127.1.1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757733824132845361
    
    Change-Id: I8e1f76f7777855cd1bd7c7dc93b3b5e1f07fe315
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5242895
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92046}

commit 360d901fe7d76ad904c40f9ff13eddac9ecb6fe2
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Jan 26 20:17:52 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/875c2b8..1ea5466
    
    Rolling buildtools/linux64: git_revision:fc722252439ea3576c241773f5ee14eb8470e2ef..git_revision:a2e2717ea670249a34b0de4b3e54f268d320bdfa
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/db0de23..de33c7d
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/2bc81cd..68c5113
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757779123323969089
    
    Change-Id: Ia48ed03b0e7ae8e072882864fca4214b62c0fe04
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239138
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92045}

commit ae5a4db8ad86c817f80856901ea121829f8b5184
Author: Shu-yu Guo <syg@chromium.org>
Date:   Fri Jan 26 14:20:40 2024 -0800

    [import-attributes] Deprecate 'assert' for removal in 12.6
    
    See https://groups.google.com/a/chromium.org/g/blink-dev/c/ZHvzLaJZRvo/m/FgNDBjrtBQAJ
    
    Bug: v8:10958
    Change-Id: I4d21c9f7aad1024b198b4a1cdfb4792a011da464
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055681
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92044}

commit 1f0d9cfee99c6b3bc24efdb050f1f416f311d430
Author: Nicolò Ribaudo <nribaudo@igalia.com>
Date:   Fri Jan 26 11:35:42 2024 +0100

    [import-attributes] Enable 'with' syntax by default
    
    See https://groups.google.com/u/2/a/chromium.org/g/blink-dev/c/at-bKcdakOo/m/I4Y74um1AAAJ
    
    Bug: v8:13856
    Change-Id: Ifc5af7f33aabfa0a2d5cd6c8381561848adbe392
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5205091
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Nicolò Ribaudo <nribaudo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#92043}

commit 2a10d927f8fd8a6c3e30799cc9a77fc37e2797d9
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 23 02:58:57 2024 -0800

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/a1ba783c..97a2e443
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758118714331142689
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: I874e333e9d528fa2e8d3e8c199f9c4e887da1a0f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224916
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92042}

commit 291821ff44dfc796528431796b6fd56d451b5b72
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Fri Jan 26 19:56:53 2024 +0100

    [test][handles] Fix some tests for direct locals
    
    - The DisableConservativeStackScanningScopeForTesting is narrowed as
      much as possible and comments are added to explain why it is needed.
    - Code snippets assuming that handles are always indirect are revised.
    - One test that requires heap compaction is disabled when the
      compact_with_stack flag is not enabled.
    
    Bug: v8:13270
    Change-Id: I5a58f2ffe2ef19bf642bb0246704c39da9e0d611
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5240367
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92041}

commit 0b8fdb94a155aae25138069bad32c9510766ae16
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Jan 26 15:35:00 2024 +0100

    [json-parser] Force inlining of JSDataObjectBuilder
    
    ... to recover regressions on non-PGO builds.
    
    Bug: chromium:1522130
    Change-Id: I6fa634934f44278407385f8445012f51e38a5b70
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5238369
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92040}

commit 0089b69a17f501f78a8b18992e32265e3dc90682
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Jan 26 08:06:19 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/0b7a019..875c2b8
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/94fcea4..db0de23
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/a46df1f..f48a08b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757824420475056593
    
    Change-Id: Ib0129894b510a296b21df6c6ce3082e2402a3ecb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5241098
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92039}

commit 098127338d8bd05d260d10c146208fc87ddf6cfe
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Jan 26 09:46:02 2024 +0000

    [sandbox] Turn Code::deopt_data_or_interpreter_data into a trusted pointer
    
    This (intermediate) step is necessary for moving InterpreterData and
    DeoptimizationData objects out of the sandbox and into trusted space.
    Once that migration is completed, this field can be changed to a
    protected pointer instead to avoid the pointer table indirection.
    
    Bug: chromium:1500887
    Change-Id: I44057c55f5eb86e9de870f8c464ae9cf50659bd7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210471
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92038}

commit 74d76c5252a77eac5faa2e252d5bb4f8d18704ae
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Jan 24 16:46:00 2024 +0100

    [turbofan][turboshaft] Create ChangeFloat64HoleToTagged
    
    TF deopts when loading a hole (as sNaN) from a holey double array
    and its use is not truncating.
    
    This fixes the issue: if its use is not truncating, we check for
    the hole and convert it to undefined, otherwise we allocate a
    heap number.
    
    Bug: v8:14568
    Change-Id: Iaa35a8c035f85a4cc60c585e0d7be3c80375d518
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5234429
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92037}

commit 2145678fbde71793c37c8a5ca991b07902828e77
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Jan 25 14:05:44 2024 +0100

    [handles] Fix PersistentValueMapBase for direct locals
    
    This CL fixes some issues occuring with v8_enable_direct_local=true,
    related to the interpretation of PersistentContainerValue as an indirect
    handle. It also fixes a related test which could fail with conservative
    stack scanning.
    
    Bug: v8:13270
    Change-Id: I04f22b41e511113ec7abde78d55eb784df53190a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237265
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92036}

commit 01cbc15dfc6172a7ed80d4653995984cb368eed2
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Jan 26 14:48:12 2024 +0100

    [turboshaft] Fix a few linter warnings
    
    Bug: v8:12783
    Change-Id: Ib915f89599207e260597e341e055d888b1e8671b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5238367
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92035}

commit 7276abbe09fbe4d7ecff3ea48b3e8bcaae677d2d
Author: Nicolò Ribaudo <nribaudo@igalia.com>
Date:   Fri Jan 26 12:57:15 2024 +0100

    [import-attributes] Rename "assertions" to "attributes" in internal code
    
    This patch renames import occurrences of import assertions in internal
    code. Regardless of what will happen to the old keyword, these
    "parameters" are now called assertions and using the new name will make
    it easier for who in a few years will read the code without being aware
    of the history of the proposal.
    
    Variables representing the second parameter of a dynamic import call
    have been renamed to "import options" rather than "import attributes",
    since the attributes are the `with`/`assert` property of that object.
    
    This patch still leaves the old name in public code:
    - V8 API:
      - `ModuleRequest::GetImportAssertions`
      - `HostImportModuleDynamicallyWithImportAssertionsCallback`
    - Error messages
    
    Bug: v8:13856
    Change-Id: Ia2ea13adbfdb65c0a724ef0eab38d1057440e6c2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5191569
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Nicolò Ribaudo <nribaudo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#92034}

commit 23d84c891a0cb50a4fd0a8a6d9002d6cb936c5d3
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Jan 25 13:53:08 2024 +0100

    [api][handles] Fix calls for direct locals
    
    The arguments to various types of calls come as an array of
    v8::Local<v8::Value>. They are internally converted to an array of
    i::Handle<i::Object>. With v8_enable_direct_local=true, which requires
    conservative stack scanning, locals are just direct pointers to objects.
    This CL fixes the API's implementation to correctly perform this
    conversion in this case. It also fixes a memory leak that existed in
    the direct locals build.
    
    Bug: v8:13270
    Change-Id: Ia556de3832f15f281ad39780b0bb4b2baae2bc4a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5236965
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92033}

commit 5b387e56f0d437b5c5504ce4c074d8db660711de
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Jan 26 11:21:07 2024 +0100

    [compiler] Leave ReferenceMap initially empty
    
    The first argument is not the capacity but the initial size. So this
    pushes 8 InstructionOperands with the default ctor. We never free
    those entries later but just append to the end. The initial values
    are not incorrect but are just ignored.
    
    Change-Id: Id4ee83448a197df7eff093faa11af9a82f174de6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239028
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92032}

commit b8290d158dcf44e14f28d811b45201d29ded2bd5
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Jan 25 15:25:32 2024 +0100

    [handles] Fix issues with direct locals
    
    This CL fixes a number of issues related to the interpretation of
    local handles as indirect pointers. With v8_enable_direct_local=true
    (which requires conservative stack scanning), local handles are simply
    direct pointers.
    
    Bug: v8:13270
    Change-Id: I1834bfeaaf67ca9e6be46f4482b256750b49b9bc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237470
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92031}

commit a6f314dfc3c08b500e914fd1ba422ec015e6a9c7
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri Jan 26 13:19:47 2024 +0100

    [map] Let proto transition maps participate in slack tracking
    
    When we use proto transitions as initial maps we must ensure that both
    ends of the transition stay in sync with regards to slack tracking
    state.
    
    Bug: v8:13978, v8:1521786
    
    Change-Id: Idcade08ffc456ee653c10bf8fbe4c136876f8734
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239030
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92030}

commit c19c0fc36597ebc2938ee3f5dd01a832cea78793
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Jan 26 12:27:25 2024 +0100

    [wasm-imported-strings] Mark as "staged"
    
    Reflecting the fact that there's an active Origin Trial.
    
    Bug: v8:14179
    Change-Id: I2fbc8aeaef7266b21f5699aab0cbac7f1b87c8b4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239029
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92029}

commit 72cb6e3669e5355074ff0f19ef6c7b43589a2312
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Jan 25 10:45:30 2024 +0100

    [json-parser] Fix dictionary DCHECK
    
    Fixed: chromium:1521582
    Change-Id: I58c519021e01bd3fc2a3e43b95f66ffc0432f457
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233886
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92028}

commit 55b90677b9f19fa23d5d2bdeb8d92175fba8448f
Author: Eric Leese <leese@chromium.org>
Date:   Fri Jan 26 10:22:29 2024 +0100

    Async generators should rethrow when yielding a rejected promise
    
    This changes the behavior of yield in an async generator when it
    yields a rejected promise to use the rethrow instruction instead
    of the throw instruction. This prevents the debugger from breaking
    on the exception twice.
    
    Fixed: chromium:1406421
    Change-Id: I2d340f06674594b9cfdaa9371807c96a1143ea08
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237472
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92027}

commit 5bfbb4b52c8be838810c5325ca54789fe9a6ad58
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Jan 26 09:19:24 2024 +0100

    [heap] Allow taking snapshot on a specific GC
    
    Adds --heap-snapshot-on-gc=<num> that can be used to take a heap
    snapshot on a certain full GC. This is useful for short to medium long
    running workloads to allow inspecting heap state at a specific time.
    Usually this will involve running a workload beforehand and then
    determining which GC is the most interesting state to inspect live
    memory.
    
    Change-Id: Ic5c8aecf79456d735be5f08af8106eb8264c9538
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5234755
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92026}

commit 998fa5c5ce8e0865e704f83fe1a22ebf1e4f29d8
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Jan 25 14:54:46 2024 -0500

    [turboshaft][ppc] Port InstructionSelector part 2
    
    Bug: v8:12783
    Change-Id: I3a95b2cb6a1c5ecb04a23f080925a3c8686aba99
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237766
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92025}

commit 37d2127aa903dc65d47f49f3818aae095dd68fcb
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Jan 25 10:05:29 2024 -0500

    [turboshaft] port Simd128ReverseBytes
    
    Bug: v8:12783
    Change-Id: Ib1b14b94ce649c29f3090350638670f15a219587
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237286
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92024}

commit c4a45d99e8cffa807a82d4b94c93ee2a7a37d4fa
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Jan 25 15:21:16 2024 +0100

    [turboshaft] Propagate more precise type after Smi bitcasts
    
    In the instruction selection, we used to use EmitIdentity when
    visiting a TaggedBitcast from Smi to Word32, which leads to a rename,
    which means that the type of the current vreg is ignored (because it's
    a renaming), and only the type of the input vreg is used by subsequent
    instructions (and the register allocator).
    
    Now, we instead emit a GapMove in this situation, so that users see
    the current register with its more precise type (Word32) rather than
    the type of its input (Tagged or Compressed).
    
    Drive-by: avoid decompressing loads whose output is only used for
    a Smi bitcast (since the upper half will be ignored anyways).
    
    Bug: v8:12783
    Change-Id: I601be58d24f84a811bc473b440bd969738e81ed0
    Fixed: chromium:1520774
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237468
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92023}

commit 60ad1f699408f7009395a69c4a922ba557f80179
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Jan 25 13:33:37 2024 +0000

    [sandbox] Make Torque aware of protected pointer fields
    
    This CL adds a ProtectedPointer type to torque which can be used to
    define object fields. This is mostly only for better readability: torque
    will not generate any accessors by itself, these have to be defined in
    C++ using the existing field accessor macros. However, it will prevent
    torque from generating broken accessors.
    
    With this change, torque will now (correctly) no longer allow placing
    protected pointer fields inside the strong fields section. This
    therefore requires reordering some fields in BytecodeArray.
    
    Bug: chromium:1505752
    Change-Id: I9fa1975647aca884e710f8e4bcf4c61ba505e560
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237266
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92022}

commit e0acb54327b99b4a1ed6a9848a10debdc1711c31
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Jan 26 10:08:39 2024 +0100

    [turboshaft] Enable MachineOptimization during MachineLowering
    
    Having the MachineOptimizationReducer run during MachineLowering makes
    the next optimization phase better because it sees a more optimized
    graph. This is in particular useful for LateLoadELimination, but also
    for StoreStoreElimination and BranchElimination.
    
    This change also reduces V8 binary size by 670 KB on x64.
    
    Bug: v8:12783
    Change-Id: Idb5a2e75f5d9eb187b9b83ab6f81d82ab4941325
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5239026
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92021}

commit a5e22070afecdb18db45872ef0eb93947085576d
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Jan 25 10:59:03 2024 +0100

    [turboshaft] Avoid putting FrameState constant bitcast input in register
    
    When constants should be used as Smi as FrameState input, we used to
    convert Int32Constant to tagged by using a BitcastWordToTagged, but a
    recent CL (https://crrev.com/c/5083021) made that more precise,
    generating a BitcastWordToTaggedSigned instead.
    
    When the Instruction Selector visits a BitcastWordToTagged, it emits a
    Nop with a DefineSameAsFirst (which seems to be some kind of
    GapMove). However, when it visits BitcastWordToTaggedSmi, it doesn't
    emit anything and just does a renaming.
    
    For a reason that's not clear to me, the register allocator does not
    want to spill registers holding constants that come from renamings,
    but is happy to spill registers holding constants coming from
    GapMoves.
    
    This lead to the register allocator running out of registers when
    allocating registers for FrameState inputs, because it was using one
    register per integer constant input and didn't want to spill any of
    them.
    
    This CL fixes the issue by adding a special case when generating frame
    states in the Instruction Selector: BitcastWordToTaggedSigned with
    Word32 constant inputs now lead to using a Constant rather than using
    the BitcastWordToTaggedSigned itself.
    
    Bug: v8:12783
    Change-Id: Ic3be55ba2c386bd0254c241ac166e97269f39cd8
    Fixed: chromium:1520697
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233669
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92020}

commit 4e4d85724384b9a81e241214739304882bab10c2
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Jan 25 20:09:59 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools/reclient: re_client_version:0.126.0.4aaef37-gomaip..re_client_version:0.128.1.7c74998-gomaip
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/d7ee2f7..94fcea4
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757869719341484849
    
    Change-Id: Ia54af1c57bcc9b2ad27b4939b6e9c98ea387fa59
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5240005
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92019}

commit cfb41f71cbeb0d275fba3906136d6dd0c0364283
Author: Seokho Song <seokho@chromium.org>
Date:   Thu Jan 25 22:56:09 2024 +0900

    Throw a RangeError when the size < 0 for GetSetRecord(obj)
    
    According to the stage 3 proposal [1], GetSetRecord(obj) should throw a RangeError when intSize < 0.
    
    To spec conformance, Implements throw a RangeError as spec mentioned.
    
    [1] https://tc39.es/proposal-set-methods/#sec-getsetrecord
    
    Bug: v8:14559
    Change-Id: I2b83cc8bdb5f19d115a5d65aba0657d82d939763
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224144
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Seokho Song <seokho@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92018}

commit 50630dd93d723e292b38f9d3d278875012d7824e
Author: Francis McCabe <fgm@chromium.org>
Date:   Wed Jan 24 22:32:46 2024 +0000

    [wasm][js][jspi]Set up wasm-experimental-jspi as a flag.
    
    The old experimental-stack-switching flag implies this new one.
    
    The new flag is intended to be more precise, and allow for future
    experimentation around core stack switching.
    
    Bug: v8:12191
    Change-Id: I8ea2df700fc98836f759b5faf54cf0c37270a79c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5232216
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Reviewed-by: Deepti Gandluri <gdeepti@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92017}

commit f1ad38bed6a36d5f8221d38750ad78e2a8203af3
Author: pthier <pthier@chromium.org>
Date:   Wed Jan 24 11:16:05 2024 +0100

    [regexp] Implement duplicate named capture groups
    
    It is now allowed to have duplicate names for named capture groups, as
    long as they are in different alternatives.
    
    Proposal: https://github.com/tc39/proposal-duplicate-named-capturing-groups
    
    Bug: v8:13173
    Change-Id: I5be4d10cf49786bf1c6ab2aaaddb37b6aed59a57
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5200239
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92016}

commit 1558dda6565dcd87ab68cec05116b85f3e9ffe38
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Jan 25 08:06:47 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/f0e6a46..0b7a019
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/99e6b7b..594e0ed
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/d1eeccf..d7ee2f7
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/42d6b85..3ccf8c4
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757915018415980577
    
    Change-Id: I735d0f6017531bdd4e347963430645fac0c9f9d9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237509
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#92015}

commit c238189351c7b219044086a1c4fa7bac5d7fd2a7
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Jan 25 16:48:19 2024 +0100

    [compiler][fastcall][handles] Fix fast API calls for direct locals
    
    The receiver parameter in fast API calls is of type v8::Local<T>.
    The same is true for other V8 values, passed as parameters.
    With v8_enable_direct_local=true, which requires conservative stack
    scanning, locals are just direct pointers to objects. This CL fixes
    the fast API call builder, to correctly support direct locals.
    
    Bug: v8:13270
    Change-Id: Idb29450063fba1cee23254cddb71c7ff2d27455f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5235035
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92014}

commit 819b1ddc206b0ac9ba5b5c0655091c3b8f1eb0aa
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Jan 25 16:35:06 2024 +0100

    [heap] Add instrinsic call for memory reducing GC
    
    The gc intrinsic option bag considers a new property 'flavor'.
    Currently the only support non-default value is 'last-resort' which
    results in a last resort GC that also cleans up caches and reclaims
    pool pages.
    
    Bug: v8:14594
    Change-Id: Id39a56ee2148d1d91c956577d421c49bb1d8ae8c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237268
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92013}

commit 7c0f4cc343b6722f5ddbb07338f939f8f6123eac
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Jan 25 11:29:01 2024 +0100

    [turboshaft] Prevent Load offsets underflow when kind has tagged_base
    
    Bug: v8:12783
    Change-Id: I996714051c9a5738278016d531625558b79e4cd1
    Fixed: chromium:1520362
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233718
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92012}

commit b3ac38750fc6b3aad5a1ddc9dba7b02c7909d860
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Jan 25 16:15:32 2024 +0100

    [turboshaft][fastcall][handles] Fix fast API calls for direct locals
    
    The receiver parameter in fast API calls is of type v8::Local<T>.
    The same is true for other V8 values, passed as parameters.
    With v8_enable_direct_local=true, which requires conservative stack
    scanning, locals are just direct pointers to objects. This CL fixes
    turboshaft's fast API call reducer, to correctly support direct locals.
    
    Bug: v8:13270
    Change-Id: I053c04761c788cbcf929ae70ee3d63ad9a727123
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5234896
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92011}

commit 00a8226085cb0e89cf258d8e276f2e1c3d142450
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Jan 25 13:57:00 2024 +0000

    [sandbox] Introduce C++ protected pointer accessors
    
    Instead of using the raw field classes to access these fields, this CL
    now introduces accessor routines such as ReadProtectedPointerField. This
    makes the code more consistent with the other sandbox-related pointer
    types such as trusted pointers. In cases where the "raw" field needs to
    be read (because it may be cleared, i.e. contain Smi::zero), the
    RawProtectedPointerField is now used.
    
    Bug: chromium:1505752
    Change-Id: I3a96cb17cb427cd5602dc3ab230d13c64536223d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237465
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92010}

commit 2311eb0e5676d88f655951cd7df35926a54f1434
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Jan 25 10:30:10 2024 +0000

    [sandbox] Make DeoptimizationData a trusted object
    
    These contain sensitive code metadata that, if manipulated by an
    attacker, would allow breaking out of the V8 sandbox. As such, they
    should move out of the sandbox, together with the Code objects to which
    they belong.
    
    This CL only turns DeoptimizationData into a TrustedFixedArray.
    Subsequent CLs will then move it out of the sandbox. As such, this CL
    needs to temporarily move TrustedFixedArrays back into the sandbox.
    
    Bug: chromium:1500887
    Change-Id: Ie0313efdadd759e1eea0158d850236a77eb7e6c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057753
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92009}

commit 78e190f843610df415c6841ae54e65f13c9c7c3c
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Jan 25 15:57:00 2024 +0000

    Revert "[maglev] Enable CSE"
    
    This reverts commit 3d079338333c4e8fdaf0a35441888be34f62abf2.
    
    Reason for revert: chromium:1521770
    
    Original change's description:
    > [maglev] Enable CSE
    >
    > Bug: v8:7700
    > Change-Id: I21bf0116506772ec5ac442a5e7649fc36af0845b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5215646
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#92001}
    
    Bug: v8:7700
    Change-Id: Ie12766ac42d3345b74bfc364a4463212cc97f2b4
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237478
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92008}

commit 62c07c14dc565055e218e8eaee5dcbccfce1ecf0
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Jan 24 17:57:53 2024 +0100

    [api][handles] Fix TypecheckWitness for direct local handles
    
    This CL fixes TypecheckWitness when direct local handles are used
    (i.e., with v8_enable_direct_local=true, which requires conservative
    stack scanning). In this case, its implementation becomes simpler and
    faster.
    
    Bug: v8:13270
    Change-Id: I8a91767ff419463dae9a74ba495a32c800e921ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5234193
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92007}

commit 25bf4a691f829827085cb470013f4d11a1a416fd
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Jan 25 15:06:03 2024 +0100

    [wasm][turboshaft][ia32] Fix certain atomic stores
    
    The MachineOperatorReducer can create the situation that an atomic
    store has both an index and a displacement, which the ia32
    instruction selector didn't support.
    
    Fixed: chromium:1520312
    Change-Id: I291dcf2915c9ecd9002c0e0ddc5a46b3bf5db158
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5237267
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92006}

commit cd0a9817548ce737fe638fbf0da077ea7f6ceb41
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Jan 25 11:48:57 2024 +0100

    [turboshaft] Remove DEFINE_UNREACHABLE_TURBOSHAFT_FALLBACK in ISels
    
    Bug: v8:12783
    Change-Id: Iab07bc3347f91ea32515fb8ac8a0d6e453bde463
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233888
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92005}

commit 68bcd67a53ebc70adf561ef9e2a0c9b76010c35e
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Jan 24 14:35:07 2024 +0100

    [tools] Fix gdb and lldb printing for direct handles
    
    With v8_enable_direct_handle=true and v8_enable_direct_local=true,
    respectively, v8::Local<T> and v8::internal::DirectHandle<T> contain
    direct pointers, instead of indirect ones. The use of both requires
    conservative stack scanning.
    
    This CL fixes gdb/lldb helpers to correctly print V8 direct handles
    in such builds.
    
    Bug: v8:13270
    Change-Id: I6cb732a6c23386ce817a16243121b02d91ee3995
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5234428
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92004}

commit 9e8c868071309ff0f2bf1cf83ef8d3d1c8281f1f
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Thu Jan 25 11:57:38 2024 +0100

    [turboshaft] Reorder some Operations members to make the IR more compact
    
    In memory, an Operation always start with
     - byte 1: opcode
     - byte 2: saturated_use_count
     - byte 3-4: input_count
    
    Then, it contains the members of the specific operation (eg, Kind).
    
    Since pointers are aligned on 8 bytes in structure on x64, it's
    usually a good idea if pointer members of Operations are not the 1st
    member since it would waste 4 padding bytes (instead, we can often put
    the Kind first, since it's usually just 1 byte).
    
    Also, some Kind were missing a `: uint8_t` annotation, which means
    that they were using 4 bytes instead of 1.
    
    Bug: v8:12783
    Change-Id: Id36ef34f5275746788aaf0e2290e7b173cdd38af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233889
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92003}

commit df9539875d96118c25a274265b86c5abfa46d569
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Jan 24 11:42:19 2024 -0500

    [turboshaft][ppc] Port InstructionSelector part 1
    
    Bug: v8:12783
    Change-Id: I1127e561c12fea848ae02dff7abf81c9dfd4d5f5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5206390
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#92002}

commit 3d079338333c4e8fdaf0a35441888be34f62abf2
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Jan 25 11:34:15 2024 +0100

    [maglev] Enable CSE
    
    Bug: v8:7700
    Change-Id: I21bf0116506772ec5ac442a5e7649fc36af0845b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5215646
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92001}

commit a0c598eaac940313cc734140d92055cbd52ce04f
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Jan 25 12:03:25 2024 +0100

    [wasm][fastcall][handles] Fix fast API calls for direct locals
    
    The receiver parameter in fast API calls is of type v8::Local<T>.
    With v8_enable_direct_local=true, which requires conservative stack
    scanning, locals are just direct pointers to objects. This CL fixes
    the wasm fast API call wrapper, to correctly support direct locals.
    
    Bug: v8:13270
    Change-Id: I1df4893d38d6bdf8f91720310f2f14c672bca045
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5234895
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#92000}

commit a17c6e3dd99e1f77562e0e11681cf913a4da11e7
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Jan 25 11:38:50 2024 +0100

    [heap] Fix Heap::NewSpaceLimit()
    
    This was copy/paste mistake from Heap::NewSpaceTop().
    
    Bug: chromium:1480975
    Change-Id: Ib0b2a1fde76a6dc5e846a82588cab5ee12e2f871
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233719
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91999}

commit 549cc2e1a5fb385fb514c79568abc57ecc82578e
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Jan 25 11:26:53 2024 +0100

    [object] Add fast path map creation
    
    Allow the JSDataObjectBuilder to create maps, rather than bailing out if
    a transition isn't found, to stay on the fast path (with fast object
    initialisation) a bit more often.
    
    Change-Id: I7e6845232e485532755e37f3df6912a165615a81
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5228677
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91998}

commit 2b51b541cbe6953bfbfa46ae1c6aa844a0bafbdd
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Jan 25 10:49:14 2024 +0100

    [handles] Prefer OpenDirectHandle to OpenHandle when possible
    
    This CL replaces expressions of the form:
    
      *Utils::OpenHandle(value)
      Utils::OpenHandle(value)->something
    
    to use Utils::OpenDirectHandle instead of Utils::OpenHandle. Both forms
    of expressions create a temporary handle and immediately dereference it,
    to get to the referenced object.
    
    Using a temporary direct handle instead, which is simply a pointer in
    builds with v8_enable_direct_handle=true (requiring conservative stack
    scanning), eliminates the allocation of a handle slot and the double
    indirection.
    
    Bug: v8:13270
    Change-Id: Ibc242317b3fdfdecead861020677b9ea7b59a7d6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5234191
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91997}

commit 8282ae867aea04a21786603aaf49d67deb49e466
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Jan 25 10:32:40 2024 +0100

    Fix slow case of DictionaryTemplateInfo::NewInstance()
    
    ... when transitioning between different representations of the same
    property while creating different instances (e.g. from a heap integer
    to a SMI).
    
    Bug: chromium:1499222
    Change-Id: I783f0690941040863bbff84dc9f10334c17f3bd1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5235437
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91996}

commit f94d4a85b089799c451649aef0876f66e4b8e24f
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Jan 25 10:06:35 2024 +0100

    [maglev] Extend CSE
    
    Also let non-value Nodes participate in CSE and allow merging of
    instructions with equivalent but not identical immediate arguments.
    
    Drive-By: To enable the latter a refactoring to use full equality checks
              over immediate arguments.
    
    Bug: v8:7700
    Change-Id: I5eeba26e6b7fd176574ba8523a4ab2c009339a2b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5215746
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91995}

commit 876c69a63bc3a5c5240d58f1f8a68fe8f613f5d6
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Jan 24 20:18:18 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/614520e..d1eeccf
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/097edba..2bc81cd
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/f400fdb..fc50574
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/1674b1c..42d6b85
    
    Roll created at https://cr-buildbucket.appspot.com/build/8757960316190745953
    
    Change-Id: I9b3a6af88558c3bad27a699bf5d2f815a5898aad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5232045
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91994}

commit e300c7a113030ef0e15fc7bcbe211a1dbeabf9d6
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 24 13:24:01 2024 +0000

    [sandbox] Ensure trusted objects live outside of the sandbox in visitors
    
    Trusted objects are expected to be located outside the sandbox so that
    an attacker cannot modify them. However, currently there is nothing
    stopping an attacker from crafting fake trusted objects inside the
    sandbox. Most of the time this is not a problem as the attacker couldn't
    also create an entry in the trusted pointer table to reference them.
    However, it can be problematic for code that relies on an object's
    instance type, in particular for object visitors.
    
    This CL now first splits the object visitor ids into two groups:
    "regular" and "trusted" objects. Then, when visiting a trusted object,
    we perform an addition safety check to ensure that the object lives
    outside of the sandbox. This now makes a similar check in
    RawProtectedPointerField redundant, which is therefore removed.
    
    Bug: chromium:1473677, chromium:1505089, chromium:1472725
    Change-Id: I39e9cd129a8b150646de3a17ffad899b70986644
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224680
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91993}

commit 06a64da79fc82a16509ccbe0d06a8f452befa176
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Jan 24 14:02:07 2024 -0500

    Fix regress-crbug-1520311 on big endian
    
    DataView is used to make sure values are written and read back
    correctly on BE platforms.
    
    Change-Id: I23984e0c0b65114e7027c30726080dd40cd4cbce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5234515
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91992}

commit 325c326548e435245644d3cb470415eccb5e6557
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Jan 24 19:21:34 2024 +0100

    [object] Extract fast object init logic in json-parser.cc
    
    Factor out the map-walk and allocation folding parts of fast object
    initialisation logic in the JSON parser to a few helper classes. In
    the future, we can share this with other fast object initialisations
    (e.g. the value serializer), and centralise any optimisations (e.g.
    staying on the fast path while allocating new maps).
    
    Change-Id: I8cae65c139ea3eb1e5dcc7ba0f99f93c885279e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224681
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91991}

commit d5f74bb9e2854dc4ae45307b9cfcaed316bdf04c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Jan 24 08:11:37 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/71d1ddc..f0e6a46
    
    Rolling buildtools/linux64: git_revision:5110a7f03e86c6077516f62bd5b77a9a672ebfa6..git_revision:fc722252439ea3576c241773f5ee14eb8470e2ef
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/1cd1f16..99e6b7b
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/1ac1490..614520e
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/e5c5b26..097edba
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/ffe7c45..1674b1c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758005614260546049
    
    Change-Id: I972edf65c2fef42b987ab49acdd30d746536ad98
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233081
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91990}

commit d386323d7db394fa70747d311dd1cb1b7d2f2c2d
Author: magic-akari <akari.ccino@gmail.com>
Date:   Wed Jan 24 11:50:17 2024 +0800

    [interpreter] Optimize for minified typeof undefined
    
    The JavaScript compressor applies an optimization that transforms
    `typeof foo === 'undefined'` into `typeof foo > 'u'`.
    
    This optimization relies on two key observations:
    
    1. The `typeof` operator can only yield the following values:
       - bigint
       - boolean
       - function
       - number
       - object
       - string
       - symbol
       - undefined
    2. Among these values, the expression `typeof foo > 'u'`
    evaluates to true only when `typeof foo` returns `'undefined'`.
    
    For example, esbuild enables this optimization in its minify mode [^1].
    There have been similar attempts to compress code in the SWC as well[^2].
    
    However, this optimization will result in a degradation of runtime
    performance because V8 has optimizations specifically for `typeof`.
    
    This proposed patch will extend the optimization to include the
    comparison with `u`.
    
    [^1]: esbuild playground https://esbuild.github.io/try/#dAAwLjE5LjExAC0tbWluaWZ5AHR5cGVvZiBmb28gPT09ICJ1bmRlZmluZWQi
    [^2]: https://github.com/swc-project/swc/pull/8144
    
    Change-Id: I919a87e0fe89eab698e73459ca7a6faf54006743
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5218959
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91989}

commit ad40274309a4b8cf390cbe735329ed0f4ba7b10c
Author: Eva Herencsárová <evih@chromium.org>
Date:   Wed Jan 24 15:27:53 2024 +0000

    Revert "[const tracking let] Const tracking for lets"
    
    This reverts commit 829abdd425d9fb59a0ce5883040014da823060bd.
    
    Reason for revert: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20arm%20-%20sim%20-%20debug%20builder/13564/overview
    
    Original change's description:
    > [const tracking let] Const tracking for lets
    >
    > Track the const-ness of top-level let variables.
    > - Embed them as constants in optimized code
    > - Deopt code which depends on the const-ness if the value is no longer
    > a constant
    >
    > Design doc:
    > https://docs.google.com/document/d/18F1syu8314lcz1pm9e2LNi3pYzp5t1ah5EpmR4mE4Tg/edit?usp=sharing
    >
    > Bug: v8:13567
    > Change-Id: Ifdec2fbb2311d8d078e594caea7fdc7b3cc991b6
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4085141
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Marja Hölttä <marja@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91987}
    
    Bug: v8:13567
    Change-Id: I88d1a65df6d5e1f7489cb81e75f37321e8540570
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5234192
    Auto-Submit: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Owners-Override: Nico Hartmann <nicohartmann@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91988}

commit 829abdd425d9fb59a0ce5883040014da823060bd
Author: Marja Hölttä <marja@chromium.org>
Date:   Wed Jan 24 15:28:49 2024 +0100

    [const tracking let] Const tracking for lets
    
    Track the const-ness of top-level let variables.
    - Embed them as constants in optimized code
    - Deopt code which depends on the const-ness if the value is no longer
    a constant
    
    Design doc:
    https://docs.google.com/document/d/18F1syu8314lcz1pm9e2LNi3pYzp5t1ah5EpmR4mE4Tg/edit?usp=sharing
    
    Bug: v8:13567
    Change-Id: Ifdec2fbb2311d8d078e594caea7fdc7b3cc991b6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4085141
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91987}

commit 0016438c83ed01061d40f1cc59bb96cf89430cd5
Author: Carlos Caballero <carlscab@google.com>
Date:   Wed Jan 24 12:29:54 2024 +0000

    Reland "Reland "Add Perfetto V8 DataSource""
    
    This is a reland of commit da3002f95e3091bfe04ceb4f7befc557c7599b01
    
    + Changes to remove dependencies on Perfetto time utilities, which
    seemed to cause issues in Win builds. We now use V8 libraries helpers
    instead.
    
    Original change's description:
    > Reland "Add Perfetto V8 DataSource"
    >
    > This is a reland of commit 31dd6d580b31148583c06ca31c442e4232d28337
    >
    > + a fix for the BUILD dependency issues (see diff between patchsets 1
    > and 2)
    >
    > + Changes to delay when the logger instances are registered with the
    > Isolate. We only register if there are any active DataSources as having
    > a logger registered (even if it does nothing) is not for free. E.g. This
    > was causing a test to fail as a new code path was being executed because
    > there was one registered logger. (See diff patchset 3 to 4)
    >
    > + set the proto field is_process_wide in InternIsolate(). This change
    > must have gone lost at some point during the prev reviews. (See diff
    > patchset 5 to 6)
    >
    > + Fix when writing the default proto (order of nested messages is
    > important when writing protozero messages). I had fixed this before, so
    > I am starting to think that I forgot to upload one of my last patchsets.
    > Anyway this should be the last one, as I tried to ingest a huge trace
    > with the new protos and it worked. (See diff 7 to 8)
    >
    > + Added a flag to selectively enable this new data source. Just in case.
    > (See diff 9 to 10)
    >
    > Original change's description:
    > > Add Perfetto V8 DataSource
    > >
    > > Add support for a V8 DataSource to log code events.
    > >
    > > Bug: b/283794416
    > > Change-Id: I1d2db23854c5753efd68bb63ea31913e80909eb0
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5137675
    > > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > > Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    > > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#91919}
    >
    > Bug: b/283794416
    > Change-Id: Ifa816c0df4512fa7e29ba5e6c634e3a4c9c387ba
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5215649
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91938}
    
    Bug: b/283794416
    Change-Id: I6b56285f66cbf3594225cfd17f0a7a67f6a75142
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233802
    Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91986}

commit e0a43f23ca0259e4c2575b4438d441bd76fa124d
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Jan 24 14:22:06 2024 +0100

    [turboshaft][wasm] Fix 64-bit atomic load/store on 32-bit arch
    
    Int64Lowering currently cannot deal with "elem_size_log2" scaling
    parameters, because AtomicWord32Pair doesn't support them. So the
    MachineOptimizationReducer shouldn't produce these parameters on
    this particular configuration.
    
    Fixed: chromium:1520311
    Change-Id: I68f5cf48fc2d617bd62aeced018983eb6e77d56c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5232164
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91985}

commit 682dadb2d1a0ee6500c85dcf12eaa888aa32b2a1
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Jan 24 12:05:31 2024 +0100

    [maglev] Support KeyedLoadMode::kHandleHoles for holey smi arrays
    
    This fixes FeedbackNexus::GetKeyedAccessLoadMode to propagate the
    correct load mode and also ensures the type of the load Maglev node is
    a smi when loading from a smi array (either packed or holey).
    
    Bug: v8:14568
    Change-Id: I1cd08ff7c90d0e759ef986d6d6eba0262631babb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5227860
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91984}

commit 571a297ddedde428cefbf9437c51b4fd170adcdf
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Jan 24 14:15:47 2024 +0100

    [test] Drop future variant from coverage-debug to make it scale again
    
    No-Try: true
    Bug: chromium:1521241
    Change-Id: I93c49d4ef072901eb6817b7fea10a40d674b1ddc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5232163
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91983}

commit b0a5bf52e7ce234d05d97453f5eda0c4d02aefa6
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Jan 24 10:16:53 2024 +0100

    [wasm] Update spec tests
    
    Change-Id: I95d4f2ac59397c2e10d0e7ef695f9b068e99e674
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233801
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91982}

commit 8dff689107b80ac5c6567ee55aa0a052fb2015af
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Jan 18 13:27:46 2024 +0000

    [sandbox] Allow Smi::zero in Code's deopt data/interpreter data field
    
    With this change, the kDeoptimizationDataOrInterpreterData field in Code
    objects can now have one of three types of values:
    * A BytecodeArray or InterpreterData for baseline code
    * DeoptimizationData for optimized code (Maglev of Turbofan)
    * Smi::zero() for all other types of Code
    
    This change is necessary for moving DeoptimizationData objects out of
    the sandbox as we won't (initially) have an empty_trusted_fixed_array()
    constant that we can use when we have neither bytecode/interpreter data
    nor deoptimization data.
    
    Bug: chromium:1500887
    Change-Id: I3303235566688ddf28343cee706567ea8536b9c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5206291
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91981}

commit 0ec79c62899811b0085421a916dd4ca8e073bce1
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Jan 24 12:56:46 2024 +0100

    [heap] Proactively fix all OptimizedPretenuring* tests.
    
    Applying the same fix as in crrev.com/c/5225045 and crrev.com/c/5190761
    (ManualGCScope and no --stress-concurrent-allocation) since it seems a
    different one of these tests starts flaking every other day.
    
    Bug: v8:14589
    Change-Id: Ib1e47fd21c8dd4c19f1e46d5f836b8c72b23b074
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5234188
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91980}

commit ec3aeee4432fac8b61fca2a4f0d06cdc65cb7080
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Jan 24 10:30:47 2024 +0100

    [maglev] Fix concurrent dispatcher flushing again
    
    Destructing MaglevJob's on a background thread needs an unparked local
    isolate and therefore cannot be done during flushing.
    
    Instead we can perform the destruction on the main thread. New
    destruction jobs are only produced on the main thread, thus both input
    and destruct queues are guaranteed to be empty when we `Join`.
    
    Fixed: v8:14588
    Change-Id: Id534266e7f6254f773a0a6246e331ac441d1323a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233402
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91979}

commit 39852e0b069dfa12d400ae2b4d78b5f4302931ba
Author: Simon Zünd <szuend@chromium.org>
Date:   Tue Jan 23 13:49:10 2024 +0100

    Reland "[debug] Remove 'value unavailble' experiment"
    
    This is a reland of commit c7cbb4139bc5e7dc352fd9fd69fc9ac9ff7f4fc2
    
    Relanding as is. Was reverted due to a test failure that turned out
    to be a flake that still reproduced after the revert landed.
    
    Flako run: https://ci.chromium.org/ui/p/v8/builders/try.triggered/v8_flako/b8758034788224082417/overview
    
    Original change's description:
    > [debug] Remove 'value unavailble' experiment
    >
    > The experiment was enabled in July 2023 and we haven't heard any
    > negative feedback so we can safely remove the experiment now.
    >
    > R=bmeurer@chromium.org
    >
    > Bug: chromium:1328681
    > Change-Id: I6613a4e8e741d8c16881ec1adeb01e039244fac7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224284
    > Commit-Queue: Simon Zünd <szuend@chromium.org>
    > Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91968}
    
    Bug: chromium:1328681
    Change-Id: I651e2a20c6612fc138246aa7e61daab285b57795
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233640
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91978}

commit e70b49cbd1835635c31770b54fb4fe99c70f5f7a
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Jan 24 10:51:06 2024 +0100

    [objects] Simplify DictionaryTemplate handling
    
    No semantic changes.
    
    Change-Id: I85e260549b803d86c093cb50198f34f269c26e54
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5232158
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91977}

commit e08a30ef808cc7fce03279d4f327ad6505050c4d
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Jan 24 08:55:16 2024 +0100

    [turboshaft] Enable x64 instruction selection on Turboshaft by default
    
    Bug: v8:12783, chromium:1454443
    Change-Id: I53aeb54ec7b8963cbfbeaae5d1493a547532986d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233500
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91976}

commit 910a9464897fdcca00926dc9e3655173168db1d3
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Jan 24 10:11:56 2024 +0100

    [test] Skip slowest tests on coverage with debug
    
    See:
    https://logs.chromium.org/logs/v8/buildbucket/cr-buildbucket/8758047644919138529/+/u/Check_-_default/slowest_tests
    
    No-Try: true
    Bug: chromium:1521241
    Change-Id: I3bbeb34fda4f2f96766e4f21ee13d5847cb64065
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233800
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91975}

commit 21ec50e7b5a42f5c982f313bdfb8472f18f3e237
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Jan 24 09:47:23 2024 +0100

    [heap] Fix PercentToGlobalMemoryLimit
    
    The method was using old gen values instead of equivalent global values.
    
    Change-Id: I7a6f49e7d1d7c43bad084f146b83b29c0a9d7b87
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233720
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91974}

commit a7467bcccef22c81ac5f9fcee1c806d46cedb84a
Author: pthier <pthier@chromium.org>
Date:   Tue Jan 23 13:56:33 2024 +0100

    Reland "[csa] Add optional insertion index to AddToDictionary"
    
    This is a reland of commit d105d9b10da921a1506ff8246647feda4a6316bb
    
    Changes since revert:
    - Introduce separate label to `NameDictionaryLookup` for not_found
      with/without valid insertion index.
    - Add test.
    
    Original change's description:
    > [csa] Add optional insertion index to AddToDictionary
    >
    > In case we add a named dictionary entry only if it doesn't already
    > exist, we already know the insertion index from the lookup and can skip
    > finding the insertion entry (again).
    >
    > Bug: v8:13173
    > Change-Id: I770285e1e0c065d374368810a26b1e4a7f649317
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5199989
    > Commit-Queue: Patrick Thier <pthier@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91878}
    
    Bug: v8:13173
    Change-Id: I8b2d3682c224ded376576885f6b5a8a9e36432fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210470
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91973}

commit bbc1027a8c51dcbbbc9cd3b34a8badcdafee2d71
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Jan 24 09:24:22 2024 +0100

    [api] Fix DictionaryTemplate
    
    - Implement proper coercion from Smi to HepaNumber.
    - Add Cast() method on template which is required for certain debug
      builds.
    
    Bug: chromium:1499222
    Change-Id: Icd9a24eda8a2a612d0fdb952604252d674667c84
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5229878
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91972}

commit 2f5ef8f88745f5b57f92944543cda53f9d57eed3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Jan 23 20:21:02 2024 +0100

    [zone] BitVector: Fix broken move operations
    
    The BitVector has an "inline" mode where it points to its own member.
    Given the following code:
    1|  BitVector a;
    2|  a = BitVector(8, zone);
    3|  a.Add(1);
    
    In line 2 a temporary will be constructed with data_begin_ pointing to
    its data_ member.
    The move construtor will copy over these members meaning the
    data_begin_ of a points to the data_ member of the temporary.
    Line 3 then modifies the temporary after it's been destructed causing
    all kinds of potential memory corruptions.
    
    Change-Id: I316856ecb682b83c401ee5f9e22b85146f79093c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210479
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91971}

commit 08f1ac73fc118d18cf9e0f29066d68d60bcebb89
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Jan 24 07:27:57 2024 +0000

    Revert "Reland "Add Perfetto V8 DataSource""
    
    This reverts commit da3002f95e3091bfe04ceb4f7befc557c7599b01.
    
    Reason for revert: Breaks roll on win dbg:
    https://ci.chromium.org/ui/p/chromium/builders/try/win_chromium_compile_dbg_ng/1812003/overview
    
    Original change's description:
    > Reland "Add Perfetto V8 DataSource"
    >
    > This is a reland of commit 31dd6d580b31148583c06ca31c442e4232d28337
    >
    > + a fix for the BUILD dependency issues (see diff between patchsets 1
    > and 2)
    >
    > + Changes to delay when the logger instances are registered with the
    > Isolate. We only register if there are any active DataSources as having
    > a logger registered (even if it does nothing) is not for free. E.g. This
    > was causing a test to fail as a new code path was being executed because
    > there was one registered logger. (See diff patchset 3 to 4)
    >
    > + set the proto field is_process_wide in InternIsolate(). This change
    > must have gone lost at some point during the prev reviews. (See diff
    > patchset 5 to 6)
    >
    > + Fix when writing the default proto (order of nested messages is
    > important when writing protozero messages). I had fixed this before, so
    > I am starting to think that I forgot to upload one of my last patchsets.
    > Anyway this should be the last one, as I tried to ingest a huge trace
    > with the new protos and it worked. (See diff 7 to 8)
    >
    > + Added a flag to selectively enable this new data source. Just in case.
    > (See diff 9 to 10)
    >
    > Original change's description:
    > > Add Perfetto V8 DataSource
    > >
    > > Add support for a V8 DataSource to log code events.
    > >
    > > Bug: b/283794416
    > > Change-Id: I1d2db23854c5753efd68bb63ea31913e80909eb0
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5137675
    > > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > > Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    > > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#91919}
    >
    > Bug: b/283794416
    > Change-Id: Ifa816c0df4512fa7e29ba5e6c634e3a4c9c387ba
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5215649
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91938}
    
    Bug: b/283794416
    Change-Id: Ib915cee27f2521f021e5d95fd07bb49405ae2284
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233400
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Owners-Override: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91970}

commit e2ed1b9071acb6d1faabf6a3739a8d79db039897
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Jan 24 07:49:46 2024 +0000

    Revert "[debug] Remove 'value unavailble' experiment"
    
    This reverts commit c7cbb4139bc5e7dc352fd9fd69fc9ac9ff7f4fc2.
    
    Reason for revert:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug/48674/overview
    
    Original change's description:
    > [debug] Remove 'value unavailble' experiment
    >
    > The experiment was enabled in July 2023 and we haven't heard any
    > negative feedback so we can safely remove the experiment now.
    >
    > R=bmeurer@chromium.org
    >
    > Bug: chromium:1328681
    > Change-Id: I6613a4e8e741d8c16881ec1adeb01e039244fac7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224284
    > Commit-Queue: Simon Zünd <szuend@chromium.org>
    > Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91968}
    
    Bug: chromium:1328681
    Change-Id: If487de6e5d934ff4f65b2deb582d530858e77fc3
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233501
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91969}

commit c7cbb4139bc5e7dc352fd9fd69fc9ac9ff7f4fc2
Author: Simon Zünd <szuend@chromium.org>
Date:   Tue Jan 23 13:49:10 2024 +0100

    [debug] Remove 'value unavailble' experiment
    
    The experiment was enabled in July 2023 and we haven't heard any
    negative feedback so we can safely remove the experiment now.
    
    R=bmeurer@chromium.org
    
    Bug: chromium:1328681
    Change-Id: I6613a4e8e741d8c16881ec1adeb01e039244fac7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224284
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91968}

commit 15e25592e104ef5eac84c9b8b57a84294abe01f7
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 23 20:17:48 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/73656f1..71d1ddc
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/3a7f624..e5c5b26
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/9986707..a46df1f
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/ff65394..ffe7c45
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758050912405424609
    
    Change-Id: I4fee7e214e43b743c953a345efd1a2cda8b484d8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5233020
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91967}

commit fec2ec5ad51d07bf1a0051b5c7179c2f547f22d0
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Jan 24 09:46:11 2024 +0800

    [riscv] Prepare splitting of MemoryChunk Metadata and Header
    
    Port commit 165268cc8d2ff34afb0ec0e81f938561958fa786
    
    
    Change-Id: Idfb42a3d9480ee54fed18242b66660ad8cc0fa58
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5232198
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91966}

commit 3b3adf74608008bb6ada539e9fa58e5d6f23371a
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Jan 23 13:17:33 2024 -0500

    PPC/s390: [heap] heap_internals::MemoryChunk => MemoryChunkHeader base class
    
    Port 59e973a4c8ae91beb058940238e820ee929b28ee
    
    Original Commit Message:
    
        Unify the heap_internals::MemoryChunk with the BasicMemoryChunk by
        introducing a new MemoryChunkHeader base class. This is the first CL in
        a sequence to prepare for moving most of the MemoryChunk metadata out
        of the header.
    
    R=sroettger@google.com, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Ia8be68fdf808ec9e294883b8cb9005c2c1f86691
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5228641
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91965}

commit 402ed60403925c80202362fd35cc5c13df97e646
Author: Emmanuel Romero Ruiz (from Dev Box) <emromero@microsoft.com>
Date:   Tue Jan 23 10:41:42 2024 -0800

    [parser] Adding ConditionalChain Expression to handle long ternary
    operations
    
    Expressions of the form
    
    a_0 ? b_0 : a_1 ? b_1 : .... : a_n ? b_n : c
    
    that codify long if else assignations seem to be common in some
    generated instances like code splitting in webpack (see bug).
    However, parsing these expressions result in a n-deep expression tree:
    
               ? :
             /    \
    (a_0, b_0)    ? :
                 /   \
        (a_1, b_1)   ...
                      ...
                         \
                        ? :
                       /   \
               (a_n, b_n)   c
    
    Traversing this tree during compilation can cause a stack overflow when
    n is large.
    
    Instead, we can now build a conditional chain node in the parse tree of
    the form
    
                     conditional chain ? :
                   /     |        \       \
                  /      |         \       \
                 /       |          \       \
                /        |    ...    \       \
         (a_0, b_0)  (a_1, b_1)   (a_n, b_n)  c
    
    The bytecode compiler can now iterate through the child expressions
    rather than recursing.
    
    Bug: v8:13887
    Change-Id: I94109bbf418801073cd76b53ad9c920147e9af5e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5177855
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Emmanuel Romero Ruiz <emromero@microsoft.com>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91964}

commit 45d94ebafc5fb67c0cc849edd5fe6576a850579f
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Jan 23 19:11:13 2024 +0100

    [wasm][ia32] Fix F64x2ReplaceLane instruction selection
    
    When unifying this with other ReplaceLane operations in
    crrev.com/c/5191568, I missed that there was a difference
    in "g.Use" vs. "g.UseRegister".
    
    Fixed: chromium:1520130
    Change-Id: I7c985c57b439dba4b2765cf93294d0c77af127fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5227862
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91963}

commit cf70bd3b911510bdba8a657c3805a221a908f55b
Author: Francis McCabe <fgm@chromium.org>
Date:   Tue Jan 23 17:07:28 2024 +0000

    Refactor flag for JSPI to allow dynamic setting
    
    Set up JSPI when InstallConditionalFeatures is performed.
    
    Bug: v8:12191
    Change-Id: I1254de9e1dcc02c00f140ee179e6ab73f45f4314
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5174170
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91962}

commit 619e17623c4084de90026d367778461f2e139cf3
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 23 08:22:07 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/4031ab2..73656f1
    
    Rolling buildtools/linux64: git_revision:f99e015ac35f689cfdbf46e4eb174e5d2da78d8e..git_revision:5110a7f03e86c6077516f62bd5b77a9a672ebfa6
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6fc0c97..3a7f624
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758096210243134737
    
    Change-Id: I3cd188537a4abd0a07b3422cb60922caea67c7e3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5228258
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91961}

commit 2f4083cb518d1c8d5e05db750aec537273e216e2
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Jan 23 17:12:19 2024 +0100

    [lookup] LookupIterator cleanup and documentation
    
    1. Avoid advancing LookupIterator iteration (e.g. after a successful
       access check) with `break` out of the switch over states. This gets
       confusing vs. a `break` out of the loop, and looks like we want to
       stop iterating rather than continuing.
    
       Instead, use `continue` and `return` inside the handling cases, and
       make breaking out of the switch `UNREACHABLE()`.
    
    2. As part of this, treat NOT_FOUND handling like any other lookup
       handling, rather than as a bailout from the LookupIterator iteration.
    
       This means replacing `for (; it.IsFound(); it.Next())` loops, with
       `for (;; it.Next())` loops, that can only be broken out of with a
       `return` or an explicit `break` (explicit breaks should be avoided
       because of the `switch` issue above).
    
    3. Rename INTEGER_INDEXED_EXOTIC to TYPED_ARRAY_INDEX_NOT_FOUND -- this
       state was only used for a not-found on integer-indexed exotics, which
       are only TypedArrays, so be explicit here.
    
    4. Document the different LookupIterator states.
    
    5. Clean up OrdinaryDefineOwnProperty to remove an unnecessary overload
       (which was just splitting the logic over two functions), to avoid an
       unnecessary loop looking for interceptors, and to avoid an
       unnecessary iterator restart when such an interceptor is not found.
    
    Change-Id: Ifdbabe2e4d4a264ec10210c443760f333c9f3798
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5205671
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91960}

commit ee7825c12c1a4466178d8a68f609c13ffd26a23e
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Jan 23 15:29:24 2024 +0100

    [maps] Keep derived map cache handlified
    
    When adding an entry to the derived map cache we must keep the reference
    handlified.
    
    Fixed: chromium:1520200
    Change-Id: If93e73f75699b7c4516fc5646da63b66d744ac77
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5225046
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91959}

commit 821fa0483115f297707a1915e6d1b49f53a0e47b
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Jan 23 16:31:13 2024 +0100

    [maglev] Fix concurrent dispatcher race on teardown
    
    When the concurrent dispatcher awaits compilation threads and we are
    flushing we must not invoke the LocalIsolate constructor. The
    reason is that the main isolate might be terminating already at this
    point. Anyway, the queue is empty in this situation and we would just
    return after trying to pop a job.
    
    Drive-By: Remove a DCHECK which is not thread safe. Rcs collection can
    be stopped between `WorkerThreadRuntimeCallStatsScope()` being invoked
    and `GetKey()` being called.
    
    Fixed: v8:14571
    Change-Id: I5b4ca409e8f629152bfee3ba9d5b4787d14cfa7d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224186
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91958}

commit c285a9a69e9409c49c6d28c6156bcd523d659396
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Jan 23 15:46:50 2024 +0100

    [ic] Add new keyed load modes and remove convert-hole flag
    
    It also deletes KeyedLoadIC::HandlerInfo (no need for it anymore)
    and renames ConvertHole to a more expressive AllowReadHole.
    
    This make the load mode clearer and automatically propagate the
    AllowReadHole handler bit to the optimizing compilers.
    
    Bug: v8:14568
    
    Change-Id: I43edb4a7181b805ce1b6b42cd5ec629af71cf238
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5225040
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91957}

commit fa689a68b512239d2b0157fe3c0b2eee1e25429e
Author: Choongwoo Han <choongwoo.han@microsoft.com>
Date:   Mon Jan 22 09:40:08 2024 -0800

    Make CrossScriptInliningCallerLineNumbers2 test deterministic.
    
    Edge is observing this test flaky. As the inner loop became faster,
    the cpu profiler samples execution of `action` with a less chance, which
    resulted in missing `action` child under `level3_node`, therefore the
    test crashes.
    
    Make the test deterministic by using `CollectSample` callback in the
    `action` function.
    
    Bug: v8:9704
    
    Change-Id: I8c1763bb55f28668e92479119dcb27fe49d97c8a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5214909
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Choongwoo Han <choongwoo.han@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#91956}

commit 0fae93557ea2d69bc6b44a63d3401f74e85284b0
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Jan 23 14:33:38 2024 +0100

    [cleanup][wasm] Avoid direct creation of the CompilationEnv
    
    So far the CompilationEnv was created with values for each of its
    fields. However, these values already exist in the NativeModule anyways.
    Therefore this CL changes the constructor of CompilationEnv to take a
    NativeModule as a parameter and create the CompilationEnv from that.
    
    R=clemensb@chromium.org
    
    Bug: chromium:1519813
    Change-Id: Ibff9f89c8398f092f6518bb81d1505f43c001524
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5215647
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91955}

commit 234cebdf996386bb3c0aaa0765a21af0d0614473
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Tue Jan 23 12:40:01 2024 +0100

    heap: Postpone page freeing for PagedSpace by default
    
    In the configuration with shared/trusted space we may have slots in the
    remembered set pointing to the pages in those spaces. The CL postpones
    freeing of these pages after evacuation.
    
    Bug: chromium:1520445
    Change-Id: I1523521d2a116c5ce5e71a448e4aa3d5954768fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5227861
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91954}

commit 58fef0f8eb2f5244d82825bb27ab18a1225109bf
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Jan 23 13:44:59 2024 +0100

    [heap] Fix missing paranthesis in gc-extenstion documentation
    
    Change-Id: I46171b4bb99673ac06e9920de7f70f1a5061b168
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224283
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91953}

commit 165268cc8d2ff34afb0ec0e81f938561958fa786
Author: Stephen Roettger <sroettger@google.com>
Date:   Tue Jan 23 12:50:32 2024 +0100

    [heap] Prepare splitting of MemoryChunk Metadata and Header
    
    * make page alignment private in the header
    * move heap_ to BasicMemoryChunk
    
    Change-Id: I21ad765d95eba1820ef14f5c84eec76c398be342
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5132256
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#91952}

commit 4e3c1ccc4ed82f8380e43d8c92dd2a62b3ade20f
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Jan 23 12:21:10 2024 +0100

    [heap] Fix OptimizedPretenuringAllocationFolding test
    
    Similar to crrev.com/c/5190761.
    Same issue, same fix, different test.
    
    Bug: v8:14522
    Change-Id: Ib35e5888d123bc1024ac6bcf451dc1c29e490236
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5225045
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91951}

commit 499a5646b8dbd297b834cfaa374415ad400ae646
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Jan 22 21:01:48 2024 +0100

    [wasm][liftoff] Fix alignment checks for atomic ops
    
    This fixes an issue in crrev.com/5180736 where an atomic memory
    access with a statically known index and incorrect alignment
    does not trap even though it should.
    
    Fixed: chromium:1520780
    Change-Id: I0f59728acbfd5a8ca02c67ebf5093e8be923e1c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224982
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91950}

commit 7f91a29e2851db2e647a548f43abe5d456840d9c
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Jan 23 12:33:32 2024 +0100

    [heap] Improve ephemeron handling in heap snapshots
    
    Heap snapshots represent ephemeron using an edge from the key to the
    value. The assumption is that the key will have a retaining chain
    separate from the ephemeron backing store.
    When an ephemeron backing store is reachable from stack, it is
    strongified by the GC and all keys are conservatively kept alive. This
    is not handled currently by the snapshot, resulting in keys with no
    retainers.
    This CL adds an edge from the backing store to all keys in case the
    backing store is strongified by conservative stack scanning.
    
    Bug: chromium:1495398
    Change-Id: I2bbf2dcb5a38d1809cce9a48796c1f41793e34e8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224185
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91949}

commit 2d691723580738af1c772d8d11bcab780a4d009b
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Jan 22 21:20:20 2024 +0100

    [api] Add DictionaryTemplate to instantiate dictionary objects
    
    The dictinary alllows declaring data properties that are then used
    later to instantiate an instance.  The strings for V8 properties are
    immediately created and kept alive from the template.
    
    On instantiation the values are optional and may be left out which is
    signaled via empty MaybeLocals.
    
    Change-Id: I0ef688604a4ed8d8b32d673f6188478ebfc3d9f8
    Bug: chromium:1499222
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192785
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91948}

commit be722ff24c2b1132a7a8aec89d61be54c32e9a12
Author: Simon Zünd <szuend@chromium.org>
Date:   Tue Jan 23 08:59:10 2024 +0100

    [debug] Fix nullptr access
    
    The out parameter isn't used by all callers and is even defaulted
    to nullptr. Check it before setting the out parameter.
    
    R=bmeurer@chromium.org
    
    Fixed: chromium:1520672
    Change-Id: I6aea2d97df1825a67cf9a748ec8eff4399f2472a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224269
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Benedikt Meurer <bmeurer@chromium.org>
    Auto-Submit: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91947}

commit 59e973a4c8ae91beb058940238e820ee929b28ee
Author: Stephen Roettger <sroettger@google.com>
Date:   Mon Jan 22 17:09:04 2024 +0100

    [heap] heap_internals::MemoryChunk => MemoryChunkHeader base class
    
    Unify the heap_internals::MemoryChunk with the BasicMemoryChunk by
    introducing a new MemoryChunkHeader base class. This is the first CL in
    a sequence to prepare for moving most of the MemoryChunk metadata out
    of the header.
    
    Change-Id: I8253ae4e65659b2b678898d363261e41989f1f28
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126173
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91946}

commit d6fbfcde5bd5ae67d35b232715410524d3f82abd
Author: Simon Zünd <szuend@chromium.org>
Date:   Fri Jan 19 10:35:59 2024 +0100

    [debug] Correctly set up reparsing of eval scripts in scope iterator
    
    This CL fixes a crashing bug in debug-evaluate where we don't set
    the right flags and the bytecode generator gets confused.
    
    When we do a full reparse of an eval'd script, we need to correctly
    set the outer scope info and the language mode depending on whether
    the eval was direct or indirect.
    
    To determine this we the top-level ScopeInfo of the eval'd script.
    If we don't find one we assume indirect eval and use sloppy mode with
    no outer scope info.
    
    Drive-by: Remove code from SetFlagsForFunctionFromScript that
    unconditionally takes the outer language mode from "eval_from_shared".
    This is only correct for direct eval scripts.
    
    R=leszeks@chromium.org
    
    Fixed: chromium:1510427
    Change-Id: If48ab074a81458ecbc01dfaa8df25e8827abd2eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5204832
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91945}

commit 4767b887bcf48c0791166e7c9579fbeec54c694c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Jan 22 20:18:13 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/28cd6ea..4031ab2
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/797a597..d8688b9
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/5ff8c1f..1cd1f16
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/3e413d7..1ac1490
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/46cb7d0..6fc0c97
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/24cb554..28aa23f
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/ea028d4..9986707
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758141510914590417
    
    Change-Id: Ib68091e66d31af7ea2298e2d2d7390fdac1496db
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5224345
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91944}

commit a2d2b6af87362d4b5f88627826bd241f7972b5de
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Jan 19 13:52:45 2024 +0100

    [turboshaft] Bail out of unrolling earlier when the 1st iteration deopts
    
    LoopUnrollingReducer had a bail out for when the second+ iteration
    stops early (could be because of an early return, but most likely
    because of a DeoptimizeIf that became a Deoptimize), but this was
    missing for the 1st iteration.
    
    Bug: v8:12783
    Change-Id: I3b48e8166b86e2f3c3224a22b26108047e264d5a
    Fixed: chromium:1519399
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5217251
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91943}

commit afc18842029d5629fccda99485c0dc44a71fb3c5
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Jan 22 17:01:48 2024 +0100

    [turboshaft] Fix wrong constant folding of strings map loads
    
    is_stable should only be used on non-primitive maps. Strings can
    change maps despite their maps being "stable".
    
    Bug: chromium:1518396
    Change-Id: I3bcb33223f6d08df30d97da6eca2b06efb052960
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5217051
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91942}

commit 422b38c21943d06de0c2e09786e454aa2ded2fda
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Jan 22 08:05:51 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/17ce6d2..797a597
    
    Rolling buildtools/linux64: git_revision:b5adfe5f574d7110b80feb9aae6fae97c366840b..git_revision:f99e015ac35f689cfdbf46e4eb174e5d2da78d8e
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/28aa23f..24cb554
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/f0b1bef..ff65394
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758186809579997441
    
    Change-Id: Ie492490a21fd37577334b240e2800308f299e12f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5223705
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91941}

commit 75a2f23ea3a2221ca8bff42e8c876f2c0241081b
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Jan 22 16:20:50 2024 +0100

    [api] Remove deprecated wrapper class id
    
    TracedReference class ids are deprecated and embedders need to
    maintain state if needed separately.
    
    Bug: chromium:1502777
    Change-Id: If8b40afdac25a1e7a80b2249ba06000da8656dbd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5225042
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91940}

commit 7ec811a0c188d05726c36667f3a6e157677de8bc
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Jan 19 11:47:37 2024 +0100

    [ic] Fix handling of attributes change in DefineOwnICs
    
    DefineOwnICs have to handle stores to a non-enumerable properties
    differently than StoreICs. The former must reconfigure the property
    attributes to NONE while the latter can just store a value there.
    
    Due to the above reason it's not correct to reuse StoreIC handlers
    for DefineOwnICs, so this CL introduces a separate megamorphic stub
    cache for DefineOwnICs.
    
    This CL partially reverts https://crrev.com/c/5147214 because proto
    handlers are actually used by DefineOwnICs for transitioning element
    stores (see StoreHandler::StoreElementTransition).
    
    Drive-by: fix printing of Define(Keyed|Named)OwnIC states.
    
    Bug: v8:14493, chromium:1512391
    Change-Id: Ia9f8ed731dfc1e45bb10f3b668734ddda27359b9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5217052
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91939}

commit da3002f95e3091bfe04ceb4f7befc557c7599b01
Author: Carlos Caballero <carlscab@google.com>
Date:   Mon Jan 22 10:56:12 2024 +0000

    Reland "Add Perfetto V8 DataSource"
    
    This is a reland of commit 31dd6d580b31148583c06ca31c442e4232d28337
    
    + a fix for the BUILD dependency issues (see diff between patchsets 1
    and 2)
    
    + Changes to delay when the logger instances are registered with the
    Isolate. We only register if there are any active DataSources as having
    a logger registered (even if it does nothing) is not for free. E.g. This
    was causing a test to fail as a new code path was being executed because
    there was one registered logger. (See diff patchset 3 to 4)
    
    + set the proto field is_process_wide in InternIsolate(). This change
    must have gone lost at some point during the prev reviews. (See diff
    patchset 5 to 6)
    
    + Fix when writing the default proto (order of nested messages is
    important when writing protozero messages). I had fixed this before, so
    I am starting to think that I forgot to upload one of my last patchsets.
    Anyway this should be the last one, as I tried to ingest a huge trace
    with the new protos and it worked. (See diff 7 to 8)
    
    + Added a flag to selectively enable this new data source. Just in case.
    (See diff 9 to 10)
    
    Original change's description:
    > Add Perfetto V8 DataSource
    >
    > Add support for a V8 DataSource to log code events.
    >
    > Bug: b/283794416
    > Change-Id: I1d2db23854c5753efd68bb63ea31913e80909eb0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5137675
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91919}
    
    Bug: b/283794416
    Change-Id: Ifa816c0df4512fa7e29ba5e6c634e3a4c9c387ba
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5215649
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91938}

commit 72cb363013b4d53315ba759f696a4f10591c5700
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Jan 22 09:41:16 2024 +0100

    [ic] Add StoreIC[Trampoline]_Megamorphic builtins
    
    ... and use them in Maglev and TurboFan.
    
    Bug: v8:7700
    Change-Id: I4b1f12c020f78537d1f5b679d051bb46d7687080
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210481
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91937}

commit f1339673055e021595a2ac9d348c34d74e5a2d69
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Jan 22 11:25:50 2024 +0100

    [wasm] Rename WasmTableObject::AddDispatchTable
    
    We are adding a new WasmDispatchTable class, so rename
    WasmTableObject::AddDispatchTable to WasmTableObject::AddUse to avoid
    confusion.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I43c8893db87c4d77d35b1fbdf67f18c4faa26bdc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5222501
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91936}

commit 40d669e1505e8235b7cdc936d2f04b746446e586
Author: V8 Autoroll <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Jan 22 02:20:51 2024 -0800

    Version 12.3.0
    
    Change-Id: I00b43d19d4210d0e885c909cc2801672f8ce0e0d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5223182
    Commit-Queue: Lutz Vahl <vahl@chromium.org>
    Reviewed-by: Lutz Vahl <vahl@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91935}

commit 44cf56d850167c6988522f8981730462abc04bcc
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Jan 21 08:13:28 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/655af8d..f0b1bef
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758277406877750945
    
    Change-Id: I77355c4057e1ffee6c693ed47fc4722ac47fcaa7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5221500
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91934}

commit 7d83c4b42ca0cde6289b4ba0f09b9923f75e28ab
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Jan 20 08:17:38 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/fuchsia-sdk/sdk: version:17.20240113.0.1..version:17.20240120.1.1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758368000738527889
    
    Change-Id: I67e29b82abfa8e93337c23e335ffa0d1fdc309da
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5219238
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91933}

commit b809859d6608eb1064d10d5d5a06aba3f578731c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Jan 19 20:06:49 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/1d31796..28cd6ea
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/e9e2619..3e413d7
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/9a16009..46cb7d0
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758413301814692513
    
    Change-Id: I03244c4a035fc8443eae0ccdda8771088663abb7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5218716
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91932}

commit fb9a925cdc18e8277123212b8c7bc270c483b8b9
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Jan 19 21:31:21 2024 +0100

    [wasm-imported-strings] Support compile-time imports
    
    All WebAssembly.* functions that can trigger compilation get an
    additional "options" parameter, which for now can express a list
    of built-in imports packages that the module wishes to use. These
    imports are then available at compile time already, and are ignored
    at instantiation time.
    
    Bug: v8:14179
    Change-Id: I64f89a8a2e1f817199c877235c2b018e5e150ad1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5217133
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91931}

commit 784eb5e6ff2faa412723a65aa11e1badfdb75262
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Tue Jan 16 18:58:56 2024 +0100

    [tagged-ptr] Make HeapNumber & BigInt layout classes
    
    This also allows us to drop PrimitiveHeapObjectLayout and make
    PrimitiveHeapObject a layout class.
    
    Two small drive-bys driven by this:
    
      * BigInt digits access is simplified, with the Digits class getting a
        bit more const correct.
      * Float64 field accesses (into mutable HeapNumber) are changed to be a
        ForHeapNumberValue FieldAccess with tweaks, rather than tweaking
        the previous FieldAccess.
    
    Bug: v8:12710
    Change-Id: I8cbf8eecf323d154d67ea768be1f508047d68fb7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5148171
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91930}

commit d52c34d7c56e4cd3a2c32009fa603148615a4b4a
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Jan 19 18:40:01 2024 +0100

    [wasm][ia32] Fix atomic binops with constants
    
    https://crrev.com/c/5180736 added support for atomic operations at
    constant memory locations. On ia32 we had an optimization which swapped
    the memory start register and the offset register under certain
    conditions to save register moves. Later code then only handled the case
    that the offset register is not set, and not that the destination
    register is not set.
    
    We hence move the check whether to swap the registers to the branch that
    handles the case that both registers are actually there.
    
    R=ahaas@chromium.org
    
    Fixed: chromium:1519091
    Change-Id: Ic68a5562a0894e021ca26c7d0fd87c6b609a2a56
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5216406
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91929}

commit 8ecb4930c200661f36da7249a3ba265503d7ea99
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue Dec 19 15:06:42 2023 +0100

    [runtime] Use CreationContext as global object/proxy native context
    
    With context-specific meta-maps we have a cheap way of accessing the
    creation context, so we can use that instead. This aligns the embedder
    field location for global proxies with regular objects.
    
    Change-Id: I74cff477cd8d76903251db41e5aefe67ace1d00f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5135175
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91928}

commit 7c6d793bc6be92031e9d32a2726142d453885e72
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Jan 19 08:17:17 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/3f00831..1d31796
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/16519eb..17ce6d2
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/24cb554..28aa23f
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/f7eb6b5..655af8d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758458598867629057
    
    Change-Id: I5c862407428bbc52c54285c585be0f6019969377
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5217215
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91927}

commit 2d74d4bb8fc3208c0ccee11d51bbe1cfeb514d8c
Author: Carlos Caballero <carlscab@google.com>
Date:   Fri Jan 19 15:21:43 2024 +0000

    Remove unnecessary call to EnsureSourcePositionsAvailable
    
    We don't need source positions just to know the start position of a
    function.
    
    Change-Id: Ifd5772406b856b5cedeac6a2370045566b90ded5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5217136
    Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91926}

commit 1f4b1696f13b25fbe1473b7f299d2ef922770c0a
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Jan 19 14:54:18 2024 +0100

    [infra] Add build configs for fuzz-test builders
    
    No-Try: true
    Bug: chromium:1500944
    Change-Id: If56fbf4e34079fc80c9c41089d7f7d5aad79fae8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5217134
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91925}

commit f6c245d70649f33ed753d79644607910917bdbdc
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Jan 19 12:45:22 2024 +0100

    [wasm-imported-strings] Update the set of functions
    
    Keeping up with the upstream proposal:
    - "MeasureUTF8" and "IntoUTF8Array" are new,
    - "FromUTF8Array" replaces "FromWTF8Array",
    - the internal debug names of the string builtins are updated;
      updating their public names will follow in the next CL.
    
    Also, "Cast" and "Test" get Turbofan implementations (to avoid a
    dependency on the Turboshaft launch).
    
    Bug: v8:14179
    Change-Id: Idbb4de7e3e3b56cfb44c15651cbea9d4fb1b6d85
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5217053
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91924}

commit 1dd45099de85210b3164b8f3ccd7235b13e8babd
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Jan 19 12:39:22 2024 +0100

    [gm.py] Fix detection of non-Google reclient machines
    
    We checked the conditions in the wrong order: machines that have
    both "rbe_instance" and "download_remoteexec_cfg" in their .gclient
    must be classified as non-Google.
    
    No-Try: true
    Change-Id: Ib9331531709b7bea6fcba5e31a24d010554e9ecd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5217151
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91923}

commit 1384e75dc30c6a5c588fadb290cc0f392d7fbdee
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Jan 19 12:34:36 2024 +0100

    [builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.9
    
    Mostly mechanical change from
      __ Call(BUILTIN_CODE(isolate, XyZ), RelocInfo::CODE_TARGET);
      __ Jump(BUILTIN_CODE(isolate, XyZ), RelocInfo::CODE_TARGET);
    
    to
      __ CallBuiltin(Builtin::kXyZ);
      __ TailCallBuiltin(Builtin::kXyZ);
    
    Bug: v8:14496
    Change-Id: I9a572a37409810b78ddbc055d378275cd4211d51
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5215648
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91922}

commit 8253d4274473306848b4dd3337d64e3546db602b
Author: Carlos Caballero Grolimund <carlscab@google.com>
Date:   Fri Jan 19 11:15:14 2024 +0000

    Revert "Add Perfetto V8 DataSource"
    
    This reverts commit 31dd6d580b31148583c06ca31c442e4232d28337.
    
    Reason for revert: Breaks https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20perfetto%20-%20builder/29733/overview
    
    Original change's description:
    > Add Perfetto V8 DataSource
    >
    > Add support for a V8 DataSource to log code events.
    >
    > Bug: b/283794416
    > Change-Id: I1d2db23854c5753efd68bb63ea31913e80909eb0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5137675
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91919}
    
    Bug: b/283794416
    Change-Id: I400f3116efa3ba55f86652bb41f720f6ca9a1deb
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5217091
    Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91921}

commit 3be49bb5503f9d1c64351b2d524d0a3d5aef511f
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Jan 18 16:34:52 2024 +0000

    Refactor remembered set updating logic for write-protected slots
    
    Instead of checking for each slot whether the slot requires a
    WriteProtectedSlot wrapper, we can check this once for the entire page,
    which is a bit more efficient.
    
    Change-Id: I1c894415c6fd014844e76b349d74405f37590aef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210754
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91920}

commit 31dd6d580b31148583c06ca31c442e4232d28337
Author: Carlos Caballero <carlscab@google.com>
Date:   Thu Jan 18 19:36:13 2024 +0000

    Add Perfetto V8 DataSource
    
    Add support for a V8 DataSource to log code events.
    
    Bug: b/283794416
    Change-Id: I1d2db23854c5753efd68bb63ea31913e80909eb0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5137675
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91919}

commit a134828deaef9e127b5e4d6a712677b12ae74843
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Jan 16 13:00:56 2024 +0100

    [turboshaft] Optimize CharAt on Constant receiver
    
    Bug: v8:12783
    Change-Id: I17b235ebaf21bfd004127eeea85fac1a66791efd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189445
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91918}

commit 674a1b037899865c80398bdcaaa3fff2fe4b19a4
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Jan 19 09:55:45 2024 +0800

    [riscv] Add simd load/store condition in IsLoad/IsStore
    
    STORE_FP/LOAD_FP can be vl/vs/flw/fld/fsw/fsd.
    
    Change-Id: I7f352254e302c444f23d5050255a320fec8721b3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210810
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91917}

commit 68c62e4e416e48c0dfb8580f8d65a9f88b6fd22e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Jan 18 20:05:07 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/3ce655c..3f00831
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/455972c..16519eb
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/48521bc..e9e2619
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/580b4ff..9a16009
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/1a9bebf..f7eb6b5
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758503898527107297
    
    Change-Id: Ic7b793c6a0c33463871790f8678a49fd1c01453d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5213617
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91916}

commit dafd53f40b8e3ab1da525ddb4ed19eb1fb84d437
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Jan 9 15:27:28 2024 +0800

    [loong64][mips64][sandbox] Port two recent changes
    
    Port commit 8cf17a14a78cc1276eb42e1b4bb699f705675530
    [sandbox] Reference Code from FeedbackVector via code pointer
    
    Port commit 4fa7784b10b4148d551500d538db964cfc661f1c
    [sandbox] Reference Code from OSR feedback vector slots via its wrapper
    
    Change-Id: Id959869e8cec468f711218096aec7fe8dd25822c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5179778
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#91915}

commit 1efd463eea56fc6afe74f5090ce2bd937a880c72
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Fri Jan 12 10:59:56 2024 -0800

    [cleanup] Remove an unused root string
    
    The one line that refers to closure_string is unreachable.
    V8HeapExplorer::GetConstructorName is only called from one place, which
    handles JSFunction objects in a different way rather than calling
    GetConstructorName.
    
    Change-Id: I844dd24185ff7d36615ba667617cf74b39f0a994
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5193863
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91914}

commit 3c943745be3e4511e347c2f278a749aa37d9b27e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Jan 18 08:21:10 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/eb9041a..3ce655c
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/a62237c..1a9bebf
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758549196385161665
    
    Change-Id: I68f198633bf17e1d2a89b75cfa0ba1a0bfcfe130
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5211154
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91913}

commit 16f9aac2b8b4fd89768519b130afff47728b9136
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Jan 18 17:18:26 2024 +0100

    [maglev] CSE
    
    A GVN style (but greedy) common subexpression elimination.
    
    Every value node has a hash called `value_number` constructed from a
    "seed" value for immediate arguments, the opcode and every input
    value node. Expressions with the same value number are candidates for
    de-duplication. Candidates are verified by checking the opcode and
    every input for equality. If this check succeeds the instruction must
    be identical as long as we ensure there are no collisions in the
    "seed" value.
    
    Instructions marked allocating or reading also participate in CSE.
    Most allocating instructions do not create something uniquely
    identifiable, those that did were marked `not_idempotent`.
    Instructions marked reading are only available for elimination within
    an `effect_epoch`. Epochs increment with writes.
    
    Bug: v8:7700
    Change-Id: Ic6bfd65bb8141185866ff2a7b099415fa41c9e80
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4765634
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91912}

commit 63f5f799ccdfbf62dc27abf77e2bb6942093c4fa
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Jan 18 11:37:48 2024 +0000

    [wasm][cleanup] Remove a redundant output parameter
    
    The entries of a {WasmTableObject} can be easily and efficiently be
    retrieved via the {entries()} accessor, hence there is no need to return
    them via output parameter from the {WasmTableObject::New()} method.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I40546b39d7109517247bd2b1dd5035ac3bc55342
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210752
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91911}

commit 897757e2416f74ef06d28a5611b0793e5f227f28
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Jan 2 14:16:38 2024 +0100

    [cleanup] Clang Tidy: readability
    
    Spotted by Google3. Rationales:
    
    go/clang_tidy/checks/readability-container-size-empty
    go/clang_tidy/checks/readability-redundant-smartptr-get
    go/clang_tidy/checks/readability-redundant-control-flow
    go/clang_tidy/checks/readability-redundant-smartptr-get
    go/clang_tidy/checks/misc-unused-using-decls
    
    Change-Id: I265f4de0dcf35f4165871d671225f9b4e8737146
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5156710
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91910}

commit f8b096832b215b90b67442f1c725f52ac136bb84
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Jan 18 15:50:06 2024 +0100

    [turboshaft] Port CsaLoadEliminationPhase to Turboshaft
    
    We run the existing LateLoadElimination at the beginning of the CSA
    pipeline and by that every phase of the builtin compilation runs on
    the Turboshaft infrastructure (except for the initial graph
    construction).
    
    Bug: v8:12783
    Change-Id: I124840cfffacdcc6cb62777f3d304a32631fa07d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189023
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91909}

commit 3ae27a76960b8982ce0f8dc5bb4efbdef8be8eef
Author: Carlos Caballero <carlscab@google.com>
Date:   Thu Jan 18 14:13:48 2024 +0000

    [deps] Roll Perfetto
    
    Update Perfetto to get the new v8 data source proto.
    
    Full log since the last roll:
    https://android.googlesource.com/platform/external/perfetto.git/+log/446adf5b7bb4..6fc824d618d2
    
    Change-Id: I5f3195743a1ccb4b6183ed48c8fb2930e3eb78a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210478
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Carlos Caballero Grolimund <carlscab@google.com>
    Cr-Commit-Position: refs/heads/main@{#91908}

commit e374b026243b0711912c305af883af35b174d777
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Jan 18 15:38:33 2024 +0100

    [cleanup] Rename keyed store and load modes
    
    It changes the enum to enum class and rename the modes to
    more expressive names.
    
    Bug: v8:14568
    Change-Id: Id8f878175bd878ec7dfd1618ec80c49c78213acf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5205070
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91907}

commit 6caa24fd850cda085905a5aaff19d591f0c34b50
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Jan 18 14:56:50 2024 +0100

    [wasm] Handle failed CreateDataProperty in OnInstantiationSucceeded
    
    On ChromeChrash we see crashes in InstantiateBytesResultResolver::
    OnInstantiationSucceeded when CreateDataProperty fails on a newly
    allocated object. We assume that these fails are caused by
    TerminationExceptions. This CLs replaces the existing checks that
    CreateDataProperty always succeeds with checks that if
    CreateDataProperty fails, then it fails because of a
    TerminationException.
    
    Bug: chromium:1515227
    Change-Id: Ic1fd8f8407f62867d2aaecdc89d3fec39e3b5257
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210477
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91906}

commit b809fd6d66b82bb6b87bf26c91b9d1ffb1f20216
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Jan 18 15:26:12 2024 +0100

    [compiler, turboshaft] Add an Assert operation
    
    Bug: v8:12783
    Change-Id: Iefd8997d3d2b889f6fdea5c822679c5af230efb5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210753
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91905}

commit c65b646c69520c57e7ff6bfb7ae1260a4d4686ea
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue Jan 16 12:16:01 2024 +0100

    [heap] Fix InternalizeString() overloads
    
    The overloads should forward the `convert_encoding` parameter.
    
    Change-Id: I75dca3968130e91c22d634cf03ddfc3d65f6807e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5200235
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91904}

commit 84b3d28a896ffb7be26c21974bd03d76a9d379d0
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Jan 18 12:48:41 2024 +0100

    [ic] Special case holey doubles to avoid deopt-loop
    
    Bug: v8:14568, chromium:1519377
    Change-Id: I06fdf65a800daa8253d3d162eee1d2aa2c42568c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210750
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91903}

commit 69a0ef2ddda9bdea1f05c17411ca3faa41ba3200
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Jan 18 09:46:55 2024 +0100

    Reland "[sandbox] Use a protected pointer to reference Code from IStream"
    
    This is a reland of commit ae36d6471f8e32d08b6c5c3dfdcfb5307dfed64d
    
    Missing PKU support has been added.
    
    Original change's description:
    > [sandbox] Use a protected pointer to reference Code from IStream
    >
    > For moving Code objects out of the sandbox, we temporarily used a code
    > pointer (i.e. an indirection through the CPT) to reference an IStream's
    > Code object. However, this is relatively expensive as the Code object is
    > accessed during BailoutIfDeoptimized, which happens at the start of
    > every optimized function. As such, this CL now turns the reference into
    > a protected pointer, which is only possible now that all (JIT-generated)
    > Code objects live in trusted space. For this, InstructionStreams must
    > now be TrustedObjects as they aren't allowed to contain protected
    > pointers otherwise.
    >
    > Bug: chromium:1500887
    > Change-Id: I73169abf460bb2ee9a2404a30cdf52168f9e6393
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189447
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91894}
    
    Bug: chromium:1500887
    Change-Id: I437199e1310dd0e73fd8f0f14fa34c7aff62cb9e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5210250
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91902}

commit 4648b7208f91983d8583f120c4864341c031efe0
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Jan 16 14:40:48 2024 +0100

    [wasm] Remove always-enabled --wasm-final-types
    
    Bug: v8:14034
    Change-Id: I321ddf05cafb0ce35e97f348bfbb5969bfec841e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201027
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91901}

commit 8c9a2a84479a13c71020644154e632cfec30c36b
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Tue Jan 16 09:54:07 2024 +0100

    [json-parser] Add more DCHECKs
    
    Bug: chromium:1503456
    Change-Id: I11610111c08b3a6005933e5bb52c262f849f153c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5198872
    Auto-Submit: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91900}

commit f57dbf09df2340d4a072c9f6bf2486811e5b2385
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Jan 17 14:13:46 2024 +0100

    [turboshaft][wasm-gc] WasmGCTypeAnalyzer: Ignore bottom types in Phi merging
    
    The bottom type is used to indicate an uninhabitable value in the
    analysis. This means, it can only be used in unreachable code.
    The one exceptions are phis.
    
    If any input value of a phi is uninhabitable, it only means that it
    will never receive its value from that predecessor, therefore the
    bottom type must be ignored.
    Otherwise (prior to this change) the union type merges the input types
    to bottom as well indicating that the phi value itself is
    uninhabitable (which it isn't).
    
    Bug: chromium:1514072
    Change-Id: I2cbdb2be05db912bc422e3d44ca44efcb6f0e513
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5204427
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91899}

commit fdb13b75946403a7f69edf9f6b8e7b081f48f057
Author: Alex Rudenko <alexrudenko@chromium.org>
Date:   Wed Jan 17 21:08:26 2024 +0000

    Mark multiple CDP methods as stable
    
    The methods are used by various clients and we do not
    expect them to have breaking changes. Marking them as
    stable to reduce the number of methods to be considered
    experimental.
    
    Bug: chromium:1519199
    Change-Id: Icf346b432b8f23bb072cdad0929968b895594abf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5206811
    Commit-Queue: Alex Rudenko <alexrudenko@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91898}

commit e67ec10fc8ecca32cf554cd7f73e11dd76bb4749
Author: Simon Zünd <szuend@chromium.org>
Date:   Wed Jan 17 13:36:27 2024 +0100

    [debug] Extract GetTopLevelWithRecompile helper
    
    debug-evaluate needs the similar logic to rematerialize the toplevel
    SFI if it's gone so we share it with the breakpoint logic.
    
    R=bmeurer@chromium.org
    
    Bug: chromium:1510427
    Change-Id: I04db1762b49c15df69bd8f093a154e90864eb49b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5204429
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91897}

commit 22bed1b5afcfb5a488d8e7e19a4b7f532caf8c38
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Jan 17 20:05:07 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/ff4e12a..eb9041a
    
    Rolling buildtools/linux64: git_revision:8bd36a27c0764c869d40ac4102a24720b781b389..git_revision:b5adfe5f574d7110b80feb9aae6fae97c366840b
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/9c6956f..48521bc
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/8345877..580b4ff
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/f59e4ce..63c0cec
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758594495479001473
    
    Change-Id: Id34cc076a6ed62d91012fc77062da9558bfcda7a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5209690
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91896}

commit 475bf460685034488fb97cdacf0723a9c3d0f8a6
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Wed Jan 17 18:20:38 2024 +0000

    Revert "[sandbox] Use a protected pointer to reference Code from IStream"
    
    This reverts commit ae36d6471f8e32d08b6c5c3dfdcfb5307dfed64d.
    
    Reason for revert: Fails on LinuxX64 PKU bots https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20PKU/2203/overview
    
    Original change's description:
    > [sandbox] Use a protected pointer to reference Code from IStream
    >
    > For moving Code objects out of the sandbox, we temporarily used a code
    > pointer (i.e. an indirection through the CPT) to reference an IStream's
    > Code object. However, this is relatively expensive as the Code object is
    > accessed during BailoutIfDeoptimized, which happens at the start of
    > every optimized function. As such, this CL now turns the reference into
    > a protected pointer, which is only possible now that all (JIT-generated)
    > Code objects live in trusted space. For this, InstructionStreams must
    > now be TrustedObjects as they aren't allowed to contain protected
    > pointers otherwise.
    >
    > Bug: chromium:1500887
    > Change-Id: I73169abf460bb2ee9a2404a30cdf52168f9e6393
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189447
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91894}
    
    Bug: chromium:1500887
    Change-Id: I1fb3a7e5a42f21136639603f05ab89be8710e149
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5204882
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91895}

commit ae36d6471f8e32d08b6c5c3dfdcfb5307dfed64d
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 17 15:12:23 2024 +0000

    [sandbox] Use a protected pointer to reference Code from IStream
    
    For moving Code objects out of the sandbox, we temporarily used a code
    pointer (i.e. an indirection through the CPT) to reference an IStream's
    Code object. However, this is relatively expensive as the Code object is
    accessed during BailoutIfDeoptimized, which happens at the start of
    every optimized function. As such, this CL now turns the reference into
    a protected pointer, which is only possible now that all (JIT-generated)
    Code objects live in trusted space. For this, InstructionStreams must
    now be TrustedObjects as they aren't allowed to contain protected
    pointers otherwise.
    
    Bug: chromium:1500887
    Change-Id: I73169abf460bb2ee9a2404a30cdf52168f9e6393
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189447
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91894}

commit b67a2f5d905185b2c095a3f2a2db31c0cd5d0a30
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Tue Jan 16 17:03:03 2024 +0100

    [libsampler] Remove overzelous dcheck
    
    There is no mutex to properly synchronize the the samplers when
    starting or stopping them, so we cannot rely on it for the DCHECK.
    
    Drive-by-fix:
    StopProfilerThread can be called a bit earlier in Isolate::Deinit().
    
    Bug: v8:14562
    Change-Id: I82df2d0cf67b53d602d38bdeeef57af597c14758
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201446
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91893}

commit 750f7182fba1de1b25a1802298b31dab144cd6e8
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Jan 17 16:54:40 2024 +0000

    [liftoff] Merge two implementations of signature checks
    
    The signature check for a specific type and the one for nullability were
    nearly identical, except for the final check (in one case for
    "== expected_sig", in the other for "!= -1").
    This CL shares the implementation for these two checks.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564
    Change-Id: I93ed0580ce421993a9ce069d400ed59581331c0d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5205090
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91892}

commit e646bf851a7594c73dd11a56694f961a64f62a07
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Jan 17 08:11:17 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/f273bb8..ff4e12a
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/b380063..455972c
    
    Rolling buildtools/linux64: git_revision:5d76868385b81d6c4fb3256240a2ce449c37b5ee..git_revision:8bd36a27c0764c869d40ac4102a24720b781b389
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/5fe3232..5ff8c1f
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/e8bd6ce..24cb554
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758639793688202897
    
    Change-Id: Icdab114c9caf49835cc6596b8b527ee2adc8850d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5205911
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91891}

commit 01a71263b57e76c9d5ad5c053b591eda05b4698a
Author: Hao Xu <hao.a.xu@intel.com>
Date:   Tue Jan 16 16:36:18 2024 +0800

    Support JCC Erratum mitigation for kX64Cmp and kX64Test
    
    Bug: v8:14225
    Change-Id: I8803c85b4e7a9946bead3d42040bbb6c0ccb883c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097997
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Hao A Xu <hao.a.xu@intel.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91890}

commit 2777b495673be294e997a1819d3a00a4904409db
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 17 15:02:57 2024 +0000

    [sandbox] Keep trusted cage base in IsolateData
    
    This way, we can easily and efficiently reference it from generated
    code, which will be important to read protected pointer fields.
    
    Bug: chromium:1473677
    Change-Id: I33c13189bc3c9d91871e5c4b6c5687e25f7ca983
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5205612
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91889}

commit c6465eaa1e266b8928d4b801f89bb1135ab95aa8
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 17 13:18:11 2024 +0000

    Introduce base::FatalOOM
    
    This function is a simpler version of FatalProcessOutOfMemory that
    simply terminates the process with a recognizable message. It is now
    used as fallback for the higher level OOM routines, but also directly
    from src/base and a few other places where those are not available.
    
    In addition, the new FatalOOM function is now used in
    VirtualAddressSpace::FreePages as it can happen that the decommitting of
    the underlying pages fails, for example when running out of VMAs. In
    that case, instead of a CHECK failure we should fail with an
    out-of-memory error.
    
    Bug: chromium:1515110
    Change-Id: I10f2c6b63a35e7d54c9cd4e548c0e0eb1fd2c61f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189022
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91888}

commit 27a78368d461c74db5ced340727803cef6f9750b
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Jan 16 17:31:56 2024 -0500

    [turboshaft] Fix IsOpmask() on big endian
    
    Reading bytes of a struct as uint64_t reverses the struct
    members on little endian platforms. As a result we
    must also adjust the opcode mask and values on big endian to match
    the order of struct members on these platforms.
    
    Change-Id: I4743d6c8178404db2009e109a304f5b6b39572a8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201151
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91887}

commit 4a64c034197b6f19189354acbd73c534275a94be
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Jan 17 13:34:55 2024 +0100

    Reland "[ic] Update LoadIC to convert holes only if we've seen one"
    
    This is a reland of commit 646b521421351c7555791a7ffb981e3375803b00
    
    Fix 2 issues:
    1. DCHECK was too conservative.
    2. LoadRuntime does not return a hole. We check is_found
     argument instead.
    
    Original change's description:
    > [ic] Update LoadIC to convert holes only if we've seen one
    >
    > Change-Id: I297405c77b85d94b577b92abc0d2aefd0a0e8ceb
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185559
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91785}
    
    Change-Id: I70970263687c130d514e7a34f782e4055345e75e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5199513
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91886}

commit 9d51880cdc3850e83a303a6425eafb7b5bb8ccc4
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Jan 17 14:58:53 2024 +0800

    [riscv] Use enum for Conditions in base-constants-riscv.h
    
    Port commit 2f9eac13ac4c582526761f5e6c95810faafaa4f2
    
    Bug: v8:7700
    Change-Id: I47d0e04afbfdf60a56a0c322dd1733243287b52c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201079
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91885}

commit 50a10d046dc28793cd79325a21282006f6dda17f
Author: Patrick Thier <pthier@chromium.org>
Date:   Wed Jan 17 11:14:50 2024 +0000

    Revert "[csa] Add optional insertion index to AddToDictionary"
    
    This reverts commit d105d9b10da921a1506ff8246647feda4a6316bb.
    
    Reason for revert: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Blink%20Linux/28790/overview
    
    Original change's description:
    > [csa] Add optional insertion index to AddToDictionary
    >
    > In case we add a named dictionary entry only if it doesn't already
    > exist, we already know the insertion index from the lookup and can skip
    > finding the insertion entry (again).
    >
    > Bug: v8:13173
    > Change-Id: I770285e1e0c065d374368810a26b1e4a7f649317
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5199989
    > Commit-Queue: Patrick Thier <pthier@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91878}
    
    Bug: v8:13173
    Change-Id: Idf69d94a6d3e13846b6509114d1256ddab0fd2ac
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5204428
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91884}

commit 1d7118b0d2e05d38c68cda5198bb54b16a8f1021
Author: Felix Hanau <felix@cloudflare.com>
Date:   Tue Jan 16 20:50:41 2024 -0500

    [bazel] Fix building V8 with ICU
    
    The bazel build file for ICU is outdated, which broke building V8 with
    ICU support. Fix the build by adding the missing stubdata header. Clean
    up several defines by using local_defines for ICU-internal definitions
    and deduplicate defines that are inherited from `icuuc`. Do not disable
    warnings that are clean on ICU. Also make the `icudata` target public
    to allow V8 embedders to more easily import the ICU data blob.
    
    R=victorgomes@chromium.org
    
    Bug: v8:14392
    Change-Id: I54ccbfddda54e9566b0ea2f0dee3a2f51869f08d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201460
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91883}

commit 7640cf10859aac753f789f08beae932b2827ca69
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Wed Jan 17 10:27:17 2024 +0100

    [turboshaft] DCHECK that all IFs have a matching END_IF
    
    Bug: v8:12783
    Change-Id: If0f14abafb94e3fe98981ac23664f60604d9ae2c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5204325
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91882}

commit 73172d3eb52037f4bb4f7e483c38e60de48ecc78
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Jan 17 09:32:42 2024 +0100

    [maglev] Fix deadlock while canceling compilation threads
    
    It is possible for a background compilation thread to be blocked in an
    allocation waiting for gc. Therefore, we must allow the compilation
    thread to make progress to be able to cancel it while blocking on the
    main thread. This change brings maglev in line with the
    OptimizingCompileDispatcher.
    
    Fixed: v8:14523
    Change-Id: I829233bddb2b1c0a3fce42e14234dc664aad3d06
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5202849
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91881}

commit 1285ee44a9e5207a8c1302bfaa745ca06f0a90a8
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Jan 17 09:41:46 2024 +0000

    [wasm] Check the cached memory for growability
    
    Instead of always checking memory 0, do check if the actually cached
    memory is growable.
    
    R=jkummerow@chromium.org
    
    Bug: chromium:1518257
    Change-Id: I40f631fe37462246b4d23b77f704f23b11b7144a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5204426
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91880}

commit d084010d950f31dcb55b4b772096018b8fac10ad
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Jan 17 10:31:09 2024 +0100

    [heap] Fix SimulateNewspaceFull
    
    crrev.com/c/5184135 merged AddFreshPage and AddPageBeyondCapacity into a
    single TryAddPage method. This turned out to be problematic becuase
    during testing with --stress-incremental-marking, SimulateNewspaceFull
    may allocate beyond the target capacity.
    Fix by introducing a dedicated for testing method that cannot allocate
    beyond the target capacity.
    
    Drive-by: Rename TryAddPage to TryAllocatePage.
    
    Bug: v8:14554
    Change-Id: I38badd77698af09fe9b2653a5ece8e975d7101a6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201147
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91879}

commit d105d9b10da921a1506ff8246647feda4a6316bb
Author: pthier <pthier@chromium.org>
Date:   Wed Jan 17 10:15:25 2024 +0100

    [csa] Add optional insertion index to AddToDictionary
    
    In case we add a named dictionary entry only if it doesn't already
    exist, we already know the insertion index from the lookup and can skip
    finding the insertion entry (again).
    
    Bug: v8:13173
    Change-Id: I770285e1e0c065d374368810a26b1e4a7f649317
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5199989
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91878}

commit 52d489f16416f7e83b47368544c65c4f305b0c5b
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Jan 17 10:09:02 2024 +0100

    Reland "[maglev][x64] Fix for TryDoubleToUInt32" and "[maglev][arm64] Fix for TryDoubleToUInt32"
    
    This is a reland of commit 9f862106401936c9be359826c8565dd448713f2b
    and commit ac76610684a88d5c9612e24c6e7001d18113745a.
    
    Fix: ensure negative Cmp immediates are cast to uint32.
    
    Original change's description:
    > [maglev][x64] Fix for TryDoubleToUInt32
    >
    > Typo when trying to convert a double to uint32. Conversion was to an
    > int32 instead of an int64, which causes all uint32 with the most
    > significant bit set to fail, when they should pass.
    >
    > Bug: v8:7700
    > Change-Id: I5fb45f6e74e7f005a5c84180db0a724e323ff089
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197691
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91863}
    
    Bug: v8:7700
    Change-Id: I61f5e2a67b2ebd9fb25937a413721141de212715
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5204425
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91877}

commit 6cfd2a028b8db49c88b2d99d1eaa90ee615ec42d
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Jan 17 10:33:30 2024 +0100

    [gm.py] Automatically run 'gcert' if needed
    
    When the Reclient/Google configuration is detected, check if
    a valid cert is present, and run `gcert` otherwise.
    
    No-Try: true
    Change-Id: Ia56bf467d85dce2ba133958d5d5393b9cda5fc8a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201150
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91876}

commit 6379b98a8777a4bd68eaf5d2105797c2322c57d2
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Jan 16 15:59:59 2024 +0000

    [liftoff] Use static integer for the canonical sig id
    
    Liftoff code is never serialized, so the canonical signature ID does not
    need to be loaded from the instance. Instead we can just embed it as a
    static constant in the code.
    
    This avoids two loads for each indirect call in Liftoff.
    
    R=ahaas@chromium.org
    
    Bug: v8:14564, v8:14567
    Change-Id: I4877bb2b5c0610422c81c0114bdb579ed3b395a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201588
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91875}

commit 73ae990c0a7624bff7df04ac6c0bfe7f6e321c17
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 17 08:31:44 2024 +0000

    Release TRUSTED_TO_TRUSTED set when releasing MemoryChunk memory
    
    Similar to the other remembered sets, we should also release the
    TRUSTED_TO_TRUSTED set when releasing all memory associated with a
    MemoryChunk.
    
    Bug: chromium:1473677
    Change-Id: Ia0ed4ca88f524bc761348dd5ac78aa7840845a93
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5203188
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91874}

commit ac2a5b54d8ba4d850fb4b32708640b9657093f63
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Jan 16 14:38:09 2024 +0100

    [turboshaft] Disable front-end mjsunit test with concurrent inlining
    
    Bug: v8:14560
    Change-Id: I5575ca94e188f2e92952ab8a0d0b6e2df97da315
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5199993
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91873}

commit ca32978c5eff989588b38782db112e349dc0cd1f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 16 20:05:43 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/8027e9a..f273bb8
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/3ee479b..b380063
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/be17f2f..9c6956f
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/9f668bb..8345877
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/aa4b867..ea028d4
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/39b08eb..f400fdb
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/956936c..f59e4ce
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/0dfe545..a62237c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758685091418016417
    
    Change-Id: Iedcc27580c349e7b563317a2b7502cab1867ed01
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5200943
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91872}

commit 4f7cd6206d415f5bdf0426dd7bd8ca179c08e719
Author: Seokho Song <seokho@chromium.org>
Date:   Wed Jan 17 06:47:03 2024 +0900

    Enhance condition to compare 'length' for array [[DefineOwnProperty]]
    
    The existing implementation checks the string primitive heap address of 'length' when deciding to return ArraySetLength(A, Desc) in [[DefineOwnProperty]] as specified by the ECMAScript standard.
    
    However, this approach falls short in scenarios where 'length' is created through operations like concatenation, making address comparison does not work expectedly.
    
    Therefore, Internalize the name argument to same address of 'length' already stored in the heap.
    
    Bug: v8:14530
    Change-Id: Ie8ce8dfd909be3fb3e5ccb96edc57fb73e9e6977
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5182774
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Seokho Song <seokho@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91871}

commit 6202ac15332500c4742ab934e86e0ce66c47391c
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Jan 16 11:45:38 2024 -0800

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/c8cd1368..a1ba783c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758964432662831425
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Fixed: v8:14552
    Change-Id: I4dccbd6821cb624bbad2e451be9881d0bbcd6137
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5196666
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91870}

commit 8cd1e89fae9005237bba014fad72bddc0434394b
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Jan 16 16:12:52 2024 +0000

    [sandbox] Move runtime-generated Code objects out of the sandbox
    
    With this CL, runtime-generated (i.e. JIT compiled) Code objects are now
    allocated in trusted space, outside of the sandbox. However, builtin Code
    objects are still inside the sandbox, in the shared read-only space.
    However, for uniformity we will probably want to move them into trusted
    space as well in the future.
    
    Bug: chromium:1500887
    Change-Id: Ic42152de938ff8eaea63db4ec951826829114d60
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126371
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91869}

commit c40d25a064a6bbd4b9cef9a0d34301c463a1b3de
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Jan 16 11:05:29 2024 -0800

    [builtins] Fix new Set(setIterator) fast path
    
    The fast path for constructing a new Set from a builtin Set iterator can
    bail out to the slow path _after_ exhausting the input iterator.
    
    Bug: v8:13621
    Change-Id: I1e4850bec72f039a5a32ddab2f42a397e6a307fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5193412
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91868}

commit 3ea32638704f79c975178e4d785ca3d5e67baee2
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 16 08:11:38 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/5d836ed..8027e9a
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/7e93f2c..3ee479b
    
    Rolling buildtools/linux64: git_revision:b8562a4abd9528372f274b1155aec65c57ca84fa..git_revision:5d76868385b81d6c4fb3256240a2ce449c37b5ee
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/6fd04d1..be17f2f
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/53801f2..e8bd6ce
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758730384218901009
    
    Change-Id: I8516e423151ac34b13d33ae9786fb198888f8e3b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5200216
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91867}

commit 37263ad9fe4977157ab3934d6385478e53aad829
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Jan 16 19:08:57 2024 +0000

    Revert "[maglev][x64] Fix for TryDoubleToUInt32"
    
    This reverts commit 9f862106401936c9be359826c8565dd448713f2b.
    
    Reason for revert: unittest crashes
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Mac%20-%20arm64%20-%20debug/15795/overview
    
    Original change's description:
    > [maglev][x64] Fix for TryDoubleToUInt32
    >
    > Typo when trying to convert a double to uint32. Conversion was to an
    > int32 instead of an int64, which causes all uint32 with the most
    > significant bit set to fail, when they should pass.
    >
    > Bug: v8:7700
    > Change-Id: I5fb45f6e74e7f005a5c84180db0a724e323ff089
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197691
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91863}
    
    Bug: v8:7700
    Change-Id: I1b2959b58eec0d7ba3995885cc52db7084a47620
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201968
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Owners-Override: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91866}

commit 4781db4ca41efe9cd09069ddc9e7dc86e9615859
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Jan 16 19:10:00 2024 +0000

    Revert "[maglev][arm64] Fix for TryDoubleToUInt32"
    
    This reverts commit ac76610684a88d5c9612e24c6e7001d18113745a.
    
    Reason for revert: unittest crashes
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Mac%20-%20arm64%20-%20debug/15795/overview
    
    Original change's description:
    > [maglev][arm64] Fix for TryDoubleToUInt32
    >
    > Properly catch overflow condition.
    >
    > Bug: v8:7700
    > Change-Id: Ia9b5a4b980f22108a715bae22280c1418504b7dd
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201026
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91864}
    
    Bug: v8:7700
    Change-Id: I58ccebc4ac1ef2b9b13c1ce6042d191f5ffa3a10
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201969
    Owners-Override: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91865}

commit ac76610684a88d5c9612e24c6e7001d18113745a
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Jan 16 15:41:16 2024 +0100

    [maglev][arm64] Fix for TryDoubleToUInt32
    
    Properly catch overflow condition.
    
    Bug: v8:7700
    Change-Id: Ia9b5a4b980f22108a715bae22280c1418504b7dd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201026
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91864}

commit 9f862106401936c9be359826c8565dd448713f2b
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Jan 16 14:42:05 2024 +0100

    [maglev][x64] Fix for TryDoubleToUInt32
    
    Typo when trying to convert a double to uint32. Conversion was to an
    int32 instead of an int64, which causes all uint32 with the most
    significant bit set to fail, when they should pass.
    
    Bug: v8:7700
    Change-Id: I5fb45f6e74e7f005a5c84180db0a724e323ff089
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197691
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91863}

commit 1b60f3b3f6edc1d0c7869006dceddde04414234d
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Tue Jan 16 14:16:56 2024 +0100

    [build] Fix reclient detection if gm.py is symlinked
    
    If gm.py is symlinked to some other location (e.g., `~/bin/gm`) then
    `V8_DIR = Path(__file__).absolute()...` will point to the wrong
    directory, hence thinking there is no `.gclient` file, hence falling
    back to goma and erroneously updating `args.gn` (in my case at least).
    
    Use `Path.resolve()` instead, which not only gives an absolute path
    but also resolves all symlinks.
    
    Change-Id: Ia77caffa6d2376f185b1583ca36e449de9421918
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5199990
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91862}

commit cf6c8f28181441e84daf09d72d71826cb5d767ed
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Jan 16 14:26:29 2024 +0100

    [wasm] Fix deadlock in EstimateCurrentMemoryConsumption
    
    To read the current size of a CompilationStateImpl more accurately,
    we need to acquire a mutex, which can deadlock when that mutex is
    held elsewhere by another thread. To fix this, we replace the
    mutex-guarded field reading with heuristics, which should only cause
    a small loss of accuracy in this case.
    
    Fixed: chromium:1497386
    Change-Id: Ice6c4e6ff96235ff688b26c8837575a37e97e492
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5199991
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91861}

commit bed95642cb2f4d5e9dc490d5b58085b1f2a3c870
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Jan 16 13:53:10 2024 +0100

    [turboshaft][wasm] Stage all official instruction selections
    
    This stages the previously experimental instruction selections for
    wasm on:
    - ia32
    - arm
    - arm64
    
    Note that x86-64 was already staged prior to this CL.
    
    Bug: v8:14108
    Change-Id: Ie4957a2188c76588c8d1ef2a8f5d2f8cab524cf6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5201025
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91860}

commit 9ee049a251ef7c38cdad4a2544d0e2c680b3dfbe
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Jan 16 10:24:23 2024 +0100

    [wasm-gc] Remove experimental wasm-gc flags from tests
    
    This CL removes the following flags from all tests:
    (They are already enabled by default and shipped.)
      --experimental-wasm-gc
      --experimental-wasm-typed-funcref
      --experimental-wasm-js-inlining
    
    Bug: v8:14034
    Change-Id: I3c791392bc800a1195d4b693e828b2e70d476333
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197694
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91859}

commit 182ebc57f23742e7c0b200cee8280eb2e8f57832
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 16 03:38:23 2024 -0800

    [tools] Update gcmole
    
    R=leszeks@chromium.org
    
    Change-Id: I2ab475876693b9da1b95a763bf47e50ece091ce3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5200666
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91858}

commit a765decfd6b648124b9586a7d30efcde4f34db85
Author: Simon Zünd <szuend@chromium.org>
Date:   Tue Jan 16 10:19:36 2024 +0100

    [inspector] Track command line API functions with v8::PrimitiveArray
    
    This CL changes the CommandLineAPIScope to track installed methods
    via v8::PrimitiveArray instead of via a v8::Set. This makes
    installing the functions save w.r.t. to termination.
    
    If execution terminates in the middle of the loop that installs
    the functions, one of the v8::Set::Add call will fail and return
    an empty handle. On the next loop iteration we would then attempt
    to access the empty v8::Set handle.
    
    Alternatively we could check for termination explicitly, but the
    proposed CL is also slightly more performant since we don't have
    to go via the Set builtin but use a FixedArray directly.
    
    R=bmeurer@chromium.org
    
    Fixed: chromium:1516870, chromium:1514048
    Change-Id: I0238c18daf84a819661a639d3ac144f254dc213c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5198573
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91857}

commit 510f8034d48e18a9c65ddc2eeaf2304dc523ce31
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Tue Jan 16 09:58:58 2024 +0100

    Fix clang readability issues
    
    These popped up in the google 3 import of V8.
    
    Change-Id: I8982d93936a983539b6d58fd4d0f2bc69b6354f0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5148989
    Auto-Submit: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91856}

commit 3c83488f0b02cf0baa53fdf92d0fc1af940cb548
Author: Ludovic Mermod <ludovic.mermod@gmail.com>
Date:   Tue Jan 16 10:49:00 2024 +0100

    Reland "[regexp] Adding Captureless Lookbehinds in Experimental"
    
    This is a reland of commit 44482e68ea820b66b93e1863f9ba7d69260256b8
    
    Fix failing tests (https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20fyi/37014/overview) by:
    - Adding a missing `/.*/` at the start of each lookbehind
    - Inverting the condition checking whether lookbehind had matched
    - Forbidding lookbehinds and the global/sticky flags in Experimental
    
    Original change's description:
    > [regexp] Adding Captureless Lookbehinds in Experimental
    >
    > Each lookbehind is compiled as an independent automaton. These automata
    > are executed in parallel with the main expression. Upon completing a
    > match they write a boolean in a truth table (`lookbehind_table`), reset
    > at each new string position. The thread of the expression containing
    > the lookbehind checks the truth table and is either discarded or kept
    > alive.
    >
    > This work was supervised by Aurèle Barrière, from SYSTEMF at EPFL.
    >
    > Bug: v8:14435
    > Change-Id: Ic6fb60e57ae499c18bcf4920e312b7023c8e0174
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006443
    > Commit-Queue: Patrick Thier <pthier@chromium.org>
    > Reviewed-by: Patrick Thier <pthier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91218}
    
    Bug: v8:14435
    Change-Id: Ifb73eb63b1b364ef5648d4a1ad9231f1b2edd1ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093860
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91855}

commit 23d601dcf4f6d9b51b7063a4ee3839e55694889b
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Jan 16 11:06:40 2024 +0100

    [gcmole] Make archives timestamp independent
    
    The previous method still created different timestamps after new
    checkouts, which on bots basically happens daily.
    
    No-Try: true
    Bug: v8:11169
    Change-Id: I6116f9947ac14be4a0fcef70b85317212ad4f812
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5200225
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91854}

commit f978b11c09b4749b14ae2193d86ce02d1f6ebb63
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Jan 16 10:27:14 2024 +0100

    [test] Bump gcmole shards
    
    It became the slowest step on some bots.
    
    Bug: v8:11428
    Change-Id: Icb3d43839c5044bfd9e949e39f8c7812c9e9222b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5199139
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91853}

commit 630e0d8a0b5c164374da81e8f0e04f8d7ca57fd8
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Jan 15 15:57:06 2024 +0100

    [wasm] Update spec tests
    
    Change-Id: If633b451d1568eb90a107f0b43b1538eb5db66ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197676
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91852}

commit fc91c4ee28130d3626ba6ad307c087c0955588eb
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Jan 16 11:04:11 2024 +0800

    [loong64][mips64] Use typed enum for arch-specific Condition
    
    This is required by maglev.
    
    Change-Id: I194c14e47ee5c267b7707b37d02a485e769005cc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5198596
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91851}

commit 728df915580d91f4270f30fc1b3982b90d5a5345
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Jan 15 15:25:47 2024 +0800

    [riscv][wasm][liftoff] Optimize in-bounds atomic operations
    
    Port commit 6fece1bf2923a94fba5046316c07db0996140b62
    
    Change-Id: If080c20a6355c1e1f8a5fd7e3f4911c71192e22b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197210
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91850}

commit fccf560691315c611318cf52e5322f0ca561ee17
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Jan 15 20:05:31 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/5215f51..5d836ed
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/e09e0d4..39b08eb
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758775688641486257
    
    Change-Id: Ifc38b8d5541f04c46c740aa183c51afd4f8598f4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5198892
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91849}

commit 5218c4cf6e9932cd0fae1431d7339f8efea1523c
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Jan 15 14:08:16 2024 -0500

    PPC/s390: [turboshaft] Add skeleton for graph builder from Maglev
    
    Port a0e807474660d1a64456be3ed5f17057985b7eaa
    
    R=dmercadier@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I45951ad4d3c3b1dd58d1dad609c0ceee4d6c4d0a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197858
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Reviewed-by: Milad Farazmand <mfarazma@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91848}

commit e1e9d790534224fe5922254198242daa40d5a160
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Mon Jan 15 16:55:24 2024 +0800

    [revec][wasm][turboshaft] Port wasm revectorization phase to
    turboshaft, part 1
    
    Implement the basic framework and the store seeds collecting.
    
    Bug: v8:12716
    
    Change-Id: If9aeddab84ee133d3ef7d131952ca2e00d78828a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5129952
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91847}

commit 5bc7b437d726ebceec4b97cb3724aea50f8ebb80
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Jan 15 16:28:37 2024 -0500

    PPC/s390: fix atomic operations on liftoff
    
    PREP_MEM_OPERAND is moved down on s390 to match other
    atomic functions, this makes sure `ip` does not get set as a pinned
    register.
    
    PPC might need to use `r0 = 0` to account for no_reg which makes
    having the DCHECK redundant.
    
    Change-Id: I965a84d5a2faadb527e6bf30d28230519aef33a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5198249
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91846}

commit 7f48756221ef0121d0e97eb2152d764224a577b9
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Jan 15 08:17:51 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/deb732a..5215f51
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/d572199..7e93f2c
    
    Rolling buildtools/linux64: git_revision:5fd939de8a66c915778c14a2788a857be858ef6c..git_revision:b8562a4abd9528372f274b1155aec65c57ca84fa
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6592c25..9f668bb
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/69115fd..53801f2
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/a1171ad..aa4b867
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758820984107829265
    
    Change-Id: I4057f74ec8a95428fb4de25eba75c82beca34dc0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197677
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91845}

commit 253cdfab5f7539018f07f1c44ea3e05eb40f37f0
Author: Eric Leese <leese@chromium.org>
Date:   Mon Jan 15 14:47:26 2024 +0100

    Fix promise chaining for Promise.race to match Promise.any
    
    Current behavior seems to be a bug, and there is no apparent reason
    why this condition should be different for Promise.race vs any/all.
    This fixes an issue a customer complained about, where we did not
    recognize a promise would be caught when a Promise.race was involved.
    Change adds catch prediction tests for Promise.race/any/all.
    
    Fixed: chromium:1511733
    
    Change-Id: Ie3902f15c2dc0fe34da4f569c79954fcb561cf54
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197674
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Auto-Submit: Eric Leese <leese@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91844}

commit d3e5c3191fb3dfdaafc18dae6388702c1b91628e
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Mon Jan 15 14:36:50 2024 +0100

    [wasm][liftoff] Do not emit duplicate safepoints
    
    Bug: chromium:1517243
    Change-Id: I9b99d786552078e19774d5d1379c384832c88b59
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197689
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91843}

commit 5d964777d0adf4fb3458b4391c11753c79d46305
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Jan 15 14:23:03 2024 +0100

    [turboshaft][wasm] Fix inlining budget for wasm-gc modules
    
    In Turbofan we compare:
      initial_size + inlined_size + candidate_size < budget
    In turboshaft we compare:
      inlined_size + candidate_size < budget
    (with the same budgets)
    
    One of the metrics baked into the `budget` is that we always allow
    inlining of up to 10% of the initial graph size.
    Given the wrong comparison, this means that for Turboshaft we allow
    inlining of at least 110% of the initial graph size meaning that huge
    functions can get incredibly large.
    
    This CL fixes these budgets.
    For some wasm-gc benchmarks this results in a ~5% performance regression
    as these benchmarks profit from aggressive inlining while improving
    compile time by about 20%.
    (Note that we have decided to take similar regressions in Turbofan
    for a better compromise of compile time and runtime in commit d420e55
    and commit fc9ab92. These numbers could and should be re-evaluated
    given that Turboshaft has much better compile time, yet the current
    budgets only make sense when comparing the correct numbers.)
    
    Note that linear wasm modules (i.e. no wasm-gc types) are not affected
    by this change as inlining is not enabled for them (yet).
    
    Bug: v8:14108, chromium:1517795
    Change-Id: Ibb0493b654cfa88d0cfc0efb212123179abfd762
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197673
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91842}

commit b34bca075f152bc0292f8a936052da511b49027d
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Jan 12 13:15:04 2024 +0000

    [sandbox] Make InstructionStream a TrustedObject
    
    InstructionStream objects contain executable machine code and so are
    considered trusted. Extending TrustedObject makes this explicit. This
    enables various consistency checks (e.g. that InstructionStream objects
    should never be located inside the sandbox), but also allows IStreams to
    contain protected pointers, which may be needed in the future to
    reference their Code object.
    
    For this, the heap MemoryChunks containing InstructionStreams must also
    be marked as IS_TRUSTED so that the invariant "IsTrustedObject =>
    IsTrustedSpaceObject" still holds. Further, some more tests must now be
    skipped when the jitless mode is enabled as we would otherwise allocate
    InstructionStream objects inside the sandbox since we're not creating
    the external code range in jitless mode.
    
    Drive-by: Introduce InsideSandbox(addr) helper routine containing
    commonly used logic to check whether an address is inside the sandbox.
    
    Bug: chromium:1473677
    Change-Id: Ia889dc7d2f3e10e256d11d5554f5ac32172c9769
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192468
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91841}

commit fce6260dfa9c569601a0f18658994692bc82f805
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Jan 15 12:46:02 2024 +0100

    [gcmole] Update owners
    
    No-Try: true
    Bug: v8:11169
    Change-Id: I517d1dcf4b540cefb38286890bdfdbddaff3eb37
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197669
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91840}

commit f3308e90c942291f3a0569a7e366550dad9d8ce4
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Jan 12 22:00:43 2024 +0100

    [turboshaft][ia32] Instruction Selector part 4
    
    This completes the series, and stages the ia32 turboshaft
    instruction selector behind --turboshaft-future.
    
    Bug: v8:12783
    Change-Id: If7cf6c84cf8538de2c5d3562ac3e8e040d4f366d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5193705
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91839}

commit 1e6739a10c88255ab47a398888885bb5773085c6
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Jan 15 01:48:43 2024 -0800

    [tools] Update gcmole
    
    R=mslekova@chromium.org
    
    Change-Id: Ie091a07ab4ac17819219e6ff8db7fdec64af31c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5198046
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91838}

commit a0e807474660d1a64456be3ed5f17057985b7eaa
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Jan 15 10:34:30 2024 +0100

    [turboshaft] Add skeleton for graph builder from Maglev
    
    Bug: v8:12783
    Change-Id: Ic6b8da5c6d1e7c0fa92285953eb3b29c9b0fed5c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5134813
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91837}

commit 9fb92407592e15ea83f006ddb41e1df909839031
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Jan 15 09:59:25 2024 +0000

    Reland "[sandbox] Reference Code from InstructionStream via a code pointer"
    
    This is a reland of commit 6aeae8406bf5c94252ef1fb71b98a2286609196a
    
    The issues caused by pointers in our tables being updated at a different
    point in time than other pointers during mark-compact have been resolved
    with crrev.com/c/5073673: now the pointers are updated at the same time.
    
    As mentioned below, this change may be temporary: once Code objects
    live in trusted space, we can reference them from InstructionStream
    through a protected pointer instead (basically compressed pointer
    into trusted space), which will be more efficient.
    
    Original change's description:
    > [sandbox] Reference Code from InstructionStream via a code pointer
    >
    > We want to move Code objects out of the sandbox, and for that they
    > should be referenced through trusted pointers. This CL turns the
    > reference from InstructionStream into a trusted pointer. This is not
    > strictly needed for security: the InstructionStream already lives
    > outside the sandbox and so cannot directly be manipulated. However, it
    > is easier to use a trusted pointer here, but we might change this back
    > to a tagged pointer with the trusted cage base in the future.
    >
    > Bug: chromium:1500887
    > Change-Id: I38a65a2aa44118175c6adbf1fb04f4f0a3d4efc6
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013476
    > Reviewed-by: Stephen Röttger <sroettger@google.com>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91205}
    
    Bug: chromium:1500887
    Change-Id: I604fac41e5c83d2e2365051e75618657814c29f5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093836
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#91836}

commit 373edce77280bae79c6c743768224f1a85563f73
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Jan 15 16:45:20 2024 +0800

    [loong64][mips64][wasm][liftoff] Optimize in-bounds atomic operations
    
    Port commit 6fece1bf2923a94fba5046316c07db0996140b62
    
    Change-Id: I7d8cd5441b5e5cb11b21341d35a4010581a3e6f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197388
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91835}

commit f23c983f15d9e351682c43da2b4daa499c764ef1
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Jan 15 09:36:02 2024 +0100

    [cleanup] Apply clang-tidy cleanups
    
    Fix 19 ClangTidyReadability findings:
    
    the 'empty' method should be used to check for emptiness instead of 'size' For more info see go/clang_tidy/checks/readability-container-size-empty (17 times)
    the 'empty' method should be used to check for emptiness instead of comparing to an empty object For more info see go/clang_tidy/checks/readability-container-size-empty
    the 'empty' method should be used to check for emptiness instead of 'length' For more info see go/clang_tidy/checks/readability-container-size-empty
    
    Fix 2 ClangTidyReadability findings:
    
    redundant get() call on smart pointer For more info see go/clang_tidy/checks/readability-redundant-smartptr-get
    the 'empty' method should be used to check for emptiness instead of 'size' For more info see go/clang_tidy/checks/readability-container-size-empty
    
    Fix 2 ClangTidyReadability findings:
    
    redundant return statement at the end of a function with a void return type For more info see go/clang_tidy/checks/readability-redundant-control-flow (2 times)
    
    Fix 1 ClangTidyReadability finding:
    
    the 'empty' method should be used to check for emptiness instead of 'size' For more info see go/clang_tidy/checks/readability-container-size-empty
    
    Change-Id: I152155c3e80a55ab0bd3ad4a5129949230f8f102
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197530
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91834}

commit 7f807404771a33e84887516131ec3b2382e72163
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Jan 15 10:00:00 2024 +0100

    [turboshaft][wasm] Add missing Word->Smi cast
    
    Fixed: chromium:1517219
    Change-Id: Ie54acff99879d54af75c77141db27f9bbd8b3a73
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5190758
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91833}

commit 96582b077effa984a0b1a0b9a954347ab7b86729
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri Jan 12 13:00:18 2024 +0800

    [loong64][mips64][wasm-gc][liftoff] Use trapping null
    
    Port commit 58b43c4a743fadc2a3812296a710e0f8d07f0edb
    
    Change-Id: Ic3b2658a9b0875d9a5deea5716eb98ce39f4d7e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5190790
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#91832}

commit 8d317401ea0981523f8003a7281a1f7262272744
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Jan 15 07:38:53 2024 +0000

    Revert "[presubmit] Work around cpplint errors after python upgrade"
    
    This reverts commit 3f32f3e9c19d4fbe53edaaad376bb5f4c58edc99.
    
    Reason for revert:
    This bootstraps a fresh vpython3 in every sub run, which is more
    than 30% slower and leads to timeouts on the bots.
    
    Also, the upstream work-around has landed in the meantime.
    
    Original change's description:
    > [presubmit] Work around cpplint errors after python upgrade
    >
    > Since the work-around in depot_tools is still blocked, this just forces
    > Python version 3.8 from V8's .vpython3 file when cpplint is used.
    >
    > Bug: chromium:1517826
    > Change-Id: Ic8886efb800fe8f36711279bd7963799d471dc33
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192365
    > Reviewed-by: Liviu Rau <liviurau@google.com>
    > Commit-Queue: Liviu Rau <liviurau@google.com>
    > Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91803}
    
    Bug: chromium:1517826
    Change-Id: I19516fc796096e5b3b266520926566c420ce697c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197527
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91831}

commit 81758d0b2df85410527d6cc36b8fcaf4b1486877
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Jan 15 08:34:29 2024 +0100

    Whitespace to test git watcher
    
    No-Try: true
    Bug: b/319667336
    Change-Id: Ief9fa9220c31d03a892f8684a1de4cc064e5e0e7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5197526
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91830}

commit bc99a57e7888c81946d9479320f74ca911977478
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Jan 12 21:56:22 2024 +0100

    [turboshaft][ia32] Instruction Selector part 3
    
    This now passes mjsunit/wasm/*.
    
    Bug: v8:12783
    Change-Id: I54008423601aaeb89e06e6e4f4df54a284a43120
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5191568
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91829}

commit bc34b7bc5ad745437882c89cea199c264f762540
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Jan 13 20:18:15 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/8e2ad6c..d572199
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/8c1e8ec..69115fd
    
    Roll created at https://cr-buildbucket.appspot.com/build/8758956881542674177
    
    Change-Id: I88415438786acf97e42f2d54ff00d74cd78c0d66
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5195550
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91828}

commit 2cbcfaa44da8a811fa1e5074f64be3ceb88c9353
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Jan 13 08:12:15 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/fuchsia-sdk/sdk: version:17.20240105.3.1..version:17.20240113.0.1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759002181569841329
    
    Change-Id: I485256ad6e58ba9b9f3814768e8bfcd93074198e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5196349
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91827}

commit 7819e1831563e153ff898ae7fd67b266b8be6bb3
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Jan 12 15:52:28 2024 -0500

    s390: [wasm][liftoff] Optimize in-bounds atomic operations
    
    Port 6fece1bf2923a94fba5046316c07db0996140b62
    
    Drive-by: AtomicCompareExchange now uses GetUnusedRegister
    instead of hard coding r2,r3 as result reg could be chosen as
    one of them which then would get overwritten at the end.
    
    Original Commit Message:
    
        Detect statically in-bounds atomic operations and optimize them by
        avoiding the bounds check and doing the index+offset computation
        statically.
    
        Static indexes can happen e.g. for globally defined mutexes.
    
        The main changes are in platform-specific LiftoffAssembler methods which
        now need to handle the case that no offset register is set for atomic
        operations.
    
    R=clemensb@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I6962d2d541c42e160ebebf06b344eb613f31974e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5194204
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91826}

commit 9cb8f2f41d1fd1660033d01cfee581049bb30cd5
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Jan 12 20:03:21 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/24edb3c..deb732a
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/4d143ad..8e2ad6c
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/73730a0..6fd04d1
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/39bc04e..6592c25
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/d1f035a..8c1e8ec
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/05901cd..0dfe545
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759047481097979217
    
    Change-Id: I678c5ed031cb018b9c2594c89ae1c4a6bdbf2f6f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5195526
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91825}

commit 94bfe5ffcb53db038414696d6c7d990f605d46ed
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Jan 12 16:49:00 2024 +0800

    [riscv] Implement InstructionAt
    
    Change-Id: I37da539e4ee9c57b836a8b0bcd05dd7b11202329
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5190789
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91824}

commit ff4d15ea1d53ead19442ee11f42785ca14b883ab
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri Jan 12 19:09:42 2024 +0000

    [set-methods] Ship set methods
    
    This CL ships set methods.
    
    Bug: v8:13556
    Change-Id: I56869e6b76ce0d46738b1f865b1096812f5d1e4b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5190785
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91823}

commit f114c71621513115235c4d81b45685ddee6a2cb8
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri Jan 12 17:30:33 2024 +0100

    [heap] Fix OptimizedPretenuringNestedObjectLiterals test
    
    The test is expecting objects to be pretentured. It relies on getting a
    GC when enough objects for the pretenuring heuristics were allocated
    (and are all kept alive). Getting further GCs afterwards, will reclaim
    all these objects and reset pretenuring decisions.
    Fix by adding a ManualGCScope and bailing out when running with stress
    concurrent allocation mode (which also triggers GCs).
    
    Bug: v8:14522
    Change-Id: I8846a608533f17ca3cb3da8823e3319d79aec2d3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5190761
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91822}

commit e69744a58feefdc2257a379166061429a0f246b9
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Jan 12 17:39:16 2024 +0100

    [turboshaft][ia32] Instruction Selector part 2
    
    mjsunit/wasm/turboshaft/instruction-selection passes now, but
    much work remains to be done for the rest of the test suite.
    
    Bug: v8:12783
    Change-Id: I7ec0869abe9a03585f3ddc2707fffe1882c9b594
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192366
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91821}

commit 99c9261ab446feb25ba569618a0f4905e010ab0b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Jan 12 08:23:10 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/48ef4c0..24edb3c
    
    Rolling buildtools/linux64: git_revision:d4be45bb28fbfc16a41a1e02c86137df6815f2dd..git_revision:5fd939de8a66c915778c14a2788a857be858ef6c
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/312cd04..39bc04e
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/990bc36..05901cd
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759092778039876865
    
    Change-Id: I817c3fe85d0abaadf3ce03e7771020c8de541fd9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5190760
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91820}

commit 7136b7fd2b73bf8714a29a7ab0373490eab5eec4
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Jan 11 14:46:26 2024 +0100

    [bazel] Support/Enable Maglev
    
    Bug: v8:7700
    Change-Id: Ie97740752f6bc3966b6eecb209e61074e1d41e3d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189446
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91819}

commit 90fbe41d458922a7a8169e4b226989b0e831bda0
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Fri Jan 12 16:16:43 2024 +0100

    [handles][torque] Use direct handles in generated methods, part 1
    
    Methods in TorqueGeneratedFactory take handles to objects as parameters
    and return handles to objects. This CL changes the method signatures to
    expect direct instead of indirect handles as parameters. The difference
    is only visible with v8_enable_direct_handle=true and, even then, the behaviour is the same as indirect handles can be implicitly converted
    to direct handles. For the return type of these methods, indirect
    handles are still used.
    
    The CL also fixes some missing newlines from the generated code.
    
    Bug: v8:13270
    Change-Id: Iefaafe28100e25f93dccf204c4269514b05e4438
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192469
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91818}

commit 8753d9f32fbdebcea4c06eb7d65852c059a751ad
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Jan 12 16:17:39 2024 +0100

    [maglev] Materialise Float64s as Smis if possible.
    
    Bug: v8:7700
    Change-Id: I445a7aa0669995722eae9e333c9bc3ed7bb3cf2d
    Fixed: chromium:1517836
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192783
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91817}

commit 1d859728e19271e4c0035a71085499a5a2f37d84
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Fri Jan 12 14:35:52 2024 +0100

    heap: Allocate old pages from the pool
    
    Currently the OldSpace bypasses the pool and allocates the pages
    directly from the PageAllocator. As a consequence, there is an
    excess in the pool.
    
    Bug: chromium:1517742
    Change-Id: I6efa25c57fb8356f1713332c7cc0bf9d0f0f9f2c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5190751
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91816}

commit c68d7fb0e8e6eef55d2f9a56571c282fe1c991b3
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Jan 12 12:02:01 2024 +0100

    [gc] Fix two more data races around EstimateCurrentMemoryConsumption
    
    One in the type canonicalizer, one in the compilation state.
    
    R=jkummerow@chromium.org
    
    Bug: chromium:1517559
    Change-Id: If39bce3fdc178785ee1ae7d67f5bbe89b55ae8fa
    Fixed: v8:14557
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5190456
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91815}

commit 9b8cc2c271c8f275ce3b33f35e963159de511cbb
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Jan 11 14:00:12 2024 -0500

    skip Opmask tests on big endian
    
    Reading the struct bytes as a uint64_t reverses the struct
    members on little endian platforms. A fix must be applied to
    big endian platforms to reverse the byte based on the field sizes.
    Tests will be skipped until it is patched.
    
    Change-Id: I8ca5b00010410b1387f81fc9346607aae178b0ca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189146
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91814}

commit 9f91aacc776e49c80318d960f2c3bcb2128cda39
Author: Lutz Vahl <vahl@chromium.org>
Date:   Fri Jan 12 13:43:50 2024 +0100

    Bug: b/319667336
    Test b/ integration
    
    Change-Id: If22120d5d67d5edb537fce9223ca024d83177384
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192472
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Lutz Vahl <vahl@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91813}

commit 333587ea5fc5ebe5a2805e3a96dcca76ea9700b8
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Jan 12 13:10:00 2024 +0100

    [test] Suppress ODR violations in asan component builds
    
    Bug: chromium:1500944, chromium:1517865
    Change-Id: I0be995d07f409c29f65b1ba5590f230e643168a2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5191137
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91812}

commit 6fece1bf2923a94fba5046316c07db0996140b62
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Jan 12 12:22:14 2024 +0100

    [wasm][liftoff] Optimize in-bounds atomic operations
    
    Detect statically in-bounds atomic operations and optimize them by
    avoiding the bounds check and doing the index+offset computation
    statically.
    
    Static indexes can happen e.g. for globally defined mutexes.
    
    The main changes are in platform-specific LiftoffAssembler methods which
    now need to handle the case that no offset register is set for atomic
    operations.
    
    R=dlehmann@chromium.org
    
    Change-Id: I725d2a1ff7bc55f8b874343e13fc3d31674cd83f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5180736
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91811}

commit 977280947c5edacce6405ef7c3037e778b7ea0f9
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Jan 11 16:32:39 2024 +0000

    [maglev] Use far jumps in CheckNumber generator when debug_code
    
    When the debug_code flag is enabled, comparisons against a root value
    now emit more instructions after crrev.com/c/5181094. This in turn may
    cause the distance between a jump and the target label to exceed the
    range for near jumps, requiring a far jump instead.
    
    Bug: v8:14553
    Change-Id: I2f619b6bb136ef8445cd790be895d065d956f9a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189471
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91810}

commit 1c64646491ebc36e2ecf6f5b21e20c1f9fa80004
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri Jan 12 11:41:38 2024 +0100

    [heap] Fix crash with MinorMS and --trace-gc-nvp
    
    Bug: v8:12612
    Change-Id: I506f0dd1c5a06fbc29310e2bd01b49e418c96f14
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192465
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91809}

commit a845622314a113e73fcf1dac5b14e5e2aa1f6415
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Jan 10 17:57:43 2024 +0100

    Reland "[handles] Add LIFO check for handle scopes"
    
    This is a reland of commit 0c7d3813125b98406f276187d71d7335b94cf5fb
    
    Original change's description:
    > [handles] Add LIFO check for handle scopes
    >
    > This CL adds three checks, related to the proper use of isolates and
    > handle scopes:
    >
    > 1. For a given isolate, handle scopes are created and destroyed in a
    >    LIFO manner;
    > 2. When a thread enters an isolate, there is no different thread that
    >    has already entered it; and
    > 3. When a thread exits an isolate, it must have previously entered it.
    >
    > These checks are behind the compile-time flag V8_ENABLE_CHECKS, which
    > is by default enabled for V8 debug builds, and can be enabled from
    > chromium builds by setting v8_enable_v8_checks=true. Because the CL
    > introduces debug fields to an object of the V8 API (v8::HandleScope),
    > the choice of a flag that is consistently set both in chromium and in
    > V8 is important.
    >
    > Change-Id: If24722619729cd4053ea97cb7be8645228ebd2d7
    > Bug: v8:13270
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110566
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Auto-Submit: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91659}
    
    Bug: v8:13270
    Change-Id: I53af99ae74ff99c1659a1db2243a8d7405268abf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173257
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91808}

commit d4bf4c7b22bc62bde6547ce57fdf75fe502b0b14
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Jan 12 11:49:48 2024 +0100

    [turboshaft][ia32] Instruction Selector part 1
    
    Part 1: just enough to make it through the "TrivialFunctions" test.
    
    Bug: v8:12783
    Change-Id: Ic90faed53fd4a7c9637b0f71b70b8c345d0fa4fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189150
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91807}

commit 495fdcb8aefb38c59ad895f473f59f363d53af4b
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Jan 12 11:58:58 2024 +0100

    [test] Use separate extra_flags for d8
    
    D8 has some specific flags that aren't available in other V8
    executables, e.g. in the unit tests. This prepares using unit
    tests with asan and debug, which would fail on using the d8
    flag --invoke-weak-callbacks.
    
    Bug: chromium:1500944
    Change-Id: I857b07972562b69fdeba53856fb25278d8ece568
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192466
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91806}

commit 5a36ecf358933815e921f7f0607d97c159bb7970
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri Jan 12 12:59:34 2024 +0800

    [loong64][codegen] Load trusted pointer table via root register
    
    Port commit 3bd78de20b381253158ef953a6531da7fbfc7538
    
    Change-Id: I9c50e32cb4562b9e76ea7f362fd01c10167cecaa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192049
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91805}

commit 8f1356bf56373cd8f068727550561beaab5b33cc
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Jan 11 16:57:01 2024 +0100

    [asm] Add source locations and colour to code comments
    
    Should make them easier to read. Right now the source location is
    wherever the comment is created -- in the future, for trivial functions,
    we could also make trivial functions (e.g. DecompressTagged) pass
    through a source location from their caller.
    
    Change-Id: I74b971d1a81bd3fde5045a6872a33f938e834325
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189468
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91804}

commit 3f32f3e9c19d4fbe53edaaad376bb5f4c58edc99
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Jan 12 10:43:36 2024 +0100

    [presubmit] Work around cpplint errors after python upgrade
    
    Since the work-around in depot_tools is still blocked, this just forces
    Python version 3.8 from V8's .vpython3 file when cpplint is used.
    
    Bug: chromium:1517826
    Change-Id: Ic8886efb800fe8f36711279bd7963799d471dc33
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5192365
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91803}

commit f6b62870abc98ce87382f92cc272cdc2eb39fcb3
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Jan 11 18:23:50 2024 +0100

    [test] Skip test that's not predictable
    
    Several Octane benchmarks have a history of not being predictable
    (see second bug below). After https://crrev.com/c/5097543, raytrace
    starts producing different allocation hashes as well. The fundamental
    issue is likely that we rely on some arbitrary iteration order of some
    set/map in the GC.
    
    Bug: v8:14512, v8:13234
    Change-Id: I5332b34911a68c5dfd73fc0462bce4e5f3861d31
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189472
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91802}

commit 2d17d914806a433641f3a367d72b8ee287369733
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Jan 11 14:53:45 2024 +0100

    [gm.py] Improve handling of 'gn_args' target
    
    Drop it from the targets list before invoking ninja.
    This has no effect when gm is invoked as `gm x64.debug.gn_args`,
    but avoids an error message for `gm x64.debug gn_args` (without dot).
    
    No-Try: true
    Change-Id: Ided46c460fadb121ecd83d98ec66d84d15eb90b6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189466
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91801}

commit 0496ecc95ac6e059a038fb5c1e91deb8625932f8
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Jan 11 16:22:43 2024 +0100

    [tools] Add a gerrit-based merge_to_branch
    
    Similar to roll_merge_gerrit, add a merge_to_branch_gerrit which uses
    the gerrit API to create a branch merge, automating the instructions in
    https://v8.dev/docs/merge-patch#option-1%3A-using-gerrit
    
    The tool additionally allows you to specify a reviewer on the command
    line, or if no reviewer is specified, adds the reviewers of the original
    CL.
    
    Change-Id: I2d9aeae85a48635687b8fa2fae426c7839a63eef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185346
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91800}

commit 0964a93608201f5b428ef6a8547981d9144ca082
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Jan 11 20:19:01 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/eba30cc..48ef4c0
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/a656fc7..4d143ad
    
    Rolling buildtools/linux64: git_revision:71305b07d708830ed7b96006dfa773a79ff313fe..git_revision:d4be45bb28fbfc16a41a1e02c86137df6815f2dd
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/ad697e3..312cd04
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/e4aac3a..d1f035a
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/40e35a7..956936c
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/28c2eef..990bc36
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759138077230492993
    
    Change-Id: I4080dfb6e8a30653298e571272f9812dbff31a38
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5191985
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91799}

commit c59b77476afe9ed610dbe0259e695836f27def1b
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu Jan 11 19:56:17 2024 +0000

    Revert "[ic] Update LoadIC to convert holes only if we've seen one"
    
    This reverts commit 646b521421351c7555791a7ffb981e3375803b00.
    
    Reason for revert: Blink failures
    e.g. https://ci.chromium.org/ui/p/chromium/builders/try/linux-rel/1666182/overview
    
    Original change's description:
    > [ic] Update LoadIC to convert holes only if we've seen one
    >
    > Change-Id: I297405c77b85d94b577b92abc0d2aefd0a0e8ceb
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185559
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91785}
    
    Change-Id: Ic807d8d83752bdd6bd89da6c8ee40dfd626b6442
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189927
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Owners-Override: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91798}

commit 2bb1e2026176fff4639d693b507c8eab1d9f5d26
Author: Jose Dapena Paz <jdapena@igalia.com>
Date:   Thu Dec 21 15:24:52 2023 +0100

    GCC: explicitely cast NEON intrinsics type conversions
    
    GCC NEON intrinsics are more strict not allowing casts among
    different vector types (even if the register size is the same). This
    fix explicitely casts the type conversions using vreinterpret*
    family of intrinsics.
    
    Bug: chromium:819294
    Change-Id: If02dc5196f9651e541ca085d1f441b759a9919d4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5145208
    Commit-Queue: José Dapena Paz <jdapena@igalia.com>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91797}

commit 54d793a6fcab7bdc5dd66fe21c604b8ce4f6467e
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Jan 11 00:32:04 2024 +0000

    [test262] Roll test262
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/b628e4b05..c8cd13688
    
    Bug: v8:7834
    Change-Id: I86552d0a82b3f06c37f5476d27d83de63d527509
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5186951
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91796}

commit b81d8c5231f38eacd6241dcbf07a7267a77565c0
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Jan 11 17:18:22 2024 +0100

    [turboshaft] Unittest for Opmasks
    
    Bug: v8:12783
    Change-Id: I44ae72ab2ace36f0c880fdc2eaf9a4bb4502a60b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189469
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91795}

commit 1118bb1ee3e2eae448739d008031127dd0deaeb8
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Jan 11 17:02:45 2024 +0100

    [wasm] Fix race conditions in WasmImportWrapperCache
    
    In particular, EstimateCurrentMemoryConsumption can be called
    concurrently with compilation of import wrappers (for tiering from the
    generic wrapper to a compiled one).
    
    R=jkummerow@chromium.org
    
    Fixed: chromium:1517559
    Change-Id: I11092c1b3fb00c723e3cf9b0e8122ee1d3f0d561
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185344
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91794}

commit 977d72290b67a73969ded49ecaeceb616ba741bd
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Jan 11 17:21:30 2024 +0100

    [factory] Migrate some indirect handles to direct
    
    This CL replaces some indirect handles, used as parameters in factory
    methods, to direct handles. It is essentially a selective search-and-
    replace and should not affect behaviour.
    
    Bug: v8:13270
    Change-Id: Ic8136e03cc47463949efda0e7258fd440aa3b2c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030196
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91793}

commit 6e8266b16fc085238862b62faeb0f2d6548a3746
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Wed Jan 10 14:01:37 2024 -0800

    Run `npm audit fix --force` on tools directory
    
    Some automated source scanners have been complaining about dangerous
    packages being used by the V8 tools directory. In particular:
    
    Overly permissive origin policy in @koa/cors:
      https://github.com/advisories/GHSA-qxrj-hx23-xp82
    
    qs vulnerable to Prototype Pollution:
      https://github.com/advisories/GHSA-hrpp-h998-j3pp
    
    I doubt that there is any real risk since this directory contains
    developer tools and not product code, but this change makes the warnings
    go away.
    
    Change-Id: I4ba40de32af59659103dc969552fe9f9acb733ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5166117
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#91792}

commit 589c9eb924ad944480b0d9cd7ac41a864cfd5f7b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Jan 11 08:09:05 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools/linux64: git_revision:85944ebc24a90ec1e489e85a46fdc68542c3146f..git_revision:71305b07d708830ed7b96006dfa773a79ff313fe
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/f80f02a..a1171ad
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/7fb9c81..28c2eef
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759183373931410737
    
    Change-Id: I0d2837ad91b378d17ba28e5cdb0bdf91a4bba1a3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5190266
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91791}

commit 3d107a1d229b6b9513892a13169457e0464f2e5d
Author: Nicolò Ribaudo <nribaudo@igalia.com>
Date:   Thu Jan 11 16:41:22 2024 +0100

    [import-attributes] Run test262 import attributes tests
    
    Bug: v8:13856
    Change-Id: Ifcafb691f0dc087e8ccf0e848e92579419f90d8b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5189448
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91790}

commit 6f871b1e98bb27c53a0a4763889f537ae7480e88
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Jan 11 12:36:02 2024 +0100

    [wasm] Remove outdated comment on WasmApiFunctionRef
    
    The isolate_root was removed in https://crrev.com/c/4352532.
    
    R=manoskouk@chromium.org
    
    Bug: v8:14499
    Change-Id: I7f3407ad7e3c2128fde161a7d1fe7fa02e541400
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185463
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91789}

commit aa2d8325a8100b6315bc58a223b89462d7fc8175
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Jan 11 10:30:53 2024 +0100

    [wasm] Remove unused parameter on CallRef
    
    The signature index is used for validation in the function body decoder.
    All interfaces (TurboFan, Turboshaft, and Liftoff) only use the
    signature though, not the index. Hence remove that dead parameter.
    
    R=manoskouk@chromium.org
    
    Change-Id: Icf6ed34cead0e06797dfc1a3917996bfe7a7315b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185339
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91788}

commit 0e2a6283384f27006c3b506fc57b089d3e4f17b1
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Jan 11 11:26:02 2024 +0100

    [handles] Revise checks for direct handles
    
    This CL is the first step for supporting direct handles on background
    threads. It revises the existing checks accordingly, and adds some
    more. Specifically:
    
    1. Stack information is moved from the isolate to the local heap.
    2. internal::DirectHandleBase inherits api_internal::StackAllocated,
       to check that direct handles are stack-allocated on debug builds.
    3. A counter is introduced for counting used direct handles on
       appropriate debug builds.
    4. Direct handles can be used on background threads. A direct handle
       can only be dereferenced by a background thread if it's allocated
       on that thread's stack. A background thread can only park if at
       that moment it uses no direct handles (as we don't scan the stacks
       of background threads yet).
    
    Bug: v8:13270
    Change-Id: I643c4d3e59503c405c0adca68b7919dc5ee48893
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5145367
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91787}

commit 89930eed40cd9ac479aa158d6b40ab127e445ca1
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Jan 11 10:35:13 2024 +0100

    [wasm] Fix use-after-free in WasmFullDecoder
    
    Change-Id: I902b58c20bd50abdeb6774e87efe233d6d592ba9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185341
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91786}

commit 646b521421351c7555791a7ffb981e3375803b00
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Jan 11 14:55:25 2024 +0100

    [ic] Update LoadIC to convert holes only if we've seen one
    
    Change-Id: I297405c77b85d94b577b92abc0d2aefd0a0e8ceb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185559
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91785}

commit 3065d3d9516dc50a568eed54e94f77d71382ba70
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Jan 11 13:54:58 2024 +0100

    [turboshaft][wasm] Add inline implementation of table.get for funcref
    
    This if a follow-up to commit fd49c47079927ad2531b1795a4a72e2212209587
    and adds the inline implementation for funcref table.get.
    
    Bug: v8:14034
    Change-Id: I7025cd325288edaea8398a2c9387beaf25ee7fec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185035
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91784}

commit efdc9cfc8cfa968fe19346c5b77904b3393c5854
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Jan 10 07:10:07 2024 -0500

    Fix immediate_crash on AIX
    
    Need to use a different pseudo-op for the AIX assembler.
    
    Change-Id: If3e762cf986c6943a9ce3ae003de531825bb851b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5184815
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91783}

commit 389ea9be7d68bb189e16da79f6414edbd4f7594f
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Jan 11 10:47:17 2024 +0100

    [runtime] Drop fast last-property deletion
    
    This interacts badly with other optimizations and isn't particularly
    common.
    
    Bug: chromium:1517354
    Change-Id: I7adb51a8fc0ec47eaeb911ca2a4cbc517088e416
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185340
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91782}

commit 6f98fbe86a0d11e6c902e2ee50f609db046daf71
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Jan 11 13:19:25 2024 +0100

    [maglev] Fix deopt node printing
    
    We were forgetting to print the interpreted frame closure, leading to an
    off-by-one in the remaining inputs.
    
    Bug: v8:7700
    Change-Id: I0bf6a036bdede160f6b525c9129a56053350fa70
    Fixed: v8:14537
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185349
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91781}

commit 8c5bbf8540927b85e6e98f440efe41925035bb65
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Jan 11 12:53:38 2024 +0100

    Fix --heap-snapshot-on-oom for "ineffective mark-compact"
    
    There was one possible OOM crash reason that wasn't hooked up
    with the snapshotting feature.
    
    Change-Id: I9d4cae993a443fc562d25f9571f7e017bdd40d44
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185348
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91780}

commit fe905733c25476147ff9bb3535cb04a1ee62af9b
Author: Darius M <dmercadier@chromium.org>
Date:   Thu Jan 11 12:14:42 2024 +0100

    [turboshaft] Disabled type assertion for LoadRootRegister
    
    Bug: v8:12783
    Change-Id: Ic5b3c4934ada56c391375c718bdcdd39c40d0e16
    Fixed: chromium:1517218
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185462
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91779}

commit 0918f3eafb5a33480a5b735d8d20c29519824d57
Author: Darius M <dmercadier@chromium.org>
Date:   Thu Jan 11 11:52:17 2024 +0100

    [turboshaft][x64] Make sure Load/Store offset=0 for atomic Loads/Stores
    
    The instruction selector assumes that the offset of Loads and Stores
    in 0. We thus now normalize atomic Load/Stores on x64 during
    LoadStoreSimplificationReducer.
    
    Drive-by: when the Index is constant but cannot be merged into the
    offset because it would overflow 32 bits, we now instead merge the
    offset into the index (which is a WordPtr, while the offset is a
    Word32), to avoid emitting an addition in the instruction selector.
    
    Bug: v8:12783
    Change-Id: I80d33b83ac210ae54ad5a0ef17f120c7b6953027
    Fixed: chromium:1513580
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5148172
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91778}

commit 0fdcdfb06621a6258c306a6e663875445eaa9b4e
Author: Darius M <dmercadier@chromium.org>
Date:   Thu Jan 11 10:51:42 2024 +0100

    [turboshaft][arm64] Duplicate some shifted inputs of memory operations
    
    Bug: v8:12783, chromium:1511566
    Change-Id: I956b91c61ea68ef9302772face167fc53a8d1b7e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185034
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91777}

commit 9fc3277c2fb2129725f6950bd036f1dbd1242f94
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Jan 10 12:05:32 2024 +0100

    [wasm][builtins] Simplify bounds checks for table access
    
    Bug: v8:14034
    Change-Id: I4af6324c523335c3bacbbfdc7929c2b2d2d37d4e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5180777
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91776}

commit 95b9f932346d93e70f47b9d23cee837a6d6b7e98
Author: Liviu Rau <liviurau@chromium.org>
Date:   Wed Jan 10 17:14:48 2024 +0100

    Add unit tests to importer
    
    + small refactorings and 2 bug fixes
    
    Bug: v8:14002
    Change-Id: I52fa159e84690d6e5d5340e8331e2766a15fa1a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185494
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91775}

commit 85616782bbd83664b06fae6145ace78530c1807a
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Jan 10 08:18:17 2024 +0100

    [wasm-gc][liftoff] Trapping null check for array.fill
    
    This is a follow-up to crrev.com/c/v8/v8/+/5173423.
    
    Bug: v8:14034
    Change-Id: Ib43ccf715e0ee9f6b06e0dc0e693ab7b7df5dbb8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5184214
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91774}

commit 0322f56398350b51bfcdf05d029cfe5e9e3093a3
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Jan 10 18:04:31 2024 +0100

    [turboshaft] Remove the experimental status of some flags
    
    LoopUnrolling and LoopPeeling are already used for Wasm, so they it
    makes not sense to keep the flags experimental for JS.
    
    As for turboshaft-machine-lowering-opt, it should soon be enabled by
    default, so remove the experimental status also makes sense.
    
    Bug: v8:12783
    Change-Id: I6ac8b58c0aa395859ad7a29fb387e9daaf1db66b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185037
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91773}

commit e621e88ed0b2b4e74858cf579c80c5b59c74ce4f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Jan 10 20:19:10 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/05ae923..eba30cc
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/71983d6..a656fc7
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/f582f5b..73730a0
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/095b349..ad697e3
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/f18cfa9..e4aac3a
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/29eb3a5..e09e0d4
    
    Rolling tools/luci-go: git_revision:d740e2026f68271ad436672df5a4c763d244451d..git_revision:0d11be367258bfe14a13ff1afcf43a0bc6aedb45
    
    Rolling tools/luci-go: git_revision:d740e2026f68271ad436672df5a4c763d244451d..git_revision:0d11be367258bfe14a13ff1afcf43a0bc6aedb45
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759228672407191505
    
    Change-Id: I90351f0f5129f5ded119c33a760c8aafa47b08db
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185479
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91772}

commit 052e632c99b2b6ca59a01ac007552e34a3ac4cc0
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Jan 9 16:16:53 2024 -0800

    [interpreter] Add missing HoleElisionScope for derived ctor body
    
    Fixed: chromium:1516861
    Change-Id: I1d4b438cee759b729a15405df72b6d3dcf70785d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5181847
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91771}

commit 292cd5bf8c61f874ebf072d45ddc01da6bf5ca6b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Jan 10 18:04:42 2024 +0100

    [turboshaft][wasm] Run MachineOptimizationReducer in WasmLowering phase
    
    Running the MachineOptimizationReducer helps the late load elimination
    to eliminate redundant loads.
    
    Bug: chromium:1511364
    Change-Id: If251591d08e27da09bfdda065ae4a017cd37119c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185038
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91770}

commit 4a1cff349710542dafa3990a1c89c9c709ffe257
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Jan 10 08:18:37 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/d556a0f..5fe3232
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/cd076ba..095b349
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/9eb7931..7fb9c81
    
    Rolling tools/luci-go: git_revision:a7b7f319032d68f1cf0e710e695a84957d3b11dc..git_revision:d740e2026f68271ad436672df5a4c763d244451d
    
    Rolling tools/luci-go: git_revision:a7b7f319032d68f1cf0e710e695a84957d3b11dc..git_revision:d740e2026f68271ad436672df5a4c763d244451d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759273969212489953
    
    Change-Id: I510c97e431fe102eed68e46496ce32d33f646d4f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5186154
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91769}

commit 3db6fcb66d4211fcbcfb72f41086cd3af2906fad
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 10 16:06:30 2024 +0000

    Reland "[sandbox] Assert no trusted space objects are passed into CompareRoots"
    
    This is a reland of commit b4ad5c2effac6ddf0238f7ab450ec950f0c53ad5
    
    The failing DCHECK on non-ptr-compr builds has been turned into an
    if condition to correctly handle this situation. This is simpler than
    the alternative of moving these checks into all callers.
    
    Original change's description:
    > [sandbox] Assert no trusted space objects are passed into CompareRoots
    >
    > As we're moving more objects into trusted space, we need to be careful
    > when comparing such objects against objects inside the main cage, in
    > particular to roots (which happens frequently). This is because by
    > default, such comparisons would be 32-bit comparisons of just the lower
    > 32-bits of the address, which is no longer correct once the objects live
    > in different pointer compression cages. In C++ we have DCHECKs to catch
    > these cases. This CL adds a similar debug assertion into generated code.
    >
    > Bug: chromium:1473677
    > Change-Id: Iaae496b6ed20d7bec88923e8d70e27cb41b9e336
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5181094
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91763}
    
    Bug: chromium:1473677
    Change-Id: I4e0c8da75cf1172dbfe0a12850772ff9bcb768e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185495
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91768}

commit 3a34091edd03eea9086c0f6bf8b94c4806168859
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Jan 9 13:22:12 2024 -0800

    [interpreter] Save accumulator for derived ctor return value check
    
    Fixed: chromium:1516321
    Change-Id: I585b36158b4f297e2e30182279dca262854848f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5179151
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91767}

commit 8859593594f47526a63689653ee01b3fb690a293
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Jan 9 20:15:09 2024 +0100

    [api] Add use counters for shipped Wasm features
    
    This adds use counters for six Wasm proposals where we tracked usage but
    never populated use counters with that data.
    In order to avoid the same mistake in the future we also add static
    asserts to check that any staged or shipped feature has a corresponding
    use counter.
    
    The chromium-side wiring will be done in a follow-up.
    
    R=jkummerow@chromium.org, mlippautz@chromium.org
    
    Change-Id: Id44911a80e61ec85b0cd700cd3eba4e229f310d5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5180775
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91766}

commit 79d85c3df8d742a304dd2c1883a100aef12ff1aa
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Jan 4 15:50:08 2024 +0100

    [tagged-ptr] Introduce FLEXIBLE_ARRAY_MEMBER macro
    
    Because of compiler limitations with the flexible array member
    extension, in particular around subclassing, introduce a new macro which
    defines the flexible array members. This also requires accessing
    flexible array members using a macro, rather than with offsetof.
    
    Bug: v8:12710
    Change-Id: Ibf8ae9b20bb1a83be7374e439bff484914d7bad1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5148173
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91765}

commit ad7450ad279981aa93c47ce55a35c310b8da6070
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 10 15:40:30 2024 +0000

    Revert "[sandbox] Assert no trusted space objects are passed into CompareRoots"
    
    This reverts commit b4ad5c2effac6ddf0238f7ab450ec950f0c53ad5.
    
    Reason for revert: Breaks some builds: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Mac%20-%20arm64%20-%20no%20pointer%20compression%20debug%20builder/8710/overview
    
    Original change's description:
    > [sandbox] Assert no trusted space objects are passed into CompareRoots
    >
    > As we're moving more objects into trusted space, we need to be careful
    > when comparing such objects against objects inside the main cage, in
    > particular to roots (which happens frequently). This is because by
    > default, such comparisons would be 32-bit comparisons of just the lower
    > 32-bits of the address, which is no longer correct once the objects live
    > in different pointer compression cages. In C++ we have DCHECKs to catch
    > these cases. This CL adds a similar debug assertion into generated code.
    >
    > Bug: chromium:1473677
    > Change-Id: Iaae496b6ed20d7bec88923e8d70e27cb41b9e336
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5181094
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91763}
    
    Bug: chromium:1473677
    Change-Id: I6f56bbb2402a263ec4e8449f76e4145708b57377
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5185036
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91764}

commit b4ad5c2effac6ddf0238f7ab450ec950f0c53ad5
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 10 14:05:25 2024 +0000

    [sandbox] Assert no trusted space objects are passed into CompareRoots
    
    As we're moving more objects into trusted space, we need to be careful
    when comparing such objects against objects inside the main cage, in
    particular to roots (which happens frequently). This is because by
    default, such comparisons would be 32-bit comparisons of just the lower
    32-bits of the address, which is no longer correct once the objects live
    in different pointer compression cages. In C++ we have DCHECKs to catch
    these cases. This CL adds a similar debug assertion into generated code.
    
    Bug: chromium:1473677
    Change-Id: Iaae496b6ed20d7bec88923e8d70e27cb41b9e336
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5181094
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91763}

commit beeb6c8982786c83f89e8949e2f3a4fde8567104
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Jan 9 18:29:27 2024 +0100

    [wasm] Remove feature flags for shipping features
    
    This removes three feature flags for features that are shipping (enabled
    by default) since at least v11.4.
    
    We keep an enum value for them in `WasmFeature` so we can still track
    their usage.
    
    R=thibaudm@chromium.org
    CC=manoskouk@chromium.org
    
    Change-Id: I522fcfae3ceba05457924c3136996e8ca45eda4f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5180737
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91762}

commit 6b4d53e84083f1ef2392e519c70d958bbfe6a78b
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Jan 9 12:55:53 2024 +0100

    [wasm][jspi] Simplify JS frames detection
    
    The wasm-to-js counter was introduced to detect and prevent the
    accidental capture of JS frames. This was needed before, when JS frames
    could be pushed alongside wasm frames in a secondary stack.
    
    But this can be simplified now by relying on the central-stack switch:
    the suspender contains JS frames if and only if it has switched to the
    central stack and has not returned yet.
    
    Rename the counter to "has_js_frames", make it a boolean, and update
    this boolean when switching to/from the central stack.
    
    R=jkummerow@chromium.org
    
    Bug: v8:12191
    Change-Id: Ic541afcefecf3776323701aec64f935988b2e38e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5180774
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91761}

commit 66253e1b99a81e810e02ba8c9932d13dcd67b954
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Jan 10 15:03:15 2024 +0100

    [build] Use a new google_benchmark location to avoid conflicts
    
    Using the same path for DEPS'ed and previously checked-in files
    causes conflicts when going back and forth between new and old
    revisions. Since all references here are v8 stand-alone, the
    exact location shouldn't be important. Therefore we use some
    new name to avoid conflicts when locally running `gclient sync`.
    
    Bug: chromium:1513046
    Change-Id: Icf1ecc4d9b1f9c7e67b5a542c2be08ff9738d045
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5184217
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91760}

commit 6f7a8df6510eca6a600d9d78c78d151b34fd43b4
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Jan 10 14:50:56 2024 +0100

    [wasm] atomics: Consistent order of errors for oob and misaligned
    
    When the trap handler is used, out of bounds checks are implicit and
    happen during the access, the alignment runtime check is explicit.
    However, without the trap handler we first checked for oob and then
    for the alignment causing a different error message for atomic
    operations that trap both for oob and unaligned access causing
    inconsistencies / observable behavior differences between liftoff and
    Turbofan / Turboshaft.
    
    This CL fixes these inconsistencies for all atomic operations by
    always first executing the alignment check and then the (implicit or
    explicit) bounds check.
    
    Change-Id: I98fc37a334fbf70500b0c8b7a768561db3c1b977
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5180367
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91759}

commit fd49c47079927ad2531b1795a4a72e2212209587
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Jan 9 19:27:58 2024 +0100

    [turboshaft][wasm] Add inline implementation of table.get
    
    This allows load elimination to eliminate repeated loads of the table
    in case of accessing multiple values or multiple tables.
    Note that this is for non-funcref tables only (for now).
    
    Bug: v8:14034
    Change-Id: I492062567526e1c2e5a001fa0643632b54884a1e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5180776
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91758}

commit cb47d844cd53bf669c7f29f8d0c35819c6cc0f27
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Jan 10 13:55:06 2024 +0100

    [torque] Allow aliasing enum entries with @sameEnumValueAs
    
    Bug: v8:7793
    Change-Id: I40412543dbf22f8001898c82bbf2ba770df5f2e8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5184219
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91757}

commit 4c8c3e23d89b63e4bb37013b8302781f22e74ef9
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Jan 10 13:55:06 2024 +0100

    [maglev] Fix TypedArray length load to return IntPtr
    
    TypedArray lengths can be larger than Uint32 on 64-bit arch, so we need
    the value representation to be IntPtr rather than Uint32. Change Maglev
    to have an IntPtr representation instead of a Word64 one, and use this
    for TypedArray length checks.
    
    Bug: v8:7700
    Change-Id: I8c1fa227f4568aa98e32516f0bbf2dc9561404ec
    Fixed: chromium:1516871
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5184218
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91756}

commit bd9ce10affdbdb3a0c45e1be0fc45678551de950
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Jan 10 13:34:05 2024 +0100

    [turboshaft][wasm] Only add phi inputs from reachable inlined blocks
    
    Bug: chromium:1514304
    Change-Id: Iec30d3139d2def0c4b0f5c14adda6c6caaa126cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5184134
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91755}

commit 9a54182913d63c5fb74f7d4b91ddc13bfbe5c011
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Jan 10 10:57:20 2024 +0100

    [heap] Move incremental marking counters to GCTracer::Event
    
    Counters for incremental marking (start time, duration, bytes) used to
    reside in GCTracer. This was fine as long as only full GCs used
    incremental marking.
    
    MinorMS also uses concurrent marking and may update these counters.
    Specifically, due to interleaved sweeping, a concurrent MinorMS may
    override the incremental marking time of a previous full GC, which will
    result in negative incremental marking duration when finalizing the full
    GC (i.e. after sweeping).
    
    This CL fixes such issues by moving the cycle specific counters to
    GCTracer::Event.
    
    Bug: v8:13012
    Change-Id: I055831fb831dfd3c06a3d3897d902afbfd59b3b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5184216
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91754}

commit 3089157cce7a57f9c18b809b513319a632474799
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Jan 10 12:21:35 2024 +0100

    [turboshaft] Framework for unit tests in Turboshaft
    
    Bug: v8:12783
    Change-Id: Id69c63594260e9e00994fa8d58a4edf1908a6f50
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5136535
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91753}

commit ee35421186da9ef75ae6f48f8c2e62b0a43c160a
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Jan 10 09:58:31 2024 +0100

    [heap] Improve trace-gc output
    
    1) Delay crash due to ineffective full GCs until after trace-gc output
       for the current cycle.
    2) Mark interleaved GCs in trace-gc output (to make it easier to
       identify them in the future).
    
    Change-Id: I6d30bd83581d1ec037e90c926adab72a25024799
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5184215
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91752}

commit be27fc2222ccf1d2465608deb7990d0a9a5dff99
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Jan 10 11:01:43 2024 +0000

    Revert "[cleanup] Clean up extra inlined arguments frame"
    
    This reverts commit e5ba85174f1b152b7bb4d45bbda8291c8d23a9de.
    
    Reason for revert: Fails on blink bots: https://luci-milo.appspot.com/ui/inv/build-8759300068921273953/test-results?q=fast%2Fjs%2Fregress%2Ftear-off-arguments.html&sortby=&groupby=
    
    Original change's description:
    > [cleanup] Clean up extra inlined arguments frame
    >
    > Every time we inline a function with argument count different than
    > the parameter count, we retain all arguments (up to the parameter
    > count) twice in the deopt translated state.
    >
    > In the CL, we remove the duplication.
    >
    > Change-Id: I3de637dfeecad759328183ed369ac96e7c89ea98
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4714609
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91749}
    
    Change-Id: Ia5fe1498958fa8fa99235e68960ad38f9882e073
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5184178
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91751}

commit ae1d91913bd59c4c9da63088f2cc7375b958ef38
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Jan 9 12:29:27 2024 +0100

    Reland "[heap] Fix OOM in new space allocations"
    
    This is a *partial* reland of commit 2e671bb00336fa556cab5f969ee71a9fc7e6455b
    
    This CL contains only the fix for 1) below.
    
    Original change's description:
    > [heap] Fix OOM in new space allocations
    >
    > This CL fixes 2 issues:
    > 1) OOM when new space is empty because old space is full. Old space size
    >    should only be considered for allocating pages beyond capacity. As
    >    long as new space capacity is below the limit, allocation should
    >    succeed.
    > 2) OOM crash before trace-gc output. This makes it appear as if the OOM
    >    comes from a minor gc when it is actually a full gc.
    >
    > Bug: v8:12612
    > Change-Id: I9f072e1e3cdc1d8ffbf52d1153f6dfc5bc1dd4c8
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5176936
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91734}
    
    Bug: v8:12612
    Change-Id: I98f8539e7faee4dd263e54fde1d6efd428fad039
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5184135
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91750}

commit e5ba85174f1b152b7bb4d45bbda8291c8d23a9de
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Jan 4 17:32:06 2024 +0100

    [cleanup] Clean up extra inlined arguments frame
    
    Every time we inline a function with argument count different than
    the parameter count, we retain all arguments (up to the parameter
    count) twice in the deopt translated state.
    
    In the CL, we remove the duplication.
    
    Change-Id: I3de637dfeecad759328183ed369ac96e7c89ea98
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4714609
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91749}

commit 89318585e285e9568b566d45b734629eba5702ce
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Jan 10 10:33:02 2024 +0800

    [riscv][liftoff] Use trapping null
    
    Port commit 58b43c4a743fadc2a3812296a710e0f8d07f0edb
    
    Change-Id: I8952e72bcc51433717c22cbc2870a5768400bbb0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5181852
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91748}

commit 7161638e5ead74bf84a52d27e69ebda26fbd2416
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 9 20:08:28 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e920e5b..05ae923
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/f5d99b3..71983d6
    
    Rolling buildtools/reclient: re_client_version:0.125.0.f3883c2-gomaip..re_client_version:0.126.0.4aaef37-gomaip
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6953ebe..cd076ba
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/8c2468e..f18cfa9
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/42293b9..29eb3a5
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759319271203028193
    
    Change-Id: I4df0e6c437c696560c40a5930092fffdb9f51572
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5181477
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91747}

commit f05f0efb59f0a47bec7c023548dd493d1d0153b1
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Tue Dec 26 16:19:24 2023 +0800

    [turboshaft] Fix StructuralOptimizationReducer
    
    
    Bug: v8:14528
    Change-Id: I80e5c65cee56b1e43646dc33bc52208d5aff6edc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5152469
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91746}

commit c82365ef60918ae231c7cb64a0065a87298f68dc
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Tue Jan 9 16:33:28 2024 +0800

    [riscv][wasm] Introduce WasmTrustedInstanceData
    
    
    Port commit 59acab802a319da23c1c005e062fbc2bab4d348b
    
    Port commit 8cf17a14a78cc1276eb42e1b4bb699f705675530
    [sandbox] Reference Code from FeedbackVector via code pointer
    
    Port commit 4fa7784b10b4148d551500d538db964cfc661f1c
    [sandbox] Reference Code from OSR feedback vector slots via its wrapper
    
    
    Change-Id: I88cd9b5f27a856aaf7ad319d55c9bed98eb24e45
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5179912
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91745}

commit e22a4ea457af9fc21959b14ee54d5e3dc97eb5ab
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Jan 9 11:34:33 2024 -0500

    PPC/s390: [wasm-gc][liftoff] Use trapping null
    
    Port 58b43c4a743fadc2a3812296a710e0f8d07f0edb
    
    Original Commit Message:
    
        We extend the use of trapping null to the Liftoff compiler. The
        following operations now use trapping instructions instead of explicit
        null checks when possible:
        struct.get/set, array.get/set/len, ref.as_non_null.
    
        liftoff assembler on arm64.
    
    R=manoskouk@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I86ca5f5027f022e582603402f5705e5ef5242054
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5178655
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91744}

commit 5c9371795562bd176a759e9678912704f0dbb8f6
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Jan 5 15:47:16 2024 -0500

    PPC: fix reverse atomic load operations
    
    When checking for an atomic load reverse op we need to use the
    input node rather than the parent node.
    
    Change-Id: I5f687298c613b1a34769768c3eead110d5af2434
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173657
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91743}

commit e0cd4a26421b295e98fc8cc66ac8a5e936e19a58
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Jan 9 17:56:25 2024 +0100

    [build] Use gm.py in gen-static-roots.py
    
    Instead of copying the build logic from gm.py call it.
    
    This should now make gen-static-roots.py use reclient when available.
    
    Fixed: v8:14538
    Change-Id: I309e5255bb76253f2f22551a3455a00fd377469e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5180370
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91742}

commit fb49d000e2f969ff6d2d6d927b73fd30a2faffba
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 9 08:19:35 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/b4cce16..e920e5b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759364568387990993
    
    Change-Id: I5f165d82c0e295b09db5b81e3c49d5f8c3d84d8b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5178654
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91741}

commit f469cd0b5236c3e159afe25bfdb8b3105f7bae5e
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Jan 9 14:12:13 2024 +0000

    Fix missing return in CompareRoot in x64 MacroAssembler
    
    Bug: v8:7700
    Change-Id: Ib90645f19747ebdf175c5966ae47c214d652b9ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5177660
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91740}

commit d7e78e0a08b7eb9abe6e31ff54a556e26a9e912e
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Jan 9 07:40:36 2024 -0500

    PPC/s390: fix behaviour of immediate_crash
    
    __builtin_trap() could potentially emit `cite` on s390x which
    crashes with SIGFPE instead of a breakpoint trap.
    This CL fixes the issue on both ppc64 and s390x by emitting
    the `bkpt` instructions.
    
    Change-Id: I31d7881da1b50ee193b942e3ec2b4960991352f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5176785
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91739}

commit 904e75f35050d93bf2671465bedbd37f2cb094ef
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Jan 9 13:41:08 2024 +0000

    Revert "[heap] Fix OOM in new space allocations"
    
    This reverts commit 2e671bb00336fa556cab5f969ee71a9fc7e6455b.
    
    Reason for revert: flakes on multiple bots
    
    Original change's description:
    > [heap] Fix OOM in new space allocations
    >
    > This CL fixes 2 issues:
    > 1) OOM when new space is empty because old space is full. Old space size
    >    should only be considered for allocating pages beyond capacity. As
    >    long as new space capacity is below the limit, allocation should
    >    succeed.
    > 2) OOM crash before trace-gc output. This makes it appear as if the OOM
    >    comes from a minor gc when it is actually a full gc.
    >
    > Bug: v8:12612
    > Change-Id: I9f072e1e3cdc1d8ffbf52d1153f6dfc5bc1dd4c8
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5176936
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91734}
    
    Bug: v8:12612
    Change-Id: I052913a6e124b45363edc25dd0da302952e36626
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5180738
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91738}

commit 8bedb95f32a0aa2016f2448dd79b78d9576b48dc
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Jan 8 17:18:27 2024 +0100

    [wasm] Skip alignment check for single-byte accesses
    
    The alignment check is redundant if the access size is 1. Turboshaft and
    TurboFan optimize out the code later, but Liftoff emits this useless
    sequence:
    
                      [ alignment check
    0x2b9e02b5a8a6    a6  8bfb                 movl rdi,rbx
    0x2b9e02b5a8a8    a8  83e700               andl rdi,0x0
    0x2b9e02b5a8ab    ab  85ff                 testl rdi,rdi
    0x2b9e02b5a8ad    ad  0f8574000000         jnz 0x2b9e02b5a927  <+0x127>
                      ]
    
    This CL avoid emitting the alignment check for single-byte accesses
    in all compilers. This will save memory and compile time also for the
    optimizing compilers.
    
    R=dlehmann@chromium.org
    
    Change-Id: I8ca9719248113cf57fd3a34dc0c70180613d4872
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5177987
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91737}

commit 4a31b449133e3c1315e46fa7b15529e7fa4ae879
Author: Darius Mercadier <dmercadier@chromium.org>
Date:   Tue Jan 9 12:28:32 2024 +0100

    [turboshaft] Use a single operation for Smi->Word32 bitcast
    
    Bug: v8:12783
    Change-Id: I2e0a989fee59442a1edc0f4e881b43d69dbc7438
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5083021
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91736}

commit 60b2956fe0fffaa045fd95128fd844c00cec06a9
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Jan 8 16:48:14 2024 +0100

    [maglev] Hoist detached check out of Load/StoreTypedArrayElement
    
    Unify the deopting and non-deopting Load/StoreTypedArrayElement by
    making the detached check a separate node. This allows us to
    
      a) Potentially eliminate the check if we've already checked earlier
         and there have been no side effects,
      b) Check for detached _before_ loading the length, in case some future
         code using that no-longet-valid length could have caused trouble.
    
    Bug: v8:7700
    Change-Id: I12d390d12fbd3215f781077cc23ca4c8fc783323
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5176948
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91735}

commit 2e671bb00336fa556cab5f969ee71a9fc7e6455b
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Jan 9 12:29:27 2024 +0100

    [heap] Fix OOM in new space allocations
    
    This CL fixes 2 issues:
    1) OOM when new space is empty because old space is full. Old space size
       should only be considered for allocating pages beyond capacity. As
       long as new space capacity is below the limit, allocation should
       succeed.
    2) OOM crash before trace-gc output. This makes it appear as if the OOM
       comes from a minor gc when it is actually a full gc.
    
    Bug: v8:12612
    Change-Id: I9f072e1e3cdc1d8ffbf52d1153f6dfc5bc1dd4c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5176936
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91734}

commit da0a9c45ac4480b6895c794755c207595e4e07d0
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Tue Jan 9 11:30:52 2024 +0100

    heap: Introduce page pool in V8
    
    The CL replaces the current way of handling free pages - concurrent
    unmapper - with a page pool. The latter is very similar to what
    Oilpan already uses. The pages are kept alive until a memory-reducing
    GC kicks in, after which they get released.
    
    The downside of removing the offloading logic is that the large,
    executable and trusted pages are now sequentially freed, which may
    in theory introduce regressions in rare scenarios.
    
    Benchmarking:
    - Jetstream2:
      - M1: +0.3%
      - Windows: +2%
    - Speedometer2:
      - M1: +0.3%
      - Windows: +0.2%
    
    Bug: v8:14390
    Change-Id: I520ae79a5942cf9411667089bfaf3b4df9973270
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033402
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91733}

commit 962b5fef018bb66530a09a056a183fc3d265b667
Author: Eric Leese <leese@chromium.org>
Date:   Thu Jan 4 12:45:51 2024 +0100

    Add lldb visualizer support
    
    Tested with lldb-vscode. It is currently incomplete and slow, but
    it allows expansion of V8 objects, and then expanding their children.
    Also adds a stack trace visualization to the isolate, from which
    you can expand frame summary objects or the expression stack.
    
    Bug: None
    Change-Id: I9473383e00f69f57c1e1bc7a7348e96ae4257724
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952335
    Commit-Queue: Eric Leese <leese@chromium.org>
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91732}

commit 58b43c4a743fadc2a3812296a710e0f8d07f0edb
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Jan 9 10:11:19 2024 +0100

    [wasm-gc][liftoff] Use trapping null
    
    We extend the use of trapping null to the Liftoff compiler. The
    following operations now use trapping instructions instead of explicit
    null checks when possible:
    struct.get/set, array.get/set/len, ref.as_non_null.
    
    Drive-by: Fix the protected-instruction offsets returned by the
    liftoff assembler on arm64.
    
    Bug: v8:14034
    Change-Id: Ie090feb5fdf12e69c2ce670b408d9d023f3a274d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173423
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91731}

commit 2d257c405349340352e4be6daf254960469883c3
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Jan 4 15:40:17 2024 +0100

    [torque] Emit layout asserts in cc file
    
    Instead of emitting layout asserts in generated *-tq.h and *-tq-inl.h
    files, which might get forgotten and get pulled in for every use of
    those headers, emit them in *-tq.cc files. This has two advantages:
    
      1. They are no longer opt-in, so _all_ types with both torque and C++
         layouts get asserted (this caught a bug in BytecodeArray!)
      2. They no longer need to be templated, because they're not being
         defined before the object definition. This will surely make the
         compiler happier.
    
    Bug: v8:12710
    Change-Id: I630495739c422e1ba89ce78cb218379d858f54cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5163948
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91730}

commit c95bcad3535d6038344ef5308213ee6aa3686038
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Jan 9 15:21:58 2024 +0800

    [loong64][mips64][wasm] Introduce WasmTrustedInstanceData
    
    Port commit 59acab802a319da23c1c005e062fbc2bab4d348b
    
    Change-Id: I7d5a8c610a950d0f9342c39a520bcf91eb222229
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5179772
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91729}

commit 443adf1aa98b752648c09e1c6e4d23e21a22e174
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Jan 8 15:41:30 2024 +0100

    [wasm] Unsandboxify memory start address
    
    The memory start stored in WasmTrustedInstanceData can be a raw pointer
    now that the object lives in trusted space.
    This saves some code and performance in every function that accesses
    memory 0.
    
    R=thibaudm@chromium.org
    CC=saelo@chromium.org
    
    Bug: v8:14499, chromium:1516319
    Change-Id: I40aa7fe1b489f0bcfd11aa280cbd00e08271c23b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5177007
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91728}

commit 2f230ab6888d289a703552fe58e8c5931cc9133a
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue Jan 9 09:25:01 2024 +0100

    cppgc: Clarify and check prefinalizer invariant
    
    Improve comment around CHECKs in non-allocating prefinalizers and add an
    additional CHECK for the same invariant.
    
    This does not fix any issue but would merely introduce a well-defined
    crash in case we get no-allocation scopes wrong.
    
    Bug: chromium:1516773
    Change-Id: I753d16361f83f47256433eef4b8e79412bf78a62
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5180366
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91727}

commit bf358800a4b16fa4154eb9f9fa62d6d135eb5aea
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Jan 8 20:07:33 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/2c36118..b4cce16
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/9b82414..f5d99b3
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/5c4205e..f582f5b
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/35a5306..6953ebe
    
    Rolling third_party/jinja2: https://chromium.googlesource.com/chromium/src/third_party/jinja2/+log/515dd10..e2d0243
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/34685c3..8c2468e
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/1ec0821..f80f02a
    
    Rolling third_party/markupsafe: https://chromium.googlesource.com/chromium/src/third_party/markupsafe/+log/006709b..0bad08b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759409868870552433
    
    Change-Id: Ib6b96857be51e41ca7c01f2d47f592574f325fe7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5176781
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91726}

commit 63e3c897e84f09a75be9a687f7a8cce8e0feebfc
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Jan 8 17:50:04 2024 +0100

    [turboshaft][arm] InstructionSelector: Enable behind --turboshaft-future
    
    This enables the turboshaft ISel for arm (arm32) in --turboshaft-future
    configs.
    
    Bug: v8:12783
    Change-Id: I63573ec029dfbc2421e5139c3101823f08686c6c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110980
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91725}

commit e256dae9ba9617a0a001f01ef3d749fafb0d7693
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Jan 8 16:44:28 2024 +0100

    [build] Detect reclient setting in gm.py
    
    This uses the reclient config switch from the .gclient file to
    determine if reclient could be used in gm.py. Using reclient
    will have precedence over goma as that's going to be deprecated.
    
    This also updates the reclient/goma args in the args.gn file if
    there's a difference to the old content. Otherwise developers might
    stick with old settings using goma forever.
    
    No-Try: true
    Bug: v8:14544
    Change-Id: I0bb96bc942f0d30ce8a1a0f42a0c95d4d852e6e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5172448
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91724}

commit 058a45d7e4268375eaa26d7e4a7c2cd9607d289b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Jan 8 17:43:46 2024 +0100

    [wasm] Check for exact alignment for atomic operations at decoding
    
    This CL fixes a bug in the wasm decoder which made it not comply with
    the spec: The alignment immediate for all atomic operations must be
    equal to log2(element_size).
    
    All test cases have been adapted to comply with the spec.
    The fuzzer has been adapted to generate the correct alignment.
    
    Note that this CL changes the observable behavior:
    A module containing an alignment that is smaller than log2(element_size)
    previously validated in V8 / Chrome and now generates a validation
    error. It was tested that SpiderMonkey / Firefox implements the spec
    correctly in this aspect, so the risk is rather small.
    
    The reason for the many failing test cases is either us trying to write
    "simple" test cases (alignment = 0) or our fuzzer generating "random"
    alignment within range [0, log2(element_size)].
    
    Fixed: v8:14513
    Change-Id: I375d64f36c9f29e752cf7333bef45f89d74a39f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123191
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91723}

commit 991dc47ce2b25c1d0d08a6864b78d58687512462
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon Jan 8 16:34:22 2024 +0100

    [exceptions] Relax VerifyBuiltinsResult wrt Termination
    
    ... when strict_termination_checks is off. Otherwise we'll constantly
    fail in builtin verification after a missing check elsewhere.
    
    Change-Id: I854a26a20ba9f2623fc0625829e68621a520c8f6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5176947
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91722}

commit 257ea3da7b93a287990f331f2d8d2630c679eb4f
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Jan 8 16:08:20 2024 +0100

    [maglev] Fix DeoptFrameScope to not copy DeoptFrame
    
    ... when accessing it via `data()`.
    
    As a drive-by, clean up DiscriminatedUnion to operate on the storage
    array directly (as a pointer), rather than the address of the storage
    (functionally equivalent, but harder to reason about).
    
    Bug: v8:7700, chromium:1511651
    Change-Id: Id91b956091a01abe39f7adbf27093a29bbb8ef8d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5177008
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91721}

commit 745c3801ddd65959e364f8f0c62c2d77d710bf78
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Mon Jan 8 10:29:15 2024 +0100

    [runtime] Add CHECK in Factory::ObjectLiteralMapFromCache
    
    This might help to find very infrequent in-the-wild crashes that
    currently fail in Map::set_instance_size.
    
    Drive-by-fix:
    - Remove unused Map::kMaxPreAllocatedPropertyFields
    - Use more descriptive kMaxUInt8 instead of magic constants
    - Add some more static_asserts around JSObject's instance size constants
    
    Bug: chromium:1503456
    Change-Id: I6c1bf6d231f279e95d62fbc88f29cd2cc6dbf2ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173467
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91720}

commit 43396def57783931fab89a5da9e2581eabc71a7b
Author: Andreu Botella <abotella@igalia.com>
Date:   Mon Jan 8 11:41:24 2024 +0100

    [reclient] Make reclient work without download_remoteexec_cfg
    
    The Chromium build instructions for using reclient don't say to use
    download_remoteexec_cfg, and while that works in Chromium, it doesn't
    in V8. The difference is that Chromium has two flags that run
    configure_reclient_cfg, one for the case where download_remoteexec_cfg
    is true and one for the case where it is false. V8 only had the one
    where it is true.
    
    This patch renames the existing `configure_reclient_cfgs` hook to
    `download_and_configure_reclient_cfgs`, to reflect the fact that it
    does downloads the configuration, and adds a new
    `configure_reclient_cfgs` hook that does not require
    download_remoteexec_cfg.
    
    Change-Id: Ief3649b7f2beb7729bd6823dccb5fed963211b0b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5172450
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Andreu Botella <abotella@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#91719}

commit fa61349c13bebe844adf6984e8764e20e53af63a
Author: Stephen Roettger <sroettger@google.com>
Date:   Mon Jan 8 15:03:54 2024 +0100

    [objects] avoid overflow in midpoint calculation
    
    Change-Id: Ia291dd0586ec0351c57d0526a7cd6a82c55513c3
    Bug: chromium:1514008
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5172449
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91718}

commit edffd8e8b3857357eb483625061f5484a72de9f8
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Jan 8 13:23:56 2024 +0100

    [wasm] Unsandboxify globals start
    
    The globals start stored in WasmTrustedInstanceData can be a raw pointer
    now that the object lives in trusted space.
    This saves some code and performance for accesses to globals.
    
    R=thibaudm@chromium.org
    CC=saelo@chromium.org
    
    Bug: v8:14499
    Change-Id: I2ab861d005bbc97ec67e827d12de170638d97636
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5177006
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91717}

commit c3a84c3b553845964a012516fe43d4c02b224a76
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Jan 8 10:37:36 2024 +0100

    [bazel] Add v8_enable_external_code_space
    
    Bug: v8:14486
    Change-Id: Ieb62f69234bcd911b5486b77d1c39a08705fed09
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173468
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91716}

commit ff9dc695ffc0412baf644e4cddfa92b93cd2b978
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Jan 8 12:14:55 2024 +0000

    [sandbox] Mark some trusted objects as allowed LO space objects
    
    Now that we are using the Trusted variants of Fixed- and ByteArrays, we
    also need to mark them as objects that we expect to see in the large
    object space.
    
    Bug: chromium:1515835
    Change-Id: I999af9bc728e5f1083b98dc8fdba1de00419a3a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5176946
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91715}

commit 56b16eaf805c917bbbf30414687f9130668e803e
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Jan 5 09:06:25 2024 +0000

    [sandbox] add a README.md for the sandbox
    
    The readme gives a brief overview of the sandbox and how it can be used
    and tested, then links to the various design documents about the sandbox
    for further information.
    
    Change-Id: Ie85eea4dc885304f7b460b0376629c722d35e84d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173365
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91714}

commit 26c82937850fc96dbaaa1033ec376e0ea341987f
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Jan 8 12:04:37 2024 +0100

    [maglev] Disable hoisting of OSR value phi untagging
    
    There is a regression on m1 crypto-sha1-SP startup which I cannot
    reproduce without access to the right hardware. Let's disable this
    for now until I can investigate more.
    
    Fixed: chromium:1516602
    Change-Id: I2d555cce320d4bb81c0682abafe6569e1ec50ecd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173898
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91713}

commit 8baf82c45a5a441bfe834c5448546999c415ffb8
Author: Darius M <dmercadier@chromium.org>
Date:   Thu Dec 21 16:59:28 2023 +0100

    [turboshaft][arm64] Add missing ShiftOutZeros covering optimization
    
    This was done by the Turbofan instruction selector, but we forgot this
    case in the Turboshaft one.
    
    Bug: chromium:1511566, v8:12783
    Change-Id: I7793b24b83b71bece6d2ace56940ca78be980f36
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144992
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91712}

commit 616af7ff7d71a84bb066a38f1c95503c01d889f6
Author: Hao Xu <hao.a.xu@intel.com>
Date:   Mon Jan 8 16:04:51 2024 +0800

    [turboshaft] Optimize instructions generated for LoadFieldByIndex
    
      Before:
        REX.W movsxlq r15,r8
        REX.W movq rbx,r15
        andl rbx,0x1
        movl rbx,rbx
        testl rbx,rbx
    
      After:
        REX.W movsxlq r15,r8
        testl r15,r15
    
    Change-Id: I078195543fefa0aeb4d3615dd60a6ba45a209732
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5176388
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Hao A Xu <hao.a.xu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91711}

commit 09f50a88257c9b86bcf56c9b85bbc0d13842398a
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon Jan 8 10:10:55 2024 +0000

    Revert "[api] Always clear internal exceptions on exit"
    
    This reverts commit 3e094653d7b48c6acafdc85045932ec2c884cc44.
    
    Reason for revert: Scoped microtasks also need to be skipped when
    there's a regular exception, otherwise it's dropped.
    
    Original change's description:
    > [api] Always clear internal exceptions on exit
    >
    > Support it by checking the try_catch for termination if present.
    >
    > Change-Id: I012244d444ad60d3516350051433f9294ecefee9
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144993
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91624}
    
    Change-Id: Idde19931208ad65b7348903a0ddb673dcb9e86d8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173469
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91710}

commit 78dd4b31847ab1f5b06ef3d8742a9f3835fb6919
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Jan 8 11:13:58 2024 +0100

    [maglev] Fix allocation folding in derived constructors
    
    Bug: v8:7700
    Change-Id: Ia33724d39d1397c7d47c36d14071abce6ed4b0fc
    Fixed: chromium:1515930
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173470
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91709}

commit d8fd81812d5a4c5c3449673b6a803279c4bdb2f2
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Jan 8 09:55:00 2024 +0100

    [maglev] Add a Uint32Constant
    
    ... and use it when getting a Uint32 value from another constant.
    
    This avoids a bunch of CheckedInt32ToUint32 in gaussian-blur.
    
    Bug: v8:7700
    Change-Id: I1a8a6d8843dbeabcfa5b8652d0bea0b1989276ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5172601
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91708}

commit 7af6f795ff15c02e1db32d084a4a2e0fa9595b8e
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Jan 5 17:56:15 2024 +0100

    [maglev] Cache TypedArray length loads
    
    Non-resizable TypedArrays can't change length, so we can cache loads of
    their length (for bounds checks) as a constant property.
    
    Since properties are cached by name, and users can overwrite "length"
    on a TypedArray, this additionally introduces a mechanism for using
    a non-Name value as the key into the properties cache.
    
    Bug: v8:7700
    Change-Id: I59e74ed7fdc5929d2de7146ee4d36b14ef35808e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5172594
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91707}

commit 0b5aabcd682b5d75daf4b439e42c72931edcaf1b
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Jan 8 09:09:17 2024 +0000

    Revert "[wasm] Unsandboxify fields of WasmTrustedInstanceData"
    
    This reverts commit c27b87c329c7535334e7c8194e5a6f5b2c0288d8.
    
    Reason for revert: https://crbug.com/1516319 and blocks the roll (https://ci.chromium.org/ui/p/chromium/builders/try/linux-chromeos-rel/1833144)
    
    Original change's description:
    > [wasm] Unsandboxify fields of WasmTrustedInstanceData
    >
    > Now that the object lives in the trusted space, we can store raw
    > pointers again.
    > This CL un-sandboxifies the Memory0Start and the GlobalsStart fields.
    >
    > R=ahaas@chromium.org, saelo@chromium.org
    >
    > Bug: v8:14499
    > Change-Id: Icba92a1c8f572f815add2d089d016c57d9f14643
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5168706
    > Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Reviewed-by: Samuel Groß <saelo@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91700}
    
    Bug: v8:14499, chromium:1516319
    Change-Id: I28fad3342a2263f7d9b315a98057dfcd75ede1c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5172447
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91706}

commit d54643539ea4264eaf2173523c13f0c8f36d2dae
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Jan 8 09:38:18 2024 +0100

    [maglev] Fix polymorphic double field missing case.
    
    Bug: v8:7700
    Change-Id: I15625b794689e30137bbaf86ebfb1e8a51b41fa9
    Fixed: chromium:1516052
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5176566
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91705}

commit f12d68db73f62faa43fe2b9c25a459b1f955d343
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Jan 8 09:35:11 2024 +0100

    [static-roots] Revert accidental change to gen-static-roots.py
    
    Yes, goma is deprecated. But gen-static-roots.py merely follows what
    gm.py does. So first we need to decide how to solve the problem at all.
    
    Bug: v8:14538, v8:14544
    Change-Id: I07c9cef00869b22e4571ccc0275bf0097902916f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173424
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91704}

commit b2d9f9c6122bc78f9baaf585001a02e57bc933b3
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Jan 7 08:08:04 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/961317d..9b82414
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/0fbc2a9..34685c3
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759545761399313153
    
    Change-Id: I87eec193d838c86d0fdb3be2e8e9280b56e189f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5170796
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91703}

commit 643f50d139d137ad39e017e1542d79b91148187c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Jan 6 20:18:17 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/721476c..2c36118
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/0efbd21..d556a0f
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/657c88b..9eb7931
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759591062281650961
    
    Change-Id: Ia5b45aafc81884ef8ba2319b4987f4277344538b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5175467
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91702}

commit ef5c9efdf60c6f4365e9551e24c03c5d16753039
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Jan 6 08:07:45 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/5e016b7..961317d
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/15db46b..0fbc2a9
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759636359716551585
    
    Change-Id: Ib045deee05f722f52f59145a8af1942920487b8b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5175131
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91701}

commit c27b87c329c7535334e7c8194e5a6f5b2c0288d8
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Jan 4 17:42:10 2024 +0100

    [wasm] Unsandboxify fields of WasmTrustedInstanceData
    
    Now that the object lives in the trusted space, we can store raw
    pointers again.
    This CL un-sandboxifies the Memory0Start and the GlobalsStart fields.
    
    R=ahaas@chromium.org, saelo@chromium.org
    
    Bug: v8:14499
    Change-Id: Icba92a1c8f572f815add2d089d016c57d9f14643
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5168706
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91700}

commit 1afbc88750df401746454ba237639cc6c896b306
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Jan 4 17:32:57 2024 +0100

    [wasm][asm] Handle termination on asm entry
    
    This applies minor fixes to several places where we did not handle the
    termination exception properly when instantiating asm.js.
    
    R=thibaudm@chromium.org
    
    Bug: chromium:1512426
    Change-Id: If440dda866780ee6fe3d7f73f902a6ca8ed1ade9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5168628
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91699}

commit 6aaf8e4818457c936c0f3defca72c5f948b73adb
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Jan 5 20:18:17 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/45d237e..721476c
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/97195ec..5c4205e
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/783c919..35a5306
    
    Rolling third_party/fuchsia-sdk/sdk: version:17.20231218.3.1..version:17.20240105.3.1
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/2602aec..42293b9
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759681659033622529
    
    Change-Id: Ib83f32877846be71e00b447f26ff4436aa4eb42a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5171011
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91698}

commit e0e454f06d46c1cec100028e39497913952a5590
Author: Frank Tang <ftang@chromium.org>
Date:   Fri Jan 5 17:00:00 2024 -0800

    [intl] Fix DisplayNames tests
    
    Bug: v8:14541
    Change-Id: I14a185e5ea5a7f038c560bbcc553ff3e7f3c2e9b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5174172
    Commit-Queue: Frank Tang <ftang@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91697}

commit 978989e7ec945824b293a8093238ceedb2b06d17
Author: Shu-yu Guo <syg@chromium.org>
Date:   Fri Jan 5 11:53:46 2024 -0800

    [interpreter] Fix derived constructor return value check
    
    Derived constructors should return `this` when they would
    have returned undefined. This is currently implemented as an AST rewrite
    during parsing, where `return e` is rewritten to
    
    return (tmp = e, tmp === undefined ? this : tmp)
    
    This rewrite is incorrect, because the undefined check should be
    evaluated after the derived constructor returns. Rewriting it in the
    return expression position causes it to be evaluated before returning, which is incorrect in the case of try-finally.
    
    This CL removes the AST rewrite and implements the check during bytecode
    generation, by compiling `return` statements in derived constructor as
    jumps to an epilogue that checks the return value before actually
    returning.
    
    Fixed: v8:12085
    Change-Id: I084f3ba67486b75b06e119674ad4569e7649cf20
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5171908
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91696}

commit fe3eb277ab10c59a483d8896097fe4b03132e0d3
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Jan 5 10:27:24 2024 -0500

    PPC/s390: [sandbox] Reference Code from OSR feedback vector slots via its wrapper
    
    Port 4fa7784b10b4148d551500d538db964cfc661f1c
    
    Original Commit Message:
    
        For moving Code objects out of the sandbox, they must be referenced
        through a code pointer (an index into the code pointer table) from
        inside the sandbox. This CL does so for the reference from OSR
        FeedbackSlots. As these reference are weak and essentially part of a
        FixedArray, we use the Code's in-sandbox wrapper object instead of a
        direct code pointer.
    
    R=saelo@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I1a1f8996a9d21bad7546a204eee4cfd5b123824e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173649
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91695}

commit d4bd2a3123aac3f6d6c583c3e034b4aab74a9d0b
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Jan 5 16:12:13 2024 +0100

    [maglev] Peephole optimise shifts by constant
    
    Shifts by a constant can shift by an immediate. As a drive-by, make
    bitwise and shift operation definition a bit more uniform across
    architectures.
    
    Bug: v8:7700
    Change-Id: Id79d856722b7932eedfe12239e774ff0b1e44266
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5172596
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91694}

commit 21fa286b4e94081dc2ea8557969c2d9396ccf511
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Jan 5 08:08:08 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/7d0f13a..45d237e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759726956164963361
    
    Change-Id: Id08aaf97159d4fda63ad1fe09c4550f52d660d71
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5171588
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91693}

commit db5660fe780028b28c79b2e2fdcb4a952e0617e1
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Jan 4 15:59:44 2024 +0100

    [maglev][x86] More efficient TryDoubleTo(U)Int32
    
    For signed integers it should be faster to do back conversion and
    comparison only in xmm registers.
    
    For unsigned integers we don't need an expensive precise unsigned conversion macro instruction. Instead we convert to int64, then truncate
    to uint32 and then convert back.
    
    Bug: v8:7700
    Change-Id: If20709970be8888fa205d65a92568d23696482fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5168688
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91692}

commit d3067c7624c084200c29e466558e814c57f66934
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Jan 5 15:42:18 2024 +0100

    [maglev] Don't register GetUint32ElementIndex as uint32 phi use
    
    GetUint32ElementIndex uses GetInt32ElementIndex + Int32ToUint32, which
    makes it an int32 use of the Phi.
    
    Bug: v8:7700
    Change-Id: I0eee76e6c2017ea7f6d8114a8f9db679d239e604
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5172555
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91691}

commit 67891bd05fcae92cbc5a44243e8af2f0d100b863
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Jan 5 14:11:16 2024 +0100

    [maglev] re-enable Maglev on Android 32-bit future
    
    Bug: v8:7700
    Change-Id: Ib63feee6a50e2bd53dadd462c3496b28b82fb1ba
    Fixed: chromium:1511543
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5173487
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91690}

commit 4fa7784b10b4148d551500d538db964cfc661f1c
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Jan 5 12:00:00 2024 +0000

    [sandbox] Reference Code from OSR feedback vector slots via its wrapper
    
    For moving Code objects out of the sandbox, they must be referenced
    through a code pointer (an index into the code pointer table) from
    inside the sandbox. This CL does so for the reference from OSR
    FeedbackSlots. As these reference are weak and essentially part of a
    FixedArray, we use the Code's in-sandbox wrapper object instead of a
    direct code pointer.
    
    Bug: chromium:1500887
    Change-Id: I6546766a1d947891e8702b29751aec446be9bd83
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5106128
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91689}

commit 96cf03108a535070d387bbaf88c899442d47d4d0
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Jan 5 09:54:57 2024 +0100

    [compiler] Avoid materialising a HeapNumber for constant doubles
    
    Split GetOwnFastDataProperty into GetOwnFastConstantDataProperty and
    GetOwnFastConstantDoubleProperty (where the former is not allowed to be
    used on double representation fields). This allows callers to get the
    raw double value of a double-representation field, without needing to
    allocate a new HeapNumber for the value.
    
    Change-Id: I0d691730b922c5409439d3638021d6f409e5a0ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5169845
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91688}

commit 0d2a19cc251157713ac16071a65790fcea0c447c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Jan 4 20:18:36 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/3985830..7d0f13a
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/65730c4..97195ec
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/259976c..783c919
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/7451ba4..1ec0821
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759772256342383457
    
    Change-Id: I1b7a6bd5a5d5a7597c00fdc6a8643f85d772f27d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5171989
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91687}

commit 87d1d509d26ebf76b272c2e7a54ecb9cd1f93efc
Author: Nidhi Jaju <nidhijaju@chromium.org>
Date:   Wed Dec 27 09:55:45 2023 +0000

    Add histogram for V8 Snapshot Decompression Time
    
    Added counter is:
      V8.SnapshotDecompressMicroSeconds
    
    Chromium CL: https://crrev.com/c/5149120
    
    Bug: chromium:1509719
    Change-Id: Ic8b32e05f8daf0e45a859e9bbfc91b4a94e168a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5149237
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Nidhi Jaju <nidhijaju@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91686}

commit 80fb7673eb2ddd2494edf6a491b943e574743d2c
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Tue Dec 26 21:36:19 2023 +0000

    Reland "[iterator-helpers] Ship iterator helpers"
    
    This is a reland of commit ee03a511db09e6d1ab1a1d9f0a4800746122c268
    
    Two web tests are changed and temporarily skipped to be able to ship iterator helpers. These tests will be re-enabled after shipping this feature.
    https://chromium-review.googlesource.com/c/chromium/src/+/5170312
    
    Original change's description:
    > [iterator-helpers] Ship iterator helpers
    >
    > This CL ship iterator helpers.
    >
    > Bug: v8:13558
    > Change-Id: I24695b1664314e80ac6625183c8053330d0b0206
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119127
    > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91646}
    
    Bug: v8:13558
    Change-Id: Id868b005efa78b9d1356c3e008989e9049756d7c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5171905
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91685}

commit 4eee7ba62a9fb37de13b9f904325252d10c619a6
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Jan 4 13:28:54 2024 -0500

    PPC/s390: [wasm] Introduce WasmTrustedInstanceData
    
    Port 59acab802a319da23c1c005e062fbc2bab4d348b
    
    Original Commit Message:
    
        This CL moves most data from the WasmInstanceObject to a new
        WasmTrustedInstanceData. As the name suggests, this new object is
        allocated in the trusted space and can hence hold otherwise-unsafe data
        (like direct pointers). As the Wasm instance was still storing some
        unsafe pointers, this CL closes holes in the V8 sandbox, and allows us
        to land follow-up refactorings to remove more indirections for
        sandboxing (potentially after moving more data structures to the trusted
        space).
    
        The general idea is that during execution we mostly work with the
        WasmTrustedInstanceData object. This is passed as a direct pointer to
        Wasm functions and is stored in Wasm frames.
        The WasmInstanceObject is the JS-exposed wrapper, which also holds
        user-defined properties and elements.
    
        See the design doc (linked from the tracking bug) for all the details.
    
    R=clemensb@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I8bd1adcc6902551089c269e32c6e0b37d658741a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5170008
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91684}

commit 5df830bd860a29230f9cee90f17bb97bbc868225
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Jan 4 08:07:52 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/2506603..3985830
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/b7ad4e9..0efbd21
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759817554275916337
    
    Change-Id: I67a71f89d55b6b59550d631424f11edcc2e5aa3a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5169290
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91683}

commit 7ffecf3b5451955d543ffa5becbeacbefd16818d
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Jan 4 09:51:23 2024 -0500

    PPC/s390: [sandbox] Reference Code from FeedbackVector via code pointer
    
    Port 8cf17a14a78cc1276eb42e1b4bb699f705675530
    
    Original Commit Message:
    
        For moving Code objects out of the sandbox, they must be referenced
        through a code pointer (an index into the code pointer table) from
        inside the sandbox. This CL does so for the reference from
        FeedbackVector objects. As this reference is weak, we use the Code's
        in-sandbox wrapper object instead of a direct code pointer as we
        currently do not support weak code/indirect pointers.
    
    R=saelo@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Iae8685459f00dc5459f6d1024bab095457fbc477
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5169585
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91682}

commit f4b3f6eb459514b199d016704090e0f1894f96c1
Author: Joyee Cheung <joyee@igalia.com>
Date:   Thu Dec 21 18:33:14 2023 +0100

    [compiler] support isolate compilation cache in CompileFunction()
    
    Previously there was no isolate compilation cache support for
    scripts compiled Script::CompileFunction() with wrapped arguments.
    This patch adds support for that.
    
    Refs: https://github.com/nodejs/node/issues/35375
    
    Change-Id: Id1849961ecd1282eb2dac95829157d167a3aa9a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4962094
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#91681}

commit 59acab802a319da23c1c005e062fbc2bab4d348b
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Jan 4 11:01:36 2024 +0100

    [wasm] Introduce WasmTrustedInstanceData
    
    This CL moves most data from the WasmInstanceObject to a new
    WasmTrustedInstanceData. As the name suggests, this new object is
    allocated in the trusted space and can hence hold otherwise-unsafe data
    (like direct pointers). As the Wasm instance was still storing some
    unsafe pointers, this CL closes holes in the V8 sandbox, and allows us
    to land follow-up refactorings to remove more indirections for
    sandboxing (potentially after moving more data structures to the trusted
    space).
    
    The general idea is that during execution we mostly work with the
    WasmTrustedInstanceData object. This is passed as a direct pointer to
    Wasm functions and is stored in Wasm frames.
    The WasmInstanceObject is the JS-exposed wrapper, which also holds
    user-defined properties and elements.
    
    See the design doc (linked from the tracking bug) for all the details.
    
    R=ahaas@chromium.org, saelo@chromium.org
    
    Bug: v8:14499
    Change-Id: I44fc81078d0785db1507ffcad1c1aaca39351e45
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5130974
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Eric Leese <leese@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91680}

commit 8cf17a14a78cc1276eb42e1b4bb699f705675530
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Dec 15 13:42:38 2023 +0000

    [sandbox] Reference Code from FeedbackVector via code pointer
    
    For moving Code objects out of the sandbox, they must be referenced
    through a code pointer (an index into the code pointer table) from
    inside the sandbox. This CL does so for the reference from
    FeedbackVector objects. As this reference is weak, we use the Code's
    in-sandbox wrapper object instead of a direct code pointer as we
    currently do not support weak code/indirect pointers.
    
    Bug: chromium:1500887
    Change-Id: Ibb148fea5b23f262559faa2ef2aed50669a80d6e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062836
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91679}

commit 7e5399e80019a9dbb25b09e2aee035498ea46f89
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Jan 4 12:04:55 2024 +0000

    [sandbox] Improve stack overflow detection in crash filter
    
    Previously, we relied on stack overflows running into a guard region to
    detect and filter them. However, this only works for non-main-thread
    stacks as these will have an explicit guard region (i.e. a PROT_NONE
    mapping) below them. In contrast, on Linux the main thread's stack has
    a kernel-managed "gap" region below it into which the kernel will not
    place any other mappings. As such, stack overflows on the main thread
    crash with a SEGV_MAPERR, not a SEGV_ACCERR.
    
    This CL now refactors the stack overflow detection logic and now uses a
    simple heuristic (essentially: "did the access violation happen on an
    address just below the current thread's stack base?") to detect stack
    overflows on any thread.
    
    Bug: chromium:1473063
    Change-Id: I1dfa8a1087612c39f38a439c0f5a2fc66a7084d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5168287
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91678}

commit cbe5b067a3d2fa2a23c5f05520d676471d73275d
Author: Leszek Swirski <leszeks@google.com>
Date:   Thu Jan 4 10:38:31 2024 +0100

    [tools] Fix roll_merge_gerrit httplib2 issue
    
    Make roll_merge_gerrit.py use vpython
    
    Fixed: v8:14534
    Change-Id: I4bf7a851467d118c96e7555cceb41b1ac83a6674
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5166331
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91677}

commit 51aac5b5cb0b29229984d00cfa094c794c079fe6
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Jan 4 11:17:24 2024 +0100

    [compiler] Explicitly allow racy heap number reads
    
    Add an explicit TSAN suppression for the racy read of HeapNumber bits
    when reading a constant field from the heap. This is a benign race, as
    we explicitly add a dependency on constness (thus any reads that race
    with a write will also invalidate that dependency), but we don't want to
    suppress it by pretending to do a relaxed atomic read, since this read
    isn't actually atomic (HeapNumber values are unaligned and not readable
    atomically).
    
    Fixed: v8:14526
    Change-Id: Id09f1928be01f5075dac22fc595c8ec65074f70b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5165451
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91676}

commit ae862c129c52e3786fec8f9bfaeb53de8448a7e8
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 3 14:05:27 2024 +0000

    Tweak the implementation of the "soft" abort mode
    
    This CL:
    * Moves the test for the soft abort mode during DCHECKs into the
      V8_Dcheck function. This way, also the DCHECK_EQ et al routines
      correctly perform the test for the abort mode.
    * Prints a message to inform the user that a DCHECK failure has been
      ignored. The failing condition and line information are included.
    
    Bug: chromium:1510306
    Change-Id: I44a094656cac65cd098bf43961dbfa460a7ff914
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5163869
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91675}

commit 5e1afae87bea807d3f44e21e60bbd3a66a9fbd93
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Dec 21 08:24:08 2023 +0100

    [infra] Get google_benchmark from DEPS
    
    This uses the GN layer for google_benchmark from Chromium directly,
    which will allow rolling without maintaining this layer in V8.
    
    This comes with the cost of compiling google_benchmark in v8
    stand-alone if no explicit compile target was specified on the
    command line (i.e. the implicit "all" target). This seems to be
    below 1% of overall compile time though and will likely be quickly
    hot in the reclient cache, since these targets rarely change.
    
    Bug: chromium:1513046
    Change-Id: Ia086c67ddc50f28f396527523f437eeb87f03f4b
    Cq-Include-Trybots: luci.chromium.try:linux-rel
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144246
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91674}

commit a654e27b50feb457a99ad27582dd555316eab587
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Jan 4 11:15:16 2024 +0800

    [riscv] Optimize macroassembler with B extension
    
    Change-Id: I0cfb5ecbe3088815bfdc81c5ade6bf0385483e10
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5147360
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91673}

commit acbfa775ae2a3a0e7e6b7528f33d545940f28ea4
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Dec 19 15:44:47 2023 +0100

    [wasm] Move exception reachability analysis to the decoder
    
    We currently have an reachability analysis which determines if a given block can throw, and if not, no code is generated for the respective
    catch. However, this analysis is done in the separate decoder
    interfaces. This resulted in the analyses sometimes not being
    consistent. Specifically for Turboshaft, this analysis cannot be made
    to be consistent with Turbofan and Liftoff. This is because Turboshaft
    inlines during graph generation; a call is always considered
    potentially throwing, but the inlined body might be not throwing.
    We cannot afford this inconsistency because Turboshaft relies on
    having the same feedback slots for function calls as Liftoff.
    To solve this, we move the analysis from the individual interfaces to
    the decoder.
    
    Bug: chromium:1511849
    Change-Id: If71e682edd6bb91d8c6efd31503715facb6fdc4b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5134849
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91672}

commit c7de69c8d6239bde585316cca0a62889fc27edbe
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Jan 3 20:18:43 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/b665dda..2506603
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/29e1dd0..65730c4
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7380fdc..259976c
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/6e2ded9..7451ba4
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759862853581705185
    
    Change-Id: I1d9beff6d88fd3bb67d1521e9244812eaf82e8ed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5166511
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91671}

commit 2c22471aca1efba9d42141d93ce0ba0f196184a7
Author: Julie Jeongeun Kim <jkim@igalia.com>
Date:   Wed Dec 20 12:56:34 2023 +0900

    Enable bugprone-unique-ptr-array-mismatch clang-tidy check
    
    Following this discussion on cxx[1], this CL enables
    bugprone-unique-ptr-array-mismatch clang-tidy check in Tricium.
    
    [1] https://groups.google.com/u/1/a/chromium.org/g/cxx/c/2t3C-eb-2ZA
    
    Bug: chromium:1513311
    Change-Id: I56df597ef98a333bf5dda60f819f6ce46f67e69d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5138020
    Commit-Queue: Julie Jeongeun Kim <jkim@igalia.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91670}

commit f3e0190df00a59150c7d86c9cf81073d9be8b294
Author: Julie Jeongeun Kim <jkim@igalia.com>
Date:   Wed Dec 20 16:33:01 2023 +0900

    Enable google-default-arguments clang-tidy check
    
    Following this discussion on cxx[1], this CL enables
    google-default-arguments clang-tidy check in Tricium.
    
    [1] https://groups.google.com/u/1/a/chromium.org/g/cxx/c/xLrKjHfvf8E
    
    Bug: chromium:1513346
    Change-Id: I4bbddc5f338640ee6466112b6ce856058100b569
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5138842
    Commit-Queue: Julie Jeongeun Kim <jkim@igalia.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91669}

commit 194031388fe3c01e439e6a6a53e7a699f8287b22
Author: wenqin.yang <wenqin.yang@intel.com>
Date:   Tue Jan 2 17:52:09 2024 +0800

    [static-roots] Supporting pass an argument for job count
    
    Some server may crash when running gen-static-roots.py without
    setting jobs count, because it may run out resource in this server.
    
    This CL support pass an argument for this script to avoid this crash.
    
    Change-Id: I6fa18da2098208c53ad5c3ad44d8eaf795f794c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5157298
    Commit-Queue: Wenqin Yang <wenqin.yang@intel.com>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91668}

commit f40b21794633472424f7b81da3dea26d50db4c38
Author: Adam Klein <adamk@chromium.org>
Date:   Wed Jan 3 21:23:03 2024 +0000

    Revert "[handles] Add LIFO check for handle scopes"
    
    This reverts commit 0c7d3813125b98406f276187d71d7335b94cf5fb.
    
    Reason for revert: blocks V8 roll into Chromium:
    https://ci.chromium.org/ui/p/chromium/bisection/test-analysis/b/5663159538941952
    
    Original change's description:
    > [handles] Add LIFO check for handle scopes
    >
    > This CL adds three checks, related to the proper use of isolates and
    > handle scopes:
    >
    > 1. For a given isolate, handle scopes are created and destroyed in a
    >    LIFO manner;
    > 2. When a thread enters an isolate, there is no different thread that
    >    has already entered it; and
    > 3. When a thread exits an isolate, it must have previously entered it.
    >
    > These checks are behind the compile-time flag V8_ENABLE_CHECKS, which
    > is by default enabled for V8 debug builds, and can be enabled from
    > chromium builds by setting v8_enable_v8_checks=true. Because the CL
    > introduces debug fields to an object of the V8 API (v8::HandleScope),
    > the choice of a flag that is consistently set both in chromium and in
    > V8 is important.
    >
    > Change-Id: If24722619729cd4053ea97cb7be8645228ebd2d7
    > Bug: v8:13270
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110566
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Auto-Submit: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91659}
    
    Bug: v8:13270
    Change-Id: Ifa5250ef34f72ff3544bc6a18c0adba3174051b2
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5166191
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91667}

commit 90fd8c27e751ca18e3831afa4fb1846f0ec19e4e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Jan 3 08:05:44 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/bd311c3..29e1dd0
    
    Rolling tools/luci-go: git_revision:7010a6e144fc543d34546af3636ee8fa656469a5..git_revision:a7b7f319032d68f1cf0e710e695a84957d3b11dc
    
    Rolling tools/luci-go: git_revision:7010a6e144fc543d34546af3636ee8fa656469a5..git_revision:a7b7f319032d68f1cf0e710e695a84957d3b11dc
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759908152123528865
    
    Change-Id: I52aa6a28a5b3834d3726b9932f61132f8bc9f8f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5164168
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91666}

commit f47af5e5df54f16868b320be24d6a4d34b236d0a
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 3 14:17:42 2024 +0000

    [sandbox] Move BytecodeArray::handler_table out of the sandbox
    
    We now use the newly added TrustedByteArray class for a BytecodeArrays'
    handler_table field and reference them trough one of the newly added
    protected pointers. The handler table should be considered trusted as
    it contains indices into its associated BytecodeArray and would
    therefore allow executing attacker-controlled bytecode if manipulated.
    
    Bug: chromium:1472728
    Change-Id: I0addeb6f56f076228370c1f44ba04f106bf65f15
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075011
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91665}

commit c3cb7f0cf05a7040e61ee1909f823d5756990564
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Jan 3 15:17:50 2024 +0100

    Reland "[maglev] Bail early when we know a smi check must fail"
    
    This is a reland of commit fe8b39dec5cf805f082d8761c65e1584b65b406e
    
    The issue was that TryBuildPolymorphicElementAccess relied on `Goto`
    not decrementing the predecessor count when coming from a dead block.
    The solution is to not do a `Goto` when the block is dead and instead
    skip the case.
    
    Drive-By: Simplified the predecessor counting logic in
              `TryBuildPolymorphicElementAccess`.
    
    Original change's description:
    > [maglev] Bail early when we know a smi check must fail
    >
    > When emitting a checkSmi and the current node type of the value
    > guarantees the node not to be a smi we know that the check will fail.
    > There is no point in compiling any further and we should abort right
    > away.
    >
    > Bug: v8:7700
    > Change-Id: I9a15b9da556798d877fbba040c2bf4feb9557b20
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116679
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91512}
    
    Bug: v8:7700
    Change-Id: I1942b2924c08e16595368d46bdcc655c38bd89d7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5137676
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91664}

commit 8e85f105f5dbd8e399bdf1df6fb6a0a4d8a6f635
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 3 13:31:51 2024 +0000

    [sandbox] Implement basic ProtectedPointer support
    
    This CL implements basic support for protected pointers: pointers to
    HeapObjects that cannot directly be modified by an attacker. When
    accessing such a pointer, it can be assumed that neither the pointer
    itself, nor the pointed-to object have been manipulated by an attacker.
    This is because ProtectedPointers can only be used for references
    between TrustedObjects, so that both the pointer and the pointed-to
    object live in trusted space, outside of the sandbox.
    
    This CL:
    - Introduces a new slot type: ProtectedPointerSlot.
    - Adds a new visitor routine: VisitProtectedPointer.
    - Implements helper routines for declaring, defining, and iterating
      over protected pointers fields.
    - Changes the (de)serializer to support protected pointers.
    - Makes the garbage collector aware of protected pointers. For that, a
      new write barrier and a TRUSTED_TO_TRUSTED remembered set are added.
    
    This CL only implements C++ runtime support for protected pointers.
    Support for these pointers in e.g. CSA will be added later.
    
    Bug: chromium:1505752
    Change-Id: I59da2e3179e3e7edec33ed86212e6db2128ee637
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079470
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91663}

commit 3854feb3709a2163ae3928097db7bd677a10e901
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Jan 3 14:20:55 2024 +0100

    [maglev] Fix hoisting phi untagging and re-enable it
    
    We cannot currently hoist in front of resumable loops as this would
    require untagging during resumption.
    
    Bug: chromium:1513626
    Change-Id: Icbe855bf8026ca7efc09098ceec200cf093613af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5163947
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91662}

commit 97a0ca2ac787e79fe0634cfb025d873c7bfa1fb2
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Jan 3 13:51:16 2024 +0100

    [maglev] Clear latest checkpoint after deopt frame scope
    
    Checkpoints created during deopt frame scopes are no longer valid after
    the scope finishes, so clear the latest checkpoint. This is slightly
    pessimistic, as the latest checkpoint could have been created before the
    scope, but it probably doesn't matter.
    
    Bug: chromium:1511651
    Change-Id: If113c9d6f50a450bb79d74cdd98a3d5588c85e02
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5163868
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91661}

commit aae8ec28b2e2ba8be993cb372cc7c0907f602b1e
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Jan 3 11:51:34 2024 +0000

    [sandbox] Introduce CodeEntrypointTag
    
    When the sandbox is enabled, a Code's entrypoint pointer is stored in
    the code pointer table (CPT). Then, any code entrypoint exposed in the
    CPT can be invoked by an attacker from any place that does a control
    flow transfer through the CPT. This can be problematic if the calling
    convention differs between caller and callee. For example, bytecode
    handlers are currently available through the CPT, but do not expect to
    be called in the context of e.g. a JavaScript function, and will
    misbehave if they are.
    
    This CL now introduces a CodeEntrypointTag enum to solve this issue: the
    tag is XORed into the top bits of the entrypoint pointer, and the
    callsite must then untag the pointer with the expected tag. If the tags
    mismatch, the pointer will be invalid.
    
    For now, there are only two tags: the default tag and the bytecode
    handler tag. As we never expect to call into a bytecode handler through
    the CPT, no callsite needs to change as part of this CL. However, in the
    future we'll likely want to distinguish between e.g. Wasm, RegExp, and
    JavaScript code, at which point the respective callsites will need to
    performing the untagging.
    
    Bug: chromium:1507800
    Change-Id: If0c4c01b402dab631a04213cb7ef588a7d201763
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5130973
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91660}

commit 0c7d3813125b98406f276187d71d7335b94cf5fb
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Dec 20 14:08:28 2023 +0100

    [handles] Add LIFO check for handle scopes
    
    This CL adds three checks, related to the proper use of isolates and
    handle scopes:
    
    1. For a given isolate, handle scopes are created and destroyed in a
       LIFO manner;
    2. When a thread enters an isolate, there is no different thread that
       has already entered it; and
    3. When a thread exits an isolate, it must have previously entered it.
    
    These checks are behind the compile-time flag V8_ENABLE_CHECKS, which
    is by default enabled for V8 debug builds, and can be enabled from
    chromium builds by setting v8_enable_v8_checks=true. Because the CL
    introduces debug fields to an object of the V8 API (v8::HandleScope),
    the choice of a flag that is consistently set both in chromium and in
    V8 is important.
    
    Change-Id: If24722619729cd4053ea97cb7be8645228ebd2d7
    Bug: v8:13270
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110566
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Auto-Submit: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91659}

commit 0a6d1dbe1b55c737f712fc0cedf19fc26f288ef5
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 2 20:22:23 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/758a805..b665dda
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/6d3a475..bd311c3
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/0e40b92..7380fdc
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/8806fb8..6e2ded9
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/2b9d966..657c88b
    
    Rolling tools/luci-go: git_revision:0ffd60c8bd4fa542fb8d7c6a60ead9b96dc4387a..git_revision:7010a6e144fc543d34546af3636ee8fa656469a5
    
    Rolling tools/luci-go: git_revision:0ffd60c8bd4fa542fb8d7c6a60ead9b96dc4387a..git_revision:7010a6e144fc543d34546af3636ee8fa656469a5
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759953449363604257
    
    Change-Id: I422e0f61da571e1ff16a3b8a40892dc6870bfc76
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5161708
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91658}

commit 0a195acabff5ba4d4840795eba3c2d39f800d352
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 2 08:18:01 2024 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/911ccd8..0e40b92
    
    Roll created at https://cr-buildbucket.appspot.com/build/8759998749156162865
    
    Change-Id: I6c0bb4f88138441b4283e0e7d722e13ac79586be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5158651
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91657}

commit febee79c14b2e496551e788fb384eebfa4b61b84
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Jan 2 07:03:48 2024 -0800

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/6cbb6da9..b628e4b0
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760002914104575361
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834
    Change-Id: I3cc1eb946d3fcb9bab3a0234242454a67362cc6f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5158649
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91656}

commit 34dd7ec8a7291448d9f7cc1586e32aa90a18e23b
Author: Liviu Rau <liviurau@chromium.org>
Date:   Tue Jan 2 11:50:24 2024 +0100

    [test262] Exclude features.txt from git history based sync
    
    The features file gets deleted if not marked as exception:
    
    https://ci.chromium.org/ui/p/v8/builders/ci-hp/Test262%20importer/b8760232789796479777/overview
    
    https://logs.chromium.org/logs/v8/buildbucket/cr-buildbucket/8760232789796479777/+/u/Update_test262_import_deps/Import_Test262_changes_into_V8./stderr
    
    https://chromium-review.googlesource.com/c/v8/v8/+/5156214
    
    Bug: v8:14002
    Change-Id: Ib8ccde1ef5eb32ca606d662b596da7adaabce67e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5152895
    Reviewed-by: Almothana Athamneh <almuthanna@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91655}

commit 8c9e8109ccc6ae43c976cf68192241528bb279d6
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Jan 2 13:41:34 2024 +0100

    [cleanup] Clang Tidy: avoid flusing buffer on newlines
    
    Spotted by Google3.
    
    Rationale: http://clang.llvm.org/extra/clang-tidy/checks/performance/avoid-endl.html
    
    Change-Id: I58f45151adf1e8b8695c732520ddf00b1bbc5118
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5151325
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91654}

commit e8f2feb2266832fb613b02822dd1e1e484a6c2e4
Author: pthier <pthier@chromium.org>
Date:   Tue Jan 2 12:49:39 2024 +0100

    [maglev] Disable hoisting of OSR value phi untagging
    
    Bug: chromium:1513626
    Change-Id: I24fb77cf436101972fa35a899273512907bd8a26
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5156709
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91653}

commit 09a9d58971f20d264236959eac2043e8531547fa
Author: wenqin.yang <wenqin.yang@intel.com>
Date:   Wed Dec 27 13:09:45 2023 +0800

    [ic] Bug fix for invalidity validity cell
    
    Change-Id: Ib3ebc8c4fcf3568945266a824516ab12b634706c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5153325
    Commit-Queue: Wenqin Yang <wenqin.yang@intel.com>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91652}

commit af9b649157ce8d730d7cb7100f16733e1f89b24b
Author: pthier <pthier@chromium.org>
Date:   Fri Dec 15 09:45:00 2023 +0100

    [json] Stringify: Handle holey arrays on fast path if possible
    
    As long as there are no elements on the prototype of a holey array, we
    can treat holes as undefined and handle them on the fast path.
    
    Change-Id: Ia40f9f855f3ecef3c25259b9f9adcb3e7ce0ba29
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4900600
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91651}

commit 3acf703f7d884c624c486e49eecaec4e7d4e76bd
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Dec 30 20:14:50 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/413b664..758a805
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760225230210060561
    
    Change-Id: Id455348e3f55b1517f588dda4654053834d2b52a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5155582
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91650}

commit 53c1c1e0f2c1665b30d1c8094960d2a764846910
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Dec 29 08:18:40 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/android_sdk/public: Sy00LuyBIUJdRGYKwg0zjWH8eAIUvgnnNiPkI8etaZYC..BRpfUGFd3WoveSGTLVgkQF7ugIVyywGneVICP4c0010C
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760361136704810753
    
    Change-Id: I93c8c23e0c0423300d2aedcae910ce09e35e1e79
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5153956
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91649}

commit 7c0efbbe1fc19fd7c956a2c1d3fd8f5078e45914
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Dec 28 20:07:17 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/48310a7..413b664
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/ecef358..5e016b7
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/8191486..911ccd8
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/d0429f0..15db46b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760406433930992321
    
    Change-Id: Ie83dd704c6d5fd61b05cddcd6f3b27b1b3fdf19a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5154524
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91648}

commit 5ad66e9b9e0ad9d7065493d231b1228b7c0c86af
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Dec 28 19:25:10 2023 +0000

    Revert "[iterator-helpers] Ship iterator helpers"
    
    This reverts commit ee03a511db09e6d1ab1a1d9f0a4800746122c268.
    
    Reason for revert: V8 Blink Linux failed
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Blink%20Linux/28558/overview
    
    Original change's description:
    > [iterator-helpers] Ship iterator helpers
    >
    > This CL ship iterator helpers.
    >
    > Bug: v8:13558
    > Change-Id: I24695b1664314e80ac6625183c8053330d0b0206
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119127
    > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91646}
    
    Bug: v8:13558
    Change-Id: Ied6b6214422c0d3ca5f281fb093682580167409f
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5154568
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91647}

commit ee03a511db09e6d1ab1a1d9f0a4800746122c268
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Tue Dec 26 21:36:19 2023 +0000

    [iterator-helpers] Ship iterator helpers
    
    This CL ship iterator helpers.
    
    Bug: v8:13558
    Change-Id: I24695b1664314e80ac6625183c8053330d0b0206
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119127
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91646}

commit 6219adfa94f3a3e9c7de76dfb40a7103d86826c4
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Dec 28 08:19:00 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/fd08af4..48310a7
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760451733458018161
    
    Change-Id: I79e5da1e6ffacefc1ac5422e9a2c85c131801f1e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5153353
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91645}

commit 02951b84690052df671839c3c5449fa573e84cb1
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Dec 27 20:07:14 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/2e8980b..6d3a475
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/007dd45..8191486
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760497032051474273
    
    Change-Id: I2dfe9f8a9c444ac6c4604d3353cb41b8ca388232
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5151618
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91644}

commit 56a4c6f912071a49bf9932205dae4f7010e610cb
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Dec 27 08:18:09 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/ffbe9ab..fd08af4
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/f2abc0c..2e8980b
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760542326702531121
    
    Change-Id: Ibe7a6dba2166ef53fa4acb0e021209ce93fae2e7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5152320
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91643}

commit 970c2bf28ddb93dc17d22d83bd5cef3c85c5f6c5
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Dec 26 20:12:26 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/android_toolchain/ndk: XSjN84pHxBPX13CrUj3fQjEroncvFGGeJY9wDVEDswoC..wpJvg81kuXdMM66r_l9Doa-pLfR6S26Jd1x40LpwWEoC
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760587628074095569
    
    Change-Id: I3dfddd481daa409444b6ed55b8379e5310e34cb1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5152319
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91642}

commit c931822888622e1e9bd3d7fcfb7dc5e88a2e0bf3
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Dec 25 08:07:13 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/85f13ae..ffbe9ab
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/0d01458..ecef358
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/31b0145..d0429f0
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760723524779042193
    
    Change-Id: I6710179b188a25f01eafd0dc80983ac4a180478c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5151873
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91641}

commit 87eb563dbc3d88151b0588947795add32ef8dcf1
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Dec 24 20:22:45 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/2ece0c2..85f13ae
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760768820571922193
    
    Change-Id: Id7f53c722446ac5e2860118b5a29c9f188a7e685
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5150521
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91640}

commit 0f6457db0238d99068e0cba8032eccfdb3f87c73
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Dec 25 10:08:55 2023 +0800

    [riscv] Fix debug build
    
    Change-Id: Ic4f89c8fe202484a171c14e7048e22345181761d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5149595
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91639}

commit bdae40199def759c62f0241d06fe8bb0eb5949e6
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Dec 24 08:18:20 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/3f47abf..0d01458
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/e05dc0f..31b0145
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760814121022457713
    
    Change-Id: I37535ce584739cb8c3c21c9b530753c29acf821b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5150451
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91638}

commit a1c6a852acc88bc14ada98ba6429fdf1f57efda5
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Dec 23 20:07:12 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/77e2825..3f47abf
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/42d35c7..b7ad4e9
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/9b0e39e..e05dc0f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760859417718915345
    
    Change-Id: I60b8e9cd2dbc349af04cfe0f58db8f901feddf62
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5148569
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91637}

commit 0310305059014b3dafe808364b382fa5923a6a23
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Dec 22 20:17:52 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/49c8dd3..f2abc0c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760950016895896065
    
    Change-Id: I6939417bae0bf71c6d16aae52a20204850586d6a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5148954
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91636}

commit 69cbb37c026e0c54aab45e91cec528cdf3586be3
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Dec 22 08:07:18 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/71c79f4..2ece0c2
    
    Rolling third_party/android_toolchain/ndk: NSOM616pOQCfRfDAhC72ltgjyUQp9lAWCMzlmgB18dAC..XSjN84pHxBPX13CrUj3fQjEroncvFGGeJY9wDVEDswoC
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/09ec89c..2b9d966
    
    Roll created at https://cr-buildbucket.appspot.com/build/8760995314248800689
    
    Change-Id: Ie8b97b21572f152e4ce176b7f83e2b4738614c08
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5149929
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91635}

commit f2003219721eb761abe3e5939b254cbf8719291d
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri Dec 22 14:22:39 2023 +0000

    Revert "[heap] Check allocation limit overshot when expending new space"
    
    This reverts commit 8c29cfe6bdd432f6dfbcda6a8fa5b830b8502d40.
    
    Reason for revert: Suspected for pixel6 jetstream2 timeouts
    
    Original change's description:
    > [heap] Check allocation limit overshot when expending new space
    >
    > Don't let new space allocate more pages during full GC incremental
    > marking if the allocation limit is overshot by large margin.
    >
    > Drive-by: refactor the conditions for allocating another page to
    >         Heap::ShouldExpandYoungGenerationOnSlowAllocation.
    >
    > Bug: v8:12612
    > Change-Id: I984473b860176796337b95d23cef7b8276538915
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116541
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91515}
    
    Bug: v8:12612
    Change-Id: Id322cfa02f7dd2327ceee95cc60ed8fb7b22255e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5148208
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91634}

commit a1ac54473f095b1d9a97db373d0c60e66b75b21a
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri Dec 22 13:50:04 2023 +0100

    [api] Drop only_terminate_in_safe_scope
    
    Change-Id: I9b9f995396c9910148e06f598b2a09203a9a0076
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144994
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91633}

commit bb5e691f77bf683808b42800030998b102fe59de
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Dec 19 16:07:00 2023 +0100

    [wasm][refactor] Always set instances field on WasmMemoryObject
    
    Instead of making it an optional field and allowing it to be
    `Undefined`, make it a mandatory field and initialize it by the
    empty_weak_array_list.
    
    R=ahaas@chromium.org
    
    Bug: v8:14499
    Change-Id: I1186159ed6d4398455ae90f1533d384fee663d25
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5135297
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91632}

commit 2d9bc6737ee63aadb7ce3acf3068766678843738
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Dec 22 13:55:33 2023 +0100

    [ic] Fix handling of proto handlers in DefineOwnICs
    
    Drive-by: deduplicate slow handler code in HandleStoreICProtoHandler.
    
    Bug: chromium:1512391
    Change-Id: Icf8187b348cff81da4142b360b5253e9e6565461
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5147214
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91631}

commit 84aaa4028930a1ad383da3480cc941d940bd9eb7
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Dec 22 15:23:03 2023 +0800

    [riscv][builtins] Track topmost script-having execution context
    
    Port commit 32548386efc8d7b0d199fe8ec11e3eda3f5b8264
    
    Bug: v8:13825
    
    Change-Id: Ic1c4974f0759c75699532d77031129c77c2ab83a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5147361
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91630}

commit 6cee62db89203c1e3ff8020e5372e434b3d04147
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Dec 21 21:39:45 2023 +0100

    [runtime] Fix CanSubclassHaveInobjectProperties predicate
    
    ... for all JSApiObjects (all of them are allowed to have inobject
    properties, not just the first one - JS_API_OBJECT_TYPE).
    
    Bug: chromium:1509910
    Change-Id: Ie6a801ddc743372c7013ed020634e50dca5e2ed4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5147787
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91629}

commit 41c534e452ec648a21e7f4cd793dc86f5bcf73c2
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Dec 21 18:29:21 2023 +0100

    [maglev] Untagging for dependent loop phis
    
    Try untagging of phis in a fixed-point iteration (capped at 2). This
    allows us to untag phis where a later loop phi flows into an earlier
    phi of the same block.
    
    Bug: v8:7700
    Change-Id: I2adbd925fad8d2a4966e75d4b106231d3bc4ec0c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5130972
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91628}

commit 015b3830b7cc9c4fe29dfd11983442264d71262b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Dec 21 20:10:03 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/f2f5a10..71c79f4
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/e8e9f90..77e2825
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/8c91f1a..42d35c7
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/3900055..007dd45
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/715a7b8..9b0e39e
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/3cafb40..2602aec
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/002f75d..40e35a7
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/289bde0..09ec89c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761040613364837649
    
    Change-Id: I28b4a59689aa60da3214279af826f55bc6bfa1c9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5148948
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91627}

commit 3664f8217cac478fadc0c8bc04ac34ce24f79476
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Thu Dec 21 17:33:02 2023 +0800

    [loong64][mips64][builtins] Track topmost script-having execution context
    
    Port commit 32548386efc8d7b0d199fe8ec11e3eda3f5b8264
    
    Change-Id: I8f479367ac57023c11a63787a31ba78a77764e17
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144208
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#91626}

commit 1d819756cf415036a8d6a493adec592c9c830ab1
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Dec 21 19:11:35 2023 +0000

    Revert "[exceptions] Try to find where exceptions are coming from"
    
    This reverts commit 4ad0344129a2a4e5f28373761317a3bd4cb88fff.
    
    Reason for revert: Was fixed by properly clearing Termination from trycatch
    
    Original change's description:
    > [exceptions] Try to find where exceptions are coming from
    >
    > Bug: chromium:1509114
    > Change-Id: I443dd7c7855dfe38da69cdebe12748d4f871da9a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144987
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91620}
    
    Bug: chromium:1509114
    Change-Id: Id5494aa0a8c0856dd79fbe70236eefc4fa530ee2
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5147307
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91625}

commit 3e094653d7b48c6acafdc85045932ec2c884cc44
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Dec 21 17:57:08 2023 +0100

    [api] Always clear internal exceptions on exit
    
    Support it by checking the try_catch for termination if present.
    
    Change-Id: I012244d444ad60d3516350051433f9294ecefee9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144993
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91624}

commit 429b7d0399367d6bd31daa39bdc3a9938757f3c5
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Dec 21 17:15:35 2023 +0100

    [objects] Don't pretend that HeapNumber value loads are atomic
    
    We can't atomically load or store HeapNumber values, because they are
    stored unaligned under pointer compression. However, the methods are
    marked "relaxed", with value_as_bits doing an actual "Relaxed_Memcpy",
    to silence TSAN warnings.
    
    However, this doesn't make the read/write an actual relaxed atomic
    load/store -- furthermore, the actual writes to the value (not "as
    bits"), as generated by torque, still use the non atomic WriteField
    helper.
    
    Removing all this and using non-atomic loads seems to still pass the
    regression test added in https://crrev.com/c/2996201, so it seems to
    be unnecessary.
    
    Bug: chromium:1224277
    Change-Id: Ic8558d4c58b08a0280266937e7ac88aa70fe3220
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5145369
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91623}

commit 9573fabd15b337642e2075a63325f7b0bfcf0d9e
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Dec 21 16:50:36 2023 +0100

    [api] Drop support for Escape + Local() where possible
    
    Only use InternalEscapableScope internally, and specialize it to not
    support Escape(Local<T>()) anymore.
    
    Drop runtime check for double-escaping values. Make it a DCHECK instead.
    
    Change-Id: Id186296c5226a54b44c4fc489d6eac395c988e42
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144990
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91622}

commit dba30a61abdb1468238f951277ab7c7cc5a18e28
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Dec 21 13:26:36 2023 +0100

    [exceptions] TryCatch::ResetInternal on CancelTerminateExecution
    
    Otherwise the TryCatch isn't actually cleared, as regular `Reset` only
    drops the termination exception on final exit out of V8.
    
    Change-Id: I17b6bbf13fda339c94afe8525226b6bcc6bfa770
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144988
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91621}

commit 4ad0344129a2a4e5f28373761317a3bd4cb88fff
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Dec 21 13:18:12 2023 +0100

    [exceptions] Try to find where exceptions are coming from
    
    Bug: chromium:1509114
    Change-Id: I443dd7c7855dfe38da69cdebe12748d4f871da9a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144987
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91620}

commit 6ef1a77f2f4ec35f5a5ea92ea17e799dd7f1847b
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Dec 21 09:31:58 2023 +0000

    Revert "[heap] Take young gen size into account for allocation overshoot"
    
    This reverts commit 0c3a428c1ed56571587c313995036a35e6d55934.
    
    Reason for revert: Too many regressions caused by this CL. Will investigate further try to reland after the holidays.
    
    Original change's description:
    > [heap] Take young gen size into account for allocation overshoot
    >
    > Don't ignore young gen allocations when checking if allocation limit was
    > overshot by a large limit.
    >
    > Drive-by: PercentToGlobalMemoryLimit was looking at the wrong values.
    >
    > Bug: v8:12612
    > Change-Id: I0b2d22bdf0f075ef11e3d6170e60df9bca37630b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116499
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91505}
    
    Bug: v8:12612
    Change-Id: I9ee21cf74ab7773d4719f99c9987244a115c6ec4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5144466
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91619}

commit 5d3f33c214d11fa7a2faf558ada5d82cdacf1ceb
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Dec 21 10:26:06 2023 +0100

    [tagged-ptr] Remove offsetof with runtime array indexing
    
    A strict reading of the offsetof spec reveals that the result has to be
    an integral constant, which means in particular the member access can't
    include a runtime index. Most compilers seem to be permissive here, but
    gcc 11 got stricter and requires the index to be an integral constant
    too. We have one case of such code now failing with gcc (getting the
    offset of a string character by index) -- change it to explicitly add
    the index.
    
    See also:
      * Node issue exposing this:
        https://github.com/nodejs/node-v8/issues/277
      * GCC bug explaining the change:
        https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95942
    
    Change-Id: I5820432595bd8df7e1d7e239979db1ab506ce901
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5143447
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91618}

commit 06862062bd2c4f3e32f3979add0279df0adad5b9
Author: Julie Jeongeun Kim <jkim@igalia.com>
Date:   Wed Dec 20 12:13:47 2023 +0900

    Fix the warning reported by 'bugprone-unique-ptr-array-mismatch'
    
    This CL replaces 'char' with 'char[]' since it's initialized with an
    array.
    
    Bug: chromium:1513311
    Change-Id: I379ac45ece0eb778f354c23613aec78629298526
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5138019
    Commit-Queue: Julie Jeongeun Kim <jkim@igalia.com>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91617}

commit aad1878c776adc3e095dd12d896f4a0eadd8e693
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Dec 20 13:51:51 2023 -0500

    PPC/s390: [builtins] Track topmost script-having execution context
    
    Port 32548386efc8d7b0d199fe8ec11e3eda3f5b8264
    
    Original Commit Message:
    
        The topmost script-having execution context is defined by the Web IDL
        spec here:
        https://html.spec.whatwg.org/multipage/webappapis.html#topmost-script-having-execution-context)
        In short it's the context of the topmost user JavaScript code if
        available and it's used in the definition of the incumbent context
        (see https://html.spec.whatwg.org/multipage/webappapis.html#incumbent-settings-object).
    
        This CL adds machinery for tracking topmost script-having execution
        context when it's known "for free" which allows to speed up
        v8::Isolate::GetIncumbentContext() for those cases.
    
    R=ishell@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: If48a6323a923ee783ba393c5e07467b0d0215b81
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5141607
    Reviewed-by: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Michael Dawson <midawson@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91616}

commit 6196de89e304b22a007397fcd7424d29d18dbd09
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed Dec 20 09:55:54 2023 -0800

    [float16array] Add third_party/fp16
    
    In prep for Float16Array implementation.
    
    Bug: v8:14012
    Change-Id: I19cc596140e69d6eb95ed420f8e84364ea52149f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5137430
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91615}

commit 32548386efc8d7b0d199fe8ec11e3eda3f5b8264
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Dec 15 17:23:25 2023 +0100

    [builtins] Track topmost script-having execution context
    
    The topmost script-having execution context is defined by the Web IDL
    spec here:
    https://html.spec.whatwg.org/multipage/webappapis.html#topmost-script-having-execution-context)
    In short it's the context of the topmost user JavaScript code if
    available and it's used in the definition of the incumbent context
    (see https://html.spec.whatwg.org/multipage/webappapis.html#incumbent-settings-object).
    
    This CL adds machinery for tracking topmost script-having execution
    context when it's known "for free" which allows to speed up
    v8::Isolate::GetIncumbentContext() for those cases.
    
    Bug: v8:13825
    Change-Id: I52d137eabb91962bdde389018bcfa9aada3fde4a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5107110
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91614}

commit e22bae6919a4aae4f04e80372b7fe596b919989d
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue Dec 19 15:53:45 2023 +0100

    [api] Add non-owning SnapshotCreator ctor
    
    Blink's usage of Isolate creation relies on a 2-stage initialization:
    1. The Isolate is allocated without initializating.
    2. Blink sets up the platform with an Isolate address as key for
       certain task runners.
    3. V8 initializes the rest of the Isolate with being able to call out
       into the platform using the Isolate address as key.
    
    This CL adjusts the SnapshotCreator API to be similar to regular
    Isolate initialization.
    
    Bug: v8:13754
    Change-Id: I29db2b35fac422a074a05928125c66439324afc7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5134912
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91613}

commit bdafd9efb977a6cd91d75e935d0c5dcb671ed09a
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Dec 20 10:52:33 2023 +0100

    [api] Deprecate vector<v8::Local>, part 4
    
    According to V8's public API documentation, local handles (i.e.,
    objects of type v8::Local<T>) "should never be allocated on the heap".
    This disallows heap-allocated data structures containing instances of
    v8::Local, like std::vector<v8::Local<v8::String>>. It is unfortunate
    that the V8 API itself requires the usage of such data structures.
    
    This CL continues the deprecation of such data structures from V8's
    public API, progressing from DEPRECATE_SOON to DEPRECATED.
    
    Bug: chromium:1454114
    Change-Id: Ida483129a801ca6af0779b8cd1f78a17783fedf0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5136838
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91612}

commit b12bc76fc287b8acc8974550e56a9a5cfb76ec55
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Dec 5 21:08:37 2023 +0100

    [wasm][relaxed-simd] Fix I32x4RelaxedTruncF32x4U
    
    The macro-assembler implementation does not correctly clamp the value to
    UINT32_MAX when the input is larger than UINT32_MAX.
    Use the non-relaxed code sequence instead, and deduplicate in several
    places.
    
    R=gdeepti@chromium.org
    
    Bug: chromium:1507782
    Change-Id: I546ebca37633b99af4680c49c347fa82345a1b19
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5089428
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Deepti Gandluri <gdeepti@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91611}

commit d4d1ad04f7a60844b413fec59fa119b290ac1d85
Author: Liviu Rau <liviurau@chromium.org>
Date:   Tue Dec 19 17:52:26 2023 +0100

    [test262] Update glob pattern for sync
    
    Bug: v8:14002
    Change-Id: I1e82b9be9b1a3b850735207ba9f1917666ede32c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5135955
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91610}

commit fbc23b2723dbfeb4274691f2c1e3e9cc5e26d36d
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Dec 15 22:46:04 2023 +0100

    [api] Fully Deprecate TracedReference:WrapperClassId()
    
    Embedders should maintain state as needed through the wrapper object
    itself.
    
    Bug: chromium:1502777
    Change-Id: Ibf74478cd07375553b8f630cbff600e388253ad0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126434
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91609}

commit 37b233981303d92f81514d30b55f96749f321488
Author: Pan, Tao <tao.pan@intel.com>
Date:   Mon Dec 18 16:10:23 2023 +0800

    [tiering] Profile guided early optimization
    
    If a function was optimized and feedback become stable within specific
    few interrupt budgets and invocations, no deoptimization, it's highly
    possible the function is frequently invocated and will be stable soon,
    we record early optimization result into inter-context sharable SFI. Set
    relatively few interrupt budget to the function which can be early
    optimized.
    This CL can improve Speedometer2 by ~2%.
    
    Bug: v8:14296
    
    Change-Id: I4f7acfaf0afa673894bc21b7f0f867899351fd51
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4805332
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Tao Pan <tao.pan@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91608}

commit 0398c16297ae7ae83815cb302c16e030171f1fd7
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Dec 19 20:12:27 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/8e02a4f..f2f5a10
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/5fe189d..e8e9f90
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/23118cc..49c8dd3
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/d855d8b..715a7b8
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/dbe34d7..289bde0
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761221806442659745
    
    Change-Id: Ie4dbbef64424e199de36c954a981c5e0aa570583
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5137716
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91607}

commit 7a6514cbf61b1b345003830830138a17812be169
Author: Francis McCabe <fgm@chromium.org>
Date:   Tue Dec 19 01:16:31 2023 +0000

    [wasm][jspi] Rename usage counter flag.
    
    Bug: v8:12191
    Change-Id: I406e29e77fbd6c6019776a6e7c978b02f3943887
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5132938
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91606}

commit a28edcc9dd00290e78ade8f6c79d2bc0fbd05a14
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Dec 19 08:06:15 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/b3e0148..8e02a4f
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/3bb3983..3cafb40
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761267106632213377
    
    Change-Id: If304dcf0aade8bcbe90511c9428e81d634959351
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5135916
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91605}

commit 1c8900e5f243dbdc9991c4cde076ed652599cd53
Author: Timothy Pearson <tpearson@raptorcs.com>
Date:   Fri Oct 6 17:55:37 2023 +0000

    [sandbox][ppc64] Port sandbox implementation to ppc64
    
    Bug: v8:10391
    
    Change-Id: I562e04a0b69d64e3c4cee402d889df831845bf57
    Signed-off-by: Timothy Pearson <tpearson@raptorcs.com>
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4920110
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91604}

commit 13bb1480826a80bf02c7659e9214492ebf7a1f31
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Mon Dec 18 10:41:15 2023 +0100

    [debug] Fix misuse of the isolate in Debug::RestoreDebug
    
    This CL adds an Isolate::Scope to Debug::RestoreDebug, to allow it to
    use the isolate when called from v8::Unlocker's destructor. The added
    test fails without the fix. See the bug report for more details.
    
    Change-Id: I5924603b464ef1cd02e357faf84eb9089bbf336c
    Bug: chromium:1511649
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119745
    Reviewed-by: Yang Guo <yangguo@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91603}

commit 69b02eac6a39edc8d1f6253c3ffdc1b43d890e53
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Dec 19 13:43:13 2023 +0000

    [sandbox] Use soft abort mode for sandbox fuzzing
    
    With this CL, the "sandbox fuzzing mode" (currently enabled by enabling
    the sandbox crash filter, but in the future we'll probably want a
    --sandbox-fuzzing flag) now enables the "soft" abort mode, which ignores
    DCHECK failures and cleanly exits on CHECK/FATAL errors. In addition,
    when the "soft" abort mode is enabled we now explicitly state that the
    failure is "harmless". This both makes it clear that this is not a
    security issue and causes fuzzers that pattern match on the stderr
    output to ignore these cases.
    
    Bug: chromium:1510306
    Change-Id: I7fae3b5ef82ef326538320bb0cf43c404ddb6c55
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5135295
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91602}

commit 3bd78de20b381253158ef953a6531da7fbfc7538
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Dec 19 14:42:04 2023 +0100

    [codegen] Load trusted pointer table via root register
    
    When compiling isolate-independent code, we do not have an isolate
    available. Trying to construct an ExternalReference for the nullptr
    isolate will thus crash.
    
    We already have a `CHECK(root_array_available_)` there, so we can
    instead directly load the trusted pointer table via the root register.
    
    This CL also demotes the CHECK to a DCHECK because assembler options are
    set per compiler, so we have very good coverage for this and don't need
    a release-mode CHECK.
    
    R=ahaas@chromium.org
    CC=saelo@chromium.org
    
    Bug: v8:14499
    Change-Id: I650963a955f86ee0b9027d8726e0491fc1783510
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5132815
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91601}

commit 734961598094e0584d6d585d3e9353f4a1b9b2f7
Author: Liviu Rau <liviurau@chromium.org>
Date:   Tue Dec 19 15:07:26 2023 +0100

    [test262] Roll test262
    
    This roll requires a manual review. See http://go/reviewed-rolls for guidance.
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/873f2604..6cbb6da9
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761410551589538033
    
    no-export: true
    
    R=syg@chromium.org
    
    Bug: v8:7834, v8:14159
    Change-Id: I36038be18a72b055298a3791b3743769b9847aa8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5130412
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91600}

commit 2f23c5a5d09dc50429d10ab72e5744f8e4037691
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Dec 19 11:26:26 2023 +0100

    [wasm][wami] Fix try-table indentation and label
    
    Increment indentation and push a new label for try-table blocks.
    The branch depth immediates of the catch entries in the try-table don't
    include the new label yet, so print the immediates before pushing the
    new label.
    
    R=manoskouk@chromium.org
    
    Change-Id: Ie9d42363f79055d3415fba54b5cc15946b78fd23
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5131014
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91599}

commit 8181756ada6b36eaa56d41d27d878bb65f892599
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Dec 18 17:52:59 2023 +0100

    [tagged-ptr] Move Name/String/Symbol to C++ layout
    
    Make Name/String/Symbol subclasses of HeapObjectLayout.
    
    This introduces:
    
      * Explicit pragmas forcing 4-byte packing of V8_OBJECT classes -- this
        was required for Name under no-pointer-compression builds, which
        has a tagged map ptr + int32 field and so would be padded at the
        end, for alignment of the map ptr.
      * A member type for external pointers
      * A differentiation in torque between CC and CCDebug macro lists, to
        avoid emitting C++ code for slice macros
      * An UncachedExternalString base class for ExternalString which
        doesn't have the resource data pointer
      * The use of flexible array members to represent variable length
        suffixes of classes (in particular, SeqString characters)
      * Helper macros for inner classes of object classes, which suppress
        the padding warnings
    
    Also, as a drive-by, accessors were changed to not use the cage_base,
    since this is available now as a global/thread local, and cleaned up
    various callers of these accessors to also not take a cage base or
    isolate if not neccessary.
    
    Bug: v8:12710
    Change-Id: I15b6393d94e24f5a4fb5d7b363e88974ac1c33b4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077926
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91598}

commit b42d362f04e4df7ea6623dedd335f80da20435aa
Author: Marja Hölttä <marja@chromium.org>
Date:   Tue Dec 19 14:56:54 2023 +0100

    [torque] Enable using Print in macros w/ OutputType::kCC
    
    For now, this only enables Print("foo"); style prints.
    
    Change-Id: I96b255ff8267b584dfc47a6cb4820672b007ce39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5135296
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91597}

commit bb1655a6572c50ab88d1d4cbdba48405c63d3bdd
Author: Darius M <dmercadier@chromium.org>
Date:   Tue Dec 19 14:55:48 2023 +0100

    [turboshaft] Add tracing of emitted instructions
    
    Bug: v8:12783
    Change-Id: I8d1527f2e19fcdf70286fc6e5cdd4471da823fd4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5135176
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91596}

commit 9e997077e5c54ad8a8532e3fc2c39904e102c80a
Author: Darius M <dmercadier@chromium.org>
Date:   Tue Dec 19 14:36:46 2023 +0100

    [turboshaft] Always skip unused operations
    
    Two things were wrong:
    
     * CopyingPhase::InlineBlock did not skip Phis whose use-count was
       0. This lead to visiting Phis whose input had been removed from the
       graph.
    
     * [debug only] Operations with use-count of 0 were not always skipped
       when --turboshaft-opt-bisect was used, which could also lead to
       visiting operations with Invalid inputs.
    
    Bug: v8:12781
    Change-Id: I1a77658bb25adf72c6b9183896a7735710048cec
    Fixed: chromium:1512481
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5132813
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91595}

commit 08f55d8b22f754afb1f3648ee5921deb0658e0ef
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri Dec 15 10:09:36 2023 +0800

    [loong64][mips64] Restrict bit_cast
    
    Port commit ee5adf6f7a4d4bc2902bd9cdf167a35d91d6b820
    
    Change-Id: I6d04e6e5b8a0e4c6886b613ced10cb2c888f6a66
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5125371
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#91594}

commit afd143268efbdb640933ce241d2c5cc2467d2c77
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Dec 19 14:39:57 2023 +0100

    [test] Bump shards on slow bot
    
    Test262 times out from time to time on the Android bot.
    
    No-Try: true
    Change-Id: Ia3281bf188db96d7f0a1ae0d9886b763b39e0dfe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5132814
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91593}

commit dce30c643f280780e6679cfd632c7fa71116455f
Author: Stephen Roettger <sroettger@google.com>
Date:   Tue Dec 19 13:02:13 2023 +0100

    [cfi] Remove CodePageMemoryModificationScope and write-protect flag
    
    write-protect-code-memory is not working for a while so remove it.
    We might add the flag back in the future if we decide we want to support
    it for testing.
    
    Change-Id: Iaadbc19208c35b68806ffdb56906441b7785b06f
    Bug: v8:13355, chromium:1474200
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123137
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#91592}

commit f617de2261344349653057dae8bf892f10b2cd8a
Author: Simon Zünd <szuend@chromium.org>
Date:   Tue Dec 19 09:53:09 2023 +0100

    [inspector] Consider accessing command line API functions side-effecty
    
    This CL changes how we install the command line API functions (e.g.
    'debug', 'monitor', etc) on the global object. Only 'get'ting them
    is considered a side-effect now. This prevents malicous sites from
    getting a hold of the command line API functions without the user
    ever pressing 'Enter' in the DevTools console.
    
    R=bmeurer@chromium.org
    
    Fixed: chromium:1509340
    Change-Id: Ibcddc7b3e4d2aa1cfae741963071b99840c9eaa5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5134807
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91591}

commit 9bcfee4b6f06f37b0aaac01d457c4d9c7473868a
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Dec 18 20:18:01 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/ad3bfe9..b3e0148
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/a481c9e..5fe189d
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/2298e63..23118cc
    
    Rolling third_party/fuchsia-sdk/sdk: version:17.20231211.2.1..version:17.20231218.3.1
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/28d7125..d855d8b
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/c7c5649..8806fb8
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/beb2b58..002f75d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761312404569696193
    
    Change-Id: Id13ce8ad8d1a9b76d70aa28a381c688775eefcce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5131172
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91590}

commit deb3adaf54499e37d9620d55485360bc169eb835
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Mon Dec 18 13:14:51 2023 +0800

    Reland "[turboshaft] Optimize StructuralOptimizationReducer"
    
    This is a reland of commit b130db32b52883339b8de39b33e934da2f3d3aa9
    
    Original change's description:
    > [turboshaft] Optimize StructuralOptimizationReducer
    >
    > The condition like `if(x==0)` may be optimized to `if(x)` by other
    > reducers, we should take this condition into consideration in
    > StructuralOptimizationReducer.
    >
    > Bug: v8:12783
    > Change-Id: Id5110ca5c1fb3c52639ed40fa601a13927049241
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5066072
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    > Cr-Commit-Position: refs/heads/main@{#91538}
    
    Bug: v8:12783
    Change-Id: Ic7c1a1219bbdaca4263c144af5dc8c3b08974353
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5129397
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91589}

commit fb7a6908097c3e29acb56b03f9f7ff373ccd47fd
Author: Francis McCabe <fgm@chromium.org>
Date:   Fri Dec 15 00:22:46 2023 +0000

    [WASM][JSPI] Added usage counter
    
    V8 side only in this CL.
    
    Bug: v8:12191
    Change-Id: I223da87691960ecc0cdf90fec77d88a43dae7307
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123956
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91588}

commit 356b15c87683e44a5a5ccdffd414e135bb4d9037
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Dec 18 17:27:53 2023 +0100

    [multimodal] Fuzzer coverage for changing modes
    
    Add some smoke tests and more importantly ensure the fuzzers can change
    modes at runtime.
    
    Bug: v8:14515
    Change-Id: Ia44eca680e0e4da7b314b6cc076e17805e3fcf11
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5131007
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91587}

commit 6829d252fd980f7963a307c07702a65c6a5fce3a
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Dec 18 08:05:32 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/562a437..beb2b58
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761357703044953345
    
    Change-Id: Ia454e1a4f9e8723f22cfc53faa8d2e885bee8e1e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5131693
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91586}

commit 0b48f401853441d4677bc9570d97856edd527f22
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Dec 18 16:23:31 2023 +0100

    [heap] Fix initialization with CppHeap
    
    The CHECK runs before incremental marking is set up and will thus
    crash.
    
    Bug: v8:13754
    Change-Id: I356beb4629386d6ea9f971cd56ea903f7a28ebe9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5132392
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91585}

commit e6d85814e8acd7e099843c746ab708926710cfaf
Author: Benedikt Meurer <bmeurer@chromium.org>
Date:   Mon Dec 18 14:18:41 2023 +0100

    [inspector] Don't include "constructor" property in object previews.
    
    The "constructor" property generally refers to the constructor function
    or class that created the instance at hand (this is more of a convention
    than an enforced rule though), so there's little value in ever including
    it in the object preview.
    
    This also unblocks shipping of the revised Iterator Helpers proposal[^1].
    
    [^1]: https://tc39.es/proposal-iterator-helpers/
    
    Fixed: chromium:1512108
    Change-Id: Id9799f2d86c43479cf6a0775005e361b6d50b066
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5131015
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Benedikt Meurer <bmeurer@chromium.org>
    Auto-Submit: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91584}

commit 460511a63ac28718d239f40e7c8d7c4ed311374a
Author: Stephen Roettger <sroettger@google.com>
Date:   Fri Dec 15 10:46:40 2023 +0100

    [cfi] Introduce WriteProtectedSlot
    
    The code space is write protected on some platforms, so writing to it
    requires us to unlock it first. We also want to hook the JIT writes
    and have them go through the WritableJitAllocation object where we're
    going to add CFI-related validation in a future CL.
    
    Change-Id: Ia51a08e87ea36a2216f381aa370609ee37e5203b
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4852526
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#91583}

commit 3df674587a704aa8a8d5c2d78fdd610807567e93
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Dec 18 15:23:36 2023 +0100

    [wasm] JS-to-JS functions have no instance
    
    Do not try to load a WasmInstanceObject from the function data of a
    JS-to-JS wrapper.
    Also, decouple the "is isolate-specific code" bit from the parameter
    mode by checking instead if the {isolate_} field is set.
    
    R=ahaas@chromium.org
    
    Bug: v8:14499
    Change-Id: I7e8878ee239b62a4c630e15497d0f082c00139e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5131016
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91582}

commit 645dffb976c01acb4223764db5f2b2b5fe5e83bf
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Dec 18 15:09:44 2023 +0000

    [sandbox] Resolve sandbox crash filter TODO
    
    The TODO states that we should filter out stack overflows, but we should
    already be doing that: a "regular" stack overflow should always crash
    with a SEGV_ACCERR as it hits the guard region at the end of the stack,
    and we filter out all SEGV_ACCERR crashes in the crash filter. If a
    stack overflow "jumps over" the guard region, it would be an actual
    security bug and we should fix it. So there is no more work to do here
    and this CL just removes the TODO and adds some more comments.
    
    Bug: chromium:1473063
    Change-Id: Iecb406daab5105270cecf89c4d9e77d95ef2d644
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5132173
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91581}

commit 540078e966baa00129911ac2e796c00ac5bb6e49
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Dec 18 13:49:56 2023 +0100

    [wasm] Fix parameter mode in graph builder
    
    We were inconsistent with the use of the kWasmApiFunctionRefMode mode.
    It was also specified for C-entry stubs which have a custom Abi.
    
    This CL introduces a new kJSFunctionAbiMode, and re-purposes
    kNoSpecialParameterMode for the C entry.
    
    This allows us to enable type checks for all modes.
    
    R=ahaas@chromium.org
    
    Bug: v8:14499
    Change-Id: I0a858cfbe5610403df92f4b74192ea10eb779463
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5131013
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91580}

commit 9565d4ec91770d0a2183fe9c34ddc5b62221d749
Author: pthier <pthier@chromium.org>
Date:   Mon Dec 18 15:16:41 2023 +0100

    [regexp] Handle modifiers in experimental engine
    
    Currently we only need to bail-out for modifiers that are not supported
    by the experimental engine in general (i and s).
    The only supported modifier by the experimental engine so far is
    multi-line, which is already handled by the parser.
    
    Drive-by: Add tracing for unsupported patterns.
    
    Bug: v8:12956
    Change-Id: Iaa1c05620f0095e7d5d5608c4fc3d7925b015aa6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126076
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91579}

commit d62cba0d12dbbbf26d1796fe200e920454f278d9
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Dec 13 23:00:03 2023 +0100

    [wasm] Enable generic js-to-js wrapper by default
    
    R=thibaudm@chromium.org
    
    Bug: v8:14507
    Change-Id: I7e0424211e5bacfa702f503c83e685f27dd0d624
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119746
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91578}

commit 6d6de30566f7aeb772669af44af3ee3cab2cef1c
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Dec 18 12:07:47 2023 +0100

    [wasm] Pop parameters of js-to-js wrapper correctly
    
    The number of declared parameters is unknown for the generic js-to-js
    wrapper at compile time, because it depends on the signature the wrapper
    is called with. The frame deconstruction did not consider the parameter
    count in the number of parameters that should get popped off the stack
    at a return.
    
    The test does not do anything in a normal build, but on arm64, and in an
    --always-sparkplug variant it would crash.
    
    Bug: v8:14507
    Change-Id: Ifd5812866634a4981c08f82b93d1a98e4dd582f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5130971
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91577}

commit 7640ff0f9c1409a20304348010d0c7baae04979f
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Dec 18 13:47:05 2023 +0100

    [heap] Do not use WrapperClassId() for heap snapshot
    
    The class id was used to merge nodes that didn't form proper
    wrappable/wrapper pairs. This has been fixed for Blink and as such we
    do only want to merge proper pairs. This does not rely on the
    reference state (class id) but merely whether forward and backward
    reference match up.
    
    Bug: chromium:1502777
    Change-Id: Idab3ea659719f6b93a84bd2e3402de94e5ce8f49
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126532
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91576}

commit 7953f6826d9d226c32dfe8177fcad74fa62e7973
Author: Stephen Roettger <sroettger@google.com>
Date:   Mon Dec 18 11:40:09 2023 +0100

    [cfi] use WritableJitPage to write to free space
    
    Introduce a new WritableFreeSpace class that will be used to validate
    all writes to free memory (FreeList / FreeSpace objects) for CFI and
    pass it through the FreeList functions to replace existing memory
    modification scopes.
    
    Change-Id: Iafabe24bc2cc749a6037fe6370128294074ca3bb
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095154
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#91575}

commit fa4612d326c5916a9e9ccbf2ab570f5a78588161
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Dec 18 11:54:59 2023 +0100

    [object] Make the In*Space predicates free functions (part 2)
    
    The second half of crrev.com/c/5075612
    
    Change-Id: Icc54942bbbe470d3132be598d215fc7e11c4a6e9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5130970
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91574}

commit 50363896b1f4755051d95534311b6fce5d039478
Author: pthier <pthier@chromium.org>
Date:   Thu Dec 14 17:25:49 2023 +0100

    [maglev] Stores to FixedArrays are simple
    
    Stores to FixedArrays don't cause map transitions or call into user
    code, so there is no need to clear unstable maps and cached loaded
    properties when storing to FixedArrays.
    
    Bug: v8:7700
    Change-Id: I794581e51149932b46b010571a89b7dc70b78b56
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121906
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91573}

commit 54312a450f8859118091689b26cd94fc8b430489
Author: pthier <pthier@chromium.org>
Date:   Mon Dec 18 12:18:00 2023 +0100

    [maglev] Fix caching JSArray.length
    
    We need to take into account that the length might be updated by
    UpdateJSArrayLength if the index is greater than (or equal to) the
    current JSArray length.
    This CL turns UpdateJSArrayLength into a ValueNode to return the updated
    length and records the ValueNode as the known length property.
    
    Bug: v8:7700
    Change-Id: Ic7ec26e3886bc34ac7c62e83ab39e0117bd40672
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121905
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91572}

commit 44c393d677d94ebf9722cc060daa406dc2cdf15b
Author: Debadree Chatterjee <debadree333@gmail.com>
Date:   Sun Dec 17 23:39:59 2023 +0530

    [builtins][tq] Add fast path for Sets in TypedArray.from
    
    This added fast path aligns the performance of TypedArray.from(set)
    with that of TypedArray.from(Array.from(set)).
    
    Bug: v8:12055
    Change-Id: Ic8616261915cd1165c6890b4fc763db3b4d50f4e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123797
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91571}

commit b878219423cf1d0d07492d10cd45ecc918969b61
Author: Debadree Chatterjee <debadree333@gmail.com>
Date:   Mon Dec 18 15:38:15 2023 +0530

    [builtins] mark SetIterator as exhausted in SetOrSetIteratorToSet
    
    This fixes a regression introduced by
    https://crrev.com/c/4569970 wherein the SetIterator wasnt
    being marked as completed.
    
    Bug: v8:13621
    Change-Id: I634f2631b1f689d83abb894021f0ff8379a826c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5125577
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91570}

commit d9b6ab18b79ab82e2249ca90fe239c40f6fa203d
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Dec 18 10:59:07 2023 +0100

    [object] Make the In*Space predicates free functions (part 1)
    
    ... so that they don't need to live on HeapObject.
    
    This is part 1 of a split CL, since the full CL was timing out on the
    linux-rel bot.
    
    Change-Id: I56e95c11dd3bfa24fc745f557cd3d1960e6b9116
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075612
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91569}

commit 46cb67e3b296e50d7fda5a58233d18b9f3dab0d5
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon Dec 18 09:15:00 2023 +0100

    [codegen] Install BytecodeArray last in SharedFunctionInfo
    
    Maglev assumes that when a SharedFunctionInfo has a BytecodeArray,
    then it should also have FeedbackMetadata. However, this may not
    hold with concurrent compilation when the SharedFunctionInfo is
    re-compiled after being flushed. Here the BytecodeArray was installed
    on the SFI before the FeedbackMetadata and a concurrent thread could
    observe the BytecodeArray but not the FeedbackMetadata.
    
    Drive-by: Reset the age field before setting the BytecodeArray as
    well. This ensures that the concurrent marker will not observe the
    old age for the new BytecodeArray.
    
    Bug: chromium:1507412
    Change-Id: I8855ed7ecc50c4a47d2c89043d62ac053858bc75
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5125960
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91568}

commit f32c9b7c07d6cbc1e6c5349ba6dd5c58eb972d1b
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon Dec 18 12:09:04 2023 +0100

    [exceptions] DCHECK that we don't invoke with exception
    
    Change-Id: If0a82f40a7117c15ceacce99534917df6cb98b65
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5131010
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91567}

commit ae7de90b0c0015b6d1d3c95a7a0e4069481d6a0e
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Dec 18 14:02:48 2023 +0800

    [loong64][mips64][turboshaft] Add missing pieces to Turboshaft CSA pipeline
    
    Port commit 235d5bd74cb77aef5bbd7ad85331d6f067d36dae
    
    Change-Id: I7915795e37af8451bea06072490e5b9f6a4d0c24
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5125581
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91566}

commit 8c02e33281b368374320f91aa778203bc256456c
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Dec 18 09:46:28 2023 +0100

    [multimodal] Multimodal tiering decisions
    
    This is a first step towards multimodal tiering decisions.
    
    We introduce two tunables. One is efficiency, where we compromise
    latency for (overal system) throughput. The other is battery saving,
    where we optimize for total cpu cycles spent (or in theory energy used).
    
    These two settings can be influenced by the embedder. Battery mode is
    decided solely by the embedder. For efficiency mode we currently plan
    to consider the background setting of an isolate, but might add more
    signals in the future.
    
    Since chrome already marks background isolates the coupling is opt-in
    for now, controlled by `--efficiency-mode-for-tiering-heuristics`.
    
    The gist of the current adjustments are:
    
    * To be efficient: use synchronous compilation, delay or defer tier-up
    * To save battery: defer tier-up to TF
    
    In either battery or efficiency mode the only OSR enabled is from
    unoptimized code to maglev.
    
    Bug: v8:14515
    Change-Id: If9b4d2f0f14586eaa4174abc485db21673625f8d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119609
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91565}

commit db59fbfacd71bf5030620e9dd856694bb1051ac4
Author: wenqin.yang <wenqin.yang@intel.com>
Date:   Mon Dec 18 16:16:32 2023 +0800

    [runtime] Bug fix for DebugPrint
    
    %DebugPrint() may log some undefined behavior, we may not allow this
    method with an empty argument list.
    
    Bug: v8:14519
    Change-Id: Ia4d0f3369fc6563d03c9c23b4b5049b9d5a917d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5130367
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Commit-Queue: Wenqin Yang <wenqin.yang@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91564}

commit 90d88500bba2526095f82eca7237efc60e4edc7a
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Dec 15 14:56:54 2023 +0100

    [wasm][turbofan] Set control to diamond's merge
    
    In Turbofan, during float-to-int conversions, we need to set the
    current control of the graph to the merge of the main diamond
    subgraph. Not doing so generates technically invalid graphs.
    Nevertheless there seems to be no functional issue due to this.
    
    Change-Id: I185f62f82cc4db0dfdc0b9f544775026d47ed669
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5125958
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91563}

commit b18b6559fc047c0f0989ddd87efb436816ce0ad9
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Dec 18 11:20:56 2023 +0800

    [riscv][turboshaft] Add missing pieces to Turboshaft CSA pipeline
    
    Port commit 235d5bd74cb77aef5bbd7ad85331d6f067d36dae
    port commit ee5adf6f7a4d4bc2902bd9cdf167a35d91d6b820
    
    Bug: chromium:1506769
    Bug: v8:12783
    
    Change-Id: I1db72e9775e3950b60e3dced3e8ccecfe0e99874
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5129396
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91562}

commit c74e89a44c48a485d61c1a503fe8278426c3f849
Author: Jianxiao Lu <jianxiao.lu@intel.com>
Date:   Fri Dec 15 08:09:59 2023 +0000

    Revert "[turboshaft] Optimize StructuralOptimizationReducer"
    
    This reverts commit b130db32b52883339b8de39b33e934da2f3d3aa9.
    
    Reason for revert: Some fixes in CL 5104648 were incorrectly
    lost when performing a rebase in this CL.
    
    Original change's description:
    > [turboshaft] Optimize StructuralOptimizationReducer
    >
    > The condition like `if(x==0)` may be optimized to `if(x)` by other
    > reducers, we should take this condition into consideration in
    > StructuralOptimizationReducer.
    >
    > Bug: v8:12783
    > Change-Id: Id5110ca5c1fb3c52639ed40fa601a13927049241
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5066072
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    > Cr-Commit-Position: refs/heads/main@{#91538}
    
    Bug: v8:12783
    Change-Id: Ic3f5e80611eb1a64abf9c672bd2157c588e6e0f0
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123907
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91561}

commit b1abe9633c64e73d5fb2e30198753e2ca1e5626b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Dec 17 08:06:43 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/952ec99..a481c9e
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/6226f31..28d7125
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761448298711482081
    
    Change-Id: I9f830b0c9eac174e058d6ba62fceea233e28c275
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5125988
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91560}

commit cb3c9da6cf30c59333001e2e17118ac19f0d7057
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Dec 16 08:07:40 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/9325d4d..952ec99
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/99f5e4d..6226f31
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761538897015884449
    
    Change-Id: I0730b95dcaa88b306fbd2a211884ae195de3b932
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126579
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91559}

commit bae3de3ad2bb93a2767e6fa86ca7fce022d7f245
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Dec 15 20:18:47 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/caa7a57..ad3bfe9
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/90769c8..562a437
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761584190571464737
    
    Change-Id: I3f0097c06764b89894f007d481037edc6f24e8ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126577
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91558}

commit 498bfb87cb996a53d0ae67658b957256806e08e1
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Dec 15 10:58:30 2023 -0500

    PPC/s390: [turboshaft] Add missing pieces to Turboshaft CSA pipeline
    
    Port 235d5bd74cb77aef5bbd7ad85331d6f067d36dae
    
    Original Commit Message:
    
        This CL adds a few more missing pieces to the Turboshaft pipeline for
        builtins, e.g.:
        - CsaOptimizePhase
        - LoadStackPointer and SetStackPointer operations
    
    R=nicohartmann@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Ia20d22744db6b35e17d8aca3dd4eac5f88b1923b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123222
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Michael Dawson <midawson@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91557}

commit 5a510909965444f008c38a1bf1ab93c93d06ee55
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri Dec 15 16:11:56 2023 +0000

    Revert "[maglev] Bail early when we know a smi check must fail"
    
    This reverts commit fe8b39dec5cf805f082d8761c65e1584b65b406e.
    
    Reason for revert: chromium:1512059
    
    Original change's description:
    > [maglev] Bail early when we know a smi check must fail
    >
    > When emitting a checkSmi and the current node type of the value
    > guarantees the node not to be a smi we know that the check will fail.
    > There is no point in compiling any further and we should abort right
    > away.
    >
    > Bug: v8:7700
    > Change-Id: I9a15b9da556798d877fbba040c2bf4feb9557b20
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116679
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91512}
    
    Bug: v8:7700
    Change-Id: I25e0f4f5638057244ab67cd9fab98b262beb7a18
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123139
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91556}

commit 1b41f13d4ed12dd2636d80d6eb48c08cc16fb168
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Dec 15 08:08:04 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/258dbe3..caa7a57
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761629493431058129
    
    Change-Id: I445ca68c4d09df26ab6aa7024e50d8755ffbe899
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123223
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91555}

commit e2e3945874e215f49ee5ef41bee43fc7c5c2ecf2
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Dec 15 16:48:39 2023 +0100

    [wasm] Add reason to disabled test
    
    R=evih@chromium.org
    
    Change-Id: I99f1f5d3425e70b111caee8db28206e425383935
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126531
    Auto-Submit: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91554}

commit de611e69ad517c02d16bd1f9fd450b0d20379152
Author: Keyhan Vakil <kvakil@googlecontrib.kvakil.me>
Date:   Sun Nov 12 22:20:48 2023 +0000

    [maglev] fix non-ptr-compr compilation on old compilers
    
    When pointer compression is disabled, the preprocessor expands some
    static asserts to static_assert(false), which doesn't compile on
    compilers not implementing the C++ defect report CWG2518, notably clang
    before version 17 and gcc before version 13.
    
    Adding in part of the template parameter to the static assert prevents
    it from being evaluated immediately which fixes the compilation.
    
    Test: compiled with gcc-11 and clang-14 without pointer compression.
    Change-Id: I95ce29bdb1278e6dad9e592d6f9476395f8aeb59
    Fixed: v8:14355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022760
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91553}

commit 235d5bd74cb77aef5bbd7ad85331d6f067d36dae
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Dec 15 15:12:42 2023 +0100

    [turboshaft] Add missing pieces to Turboshaft CSA pipeline
    
    This CL adds a few more missing pieces to the Turboshaft pipeline for
    builtins, e.g.:
    - CsaOptimizePhase
    - LoadStackPointer and SetStackPointer operations
    
    Bug: v8:12783
    Change-Id: I7c9640feb949a04c05315a985434eb15e8bb0d27
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925229
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91552}

commit 6d68e8596fdec658d55b5db1ed857e9abca6c249
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Dec 15 13:25:26 2023 +0100

    [maglev] Re-add Maglev behind --future for Android
    
    This implication was removed in a recent CL, because we assumed that
    Maglev was enabled by default, but it's not the case on Android, where
    Maglev was still only behind --future and disabled otherwise.
    
    Bug: v8:7700
    Change-Id: I1bb0d8e91533fc13bdc377463fb3768d956b2b6b
    Fixed: chromium:1511543
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126174
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91551}

commit be410faa8b9503a59a23388d8b578766617a8bdb
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Dec 15 11:16:27 2023 +0100

    [turboshaft][wasm] Fix InstanceCache with non-returning inlinees
    
    It's possible that an inlined function never returns to the caller,
    typically because of an unconditional trap or exceptions. When this
    happens, we should try to record Phi inputs for the InstanceCache from
    this inlined function body.
    
    Bug: v8:14108
    Change-Id: I02434c4b58a8144bf7ead4033dcd3db7f62b01d6
    Fixed: chromium:1511124
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126073
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91550}

commit 3480a9e29d2f0f33565bfd9cb0ac2009a940bb97
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Dec 15 14:01:29 2023 +0100

    [wasm][debug] Check instance type of the instance parameter
    
    If debug code is enabled, check the instance type of the passed instance
    object on function entry.
    When refactoring the code to pass a trusted object pointer instead, this
    will catch bugs where we still pass the instance object much earlier.
    
    R=ahaas@chromium.org
    
    Bug: v8:14499
    Change-Id: Ia25d81bc77cd6a333ee9aaeb2fcac670c5587a00
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116681
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91549}

commit ef1e3d76314f1c870c045a514d3eacc48f2fac4e
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Dec 14 12:41:22 2023 +0100

    [wasm] Rename TargetAndInstance to TargetAndRef
    
    And tighten the type of "ref".
    
    R=ahaas@chromium.org
    
    Bug: v8:14499
    Change-Id: I317d405878523a258ec9edfa46ab8f7b9add8fc3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121891
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91548}

commit 2d3101ba492dc05d8c791d04d68b445696abd8d7
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Dec 15 12:19:48 2023 +0100

    [wasm] Update spec tests
    
    R=evih@chromium.org
    
    Change-Id: Ia8365451f87c3b06658eeb8981751409a71dafc6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123138
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91547}

commit 27d1dfa3cbde1788479b953f636ef556fcbb6576
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Dec 13 19:05:31 2023 +0100

    [wasm][cleanup] Renamings around indirect calls
    
    An indirect call receives either an instance object or a
    WasmApiFunctionRef as the first argument. We load this object from the
    IndirectFunctionTableRefs from the instance.
    
    This CL renames some variables to make clear that this is not always an
    instance. It also disallows passing {nullptr} for the {instance_node}
    and instead requires the caller to always pass a valid node there.
    
    R=ahaas@chromium.org
    
    Bug: v8:1449
    Change-Id: Ie618652bd52a67f3e75547828a58befee75f351b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5120333
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91546}

commit 6156ec06600705a66d51b6fc63e80567dc814840
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Dec 15 11:51:09 2023 +0100

    [turboshaft] Fix another -0 case in typer
    
    Bug: v8:12783, chromium:1503528
    Change-Id: Ib3da21bc0225c65ec2bf22bc7ed59f4b3e7a0b1d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126171
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91545}

commit 8d04e2e03d7fa56dd86a7dc82dfa6fe9fb585f1f
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Dec 15 10:53:00 2023 +0100

    [cleanup][wasm] Apply clang-tidy changes
    
    Fix 27 ClangTidyReadability findings:
    
    the 'empty' method should be used to check for emptiness instead of 'size' For more info see go/clang_tidy/checks/readability-container-size-empty (19 times)
    redundant get() call on smart pointer For more info see go/clang_tidy/checks/readability-redundant-smartptr-get (5 times)
    using decl 'ConstantOp' is unused For more info see go/clang_tidy/checks/misc-unused-using-decls
    using decl 'FloatRepresentation' is unused For more info see go/clang_tidy/checks/misc-unused-using-decls
    using decl 'Uninitialized' is unused For more info see go/clang_tidy/checks/misc-unused-using-decls
    
    R=evih@chromium.org
    
    Change-Id: I005a0d18c98e339c5a29cf5d8854d078fb06f180
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126071
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91544}

commit 8f63d919bf9e2a89ff4e6eb2a4a6a7c5a09cc409
Author: pthier <pthier@chromium.org>
Date:   Fri Dec 15 11:21:48 2023 +0100

    [regexp][test] Skip modifiers test with experimental engine
    
    Modifiers are not yet supported in the experimental regexp engine.
    
    Bug: v8:12956
    Change-Id: Iec29197b0d2081cb346f25effc0836b1d01b9849
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5126074
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91543}

commit b49599efc61767ea8c33f7a2bd49709fe9546f8a
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Dec 15 09:53:30 2023 +0000

    [sandbox] Introduce TrustedSpaceCompressionScheme
    
    This will be used to implement compressed pointers within trusted space.
    These can then in turn be used to efficiently implement references
    between trusted objects, i.e. our "protected pointers".
    
    As the logic is mostly identical to the existing compression schemes, we
    now introduce a common, templatized compression scheme implementation so
    that common logic can be shared between different compression schemes.
    
    Bug: chromium:1505752
    Change-Id: If1e6f782b5f7ec9fd3e7014ab80191719601cebf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067253
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91542}

commit 2de2470719c4751090c8ba1ca9c23a0e313dba53
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Dec 14 19:30:15 2023 +0100

    [wasm][compiler] WasmLoadElimination: Skip struct.set with None() type
    
    This is a follow-up to commit 949bbdf4c2583faf581d6e4b67854c0e0200dd5b.
    It repeats the same fix for struct.set that was done for struct.get.
    I also added a comment that explains how we can potentially end up in
    that situation.
    
    We also have already precedent for checking for kDeadValue in
    commit 9ece4a12102e77976aeb8f5b1879e93b700acaac and
    commit c0cd50fc1d562ef7a2eced5a63504d3b776c82de among others.
    As a more long-term solution we should probably adapt all checks
    for kDead in these reducers (WasmLoadElimination and
    WasmGCOperatorReducer to always also check for kDeadValue.
    
    Bug: chromium:1507106
    Change-Id: Ieed41c927dbcf199df2c92d4508c7fe67a23f05c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123111
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91541}

commit 42fa8936d5b2c7576097d5dbf8acb1d94f74bdd4
Author: pthier <pthier@chromium.org>
Date:   Fri Dec 15 09:31:00 2023 +0100

    [regexp] Implement modifiers
    
    Allow some flags (m, i and s) to be modified within a pattern.
    
    Proposal: https://github.com/tc39/proposal-regexp-modifiers
    
    Bug: v8:12956
    Change-Id: Ib0d8d762b7fc6f965fe0b81f5b3bfea386eca0c7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110020
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91540}

commit b0ae8877e53259eb5967a8f3e50a72c3630512af
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Thu Dec 14 20:44:24 2023 +0800

    [loong64][sandbox] Support code pointer sandbox
    
    Co-authored-by: Liu Yu <liuyu@loongson.cn>
    Change-Id: I6c4eadc66e79c91e3d72a117fc2b31e0052c7652
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5118872
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91539}

commit b130db32b52883339b8de39b33e934da2f3d3aa9
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Fri Dec 15 13:54:26 2023 +0800

    [turboshaft] Optimize StructuralOptimizationReducer
    
    The condition like `if(x==0)` may be optimized to `if(x)` by other
    reducers, we should take this condition into consideration in
    StructuralOptimizationReducer.
    
    Bug: v8:12783
    Change-Id: Id5110ca5c1fb3c52639ed40fa601a13927049241
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5066072
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91538}

commit a8275630c081e7842e05ae7fecc4d3e85888a4e6
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Dec 14 20:18:36 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/7dcae75..258dbe3
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/6ba5182..9325d4d
    
    Rolling buildtools/reclient: re_client_version:0.124.1.13f78cc-gomaip..re_client_version:0.125.0.f3883c2-gomaip
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/15a737b..8c91f1a
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/396204c..2298e63
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/5ce8e01..3900055
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/dbea847..99f5e4d
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/6bd2588..c7c5649
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761674788954095409
    
    Change-Id: I09146f8572107dd754cb213da7e860dfab4b6c3c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5123214
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91537}

commit 2c843d2d89d2331c03bfbd5d4b868690eb31c200
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Dec 14 10:44:04 2023 +0100

    Disable JCC erratum mitigation by default
    
    We will incrementally land the mitigation (which adds nops for
    additional alignment of jcc instructions), but only toggle to true once
    we have benchmark results.
    
    Bug: v8:14225
    Change-Id: I7ec8a6b2c80071b296dd8d3d970485be4fa1c729
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121294
    Reviewed-by: Hao A Xu <hao.a.xu@intel.com>
    Commit-Queue: Hao A Xu <hao.a.xu@intel.com>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91536}

commit 3cd630bc783e1cde428bca3c846f8cec985f1b26
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Dec 14 14:23:06 2023 -0500

    s390: Restrict bit_cast
    
    Port ee5adf6f7a4d4bc2902bd9cdf167a35d91d6b820
    
    Original Commit Message:
    
        Using bit_cast on pointers does not accomplish anything useful, and
        obscures what might be incorrect behavior. Do not allow base::bit_cast
        to be misused in that way.
    
        Port the checks present in https://crrev.com/c/5094596 to this repo's
        version of bit_cast.
    
        A previous version of this CL was landed in https://crrev.com/c/5116901
        but had to be reverted because it didn’t compile with GCC 9. This
        version of the CL has been fixed to work with that release.
    
    R=avi@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I788358240e5ab47a36ef4c395634abf3ab1a2738
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5118982
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Michael Dawson <midawson@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91535}

commit be6e0110de9dcb307cd61ced2b1747aff978cb55
Author: Emmanuel Romero Ruiz (from Dev Box) <emromero@microsoft.com>
Date:   Wed Dec 13 08:49:12 2023 -0800

    Adding empty() function to MemorySpan class.
    
    As requested, the function empty() is added for making easier replacing
    std::span<> for v8::MemorySpan<>.
    
    Bug: v8:14426
    Change-Id: I9fec57f173bdd34605c24af6f5ce600bf9bacc50
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119123
    Commit-Queue: Emmanuel Romero Ruiz <emromero@microsoft.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91534}

commit f1bd169795aaea646ef588b2d3eb77e6ad117e54
Author: Debadree Chatterjee <debadree333@gmail.com>
Date:   Fri Dec 15 00:14:35 2023 +0530

    [builtins] Use array size for table allocation for WeakSets and WeakMaps
    
    Bug: chromium:1511548, v8:13621
    Change-Id: If41311cb38560b2498a21629d0bf29f407629587
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5118848
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91533}

commit ca96139e7c65c3903c55364eb4c62772761bc9dd
Author: Andrew Grieve <agrieve@chromium.org>
Date:   Thu Dec 14 12:42:27 2023 -0500

    Support 16k pages for arm64 Android
    
    Bug: chromium:1495851
    Change-Id: If141efb95f4e8cbf564d9822e4d8f1713027415d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5122438
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Andrew Grieve <agrieve@chromium.org>
    Commit-Queue: Andrew Grieve <agrieve@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91532}

commit 300dc7595d2fb40ab6f9646eeab958643046a033
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Dec 13 14:40:54 2023 +0100

    [static-roots] Faster setting function callback return values
    
    ...using static roots and the previous value as on-heap address to get
    the cage base.
    
    Bug: v8:14445
    Change-Id: I4efc20fd1fa7019cf965133b6c7536b5bff68dcd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116184
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91531}

commit 8c24b96d9afe73d6153fff4734e7e811a51c1e07
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Dec 14 17:50:19 2023 +0100

    [turboshaft] Use BuiltinCallDescriptor for Wasm lowerings
    
    Bug: v8:12783
    Change-Id: Id81f777d8c6c66de1586fc65187411e013c4043a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095157
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91530}

commit 032bf241b34d222d258e4ae52b56c6130931699e
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Dec 14 16:34:38 2023 +0100

    [isolate][test] Replace vector of locals in test-api-incumbent
    
    According to V8's public API documentation, local handles (i.e., objects
    of type v8::Local<T>) "should never be allocated on the heap". This CL
    replaces a std::vector of local handles in test-api-incumbent.cc that
    was introduced in https://crrev.com/c/5077502 with a v8::LocalVector.
    
    Bug: v8:13270
    Change-Id: I282acde1464cf20b82627a90b3357131bdcc3cf6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119552
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91529}

commit 54a02928c3787f71ab22db6f9b0d22fbed7514ef
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Dec 14 17:18:35 2023 +0100

    [turboshaft][arm] Port InstructionSelector part 4
    
    This CL adds the missing implementations for the arm[32] instruction
    selection, so all JS unittests pass as well with
    --turboshaft-instruction-selection.
    
    Bug: v8:12783
    Change-Id: I7383635a9b1697ce069c33c82dc5fac461360c9f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116418
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91528}

commit b45ac26bf31cb4947549851ba3aaf4738ace19c7
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Dec 14 17:28:52 2023 +0100

    [heap] Allow taking a snapshot as part of gc() intrinsic
    
    The gc() intrinsic these days can be supplied an object bag that
    configures how to run GC. This is useful for running stackless GCs at
    the event loop. The implementation returns a Promise that is resolved
    when the GC runs at the event loop. This can have surprising results
    with captures variables. Add a 'major-snapshot' version of the gc()
    intrinsic to automatically take a snapshot in this scenario.
    
    Bug: chromium:1218404
    Change-Id: I7db858165dd5037ee6ad0c9e2858b940d1c1690a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5122251
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91527}

commit ee5adf6f7a4d4bc2902bd9cdf167a35d91d6b820
Author: Avi Drissman <avi@chromium.org>
Date:   Thu Dec 14 11:00:11 2023 -0500

    Restrict bit_cast
    
    Using bit_cast on pointers does not accomplish anything useful, and
    obscures what might be incorrect behavior. Do not allow base::bit_cast
    to be misused in that way.
    
    Port the checks present in https://crrev.com/c/5094596 to this repo's
    version of bit_cast.
    
    A previous version of this CL was landed in https://crrev.com/c/5116901
    but had to be reverted because it didn’t compile with GCC 9. This
    version of the CL has been fixed to work with that release.
    
    Bug: chromium:1506769
    Change-Id: I9177f47ef37263d7b361d1b8dd9bc6b1bb33d118
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5122432
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Avi Drissman <avi@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91526}

commit a608a863689a9d5a25ff552cb89639f5c26ad089
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Dec 14 08:14:02 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/87e1b71..7dcae75
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/7a97c25..396204c
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6444de1..5ce8e01
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761720082396765345
    
    Change-Id: I412ae67529034867f72b19d2a47482a34bf9837e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5122571
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91525}

commit d7d7d8d7b6bf3dfa0bf74f4706cf677b6b84274a
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed Dec 13 17:15:29 2023 -0800

    [set-methods] Use transient type for backing table
    
    To better catch bugs for the backing table of JSSets from being changed
    by user code, use a transient witness type when accessing the backing
    table.
    
    Also fix stale uses of the table pointer in intersection,
    isDisjointFrom, and isSupersetOf.
    
    Bug: v8:13556
    Change-Id: Icda30dd3cebd1038014b7f8bfedb544c1a35ddf5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5118456
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91524}

commit 879245d3037b4e1457561885464bfc4345bfee7b
Author: Liviu Rau <liviurau@chromium.org>
Date:   Thu Dec 14 17:05:11 2023 +0100

    Add auto-roller account to test262 OWNERS
    
    No-try: true
    Bug: v8:14002
    Change-Id: Ia9b218fbe2c59db79cfa20ab9c80b934fc3299a8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119553
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91523}

commit 2289d8be736f1ca2b9fc0852cbee9854cf094c87
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Dec 14 15:31:46 2023 +0000

    Revert "Restrict bit_cast"
    
    This reverts commit 45501c0ed506bdc8c1b1d96e5bfb81bfaba995e5.
    
    Reason for revert: Breaks gcc: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20gcc%20light%20-%20debug%20builder/6270/overview
    
    Original change's description:
    > Restrict bit_cast
    >
    > Using bit_cast on pointers does not accomplish anything useful, and
    > obscures what might be incorrect behavior. Do not allow base::bit_cast
    > to be misused in that way.
    >
    > Port the checks present in https://crrev.com/c/5094596 to this repo's
    > version of bit_cast.
    >
    > Bug: chromium:1506769
    > Change-Id: Ie05d68c3e909038de9406a05a0b9109f3509e08b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116901
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Avi Drissman <avi@chromium.org>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91521}
    
    Bug: chromium:1506769
    Change-Id: I4312c5a55610e46ecaa3777d369a67fd53ae14cb
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121904
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91522}

commit 45501c0ed506bdc8c1b1d96e5bfb81bfaba995e5
Author: Avi Drissman <avi@chromium.org>
Date:   Wed Dec 13 12:55:53 2023 -0500

    Restrict bit_cast
    
    Using bit_cast on pointers does not accomplish anything useful, and
    obscures what might be incorrect behavior. Do not allow base::bit_cast
    to be misused in that way.
    
    Port the checks present in https://crrev.com/c/5094596 to this repo's
    version of bit_cast.
    
    Bug: chromium:1506769
    Change-Id: Ie05d68c3e909038de9406a05a0b9109f3509e08b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116901
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Avi Drissman <avi@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91521}

commit 949bbdf4c2583faf581d6e4b67854c0e0200dd5b
Author: Eva Herencsarova <evih@chromium.org>
Date:   Thu Dec 14 15:28:45 2023 +0100

    [wasm][compiler] WasmLoadElimination: Skip struct.get with None() type
    
    Bug: chromium:1507106
    Change-Id: Ib25e48aa3535135b39c1d6348160184788956a63
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121900
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91520}

commit 39e978a23fb86ab3426b3cf01ad78c736925a5b8
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Dec 14 15:23:06 2023 +0100

    [compiler] Fix TransitionAndStoreNumberElement inside peeled loops
    
    Loop peeling can cause arrays to be transitioned to HOLEY_ELEMENTS
    inside the peeled (first) iteration of the loop, breaking some
    assumptions of the TransitionAndStoreNumberElement operation still
    inside the loop body.
    
    Bug: chromium:1506992
    Change-Id: Ib2bd49b4049bae8f4ed03c82a46b743dcb7e3e88
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119656
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91519}

commit 2da22785583e1635cef96faaacc75f63275594a9
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Dec 14 12:41:44 2023 +0100

    [turboshaft] Pre-allocate in instruction selection
    
    to avoid spurious allocations and copies.
    
    This speeds up the `V8.TFTurboshaftInstructionSelection` phase by ~1.7%
    locally (x64 workstation, N=10) when eagerly compiling a large Wasm
    module (PSWeb, ~50MB code) with Turboshaft and Turboshaft isel enabled.
    
    Change-Id: I65acea36d93e486daceaa06636387b73e55b9f5f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121897
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91518}

commit 3d07aa57b5168f28676c509bcea212216986a666
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Dec 13 18:57:50 2023 +0100

    [wasm][fuzzer] Disable lazy compilation
    
    The wasm fuzzer takes the input bytes and just feeds them to Wasm module
    compilation. If
    1) that succeeds,
    2) there is no start function, and
    3) there is an export named "main"
    it will run that export.
    
    As it's unlikely to randomly generate a module which satisfies all these
    conditions, the fuzzer mostly tests compilation.
    
    Hence disable lazy compilation, and choose one of the two compilers
    (Liftoff or TurboFan) for the whole module. This increases compiler
    coverage of the fuzzer.
    
    R=ahaas@chromium.org, mliedtke@chromium.org
    
    Change-Id: Ic7ce1fd7a24bf0eb7047fda3351391f832e11d36
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119610
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91517}

commit f2e4d5caa28ddcc33f0330a7e3a0bdb592039793
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Thu Dec 14 19:57:50 2023 +0800

    [loong64][turboshaft] Port InstructionSelector part 3
    
    Add support for a bunch of comparisons.
    
    Bug: v8:12783
    Change-Id: I17bc0855698b37a6369fde8d6a11aa794785afe1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5118870
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#91516}

commit 8c29cfe6bdd432f6dfbcda6a8fa5b830b8502d40
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Dec 13 00:41:47 2023 +0100

    [heap] Check allocation limit overshot when expending new space
    
    Don't let new space allocate more pages during full GC incremental
    marking if the allocation limit is overshot by large margin.
    
    Drive-by: refactor the conditions for allocating another page to
              Heap::ShouldExpandYoungGenerationOnSlowAllocation.
    
    Bug: v8:12612
    Change-Id: I984473b860176796337b95d23cef7b8276538915
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116541
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91515}

commit a3bf35cecefd80d16d8e56a782f18163fff441e4
Author: Debadree Chatterjee <debadree333@gmail.com>
Date:   Thu Dec 14 17:16:37 2023 +0530

    [builtins] Use OHS::InitialCapacity as initial capacity for sets
    
    ..being constructed from Arrays
    
    Bug: chromium:1511548, v8:13621
    Change-Id: Iafe78e7c742a6ca759e0951e75e5f4e370315817
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119413
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91514}

commit ca6d6fe49feb8eb8dc689482901268e74da54275
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Dec 11 14:08:36 2023 +0100

    [compiler] Use access builder rather than field offsets
    
    ... for string/name access in the top-tier compilers.
    
    Change-Id: I537dbd4900dd74cb21c03d5bcf3227336ce526fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077925
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91513}

commit fe8b39dec5cf805f082d8761c65e1584b65b406e
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Thu Dec 14 13:05:57 2023 +0100

    [maglev] Bail early when we know a smi check must fail
    
    When emitting a checkSmi and the current node type of the value
    guarantees the node not to be a smi we know that the check will fail.
    There is no point in compiling any further and we should abort right
    away.
    
    Bug: v8:7700
    Change-Id: I9a15b9da556798d877fbba040c2bf4feb9557b20
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116679
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91512}

commit 242518d94b7189663a8d810dca2d027df5dfdb80
Author: pthier <pthier@chromium.org>
Date:   Thu Dec 14 12:59:36 2023 +0100

    [maglev] Enforce no conversion nodes in known properties
    
    We don't allow conversion nodes in the frame state (to prevent recursive
    conversions). For the same reason we shouldn't store conversion nodes in
    known properties.
    Furthermore we can directly use known properties in frame states (i.e.
    setting the accumulator with a known named property), which could
    currently cause issues.
    
    Bug: v8:7700
    Change-Id: I0a92b856a89ded102f2cc46003494b0ed3359ac5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5120696
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91511}

commit ebff428a7a40c407f11d74462f6fa89fa1ac44e3
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Dec 14 11:47:48 2023 +0100

    [wasm][jspi][arm] Run JS imports on the central stack
    
    Arm port of switching to the central stack when calling a JS import
    from a secondary wasm stack.
    
    R=clemensb@chromium.org
    
    Bug: v8:13983,v8:12191
    Change-Id: I9a84d6b39f38a41573da9bd90a62a2ecada71440
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121194
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91510}

commit 979c2914ff0d9959ba6a053987ec0071d0741d17
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Dec 14 11:44:23 2023 +0100

    [heap] Remove dead code
    
    Change-Id: I766573cbb970ecfa5324cb6ee5f21f284b9eb429
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121893
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91509}

commit 14bd5191252b5089adf2048b9a9d5bcf1acbc29f
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Dec 13 18:11:55 2023 +0100

    [cleanup][turbofan] Fix ClangTidy findings
    
    Fix 14 ClangTidyReadability findings:
    
    the 'empty' method should be used to check for emptiness instead of 'size' For more info see go/clang_tidy/checks/readability-container-size-empty (8 times)
    redundant return statement at the end of a function with a void return type For more info see go/clang_tidy/checks/readability-redundant-control-flow (5 times)
    redundant get() call on smart pointer For more info see go/clang_tidy/checks/readability-redundant-smartptr-get
    
    Change-Id: Iffc92a14320cb02a0d045b65369f59a884b31513
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5120332
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91508}

commit afecba69848b02ed10b87184eed57f10efad8e07
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Dec 13 20:07:10 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/3f2733b..87e1b71
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/8d75795..6ba5182
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/d12e688..7a97c25
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/18bb70a..6444de1
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/1f70899..dbea847
    
    Rolling third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/d5e7c42..6bd2588
    
    Rolling third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/278e5fb..3bb3983
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/69a2e01..90769c8
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/c983e9e..dbe34d7
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761765389095961057
    
    Change-Id: Ifc2985cda311a801ac4e5699ebf613c31d347cd5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5118726
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91507}

commit e87cdc765c681aee00d0831c31670842d630e4e7
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Dec 13 18:00:43 2023 +0100

    [wasm] Refactor the CallRefIC builtin
    
    Slightly reduce its size by computing the target and instance only once.
    This also improves maintainability.
    
    R=ahaas@chromium.org
    
    Bug: v8:14499
    Change-Id: Ib32c9c2cf9b99cc9485d59168ab1fd91660f0ad5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5120331
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91506}

commit 0c3a428c1ed56571587c313995036a35e6d55934
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Dec 14 11:12:02 2023 +0100

    [heap] Take young gen size into account for allocation overshoot
    
    Don't ignore young gen allocations when checking if allocation limit was
    overshot by a large limit.
    
    Drive-by: PercentToGlobalMemoryLimit was looking at the wrong values.
    
    Bug: v8:12612
    Change-Id: I0b2d22bdf0f075ef11e3d6170e60df9bca37630b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116499
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91505}

commit 095c83d8fd150a42c1f43c0bde55d74774a9efbf
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Dec 14 10:34:24 2023 +0100

    [wasm][turboshaft] Add missing type annotation for ref.i31
    
    This causes the WasmGCTypeReducer to potentially miss optimizations and
    to end up seeing invalid type combinations (because the code is already
    invalid but the analyzer's derived types aren't specific enough to
    "see" the unreachability (e.g. caused by a cast that is guaranteed to
    trap.
    
    Bug: chromium:1510734, v8:14108
    Change-Id: I43452b0878bd842c0f2e20a7d0b21ec944e7624f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121293
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91504}

commit 05bacd38e7a31e92afe0fd66081dfa2cc03b934a
Author: Simon Zünd <szuend@chromium.org>
Date:   Thu Dec 14 06:50:27 2023 +0100

    [inspector] Remove unused initializeCommandLineAPI from interface
    
    CL https://crrev.com/c/5104799 switched the only use-site to
    InsepctorSession#evaluate, which creates the CommandLineAPIScope
    on the stack internally in the inspector.
    
    This means we no longer need to expose the CommandLineAPIScope on
    the inspector interface and can remove it.
    
    R=bmeurer@chromium.org
    
    Fixed: chromium:1505767
    Change-Id: Idf9bf61ccab2e2c2db185fb662af810d26f0d99b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5120292
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91503}

commit afee3b501bed785ae1739bb5c8da6ace5c823e7d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Dec 14 10:55:08 2023 +0100

    [turboshaft][arm] Port InstructionSelector part 3
    
    This CL adds support for all instructions required to pass:
    $ gm arm.optdebug.checkall --variants=turboshaft \
      --extra-flags="--turboshaft-wasm-instruction-selection-experimental"
    
    Bug: v8:12783
    Change-Id: I616dfbc8467f0b67a047c0864e20510cfa7a1cd6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5103510
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91502}

commit 5ca0f269af426eeaf0ddab40767ea4b3cf15b939
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Dec 14 11:32:13 2023 +0100

    [handles] Refactor off-stack check for local handles (fix)
    
    This CL adds a missing initializer, that broke the GCC build after
    https://crrev.com/c/5079901.
    
    No-Tree-Checks: true
    Bug: v8:13270
    Change-Id: I0013af0e387d1bd84cb92b10d654f6e3ea19405c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5121892
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91501}

commit e2eebeda77072cd5c754a67c354df310bb10c917
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Dec 13 15:11:44 2023 +0100

    [handles] Refactor off-stack check for local handles
    
    This CL:
    
    1. Introduces the class template api_internal::StackAllocated which
       checks that objects of derived classes are stack-allocated. Whether
       the checks are actually performed or not is controlled both
       statically (via a template parameter) and dynamically (via the
       contextual variable internal::StackAllocatedCheck, to be used for
       testing).
    2. Refactors v8::Local to inherit api_internal::StackAllocated.
    3. Introduces internal::DisableHandleChecksForMockingScope to be used
       in tests. This scope disables off-stack handle checks and is useful
       for mocking functions that take such handles as parameters and/or
       return them as results (gmock saves these values off-stack).
    4. Introduces v8::base::ContextualVariableWithDefault for creating
       contextual variables that have a default value, to be used if there
       is no active Scope object.
    5. Moves the two helper classes v8::IndirectHandleBase and
       v8::DirectHandleBase to the namespace api_internal.
    
    Bug: v8:13270
    Change-Id: I254e83cec9c52266340924fcf930f789d6c56700
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079901
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91500}

commit 29e5405c4db792ee45e7716337fcafe914810c9a
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed Dec 13 11:47:31 2023 -0800

    [builtins] Mark iterator macros and builtins as transitioning
    
    These macros and builtins can call arbitrary user JS code.
    
    Change-Id: Ieed60fb889719d33297554374685aa958851d186
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119709
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91499}

commit 553a1865dc69a9e9c3ecf1f3481eef0ed4fd093a
Author: Francis McCabe <fgm@chromium.org>
Date:   Wed Dec 13 18:26:53 2023 +0000

    [WASM][JSPI][ARM] Initial port of JSPI to ARM architecture
    
    
    This is a port of JSPI for the ARM processor.
    
    Essentially the same as for ARM64, with fewer registers and bits.
    
    Bug: v8:12191
    Change-Id: Ia0cdb136f6187988a76a7dc09dad99614b84f538
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5051800
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91498}

commit 3d40ea2a4f9bcb0a1aba83ac8f9849d0301714e8
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Dec 8 11:58:32 2023 +0100

    Reland "[builtins-pgo] Enable builtins reordering based on PGO profile"
    
    This is a reland of commit f1d06b5c4a7c75276550b6299bc7c39c4c4d81f0
    The issue was fixed here: https://crrev.com/c/5119543
    
    Original change's description:
    > [builtins-pgo] Enable builtins reordering based on PGO profile
    >
    > Bug: v8:13938
    > Change-Id: Ib26cb76b301446399cfd9e0e0fbc7486fad404a7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097212
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Auto-Submit: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91444}
    
    Bug: v8:13938
    Change-Id: I722127a9163dc4cfe4d7d489cf08010de88ae4c7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5120291
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91497}

commit d9894120b098cd14f4008d5edb73bc4fc4235e22
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Dec 13 17:35:11 2023 +0100

    [builtins-pgo] Fix BuiltinsSorter
    
    ... which hasn't cleared the errno before calling to strtol().
    
    Bug: v8:13938
    Change-Id: I99219d33b95444d7851dc5534b6c3bdd22017d46
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119543
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91496}

commit aacc684c745542872ddfbcad72089a091eeffeef
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Dec 13 08:09:27 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools/linux64: git_revision:7367b0df0a0aa25440303998d54045bda73935a5..git_revision:85944ebc24a90ec1e489e85a46fdc68542c3146f
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/b142d41..d12e688
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/3ccfff7..c983e9e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761810685127855329
    
    Change-Id: Ie58463b0183261b631d0d7e64962e72221799f8c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116017
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91495}

commit e34579c4285f79d95f381b8a67cd02927193b2d0
Author: Anthony Vallee-Dubois <anthonyvd@chromium.org>
Date:   Wed Dec 13 10:28:01 2023 -0500

    [api] Add v8 isolate hooks for battery saver mode
    
    In Battery Saver Mode, tune the v8 Heap for power efficiency.
    For reference, Chromium CL that will trigger this code:
    https://crrev.com/c/5046375
    
    Bug: chromium:1510443
    Change-Id: Iacb978152310a5893fb50b7ba4ae664f3436ec67
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046175
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anthony Vallée-Dubois <anthonyvd@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91494}

commit 6972db391895d27961792d433c7ff8ca6919add5
Author: Etienne Pierre-doray <etiennep@chromium.org>
Date:   Thu Oct 19 13:03:57 2023 +0000

    [task] Add location by default in v8 platform
    
    Step 3/3 adds source location by default to post task functions.
    This makes those function non-virtual and changes the signature.
    
    Bug: chromium:1424158
    Change-Id: I6ea0f64b2dd5894b9bb1aea849adcd6f3ce66de9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4514946
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Etienne Pierre-Doray <etiennep@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91493}

commit 7412629dc32b1a1f7ef3dfcd0306a79de175041c
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Dec 11 14:46:34 2023 +0100

    [static-roots] Use static roots in IsTrue/IsFalse api
    
    Bug: v8:14445
    Change-Id: I644d83b1674e60d101a93078f1300c38a3a616e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110023
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91492}

commit 1b1acd3e6ac9a8060a5e2ba98cbae4b856433650
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Dec 12 14:50:15 2023 +0100

    Reland "[heap] Finalize incremental marking on allocation limit overshoot"
    
    This is a reland of commit c46d5be6c0c6a429772dcb090e6ebefadb5b2881
    
    Original change's description:
    > [heap] Finalize incremental marking on allocation limit overshoot
    >
    > Don't wait for incremental marking to run out of work.
    >
    > Bug: v8:12612
    > Change-Id: I3b2902d680cc628be6fef86bdbe37b925bd34641
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116419
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91468}
    
    Bug: v8:12612
    Change-Id: Ie2a783518a66f608e5da8ac39b9ca7a14ead6c2c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116662
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91491}

commit e0c6a7f7c5b722f78e1f6081e1a7cd3853121977
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Dec 13 14:54:55 2023 +0000

    [sandbox] Reference Code InterpreterData through a code pointer
    
    For moving Code objects out of the sandbox, they must be referenced
    through a code pointer (an index into the code pointer table) from
    inside the sandbox. This CL does so for the interpreter_trampoline
    reference in InterpreterData objects.
    
    This is expected to be temporary: once InterpreterData and Code objects
    have all been moved into trusted space, this reference can become a
    protected pointer (i.e. compressed pointer within trusted space).
    
    Bug: chromium:1500887
    Change-Id: Ia13c9e81bd265f0e87de22197be6b94cc457f260
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119645
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91490}

commit 863b38552b03791ad859ea5855bc3d9f0b32e900
Author: jing.bao <jing.bao@intel.com>
Date:   Wed Dec 13 10:30:09 2023 +0800

    [maglev] Use constant directly for int32 compare
    
    Change-Id: I5f7f8e7b6b877ee8a31b396a0037f27455ba4121
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5118457
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Jing Bao <jing.bao@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91489}

commit b0558855d32d8e75b5ea3c5dd5b17ab935d05575
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Dec 12 14:42:10 2023 +0100

    [flags] --turboshaft-future now implies --turboshaft-wasm
    
    --turboshaft-wasm is included in --future. Given that
    --turboshaft-future is "more experimental" (e.g. no VRP) than
    --future and given all these flags namings, this should produce less
    surprises than without this change.
    
    Bug: v8:14108
    Change-Id: Ia5cca4bf8a009598732db00a4eaf597b526c59af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116678
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91488}

commit c7dfa0388566874f1aa34d4d2a2a38ff04988e04
Author: pthier <pthier@chromium.org>
Date:   Wed Dec 13 13:33:41 2023 +0100

    [test] Stabilize cctest/test-shared-strings
    
    - Keep pre-internalized strings (used only to ensure creation of
      ThinStrings) alive in an active HandleScope to prevent GCs during
      setup from freeing them.
    - Set flag to enable transition of strings during GCs only for manually
      invoked GCs to prevent unwanted transitions from GCs druing setup.
    - Disable CSS for TestConcurrentExternalizationWithDeadStrings.
      This test checks that resources are freed, which is not guaranteed
      with CSS due to the conservative nature.
    
    Bug: v8:14510, v8:14508
    Change-Id: Ie8d6afbea930ec4e97080a737600a5fbce901eb9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116747
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91487}

commit 9c4d26ad73bfed6c190f1f58870ee45215b370f1
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Dec 12 15:56:19 2023 +0000

    [sandbox] Use CodeWrappers for js-to-wasm wrappers
    
    For moving Code objects out of the sandbox, they must be referenced
    through code pointers from inside the sandbox. As the js-to-wasm
    wrappers are currently kept in a WeakFixedArray, we cannot directly use
    code pointers, so instead we reference them through the Code's
    in-sandbox CodeWrapper object.
    
    Bug: chromium:1500887
    Change-Id: I0ecbc8de7c58a4e11d5cafcc2942d928a7c61f14
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116680
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91486}

commit 656de874f78a014baa312e96beed1420f5eddfd9
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Dec 13 12:12:32 2023 +0100

    [turboshaft][wasm] Optimize bitwise-and after mul-with-constant
    
    This adds a case that was missing in crrev.com/c/5034123: we can
    simplify `(x * C) & M` to just `x * C` when the constant C is a
    multiple of the bit pattern that the mask M enforces.
    
    Bug: v8:14108
    Change-Id: Ie3673d5bbbf4e1783bad9f8e539532cc3a918fd7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116746
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91485}

commit d5cbadae53f05006f4ab32b00f713203b273fbcb
Author: Helmut Januschka <helmut@januschka.com>
Date:   Wed Dec 13 12:33:56 2023 +0100

    clang<14 on apple does not have the std::assume_aligned - but says c++20 support
    check the specific feature flag + c++20
    
    Change-Id: I0c1d5ec3c099c63b51f736052b826d883580d5cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119542
    Commit-Queue: Helmut Januschka <helmut@januschka.com>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91484}

commit 5109b33fba55186a3bbb87946a1b2962a546ae54
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Dec 13 10:46:04 2023 +0100

    [turboshaft] Do not run LoopUnrolling when there are no loops to unroll
    
    Running LoopUnrollingPhase when no loops can be unrolled is a bit of a
    waste, as it basically does an identical copy of the graph.
    
    With this CL, LoopUnrollingPhase first runs the loop analyzer, and
    only if some loops can be unrolled, the copy (and unrolling) is
    triggered.
    
    Bug: v8:12783
    Change-Id: Ia6391d64a664a887b70c8fd5ec08d2b694122f1a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5115540
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91483}

commit 0878b351adc46285b651d9d83499511c71cbda3c
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Dec 13 10:42:52 2023 +0100

    [turboshaft] Iterate further Load/Store index-offset optimization
    
    So far, a `Load(base=a+Constant(4), index=invalid, offset=0)` would be
    normalized to `Load(base=a, index=Constant(4), offset=0)`. With this
    CL, we'll do one more reduction step to get to
    `Load(base=a, index=invalid, offset=4)`.
    
    Bug: v8:12783
    Change-Id: I582032b18709beefacabcc9938afb2f7768b85fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119541
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91482}

commit abe15d369ce66c396a92fb8bc52e5fe0b619cfcc
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Dec 13 11:40:49 2023 +0100

    [isolate] Move top_backup_incumbent_scope_ to ThreadLocalTop
    
    ... in order to ensure that it's stashed with the other execution
    state data when an Isolate is unlocked.
    
    Add test/cctest/test-api-incumbent.cc with more tests for
    Isolate::GetIncumbentContext() including a regression test for this
    issue.
    
    Bug: v8:13825
    Change-Id: If6c5c7aec2793af98ae914bc47735ed025a5a1e6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077502
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91481}

commit 2e56913c24effdce6a45fc66198e04eea16c87e6
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Dec 12 09:22:05 2023 +0100

    Reland "[wasm] Implement generic js-to-js wrapper"
    
    This is a reland of commit f7b17b84da45681bafd5dca2d6095bb912ec9f67
    
    The problem that caused the the revert was not introduced by this CL.
    Therefore we can reland this CL without changes to the original CL.
    
    Original change's description:
    > [wasm] Implement generic js-to-js wrapper
    >
    > Bug: v8:14507
    > Change-Id: I18e19875594279c4fa466be633728db39a6dc3ec
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5114880
    > Commit-Queue: Andreas Haas <ahaas@chromium.org>
    > Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91469}
    
    Bug: v8:14507
    Change-Id: Ib1663e88f60dfb321040af9ce9548ded0a989c03
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116682
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91480}

commit 9070edc0862f6798dbc714f07e064a948be9d018
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Dec 13 10:21:57 2023 +0100

    [isolate] Fix broken GCC build
    
    GCC doesn't like anonymous structs with non-trivial member types
    introduced in https://crrev.com/c/5116498.
    
    Bug: v8:13825
    Change-Id: Id665b61549ac9f568fc57b4ff0a7e6c644328d29
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119598
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91479}

commit 2208113da5b815f79e629ced7b448b122712a6a9
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Tue Dec 12 17:06:05 2023 +0100

    [turboshaft] Track blocks with variables in BitSet
    
    This reduces total CPU cycles reported by perf stat and total compile
    time reported by --turbo-stats-wasm by ~1% in local measurements when
    eagerly compiling PSWeb (~50MB of code) with Turboshaft
    (N=10, x64 workstation.)
    It also slightly reduces V8 binary size, even though the `Add()` and
    `Contains()` case are now inlined.
    Total zone memory usage as reported by --turbo-stats-wasm ever so
    slightly decreases by ~0.1%.
    
    Change-Id: Ic0baa9f1472d9a62a2cca31b04747c0b28cf49d2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097214
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91478}

commit dfb729c9bf4140c541e25922f053a77b882f2116
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Dec 12 20:05:53 2023 +0100

    [isolate] Align Isolate object by OS page size
    
    ... in order to make the layout of IsolateData in memory more
    predictable so that we can ensure that the fields that are updated
    together don't cross the CPU cache line boundary (assuming it's 64
    bytes). This should make performance slightly less flaky.
    
    Also group fields that are updated together
     - on every CEntry/CallApiCallback/CallApiGetter
       (see MacroAssembler::EnterExitFrame/LeaveExitFrame),
     - on every MacroAssembler::CallCFunction.
    
    Bug: v8:13825
    Change-Id: I74a1f0b47fa3ef793391b2c99438b7209be1a87c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116498
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91477}

commit 35947b156cd704adc9b9a7ed712ad10c3c185185
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Dec 12 20:19:33 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/2711b55..3f2733b
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/d7e0ec1..8d75795
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/d3f7f44..b142d41
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/aa65be9..18bb70a
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/a88e6d6..1f70899
    
    Rolling third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/dd5fc13..69a2e01
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761855986603297569
    
    Change-Id: I0ef29841cde5b7b401c53d3f4a7163c95b251a51
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116054
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91476}

commit 4d0ea4aac11c66481e0bf6c2b1e9308a1b442aff
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Tue Dec 12 21:46:16 2023 +0000

    [set-methods]Get receiver's table after other's keys()
    
    This CL fixes the issue of clearing receiver's table in
    case of having user's arbitrary code in other's keys().
    
    Bug: v8:13556, chromium:1510709
    Change-Id: Ide01162688409b75d6a11902364179cdd12f7a0c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5117451
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91475}

commit 1976a3f375fb686a12d0577b0a01b164d8481414
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Tue Dec 12 23:10:12 2023 +0000

    Revert "[heap] Finalize incremental marking on allocation limit overshoot"
    
    This reverts commit c46d5be6c0c6a429772dcb090e6ebefadb5b2881.
    
    Reason for revert: failed tests
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN/50505/overview
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug/48296/overview
    
    Original change's description:
    > [heap] Finalize incremental marking on allocation limit overshoot
    >
    > Don't wait for incremental marking to run out of work.
    >
    > Bug: v8:12612
    > Change-Id: I3b2902d680cc628be6fef86bdbe37b925bd34641
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116419
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Omer Katz <omerkatz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91468}
    
    Bug: v8:12612
    Change-Id: Ie34949d80b9cbfa4eaeebb7ae13ea6ce95215bd2
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5118342
    Reviewed-by: Ilya Rezvov <irezvov@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Ilya Rezvov <irezvov@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Ilya Rezvov <irezvov@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91474}

commit 77d36dd0c2946287e768d0986ce26c36d4da215c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Dec 12 08:08:28 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/eddb1ee..aa65be9
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761901282681393873
    
    Change-Id: I466195838200b3da3acf216bb4f997a48ee06bea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5117139
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91473}

commit bda277f507f623be9c1764941d56a9aeca2781a5
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Dec 12 14:46:31 2023 +0000

    [sandbox] Use a code pointer in WasmExportedFunctionData
    
    For moving Code objects out of the sandbox, they must be referenced
    through code pointers (indices into the code pointer table) from inside
    the sandbox. This CL takes care of that for the c_wrapper_code Code
    reference in WasmExportedFunctionData objects.
    
    Bug: chromium:1500887
    Change-Id: I45a3ba5e3d5442a9e9c2c8df37850737bc03c32d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116180
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91472}

commit 1f3ef91dc283e8d5e277db467bdc1280ab768230
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Dec 12 12:04:52 2023 +0100

    [cleanup] More ClangTidy findings
    
    Fix 2 ClangTidyReadability findings:
    
    the 'empty' method should be used to check for emptiness instead of
    'size' For more info see
    go/clang_tidy/checks/readability-container-size-empty (2 times)
    
    Fix 16 ClangTidyReadability findings:
    
    redundant get() call on smart pointer For more info see
    go/clang_tidy/checks/readability-redundant-smartptr-get (8 times)
    
    the 'empty' method should be used to check for emptiness instead of
    'size' For more info see
    go/clang_tidy/checks/readability-container-size-empty (8 times)
    
    
    Change-Id: Ieba4e949ae3fb2d8337ccc91587af965485ca42e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5114804
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91471}

commit 1ca9f46a2ea1cb240aeab64abd16672221931be9
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Tue Dec 12 17:03:30 2023 +0000

    Revert "[wasm] Implement generic js-to-js wrapper"
    
    This reverts commit f7b17b84da45681bafd5dca2d6095bb912ec9f67.
    
    Reason for revert: Tests failure https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN/50506/overview
    
    Original change's description:
    > [wasm] Implement generic js-to-js wrapper
    >
    > Bug: v8:14507
    > Change-Id: I18e19875594279c4fa466be633728db39a6dc3ec
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5114880
    > Commit-Queue: Andreas Haas <ahaas@chromium.org>
    > Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91469}
    
    Bug: v8:14507
    Change-Id: If895fcb14827afa8b0657f3e8c1594e6ddacae2d
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5117438
    Auto-Submit: Ilya Rezvov <irezvov@chromium.org>
    Owners-Override: Ilya Rezvov <irezvov@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    Reviewed-by: Ilya Rezvov <irezvov@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91470}

commit f7b17b84da45681bafd5dca2d6095bb912ec9f67
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Dec 12 09:22:05 2023 +0100

    [wasm] Implement generic js-to-js wrapper
    
    Bug: v8:14507
    Change-Id: I18e19875594279c4fa466be633728db39a6dc3ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5114880
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91469}

commit c46d5be6c0c6a429772dcb090e6ebefadb5b2881
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Dec 12 14:50:15 2023 +0100

    [heap] Finalize incremental marking on allocation limit overshoot
    
    Don't wait for incremental marking to run out of work.
    
    Bug: v8:12612
    Change-Id: I3b2902d680cc628be6fef86bdbe37b925bd34641
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116419
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91468}

commit 94ec61db4008572c3b8b6b97e942303a95d94b74
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Dec 12 14:47:54 2023 +0100

    [turboshaft][wasm] Fix InstanceCache phis after inlining
    
    When inlining functions, we must create Phis for all mutable
    cached values in the InstanceCache, because the return block
    might have more than one predecessor, and possibly only some
    of the paths leading to it have reloaded some cached values.
    
    Fixed: chromium:1510626
    Change-Id: Ife2007f446a7927f5199216ed668a4c7e418d6f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5116698
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91467}

commit 030eb41e2fc9531a921ce90f802839035a4f70d2
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Dec 11 10:54:18 2023 +0100

    [cleanup] ClangTidy findings
    
    Fix 22 ClangTidyReadability findings:
    
    redundant get() call on smart pointer For more info see
    go/clang_tidy/checks/readability-redundant-smartptr-get (16 times)
    
    the 'empty' method should be used to check for emptiness instead of
    'size' For more info see
    go/clang_tidy/checks/readability-container-size-empty (4 times)
    
    the 'empty' method should be used to check for emptiness instead of
    comparing to an empty object For more info see
    go/clang_tidy/checks/readability-container-size-empty
    
    the 'empty' method should be used to check for emptiness instead of
    'length' For more info see
    go/clang_tidy/checks/readability-container-size-empty
    
    Change-Id: Ia7d8a8061734a54e120212d8f8bf82fb3001976c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5107112
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91466}

commit d41d14c2ce57b8325587e0febb28782c4be1e570
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Dec 12 12:54:48 2023 +0100

    [test] Skip slow tests with debug and coverage
    
    No-Try: true
    Bug: v8:14509
    Change-Id: I8893fc5609e26c075bdc82402248036194e93f88
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5114805
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91465}

commit 97de8d5db80c4583418f1e4c0fd4bfae1c763c2f
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Dec 12 11:27:49 2023 +0100

    [turboshaft][arm64] InstructionSelector: Implement OverflowCheckedBinop
    
    Thanks to the fuzzing we now have coverage for this lowering.
    This should conclude all UNIMPLEMENTED() calls in the arm64 ISel that
    are reachable via Turboshaft.
    
    The remaining ones are:
    - VisitAbortCSADcheck --> CSA only (CSA isn't fully ported yet)
    - VisitStorePair --> StorePair is not used by Turboshaft
    - VisitFloat64InsertLowWord32 &VisitFloat64InsertHighWord32
      --> Turbofan-specific, the corresponding BitcastWord32PairToFloat64
          is documented as only being implemented on 32 bit platforms
    
    Fixed: chromium:1510761
    Change-Id: Ifdff7c2c599e5d6b5c4743c7f68704de3d4a5d2b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5115639
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91464}

commit c2783fca4a60fb1ca2cd3b05bc7676396905f8f9
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Dec 12 09:45:56 2023 +0000

    [sandbox] Reference Code from WasmInternalFunction via a code pointer
    
    For moving Code objects out of the sandbox, they must be referenced
    through code pointers (indices into the code pointer table) from inside
    the sandbox. This CL takes care of that for WasmInternalFunction::code.
    Similar to the JSFunction::code field, we can now use a shortcut in the
    places where we're only interested in the Code's entrypoint: when the
    sandbox is enabled, we can directly load the entrypoint from the code
    pointer table (CPT) without accessing the Code object at all.
    
    Bug: chromium:1500887
    Change-Id: I5e738cae9d01cc5b0d430107d8461f9a4d067dbb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110559
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91463}

commit 633062f5806eff7f8a94586d84ab8275992c6d87
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Dec 11 17:51:22 2023 +0100

    [turboshaft][wasm] Validate GlobalSet input value representation
    
    Bug: v8:14108
    Change-Id: I332b65c1c078081693c9f3d639e35494e10feb99
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110301
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91462}

commit e5f97a3372c9f8f51aa8d13f8c87bb53c8a79cc1
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Dec 12 07:02:38 2023 +0000

    Revert "[builtins-pgo] Enable builtins reordering based on PGO profile"
    
    This reverts commit f1d06b5c4a7c75276550b6299bc7c39c4c4d81f0.
    
    Reason for revert: Suspect for roll revert:
    https://crrev.com/c/5112641
    
    Original change's description:
    > [builtins-pgo] Enable builtins reordering based on PGO profile
    >
    > Bug: v8:13938
    > Change-Id: Ib26cb76b301446399cfd9e0e0fbc7486fad404a7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097212
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Auto-Submit: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91444}
    
    Bug: v8:13938
    Change-Id: I35315eac86f7fbd17d38ffc0cbea9d9087d1a03c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5114881
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91461}

commit 217774039e33587ea5817857a6b28ab453c64458
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Dec 11 20:22:06 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/7d13bd8..2711b55
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/48eb5d0..d7e0ec1
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/6edbd6b..d3f7f44
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/1714cc6..eddb1ee
    
    Rolling third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/93e031c..6ad82ea
    
    Rolling third_party/fuchsia-sdk/sdk: version:16.20231129.1.1..version:17.20231211.2.1
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/16665d1..a88e6d6
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761946583628345185
    
    Change-Id: I14d8669b9b20fa29cb5ac9cf6e68cebf62efec5f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5113483
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91460}

commit d842c545eda0e991e43a7f324d8b27566b438e0a
Author: Helmut Januschka <helmut@januschka.com>
Date:   Mon Dec 11 21:33:15 2023 +0100

    c++20 has std::assume_aligned refactor to use it.
    
    Bug: chromium:1414637
    Change-Id: I134028b42ad4a5f8545d691f025caf197325e49c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079350
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91459}

commit 02bdbcf000665f998af39c700ca430cd9be51fcb
Author: Debadree Chatterjee <debadree333@gmail.com>
Date:   Tue Dec 12 00:13:33 2023 +0530

    [builtins] add a fast path for new Set(anotherSet)
    
    Adds a fast path similar to fast js array for constructing sets from
    other sets
    
    Bug: v8:13621
    Change-Id: I1023480ea18fbacf26a50758bcfccf121bcdf863
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4569970
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91458}

commit 2890a3c695c523ed5fcfa80d783b04e72ae9d468
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri Dec 8 21:59:48 2023 +0000

    [iterator-helpers] Add accessors for toStringTag and constructor
    
    This CL adds setters and getters for toStringTag and constructor
    properties to resolve iterator helpers web-incompatibility.
    https://github.com/tc39/proposal-iterator-helpers/pull/287
    
    Bug: v8:13558
    Change-Id: I763291e0e5760f445f56de02a26ab982acbb47fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5089797
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91457}

commit 849d5a599c7fb05be3ff69be15463c4e9469e40f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Dec 11 08:18:15 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/e2ef5fa..7d13bd8
    
    Roll created at https://cr-buildbucket.appspot.com/build/8761991880210595921
    
    Change-Id: Ifa0edea1ed0285f7b488b78e44f4b2c5851f6525
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110265
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91456}

commit 080ec07da9d783a504f1681bca893ef85e53583f
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Dec 8 11:09:46 2023 +0100

    [turboshaft][arm] Port InstructionSelector part 2
    
    This CL adds a bunch of new instructions to the new turboshaft
    instruction selection on arm.
    
    Bug: v8:12783
    Change-Id: I7c6b347944fa852dd9f9fd63d83a784711eb1481
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097213
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91455}

commit bf2ed53e2ac352c124bbea339a32632b92b6d92a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Dec 11 15:23:32 2023 +0100

    [wasm][decoder] Detect always failing ref.test null none for non-null input
    
    The WasmGCTypeReducer assumes (via DCHECKs, not in its regular code
    paths) that any WasmTypeCheck that is present in the code is either
    known to be unreachable or doesn't have a dynamically inferred type
    that is incompatible with its static decoder type.
    
    The decoder tries to maintain this by not emitting type checks that are
    guaranteed to fail (or guaranteed to succeed), however this logic
    missed one case.
    
    Fixed: chromium:1508999
    Change-Id: I2a43e6b7ff799364130e87947a46df6fac083c43
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110979
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91454}

commit f57bedda5c290bdea921ac18d52648dd6afd80e9
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Dec 11 15:28:58 2023 +0100

    [maglev] Ensure ToString does not introduce unnecessary conversions
    
    If the value is passed as is (since it is of type kString), then also
    no conversion node is needed.
    
    This only happens when the input is not tagged and still has type
    string -- in other words in dead code.
    
    Fixed: chromium:1508915
    
    Change-Id: I86255a9292e734c3d16509ca4d58d179c046ff97
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110560
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91453}

commit fde226de7e1989e0c8b33d713599fcfdf301f7d7
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Dec 11 14:46:29 2023 +0100

    [wasm][jspi] Use deferred label for JSPI
    
    Switch to the central stack in a deferred label. This moves some spills
    inside the deferred block, which should speed up non-JSPI modules.
    The downside is potentially spilling the registers twice instead of once
    in the JSPI case: once inside the deferred block, and once when
    processing non-smi results.
    
    R=ahaas@chromium.org
    
    Bug: v8:12191,chromium:1504774,chromium:1508917
    Change-Id: Idc74c9d0eb840456c796007e4bc105c907d502d7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5110345
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91452}

commit 92d982471f346255af8a75024dc5f0792392436d
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Dec 11 14:16:32 2023 +0100

    [maps] Derived map cache
    
    Cache derived maps for reflect.construct or proxies on the prototype
    info. This ensures we have a re-usable map for every prototype+
    constructor combination.
    
    Bug: chromium:1492212, v8:13978
    Change-Id: I86caa5bc4277db730bf19fdb31f9092173d27c2b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4943950
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91451}

commit b278c2d5cfb706b13663952fa6a539e6607cebf9
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon Dec 11 09:15:50 2023 +0100

    [heap] Simplify PagedSpaceAllocatorPolicy::ContributeToSweeping()
    
    This method was using a lot of arguments that were actually not
    really required:
    
    1. The arguments `origin` and `size_in_bytes` were only needed because
    this method was also allocating. We now just invoke
    TryAllocationFromFreeList() again after invoking ContributeToSweeping().
    2. `sweeping_scope_id` and `sweeping_scope_kind` were computed in
    PagedSpaceAllocatorPolicy::RefillLab and then passed to
    ContributeToSweeping(). It was only needed in RefillLab() for
    RefillFreeList(). The scope for RefillFreeList() alone doesn't seem
    warranted and we can move that code into ContributeToSweeping().
    3. `required_freed_bytes` was passed to ContributeToSweeping() but
    wasn't really used. Sweeping anyways stopped after a single page and
    was unconstrained in the second invocation. However, at the end we
    did not check the result of ParallelSweepSpace() before retrying the
    allocation. We simply unconditionally retry the allocation. Concurrent
    allocation anyways means that the memory could be "stolen"
    by some other thread between sweeping and retrying the allocation. So
    this check can never be "precise" again.
    
    MainAllocator was the only user of the `required_free_bytes` argument
    for ParallelSweepSpace. All other uses passed 0 to this argument
    and left this counter unconstrained. Removing this argument also lets
    us remove the corresponding counter in RawSweep(). It was also the
    only user of FreeList::GuaranteedAllocatable() which could now be
    removed.
    
    Drive-by: Remove the `Main` suffix for methods in
    PagedSpaceAllocatorPolicy. This suffix used to signal that this was
    used from the main thread but since this code now runs on
    background threads as well it is outdated.
    
    Bug: chromium:1480975
    Change-Id: I23ef37724e6ba364870e0ca8c64d81c086d737a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5103512
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91450}

commit 2b52ab0798c7c89a561a690ecf9277c891348537
Author: Simon Zünd <szuend@chromium.org>
Date:   Mon Dec 11 10:56:51 2023 +0100

    [debug] Remove EvaluateGlobalForTesting
    
    Small cleanup CL that removes "EvaluateGlobalForTesting" and the
    corresponding DebugEvaluate::Global method.
    
    R=pfaffe@chromium.org
    
    Bug: None
    Change-Id: Iaa516341d1a9ec085b88ddf5c9dc14ebd8be44eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5109737
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Philip Pfaffe <pfaffe@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91449}

commit 22c4521156d8475d8eb1e959890441cb8366e8ca
Author: Carl Smith <cffsmith@chromium.org>
Date:   Wed Dec 6 12:38:16 2023 +0100

    [fuzzilli] Convert fuzzilli native function into an extension
    
    This untangles the fuzzilli function from the d8 shell such that other
    embedders can make use of it and implement their own fuzzing REPRL.
    
    Change-Id: Ie0554f06cac756b6b53d9517986c5d241fa4d5f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093856
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Carl Smith <cffsmith@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91448}

commit 30353e76288b4d1ceb42b1f59b8fb748ae63d0e8
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Dec 7 14:11:19 2023 +0100

    [heap] Drop condition for incremetnal marking from minor allocations
    
    The condition that minor allocations can trigger full incremental
    marking only when not in load mode should be reudndant. The check for
    ShouldOptimizeForLoadTime exists in IncrementalMarkingLimitReached.
    IncrementalMarkingLimitReached has a few other condition that may
    overrule the load time condition (mostly various stressing modes and
    high memory pressure) but in production this should be negligible.
    
    Bug: v8:12612
    Change-Id: I21531591b435a02c118840449eea1eeba5926dea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5099045
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91447}

commit f12aa7ae54e95b2494b980cb90f8f93d59afdb32
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Dec 8 18:02:21 2023 +0000

    [sandbox] Reference Code from WasmFunctionData via a code pointer
    
    For moving Code objects out of the sandbox, they must be referenced
    through code pointers (indices into the code pointer table) from inside
    the sandbox. This CL takes care of that for the wrapper_code reference
    on WasmFunctionData objects.
    
    Bug: chromium:1500887
    Change-Id: I1065313182a65d3a4ad5510a90942128581ff807
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5104690
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91446}

commit a9a3d8bbd1f454bb2b8696a0689520059a79de33
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Wed Dec 6 00:51:35 2023 +0100

    [exceptions] Also clear TryCatch on clear_exception
    
    ... except where we explicitly don't want to.
    
    Change-Id: I19a5dfb37dff35e3ea8f92564403d4c83cd3d24b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5089429
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91445}

commit f1d06b5c4a7c75276550b6299bc7c39c4c4d81f0
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Dec 8 11:58:32 2023 +0100

    [builtins-pgo] Enable builtins reordering based on PGO profile
    
    Bug: v8:13938
    Change-Id: Ib26cb76b301446399cfd9e0e0fbc7486fad404a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097212
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91444}

commit 1435e5a7cd6f42cfec3520f9dafa4470d52a2948
Author: Debadree Chatterjee <debadree333@gmail.com>
Date:   Fri Dec 8 23:23:46 2023 +0530

    [builtins] fix Array.p.push when length is non-writable
    
    When the length property is non-writable and push() fn has no arguments
    the function was returning early without checking if the array is
    non-writable this CL adds the check earlier to prevent that
    
    Bug: v8:12681
    Change-Id: Id222a4f356afdb630238a330650ea07586a157b4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4988141
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Debadree Chatterjee <debadree333@gmail.com>
    Cr-Commit-Position: refs/heads/main@{#91443}

commit cfc1f8e49621a867aced98d8a1c74c658a9f25b2
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Dec 10 20:13:10 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/d129e3a..e2ef5fa
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/1b3ee60..48eb5d0
    
    Rolling third_party/android_toolchain/ndk: XSjN84pHxBPX13CrUj3fQjEroncvFGGeJY9wDVEDswoC..NSOM616pOQCfRfDAhC72ltgjyUQp9lAWCMzlmgB18dAC
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/88a63fd..16665d1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762037180558718001
    
    Change-Id: Ib9e73afb2c2046e32e38decec04fe0b313aa3ccb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5108560
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91442}

commit 6523434f3f2ced647b45c9e6cca42e6589ae44fa
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Dec 8 12:54:49 2023 +0000

    [sandbox] Implement some missing Code Pointer routines
    
    This CL implements some missing routines related to code pointers, in
    particular the macro-assembler accessors as well as the
    IsCodePointerFieldCleared and ClearCodePointerField routines.
    
    Bug: chromium:1473677
    Change-Id: Ie19c5369075cfde26865024695e54a5b090102c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5103873
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91441}

commit 84058cfb4a1dbecc02e832233def03bb0d1eba68
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Dec 9 20:17:26 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/b5db0e2..1b3ee60
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/d720990..88a63fd
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762127775503868945
    
    Change-Id: Id8926f450aa86cfb2510adf6f452ce7a19b58e48
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5107092
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91440}

commit fd9f5040e58a7d97fc66488c46eef492c44fc9b4
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Dec 8 20:19:09 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/6fdac9c..d129e3a
    
    Rolling buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/9a7b235..b5db0e2
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/a70c661..15a737b
    
    Rolling third_party/catapult: https://chromium.googlesource.com/catapult/+log/69bde63..6edbd6b
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7cd5059..1714cc6
    
    Rolling third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/4ab8957..d720990
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762218373476952577
    
    Change-Id: Iaed2888c964f8deaca60ba7f9413b98a351c279f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5107508
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91439}

commit 7f1c73113db241010248ab1f0cd1723d9884e24a
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Dec 8 17:13:16 2023 +0100

    [wasm][turboshaft] Makes some loads immutable in wasm lowering
    
    Bug: v8:14108
    Change-Id: I69a2995f8836cdfcfbda1b43cffbccdc68b66def
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5100808
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91438}

commit 721a5a15584fcb6063a6e48337bc81eff926b516
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Dec 8 08:17:54 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling build: https://chromium.googlesource.com/chromium/src/build/+log/5adaf34..6fdac9c
    
    Rolling third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/025aa88..a70c661
    
    Rolling third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/05a55ef..7cd5059
    
    Rolling tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/28cba3e..3ccfff7
    
    Rolling tools/luci-go: git_revision:1ea45c1829514ff20c476f083462e7b8fdfaf9ae..git_revision:0ffd60c8bd4fa542fb8d7c6a60ead9b96dc4387a
    
    Rolling tools/luci-go: git_revision:1ea45c1829514ff20c476f083462e7b8fdfaf9ae..git_revision:0ffd60c8bd4fa542fb8d7c6a60ead9b96dc4387a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762263672187856017
    
    Change-Id: Ie2d5c75f58a9af7126e2092ca500f59250e3edcd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5105809
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91437}

commit a78860780c0eebd129ff70772a81a546991055ac
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Dec 8 13:39:34 2023 +0100

    [sandbox] Improve formating of src/sandbox/GLOSSARY.md
    
    We now force line breaks with <br> to ensure the individual blocks are
    nicely formatted in a markdown viewer. We also now make the item names
    ("Summary", "Implementation", etc.) bold instead of italic.
    
    Change-Id: I49a909512a73cef3c7a522e5fd0a798b18439b79
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5103871
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91436}

commit 0fb0e4391c903e98c9c47cb5fd43d4ef021f10cd
Author: Timothy Pearson <tpearson@raptorcs.com>
Date:   Fri Oct 6 17:55:30 2023 +0000

    [static-roots][ppc] Port static roots implementation to ppc64
    
    Bug: v8:13466
    
    Change-Id: I4076d2f982f22caf8eeec5b8ea103f99f087ff33
    Signed-off-by: Timothy Pearson <tpearson@raptorcs.com>
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4917707
    Reviewed-by: Milad Farazmand <mfarazma@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91435}

commit 1ae8f2f47ae3073d42050651b078111fa1b59b00
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Dec 7 09:20:00 2023 -0500

    PPC/s390: [cfi] use more CodeModificationForDebugging scopes
    
    Port 76c2d0382cace104db38e7fadb25d02b5141cc10
    
    R=sroettger@google.com, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I08ce388aa5673935cddc4651fa42ce2041d4c6cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5094792
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91434}

commit d5987cdc311164c2c716a5c10fdce8996298048b
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Dec 7 14:06:24 2023 +0100

    [heap] Allow MinorMS concurrent marking during loading
    
    MinorMS can currently run atomically during load.
    This CL allows MinorMS to use concurrent marking as well during load.
    Benchmark scores improve and this should help avoid FCP regressions.
    
    Bug: v8:12612
    Change-Id: I71d56cf06ff1a4ef2d2378d32a8df1561021608c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093859
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91433}

commit 4a664b390577de3d3572010da0dc1138d78ab2c4
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Dec 8 14:15:46 2023 +0100

    [turboshaft] Fix StructuralOptimization because of ignored side-effects
    
    Side-effects in the 1st else block were not taken into account.
    
    Drive-by: minor cleanups to StructuralOptimizationReducer.
    
    Bug: v8:12783
    Change-Id: I9666bae56c1e9f026567e8e3f0fcbad3836e8297
    Fixed: chromium:1509576
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5104648
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91432}

commit 412ecec1074bab79ddf66a718b504788939ae8ef
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Dec 8 12:37:36 2023 +0100

    [csa] Use CallBuiltin/TailCallBuiltin where possible, pt.8
    
    ... instead of CallStub/TailCallStub(Callable&, ...).
    
    This will allow CSA to control which builtin calls/tailcalls what and
    ensure that propagation of incumbent context through builtins is
    correct.
    
    Drive-by:
     - introduce code-stub-assembler-inl.h,
     - make it possible to call CodeAssembler::CallJS() not only with
       CallTrampoline descriptor (without new_target parameter) but also
       with JSTrampoline one (with new_target parameter).
    
    Bug: v8:14496
    Change-Id: I4391d310364d5a134af6647d45817adfa05c845b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077500
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91431}

commit 47eb4f9651ccd71ef1424e37e2c642e7e26dfbfd
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Dec 8 08:28:18 2023 +0100

    [turboshaft] Make --turboshaft-load-elimination non-experimental
    
    LateLoadElimination is already non-experimental when used in Wasm, so
    it doesn't make much sense to keep it experimental for JS.
    
    Also, it has been experimental for a while now, and it's pretty clear
    that we'll either enable it by default or use it as the basis for a
    Load Elimination phase that will be on-by-default, so it's now time to
    make it non-experimental.
    
    Bug: v8:12783
    Change-Id: I978501bde71191faf0e32900fdd1de5d65e8afdb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5100810
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91430}

commit 71dc2e9e23e7823c4616852fa1d2fb5f13d7208d
Author: Simon Zünd <szuend@chromium.org>
Date:   Fri Dec 8 12:46:29 2023 +0100

    [inspector] Add V8InspectorSession::Evaluate
    
    This CL adds a stripped down version of Runtime#evaluate to the
    inspector session. The main motiviation is as a replacement for
    Page#addScriptToEvaluateOnNewDocument. It requires the "command line
    API", which is a V8 inspector thing.
    
    We want to change how the command line API injection works in the
    future and we don't want to duplicate the work in blink, so
    Page#addScriptToEvaluateOnNewDocument (and friends) should go
    through the V8 inspector instead.
    
    R=bmeurer@chromium.org
    
    Bug: chromium:1069486, chromium:1505767, chromium:1509340
    Change-Id: Ia50a455a145beb2c6077f44e2f8326699de480e6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5103511
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91429}

commit 8ff6866e60ff1bde176c12e34bc5dcb909606514
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Dec 8 10:03:00 2023 +0000

    [sandbox] add src/sandbox/GLOSSARY.md
    
    This is essentially the public glossary document:
    https://docs.google.com/document/d/10ZVrH2m_cbsjhZmjnWd4K5jpEHWCLourq2dulwN8elI/edit?usp=sharing
    incorporated directly into the codebase where it can easily be found.
    
    Change-Id: I486c692e835a4a7be78c6f7ad1a6824472429ab8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5103868
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91428}

commit 7cd955494906ecd724215ad7183e445835577d80
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri Dec 8 16:42:59 2023 +0800

    [loong64][mips64][turboshaft] Port InstructionSelector part 2
    
    This CL adds some bitwise and shift operations support.
    
    Fix the 'mjsunit/wasm/turboshaft/instruction-selection' test for now.
    
    Bug: v8:12783
    Change-Id: Ia5859cc34594dc256ad1453b07ce2fa4abec20ca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5103128
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91427}

commit 4422c69b968a7c3fa8bcd26080a25edc874de1a6
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Dec 6 13:44:16 2023 +0100

    [heap] Allow MinorMS cycles during loading
    
    MinorMS was avoiding GCs while loading. Has a result new space could
    grow arbitrarily as long as loading was active (up to 7s). This was
    causing problems, i.e. jank, due to needing to iterate over all
    accumulated pages.
    
    Benchmark scores improve if MinorMS can run during loading (similar to Scavenger).
    
    The no gc during load heuristic was originally implemented to address
    FCP regressions in Finch. A followup CL would also enable concurrent
    marking for MinorMS during loading, which should help prevent the FCP
    regressions from returning.
    
    Bug: v8:12612
    Change-Id: I12e1ad532f68258873594e511ebacb46113ba143
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093858
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91426}

commit 4458ea1824086a4c9371913889fb388eac2190c3
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Dec 7 19:39:16 2023 +0100

    Fix crash in --heap-snapshot-on-oom feature
    
    We need to set a stack marker before running the HeapSnapshotGenerator
    in order to make it possible to walk the stack.
    See `HeapProfiler::TakeSnapshot` for reference.
    
    Change-Id: I88cfc2d0d0073791da4a75f2bb833a833311d596
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5100809
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91425}

commit e9ad9c783488240da9e67414f2c066e021e06a3d
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Dec 6 16:17:55 2023 +0100

    [wasm] Unhandlify read-only methods
    
    This avoids cost for allocating handles and makes it easier to
    transition to the WasmTrustedInstanceData which does not have a
    {GetIsolate()} method.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14499
    Change-Id: Iaff825860106e6a276fcc755c5807ef95cf32af9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095097
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91424}

commit 08386b0b6c9923d95eac5efb97f9dba029e3a821
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Dec 7 16:19:55 2023 +0100

    [heap] Mark some fields in FreeList as const
    
    number_of_categories_ and last_category_ can be marked as const.
    
    Bug: chromium:1480975
    Change-Id: Id4fd7e0ce3dd0a54041cdd4f413ac599fe1664f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5099688
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91423}

commit f20430cf9909e4b76d5f91e14c300ce630a8bdbb
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Dec 7 11:01:57 2023 +0100

    [wasm][turboshaft][cleanup] Use ZoneVector for ssa_env
    
    As it is only one allocation per function, this has certainly no
    effect on overall compile time, but it cleans up the heaptrack profile
    a bit for future investigations (and reduces V8 binary size slightly).
    
    Change-Id: Ief9230cb3a91d671d7af9853ec6929a9147fbd65
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097306
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91422}

commit 64f010096b357a60ecdaa6be61cf69517ea24b4d
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Dec 7 20:05:55 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/8b5921e..5adaf34
    
    Rolling v8/buildtools/reclient: re_client_version:0.123.1.b4c22d0-gomaip..re_client_version:0.124.1.13f78cc-gomaip
    
    Rolling v8/third_party/android_toolchain/ndk: NSOM616pOQCfRfDAhC72ltgjyUQp9lAWCMzlmgB18dAC..XSjN84pHxBPX13CrUj3fQjEroncvFGGeJY9wDVEDswoC
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/97b0536..69bde63
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/60f6c8a..05a55ef
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/e88fcc9..d5e7c42
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762308968713856321
    
    Change-Id: I5f35360b2843d5bcde9d907be0b0e520fb7222af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5101332
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91421}

commit ca2ea70375c2cbfdbed40841c41b3d17a44ab020
Author: Eva Herencsarova <evih@chromium.org>
Date:   Thu Dec 7 19:54:36 2023 +0100

    [wasm][turboshaft] Make loads immutable for GlobalSetOrGet lowering
    
    The order of load eliminations and lowerings for wasm is the following:
    1. wasm load elimination,
    2. wasm lowering,
    3. late load elimination.
    
    We wanted to add wasm load elimination for GlobalGet and GlobalSet. With
    this added support, we thought that the wasm load elimination is good
    enough, so late load elimination does not have to run afterwards.
    However, in wasm lowering we create loads that could be later
    eliminated, therefore, the late load elimination would still be
    needed.
    
    In this change, we make loads for GlobalGet and GlobalSet in the wasm
    lowering immutable. With this change, late load elimination already
    eliminates loads that we wanted to eliminate by wasm load elimination.
    Therefore, there seems to be no need to add wasm load elimination
    support for GlobalSet or GlobalGet.
    
    Here is a small test case where the already accessed immutable global is
    not loaded again after a call to an imported function thanks to
    this CL:
    
    (function TestGlobalGet() {
      var builder = new WasmModuleBuilder();
      let g1 = builder.addGlobal(kWasmI32, false, wasmI32Const(12));
      var sig_index = builder.addType(kSig_i_v);
      builder.addImport("q", "func", kSig_v_v);
      builder.addFunction("main", sig_index)
        .addBody([
          kExprGlobalGet, g1.index,
          kExprCallFunction, 0,
          kExprGlobalGet, g1.index,
          kExprI32Add])
        .exportAs("main");
      var main = builder.instantiate({q: {func: f}}).exports.main;
      assertEquals(24, main());
    })();
    
    Bug: v8:14108
    Change-Id: Idecdccc0bc1f6c59f34d7d333bdba79b6f0a8bfa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5099691
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91420}

commit 04cb8ca3a73cec0d7b33e339a88c7be69d494e34
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Dec 7 08:10:20 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/a19d89f..9a7b235
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/df5952f..4ab8957
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762354268912512609
    
    Change-Id: Ia175539958dcad648be74722fb043e4f80742051
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5099605
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91419}

commit 5b5102c35504f9e6dbaf2f9c690e7335b522178f
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Dec 6 16:41:04 2023 +0100

    [wasm] Unhandlify indirection function table accessors
    
    They never allocate, so they do not need to receive and return handles.
    This saves a few handle allocations, and even a whole HandleScope in
    SetIndirectFunctionTableShortcuts.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14499
    Change-Id: Iaa0f074240c3720d06223140ef5f39b80d84779b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095156
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91418}

commit c97bb0d3cb03cf8f6ccb6841e6d4dd68e45420c0
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Dec 7 12:07:34 2023 +0100

    [turboshaft][cleanup] Use more ZoneVectors
    
    ... in `UseMap` and `ComputeSpecialRPO` and increase one `SmallVector`
    size to avoid allocations.
    
    Since the original `std::vectors` were allocated just once per
    function, this probably has no effect on compile time, but it cleans
    up the heaptrack profile a bit, which is helpful for future
    investigations.
    
    Concretely, this change reduces the number of malloc calls for
    `UseMap` from ~102k to 25k (-75%) and for `ComputeSpecialRPO` from
    624k to 206k (-66%), measured locally on an x64 workstation with
    heaptrack, while eagerly compiling a large Wasm module (PSWeb,
    ~50 MB of code) with Turboshaft.
    
    Change-Id: I397962c3ce526cd48e07fc51a7b1ebe3f386bb55
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097308
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91417}

commit 8448e48dd7f04d2ef61c555ee9b8d579fdc85e11
Author: Darius M <dmercadier@chromium.org>
Date:   Thu Dec 7 16:29:31 2023 +0100

    [compiler] Fix stale slot false-positive in the RegisterAllocateVerifier
    
    The RegisterAllocateVerifier had a hard time so far to distinguish
    between AnyTagged and Smi stack slots, which lead to DCHECKs wrongly
    triggering, because it looked like references were going stale (= were
    not properly tracked by the GC) when in fact it wasn't references but
    Smis.
    
    Fixed: chromium:1509052
    Bug: chromium:1504139, chromium:1501153, chromium:1496055
    Change-Id: I2d1423031f4055ce30393095be74e477046fe832
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5099689
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91416}

commit 18fd19d6641eed5a0889bbff4719f2c0a21dcb15
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Dec 7 15:11:59 2023 +0100

    [turboshaft][arm64] Fix wrong DCHECK in Word32BitwiseAnd
    
    InstructionSelectorT<T>::integer_constant returns a signed constant,
    therefore we have to check for signed 32 bit limits in the DCHECK even
    though we use unsigned uint32_t for the mask later on.
    
    Fixed: chromium:1509346
    Change-Id: Ia508084ad4f83d0839aac73d2ba19f2957d9e8e7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097215
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91415}

commit c1b7dd84bce47563ee7d9b2c56b5a832623571f9
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Dec 7 16:08:26 2023 +0100

    [cfi] use WritableJitAllocation to write forwarded map
    
    Change-Id: I899dbbb5f25e2e54d22acb6c3b07f104816c2416
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093855
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#91414}

commit 29731c5904f9a98fb673162528226df4cad8d746
Author: Darius M <dmercadier@chromium.org>
Date:   Tue Nov 28 16:15:38 2023 +0100

    [turboshaft] Record PredecessorCount in Blocks
    
    So far, PredecessorCount() was computing the number of predecessors by
    walking them, which is a bit slow and lead to using functions such as
    HasExactlyNPredecessor to avoid worst-case behaviors.
    
    However, we probably need the predecessor count often enough that it
    makes sense to store the count in the Blocks themselves rather than
    recomputing.
    Also, this will
    
      - make it easier to write some code where we would sometimes have to
        think carefully about how to do things without computing
        predecessors.
    
      - avoid having accidental uses of PredecessorCount() because we
        forgot that it's slow.
    
    Bug: v8:12783
    Change-Id: Ia9b49ed8ebfe50691b228e5c05336d246c0646a0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067254
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91413}

commit e002e0119f01faaac816a5d651da8c773ebf9cf5
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Thu Dec 7 17:51:37 2023 +0800

    [loong64][mips64][wasm][jspi] Run JS imports on the central stack
    
    Port commit 9b1e5f0eacc5d9e823f440e101730f759757bf0c
    
    Besides remove useless code in isel for 'SetStackPointer' which is
    introduced when port JS central stack switch.
    
    Change-Id: Icd38ca3e31228540443c5c6c9668fd9986e75c6a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5096339
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91412}

commit a6b08c29ab0c4e09d4206bc9913937941e890ce5
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Dec 7 12:19:36 2023 +0100

    [cfi] pass WritableJitAllocation to RelocInfo
    
    We want all writes to executable memory to go through the
    WritableJitAllocation object. Pass it through to the WritableRelocInfo
    so that it will be available later for relocation writes.
    
    Change-Id: Iaa36fbe96204d338ff9ad8a7c99aa6bbac121224
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4844855
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#91411}

commit 54e90187978de3524df57f2a467d237302804a71
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Dec 7 12:15:50 2023 +0100

    [wasm] Use SmallVector when decoding BrTable
    
    The `std::vector` caused about 30k allocations when eagerly
    compiling all of PSWeb (found with heaptrack).
    This change has probably no effect on overall compile time, but it's
    nice to get rid of those allocations as it cleans up the heaptrack
    profile for future investigations.
    
    Change-Id: I7ebca5bf0b23c2557c1397ea857de2ee59b7027e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097305
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91410}

commit ccd89dca0ff0fe7ed2730116a992adb594369875
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Dec 7 11:54:14 2023 +0100

    [heap] Remove ConcurrentAllocator
    
    Now that ConcurrentAllocator isn't used anymore we can finally
    remove it.
    
    Bug: chromium:1480975
    Change-Id: Ib96eb5508e5ad288ac8285718910d644ea270abd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057390
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91409}

commit dd146ce6fdad26f57025fca709939811186de5a0
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Dec 7 11:50:54 2023 +0100

    [turboshaft] Increase some SmallVector inline sizes
    
    This reduces the total number of allocations quite signficantly when
    eagerly compiling a large Wasm module (PSWeb, ~50MB of code):
    Locally on an x64 workstation, I now see 47k allocations due to
    `SmallVector::AllocateDynamicStorage` (i.e., when the inline storage
    overflows) instead of 1.28M before (-97%!).
    
    Change-Id: I37c17b42c85ea51ff4990f3d78c98c75749d6048
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097211
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91408}

commit cf3e066e73eb0ca1dea0694aba33aa62777abef6
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Dec 7 11:39:28 2023 +0100

    [builtin][tq] Fix bad DCHECK in Array.prototype.flat
    
    Bug: v8:14306, chromium:1507416, chromium:1509252
    Change-Id: I48ac9a43c8c9d8469f541b6ab7b715a09e37d3ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097307
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91407}

commit e081775bb1175fde8a6ec0797e9a9bca05dbb9da
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Dec 7 10:15:39 2023 +0100

    [heap] Iterate the trusted space after scavenge
    
    Objects in the trusted space can contain OLD_TO_NEW references, hence
    iterate them after scavenge via the OldGenerationMemoryChunkIterator.
    
    So far, our trusted objects only contain references to other old
    objects, but with the new WasmTrustedInstanceData this will change.
    
    R=omerkatz@chromium.org
    CC=saelo@chromium.org
    
    Bug: v8:14499
    Change-Id: Ibb544f9f8768614c701e9f54fa930801243ca930
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095093
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91406}

commit de2be5ee06d80b6286fa6d01d6fa8d206656fa1e
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Dec 6 14:42:42 2023 +0100

    [api] Clarify EmbedderRootsHandler
    
    - The handler is not supposed to rely on WrapperClassId() anymore.
    - Rework tests to reflect this guidance.
    
    Bug: chromium:1502777
    Change-Id: I28b9956d266fea27826abfc10c74d59c0c6ef37e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093861
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91405}

commit 059f6763d0477e7ee52b3e186bbf92e2e3646047
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Thu Dec 7 17:40:16 2023 +0800

    [loong64][mips64][builtins][csa] Use CallBuiltin/TailCallBuiltin where possible, pt.6
    
    Port commit 8de6dcc377690a0ea0fd95ba6bbef802f55da683
    
    Change-Id: I9cb2cbf6a38129be3ed506ac1856e886dddb892b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095536
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#91404}

commit de892444b86a35a28d225b40cff30496f165f3a9
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed Dec 6 23:46:59 2023 +0100

    [wasm][turboshaft] Pre-allocate source positions
    
    `GrowingOpIndexSidetable<SourcePosition>::operator[]` resizes the
    underlying storage if the accessed index is out-of-bounds, in order to
    supply a default value.
    
    Since we iterate the source positions front-to-back this causes a
    relatively prominent `ZoneVector::resize` call in the profile when
    eagerly compiling PSWeb with Turboshaft (~50MB Wasm code).
    
    Locally, this change reduces the total CPU cycles reported by perf stat
    by ~1.4% (N=10, x64 workstation), but even without that it just makes
    sense to resize only once, if we can do so.
    
    Change-Id: I0e1f7c395615fe3c698e38f1fe91b6a55a622c21
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5096866
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91403}

commit 53bae9f96f0150c18f400e1e1ae3cf55bddc9a11
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Dec 4 15:05:28 2023 +0100

    [turboshaft][wasm] Share InstanceCache with inlinees
    
    When we spawn graph builders for inlined function bodies, we must
    share the outer graph builder's InstanceCache with them, because
    that InstanceCache needs to see memory.grow instructions occurring
    in inlinees.
    
    Fixed: chromium:1507663
    Change-Id: Id674450c678d38847767dcaac27393d5c309ae87
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5084016
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91402}

commit 61c254f0dc3ed12f45c219e585eceb910edf4775
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Dec 7 10:07:45 2023 +0100

    [heap] NotifyPossibleGarbage() needs to run on main thread
    
    This method always needs to run on the isolate's main thread because
    MemoryReducer is not thread-safe. The data race was introduced
    when background threads also started to invoke
    StartIncrementalMarkingIfAllocationLimitIsReached().
    
    Bug: chromium:1503063, chromium:1480975
    Change-Id: I4c474adbd0f7b7ce0ef731555434b386a848049d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097207
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91401}

commit 436b6026ec2527159923676426c625ddd3911b3d
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Dec 7 10:02:36 2023 +0100

    [cleanup] Clang Tidy: redundant get()
    
    Spotted by Google3.
    
    See: go/clang_tidy/checks/readability-redundant-smartptr-get
    Change-Id: I9059e05d7a5f6319f51819204d8113aa790520bc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097206
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91400}

commit e4f98f17681191559e8c0559255e3b787d5320cf
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Tue Dec 5 17:04:38 2023 +0000

    Revert "[test262] Add a new staging test for isSubsetOf"
    
    This reverts commit 7249c58d518caa3a05a0fab309a119a0b30c060d.
    
    Reason for revert: The test is incorrect. `new Set` gets an iterable not a list of items.
    
    no-export: true
    
    Original change's description:
    > [test262] Add a new staging test for isSubsetOf
    >
    > This CL adds a new test to staging directory of test262.
    >
    > Bug: v8:13556
    > Change-Id: I96966917b9e99ce3c2248845c1cca383d3390aaa
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5069373
    > Reviewed-by: Liviu Rau <liviurau@chromium.org>
    > Commit-Queue: Liviu Rau <liviurau@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91298}
    
    Bug: v8:13556
    Change-Id: Ic0876019702b3e290e0623b68cf461f8bddbfe71
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5087964
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Liviu Rau <liviurau@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91399}

commit 45f7bb0166524fe6da47deb34926745b55678230
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Dec 6 18:59:21 2023 +0100

    [turboshaft][arm] Port InstructionSelector part 1
    
    This CL adds most of the necessary instructions to the arm[32]
    instruction selection to pass
    mjsunit/wasm/turboshaft/instruction-selection.
    (It used to pass the test but a new test case invalidated it. As I have
    already a follow-up CL in progress that will fix it, this CL will just
    provide a step towards passing the file.)
    
    Bug: v8:12783
    Change-Id: I67a6b7eece0b8cded8790275358dd77bc8f77534
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079468
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91398}

commit c39bb5225d771e130468d5d75a9988944950e95e
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed Dec 6 23:21:41 2023 +0100

    [utils] Lower default size for ZoneUnorderedMap/Set
    
    ...down to the same value that is used in the underlying
    `std::unordered_map` and `std::unordered_set` (namely 0), see
    https://github.com/llvm/llvm-project/blob/fb62a18615d28694f1a16a3e23915190703a2e98/libcxx/include/unordered_map#L1191
    This should reduce surprises and over-allocation.
    
    When eagerly compiling a large Wasm module (PSWeb, ~50MB of code) with
    Turboshaft, this reduces total zone memory usage as reported by
    --turbo-stats-wasm by ~2.5%. It also reduces total CPU cycles as
    reported by perf stat by ~1% (N=20, x64 workstation).
    
    On JetStream2, there is no statistically significant change in terms of
    CPU cycles, but total zone memory usage reduces by ~1% (N=10).
    
    Change-Id: I8493051151b8bc632bae77586f51732016272f1b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097543
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91397}

commit 76c2d0382cace104db38e7fadb25d02b5141cc10
Author: Stephen Roettger <sroettger@google.com>
Date:   Wed Dec 6 10:59:14 2023 +0100

    [cfi] use more CodeModificationForDebugging scopes
    
    Change-Id: I7faf0c17392b6278b871f0cec252c81c3ce51863
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093833
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91396}

commit d355a3c41eff06454d225f4f62a3cd8b1efe4872
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Dec 7 14:25:33 2023 +0800

    [riscv] Delete align in kArchStackSlot
    
    Change-Id: Ib06cfdb38d6e6592a58a4b50be767b2e5062e98c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5087190
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91395}

commit 59950f40a648d1d1d682101c8b330808ee347e94
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed Dec 6 21:24:34 2023 +0100

    [utils] Lower default size for ZoneAbslFlatHashMap/Set
    
    ...down to the value that is used in upstream Abseil (namely 0), see
    https://github.com/abseil/abseil-cpp/blob/d84f20a9f7b2ac0c46d569eeac7ba9306ff62b1b/absl/container/internal/raw_hash_set.h#L1882
    
    On JetStream2, this lowers the total used zone memory as reported by
    --turbo-stats from 5347MB to 5162MB (-3.5%) and also speeds up
    compilation a little (although I would already be happy if it doesn't
    regress).
    
    Change-Id: Ia5d868d26ca4f8d3b9162ce9689e7469b31546b5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5096865
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91394}

commit 1ac72556761d4cce729f0c26abde9b0373df99e8
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Dec 7 01:10:09 2023 +0100

    [turboshaft] Replace SmallVector by reused ZoneVector
    
    ... which saves dynamic branches (due to not having to switch between
    inline and dynamic storage) and reduces v8 binary size (same reason).
    When locally measuring eager compilation of a large Wasm module (PSWeb,
    ~50MB code, x64 workstation, N=10) this reduces total CPU cycles and
    total compilation time reported by --turbo-stats-wasm by ~1%.
    
    Change-Id: I7e6ccab1c7cf5e23e0b45445b0b643bce7196ba3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097544
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91393}

commit 827f8457021b5b4c8bda6dccc506e47965dc9a40
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Dec 7 15:10:30 2023 +0800

    [riscv] Delete kWord32ShiftRightArithmetic in ChangeInt32ToInt64
    
    Change-Id: Ie5cf3b224013639687b4050f9af276ae85a3f747
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5098430
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91392}

commit 921a63f986b70d4b43c541bf73d3b94e559f130e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Dec 6 20:17:20 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/e6db94d..8b5921e
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/6ed5438..a19d89f
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/75f218d..025aa88
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/093f85f..97b0536
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/916dda0..60f6c8a
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/4cb5c2c..e88fcc9
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/93d06f8..28cba3e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762399566354207089
    
    Change-Id: I0a9f6bd5ed7df45ba081a128d247afcdb9fd6684
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5094783
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91391}

commit 8841ea55de5b6a16c396b819032ba4123b294899
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Dec 7 10:55:46 2023 +0800

    [riscv][builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.2
    
    Run JS imports on the central stack
    
    Port commit 85fddc8861b7d80428cedc60798dbd7394f4712c
    Port commit b158ad40dcff90c9fccdf4207897b3c5c3330a0d
    Port commit 9b1e5f0eacc5d9e823f440e101730f759757bf0c
    Port commit 8de6dcc377690a0ea0fd95ba6bbef802f55da683
    
    
    Bug: v8:14496
    Bug: v8:12191,v8:13983
    
    Change-Id: Ib617aa0911ee9084e4249371e8fcfbff3cab31b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5087248
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91390}

commit 119f37509d128038da286f58aaaac738676f1f3d
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Dec 7 00:31:22 2023 +0100

    [ic] Don't check map deprecation on fast path
    
    Avoid the map load on the LoadIC fast paths for checking the deprecation
    bit, relying instead on the slow path doing the deprecation if there's a
    feedback miss.
    
    This means that we might have stale feedback (with deprecated maps) a
    bit longer than before, and stale objects floating around for a bit
    longer than before, but the optimising compilers will anyway follow
    the map migration and will emit migrating map checks, and we should
    clean up the feedback the next time the feedback is updated.
    
    Change-Id: Ied8f7b4ac62d2b1cbe17f712cab89be5e7508fd2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5089430
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91389}

commit 0610a2c6bd9e81dd70de7d80b9480797525d5abc
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Wed Dec 6 00:34:16 2023 +0100

    [exceptions] Use non-verbose try/catch in modules
    
    Change-Id: If75955eda88de0269dc049d1cb8ccb6399aabdfd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5091147
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91388}

commit a2be47a2f4707e1f7740e14cea2a4304994cf63b
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed Dec 6 19:54:55 2023 +0100

    [turboshaft] Replace push_back in loop with insert
    
    Locally reduces CPU cycles in `MergePredecessors` (the next non-inlined
    function up the call stack) by ~10% (x64 workstation, eagerly compiling
    PSWeb, ~50 MB of Wasm code).
    
    Change-Id: I16d875c377894e60baa02bbd86184db3defeae58
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5096864
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91387}

commit a909d406bf818824beeeb1e5a367f07003ec8706
Author: Lei Zhang <thestig@chromium.org>
Date:   Wed Dec 6 00:17:58 2023 -0800

    Fix ia32 no-wasm build
    
    Apply #ifs and IF_WASM() to fix the build.
    
    Change-Id: Iea8ae60a4041f7ccd0ef7726eef47d377b54cc39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5089802
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Lei Zhang <thestig@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91386}

commit 747cf705c6b5398d1cab60ef6bc2f9c930c27190
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Dec 6 11:39:05 2023 -0500

    PPC/s390: [builtins][csa] Use CallBuiltin/TailCallBuiltin where possible, pt.6
    
    Port 8de6dcc377690a0ea0fd95ba6bbef802f55da683
    
    Original Commit Message:
    
        ... instead of CallStub/TailCallStub(Callable&, ...) and
        Call/Jump(Handle<Code>, ...) for calling CEntry variants.
    
        This will allow CSA to control which builtin calls/tailcalls what and
        ensure that propagation of incumbent context through builtins is
        correct.
    
    R=ishell@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I5ba693251121fdc139de433f9ce58677bac3d605
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095516
    Auto-Submit: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Michael Dawson <midawson@redhat.com>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Michael Dawson <midawson@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91385}

commit 0fa765780f8836095436dd5a83439ffcde823476
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue Dec 5 18:29:48 2023 +0100

    Reland "[api] api-macro cleanup"
    
    This is a reland of commit a9b436ed68f51badace3f1fd04a9102e7c2052ba
    
    Original change's description:
    > [api] api-macro cleanup
    >
    > Change-Id: Ia82a17d6bfb868afe92cbd18f048e62d1a1c266b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5089427
    > Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91359}
    
    Change-Id: I1044b9462a1786117764daf561ebff47a4396e0a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5096253
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91384}

commit 196726259ed8f3898b4c51c7dc79d1b6b32ff7e3
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Dec 6 17:50:03 2023 +0100

    [turboshaft][wasm] Fix InstanceCache handling for catch and call_ref
    
    This patch addresses two distinct but related issues:
    (1) For the custom control flow we set up for inlining call_ref calls,
        the InstanceCache system must properly track this control flow
        (simulating what a SnapshotTable would do).
    (2) When catching exceptions, we must reload the memory size at the
        beginning of the catch block. And similar to (1), the InstanceCache
        must properly track the control flow between regular return block,
        catch block, and their merge.
    
    Fixed: chromium:1507751
    Bug: v8:14108
    Change-Id: I707f007ae1d49ee0b6db0acad62bcdeb7cd12a46
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095095
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91383}

commit a99fa663b3b8f47ef702d249ea3acc5823d02eb2
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Dec 6 11:15:06 2023 -0500

    PPC/S390: [wasm][jspi] Run JS imports on the central stack
    
    Port: 9b1e5f0eacc5d9e823f440e101730f759757bf0c
    
    Bug: v8:12191,v8:13983
    Change-Id: I4e73bca796024d8064e06e0de1e179e5b45b48ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095033
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91382}

commit dd040bebb19dbc2cd3f43da7f5eda53e64e6c02b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Dec 6 08:11:42 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/7892c39..e6db94d
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/e96b10e..6ed5438
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/0764ad4..75f218d
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/c4601d8..093f85f
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/9630009..916dda0
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/7f2dd14..df5952f
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/5ee7860..93d06f8
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762444865659024529
    
    Change-Id: I63e8b50847d59a965e50c87585d0590f78d45970
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095515
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91381}

commit 7f330c43b0b114d131166f30b650805a3da66014
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Wed Dec 6 16:16:20 2023 +0100

    [api] Support ArrayBuffer::Detach with no context for now
    
    This breaks array-buffer key checking on failure (will crash on throw)
    but unfortunately some embedders already don't enter before detaching so
    they would possibly be broken in that case. Presumably they know what
    buffers they are handling...
    
    Change-Id: Ie17a472cf6dfe5fc4ff6de3345ad7bb6fc7e8ebf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095096
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91380}

commit d84da0d83f2dabf9e06fd85af9501e0059ecfffb
Author: Jérôme Vouillon <jerome.vouillon@gmail.com>
Date:   Tue Dec 5 20:08:05 2023 +0100

    [wasm][eh] Speed-up Isolate::is_catchable_by_wasm
    
    I get a 10% performance improvement with this change on some exception-
    heavy benchmarks.
    
    Bug: v8:14425
    Change-Id: Ic7f6511c64ff49413d8a4b22f71d3ac8153108c1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062840
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91379}

commit 0d9602377da626d45daac1dfa674719448969632
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed Dec 6 12:57:13 2023 +0100

    [turboshaft][wasm] Optimize BlockPhis container
    
    See class level comment for information on the data structure.
    
    By saving on initialization cost and bounds checking, I locally measure
    the following improvements when eagerly compiling PSWeb (~50MB Wasm
    code, x64 workstation, N=20):
    - About 0.5% reduction in total CPU cycles reported by perf stat.
    - About 0.8% reduction in elapsed total compile time.
    - About 7.5% reduction of the `V8.WasmInitializing` time reported by
      --turbo-stats-wasm.
    
    Change-Id: I295979be5a043103b594641ab52a2e3733e727ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5088808
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91378}

commit d40f8170f5db4ea88d94bd97b2122c91db610d82
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Dec 6 09:46:15 2023 +0100

    [heap] Remove old-to-shared promotion from MinorMS
    
    MinorMS doesn't copy anymore and therefore doesn't automatically
    promote objects from new space into shared space. This is why we
    shouldn't need to handle this case anymore during MinorMS.
    
    Bug: v8:13267
    Change-Id: I6723c77f2cb9cd6afcad68b586679408b50c4d52
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093207
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91377}

commit def7931b83728d229e94be9445529fb9db660654
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Dec 6 13:51:24 2023 +0100

    [turboshaft][wasm] Fix reachability handling for catch blocks
    
    Due to the reachability in the decoder influencing the  assignment of
    feedback slots, it is required to handle reachability consistently
    between liftoff and the optimizing compiler.
    
    This wasn't the case for CatchException, CatchCase and CatchAll.
    
    Bug: chromium:1508213
    Change-Id: I9feede4b9397f51d3290edccef1768f500178f1f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5088809
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91376}

commit f1a2b60f139908aa0a96b70b3aeda0c2806d60f8
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Dec 6 11:34:49 2023 +0100

    [turboshaft] Re-enable parts of the disabled CSA pipeline changes (4)
    
    The initial submit of the CSA pipeline in Turboshaft caused some
    crashes (outside of running the CSA pipeline) which we cannot explain.
    This CL is part of an attempt to incrementally re-enable the changes
    of https://chromium-review.googlesource.com/c/v8/v8/+/5030398 to
    find the crash-causing change.
    
    Bug: v8:12783, chromium:1489500
    Change-Id: Ie43f0df24a06fadf0a3b62596aae909bc2135ea9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057611
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91375}

commit a41f549485639dbb9a8450b28743b3f07390f797
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Dec 6 14:10:41 2023 +0000

    Revert "[api] api-macro cleanup"
    
    This reverts commit a9b436ed68f51badace3f1fd04a9102e7c2052ba.
    
    Reason for revert:
    Reverting series of Cls due to: https://ci.chromium.org/ui/p/v8/builders/ci/Win%20V8%20FYI%20Release%20(NVIDIA)/21272/overview
    
    Original change's description:
    > [api] api-macro cleanup
    >
    > Change-Id: Ia82a17d6bfb868afe92cbd18f048e62d1a1c266b
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5089427
    > Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91359}
    
    Change-Id: I8bd6a02d8c83ab90d994c0838552cd65cc4febeb
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5095094
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Owners-Override: Manos Koukoutos <manoskouk@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91374}

commit fe5d891be62218335ca4d72051921bcf68abffa7
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Wed Dec 6 13:38:37 2023 +0100

    [wasm] Pre-allocate vector in graph builder
    
    Proposed by clang-tidy in http://cl/588262768
    
    Change-Id: I695f475e554a863ee16e5c3fed413fd87d0502c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093857
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91373}

commit cae87fe8391832909b73882a945f27b8b5c75195
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Dec 6 09:53:45 2023 +0100

    [wasm][exnref] Fix AnalyzeLoopAssignment for try_table
    
    We did not increment the block depth for try_table, resulting in
    AnalyzeLoopAssignment exiting early and missing assignments to locals,
    or (as in the reproducer) the requirement to reload the instance cache.
    
    Bug: chromium:1507743
    Change-Id: Icb90073aca46d5e3ec5b29f19c0df99e3c93f098
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093209
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91372}

commit a32c3dc4d9d091add92fbb079422b07a2c33a707
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Dec 6 12:15:54 2023 +0100

    [turboshaft] Improve a few effects on bulitin calls
    
    Bug: v8:12783
    Change-Id: I32ca4f02327a3e401e7de8033631c3862c20e4de
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093834
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91371}

commit f17494cb9c24202f5d9482e1006f6305f198535d
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Dec 6 12:47:43 2023 +0000

    [sandbox] Also handle pointer tables in UpdatePointersAfterEvacuation
    
    Previously, the pointers to HeapObjects in our various pointer tables
    (code pointer table, trusted pointer table) were updated directly after
    relocating the object by the RecordMigratedSlotVisitor. This was a bit
    inconsistent however, and could lead to somewhat subtle issues if
    objects are accessed during GC sweeping and it is expected that all
    references either point to the old objects or the relocated objects.
    
    With this CL, the pointer tables are updated along all the other
    pointers in UpdatePointersAfterEvacuation.
    
    Bug: chromium:1473677
    Change-Id: I434fd38b74cb46332653a6640b5d850661599db3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5073673
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91370}

commit b456a546ea9a96bd6e3af390f57ebeb453a799f6
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Dec 6 10:00:09 2023 +0100

    [csa][interpreter] Use CallBuiltin/TailCallBuiltin where possible, pt.7
    
    ... instead of CallStub/TailCallStub(Callable&, ...).
    
    This will allow CSA to control which builtin calls/tailcalls what and
    ensure that propagation of incumbent context through builtins is
    correct.
    
    Bug: v8:14496
    Change-Id: Ief3c858d422a34fd9a6eff2df60548eae87a2ab8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077499
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91369}

commit 8de6dcc377690a0ea0fd95ba6bbef802f55da683
Author: Igor Sheludko <ishell@chromium.org>
Date:   Sun Dec 3 21:12:47 2023 +0100

    [builtins][csa] Use CallBuiltin/TailCallBuiltin where possible, pt.6
    
    ... instead of CallStub/TailCallStub(Callable&, ...) and
    Call/Jump(Handle<Code>, ...) for calling CEntry variants.
    
    This will allow CSA to control which builtin calls/tailcalls what and
    ensure that propagation of incumbent context through builtins is
    correct.
    
    Bug: v8:14496
    Change-Id: I974e34a6459ce179f3afc18b0d38e7fceaa1a53a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5081997
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91368}

commit 05122fe4bfb06db1f0d7799da30b989d09cedced
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Dec 6 12:18:43 2023 +0100

    [builtin][tq] Fix Array.prototype.flat again
    
    The case when the array growns during iteration was broken by the
    previous fix (https://crrev.com/c/5087850).
    
    Bug: v8:14306, chromium:1507416
    Change-Id: Ic6756527beaa5f0c73cffe02fe4603853b88aa01
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093835
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91367}

commit e5e3ce3badb1b202e0940c5ca4791c1ea2458fa6
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Dec 6 10:10:24 2023 +0100

    [turboshaft] Add missing CanAllocate effect on SameValue
    
    When called on strings, SameValue can flatten ConsString, which
    allocates memory.
    
    Bug: v8:12783
    Change-Id: Ib8e6d9e71f6ee98e59968410eb89f3ce43b1313c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093328
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91366}

commit 10debd692922d3c4e8230e4f53ec9ebf8e1fce72
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Dec 6 11:16:56 2023 +0100

    [turboshaft] Fix wasm/JS load elimination flag interaction
    
    The --turboshaft-wasm flag should not imply
    --turboshaft-load-elimination, because that causes load elimination to
    be enabled for JS as well, which is currently not desirable.
    We solve this by removing the implication and unconditionally running
    late load elimination in the wasm pipeline.
    
    Bug: v8:14502
    Change-Id: I42451a45321f03e0b431af24f1e0cf27204ae297
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093854
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91365}

commit 9ccc063e0767f27194a6547e8490abac5a5579fa
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Dec 6 09:59:54 2023 +0100

    [turboshaft] Give StringComparison builtins the CanAllocate effect
    
    Bug: v8:12783, chromium:1508367
    Change-Id: I3dd3e8598f6a2582069cc1fd70ed2e0be2ca24f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093327
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91364}

commit 8a6f0a024cc860ccbcb19eb7d86e69f7bdf74f21
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Dec 6 10:59:53 2023 +0100

    [test] Skip slow test in google3
    
    Change-Id: I31fd62e3decfc98ffa1256e316e08063d88390b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5093853
    Auto-Submit: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91363}

commit 8527c486314ecae022cccd653f2b0f02dd30153b
Author: Stephen Roettger <sroettger@google.com>
Date:   Tue Dec 5 14:12:02 2023 +0100

    [heap] Don't use UpdateTypedSlot for read
    
    In MarkTypedPointers we only read the typed slot and don't need to use
    the UpdateTypedSlot function. This is in preparation for passing
    WritableJitAllocations into the Update function.
    
    Change-Id: Ibdd6ea280a3b9456b5009758d3a713898ca4570a
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5088128
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#91362}

commit 5b45298b3995618e1a86f27c1f89e049866424a7
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Dec 5 19:17:50 2023 +0100

    [turboshaft][arm64] Fix IntructionSelector::TryMatchAnyExtend
    
    Bug: v8:12783
    Change-Id: I495b79a19fc255d4f6bd4f2515ee2b6753aa0226
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5086511
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91361}

commit 9b1e5f0eacc5d9e823f440e101730f759757bf0c
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Dec 4 16:56:11 2023 +0100

    [wasm][jspi][ia32] Run JS imports on the central stack
    
    Implement the backend instructions for loading and setting the
    stack pointer on ia32. This enables switching to the central
    stack at the wasm/JS boundary on this platform.
    
    R=ahaas@chromium.org
    
    Bug: v8:12191,v8:13983
    Change-Id: Iff880ab0a3035935492648452bbe3cad27fae193
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046676
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91360}

commit a9b436ed68f51badace3f1fd04a9102e7c2052ba
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue Dec 5 18:29:48 2023 +0100

    [api] api-macro cleanup
    
    Change-Id: Ia82a17d6bfb868afe92cbd18f048e62d1a1c266b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5089427
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91359}

commit 2df57fd4693789817f2a4647c7667ffb4945aab8
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Dec 5 08:17:55 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/b2f7b93..7892c39
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/0ac67b7..e96b10e
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/e9e09fc..c4601d8
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/caccdb0..7f2dd14
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/90bafac..5ee7860
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762535462837095633
    
    Change-Id: I5beeeb9058c7971121baaadf5b0c4546f05527fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5084872
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91358}

commit d5fefe9b7deab302ce5a8497a879809065922106
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Nov 30 15:43:30 2023 +0100

    [turboshaft] Basic simplified lowering setup for experimentation
    
    Set up a basic simplified lowering reducer and introduce a first JS
    operation (including graph builder support) to do some experiments for
    the frontend.
    
    Bug: v8:12783
    Change-Id: I57f5a7bc890e439ee89f3c35aaea493564173bad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029752
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91357}

commit 9ba7f1854299e7a8b677fe77904f2368b02f01e0
Author: Darius M <dmercadier@chromium.org>
Date:   Tue Dec 5 13:36:14 2023 +0100

    [turboshaft] Fix Load Elimination .arguments escape bug
    
    A simplified repro would be:
    
        function h() {
          return g.arguments[0];
        }
    
        function g(v) {
          return h();
        }
    
        function f() {
          let o1 = { x: 42}; // fresh object
          let o2 = g(o1); // g should be inlined but not h, thus
                          // it looks like `o1` is not aliasing
          o2.x = 3; // also changes o1.x
          return o1.x; // needs to return 3
        }
    
    When `f` creates `o1` (a fresh object), Load Elimination knows that it
    doesn't alias with anything. When this object is passed to a function
    call, Load Elimination knows that afterwards there might be
    aliases. However, here, because `g` is inlined in `f`, only the call
    to `h` remains, and it doesn't have arguments, so it looks like `o1`
    still has no aliases. We thus end up with Load Elimination eliminating
    the final `o1.x`, because it thinks that the inial `42` is still here.
    
    Fixed: chromium:1507662
    Bug: v8:12783
    Change-Id: I33cbd73678847d6a583a9e404ee5bbe1f4909402
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5087854
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91356}

commit 7d113bf309001a124498f2049510ab0e6e038dbe
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Dec 5 12:21:43 2023 +0100

    [turboshaft][wasm] Resolve Phi of RttCanons
    
    Under specific circumstances involving a combination of the
    ValueNumberingReducer and loop unrolling, we ended up with a phi as
    an rtt input for a wasm-gc allocation. This was not handled correctly
    by the `WasmGCTypeReducer`, which expected an `RttCanonOp` input.
    We are fixing this by resolving phis to identical rtts in the
    RequiredOptimizationReducer.
    
    Bug: chromium:1507779
    Change-Id: Iacafc6982ec2a22655203a47cbb8d3f0a6785058
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5088207
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91355}

commit 754216ca77f7c20ae71af00b93022816618f4bec
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Dec 5 10:08:34 2023 +0100

    [turboshaft][arm64] Implement missing optimization
    
    The missing implementation was found by the android bots:
    https://ci.chromium.org/ui/p/v8/builders/ci/Android%20V8%20FYI%20Release%20%28Nexus%205X%29/20943/overview
    
    There are a few more places, I will go over the other UNIMPLEMENTED()
    calls and manually see if I can reproduce them with unit tests to cover
    them.
    
    Bug: v8:12783
    Change-Id: I981796b69fab94c934325e7749555ffadb0b5fe4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5087848
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91354}

commit 5cf2a571d27eff4e1cc9e95474d2ece6a4184e69
Author: Igor Sheludko <ishell@chromium.org>
Date:   Sun Dec 3 21:09:34 2023 +0100

    [csa] Use CallBuiltin/TailCallBuiltin where possible, pt.5
    
    ... instead of CallStub/TailCallStub(Callable&, ...).
    
    This will allow CSA to control which builtin calls/tailcalls what and
    ensure that propagation of incumbent context through builtins is
    correct.
    
    Bug: v8:14496
    Change-Id: I01b1d14521831ab2c4bc2294c960d50f495dcef5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079351
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91353}

commit dd97dd1b1f094ba20cffdf5698951c18387a3387
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Dec 5 20:10:36 2023 +0800

    [loong64][mips64][builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.2
    
    Port commit 85fddc8861b7d80428cedc60798dbd7394f4712c
    
    Change-Id: I86e2059147343ceaec6d2eb026b3fa283a59be44
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5086409
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#91352}

commit a424868c472311a47150735508d4a091c87247e0
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Dec 4 09:02:39 2023 -0500

    [wasm][turboshaft] Fix atomic load/store on big endian
    
    Bug: v8:14108
    Change-Id: Ib3f34d5295375e3bb021a294a61f084ee7c650cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5081986
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91351}

commit d429a146004aefa3161e87813bbfe749bb6a5002
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Dec 5 11:07:19 2023 +0100

    [builtin][tq] Fix Array.prototype.flat
    
    ... which missed bounds check guarding against array length change.
    
    Bug: v8:14306, chromium:1507416
    Change-Id: I9f19deb16f0949120dff62459114369807281db0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5087850
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91350}

commit 407ab0be50d01e74d8f2c1616f3b258ff44e2fa0
Author: Liviu Rau <liviurau@chromium.org>
Date:   Tue Dec 5 10:54:06 2023 +0100

    [test262] Delegate request to git object
    
    No-try: true
    Bug: v8:14002
    Change-Id: Ib7e5c0b0b516b307e3df97b9da3667bd96c7ad1b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5087851
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Almothana Athamneh <almuthanna@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91349}

commit cebda1e268fdf48bf5e2cbde2f3693e1a9539da3
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Dec 5 12:22:15 2023 +0000

    [sandbox] SBXCHECK that arguments access is in bounds
    
    Some heap objects can, if corrupted by an attacker, lead to
    out-of-bounds reads into the stack via arguments indices. This CL
    hardens against this by essentially adding a bounds CHECK.
    
    Bug: chromium:1507223
    Change-Id: I05a4f5f6b05272a9b09d7ec103ae6cc7ab953f2e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5083028
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91348}

commit 0deeaf5f593b98d6a6a2bb64e3f71d39314c727c
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Dec 5 11:45:01 2023 +0000

    [sandbox] Introduce SBXCHECK
    
    When the sandbox is enabled, a SBXCHECK behaves exactly like a CHECK,
    i.e. will terminate the process in both debug and release configurations
    if the condition is not true. However, semantically it indicates that
    the check is required for the sandbox, i.e. prevents a (potential)
    sandbox bypass. When the sandbox is off, a SBXCHECK becomes a DCHECK.
    
    Change-Id: I9e46dd2efcb733f596137c4107ef8fe3f02ff73c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5086509
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91347}

commit 0beba87ca7e531a4708f1192183d7fd70279dcff
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Mon Dec 4 23:40:52 2023 +0100

    [turboshaft][wasm] Use Abseil hash map for block phis
    
    ... and avoid re-finding the `block_phis_` just for `erase` by passing
    in an iterator instead.
    
    Together, when eagerly compiling all functions in PSWeb (~50MB of Wasm
    code), this reduces (measured locally, x64 workstation, N=20) the total
    number of CPU cycles as reported by perf stat and the reported elapsed
    compile time by ~0.5%. Zoomed in a bit further, it reduces the profiler
    samples spent in `BuildTSGraph` by ~10%.
    
    Change-Id: I40c69d4bdae6608802741d694571fbde5a3f96ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079311
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91346}

commit 02f1df5a60c3ac65fe57c0a33d4ccf0dcadd5acb
Author: Igor Sheludko <ishell@chromium.org>
Date:   Sun Dec 3 21:03:05 2023 +0100

    [csa] Use CallBuiltin/TailCallBuiltin where possible, pt.4
    
    ... instead of CallStub/TailCallStub(Callable&, ...).
    
    This will allow CSA to control which builtin calls/tailcalls what and
    ensure that propagation of incumbent context through builtins is
    correct.
    
    Bug: v8:14496
    Change-Id: Idafc2d7966117b43c379f80d88f0a021a0855dcd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5080875
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91345}

commit abb22dc64db6572f551e59cf12cc32b714a22f1a
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Dec 5 10:55:21 2023 +0100

    [maglev] Patch Identity nodes from deopt info earlier
    
    We can already remove them from deopt info in the mark use phase.
    
    Bug: v8:7700
    Change-Id: Iee0e8436d937a4fb0950fcaddd8b366802a35cbd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5086510
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91344}

commit 4202afccdd483dfe45804dc92b4f959be5e15826
Author: Igor Sheludko <ishell@chromium.org>
Date:   Sun Dec 3 21:00:27 2023 +0100

    [builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.3
    
    Mostly mechanical change from
      __ Call(BUILTIN_CODE(isolate, XyZ), RelocInfo::CODE_TARGET);
      __ Jump(BUILTIN_CODE(isolate, XyZ), RelocInfo::CODE_TARGET);
    
    to
      __ CallBuiltin(Builtin::kXyZ);
      __ TailCallBuiltin(Builtin::kXyZ);
    
    Bug: v8:14496
    Change-Id: Ie425e672415d953ea864034fa05586c4b8677c3c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079408
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91343}

commit 8e704e587668946f465c28d5295bfb47d786632f
Author: Daniel Cheng <dcheng@chromium.org>
Date:   Sat Dec 2 14:22:52 2023 -0800

    Use googletest flag macros to access googletest flags.
    
    The implementation details of flags can change; fixing this proactively
    makes it easier to roll googletest.
    
    Bug: chromium:1409870
    Change-Id: Id9b2c3251a976d7c20e409dc79dc9a2c459e3491
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5081237
    Reviewed-by: Emanuel Ziegler <ecmziegler@chromium.org>
    Auto-Submit: Daniel Cheng <dcheng@chromium.org>
    Commit-Queue: Daniel Cheng <dcheng@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91342}

commit 085407fd88bd4a561b256a3d480caa3d58366144
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Dec 4 18:12:45 2023 +0100

    [maglev] Fix Identity nodes flowing into deopts again
    
    The previous fix in crrev.com/c/5067474 was not complete. When writing
    the deopt information we need to get it from the actual values' location
    and not the Identity's one.
    
    Fixed: chromium:1506538
    Change-Id: I27978331f700831ad976d39083dc2f6254d85009
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079308
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91341}

commit 18d6737b94705a19b4639271a714d32e4da4be64
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Dec 4 20:07:39 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/6ee8d8c..b2f7b93
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/95eabf6..e9e09fc
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/081bca8..9630009
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762580759372572865
    
    Change-Id: I6f04b096e68b6c880aff5b16a78cabaa5e81b738
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5084894
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91340}

commit 659059f46c5c3e29e3f9d78ace512cdef46aa285
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue Dec 5 02:22:09 2023 +0100

    [api] avoid unnecessary handle
    
    Change-Id: Id210730bc88f69a9926bef8b88783ccb747c0a4f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5086507
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91339}

commit cac579bcac679063632ac92a4e983676f1697a7e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Dec 4 11:25:12 2023 +0100

    [maglev] Cleanup maglev-future flags
    
    1. Maglev is already launched, so future should not enable maglev
    2. maglev-inlining is already true by default
    3. maglev-inline-api-calls should be behind maglev-future, not future
    
    Bug: v8:7700
    Change-Id: I80f870787bc3fd8df19891e8d0ae6e975ede9b32
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5083017
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91338}

commit c1d5d38867fcd845e0d76a8566c25dd4e9424313
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue Dec 5 01:04:01 2023 +0100

    [api] v8::Context is i::NativeContext
    
    Change-Id: I8b03b64b1c136cdc8c08f8277f3f625967c9d108
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079312
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91337}

commit 026ce4d15316ca6ad7d451b6676862091fee9aa4
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue Dec 5 00:04:49 2023 +0100

    [api] Disallow empty context in CallDepthScope
    
    Change-Id: I133236d8cb55e72631b3314953b72861d04babd5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5080698
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91336}

commit ef823401eb5c43d0cfce9ab08427cbbb788319d6
Author: Martyn Capewell <martyn.capewell@arm.com>
Date:   Fri Dec 1 19:16:14 2023 +0000

    [arm64] Use Abseil's btree_map for unresolved branches
    
    Use Abseil's fast map container for unresolved branches in the
    assembler.
    
    Change-Id: I2b7e5d4407bd8e61102634e675dbabe895f65327
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4720550
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91335}

commit 57886303792183dc00f8717909b002eb141b9164
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Sat Dec 2 10:43:28 2023 +0800

    [loong64][mips64] Fix build issue caused by recent changes
    
    Port commit a34be67351534cdff8ec04847630615eac9c057d
    - [exceptions] cleanup after unifying pending/scheduled exceptions
    
    Port commit 063210c08c0dcbff02e3fc59f4afd430b8108432
    - [builtins][masm] Use CallBuiltin/TailCallBuiltin where possible
    
    Change-Id: I9e5f12e5778e406c4f4411f8fbcd8ce78ed02166
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5078536
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#91334}

commit 85fddc8861b7d80428cedc60798dbd7394f4712c
Author: Igor Sheludko <ishell@chromium.org>
Date:   Sun Dec 3 21:00:11 2023 +0100

    [builtins] Use CallBuiltin/TailCallBuiltin where possible, pt.2
    
    Use Builtins::Call/CallFunction instead of CodeFactory versions.
    
    Drive-by:
     - in Generate_InterpreterPushArgsThenCallImpl use Call with given
       convert receiver mode instead of generic
       Call(ConvertReceiverMode::kAny) (x64 did it right unlike other
       architectures),
     - remove unnecessary jump in Generate_CallOrConstructForwardVarargs.
    
    Bug: v8:14496
    Change-Id: I13b0c18e25c5e63d8f8ff0326e8518728942f349
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5080235
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91333}

commit f1449c6b8df7a42fa6fd2c2f007ff40871342564
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Dec 4 09:33:51 2023 -0500

    PPC/s390: [builtins][masm] Use CallBuiltin/TailCallBuiltin where possible
    
    Port 063210c08c0dcbff02e3fc59f4afd430b8108432
    
    Original Commit Message:
    
        ... instead of Call/Jump via Handle<Code>. The latter ends up in the
        former anyway but after several unnecessary checks.
    
        Drive-by:
         - introduce builtins-inl.h and move there constexpr methods that
           compute Builtin id from various other parameters,
         - rename Builtins::GetXXXStub(...) to just Builtins::XXX(...).
    
    R=ishell@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Ib7a9c1d49492544eb0e8b6e9a663497a6832f0ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5082164
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Michael Dawson <midawson@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91332}

commit 66b4d8dd9906d6bc84ef69476c8e0df96749aa29
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Dec 4 18:18:09 2023 +0100

    [compiler] WasmLoadElimination: Skip struct.get with untyped input
    
    All inputs into struct.get should have been typed either during graph
    building or from the wasm-typer.cc.
    All untyped input should only be the jsgraph()->Dead() node.
    There are a few crashes in the wild with struct.get and an input node
    typed "None".
    
    Fixed: chromium:1507106
    Change-Id: I877d63aac6a5a8f5d7facea683525726cc30d437
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079310
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91331}

commit d8ae05c68d3cf27cefedb2f0ea14c22b65796ccb
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Nov 30 10:56:43 2023 +0100

    [test][handles] Fix out-of-stack local handles in tests
    
    According to V8's public API documentation, local handles (i.e., objects
    of type v8::Local<T>) "should never be allocated on the heap". This CL
    replaces local handles used in unit test objects, which are derived from
    testing::Test and are heap-allocated.
    
    Bug: v8:13270
    Change-Id: I21c1ba9047777731c81c398ad861d10019e73818
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076893
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91330}

commit e372877e2be0423d8caee16142e387b14f8511dd
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Dec 4 08:18:15 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/9b8bc79..6ee8d8c
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/170c2eb..0ac67b7
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/dba32e9..caccdb0
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762626059693981889
    
    Change-Id: I725b4a265b22077df72e353c07ffdf2bb6ff4521
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5082169
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91329}

commit e7b65ea10ba608a3f991dffa24604ef4fc6fe48c
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Mon Dec 4 16:05:03 2023 +0100

    Use Abseil flat_hash_map for source positions
    
    On a large Wasm module (PSWeb, ~50MB of code) a signficant fraction of
    samples is spent inserting and accessing source positions for
    instructions, in particular in the graph building, instruction
    selection, and assemble code phases. For eagerly compiling all functions
    with Turbofan, changing this data structure reduces (N=10)
    - total compile time reported by --turbo-stats-wasm by ~1.5%,
    - elapsed wall time by ~2%, and
    - total CPU cycles reported by perf stat by ~2.2%.
    
    Change-Id: Id58c5e2f5621b435e12d44fba03f22cad66dd424
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079309
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91328}

commit 84f804544cf66cd74a94d9bad931564d2bedc85b
Author: Liviu Rau <liviurau@chromium.org>
Date:   Mon Dec 4 16:27:40 2023 +0100

    [test262] Pass PR number to be approved
    
    No-try: true
    Bug: v8:14002
    Change-Id: I19e9dd31fcfa7a7f4a920007fefd855b317f1ba1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5080696
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91327}

commit c522b362d5a7e184c78ee613d3048b839ca1cbf9
Author: pthier <pthier@chromium.org>
Date:   Mon Dec 4 14:04:49 2023 +0100

    [regexp] Fix String.prototype.replace capture name lookup
    
    Ensure that capture names are not integer indices when the replacement
    string of String.prototype.replace is a named capture reference.
    
    Bug: chromium:1505672
    Change-Id: I38f0157cbde6188d70916809fb64e5834534816a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5083026
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91326}

commit 7d12441af90c25e9a9a9a5d188dc39dfa552f215
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Dec 4 13:45:06 2023 +0100

    [turboshaft] Sound effects for FindOrderedHashEntry call descriptor
    
    Bug: v8:12783, chromium:1489500, chromium:1507235
    Change-Id: I4e32481eda78c0a55c5e80514d51492717e85f38
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5082001
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91325}

commit a8774c0a04c592a1cf93d8c063d86b60e0b68f0f
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Dec 1 15:59:19 2023 +0100

    [turboshaft] InstructionSelector: Enable behind --turboshaft-future
    
    This enables the turboshaft ISel for arm64 in --turboshaft-future
    configs. It also adds it for wasm on x64 which wasn't enabled yet.
    
    Bug: v8:12783
    Change-Id: I5a816fe97beec8fc83c922ddd7f274c89ff61820
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077389
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91324}

commit 82ac85af38740c428b54dc9b769dae9da580ea09
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon Dec 4 13:39:33 2023 +0100

    [heap] Bail out if NotifyTimer() was called outside kWait state
    
    NotifyTimer() should only be called when the MemoryReducer state
    machine is in the kWait state. Omer noticed that we would restart
    incremental marking when the initial state was already kRun, which
    would likely lead to the linked crash. Thanks Omer for noticing!
    
    Bug: chromium:1507462
    Change-Id: Icd0f5edea2cedbe225235500ea7f04fc580c67bd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5083024
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91323}

commit 86e54fe85fba80a75805d52031c16e83cba03671
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Dec 4 10:19:55 2023 +0800

    [riscv][builtins][masm] Use CallBuiltin/TailCallBuiltin where possible
    
    Port commit 063210c08c0dcbff02e3fc59f4afd430b8108432
    Port commit 12203e0c46b507dc138047c0fe22ce254bfced91
    
    Bug: v8:14496
    
    Change-Id: I7cabcbc444b21ff8352cf0aea3dbb55177c398d5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5081171
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91322}

commit 0836bce2161610da6678666dace8cb7ad2c920b3
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Dec 4 01:27:24 2023 +0100

    [wasm][jspi] Switch to the central stack for a JS builtin call
    
    The JSPI variant of the wasm-to-js wrapper calls the
    PerformPromiseThen builtin. This builtin is not in the list of wasm
    builtins, and therefore does not switch to the central stack when it
    calls a runtime function (if needed).
    Switch to the central stack before calling this builtin.
    
    R=ahaas@chromium.org
    
    Bug: v8:14497
    Change-Id: I424a04498638550d30993618c67896528fbdafb3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079475
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91321}

commit 941e8ffcc8f212d7ce581f709309a9558b43852b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Dec 4 10:52:28 2023 +0000

    Revert "[include] Re-add include to unblock chromium roll"
    
    This reverts commit 1e1ada54b8346d894417724b376f7c18d687d301.
    
    Reason for revert: This CL was only landed as a temporary workaround
    to unblock the chromium roll.
    https://crrev.com/c/5077471 should have addressed this issue now.
    
    Original change's description:
    > [include] Re-add include to unblock chromium roll
    >
    > The issue was introduced in https://crrev.com/c/5062929.
    >
    > Bug: chromium:1507016
    > Change-Id: I127ed0fd732f6dc662d28542473190500d28dffe
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079897
    > Reviewed-by: Clemens Backes <clemensb@chromium.org>
    > Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    > Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    > Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91305}
    
    Bug: chromium:1507016
    Change-Id: I3cb24c3ecb242c3cffb1e6805eac40905503ae05
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5083816
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91320}

commit f9bd6cff0f539e53ecc3dbf8ef34b06839dc8014
Author: Simon Zünd <szuend@chromium.org>
Date:   Mon Dec 4 10:42:31 2023 +0000

    Revert "[inspector] Use v8::Global handle for context in InjectedScript::Scope"
    
    This reverts commit ad10c4c60b0160cc43a1e82c39c895cc26e7dc2a.
    
    Reason for revert: Causes a memory regression in Telemetry.
    See https://crbug.com/1506471.
    
    Original change's description:
    > [inspector] Use v8::Global handle for context in InjectedScript::Scope
    >
    > We expose one v8-inspector API that allocates InjectedScript::Scope on
    > the C++ heap. This won't be allowed in the future due to conservative
    > stack scanning.
    >
    > This CL switches the local handle over to a v8::Global to at least
    > unblock CSS. Going forward we should aim to allocate the offending
    > "CommandLineAPIScope" only on the stack.
    >
    > R=bmeurer@chromium.org
    >
    > Bug: chromium:1505767
    > Change-Id: I3b82ce20ebca44cc5afb75eccab4d3b06f2ee422
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068359
    > Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    > Commit-Queue: Simon Zünd <szuend@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91238}
    
    Bug: chromium:1505767,chromium:1506471
    Change-Id: I24e693a2cd9ac46bb0c727235d15b6d8d86ac0cf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5083020
    Commit-Queue: Benedikt Meurer <bmeurer@chromium.org>
    Auto-Submit: Simon Zünd <szuend@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91319}

commit 67b545ba7a11bcbfd1df4d78d74acb94cbe7e27f
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Dec 4 10:18:07 2023 +0000

    [sandbox] Use zero-extension when bounds checking in AccessorAssembler
    
    In EmitFastElementsBoundsCheck, we were previously using SmiUntag when
    loading the length of the JSArray, which will potentially perform a sign
    extension of the length. Normally, this doesn't matter as the length of
    an array will always be a positive Smi value. However, given the sandbox
    attacker model, this no longer holds: an attacker could change the
    length to be a negative value, in which case the following bounds check
    would be wrong. This could allow an attacker to reach out of the sandbox
    with a very large negative index. This CL now fixes this by using
    PositiveSmiUntag instead, which will perform zero extension.
    
    Bug: chromium:1507691
    Change-Id: I85a296d34686bb08fa97c1d71af6ddea543a84b5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076911
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91318}

commit 3ade8ed5d8b97ee9ba8bf50a54792fadef99b577
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Dec 1 15:57:56 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 13
    
    This adds The LoadStoreSimplificationReducer to JavaScript as well for
    architectures which do not support complex address modes.
    
    It also implements enough to pass checkall with
    --turboshaft-instruction-selection.
    Unfortunately, this is not enough as multiple instructions have not
    been implemented yet...
    
    Bug: v8:12783
    Change-Id: I143e683ab449aea402b8a85fc691625132193b77
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5071552
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91317}

commit 38e0bfd89aef5b9fde9a247c5b3bc5451bfa3577
Author: Hao Xu <hao.a.xu@intel.com>
Date:   Mon Dec 4 17:29:39 2023 +0800

    Detect CPUs affected by Intel JCC erratum
    
    Bug: v8:14225
    Change-Id: Iedf64bbf65238d676d012921b3010ba0b66b7ebd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5060984
    Commit-Queue: Hao A Xu <hao.a.xu@intel.com>
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91316}

commit d782130ffff81cfb0e1901501e3440afe090f207
Author: Liviu Rau <liviurau@chromium.org>
Date:   Mon Dec 4 10:40:07 2023 +0100

    [test262] Self approve exports
    
    Chromium/WPT exports are self approved via a web hook (http://screen/BYL5fPchGhjxcmu) with self approve functionality from http://shortn/_A8n7jtXYcp installed @ http://shortn/_Jc3u72WPMZ  .
    
    We will mimic the same behavior by sending an approve request just before we attempt a second pass merge.
    
    Bug: v8:14002
    Change-Id: I632b254147029649d41d9d4816ddfc8a2c05f4cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5083018
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91315}

commit 3130a66a9d9c027c211d0ccc339f1892d855c17f
Author: V8 Autoroll <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Dec 4 01:17:02 2023 -0800

    Version 12.2.0
    
    Change-Id: I787d5fba0843170823ca88ce47695ef43a7a85d8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5081980
    Reviewed-by: Lutz Vahl <vahl@chromium.org>
    Commit-Queue: Lutz Vahl <vahl@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91314}

commit 32857fbeb042c27010127aa02bbfaffcc0bf0829
Author: Etienne Pierre-doray <etiennep@chromium.org>
Date:   Fri Dec 1 17:09:58 2023 +0000

    Fix ToggleRunningState lifetime Take 3
    
    https://chromium-review.googlesource.com/c/v8/v8/+/5077231
    didn't compile on gcc; this adds #if guards.
    At exit destructor are normally disallowed for static variables.
    This doesn't really work for thread_local, since the alternative is
    to leak allocated memory.
    
    Bug: chromium:1315595, chromium:1506590
    Change-Id: Ie047f4bc7fb5e5a1f5d81633d6bacd062eaeb61f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077728
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Etienne Pierre-Doray <etiennep@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91313}

commit 936e7ac6b216efd65641e165f5e5af161c9d2a13
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Dec 3 08:09:56 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/f99b6db..170c2eb
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/13c0812..dba32e9
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762716656461714705
    
    Change-Id: Idce8c4da5337856ca7819f5f9c4ae5f3326b16e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079115
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91312}

commit 5766167236a08488d5be81cca6554d118c699761
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Dec 1 20:06:31 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/a443f73..9b8bc79
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/ba3cb9e..f99b6db
    
    Rolling v8/buildtools/reclient: re_client_version:0.121.0.e622934-gomaip..re_client_version:0.123.1.b4c22d0-gomaip
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/be49b4d..95eabf6
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/cccca95..081bca8
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/3467ae2..13c0812
    
    Rolling v8/third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/67da756..dd5fc13
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/22c6d2c..90bafac
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762852553529121889
    
    Change-Id: Ibf3eccbf2e899db88fdd466cba8d797a26b4bcd7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5081296
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91311}

commit 063210c08c0dcbff02e3fc59f4afd430b8108432
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Dec 1 18:18:51 2023 +0100

    [builtins][masm] Use CallBuiltin/TailCallBuiltin where possible
    
    ... instead of Call/Jump via Handle<Code>. The latter ends up in the
    former anyway but after several unnecessary checks.
    
    Drive-by:
     - introduce builtins-inl.h and move there constexpr methods that
       compute Builtin id from various other parameters,
     - rename Builtins::GetXXXStub(...) to just Builtins::XXX(...).
    
    Bug: v8:14496
    Change-Id: Icc229c916a894a9f9011e72540ec6bea987eb50e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079307
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91310}

commit 3494f446d33e18eed4fb4db4a1876a883e265b79
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Dec 1 14:59:15 2023 -0500

    PPC/s390: [exceptions] cleanup after unifying pending/scheduled exceptions
    
    Port a34be67351534cdff8ec04847630615eac9c057d
    
    R=verwaest@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I4955ad7ae0594e91b0a99550d7a3dbebc006d421
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079112
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91309}

commit a34be67351534cdff8ec04847630615eac9c057d
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri Dec 1 19:24:44 2023 +0100

    [exceptions] cleanup after unifying pending/scheduled exceptions
    
    Change-Id: I802c1e9cf23815ceb5ccd79c079d93b150aa3d82
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079407
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91308}

commit bbe112245dbfb472a8a818901c20037a7b39438f
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Fri Dec 1 10:06:17 2023 +0800

    [builtin][tq] Optimize Array.prototype.flat
    
    Migrate the code to tq, add the fast path for FastJSArray using
    FastJSArrayWitness. Observe 4x improvement from the micro-benchmark
    mentioned in the issue.
    
    Bug: v8:14306
    Change-Id: Ifb1843a5fd538463beb056a0f1d4af17e1aaedfb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4899797
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91307}

commit 810da9f46b42e91964dfbfc36e790c954b6f57a1
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Dec 1 16:08:59 2023 +0100

    Reland "[turboshaft][wasm] Stage --turboshaft-wasm behind --future"
    
    This is a reland of commit 30bfcd39979d10a0eaf2003be9f592a16386693f
    
    Change compared to original: Mark tests as SKIP over FAIL, as they
    might succeed (return early) for configurations of future with
    `--noenable-avx`.
    
    Original change's description:
    > [turboshaft][wasm] Stage --turboshaft-wasm behind --future
    >
    > As a consequence, unmark it as an experimental feature. Also unmark
    > two load elimination flags that are implied by it.
    >
    > Bug: v8:14108
    > Change-Id: Ia944fac7e83b572e64feebd83db2a5fdaa86bef0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062778
    > Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91276}
    
    Bug: v8:14108
    Change-Id: Ibd5f3704a4884922c87da709832d28c3e63621a8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077390
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91306}

commit 1e1ada54b8346d894417724b376f7c18d687d301
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Dec 1 16:55:56 2023 +0100

    [include] Re-add include to unblock chromium roll
    
    The issue was introduced in https://crrev.com/c/5062929.
    
    Bug: chromium:1507016
    Change-Id: I127ed0fd732f6dc662d28542473190500d28dffe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079897
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91305}

commit e6e325ae0a9c673f5cb019ae9ea2f5c47212d9c3
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri Dec 1 16:44:07 2023 +0100

    Undo spurious change
    
    Change-Id: If9d1c3c7d0333364e4ea2a678161e3632e3ad2c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079898
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91304}

commit 7042e907a7cb7c6edadb9890a14ae015e0c7dab0
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri Dec 1 15:55:23 2023 +0800

    [loong64][mips64][exceptions] Unify pending and scheduled exceptions
    
    Port commit 12203e0c46b507dc138047c0fe22ce254bfced91
    
    Change-Id: Iae1d457e713801229f25aea1220dafc074694474
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075561
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91303}

commit 5b117f9266c6f1b1f6878e31cd145b489e283f26
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Dec 1 09:10:58 2023 -0500

    PPC/s390: [exceptions] Unify pending and scheduled exceptions
    
    Port 12203e0c46b507dc138047c0fe22ce254bfced91
    
    Original Commit Message:
    
        The difference wasn't very well understood, and actually leads to
        wonky/broken semantics.
    
        Scheduled exceptions were embedder-side exceptions, while pending
        exceptions were used inside of v8. Conversions were done on the
        boundaries. Pending exceptions could be cleared locally without
        try/catch since we'd only propagate exceptions to external try/catch on
        Promotion. An embedder-side TryCatch could be reused without
        v8::TryCatch::Reset() first. If there already was an exception and a new
        one was thrown, the exception was simply overwritten.
    
        Or that was the theory.
    
        V8 is reentrant. When the embedder returns to V8 a scheduled exception
        had to be turned into a pending exception
        (Isolate::PromoteScheduledException()). When V8 returns to the embedder,
        a pending exception is turned into a scheduled exception
        (Isolate::OptionalRescheduleException()) to make sure that exceptions
        can be returned through multiple JS/embedder stack segments.
    
        This CL drops the distinction between scheduled and pending exceptions.
        A possible pending exception is dropped on rentry in V8, meaning the
        embedder will always be able to call into V8 again despite being given
        an error.
    
        This slightly changes the semantics: if an embedder calls into V8 while
        a pending exception was sitting around, it won't be "rethrown" on exit
        to the caller of the embedder. However, this case (rentering V8 without
        an explicit TryCatch) would already have been partially broken: if V8
        would call out to the embedder again, on return to V8 the exception
        would have been throw there, instead of only when returning to the first
        call to V8.
    
        Embedder code may need to be fixed to account for this change. A similar
        change was needed in V8 in src/d8/async-hooks-wrapper.cc: Multiple calls
        to SET_HOOK_FN needed to complete before a possible exception was
        propagated to the caller. The solution is to wrap the calls in TryCatch
        with ReThrow.
    
        In a follow-up I'll look into not clearing Isolate::pending_exception on
        entry at all, and instead always clear it when the exception is
        propagated to TryCatch (as opposed to JS). This would change DCHECKs in
        V8 that guarantee that we exit V8 when we have a pending exception. I'll
        support those by adding debugmode only flags.
    
    R=verwaest@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I13ef6f56d26558fc6e26bbb06ba246c24c288bde
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079697
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91302}

commit ecd4693540db89d76560ed941da9033d7a2cbf5a
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Dec 1 16:01:51 2023 +0100

    [turboshaft][wasm] Better branch hints for polymorphic inlining
    
    This brings Turbofan's logic to Turboshaft: only the last case
    is annotated as "likely", the others as "unknown".
    Previously we pushed all cases except the first to deferred blocks,
    which costs some performance when there are multiple cases with
    similar probabilities.
    
    Bug: v8:14108
    Change-Id: Ifa8f05bb01babae45eb360909743d2cfed6cf132
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079895
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91301}

commit 3ba8a30584d35b996da4316869c3fc72e4fa3f14
Author: Marja Hölttä <marja@chromium.org>
Date:   Fri Dec 1 14:16:48 2023 +0100

    [turbofan] Print better error messages when verification fails
    
    Change-Id: I7bf9f711bfa4e5e3061d8dad675850ad890feea7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075009
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91300}

commit 591a37600421abc7ec56b3c4d8543f39176b99a6
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Dec 1 13:53:47 2023 +0100

    [turboshaft][wasm] Mark String.length loads as immutable
    
    This helps LoadElimination.
    
    Bug: v8:14108
    Change-Id: Id5b6a1fd947b75ab1b145d3f0a6c2d503836ad4d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075007
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91299}

commit 7249c58d518caa3a05a0fab309a119a0b30c060d
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Tue Nov 28 23:11:26 2023 +0000

    [test262] Add a new staging test for isSubsetOf
    
    This CL adds a new test to staging directory of test262.
    
    Bug: v8:13556
    Change-Id: I96966917b9e99ce3c2248845c1cca383d3390aaa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5069373
    Reviewed-by: Liviu Rau <liviurau@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91298}

commit 126d12447d868b094320382e333443c7295f9cb8
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Nov 29 09:27:10 2023 +0100

    [snapshot] Pass Isolate::CreateParams to SnapshotCreator
    
    SnapshotCreator's Isolate should not ignore Isolate::CreateParams.
    This is needed to guarantee that V8 Isolate sees CppHeap on
    initialization.
    
    Bug: v8:13754
    Change-Id: I2cae5325171969fa67a7e79e73c27fc4725ef520
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062929
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91297}

commit 42589e88f26a0d06e2fb12da935d2c0d7b82e01e
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Nov 30 16:44:44 2023 +0100

    [handles] Refactored away pimpl pattern
    
    - Avoid pimpl as TracedReference::Create() is a hot path (mechanical)
    - Manually inline the creation path for non-PGO build performance
    
    Bug: chromium:1502777
    Change-Id: Ia493292f07bb41e951c5ee8c122ffda15a780caf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076900
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91296}

commit a69aca116bcfdc1b982721e47a7e3e3ba1be368f
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Nov 30 15:32:42 2023 +0100

    [api] Add warning to v8::Persistent
    
    invoking Reset(). For almost all scenaros v8::Global is the strictly
    better handle to use.
    
    v8: :Persistent is a footgun as it will leak memory without explicitly
    Change-Id: I317bc0ab46d554fd104e7dd5850360da7eeffda7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076898
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91295}

commit 619a24b9969864ab9c48ddaf2d6c747992995b1f
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Dec 1 09:21:16 2023 +0000

    Reland^2 "[sandbox] Ensure bytecode is loaded via a trusted pointer"
    
    This is a reland of commit 9d6bd9e75a7350327121ae4f9d748c01886e374c
    
    Fix TSan complaints by using an acquire load.
    
    Original change's description:
    > Reland "[sandbox] Ensure bytecode is loaded via a trusted pointer"
    >
    > This is a reland of commit 403b8120fadd2387900034b6d44da303d3916b6a
    >
    > Fixed incorrect type check in builtins-arm64.cc.
    >
    > Original change's description:
    > > [sandbox] Ensure bytecode is loaded via a trusted pointer
    > >
    > > Currently, the routines loading the BytecodeArray from an SFI would
    > > allow an attacker to use an attacker-controlled BytecodeArray by
    > > clearing the trusted_function_data field and using the tagged
    > > function_data field to point to a fake BytecodeArray inside the sandbox.
    > > To prevent this, we now force the bytecode accessor routines to always
    > > use the trusted pointer field.
    > >
    > > Bug: chromium:1472252
    > > Change-Id: Ie39a0e6ba450db2fdccedcfc68e2b2f883156ee3
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076895
    > > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#91278}
    >
    > Bug: chromium:1472252
    > Change-Id: I47c1318f78e507062e6be3ac841885132543ce88
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077249
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91285}
    
    Bug: chromium:1472252, v8:14495
    Change-Id: Iffe130aa046b13eee2eb7cd93d54e62d5896281a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5079305
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91294}

commit 0a1519f2ab24f8837b98135201b5c787cbd5b7d6
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Nov 30 14:45:38 2023 +0100

    [turboshaft] Optimize allocation in NewBlock
    
    A couple minor changes that improve performance when creating new blocks
    in Turboshaft during graph building or optimizations:
    - Allocate backing storage for the full remaining capacity of
    `all_blocks_` when growing, not just for 64 blocks at a time.
    - Only allocate the space when growing, initilize later once when
    that block is added to `all_blocks_`.
    - Save (now superfluous) capacity field of `all_blocks_` by switching
    from `ZoneVector` to a Zone-allocated `base::Vector`.
    - This also avoids the capacity check when appending to `all_blocks_`.
    - Explicitly outline the slow growing case.
    
    Locally, I measured (eagerly compiling all functions in the PSWeb Wasm
    binary with Turboshaft, N=20 repetitions, x64 workstation):
    - About 35% reduction in samples attributed to `NewBlock`.
    - About 2% reduction of the time reported by --turbo-stats-wasm for
    `V8.WasmInitializing`.
    - About 0.55% reduction in total time reported by --turbo-stats-wasm.
    - About 0.6% reduction in wall clock compile time.
    
    Change-Id: Ie67762fe8fad3e81c3c542d99fa4def26262f2e7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076897
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91293}

commit 3e42642b3727e99dec37b32cada7c406d24a675c
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri Dec 1 15:15:48 2023 +0800

    [loong64][mips64][jspi] Port JS central stack switch
    
    Port commit b158ad40dcff90c9fccdf4207897b3c5c3330a0d
    
    Does't implement js central stack switch yet, but fix a build issue
    caused by that on loong64 and mips64 platforms.
    
    Change-Id: I84c45a07d4d74789d925c3c2f9ecc68c1359bd1e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055983
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#91292}

commit 39102b99bc49b57f364590c2fb361b458fe45dd8
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Dec 1 08:31:46 2023 +0000

    Revert "Fix ToggleRunningState lifetime Take 2"
    
    This reverts commit 498d6fea257c679f7d7583dad15ba63cce6affe6.
    
    Reason for revert: Compiler error on GCC build:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20gcc%20light%20-%20debug%20builder/6119/overview
    
    Original change's description:
    > Fix ToggleRunningState lifetime Take 2
    >
    > Previous attempt https://chromium-review.googlesource.com/c/v8/v8/+/5066901
    > didn't work because active_timer isn't thread safe.
    > Fix: bring back thread_local, but avoid making a (leaky)
    > lazy instance. This way, the object is destructed each time
    > a thread exits.
    >
    > Bug: chromium:1315595, chromium:1506590
    > Change-Id: Ie54e4747c57686b2d107c7485aa2794a82f45b7a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077231
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Commit-Queue: Etienne Pierre-Doray <etiennep@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91290}
    
    Bug: chromium:1315595, chromium:1506590
    Change-Id: Ib4be37da7e65c7b9413d0525fed02f5ac84d6339
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077069
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91291}

commit 498d6fea257c679f7d7583dad15ba63cce6affe6
Author: Etienne Pierre-doray <etiennep@chromium.org>
Date:   Thu Nov 30 21:35:07 2023 +0000

    Fix ToggleRunningState lifetime Take 2
    
    Previous attempt https://chromium-review.googlesource.com/c/v8/v8/+/5066901
    didn't work because active_timer isn't thread safe.
    Fix: bring back thread_local, but avoid making a (leaky)
    lazy instance. This way, the object is destructed each time
    a thread exits.
    
    Bug: chromium:1315595, chromium:1506590
    Change-Id: Ie54e4747c57686b2d107c7485aa2794a82f45b7a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077231
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Etienne Pierre-Doray <etiennep@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91290}

commit 1d07a73cd2d255f59fd83cdac2f1e40c0efffb31
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Nov 30 20:16:47 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/bb826aa..a443f73
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/b17c7e8..ba3cb9e
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/ee96754..be49b4d
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/b5393e5..cccca95
    
    Rolling v8/third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/c078b56..93e031c
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/0ad014c..3467ae2
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/bbe2764..278e5fb
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762943146075162849
    
    Change-Id: I979bdf1e70c0b8b88bebf2326207f1d3796053ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5078498
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91289}

commit 12203e0c46b507dc138047c0fe22ce254bfced91
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri Dec 1 01:35:37 2023 +0100

    [exceptions] Unify pending and scheduled exceptions
    
    The difference wasn't very well understood, and actually leads to
    wonky/broken semantics.
    
    Scheduled exceptions were embedder-side exceptions, while pending
    exceptions were used inside of v8. Conversions were done on the
    boundaries. Pending exceptions could be cleared locally without
    try/catch since we'd only propagate exceptions to external try/catch on
    Promotion. An embedder-side TryCatch could be reused without
    v8::TryCatch::Reset() first. If there already was an exception and a new
    one was thrown, the exception was simply overwritten.
    
    Or that was the theory.
    
    V8 is reentrant. When the embedder returns to V8 a scheduled exception
    had to be turned into a pending exception
    (Isolate::PromoteScheduledException()). When V8 returns to the embedder,
    a pending exception is turned into a scheduled exception
    (Isolate::OptionalRescheduleException()) to make sure that exceptions
    can be returned through multiple JS/embedder stack segments.
    
    This CL drops the distinction between scheduled and pending exceptions.
    A possible pending exception is dropped on rentry in V8, meaning the
    embedder will always be able to call into V8 again despite being given
    an error.
    
    This slightly changes the semantics: if an embedder calls into V8 while
    a pending exception was sitting around, it won't be "rethrown" on exit
    to the caller of the embedder. However, this case (rentering V8 without
    an explicit TryCatch) would already have been partially broken: if V8
    would call out to the embedder again, on return to V8 the exception
    would have been throw there, instead of only when returning to the first
    call to V8.
    
    Embedder code may need to be fixed to account for this change. A similar
    change was needed in V8 in src/d8/async-hooks-wrapper.cc: Multiple calls
    to SET_HOOK_FN needed to complete before a possible exception was
    propagated to the caller. The solution is to wrap the calls in TryCatch
    with ReThrow.
    
    In a follow-up I'll look into not clearing Isolate::pending_exception on
    entry at all, and instead always clear it when the exception is
    propagated to TryCatch (as opposed to JS). This would change DCHECKs in
    V8 that guarantee that we exit V8 when we have a pending exception. I'll
    support those by adding debugmode only flags.
    
    Bug: v8:7235
    Change-Id: Iff7c8fb8ff2f0bddbac0d84ce832086fba330dd1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050065
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91288}

commit 62eb26279630758daa6d4f7ae9f1cf872dfe87f5
Author: Adam Klein <adamk@chromium.org>
Date:   Thu Nov 30 23:35:01 2023 +0000

    Revert "Reland "[sandbox] Ensure bytecode is loaded via a trusted pointer""
    
    This reverts commit 9d6bd9e75a7350327121ae4f9d748c01886e374c.
    
    Reason for revert: causing flakiness on multiple TSAN bots
    See https://crbug.com/v8/14495 for details
    
    Original change's description:
    > Reland "[sandbox] Ensure bytecode is loaded via a trusted pointer"
    >
    > This is a reland of commit 403b8120fadd2387900034b6d44da303d3916b6a
    >
    > Fixed incorrect type check in builtins-arm64.cc.
    >
    > Original change's description:
    > > [sandbox] Ensure bytecode is loaded via a trusted pointer
    > >
    > > Currently, the routines loading the BytecodeArray from an SFI would
    > > allow an attacker to use an attacker-controlled BytecodeArray by
    > > clearing the trusted_function_data field and using the tagged
    > > function_data field to point to a fake BytecodeArray inside the sandbox.
    > > To prevent this, we now force the bytecode accessor routines to always
    > > use the trusted pointer field.
    > >
    > > Bug: chromium:1472252
    > > Change-Id: Ie39a0e6ba450db2fdccedcfc68e2b2f883156ee3
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076895
    > > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#91278}
    >
    > Bug: chromium:1472252
    > Change-Id: I47c1318f78e507062e6be3ac841885132543ce88
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077249
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91285}
    
    Bug: chromium:1472252, v8:14495
    Change-Id: I27d7bbe5564cc1be80637265767ec36b0b3aefd5
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5078505
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91287}

commit f875dd2477650f81c57251b1892e662cc4549c95
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Nov 30 20:04:20 2023 +0100

    [api] Cleanup after turning replacing branches with DCHECK
    
    We don't need to return Nothing<T> anymore so we don't need to pass it
    through.
    
    Change-Id: Idb9f42f493a71458481f56fa50e9dd7c80676199
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076902
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91286}

commit 9d6bd9e75a7350327121ae4f9d748c01886e374c
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Nov 30 16:40:25 2023 +0000

    Reland "[sandbox] Ensure bytecode is loaded via a trusted pointer"
    
    This is a reland of commit 403b8120fadd2387900034b6d44da303d3916b6a
    
    Fixed incorrect type check in builtins-arm64.cc.
    
    Original change's description:
    > [sandbox] Ensure bytecode is loaded via a trusted pointer
    >
    > Currently, the routines loading the BytecodeArray from an SFI would
    > allow an attacker to use an attacker-controlled BytecodeArray by
    > clearing the trusted_function_data field and using the tagged
    > function_data field to point to a fake BytecodeArray inside the sandbox.
    > To prevent this, we now force the bytecode accessor routines to always
    > use the trusted pointer field.
    >
    > Bug: chromium:1472252
    > Change-Id: Ie39a0e6ba450db2fdccedcfc68e2b2f883156ee3
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076895
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91278}
    
    Bug: chromium:1472252
    Change-Id: I47c1318f78e507062e6be3ac841885132543ce88
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077249
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91285}

commit b9d96699ca435b8b6da527a1e7f6a4231d0a618e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Nov 30 08:05:36 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/f9cc71c..bb826aa
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/9e5fc28..b5393e5
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/990e9cd..22c6d2c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8762988444794148177
    
    Change-Id: I5c90edf46e5bb9e175b8defe140c51671eb11cbd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077229
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91284}

commit 4096a3a83a0827f4fd36cf8be822aa77332f6469
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Nov 30 15:08:53 2023 +0100

    Reland "[wasm] Fix unsafe shutdown of WeakScriptHandle"
    
    This is a reland of commit 3e267a851cc8a72730ff395c2f55e2ba49b015b6
    Changed in reland: merged the follow-up fix from crrev.com/c/5072553,
    making the posted task cancelable.
    
    Original description:
    > The recently introduced clearing of GlobalHandles in the
    > ~WeakScriptHandle destructor must not run on background threads,
    > so with this patch we now post a task to the main thread to take
    > care of that. However, we must be careful *not* to post that task
    > in case the entire Isolate is currently shutting down.
    
    Fixed: v8:14477
    Change-Id: I251b5ae1b92eaadcb2916e607c65876c8d284ef4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077386
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91283}

commit 3efab6ea5f397ce7cf9c929b3ba9cd3d5cf3ae27
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Nov 30 16:22:58 2023 +0000

    Revert "[sandbox] Ensure bytecode is loaded via a trusted pointer"
    
    This reverts commit 403b8120fadd2387900034b6d44da303d3916b6a.
    
    Reason for revert: Fails on Mac arm64:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Mac%20-%20arm64%20-%20debug/15271/overview
    
    Original change's description:
    > [sandbox] Ensure bytecode is loaded via a trusted pointer
    >
    > Currently, the routines loading the BytecodeArray from an SFI would
    > allow an attacker to use an attacker-controlled BytecodeArray by
    > clearing the trusted_function_data field and using the tagged
    > function_data field to point to a fake BytecodeArray inside the sandbox.
    > To prevent this, we now force the bytecode accessor routines to always
    > use the trusted pointer field.
    >
    > Bug: chromium:1472252
    > Change-Id: Ie39a0e6ba450db2fdccedcfc68e2b2f883156ee3
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076895
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91278}
    
    Bug: chromium:1472252
    Change-Id: I2201e5c2cf7ec44df139bf9d0a6d979212580544
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076901
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91282}

commit 06df8123409d9c0c23aaa66ab11bbeeb6ba29a5d
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Nov 30 16:10:30 2023 +0100

    [turboshaft][wasm] Set up separate flags for instruction selection
    
    Introduce a "staging" flag for architectures where we plan to run a
    trial on Turboshaft instruction selection (currently x64 only), and
    an "experimental" flag for the rest.
    
    Bug: v8:14108, chromium:1496282
    Change-Id: Iee7b9baf45acf3a5478f45489d7a3f6baaa23248
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075618
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91281}

commit 9ba5c501fd2345391aa81d811f92400e24e7a01a
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Nov 30 15:45:17 2023 +0000

    Revert "[turboshaft][wasm] Stage --turboshaft-wasm behind --future"
    
    This reverts commit 30bfcd39979d10a0eaf2003be9f592a16386693f.
    
    Reason for revert: failing noavx check for SIMD tests:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64/55351/overview
    
    Original change's description:
    > [turboshaft][wasm] Stage --turboshaft-wasm behind --future
    >
    > As a consequence, unmark it as an experimental feature. Also unmark
    > two load elimination flags that are implied by it.
    >
    > Bug: v8:14108
    > Change-Id: Ia944fac7e83b572e64feebd83db2a5fdaa86bef0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062778
    > Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91276}
    
    Bug: v8:14108
    Change-Id: I088015892a2f9df3590693f911163c15edb9f2ac
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077269
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91280}

commit f5c06903972a8a5abc0c5c7875a2022e2ea4e488
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Nov 30 15:37:28 2023 +0100

    [api] Introduce droppable TracedReferences
    
    For TracedReference this change introduces a droppable property and
    deprecates class ids. Class ids are state per reference and block
    performance work in V8. Provided V8 does proper receiver checks, the
    embedder can always get the class id via unwrapping the JS object and
    looking it up via type info.
    
    The default behavior wrt to EmbedderRootsHandler does not change yet,
    i.e., V8 will call out to the handler for any non-droppable reference
    by default. This can be turned off though providing a small
    performance boost.
    
    Change-Id: Iff6db3fa3985a83b01b8c4e3c62133d07e564903
    Bug: chromium:1502777
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076894
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91279}

commit 403b8120fadd2387900034b6d44da303d3916b6a
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Nov 30 12:12:57 2023 +0000

    [sandbox] Ensure bytecode is loaded via a trusted pointer
    
    Currently, the routines loading the BytecodeArray from an SFI would
    allow an attacker to use an attacker-controlled BytecodeArray by
    clearing the trusted_function_data field and using the tagged
    function_data field to point to a fake BytecodeArray inside the sandbox.
    To prevent this, we now force the bytecode accessor routines to always
    use the trusted pointer field.
    
    Bug: chromium:1472252
    Change-Id: Ie39a0e6ba450db2fdccedcfc68e2b2f883156ee3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076895
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91278}

commit 6d818ccb627c78a31f8cfc87d7b6a10c911b3897
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Thu Nov 30 15:37:37 2023 +0100

    [turboshaft][cleanup] Avoid allocation in Phi()
    
    We can downcast from a `base::Vector<V<T>>` to `base::Vector<OpIndex>`.
    
    Change-Id: I0fe07c4b27a68a3734bd6a3d4419397970c1fa5b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076899
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91277}

commit 30bfcd39979d10a0eaf2003be9f592a16386693f
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Nov 30 14:54:47 2023 +0100

    [turboshaft][wasm] Stage --turboshaft-wasm behind --future
    
    As a consequence, unmark it as an experimental feature. Also unmark
    two load elimination flags that are implied by it.
    
    Bug: v8:14108
    Change-Id: Ia944fac7e83b572e64feebd83db2a5fdaa86bef0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062778
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91276}

commit 77c8538b25f97bf0660f079315a0616624227257
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Nov 30 14:29:17 2023 +0100

    [turboshaft] Merge StringEqualOp into StringComparisonOp
    
    Bug: v8:12783
    Change-Id: I1982479f1cf47cb11bb1dca9630c20d57d2d5f6c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5077385
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91275}

commit 047fc169fadd1b25fd084ed91bb767aeb8544eda
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Nov 30 09:02:04 2023 +0000

    Revert "[heap] Remove compaction spaces"
    
    This reverts commit 34ac42f535ea668a8f0a987804a63aeb09fab6a4.
    
    Reason for revert: Caused quite some regressions.
    
    Original change's description:
    > [heap] Remove compaction spaces
    >
    > Compaction spaces are thread-local spaces which were used by GC
    > threads for allocating. They were required when V8 did not support
    > concurrent allocation in spaces.
    >
    > Compaction spaces stole pages from their corresponding regular space
    > during evacuation and merged all pages back at the end. Concurrent
    > allocation allows us to directly allocate in the regular space now
    > without moving pages into the CompactionSpace.
    >
    > In order to allow multiple LABs on a single page for concurrrent
    > allocation, LABs for the GC are limited to 32K.
    >
    > Bug: chromium:1480975
    > Change-Id: Iebdf510727519d246eee1074fe0d552f1d54dbfa
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062752
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91228}
    
    Bug: chromium:1480975
    Change-Id: I7e090c1c2b82f0078f59ecf45db64d7fd1c39812
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076892
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91274}

commit 9ec047a1674da2e5f3976725a2c08120fd499111
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Nov 23 14:02:12 2023 +0100

    [CET] emit endbr64 landing pad instructions
    
    Add an optional feature to emit landing pads on x64.
    If CET IBT support is enforced, all indirect jmps/calls need to end up
    at an endbr64 instruction or have a notrack prefix.
    
    The feature is behind the build flag (off by default)
      v8_enable_cet_ibt
    
    Bug: v8:13355
    Change-Id: Ifd350a566b2cb1aa9e5976b797dc658106df826c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4637222
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91273}

commit f709550dd81295977277b18c833736b9035371aa
Author: Darius M <dmercadier@chromium.org>
Date:   Thu Nov 30 12:23:37 2023 +0100

    [turboshaft] ISEL: Use correct type in MarkAsRepresentation for LoadOp
    
    Drive-by: add "result_rep" in the printing of LoadOp, so that it's
    clearer when looking at Turbolizer/--trace-turbo-graph what is
    compressed and what isn't.
    
    Bug: v8:12783
    Change-Id: If10d160237586d23859fa7f907fb27fe74af0526
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5076896
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91272}

commit d8bdbd559fcd16adc29562a965fe2703e01cbed4
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Nov 30 12:27:25 2023 +0100

    [turboshaft] Merge BigIntEqualOp into BigIntComparisonOp
    
    Bug: v8:12783
    Change-Id: I65df0a47fe5a0ca75ff5352b6bc92c02321d6b0e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075617
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91271}

commit 376a960b508dc46f1987aee038e938e58faf9749
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Nov 29 15:20:45 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 12
    
    This change implements the remaining special handling needed to pass
    all v8 tests  with:
      --variants=turboshaft
      --extra-flags="--turboshaft-wasm-instruction-selection"
    
    There are still many instructions missing for JavaScript.
    
    Bug: v8:12783
    Change-Id: I7145f2f4c7f7c285464bcba352036f351b137f49
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068453
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91270}

commit 9678b6939719bd91d0001d5beb8dd07c49af7203
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Nov 30 15:57:04 2023 +0800

    [riscv][builtins] Avoid reloading undefined value in InterpreterEntryTrampoline
    
    Port commit 40c0f84a38b0e17709376f1845d26848ee5b60cf
    
    Bug: v8:9771
    
    Change-Id: Ia7344abc1a00965ad70ea2ca8d85a8e43e0e54bd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075020
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91269}

commit 2aeac2952a7137ddeacad9b32194e60f01d35f6f
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Nov 30 10:44:52 2023 +0100

    [wasm] Fix simulator guard for stack-switching codegen
    
    - Use {AssemblerOptions::enable_simulator_code} instead of
      the USE_SIMULATOR macro to correctly determine if we should generate
      simulator code or not for embedded builtins
    - Set {AssemblerOptions::enable_simulator_code} for wasm when running
      with the simulator. In particular this was not set for the wasm-to-js
      wrappers, so they would be missing the code to update the simulator
      stack limit for stack-switching.
    
    R=ahaas@chromium.org
    
    Bug: v8:14481,v8:13983
    Change-Id: If396e953f7461de959e1f7f1649ed6b258f3a8ca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075614
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91268}

commit ff969c35dddcf838aadcd3b7d600cfbd9deab0de
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Nov 30 08:43:06 2023 +0000

    [sandbox] Support black allocations in pointer tables
    
    Until now, pointer entries in the trusted- and code pointer table were
    always allocated black, regardless of how the host object was allocated.
    This can, however, lead to stale pointer table entries if the host
    object is allocated white, then immediately freed during the next GC. To
    avoid this, we now also by default allocate pointer table entries white,
    but also support black allocation when the host is allocated black.
    
    Bug: chromium:1473677
    Change-Id: I387631c95e9cb7e3d7966f23b72b1c31bcc53a69
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5073492
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91267}

commit ae1db1c0c284205e4d687d43c9c25198500137d7
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Nov 29 18:07:19 2023 +0100

    [turboshaft] Refactor reducer stack to enable using it with other IRs
    
    We would like to be able to reuse the reducer stack for others IRs (in
    particular Maglev).
    
    This CL extracts some Turboshaft-specific parts of the reducer stack
    into a Turboshaft-specific bottom of the stack and top of the
    stack. The middle of the stack should then be IR-independent. More CLs
    will follow to make this happen.
    
    Additionally, having a distinct top and bottom of the stack (Assembler
    used to be both the top and the bottom) will be easier to replace just
    the bottom of the stack, which could be useful to allow in-place
    mutations.
    
    Drive-by: rename OptimizationPhase to CopyPhase. This name is better
    because OptimizationPhase is sometimes used for simple lowerings (ie,
    not optimizations), and some optimizations (eg,
    DecompressionOptimization) don't need an OptimizationPhase.
    
    Bug: v8:12783
    Change-Id: I75ae4a49259c0534cd9f2f7ddd6534bcf4da7821
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054539
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91266}

commit 9bec203c02dc7280e28401831d77b3043ab42659
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Nov 29 17:53:05 2023 +0100

    [compiler] ISEL: fix current_effect_level_
    
    current_effect_level_ is supposed to be the effect_level of operation
    being currently visited. However, it was updated at the wrong place,
    which means that it was always the effect_level at the end of the
    current block, thus preventing covering in quite a few cases.
    
    Change-Id: Ie1d57c21ff8a6a8ec35d4a66ba46b74833ebe283
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5071557
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91265}

commit 14f1310b5a5e0425b6c69443ffbbfd0a7b22d8af
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Nov 29 17:43:41 2023 +0100

    [turboshaft][x64] ISEL: bypass Int64->Int32 truncate on Int32Add inputs
    
    Bug: v8:12783
    Change-Id: Id4eb7fe58887307a4a6d07e61c19ec483f2ea5ed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5071373
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91264}

commit 27ab6230895110e8f96b1b7531489e2b266849c2
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Nov 29 17:23:14 2023 +0100

    [turboshaft] ISEL: do not increment effect-level for RetainOp
    
    Bug: v8:12783
    Change-Id: I9b90c63c9c42350101b24e43b7ae5552ab469218
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5071317
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91263}

commit 425c9aa0a628b0c0f892189510cf592a82c61013
Author: Simon Zünd <szuend@chromium.org>
Date:   Wed Nov 29 13:14:24 2023 +0100

    [inspector] Use v8::Global for members of CommandlineAPIScope
    
    We allocate CommandlineAPIScope on the C++ heap, so we shouldn't use
    v8::Locals as members.
    
    R=bmeurer@chromium.org
    
    Fixed: chromium:1505767
    Change-Id: If76eefd12d3db295069db9a4e848d076d1a8822c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068363
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91262}

commit b3612a131d32bf70e38b49f91ecd9fcf9b07e913
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Nov 29 20:17:26 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/c65da25..b17c7e8
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/2823d8f..ee96754
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/6cd38f6..0ad014c
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/c21fd38..4cb5c2c
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/85df028..bbe2764
    
    Rolling v8/third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/7b4829c..67da756
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763033744494602033
    
    Change-Id: Ie79b1860413cd4d5ba1bcf7d8f6174721b5fc41b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5074619
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91261}

commit d28e2463380000943b4c16a6c7f879fd0a4427be
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Nov 28 12:58:15 2023 +0100

    [wasm][exnref] Fix null handling
    
    In some cases in the optimizing compilers, exnref null was still
    handled as wasm null. With this change it is now correctly handled as
    JS null.
    
    Bug: v8:14398, chromium:1505174
    
    Change-Id: Id8c1504420896b51f27afaa4b5567405ee731ab4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062775
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91260}

commit 3eed17c6a12a0f33639aa5cffb822ebe42931ec8
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Nov 30 00:34:59 2023 +0100

    [api] DCHECK-fail when we reenter V8 while terminating
    
    Change-Id: I25caa0af677f672b77b62913ba66166d8e6b557c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075293
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91259}

commit cb04913fc1f6e2a902ff69894adee1a30922817f
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Nov 30 00:23:05 2023 +0100

    [api] Downgrade some EscapableHandleScope to HandleScope
    
    Change-Id: I1359b57ddade4f901225d7df5a4314f64c355d37
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5075292
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91258}

commit a81b89c3e2210b088e6ef667de9a31be9402c177
Author: Adam Klein <adamk@chromium.org>
Date:   Wed Nov 29 22:20:22 2023 +0000

    Revert "[wasm] Fix unsafe shutdown of WeakScriptHandle"
    
    This reverts commit 3e267a851cc8a72730ff395c2f55e2ba49b015b6.
    
    Reason for revert: blocking V8 roll into Chromium:
    See try failures in https://crrev.com/c/5073101
    
    Original change's description:
    > [wasm] Fix unsafe shutdown of WeakScriptHandle
    >
    > The recently introduced clearing of GlobalHandles in the
    > ~WeakScriptHandle destructor must not run on background threads,
    > so with this patch we now post a task to the main thread to take
    > care of that. However, we must be careful *not* to post that task
    > in case the entire Isolate is currently shutting down.
    >
    > Fixed: v8:14477
    > Change-Id: Idd2c0fd6ed32528e9e662f48e4792e45a5ef8430
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068358
    > Reviewed-by: Clemens Backes <clemensb@chromium.org>
    > Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91245}
    
    Change-Id: I84e2544ab34b19469c84f726cef83b459a3c5905
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5074714
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91257}

commit 3cd903d2a660ec5e7bd599aa1d6e36da1c71193a
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Nov 29 18:27:50 2023 +0100

    [heap] Fix race on Heap::old_generation_allocation_limit_configured_
    
    This field is read on background threads through
    Heap::IncrementalMarkingLimitReached, while the main thread might
    set it back through Heap::NotifyContextDisposed.
    
    Bug: chromium:1480975
    Change-Id: Ib63f7d05219d86438f4292601cc7f2878d2f19de
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5072552
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91256}

commit b9912e6709b9759fc7d3448e1629e803b76e8fee
Author: Patrick Thier <pthier@chromium.org>
Date:   Wed Nov 29 17:13:11 2023 +0000

    Revert "[regexp] Adding Captureless Lookbehinds in Experimental"
    
    This reverts commit 44482e68ea820b66b93e1863f9ba7d69260256b8.
    
    Reason for revert: Failing tests: https://cr-buildbucket.appspot.com/build/8763176028126496433
    
    Original change's description:
    > [regexp] Adding Captureless Lookbehinds in Experimental
    >
    > Each lookbehind is compiled as an independent automaton. These automata
    > are executed in parallel with the main expression. Upon completing a
    > match they write a boolean in a truth table (`lookbehind_table`), reset
    > at each new string position. The thread of the expression containing
    > the lookbehind checks the truth table and is either discarded or kept
    > alive.
    >
    > This work was supervised by Aurèle Barrière, from SYSTEMF at EPFL.
    >
    > Bug: v8:14435
    > Change-Id: Ic6fb60e57ae499c18bcf4920e312b7023c8e0174
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006443
    > Commit-Queue: Patrick Thier <pthier@chromium.org>
    > Reviewed-by: Patrick Thier <pthier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91218}
    
    Bug: v8:14435, v8:14489
    Change-Id: Ic923ad677e6300c6e6b0c8313e2252742d99a8c0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5071558
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91255}

commit 083fba50a0036109132963496cbadc66589a018e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Nov 29 08:17:54 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/4ddd07c..f9cc71c
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/ec903cc..0764ad4
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/71fc601..2823d8f
    
    Rolling v8/third_party/fuchsia-sdk/sdk: version:16.20231117.2.1..version:16.20231129.1.1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763079042668157137
    
    Change-Id: I2f700c8c8689bb5d95860573f2aa83c6f3025018
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5072312
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91254}

commit cb153fcda7fafbdbbd7a67165bcbe8f1f76b7dfc
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Nov 29 16:25:05 2023 +0100

    [turboshaft] Re-enable parts of the disabled CSA pipeline changes (3)
    
    The initial submit of the CSA pipeline in Turboshaft caused some
    crashes (outside of running the CSA pipeline) which we cannot explain.
    This CL is part of an attempt to incrementally re-enable the changes
    of https://chromium-review.googlesource.com/c/v8/v8/+/5030398 to
    find the crash-causing change.
    
    Bug: v8:12783, chromium:1489500
    Change-Id: Idba9f545e4163f28d56b91307599943ce432d0d7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057610
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91253}

commit 455faa2809d10c4cd5f644afd6e7938a01ada5f3
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Nov 29 15:48:40 2023 +0100

    [wasm][jspi][arm64] Add comment for reserved frame slots
    
    The comment is copied from x64 codegen. Also add a reference to the
    corresponding frame constants in the form of a static assert.
    
    R=nicohartmann@chromium.org
    CC=clemensb@chromium.org
    
    Bug: chromium:1505048
    Change-Id: I7215c04c69af6ff08110e0b15fc56b159f29c09d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5071553
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91252}

commit 06eeec3e5f5e09dd3cac693a352c0d1374b54bff
Author: Etienne Pierre-doray <etiennep@chromium.org>
Date:   Tue Nov 28 23:10:15 2023 +0000

    Simplify ToggleRunningState lifetime
    
    In https://chromium-review.googlesource.com/c/chromium/src/+/5067654
    lsan detects a leak in TimedHistogram::ToggleRunningState
    https://chromium-swarm.appspot.com/task?id=66307a2538957b11&o=true&w=true
    
    The easy fix is to tie the active_timer_ map to TimedHistogram
    lifetime.
    
    Bug: chromium:1315595
    Change-Id: I417af19d15a8a8cd416827e3164d4756276ca80a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5066901
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Etienne Pierre-Doray <etiennep@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91251}

commit 5196fcec450044c48a05716fcf1004b288f3f35b
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Nov 28 12:52:37 2023 +0100

    [wasm][fuzzer] Fixes related to try_table
    
    - Fix code printing by incrementing control depth.
    - Print number of entries for try_table.
    - Pop the related block when we leave a try_table scope.
    - Handle kExn, kNoExn in `GenerateRef`.
    - Implement `top_type` for kExn, kNoExn.
    - (Drive-by) Add line breaks to generated testcase.
    
    Bug: v8:14398, chromium:1505174
    
    Change-Id: I38d70bf3360f2a1cdd86b8d2cee930142c4b727c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057612
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91250}

commit 33dab337eaafb4c795adf82f4efd62e86bc164ab
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Nov 29 12:43:21 2023 +0100

    [turboshaft] Normalize loads whose base is addition and index is invalid
    
    This make the instruction selector generate better code (because the
    addition is computed with a complex memory operand rather than before
    the load).
    
    Additionally, this makes the TS graphs more normalized, which could be
    good in particular for LoadElimination and StoreStoreElimination, and
    any alias analysis we may want to do.
    
    Bug: v8:12783
    Change-Id: I08f75d83c972f2fd60c064fce2ab944f0541f7ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068362
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91249}

commit c0db1b89bcc22dbc0aae97de32c1110cd109925e
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Nov 29 14:42:24 2023 +0100

    [turboshaft][wasm] Run decompression optimization for wasm
    
    This optimization was missing (but is present for JS and was also
    optimized on Turbofan). There are some visible improvements for
    wasm-gc (about 2-3% on average).
    As it is an in-place optimization phase, it shouldn't measurably
    regress compile time, still excluding it on non-gc modules to prevent
    any issues there as it shouldn't have much optimization potential
    for linear wasm.
    
    Bug: v8:14108
    Change-Id: I1f03a567498d143b18f2b0439947fbcb1a9ed67f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5071372
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91248}

commit 0a7c60ac04ef67eaed7e53dc5243fc768fa8a8a4
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Nov 29 14:46:51 2023 +0100

    [maglev] Fix for compare root
    
    Make it explicit when we rely on a tagged comparison because we did not
    uncompress the value we want to compare against.
    
    Drive-By: Fix arm64 CompareRoot for smi roots.
    
    Bug: v8:7700
    Change-Id: I6e165a65b67fb4c5a211d6dcd6df5d349cbf9fe3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068539
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91247}

commit 7e6df8ed4f7bd8ffd93cbd226b85edf0627bdc40
Author: pthier <pthier@chromium.org>
Date:   Wed Nov 29 14:23:20 2023 +0100

    [maglev] Fix polymorphic element access
    
    Don't create the final block if no branch has any valid possible maps.
    If all maps are impossible (due to requested and known maps not
    intersecting) we unconditionally deopt.
    
    Bug: chromium:1505952
    Change-Id: Ica1c3bfacc63fa4afca454cc32b23ba6c70922a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068000
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91246}

commit 3e267a851cc8a72730ff395c2f55e2ba49b015b6
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Nov 29 14:25:29 2023 +0100

    [wasm] Fix unsafe shutdown of WeakScriptHandle
    
    The recently introduced clearing of GlobalHandles in the
    ~WeakScriptHandle destructor must not run on background threads,
    so with this patch we now post a task to the main thread to take
    care of that. However, we must be careful *not* to post that task
    in case the entire Isolate is currently shutting down.
    
    Fixed: v8:14477
    Change-Id: Idd2c0fd6ed32528e9e662f48e4792e45a5ef8430
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068358
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91245}

commit e077d4bf994f41eae8edc9c998be506066a4c959
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Nov 29 14:18:44 2023 +0100

    [turboshaft] DecompressionAnalyzer: Also analyze first block
    
    The analysis skipped the first block. I'm working on a CL to enable
    the decompression optimization where it isn't unlikely to have
    pointer decompressions in the first block that can be optimized.
    
    Bug: v8:12783
    Change-Id: I8ed782b3eddef9efc80945039b9c64ebbd3c41af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068538
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91244}

commit 6420289b27a43595de47d9454fed49956a81cc9e
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Nov 29 12:57:46 2023 +0000

    Revert "Reland "[sandbox] Reference Code from InstructionStream via a code pointer""
    
    This reverts commit c2b1e5429275e85fb9369327a2bfd91dd3b39d93.
    
    Reason for revert: Likely causing DCHECK failures in GcSafeLookupCode:
    https://ci.chromium.org/ui/p/chromium/builders/try/android-arm64-rel/405384/overview
    
    Original change's description:
    > Reland "[sandbox] Reference Code from InstructionStream via a code pointer"
    >
    > This is a reland of commit 6aeae8406bf5c94252ef1fb71b98a2286609196a
    >
    > The race reported by TSan has been fixed by (temporarily) using release-
    > acquire semantics when accessing code pointer table entries.
    >
    > Original change's description:
    > > [sandbox] Reference Code from InstructionStream via a code pointer
    > >
    > > We want to move Code objects out of the sandbox, and for that they
    > > should be referenced through trusted pointers. This CL turns the
    > > reference from InstructionStream into a trusted pointer. This is not
    > > strictly needed for security: the InstructionStream already lives
    > > outside the sandbox and so cannot directly be manipulated. However, it
    > > is easier to use a trusted pointer here, but we might change this back
    > > to a tagged pointer with the trusted cage base in the future.
    > >
    > > Bug: chromium:1500887
    > > Change-Id: I38a65a2aa44118175c6adbf1fb04f4f0a3d4efc6
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013476
    > > Reviewed-by: Stephen Röttger <sroettger@google.com>
    > > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#91205}
    >
    > Bug: chromium:1500887
    > Change-Id: Iafc7965412bf18957a4ef94bf91bfe4922ccae03
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062777
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Stephen Röttger <sroettger@google.com>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91217}
    
    Bug: chromium:1500887
    Change-Id: Ic53c6b71ecb52919ba6fc7cd9260e698f192d6b5
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068003
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91243}

commit bdab22c6d57f75d6726fce071ca250121747fcba
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Nov 29 12:45:43 2023 +0100

    [turboshaft][wasm] Annotate OpEffects of builtin calls
    
    Rather than defaulting all builtin calls to arbitrary effects, this
    adds proper annotations to all builtin calls. The intention is to
    let them get in the way of other optimizations (e.g. LoadElimination)
    less often.
    
    Bug: v8:14108
    Change-Id: I886193666387fac8fcf248dfb18e6ec884d3aeee
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062931
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91242}

commit dd5e9b903eb256a44c1041c5b74c11adc4afb181
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Nov 29 11:28:39 2023 +0000

    [sandbox] Add exception to TrustedPointerTable::Validate
    
    In case we can only partially reserve the sandbox, it can happen that
    the trusted space ends up inside the sandbox address space, in which
    case the previously added CHECK will fail. As this configuration of the
    sandbox is anyway unsafe, we should let the CHECK succeed as well.
    
    Bug: chromium:1505899
    Change-Id: I738e4da19b3133b48197b266c9c150fe94f688bd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068001
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91241}

commit 6a4b0715a064093af7c70a6426d52694d99354ab
Author: Benedikt Meurer <bmeurer@chromium.org>
Date:   Wed Nov 29 11:21:09 2023 +0100

    [inspector] Don't allocate argv as v8::Local[] on the C++ heap.
    
    Bug: chromium:1505767
    Change-Id: I3fc3fb1c1cdd1ad8dbc7b3e0918233c04f85f4d4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068361
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Auto-Submit: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91240}

commit e4088eb5ab70464579ab16b1ca0b47af3ab46c18
Author: Benedikt Meurer <bmeurer@chromium.org>
Date:   Wed Nov 29 11:05:46 2023 +0100

    [inspector] Switch ValueMirror from `v8::Local` to `v8::Global`.
    
    Drive-by-fix: While we are at it, also simplify the logic for creating
    ValueMirror's a bit.
    
    Bug: chromium:1505767
    Change-Id: Ic0d7c9c8ac1236801120bde2b302973a3daea0a8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067999
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91239}

commit ad10c4c60b0160cc43a1e82c39c895cc26e7dc2a
Author: Simon Zünd <szuend@chromium.org>
Date:   Wed Nov 29 10:57:45 2023 +0100

    [inspector] Use v8::Global handle for context in InjectedScript::Scope
    
    We expose one v8-inspector API that allocates InjectedScript::Scope on
    the C++ heap. This won't be allowed in the future due to conservative
    stack scanning.
    
    This CL switches the local handle over to a v8::Global to at least
    unblock CSS. Going forward we should aim to allocate the offending
    "CommandLineAPIScope" only on the stack.
    
    R=bmeurer@chromium.org
    
    Bug: chromium:1505767
    Change-Id: I3b82ce20ebca44cc5afb75eccab4d3b06f2ee422
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068359
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91238}

commit 33e3a2605c7a6a55f07124f2a62e73b6076f5a00
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Nov 29 10:44:29 2023 +0100

    [turboshaft][x64] ISEL: Shorter inst seq for store to external constant
    
    We used to emit:
    
      REX.W movq r8,[rip+0xffffdf16]
      REX.W movq [r8],rdi
    
    And we now emit:
    
      REX.W movq [r13+0x48] (external value (Heap::NewSpaceAllocationTopAddress())),rdi
    
    Bug: v8:12783
    Change-Id: I6f8b7c6dc45847d9913fb1263a5440e3b553a170
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067997
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91237}

commit ad0263ab46ab64dcf3affc00e41e94acfacca112
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Nov 29 17:34:49 2023 +0800

    [mips64][turboshaft] Port InstructionSelector part 1
    
    Currently just make wasm/turboshaft/instruction-selection pass on mips64.
    
    Bug: v8:12783
    Change-Id: If9de0d6c4bae14b9be896b1eb2a42b047d400957
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5069014
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#91236}

commit 3569ffa72c39ec76ea496982256dc8abe6c37af1
Author: Samuel Parker <sam.parker@arm.com>
Date:   Tue Nov 28 15:57:37 2023 +0000

    [turboshaft] Select in BranchConditionDuplication
    
    Change-Id: I1fd813ff2026baaf745f77d8eafc28501e79aa8c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067513
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Martyn Capewell <martyn.capewell@arm.com>
    Cr-Commit-Position: refs/heads/main@{#91235}

commit b77b69c951dd6e3a7b857e9e0929fe458657d0fe
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Nov 29 10:20:14 2023 +0100

    [maglev] Use more compressed values
    
    When maps are only used for comparisons they can be loaded without
    decompression.
    
    When heap constants are used only compressed, then it should be more
    efficient to embed them in compressed form.
    
    Bug: v8:7700
    Change-Id: I1cdc11726b6440a331fea2ce6ccfe72950cfac6c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067477
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91234}

commit e277474a2e2139aa496cdeae24b39aac706fdcee
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Nov 29 10:22:01 2023 +0100

    [turboshaft][x64] ISEL: Better fusion for Uint8 and Uint16 loads
    
    This matches more closely what Turbofan does (and should produce
    faster and smaller code).
    
    Bug: v8:12783
    Change-Id: Idf4f53b3b5e3a4813bfb1b3101c366599c258564
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5068357
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91233}

commit cdb2ec5670634aaab29ad89ef3b498ff2435a3bb
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Nov 29 10:48:55 2023 +0100

    [gm.py] Improve convenience of "out/foo" arguments
    
    (1) Offer bash-completion for any "out/foo" directory that has an
        args.gn file in it.
    (2) When not specifying a build target for a custom output directory,
        default to d8 (same as regular "arch.mode" targets do).
    
    No-Try: true
    Change-Id: I43f27a26eec300f8c15a40011d80239ca7ce6b87
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067998
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91232}

commit 9c63212fe2f9ce73295af7f352618b9abc6320f4
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Nov 28 16:48:30 2023 +0100

    [maglev] Fix Identity nodes flowing into deopts
    
    When Identity nodes flow into deopts we need to reach through them to
    get to the actual value in various places.
    
    Fixed: chromium:1505311
    Change-Id: I2feb2ddc6ffa5705cba8e59fad7b3b3e75ba5295
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067474
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91231}

commit 9fbe6d5b49bfed3c99efa747346ce736360a191b
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 28 15:10:32 2023 +0000

    [sandbox] Introduce TrustedByteArray
    
    This is similar to crrev.com/c/5058810 but for byte arrays. The new
    TrustedByteArray class will for example be used for a BytecodeArray's
    handler_table.
    
    Bug: chromium:1473677
    Change-Id: I05bdaaad8d3e3ab279b0bfa0c3b00ab0fbb3b6d2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062782
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91230}

commit 55713f0dcdc5da616e5f301accf8f8eb0ff9100c
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Nov 28 20:08:10 2023 +0100

    [turbolizer] Replace browser-specific CSS property
    
    Firefox ignores the -webkit-padding-start leading to an awkward large
    left padding on the source view.
    I don't fully get why we would even want a padding there at all, I'd
    probably just set it to 0px but I'm not a designer. :)
    
    Bug: v8:7327
    Change-Id: I42b91176b9a37b837b840cac658f24879cd2574f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067516
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91229}

commit 34ac42f535ea668a8f0a987804a63aeb09fab6a4
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 28 20:22:47 2023 +0100

    [heap] Remove compaction spaces
    
    Compaction spaces are thread-local spaces which were used by GC
    threads for allocating. They were required when V8 did not support
    concurrent allocation in spaces.
    
    Compaction spaces stole pages from their corresponding regular space
    during evacuation and merged all pages back at the end. Concurrent
    allocation allows us to directly allocate in the regular space now
    without moving pages into the CompactionSpace.
    
    In order to allow multiple LABs on a single page for concurrrent
    allocation, LABs for the GC are limited to 32K.
    
    Bug: chromium:1480975
    Change-Id: Iebdf510727519d246eee1074fe0d552f1d54dbfa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062752
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91228}

commit dc95972b42a73c3940cca47d39ac8630cdef7f45
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Nov 28 20:07:15 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/af45952..4ddd07c
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/aa432dc..c65da25
    
    Rolling v8/buildtools/reclient: re_client_version:0.120.1.f75cfb7-gomaip..re_client_version:0.121.0.e622934-gomaip
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/6e6fd64..71fc601
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/0acc468..9e5fc28
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/763198b..6cd38f6
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/b90fa05..c21fd38
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/522ab07..990e9cd
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763124344414320721
    
    Change-Id: I4b3e2d12c36080315e471cdb5fdae866725efb55
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067017
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91227}

commit 24740121f0d503a81b08878acb9ed47f92ba6037
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 24 16:58:30 2023 +0000

    [sandbox] Validate entries in the TrustedPointerTable
    
    We should never have a TPT entry point inside the sandbox as this would
    be unsafe: the supposedly trusted object couldn't be trusted in that
    case. This CL adds some validation to protect against this.
    
    Bug: chromium:1473677
    Change-Id: I66b7c5b83c64f1e7560c60311daba3df1ebff660
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5059388
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91226}

commit c6384d4dbb25f61ded76cc9f7b284f5cf539a6de
Author: Scott Haseley <shaseley@chromium.org>
Date:   Mon Nov 27 20:28:46 2023 +0000

    Deprecate Context::[Get|Set]ContinuationPreservedEmbedderData()
    
    Per-Context continuation preserved embedder data is being deprecated in
    favor of per-Isolate data, which is a better conceptual fit for the main
    use cases (task attribution/inheritance) and should be more performant
    (in cases where it's more expensive to get the context vs. isolate).
    
    This CL also includes a partial revert of crrev.com/c/5006444 to support
    both Context and Isolate versions of the APIs, in line with v8's
    deprecation policy.
    
    Bug: chromium:1351643
    Change-Id: Ibbc4cda32d5cb3c8aa73c3705c51cbf0db28634e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5047146
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Scott Haseley <shaseley@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91225}

commit 3045b9834a7f1debfa55c293f5060f453fc510f1
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Tue Nov 28 08:09:20 2023 -0800

    Report compilation duration to embedder
    
    This change adds two new fields on CompilationDetails to represent the
    time spent in the background and foreground for that compilation. These
    times are the same as the times captured by existing histograms, except
    for background deserializaion, where I didn't see an existing histogram
    so I added a new one.
    
    Change-Id: I20cc08d0db2fe79f69d028d139a839e8fe98f506
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5053793
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#91224}

commit f6bbd65af2bd80b6daa8e266651f24cd48d379b4
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Nov 28 08:22:08 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/b5da0b1..af45952
    
    Rolling v8/buildtools/linux64: git_revision:92e63272dc04ee7cc1eaae2633c25da06e4f9c03..git_revision:7367b0df0a0aa25440303998d54045bda73935a5
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/334071b..ec903cc
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/702ef3a..6e6fd64
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/02b6134..0acc468
    
    Rolling v8/tools/luci-go: git_revision:bd7ce256f73f85cb75c630b40afa382cdf7fcc51..git_revision:1ea45c1829514ff20c476f083462e7b8fdfaf9ae
    
    Rolling v8/tools/luci-go: git_revision:bd7ce256f73f85cb75c630b40afa382cdf7fcc51..git_revision:1ea45c1829514ff20c476f083462e7b8fdfaf9ae
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763169641717927201
    
    Change-Id: Ic0abcdb2d11c35022007c9e7f2580de20ffef256
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5067495
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91223}

commit 62c1f1fc760ad22f4e68d0e51bb35624414edc25
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Nov 28 16:50:13 2023 +0100

    [maglev] Fix array literal access after loop peeling
    
    There is an optimization to not check for overflow when accessing known
    offsets for an array literal. Loop peeling can create constant offsets,
    thus breaking the assumption that any constant offset is known
    in-bounds. Contrary to the initial assumption this can also affect
    accesses that come after the loop itself.
    
    Fixed: chromium:1505355
    Change-Id: Ia2d7117f5ba1e9f5da0177025d60143a7ac9027d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062823
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91222}

commit c11bf63f3b29ef3c5cf4eb0fb91ab28df3f340dd
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Nov 28 16:29:39 2023 +0100

    [turboshaft] LoadElimination: Fix exponential loop revisits
    
    Eliminatable loads in nested loops that got invalidated within the
    loop body could result in 2^n visits of the inner-most loops with n
    being the nesting depth.
    
    This CL fixes it so that any visit of a loop when revisiting the outer
    loop doesn't trigger a new revisit of the inner loop any more.
    
    This means that we still visit inner loops more than twice but the
    inner-most loop will now only be revisited n times instead of 2^n.
    
    Bug: v8:12783
    Change-Id: Ie83790f950cc4d482995564fff46ee492ccdb320
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062781
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91221}

commit 6a0c2b45b1ea64d09e70377e91e00fb571b1ffdf
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 28 10:28:49 2023 +0100

    [heap] Clean up MainAllocator constructors
    
    This CL unifies the MainAllocator constructors for main and background
    threads by always taking a LocalHeap as the first argument.
    allocation_info is now a pointer instead of a reference in order to
    use it as an optional argument in the constructor.
    Allocation observer and pending allocation support is dynamically
    enabled for main thread LocalHeaps.
    
    Having a common constructor for main and background threads also makes
    it possible to unify HeapAllocator::SetupMain and
    HeapAllocator::SetupBackground to remove this duplicated code.
    
    While there exists a second constructor for MainAllocator, that one
    is used by the GC only.
    
    Bug: chromium:1480975
    Change-Id: If69d3aa8ae1be97e5ffbd796dbeb0224c5489b11
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062832
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91220}

commit e4b75314d617fbcfeb91f6dd94ba4fc7b7e79f6a
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Tue Nov 28 17:17:52 2023 +0800

    [riscv] Implement ChangeInt32ToInt64 when input is a load
    
    Change-Id: Ic21d3d26ae1aada790c1ea9c6165750c8ed7a3cc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5066071
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91219}

commit 44482e68ea820b66b93e1863f9ba7d69260256b8
Author: Ludovic Mermod <ludovic.mermod@gmail.com>
Date:   Tue Nov 28 14:16:00 2023 +0100

    [regexp] Adding Captureless Lookbehinds in Experimental
    
    Each lookbehind is compiled as an independent automaton. These automata
    are executed in parallel with the main expression. Upon completing a
    match they write a boolean in a truth table (`lookbehind_table`), reset
    at each new string position. The thread of the expression containing
    the lookbehind checks the truth table and is either discarded or kept
    alive.
    
    This work was supervised by Aurèle Barrière, from SYSTEMF at EPFL.
    
    Bug: v8:14435
    Change-Id: Ic6fb60e57ae499c18bcf4920e312b7023c8e0174
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006443
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91218}

commit c2b1e5429275e85fb9369327a2bfd91dd3b39d93
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 28 13:04:25 2023 +0000

    Reland "[sandbox] Reference Code from InstructionStream via a code pointer"
    
    This is a reland of commit 6aeae8406bf5c94252ef1fb71b98a2286609196a
    
    The race reported by TSan has been fixed by (temporarily) using release-
    acquire semantics when accessing code pointer table entries.
    
    Original change's description:
    > [sandbox] Reference Code from InstructionStream via a code pointer
    >
    > We want to move Code objects out of the sandbox, and for that they
    > should be referenced through trusted pointers. This CL turns the
    > reference from InstructionStream into a trusted pointer. This is not
    > strictly needed for security: the InstructionStream already lives
    > outside the sandbox and so cannot directly be manipulated. However, it
    > is easier to use a trusted pointer here, but we might change this back
    > to a tagged pointer with the trusted cage base in the future.
    >
    > Bug: chromium:1500887
    > Change-Id: I38a65a2aa44118175c6adbf1fb04f4f0a3d4efc6
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013476
    > Reviewed-by: Stephen Röttger <sroettger@google.com>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91205}
    
    Bug: chromium:1500887
    Change-Id: Iafc7965412bf18957a4ef94bf91bfe4922ccae03
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062777
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91217}

commit 5720545c780d1fd6f2c3eeb1dc91ed72e9161ee3
Author: pthier <pthier@chromium.org>
Date:   Tue Nov 28 13:47:53 2023 +0100

    [maglev] Implement polymorphic element accesses
    
    Drive-by: TransitionElementsKindOrCheckMaps owns the storage for
    transition sources (to be consistent with other nodes).
    
    Bug: v8:7700
    Change-Id: I875caab4be34474900fd286b39ea7976da97e5b9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033604
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91216}

commit 4afafeec7796d13577ef1dc6bd0dbf645d71c4bb
Author: Rachael Newitt <renewitt@google.com>
Date:   Tue Nov 28 05:16:55 2023 +0000

    Add Shipped in Chromium value alias field to wasm-api metadata.
    
    The `Shipped in Chromium` alias field allows derivative README types
    to specify a different value for dependencies which are shipped
    differently in standalone projects vs Chromium..
    
    Bug: b/304144749
    Change-Id: Ic13abbf1969350a0f7c5b517c5bc9cd41d02ae60
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5065828
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91215}

commit 20bc7e49e5930cbd695e089d21f356da09ad4e50
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Nov 28 11:45:40 2023 +0100

    [turboshaft] Introduce DisableValueNumbering scope
    
    The BranchConditionDuplicationReducer intentionally adds certain
    duplicate nodes to the graph, because that helps code generation.
    Since the ValueNumberingReducer is running in the same phase, we
    must prevent it from eliminating this duplication, to not defeat
    its purpose. The new DisableValueNumbering scope accomplishes
    that by temporarily disabling the ValueNumberingReducer.
    
    Bug: v8:14108
    Change-Id: Ifad5027dec37f3a3906308d85b343a10dda161cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062841
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91214}

commit 697271e5ef34cf47d94313e4363a71d84509e18a
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Nov 28 11:26:30 2023 +0100

    [turboshaft][wasm] Do not peel loops for non-wasm-gc functions
    
    Loop peeling adds at least 6% compilation time and there is not enough
    progression in linear-wasm benchmarks to justify it. In Turbofan, we
    used to only peel loops which contained certain wasm-gc instructions.
    This was tried but still found too slow. Therefore we completely
    disable loop peeling for non-wasm-gc functions.
    
    Bug: v8:14108
    Change-Id: I85fa5868bd2f0e2a1f144c1958f650af53f6011a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5058591
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91213}

commit ba39e60be588c423ebe6a452501deb71dc63d8f2
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Nov 28 12:13:16 2023 +0000

    Revert "[sandbox] Reference Code from InstructionStream via a code pointer"
    
    This reverts commit 6aeae8406bf5c94252ef1fb71b98a2286609196a.
    
    Reason for revert: Multiple TSAN bots failing for SetJitCodeEventHandler:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20debug/3966/overview
    
    Original change's description:
    > [sandbox] Reference Code from InstructionStream via a code pointer
    >
    > We want to move Code objects out of the sandbox, and for that they
    > should be referenced through trusted pointers. This CL turns the
    > reference from InstructionStream into a trusted pointer. This is not
    > strictly needed for security: the InstructionStream already lives
    > outside the sandbox and so cannot directly be manipulated. However, it
    > is easier to use a trusted pointer here, but we might change this back
    > to a tagged pointer with the trusted cage base in the future.
    >
    > Bug: chromium:1500887
    > Change-Id: I38a65a2aa44118175c6adbf1fb04f4f0a3d4efc6
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013476
    > Reviewed-by: Stephen Röttger <sroettger@google.com>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91205}
    
    Bug: chromium:1500887
    Change-Id: Ib610eb13dc069a5525126a844c4966e77fcac6e7
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062776
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91212}

commit 6b48fa51cc17d17dec7b04d0b124cd65efa76e24
Author: Liviu Rau <liviurau@chromium.org>
Date:   Tue Nov 28 12:29:16 2023 +0100

    [test262] Add test262 service account to author bot allow list
    
    No-try: true
    Bug: v8:14002
    Change-Id: Ia034a57797d5fc594d8ffd5280442dffee978042
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062774
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91211}

commit 11f06956d7363088b525d430be158adc2d26ca26
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 28 09:53:31 2023 +0000

    [sandbox] Reference Code from RegExp through its wrapper
    
    For moving Code objects out of the sandbox, we must reference them
    through a code pointer (i.e. a pointer table indirection). This CL does
    so for the reference from compiled JSRegExp objects.
    Note that there is room for performance optimizations here: currently we
    use the Code's wrapper object as the reference needs to be a tagged
    pointer. However, in the future we could refactor the RegExp object to
    use a code pointer instead, in which case we could lookup the Code's
    entrypoint with a single memory access into the code pointer table,
    similar to how we lookup the entrypoint for JSFunction objects.
    
    Bug: chromium:1500887
    Change-Id: Ic247580f15204c889635705da92044397d65a5c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5056923
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91210}

commit 8951da65613e08237a0ca04a31b7b9eb8d18a732
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Nov 28 10:24:39 2023 +0100

    [wasm][turboshaft] Add tests with refString args for some well-known imports
    
    The StringToLowerCase, StringIndexOf and ParseFloat well-known imports
    get stringRefs, i.e. nullable string ref, as parameters. This CL adds
    test cases for cases when the parameters are non-nullable, i.e.
    refStrings.
    
    Bug: v8:14108
    Change-Id: Ia92384c4c6a106ec2ff65e773245c28ea50d383d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062930
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91209}

commit ffd31dc022c7e355768a4d4d3acf4fef41dcbc0b
Author: jiepan <jie.pan@intel.com>
Date:   Tue Oct 31 19:24:08 2023 +0800

    [x64] Optimize encoding of op al,imm8
    
    The instruction size is one byte shorter
    
    Change-Id: I245398b1090284903b134f521e36c9a34a03f78f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989245
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Jie Pan <jie.pan@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91208}

commit a3853a3901706d0079265335cfb3f1f6ec3cbfd6
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Nov 27 18:46:41 2023 +0100

    [turboshaft][wasm] Load-eliminate AssertNotNull
    
    This patch improves the WasmLoadEliminationReducer's handling
    of AssertNotNull in two ways:
    (1) Treat AssertNotNull as a "load-like" instruction, and eliminate
        duplicate copies of it that process the same value.
    (2) "See through" AssertNotNull instructions when resolving base
        objects of loads.
    It also already applies part (2) to WasmTypeCast instructions, but
    leaves part (1) for them as future work.
    
    This patch also adds a copy of RequiredOptimizationReducer's Phi
    simplification to WasmLoadElimination, which often unlocks further
    opportunities for load elimination (and vice versa, so we cannot
    solve this via phase reordering, we need to interleave both steps).
    
    Bug: v8:14108
    Change-Id: Iea5eaa9e44d6ae5012f0392858b0472e1d6ade28
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062838
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91207}

commit 57d33f2dd3945069f7004f74f5410ca02224b378
Author: Stephen Roettger <sroettger@google.com>
Date:   Tue Nov 28 09:50:05 2023 +0100

    [code] fix IStream constant_pool accessor
    
    Change-Id: Iba288daf1e649e0fa89eaa00afd2d08c8accb20a
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062753
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91206}

commit 6aeae8406bf5c94252ef1fb71b98a2286609196a
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 28 08:36:38 2023 +0000

    [sandbox] Reference Code from InstructionStream via a code pointer
    
    We want to move Code objects out of the sandbox, and for that they
    should be referenced through trusted pointers. This CL turns the
    reference from InstructionStream into a trusted pointer. This is not
    strictly needed for security: the InstructionStream already lives
    outside the sandbox and so cannot directly be manipulated. However, it
    is easier to use a trusted pointer here, but we might change this back
    to a tagged pointer with the trusted cage base in the future.
    
    Bug: chromium:1500887
    Change-Id: I38a65a2aa44118175c6adbf1fb04f4f0a3d4efc6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013476
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91205}

commit 515b1e4fe2d464ed31b4c061ff11dc23793ad6ea
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 28 09:23:49 2023 +0100

    [heap] Use HeapAllocator in LocalHeaps for managing LABs
    
    HeapAllocator is the class that manages all LABs for the main thread.
    However, background threads so far had all their LABs as fields on
    LocalHeap. With this CL LocalHeap now also manages its LABs with
    the HeapAllocator class.
    
    The main thread had potentially two distinct LABs in the old space.
    One in Heap::heap_allocator_ and one through its LocalHeap. This CL
    also removes this by making Heap::heap_allocator_ a pointer to the
    HeapAllocator instance in the main thread LocalHeap.
    
    Note that LocalHeap still uses a separate implementation for
    LocalHeap::AllocateRawWith. We can also merge this method with
    Heap::AllocateRawWith as a follow-up.
    
    Bug: chromium:1480975
    Change-Id: I3d4c75a6802151b52b41bd5cbf5dbcc954d4c28c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057609
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91204}

commit e46e889a83a01dfadf754e9e41f5fadd5cf6e862
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Sun Nov 26 20:21:07 2023 +0100

    Elide temporary allocation in string lookup for small strings
    
    According to the Instruments profile from Speedometer2, this is the
    third hottest PA allocation.
    
    Change-Id: I9bad8a4a0545d17a8f5792e3fe28ed8ebe683cdb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5061228
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91203}

commit 59cb29164e07502156f55f2871166c1482dfcfc2
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Nov 27 20:19:17 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/da2f70d..b5da0b1
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/ed2855f..aa432dc
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/3747d5b..334071b
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/f0228fa..702ef3a
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/9c44fe5..02b6134
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/9e4e987..763198b
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/e6a7fd8..b90fa05
    
    Rolling v8/third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/22124f5..7b4829c
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/1717dff..522ab07
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763214940068167809
    
    Change-Id: I870eaeb07137b5b8104773395710950785325de7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5063696
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91202}

commit 82c0fbd0f66875c693502e9357939965d4c3034e
Author: Timothy Pearson <tpearson@raptorcs.com>
Date:   Fri Oct 6 17:55:27 2023 +0000

    [ppc] Add RelocInfo::target_object() heap DCHECKs present on x64/arm64
    
    Change-Id: I60ce606d6e44e44dc4e17d4a0c2f791ca11d13e4
    Signed-off-by: Timothy Pearson <tpearson@raptorcs.com>
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4917706
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91201}

commit 4155cb683801e91237d4e92e97c0ea8ec2095145
Author: Timothy Pearson <tpearson@raptorcs.com>
Date:   Fri Oct 6 18:43:35 2023 +0000

    [authors] Add Raptor Computing Systems as author
    
    Change-Id: Ia8ef49b0d8553a42ef6d23bc8924dc38a0367f18
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4917703
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91200}

commit 30725917f8f62c0d82b1b46b0e558e9639f6ec8d
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 24 16:57:49 2023 +0000

    [sandbox] Only create the TPT when the sandbox is enabled
    
    Previously, we were allocating a trusted pointer table (TPT) when
    pointer compression was enabled but the sandbox disabled, even though it
    would never be used in that scenario. Now we only create a TPT when the
    sandbox is enabled.
    
    Bug: chromium:1473677
    Change-Id: Iebf863421f042b2dd38c03260a596b971e1bf61b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057561
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91199}

commit f069b82296eea932b4c0df670ff0d067e5e83a1f
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Thu Nov 2 10:46:24 2023 -0700

    Tell the embedder about the Isolate compilation cache
    
    This change adds a way that the embedder can observe whether V8 used
    data from its in-memory compilation cache when compiling a script. My
    short-term goal is to surface this information in the "Compile Script"
    events in the devtools timeline. Longer term, this pattern may allow us
    to fix the TODO comment on CacheBehaviour, which says that we should
    push such data back up the API so that Blink can be responsible for
    logging it. I propose using the existing Source and StreamedSource
    classes to contain the data which V8 is sending to Blink, because the
    API functions for compilation already have many parameters and I'm
    reluctant to add another.
    
    Bug: v8:12808
    Change-Id: Ibcd81007024d6502e32e5fcd64022fba439ec7b4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4998430
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#91198}

commit fc1e0b90c3dae288a78d35280f92a6b04a7af7e6
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Nov 27 08:18:35 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/e81509d..da2f70d
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/25b4354..9c44fe5
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/9fbc780..1717dff
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763260238600911009
    
    Change-Id: Ief7d7d34c017665d212951330be2b4f5b82a95bc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5063788
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91197}

commit 5181899c463c3e5bd3005e85adc0cb838b30d0ae
Author: Stephen Roettger <sroettger@google.com>
Date:   Mon Nov 27 16:42:27 2023 +0100

    [code] istream relocations independent of code obj
    
    The InstructionStream requires access to two fields that live on the
    code object during relocation:
    1) the constant pool offset
    2) the instruction size for icache flushing
    
    This CL adds a copy of the constant pool offset to the istream and uses
    the body_size for flushing instead (we just flush the metadata too).
    
    Change-Id: I9cde7ff1474e063aaf7083ac4242bbec8ec087fc
    Bug: v8:13355
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062828
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#91196}

commit 0dbdff65b2242253958fd1d11fd60cd8df917098
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Mon Nov 27 14:46:55 2023 +0100

    [fastcall] Simplify AnyCType and ensure trivial ABI
    
    This CL simplifies AnyCType, which is used for the purpose of testing
    fast API calls, changing it from a struct containing a single union to
    just a union. It also ensures that this type has trivial ABI (as
    required by the implementation of fast API calls) in the unlikely case
    that v8::Local is not trivially copyable; this happens in debug builds
    with v8_enable_local_off_stack_check=true.
    
    Bug: v8:13270
    Change-Id: I655b8e416289b7d749b83c7705137ab069a61d39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062928
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91195}

commit 0f4b6c79bba2415e3d90292e4f60f5be55892d1d
Author: pthier <pthier@chromium.org>
Date:   Mon Nov 27 13:38:12 2023 +0100

    [maglev] Fix cached array length in forEach (holey)
    
    For holey arrays forEach creates a branch to check for the hole value.
    This branch didn't create a Phi for the cached the array length.
    
    Bug: chromium:1505224
    Change-Id: I30ec168283627e2bf74c26a1977834488fe8a9e4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062389
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91194}

commit 7a021bcb0ebb4eb67e1596e894be1437ec31c821
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Mon Nov 27 15:50:03 2023 +0100

    [turboshaft][wasm] Improve containers in graph generation
    
    Use `SmallZoneVector` over `std::vector` and `base::SmallVector`. This
    speeds up Wasm Turboshaft graph building by around 30% when eagerly
    compiling PSWeb (~50MB of code).
    
    Bug: v8:14108
    Change-Id: I68938455e5037c2cd4d1f8edc35ce14bb00786ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054640
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91193}

commit 513c6176476ee48377d9adbea4078d7fae876fbf
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Nov 27 12:26:50 2023 +0100

    [turboshaft][wasm] Limit nested inlining
    
    This CL adds a kMaxNestedInliningDepth that prevents us from inlining
    too greedily and too deep.
    Without it, a function that calls itself in a loop can be inlined
    recursively many times which can lead to the WasmLoadElimination
    needing exponential loop revisits resulting in not only long compile
    times but also potential out of memory situations due to the
    SnapshotTables.
    
    Bug: v8:14108
    
    Change-Id: Idf5e696f3c2b9fff22e49bd1538f78d243a973f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057562
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91192}

commit 34244b670bfef91809ca101b0dd76592d1e5c826
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Nov 27 14:46:32 2023 +0100

    [baseline] Simplify baseline tracing
    
    The current tracing flags are confusing, and one, most often
    than not, want both batch and concurrent compilation tracing
    enable at the same time.
    
    --trace-baseline only worked on single threaded mode and it would
    be silent otherwise.
    
    This removes --trace-baseline-concurrent-compilation, and
    it creates a weak implication from --trace-baseline to
    --trace-baseline-batch-compilation.
    
    Change-Id: I31f95cde25103a97c896111f98d056e078c933a3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5056832
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91191}

commit 8074952a2a6bb804c5028e37138da05c09ac208c
Author: Cheng Zhao <zcbenz@gmail.com>
Date:   Mon Nov 20 17:08:56 2023 +0900

    [build] Add v8_generate_features_json action
    
    For embedders like Node.json and Electron, they provide V8 feature flags
    to tools like node-gyp and cmake-js for building native modules.
    Currently the feature flags are manually synchronized in some scripts
    and things often break when V8's GN configurations introduced new
    features.
    
    By adding this action to V8, I can remove the manual synchronization of
    feature flags, and this change is required for Node.js to adopt GN as a
    secondary build system.
    
    Eventually I would like to use the v8-gn.h approach introduced by
    crbug.com/v8/11292 in the ecosystem of Node.js modules, but that will
    take a rather long time and for now this approach can keep backward
    compatibility with existing Node.js module toolchains.
    
    Bug: v8:11292, v8:13803
    Change-Id: I72b0cdca2449aa40b5a8667248eea9f8c99fb8e4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040612
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91190}

commit 316359279f33c1e88f3bbc391ec9aae344320834
Author: Cheng Zhao <zcbenz@gmail.com>
Date:   Wed Nov 22 17:21:29 2023 +0900

    [build] Expose mksnapshot to embedders
    
    Electron provides V8's mksnapshot binaries to developers.
    
    Change-Id: I915ca2a859eaadffcfd6c9cb8cfb20aa8c8d9156
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5052522
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91189}

commit 9b2edbdf31b21e9036b7e8abb4c244c3307f4db4
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 24 14:08:11 2023 +0000

    [sandbox] Introduce TrustedFixedArray
    
    This is similar to a FixedArray, except that it lives in trusted space.
    This will for example be used for DeoptimizationData. For now, any
    compressed pointer stored in a TrustedFixedArray uses the main pointer
    compression cage base, but this will also likely change in the future.
    It may also be the case that we need two variants of these arrays: one
    that uses the main cage base (e.g. for constant pools) and one that uses
    the trusted cage base (e.g. for deoptimization data).
    
    Bug: chromium:1473677
    Change-Id: Iebf018f041c83d900b53eec572dbcc2fe286c6be
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5058810
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91188}

commit 2f1a534549405587d5314ebe9d12fac41aa38af4
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Nov 27 13:05:20 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 11
    
    This CL implements the remaining SIMD instructions for the
    turboshaft instruction selection.
    
    Bug: v8:12783
    Change-Id: I6369ad14dc9789cc06d795d881e72cdd9647469d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057289
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91187}

commit 5bea27153266ae8272882978f20f42276d8a7bbd
Author: Cheng Zhao <zcbenz@gmail.com>
Date:   Mon Nov 27 20:02:16 2023 +0900

    [build] Correctly expose public symbols with v8_expose_public_symbols
    
    This commit does 2 things:
    
    1. Define BUILDING_V8_SHARED when v8_expose_public_symbols is set to
       true, which is the standard way to expose public V8 symbols for
       embedders like Node.js and Electron.
    2. Add BUILDING_V8_SHARED_PRIVATE and USING_V8_SHARED_PRIVATE macros
       which control how private V8 symbols are exposed. Embedders do not
       need to expose those symbols and hiding them can reduce the binary
       size of `node.exe` and `node.lib`.
    
    Bug: v8:8840, v8:13803
    Change-Id: I55b264af8030422a5a1f5d9e160de4578f7e734c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5052302
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91186}

commit 52b7b90091247afdcbd0995a9ad23c5efe847761
Author: Joyee Cheung <joyee@igalia.com>
Date:   Wed Nov 22 20:59:15 2023 +0100

    [flags] skip --predictable ignore checks in fuzzing
    
    This check is only here to ensure that we can generate reproducible
    code cache for production builds, we don't care as much about the
    reproducibility in the case of fuzzing.
    
    Bug: chromium:1503074
    Change-Id: I9f4b26dca79102110be55a15c9694c6cd4529d56
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054323
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91185}

commit 94cdd7e3a44f90136a3e853c2e2096aca2d37104
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Nov 27 12:51:25 2023 +0100

    [arm64] Zero-initialize stack parameters
    
    This potentially fixes a GC crash we are seeing.
    
    R=omerkatz@chromium.org
    
    Bug: chromium:1505048, chromium:1504962
    Change-Id: I3eb4cbadb24575fbbfe7f628af3d88edf34f4ff0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062388
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91184}

commit 80ba89a6576381725af955960fc8b5fbb6d6430b
Author: Omer Katz <omerkatz@chromium.org>
Date:   Fri Nov 24 14:58:36 2023 +0100

    [heap] Add neg-neg implication from parallel to concurrent marking
    
    It is currently technically possible to use concurret marking without
    parallel marking. However, the full GC will only finish concurrent
    marking when parallel marking is also used.
    Rather than add special handling for these cases, we can prohibit using
    concurrent marking without parallel marking.
    
    Bug: chromium:1504030
    Change-Id: Ibb2cb1a367519c8c948f8c6d6db90d0790bc962d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054648
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91183}

commit 7e455d849cd8986796328d41cfcc804c20891698
Author: Cheng Zhao <zcbenz@gmail.com>
Date:   Tue Nov 21 11:34:29 2023 +0900

    Replace _WIN32/_WIN64 macros with V8_OS_WIN
    
    According to MSDN:
    _WIN32 Defined as 1 when the compilation target is 32-bit ARM, 64-bit
    ARM, x86, or x64. Otherwise, undefined.
    _WIN64 Defined as 1 when the compilation target is 64-bit ARM or x64.
    Otherwise, undefined.
    
    So _WIN32 is guaranteed to be defined when _WIN64 is defined, and the
    V8_OS_WIN should be used in place of _WIN32.
    
    Change-Id: Ic40670d4ecf9d82d4d49f5ed29d833a14383108f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029382
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91182}

commit bc55b3e286e7d8a6e6a4e2fffe8fdfefb176bc9c
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Nov 27 11:32:04 2023 +0100

    [wasm][turboshaft] Add well-known import StringToLowerCase for imported
    strings
    
    Bug: v8:14108
    Change-Id: I5fcd0f6f0e3a3400438fc9b72ac0b237cc50b25f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054647
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91181}

commit a570675d20ce4d8dcac80a0dbcfc454e113503d4
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Nov 27 10:58:23 2023 +0100

    [turbofan] Handle kDisallowSpeculation when optimizing length accessor
    
    We must not optimize ArrayBufferViewByteLengthAccessor during
    Turbofan's JSCallReducer when speculation is disabled, because we
    might not have a FeedbackSource and without that we cannot insert
    proper map checks.
    
    Bug: chromium:1501679, v8:11111
    Change-Id: I5cde6fbf27e9a4c75435b19f2bf9c3f56da775ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5058593
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91180}

commit 2671610a62a0fd39a29269f9f783e8bd167524a3
Author: Simon Zünd <szuend@chromium.org>
Date:   Mon Nov 27 10:16:21 2023 +0100

    [inspector] Use null prototype when wrapping the REPL mode result
    
    REPL mode wraps the evaluation result in an object literal to break
    promise chains (e.g. evaluating "Promise.resolve(42)" should yield
    the promise, not "42" on the DevTools console).
    
    The object literal created by the parser did use the normal
    "Object.prototype", which is a problem if the website messes with
    it. This CL sets the prototype to "null".
    
    Fixed: chromium:1504799
    Change-Id: I622b38d5c66404d5cc67e58385e45589eefa3337
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5062008
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91179}

commit d3d92c89c52b880f1d0dce7b5d3bbf3a3add3dd3
Author: Marja Hölttä <marja@chromium.org>
Date:   Fri Nov 24 15:47:55 2023 +0100

    [maglev] Fix near jumps w/ --deopt-every-n-times
    
    In CheckMaps, we had experimentally determined that with 10
    maps we can still use near jumps.
    
    However, when --deopt-every-n-times is on, we end up
    generating more code, so this doesn't hold.
    
    Bug: chromium:1504702
    Change-Id: Icf31d1ee3d282aa74ed50f1a0b0e6a2abfae478a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5058895
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91178}

commit 3bb28f80bff6dc31e8f44939264f701798d0fc21
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon Nov 27 09:34:42 2023 +0100

    Reland "[heap] Switch to MainAllocator for shared space promotion"
    
    This is a reland of commit 75f956b6f3121d8870b96b515ce85e8f8c5e28b0
    
    This version of the CL fixes a data race caused by adding a page
    without synchronization. This branch was only supposed to be run
    by compaction spaces. The fix here is to simply use
    is_compaction_space() again.
    
    Original change's description:
    > [heap] Switch to MainAllocator for shared space promotion
    >
    > This CL switches the last use case of ConcurrentAllocator to
    > MainAllocator. The tricky thing about this particular use case is
    > that while the MainAllocator instance is used for GC, we are
    > actually not collecting this particular space in the case of
    > worker isolates and shared space.
    >
    > This CL solves this by introducing a new method in_gc_for_space()
    > that only returns true if this LAB is used for GC and the space
    > is currently collected as well. Some use cases of in_gc() had to be
    > switched to in_gc_for_space() for correctness.
    >
    > Alternatively one could argue that the allocator shouldn't even be
    > considered to be in a GC. However, we likely don't want shared GCs
    > to interrupt local GCs. So we would anyways need some kind of GC flag
    > for those allocators to prevent that from happening. There are
    > other smaller issues as well like that we don't have LocalHeaps for
    > GC threads that make this harder as well.
    >
    > Bug: chromium:1480975
    > Change-Id: I7c707402e928e95cb092c4c183ee69cbae285f9d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057489
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91171}
    
    Bug: chromium:1480975
    Change-Id: I8d9bf85875406668cd7a1e4df10cd346df85b0e7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5060292
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91177}

commit 5f595bdd36cc3dd1caea7f6b67e0bf5b71ddc61e
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Nov 24 15:26:20 2023 +0100

    [turboshaft] Re-enable parts of the disabled CSA pipeline changes (2)
    
    The initial submit of the CSA pipeline in Turboshaft caused some
    crashes (outside of running the CSA pipeline) which we cannot explain.
    This CL is part of an attempt to incrementally re-enable the changes
    of https://chromium-review.googlesource.com/c/v8/v8/+/5030398 to
    find the crash-causing change.
    
    
    Bug: v8:12783, chromium:1489500
    Change-Id: I779e8731bb1b3e524a279fce6f357a94bf2c84c9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054649
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91176}

commit 56d0d218f1435f219256e4eb6c3ad48b94716e92
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Nov 27 11:20:22 2023 +0800

    [loong64][turboshaft] Port InstructionSelector part 1
    
    Currently just make wasm/turboshaft/instruction-selection pass on loong64.
    
    Besides fix mips64 arch name typo in test/mjsunit/mjsunit.status.
    
    Bug: v8:12783
    Change-Id: I630f42b08e617f599a2547c80724c3a37db4ed5a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055984
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91175}

commit 1af11047be8bfec3706f627dd5395b61dee922c5
Author: Fanchen Kong <fanchen.kong@intel.com>
Date:   Tue Nov 28 03:17:39 2023 +0800

    Lower NumberEqual with boolean type inputs to Word32Equal
    
    With this change (Speculative)NumberEqual with boolean type inputs will be lowered to Word32Equal, instead of Float64Equal.
    
    This change improves the performance of the following micro-bench by ~10%.
    
        function formatNum( num ) {
          if( num == 0 ) return 0;
          var posi = true;
          if( num < 0 ){
            posi = false;
            num = -num;
          }
    
          var ret = Math.sqrt(num);
    
          if( posi == false ) ret = -ret;
          return ret;
    
        }
    
    Change-Id: I75fb84c9fb5c80f126052bdbe5f89900e4d9e648
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5061590
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Fanchen Kong <fanchen.kong@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91174}

commit 3f3e27d51ebca155b92cea0977a078831dc07b0a
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon Nov 27 07:37:09 2023 +0000

    Revert "[heap] Switch to MainAllocator for shared space promotion"
    
    This reverts commit 75f956b6f3121d8870b96b515ce85e8f8c5e28b0.
    
    Reason for revert: Seems to cause data races.
    
    Original change's description:
    > [heap] Switch to MainAllocator for shared space promotion
    >
    > This CL switches the last use case of ConcurrentAllocator to
    > MainAllocator. The tricky thing about this particular use case is
    > that while the MainAllocator instance is used for GC, we are
    > actually not collecting this particular space in the case of
    > worker isolates and shared space.
    >
    > This CL solves this by introducing a new method in_gc_for_space()
    > that only returns true if this LAB is used for GC and the space
    > is currently collected as well. Some use cases of in_gc() had to be
    > switched to in_gc_for_space() for correctness.
    >
    > Alternatively one could argue that the allocator shouldn't even be
    > considered to be in a GC. However, we likely don't want shared GCs
    > to interrupt local GCs. So we would anyways need some kind of GC flag
    > for those allocators to prevent that from happening. There are
    > other smaller issues as well like that we don't have LocalHeaps for
    > GC threads that make this harder as well.
    >
    > Bug: chromium:1480975
    > Change-Id: I7c707402e928e95cb092c4c183ee69cbae285f9d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057489
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91171}
    
    Bug: chromium:1480975
    Change-Id: Ib30d9637f374ba833d1c4d928e5140cdcb451976
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5061229
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91173}

commit 57c865a14330da93445f3febe6d233852a1dae50
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Nov 27 10:48:26 2023 +0800

    [riscv][turboshaft] Merge EqualOp into ComparisonOp
    
    Change-Id: I3b8a8846aafd1ba827c6996158a220fd101274c1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5061589
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91172}

commit 75f956b6f3121d8870b96b515ce85e8f8c5e28b0
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 24 22:03:10 2023 +0100

    [heap] Switch to MainAllocator for shared space promotion
    
    This CL switches the last use case of ConcurrentAllocator to
    MainAllocator. The tricky thing about this particular use case is
    that while the MainAllocator instance is used for GC, we are
    actually not collecting this particular space in the case of
    worker isolates and shared space.
    
    This CL solves this by introducing a new method in_gc_for_space()
    that only returns true if this LAB is used for GC and the space
    is currently collected as well. Some use cases of in_gc() had to be
    switched to in_gc_for_space() for correctness.
    
    Alternatively one could argue that the allocator shouldn't even be
    considered to be in a GC. However, we likely don't want shared GCs
    to interrupt local GCs. So we would anyways need some kind of GC flag
    for those allocators to prevent that from happening. There are
    other smaller issues as well like that we don't have LocalHeaps for
    GC threads that make this harder as well.
    
    Bug: chromium:1480975
    Change-Id: I7c707402e928e95cb092c4c183ee69cbae285f9d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057489
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91171}

commit e4a91547165bf11a219c002e4e1c5826b87a025e
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Nov 26 20:06:46 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/8b922e8..e81509d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763305537690716433
    
    Change-Id: Id093c63112c4efc406a5b9c47fd391414d8cb3a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5060335
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91170}

commit a8412b690cfa800956339af0b7912081a495c13f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Nov 26 08:11:47 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/ef503d1..ed2855f
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/0ec946f..9e4e987
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763350836329289297
    
    Change-Id: I18ecc57ebb9c247dc0379be51ac0122c60d337d2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057541
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91169}

commit c17fffb80d99774e6ba8cea8ac104f57cdd025ec
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Nov 25 08:06:42 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/06a9897..ef503d1
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/c03569a..0ec946f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763441432692993633
    
    Change-Id: I07815218ce2ffdc5fc09659fe8841f9ebbbd70c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055521
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91168}

commit 7fbbf93ea879863c1b92ef1a829190b3a31e544c
Author: Anton Bikineev <bikineev@google.com>
Date:   Fri Nov 24 10:34:32 2023 +0100

    utils: Try SIMD reduction based on vpmaxq
    
    The reduction should be less expensive than the one based on vminvq.
    
    Change-Id: I8f1f8f181c2fccc754007a7715de32afb03790af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5058808
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91167}

commit a77f9590b3ff24127c89ffd0eb7d7fd4ec6bed4c
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Nov 24 17:14:31 2023 +0100

    [wasm][turboshaft] Fix typos
    
    Change-Id: Id4140cd934ea37340a15acae8ee110154eb97236
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057613
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91166}

commit 747a3db81968f113587c8443bdfff8d5576c3ef7
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Nov 24 08:06:32 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/6355ffc..8b922e8
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/2a8d2c5..06a9897
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/4b348d3..c03569a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763532027277386497
    
    Change-Id: I12d08bc8049b3356363f029ee78be5b0cfc3fb54
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054415
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91165}

commit c56336a064ed11369f4c1b48e49c806e8fd46ceb
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Nov 24 16:02:21 2023 +0100

    [turboshaft] Merge EqualOp into ComparisonOp
    
    Bug: v8:12783
    Change-Id: Ieb3fbab89fc39ab9e1e1313e86b9f27491e3a55f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5058811
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91164}

commit 35b6a5c48ae8d6a864657d07e4867e22d7148c55
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 24 15:35:57 2023 +0100

    Exclude SIMD from no-wasm builds
    
    This fixes compilation on arm64 no-wasm builds and generally makes
    no-wasm builds smaller by excluding all SIMD operations.
    
    R=mliedtke@chromium.org
    
    Change-Id: Iad1592ef388c5e92b33f51e27c05e7d1f5d994ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057488
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91163}

commit e554aca5b46dc49bab0670b0c9527aea8a2c724f
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 24 14:45:42 2023 +0100

    [heap] NotifyPossibleGarbage() requires incremental marking
    
    This CL introduces early bailout in NotifyPossibleGarbage() to do
    nothing with incremental marking disabled. This fixes a flaky test
    failure in RuntimeCallStatsTest.ApiGetter.
    
    Bug: chromium:1480975
    Change-Id: I989ade068130f3c8e2a7ed67245755347ac266e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5058893
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91162}

commit 1f93f101ac5e2ba8fba1af6c37e75572d2a6ccba
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 24 13:24:44 2023 +0000

    [sandbox] Align the trusted range at 4GB
    
    We don't want trusted space to be allocated within the first 4GB of the
    address space as this can be problematic both for security and
    correctness, see the added comment. To achieve that, we now simply
    require 4GB alignment of the trusted range. This may anyway later be
    required if we want to also map the read-only space into the trusted
    range so that the compressed references between RO objects are valid.
    
    Bug: chromium:1504934, chromium:1473677
    Change-Id: Ie671ae627bac20a9b93c632de19aaae55ca3a593
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054646
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91161}

commit 3ac31d5e8880355a17c76ef9adab8da6aa5114b5
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Nov 24 14:07:31 2023 +0100

    [maps][snapshot] Fix serialization of contextful meta maps
    
    The serialization machinery does not support forward references in
    the map slot, i.e. when serialization of a map's map could cause
    serialization of the map itself.
    However with contextful meta maps this could potentially happen
    because of the following reference chain:
      MAP -> meta map -> NativeContext -> ... -> MAP
    
    We break this cycle by deferring serialization of the meta map's
    native context.
    
    Bug: chromium:1495743, v8:14460
    Change-Id: I125cf7a6eedb085c26f27b3a7037088f92cf00b4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054540
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91160}

commit 85fa9de60a6407ea398a047f5a2406a7fcf82278
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Nov 24 14:17:12 2023 +0100

    [tagged-ptr] Port Oddball to C++ definition
    
    Oddball and its subclasses are the first to be ported to be subclasses
    of HeapObjectLayout.
    
    This introduces several new concepts:
    
      * UnalignedDoubleMember for double fields with tagged alignment,
      * Using friends for allowlisted offsetof instead of kFieldOffset
        constants,
      * An ObjectTraits trait for defining the BodyDescriptor,
      * An OffsetsForDebug struct in the postmortem metadata generated file,
        so that something can be made a friend for offsetof there,
      * A ForHeapNumberOrOddballValue access builder, which bottlenecks the
        static assert that HeapNumber::value and Oddball::to_number_raw have
        the same offset,
      * New write barrier overloads which support passing in a
        HeapObjectLayout subclass + a pointer to a TaggedMember,
      * Various other specializations and overloads to make this work
        (notably, comparisons of raw HeapObjectLayout* vs Tagged<Foo>).
    
    Bug: v8:12710
    Change-Id: Id0e58cccd7cd050b4e42449b9ce2ff6345ab9d61
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4872543
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91159}

commit ba79c6b0c7b5b396deb2a2ab6a2ff7d7f7742b7a
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Nov 24 10:21:18 2023 +0100

    [maglev] Fixed cached array length in forEach
    
    The forEach inlining checks that the length of the array being iterated
    doesn't decrease (so that the index starts going out of bounds), but
    allows the length to increase (to avoid unnecessary deopts if the
    callback appends to the array).
    
    However, the array length is still allowed to _change_, which means that
    the cached array length (for load elimination) must be a variable
    (potentially a Phi) rather than keeping the original length.
    
    Bug: chromium:1504982
    Change-Id: Ib0f4349579c2a6848f7cff889bc8a52834225997
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5058590
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91158}

commit daa5aaf03bc3610ec5560c7315adb09dc46fd636
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Nov 24 11:50:57 2023 +0100

    [wasm][turboshaft] Add well-known import StringIndexOf for imported
    strings
    
    Bug: v8:14108
    Change-Id: I51535b3c206a670d725335cd22d2452f3a847b77
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5052842
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91157}

commit ed2de5d592a0229b34be969d3f40742f47c959d4
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 24 10:03:54 2023 +0100

    [heap] Introduce GC flag for optimizing for battery
    
    This CL introduces the new method Heap::ShouldOptimizeForBattery()
    which can be used to check whether the GC should optimize for
    battery now. Right now the only way this flag can be enabled is with
    the new command line flag --optimize-gc-for-battery. In the future
    this method will likely check a global battery mode state as well.
    
    When this flag is enabled, concurrent marking and parallel scavenge
    is restricted to a single thread. The idea here is that those
    GC phases require per-object synchronization and are thus believed
    to have higher overhead compared to phases that operate on a per-page
    granularity. cppgc will be addressed in a follow-up CL.
    
    Bug: v8:13842
    Change-Id: Ifb1b044c9593f81054b23eea7fe3097760887deb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046673
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91156}

commit f42d949a4d66bf3a97911e4216f88d8c974432d8
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Fri Nov 17 14:38:48 2023 +0800

    [turboshaft] minor fix for store store elimination reducer
    
    
    Bug: v8:12783
    Change-Id: I90d9a85e321b56fad1713054dcd4df8e0c5b0b91
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5037926
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Cr-Commit-Position: refs/heads/main@{#91155}

commit 32dd216e12ae725e406a7d307281c3649d19f882
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Nov 22 22:39:51 2023 +0100

    [wasm] Fix switching to the central stack on arm64
    
    Do not change the stack start now that runtime calls are always expected
    to be executed on the central stack on arm64.
    
    R=nikolaos@chromium.org
    
    Change-Id: I055f73d15c1b4b672f6d6131c359811833c99b05
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054543
    Auto-Submit: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91154}

commit 13a14ca96037793631f38b92118b1d08002da0c1
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Nov 23 14:51:26 2023 +0100

    [wasm] Don't cache memory size of growable shared memory
    
    With this CL the memory size of growable shared memory does not get
    cached anymore. The cache would have to be invalidated on stack checks
    that handle interrupts, and this is difficult to implement at the
    moment. Caching the memory size for growable shared memory does not seem
    important at the moment, because it is only relevant on multi-threaded
    apps on 32-bit platforms, which by itself is not a high-priority
    combination.
    
    This CL also removes the lowering of stack checks during graph
    construction.
    
    Bug: v8:14108
    Change-Id: Ic3d21b72e3b94140d5b1f27b615d4e883dfb1bd0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5056833
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91153}

commit b99784d2e75aa63790a1ff2b3e274abf6b4ccd25
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Nov 23 20:17:00 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/2cde4f3..6355ffc
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/b80aa26..f0228fa
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/3715938..e6a7fd8
    
    Rolling v8/third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/5daffc7..22124f5
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763577328762124097
    
    Change-Id: I6731a2e23687a44af951f288b02b33e244a749e3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5056232
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91152}

commit 63281106544ab301fd9e860abccd158c15fcc7be
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Nov 22 17:39:17 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 10
    
    Bug: v8:12783
    Change-Id: I674dd4b9c8e0e4ac94dda832ed6ff2472f12a66a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054537
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91151}

commit af85001ec70ef755b69b2787fa83c64984465b93
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Nov 23 13:00:00 2023 +0100

    [api][handles] Strengthen the test for off-stack handles
    
    Objects of type v8::Local<T> and internal::DirectHandle<T> must be
    stack-allocated. In debug builds (and with a compile-time flag, for
    the case of v8::Local), there is a check to enforce this. This CL
    strengthens this check, enforcing it also in the case of these
    objects' copy constructors.
    
    As a result, in such debug builds these handles become not trivially
    copyable. This works correctly in Clang but requires the trivial_abi
    attribute; the checks in the copy constructors are therefore only
    enabled if this is supported.
    
    Bug: v8:13270
    Change-Id: I673318f53348b9b993eaf7b9fcfd25dcacda843a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046670
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91150}

commit b03eca41ff141defc86a5252a1db3b36dbc2e0d0
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Nov 23 08:06:20 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/eb410d5..2cde4f3
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/92b79f4..2a8d2c5
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/8efb05d..25b4354
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/4026ecf..4b348d3
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763622627235981937
    
    Change-Id: I65f5299c3b6f0dbfe1b551f4d4650cbb0d503c90
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054406
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91149}

commit f5ce7f0a85e32694e273e188fe4be29e81f805c4
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Nov 23 15:29:25 2023 +0100

    [api] Fix missing V8_EXPORT
    
    Bug: chromium:1501315
    Change-Id: I795f706d88fb51732677d16ca5e1261c5b2b8d24
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054642
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91148}

commit 847cd1c583eb5dddb1d014120d59b59e4309d35d
Author: Liviu Rau <liviurau@chromium.org>
Date:   Thu Nov 23 16:23:23 2023 +0100

    [test262] Add old test262 parameter for postbuild phase
    
    Bug: v8:14002
    Change-Id: Id842fa732a5f4661b791457f33cc35b9a0d3cea6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057291
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91147}

commit a5e14cc79d34c85236d06058e629252868b91908
Author: Anton Bikineev <bikineev@google.com>
Date:   Thu Nov 23 15:48:46 2023 +0100

    utils: Simdify memcpy() and memcmp() for V8 string routines
    
    Use overlapping read/write operations of different sizes (up to
    the NEON vector size (128bits)) for memcpy- and memcpy-like routines.
    
    This improves Speedometer2.1 by 0.5%:
    https://pinpoint-dot-chromeperf.appspot.com/job/1315449b0e0000
    
    Change-Id: Iac32887244aa515ad857bd778e18026e69e80815
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5056834
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91146}

commit bbadd4ad9e40f1ac8839c66934a6686d1e312d99
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Nov 23 12:49:35 2023 +0000

    Revert "Verify that thought-to-be dead code is indeed dead"
    
    This reverts commit f0717d75509e2f5d1f738d63ef3dd05a14b4b017.
    
    Reason for revert: The code isn't entirely dead: crbug.com/v8/14479
    
    Original change's description:
    > Verify that thought-to-be dead code is indeed dead
    >
    > Now that we convert the BytecodeWrapper instead of the BytecodeArray
    > into UncompiledData during bytecode flushing (see crrev.com/c/4993368),
    > we can no longer run into the "bytecode already decompiled" case, so it
    > should be dead code. This CL first inserts a CHECK to verify that it is
    > indeed dead, and a subsequent CL will then remove the logic.
    >
    > Bug: chromium:1472252
    > Change-Id: If83606d041fb8b92ef0f6c5136a5b04ae0a59b32
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055807
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91133}
    
    Bug: chromium:1472252
    Change-Id: Ie998e97ffa52ea852d596f64df556c27a9890f01
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054638
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91145}

commit 5531890e8690563a572081a3c575269d70473a8c
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Nov 23 08:46:33 2023 -0500

    PPC/s390: Fix no-wasm build
    
    Port 08703445f6755dbe223fca5b1183d982f897e278
    
    Original Commit Message:
    
        By making SetStackPointer and LoadStackPointer a wasm-only instruction.
    
    R=clemensb@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I192b5d48f69e23e0764af72502c338335150e138
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055511
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91144}

commit bb9b37d196a7ef2ca0f9175e1e99794167a3d09e
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Nov 23 14:36:54 2023 +0100

    [heap] Fix data race on Heap::global_allocation_limit_
    
    This field can be updated outside a safepoint because of
    Heap::NotifyContextDisposed(). However, at that point it might
    also be read concurrently from a background thread (to check
    whether incremental marking should be started).
    
    This CL turns this field into an atomic to fix the race.
    
    Bug: chromium:1480975
    Change-Id: I06cbfc2bd5764ce88718e0d701d066c5ef5502f6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5057293
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91143}

commit 5ed42a26a4562836997830a59c82a2e6ead16e34
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Nov 23 13:11:10 2023 +0100

    [heap] Split uses of heap() into isolate_heap() and space_heap()
    
    With shared space in worker isolates the LocalHeap's heap might not
    match the space's heap anymore. This CL tries to make the distinction
    explicit by only providing isolate_heap() and space_heap() methods
    instead of just heap() in MainAllocator.
    
    Bug: chromium:1480975
    Change-Id: If1c2d6375664d3e3ddd0845174e0fe392eaf043d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055810
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91142}

commit 383bbf88e0d6f1db663f5516a728518663c0e18b
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Nov 23 14:18:08 2023 +0100

    Update V8 DEPS (trusted)
    
    This also adds a fix for the linker problems after the current
    clang roll, see also: https://crbug.com/1504725
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/9686829..eb410d5
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/1e8861f..3747d5b
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/38b8de0..8efb05d
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/9db1a23..9fbc780
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763667924920186977
    
    Bug: chromium:1504725
    Change-Id: I9ffe9e5ae42b80c9e9e11a8c099d586bfda57c1d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5053336
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91141}

commit 1a405a574ce949bb4126185f0270b9355ab3042c
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 21 08:50:46 2023 +0000

    [sandbox] Move BytecodeArrays out of the sandbox
    
    With this CL, BytecodeArrays are now allocated in trusted space, outside
    of the sandbox.
    
    Bug: chromium:1472252
    Change-Id: I814a7b23312c2568129be940d75e884d8cc3f13f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5007733
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91140}

commit eebcc22954141121aaaadaf901c0476a8a9e9f5e
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Wed Nov 22 23:25:06 2023 +0000

    [test262] Add staging tests for isSubsetOf set method
    
    This CL adds three tests to staging directory of test262.
    
    Bug: v8:13556
    Change-Id: Id6e468a0fa29528350a10c94e9dd19c2835788e8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055866
    Reviewed-by: Liviu Rau <liviurau@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91139}

commit e70ee2fa164059c2dc58159cc8598c66f14b41df
Author: Eva Herencsarova <evih@chromium.org>
Date:   Thu Nov 23 11:29:27 2023 +0100

    [wasm][turboshaft] Add WebAssembly.String.cast and .test to well-known
    imports
    
    Both cast and test get an externref as a parameter.
    This is based on the js-string-builtins proposal.
    
    Bug: v8:14179
    Change-Id: Ife6626cbbb2cdae4c9f05e5dbf971ff3b199f4bd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054541
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91138}

commit acc1917b9da42e29e033aa4b7c4b3bdcfd8ccf23
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Nov 23 11:10:00 2023 +0100

    [maglev] Enable inlining of Api call builtin behind --future
    
    Bug: chromium:1445925
    Change-Id: Icf9774b829835477be55567cea299830eea89571
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055809
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91137}

commit 08703445f6755dbe223fca5b1183d982f897e278
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Nov 22 17:17:55 2023 +0100

    Fix arm64 no-wasm build
    
    By making SetStackPointer and LoadStackPointer a wasm-only instruction.
    
    R=ahaas@chromium.org
    
    Change-Id: If593eb7f5adeaa62a8d6ef8cd75cde0fc3ee40ba
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5052844
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91136}

commit 731f855d58a7c5f45b10595dc57f48db6a4a54c3
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Nov 22 18:01:14 2023 +0100

    [arm64][codegen] Optimize code for frame construction
    
    Instead of pushing multiple times, each time decrementing sp, do
    decrement sp only once and store the other pair without changing sp.
    The new sequence is the same as emitted by MacroAssembler::EnterFrame.
    
    Old:
    
    a9bf7bfd       stp fp, lr, [sp, #-16]!
    910003fd       mov fp, sp
    a9bf43e7       stp x7, x16, [sp, #-16]!
    
    New:
    
    a9be43e7       stp x7, x16, [sp, #-32]!
    a9017bfd       stp fp, lr, [sp, #16]
    910043fd       add fp, sp, #0x10 (16)
    
    R=pierre.langlois@arm.com, ahaas@chromium.org
    
    Change-Id: Ib69d746e0ea886c6e13e0055c0bbc4e70ba60739
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050066
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91135}

commit 744dacac82338ff7d0d83b836e67cf92a38dfaee
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Nov 22 15:10:33 2023 +0100

    [turboshaft][wasm] Small pipeline improvements
    
    - Only run gc optimizations for gc modules.
    - Fine-grain measurements displayed by `--turbo-stats-wasm`.
    
    Bug: v8:14018
    Change-Id: I388ffdabcf20f5ea1660eb4794abfe917ccbc26d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054317
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91134}

commit f0717d75509e2f5d1f738d63ef3dd05a14b4b017
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Nov 23 08:31:13 2023 +0000

    Verify that thought-to-be dead code is indeed dead
    
    Now that we convert the BytecodeWrapper instead of the BytecodeArray
    into UncompiledData during bytecode flushing (see crrev.com/c/4993368),
    we can no longer run into the "bytecode already decompiled" case, so it
    should be dead code. This CL first inserts a CHECK to verify that it is
    indeed dead, and a subsequent CL will then remove the logic.
    
    Bug: chromium:1472252
    Change-Id: If83606d041fb8b92ef0f6c5136a5b04ae0a59b32
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055807
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91133}

commit f5ecf3c2b1fdb136f63985860042c2683a45459e
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Nov 22 17:38:56 2023 +0100

    [test] Replace global variables of type v8::Local<T>
    
    According to V8's public API documentation, local handles (i.e.,
    objects of type v8::Local<T>) "should never be allocated on the heap".
    While technically this does not prevent their use as global variables,
    our implementation of direct locals does not allow this, as they will
    be missed by conservative stack scanning.
    
    This CL replaces some global variables of type v8::Local<T> that are
    used in cctests and unit tests.
    
    Bug: v8:13270
    Change-Id: I6adaa95b73a6a7125cd18aabeaa938e945e59094
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046677
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91132}

commit 1009a42163c092bb9f56f590959e5f8c124f89f4
Author: Stephen Roettger <sroettger@google.com>
Date:   Thu Nov 23 09:28:45 2023 +0100

    [heap] remove broken write_code_using_rwx flag
    
    Disabling write_code_using_rwx is not supported and will just crash at
    runtime.
    
    Change-Id: I62fb59845c91bc30e92e32eaba4aed7ad04c488f
    Bug: chromium:1504047
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5056827
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#91131}

commit 6f033e0215249a41533fe193e73121f70c33c677
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Nov 22 19:08:16 2023 +0100

    Reland "Reland "[heap] Switch shared space LABs to MainAllocator""
    
    This is a reland of commit 63197e369a21bc440f6f4fb0cc51849aab4bd183
    
    This CL adds a v8::Isolate::Scope around the callback such
    that all isolate thread local variables are properly set up.
    
    Original change's description:
    > Reland "[heap] Switch shared space LABs to MainAllocator"
    >
    > This is a reland of commit 8ecfb51de0c12a0e76c2dbb2b86ea671e2fd373b
    >
    > This version of the CL only notifies the memory reducer on
    > the main isolate's main thread for the shared space.
    >
    > Original change's description:
    > > [heap] Switch shared space LABs to MainAllocator
    > >
    > > Switch shared space allocator in LocalHeap and HeapAllocator to
    > > the MainAllocator.
    > >
    > > This also requires a change in IsBlackAllocationEnabled(), which
    > > now needs to check the space's heap for black allocation because
    > > the heap_ field may now differ from space_->heap() for shared space
    > > allocation in client isolates.
    > >
    > > Bug: chromium:1480975
    > > Change-Id: Id30ff83946a2c7506bbbecab6cd696f218588a5d
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5039812
    > > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#91076}
    >
    > Bug: chromium:1480975
    > Change-Id: Iac3a2bd2e31c5ce7245e25c32ef71fb5128303b3
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5047536
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91087}
    
    Bug: chromium:1480975
    Change-Id: I3961daaa0a3e51c35adf62a19f6dd204b4a16ef3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054321
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91130}

commit bf668e84fbd39c5aaa3ae5ec5952f8a555926dec
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Nov 23 13:40:25 2023 +0800

    [riscv][jspi][arm64] Port JS central stack switch
    
    Port commit b158ad40dcff90c9fccdf4207897b3c5c3330a0d
    Port commit 9fbc6a0eaa7711b2ff4785403baf2a3a7d070ea0
    
    Bug: v8:13983
    
    Change-Id: I7c03f883c951bd6dd4debb56dd124f461b7266cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5055995
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91129}

commit dd1e701c7f6388935cd3af7858d5206538422ade
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Nov 22 18:57:52 2023 +0000

    Reland "[sandbox] Make SFI::trusted_function_data a trusted pointer"
    
    This is a reland of commit 911c7de73b68e3615e952066417ece5f2d319ddd
    
    We were missing a write barrier in SharedFunctionInfo::CopyFrom
    
    Original change's description:
    > [sandbox] Make SFI::trusted_function_data a trusted pointer
    >
    > This is the follow-up to crrev.com/c/4922343 which introduced the
    > trusted_function_data field, but still as a tagged pointer. The field
    > must be a trusted pointer field so that it can reference BytecodeArrays
    > in trusted space, outside of the sandbox.
    >
    > Bug: chromium:1490564
    > Change-Id: Ifdb946e4ebc3cc4f514c0c47f67133e06197d38f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4932248
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91038}
    
    Bug: chromium:1490564,chromium:1503396
    Change-Id: Ia58f29cfa711a47a60b8da39eba6570268559555
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054542
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91128}

commit ba9b44e112d34fbfa39c7a0dbcaefc9362177344
Author: Dana Dahlstrom <dahlstrom@google.com>
Date:   Tue Nov 21 21:00:00 2023 -0700

    Inline v8::base:Strdup from wrappers.h
    
    Cobalt's SbStringDuplicate is deprecated by commit f4ded6ce.
    https://github.com/youtube/cobalt/commit/f4ded6ce
    
    Change-Id: I39694586100b78b68bea323baaa7fa7a4b90d903
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5051557
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dana Dahlstrom <dahlstrom@google.com>
    Cr-Commit-Position: refs/heads/main@{#91127}

commit fce38915e4c7c73c0e7f77bb13e2a78514968d35
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Nov 22 12:00:00 2023 -0500

    PPC/S390: Use kStackFrameExtraParamSlot to store stack params
    
    ... this makes sure we read/write extra parameters to the correct
    stack slot reachable by both the simulator and native runtime.
    
    Change-Id: I6654073a612f5b1eeb3accb2afc20e5335052e30
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054986
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91126}

commit c7b11e1cff1b411901a7b2309eacdf04edad44b0
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Nov 22 18:36:03 2023 +0100

    [wasm] Call bit manipulating C functions more efficiently
    
    Pass the argument according to the C calling convention instead of via a
    stack buffer.
    
    R=ahaas@chromium.org
    
    Bug: v8:14473
    Change-Id: I69cd84bedfc1972ffc22d32e3ea6f3d2ad6b1f93
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050061
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91125}

commit 5275acc3eae9e6f9bf7dfcd2242f786ec19a0aeb
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Nov 22 08:46:12 2023 -0500

    PPC/s390: [jspi][arm64] Port JS central stack switch
    
    Port b158ad40dcff90c9fccdf4207897b3c5c3330a0d
    
    Original Commit Message:
    
        Main differences with x64:
        - We need to update the simulator stack limit. This must happen just
          before setting the SP, otherwise any memory access between the two
          operations could be detected as a below-SP access by the simulator,
        - Ensure that we enable FP-relative frame access in the block where we
          do the stack switch,
        - Even with the FP-relative flag, some operands are converted to
          SP-relative when it is more optimal. Add a bit in the frame state to
          temporarily disable this while the SP is moved to the target stack.
    
    R=thibaudm@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: If495e9a11351c717de2006a7d47bebaef150c015
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054117
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91124}

commit 0fd478bcdabd3400d9d74c47c4883c085ef37d18
Author: Joyee Cheung <joyee@igalia.com>
Date:   Wed Nov 15 20:15:18 2023 +0100

    [heap-profiler]: expose QueryObjects() to v8::HeapProfiler
    
    This allows embedders to use this API for testing memory leaks more
    reliably. See https://github.com/nodejs/node/pull/50572 for an
    example about how the API can be used.
    
    Change-Id: Ic3d1268e2b331c37e8ec92997b764b9b5486f8c2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006373
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#91123}

commit 251578009886bb21cb8388a40decef565e7e6aba
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Nov 22 18:48:05 2023 +0100

    Whitespace change to test roll patching
    
    No-Try: true
    Bug: chromium:1445862
    Change-Id: I4df52f30b64ce7fdc6d254a8c81f63a367b2534a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054322
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91122}

commit 637479323d8b16521f8fc6935b4d4f91a8646625
Author: Liviu Rau <liviurau@chromium.org>
Date:   Wed Nov 22 16:16:59 2023 +0100

    [test262] Set footer rather than tag
    
    Bug: v8:14002
    Change-Id: I1e1326a22c050912967e142d60f2b7280fbd22ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054538
    Auto-Submit: Liviu Rau <liviurau@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91121}

commit 34ab5deef69ebb8c2264006684b14317c989f98c
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Nov 22 14:07:17 2023 +0100

    [wasm] Introduce a hard caching threshold
    
    In addition to the existing caching threshold which only triggers
    caching after some timeout (if a timeout is specified via
    --wasm-caching-timeout-ms) this CL introduces a hard threshold which
    will trigger caching immediately.
    
    We will then finch different configurations of the three flags against
    each other.
    
    The default is still unchanged.
    
    R=ahaas@chromium.org
    
    Bug: v8:14411
    Change-Id: I2b4282d71f3a2d80d06222f4c3cbda48080f8af6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5052845
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91120}

commit 2cc37158bd6995e698a67dffe72106081299f197
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Nov 22 16:06:41 2023 +0100

    [wasm][turboshaft] LoadOp: Add extra flag for trap_on_null
    
    So far for protected instructions the tagged_base was used to decide
    whether the load traps on null for wasm-gc instructions or traps on out
    of bounds for linear wasm memory accesses.
    
    The tagged_base is however also used to mark loads as "the offset has
    to be reduced by one to remove the tag bit".
    Lowering loads and stores in the LoadStoreSimplificationReducer removes
    the tagged_base as it subtracts the tag bit already. It however still
    needs to differentiate between the two different kinds of traps.
    
    Bug: v8:12783
    Change-Id: I4727d7bfaff5d7c6d041ff8cdeb4b91b52c7afbf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5047534
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91119}

commit 6831dc14ccb0511f626365a4d137d66c26c84abd
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Nov 22 16:33:07 2023 +0100

    Whitespace change to test roll patching
    
    No-Try: true
    Bug: chromium:1445862
    Change-Id: Icdec86bd8dfd0dbbe99b223c1ebf6ad8c616d1d4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054320
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91118}

commit c5bc8be0b2c9e2879abd61495c60918357a58591
Author: Liviu Rau <liviurau@chromium.org>
Date:   Wed Nov 22 15:20:24 2023 +0100

    [test262] Adjust upload arguments
    
    Bug: v8:14002
    Change-Id: Ibe8c6f10f2667da11f599e052a9bbd4763115518
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5054318
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91117}

commit b777ccec1044fe5fc9b02888a00b33a1b6a1f861
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Nov 22 12:04:48 2023 +0000

    [sandbox] Use self_indirect_pointer() in WriteIndirectPointerField
    
    ... as that is what the field was added for. Also use an atomic read for
    the field to be consistent with the other accesses to it.
    
    Bug: chromium:1473677
    Change-Id: I16d0a62a81ef734b32c01bf4752bbd25a5eb1d92
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5052846
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91116}

commit eb30f44afa97f2ffd935e43b121259a1535e4dc3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Nov 22 13:52:01 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 9
    
    This CL adds support for many wasm atomics and SIMD operations for the
    new turboshaft instruction selector.
    
    Bug: v8:12783
    Change-Id: Ic02b905ca24023b8f86b6e4b7aceb94c50e46a60
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043226
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91115}

commit cc5f2faa0c6aa68d5711ae45284046c9af4c0f3c
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Nov 22 09:36:36 2023 +0000

    [sandbox] Reference Code from DependentCode through the CodeWrapper
    
    Once Code objects move out of the sandbox, they can no longer be
    referenced from inside the sandbox through a tagged pointer. In
    particular, they cannot directly be stored inside a FixedArray or
    the WeakArrayLists used for DependentCode. Instead, one can use the
    Code's in-sandbox wrapper object for these use-cases.
    
    Bug: chromium:1500887
    Change-Id: I650ea99ec81f5f1a5887b7746b4c79a4a865db02
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024275
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91114}

commit bde0ed46a0fd612b6126988c54c1100c56a80b7a
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Nov 22 12:23:35 2023 +0100

    [turboshaft] Re-enable parts of the disabled CSA pipeline changes (1)
    
    Bug: v8:12783, chromium:1489500
    Change-Id: I072787c3353dabfb8aae74c5eae93b25d0e65e09
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5053297
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91113}

commit b5573624a4b5409d31dd1fb123829e0466e11613
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Nov 21 15:28:54 2023 +0100

    [wasm] Record source position for F64x2PromoteLowF32x4
    
    Instruction selection on x64 combines F64x2PromoteLow32F32x4 and
    S128Load64Zero into a single instruction. Because of the combination,
    the source position of S128Load64Zero got lost, but there was no source
    position for F64x2PromoteLow32F32x4. The source position was then
    missing for the exception created by WebAssembly trap handling.
    
    R=clemensb@chromium.org
    
    Bug: chromium:1500812
    Change-Id: I3840b21925055d9481675010df74ef27b7a01ac2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017772
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91112}

commit 05a989fd0c39475bfd5a36523586890f2a5041f7
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Nov 22 10:37:24 2023 +0100

    [compiler] Add some TODOC in the backend
    
    Change-Id: Ic74e7c517434c8aa13d178fb1ce4f8acec7362d7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050928
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91111}

commit b158ad40dcff90c9fccdf4207897b3c5c3330a0d
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Nov 21 11:34:25 2023 +0100

    [jspi][arm64] Port JS central stack switch to arm64
    
    Main differences with x64:
    - We need to update the simulator stack limit. This must happen just
      before setting the SP, otherwise any memory access between the two
      operations could be detected as a below-SP access by the simulator,
    - Ensure that we enable FP-relative frame access in the block where we
      do the stack switch,
    - Even with the FP-relative flag, some operands are converted to
      SP-relative when it is more optimal. Add a bit in the frame state to
      temporarily disable this while the SP is moved to the target stack.
    
    R=ahaas@chromium.org,ishell@chromium.org
    
    Bug: v8:13983
    Change-Id: I5e000893f923e6d2f2e8ea471b8beb2eba31abec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4871917
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91110}

commit fa83ae149a3944f5c1711c7f5538260c3cf447e4
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Nov 16 15:56:22 2023 +0100

    [wasm][exnref] Fix wasm-compile fuzzer
    
    Push the missing catch block types and try block types in {blocks_}.
    
    R=manoskouk@chromium.org
    
    Bug: v8:14398,chromium:1502816
    Change-Id: I2dfa2ee419719e76fe0ff66b11e6cb1ad1ddbfd3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033411
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91109}

commit 847a4625b5d5a2deece1451a216d3fc557ae4548
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Nov 22 10:25:44 2023 +0100

    [turboshaft] Document & Validate LoadOp::Kind::maybe_unaligned
    
    The CL also adapts the wasm usages of LoadOp::Kind::RawUnaligned()
    which did not comply to the implicit assumption that it is only used
    for platforms where all loads are allowed to be unaligned.
    
    Bug: v8:12783
    Change-Id: Id10371cb3b536aab59a1608747ae8cf6930f06a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5048915
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91108}

commit 35150606fd620cc5fc73255e9083f10e6f513292
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Nov 22 10:23:02 2023 +0100

    [heap] Fix CHECK in incremental marking start
    
    On MinorMS incremental marking start, sweeping in the old generation
    might be active. Only on Full GC incremental marking start no
    sweeping is supposed to run.
    
    This CL fixes the CHECK and reorders the (D)CHECKs to have the most
    important one on the top.
    
    Bug: chromium:1503384, chromium:1504318
    Change-Id: I803b19150d7a8cdee862a6f68cf1b507d4fe53e7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050926
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91107}

commit fa0ec24d72233e49f15935e270c187de2739cc1d
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Nov 21 17:06:43 2023 +0100

    [wasm] Add frame state to calls to imports in wrapper inlining
    
    An inlined js-to-wasm wrapper has to add a frame state to calls to
    generate correct deopt information. For calls to imported functions,
    this was not happening so far, which triggered a DCHECK. This CL adds a
    frame state also to calls to imported functions.
    
    Bug: chromium:1501914
    Change-Id: I29f3da99cf87fbc012532c7cea6554a9dccb88fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050084
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91106}

commit a3e4999aae8af2ace7fec361c2deff0983e85e1a
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Nov 22 10:21:52 2023 +0100

    [release] Remove erroneous double url-escapes
    
    No-Try: true
    Bug: chromium:1445862
    Change-Id: I62b7c094b0b035bd074b5102145e79402288c632
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5052841
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91105}

commit b989411bd0dc390e01dd310838165e1299f911ca
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Nov 22 09:26:51 2023 +0100

    Whitespace change to test roll patching
    
    No-Try: true
    Bug: chromium:1445862
    Change-Id: I250ac47deace989e49cd4500f1e812c7f58ab5c9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5052840
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91104}

commit bcef4a41d51e2bb635734bf0d6d603314345f847
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Nov 21 20:16:38 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/74fa438..9686829
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/4f46c73..92b79f4
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/5c1525f..b80aa26
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/434a8ef..4026ecf
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763758522735241713
    
    Change-Id: I718773c71108a346c9905a90df2524b0459ca88e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5049779
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91103}

commit 7475f6d195655fa58f8dc95c62fb23d3aa08097a
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 21 17:41:32 2023 +0000

    [sandbox] Introduce IsolateForSandbox
    
    This is a view of an Isolate that only exposed the sandbox-related
    parts, in particular the various pointer tables stored on an Isolate.
    Introducing this class achieves two things:
    
    1. It allows accessing pointer table entries given either a Isolate* or
       a LocalIsolate*. Both of these are valid, but previously we didn't
       have proper APIs for using a LocalIsolate.
    
    2. It makes it obvious when an isolate is only required for the sandbox.
       Previously, we sometimes names the parameter isolate_for_sandbox, but
       this was only done inconsistently.
    
    As an added benefit, this CL also moves previously duplicated logic for
    obtaining the appropriate external pointer table into the new
    IsolateForSandbox class, thereby recuding code duplication.
    
    With this change, we also forbid passing a nullptr Isolate into the
    pointer accessor routines, which was previously allowed for code
    pointers as these do not yet need an isolate. As such, we have to pass
    an isolate into a number of additional function now. However, it is
    expected that this will anyway be necessary in the future when the code
    pointer table also becomes a per-Isolate table.
    
    Bug: chromium:1503631
    Change-Id: I0bdcacf5da6c5b13de828d72e9ec4bfb3313f9e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043729
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91102}

commit eb94c4dc8f8d9964a563c226a8ab118e4d4d1d6e
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Nov 22 09:37:40 2023 +0800

    [riscv][turboshaft] Port InstructionSelector part4
    
    Port commit 3c3aca4f42afd429977d2eea9707fbb1ed55a21e
    
    Bug: v8:12783
    Change-Id: I22f2d2b316a5d1e71686a3873ecae80c763f81bf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5051556
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91101}

commit a8c1f72360ef872ed4e0ab7bebbf92147fdd0b4b
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Tue Nov 21 18:41:16 2023 +0800

    [riscv][turboshaft] Port InstructionSelector part 3
    
    Bug: v8:12783
    
    Change-Id: I2832a60e25fdace05ce52f10ab36fb8688f8576d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046347
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91100}

commit 2240af351ec63f32740dc935cf61d75561f740b1
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Nov 21 16:33:56 2023 -0800

    [shared-struct] Fix registry matching for elements
    
    This CL fixes a bug in the descriptor count matching in the type
    registry, where a type without elements with 1 field has the same
    descriptor count as a type with elements but 0 fields.
    
    Fixed: chromium:1503663
    Bug: v8:12547
    Change-Id: Ib4c3288244e1c4f020393afe9505be466e64fa49
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5051763
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91099}

commit b477829b284cff8667f07089880560147c3c3d2c
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Nov 21 15:54:07 2023 -0500

    PPC/s390: [wasm][memory64] Use trap handling for memory64
    
    Port 8b4bcf30bd87c5215b4137d8afecc3df935f4902
    
    Original Commit Message:
    
        Make bounds checking for Wasm memory64 faster by using guards pages
        and trap handling.
    
    R=paolosev@microsoft.com, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Iace68b7518db99f44a0d951858a57a945d14aa56
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050606
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91098}

commit 6b8eb077c5eb46b8f57c2542578289dc764c18cd
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Nov 21 15:25:19 2023 -0500

    PPC/S390: [wasm] Pass arguments directly to memory.init
    
      Avoid setting up a stack buffer per C call as those stack buffers
      are not shared and hence blow up the frame.
    
      As this is the first C function with more than four parameters, we
      need to implement logic to push remaining arguments to the stack on
      platforms with less than six parameter registers.
    
    Port 200df6f6bf1752d9c7c27d8868321fb5c26fef53
    Port 852a76c0b3c84c007c11813cd20df241dfd7a421
    
    Bug: v8:14357
    Change-Id: I3a6373807517b6263b08d095c6b93f0fd64c68e4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046177
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91097}

commit bb8a9b8a9e0c79184e37860e2f7c24ac4998d7a2
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Nov 21 16:33:54 2023 +0100

    [maps] Remove incorrect DCHECK in CallOptimization::GetAccessorContext()
    
    ... as an object might have an accessor function from another context.
    The DCHECK was added in https://crrev.com/c/5030191.
    
    Bug: chromium:1495743, chromium:1503565
    Change-Id: If5f0c5ff81ed2989072ebc2fa657c245c9b9fd7a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050062
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91096}

commit 0301d504ddb82b027d46d728d005d7b3938e45a1
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue Nov 21 16:36:30 2023 +0100

    [handles] Optimize node allocation
    
    - The block allocated on will never be full.
    - NeedsToBeRemembered can check the v8_flag first as the other flag
      checks will generally not bail out. (GC is off, and store is usually
      assigning)
    
    Bug: chromium:1502777
    Change-Id: I568d752a4775902ab90fe3d97552d6b04cd74115
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5048916
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91095}

commit 70523e119031b832c10e68a3847ec188b9dd04f1
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Nov 21 10:58:16 2023 +0100

    [maglev] Re-enable peeling for all loops on --maglev-future
    
    Bug: chromium:1502486
    Change-Id: I02d91331347a9d084b7ffbd42e2b72ea82c7f2f9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5047533
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91094}

commit a9abae7ffaaf58990a8e6f186091e43242dcd9af
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Nov 21 08:17:32 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/b753759..74fa438
    
    Rolling v8/buildtools/linux64: git_revision:c7b223bfb225ce87a72a244d016ffdfcf227fa5e..git_revision:92e63272dc04ee7cc1eaae2633c25da06e4f9c03
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763803821167416273
    
    Change-Id: I6c720f44bbd4d18883e73004629c47c52d371d11
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5049372
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91093}

commit 77715c904eaf9bd57a645e08898dfb306deebc03
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 21 15:42:38 2023 +0000

    Revert "[sandbox] Make SFI::trusted_function_data a trusted pointer"
    
    This reverts commit 911c7de73b68e3615e952066417ece5f2d319ddd.
    
    Reason for revert: seems to cause crashes: https://crbug.com/1503396
    
    Original change's description:
    > [sandbox] Make SFI::trusted_function_data a trusted pointer
    >
    > This is the follow-up to crrev.com/c/4922343 which introduced the
    > trusted_function_data field, but still as a tagged pointer. The field
    > must be a trusted pointer field so that it can reference BytecodeArrays
    > in trusted space, outside of the sandbox.
    >
    > Bug: chromium:1490564
    > Change-Id: Ifdb946e4ebc3cc4f514c0c47f67133e06197d38f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4932248
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91038}
    
    Bug: chromium:1490564
    Change-Id: I5b991de94b58ad1b828365ff1af7fe9a61b4e6ba
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050083
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91092}

commit 5be05c79a1d33bbcea9aa98e53b334f75cab2cd1
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Nov 21 17:12:20 2023 +0100

    [maglev] Revert phi input untagging of InitialValue
    
    The experimental untagging can cause bailouts in the prologue of a
    normal (i.e., non-osr) function. This is a bailout with bytecode_offset
    of -1, which is not really supported throughout the deoptimizer.
    
    Thus, reverting that part of https://crrev.com/c/5048910
    
    Fixed: chromium:14474
    Change-Id: I54e6cd3276685b6361d879c223ea299ac43363fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050063
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91091}

commit 13de0bd115fb0066b1f5e0292a7756422ed80e5b
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Nov 15 15:22:45 2023 +0100

    cppgc: Add check to FreeList::Append
    
    Appending a free list to itself should not be allowed.
    This CL adds a DCHECK and a test.
    
    Change-Id: I397ce282d4c3a256aa199d1162ae605549d29c9a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033020
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91090}

commit 6d93a937cecbeadbcf75efa00cec774810161b10
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Nov 21 16:56:53 2023 +0000

    Revert "Reland "[heap] Switch shared space LABs to MainAllocator""
    
    This reverts commit 63197e369a21bc440f6f4fb0cc51849aab4bd183.
    
    Reason for revert: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20stress-incremental-marking/14614/overview
    
    Original change's description:
    > Reland "[heap] Switch shared space LABs to MainAllocator"
    >
    > This is a reland of commit 8ecfb51de0c12a0e76c2dbb2b86ea671e2fd373b
    >
    > This version of the CL only notifies the memory reducer on
    > the main isolate's main thread for the shared space.
    >
    > Original change's description:
    > > [heap] Switch shared space LABs to MainAllocator
    > >
    > > Switch shared space allocator in LocalHeap and HeapAllocator to
    > > the MainAllocator.
    > >
    > > This also requires a change in IsBlackAllocationEnabled(), which
    > > now needs to check the space's heap for black allocation because
    > > the heap_ field may now differ from space_->heap() for shared space
    > > allocation in client isolates.
    > >
    > > Bug: chromium:1480975
    > > Change-Id: Id30ff83946a2c7506bbbecab6cd696f218588a5d
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5039812
    > > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#91076}
    >
    > Bug: chromium:1480975
    > Change-Id: Iac3a2bd2e31c5ce7245e25c32ef71fb5128303b3
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5047536
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91087}
    
    Bug: chromium:1480975
    Change-Id: I43cd10789ae42f2c943ac6a5dc378bae94811ab7
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5050086
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Owners-Override: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91089}

commit 65045dfda832f82faceee4a2abc6806c81fdd99c
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Nov 21 14:52:28 2023 +0100

    [wasm] Enable wasm-to-js tierup test on all platforms
    
    R=ahaas@chromium.org
    
    Change-Id: Ieb770f527205978a46b9dc008710b654fd08b80a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5047537
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91088}

commit 63197e369a21bc440f6f4fb0cc51849aab4bd183
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 21 14:44:38 2023 +0100

    Reland "[heap] Switch shared space LABs to MainAllocator"
    
    This is a reland of commit 8ecfb51de0c12a0e76c2dbb2b86ea671e2fd373b
    
    This version of the CL only notifies the memory reducer on
    the main isolate's main thread for the shared space.
    
    Original change's description:
    > [heap] Switch shared space LABs to MainAllocator
    >
    > Switch shared space allocator in LocalHeap and HeapAllocator to
    > the MainAllocator.
    >
    > This also requires a change in IsBlackAllocationEnabled(), which
    > now needs to check the space's heap for black allocation because
    > the heap_ field may now differ from space_->heap() for shared space
    > allocation in client isolates.
    >
    > Bug: chromium:1480975
    > Change-Id: Id30ff83946a2c7506bbbecab6cd696f218588a5d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5039812
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91076}
    
    Bug: chromium:1480975
    Change-Id: Iac3a2bd2e31c5ce7245e25c32ef71fb5128303b3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5047536
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91087}

commit 1b79056e7571081655dae445f05790c503c4b668
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Nov 21 14:42:33 2023 +0100

    [wasm][jspi] Fix wasm-to-js generic wrapper scanning
    
    The WasmToJSWrapperAsm builtin reserves two new slots for stack
    switching, which shifts the starting offset of the stack parameters
    relative to the callee frame (CSA). This was not taken into account in
    the frame iterator.
    
    There are two reasons why this was not detected by
    TestSwitchingToTheCentralStackManyParams:
    - The import in this test is suspending, which is not supported by the
      generic wrapper yet,
    - Even if we use a regular import, the generic wrapper resets the
      signature slot after param conversion to signal that parameter
      scanning can be skipped from now on. So the GC would happen too late
      and would not actually scan the parameters.
    
    R=ahaas@chromium.org
    
    Bug: v8:14471,v8:13983
    Change-Id: Ibcdfbe8cdcd50da090fcec550831bd4789f9ce74
    Cq-Include-Trybots: luci.v8.try:v8_linux64_single_generation_dbg
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5047531
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91086}

commit 47404bf0874b64f5153ba8b5f8ca971aabcc14d4
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Nov 20 16:07:36 2023 +0100

    [wasm] Call memory.copy with direct C parameters
    
    Avoid allocating stack space for this C call. Just pass the arguments
    directly according to the C calling conventions.
    
    R=thibaudm@chromium.org
    
    Bug: v8:14357, v8:14473
    Change-Id: I6f49c5dbfcd3602dd465ccd30024d93fdb94ea4e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043224
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91085}

commit fb320dcddcb9094ae1f29ca68991077cb588bb9b
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Nov 21 13:51:08 2023 +0100

    [maglev] Don't hoist phi untagging out of resumable loops
    
    Hoisting untagging out of resumable loops would require us to redo the
    untagging when resuming.
    
    Drive-By:
    * Re-add removed TODO
    * Allow non-osr InitialValues to be hoisted to the prologue
    
    Fixed: chromium:1503738
    Change-Id: I62de12215c797bedf38640f11fe6d6a517eb09aa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5048910
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91084}

commit 1753b83910819bce453d453b054e9f5b4924bbf8
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Nov 21 13:40:17 2023 +0100

    [turboshaft][wasm] Stack check effects, mark loads as non-eliminable
    
    Stack checks should be manually determined as non-writing to avoid
    excessive invalidations in load elimination. On the other hand, wasm
    values which can be modified by another thread should not be
    load-eliminated.
    Drive-by: Rename `always_canonically_accessed` to `load_eliminable`.
    
    Bug: v8:14108
    Change-Id: Icf0494ad169d75ef13bf4eb3e16a69c35cf2e154
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043227
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91083}

commit 8b4bcf30bd87c5215b4137d8afecc3df935f4902
Author: Paolo Severini <paolosev@microsoft.com>
Date:   Mon Nov 20 10:10:11 2023 -0800

    [wasm][memory64] Use trap handling for memory64
    
    Make bounds checking for Wasm memory64 faster by using guards pages
    and trap handling.
    
    Bug: v8:10949
    Change-Id: Idfbbe7e56bc27862b705b9c0e87b6bc1d44b6669
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936790
    Commit-Queue: Paolo Severini <paolosev@microsoft.com>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91082}

commit 1f8e7c20b2941048b63b47b7ff15b9dda330cf19
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Nov 21 13:29:40 2023 +0100

    [release] Fix roll version retrieval in roll-merge-gerrit
    
    Previously we tried to get the version from the currently rolled
    commit from its tag, but that doesn't work. There's no method in
    the Gerrit API to retrieve the tags on a commit. The commit/in
    API includes all tags transitively a commit is included in. It'd
    require additional calls for each such tag to verify which is
    on the commit exactly.
    
    Also gitiles doesn't work as the json api differs from the UI log
    by just not including the tags. Local `git tag --points-at`
    requires a local checkout and doesn't work with a remote repo.
    
    The fix in this change is to use the version file content to
    determine the version. The file is the source of truth anyways and
    the tag usually just mimics the file anyways.
    
    The CallGerritApi can unfortunately not be reused, as it only works
    with json results, but the file API returns base64 encoded data.
    
    No-Try: true
    Bug: chromium:1445862
    Change-Id: I31a6f74a3a214f767b03689fa2da5ebeae411df7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5048911
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91081}

commit 9a556f2451ad5587454c1e26f3293fd0d5f2f26a
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 21 13:19:21 2023 +0000

    Revert "[heap] Switch shared space LABs to MainAllocator"
    
    This reverts commit 8ecfb51de0c12a0e76c2dbb2b86ea671e2fd373b.
    
    Reason for revert: Seems to cause TSAN races in
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20TSAN%20-%20isolates/28158/overview.
    
    Original change's description:
    > [heap] Switch shared space LABs to MainAllocator
    >
    > Switch shared space allocator in LocalHeap and HeapAllocator to
    > the MainAllocator.
    >
    > This also requires a change in IsBlackAllocationEnabled(), which
    > now needs to check the space's heap for black allocation because
    > the heap_ field may now differ from space_->heap() for shared space
    > allocation in client isolates.
    >
    > Bug: chromium:1480975
    > Change-Id: Id30ff83946a2c7506bbbecab6cd696f218588a5d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5039812
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91076}
    
    Bug: chromium:1480975
    Change-Id: If1aff46e96295f3499c3e10fb04865574e9fc0e3
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5048914
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91080}

commit 0af0a63cabb6f33243cee79bab78bffbdd1b8013
Author: Liviu Rau <liviurau@chromium.org>
Date:   Tue Nov 21 13:22:59 2023 +0100

    [test262] Update build and test steps
    
    Local build and test procedure is aligned with the documented workflow http://shortn/_nJseAQU8na .
    
    
    Drive-by:
     - do not mention removed status lines in the new status block
     - rewrite the status file every time with recalculated lines
    
    Bug: v8:14002
    Change-Id: I893d486131b1d4a765669771f3a9f06098eb3052
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046794
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91079}

commit 292726160e24c59db268b66d10a847cad26e47d4
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Nov 20 12:39:27 2023 +0100

    [codegen][arm64] Store two registers in one instruction
    
    The two fast_c_call_caller fields in the IsolateData are next to each
    other, so we can use a single "stp" instruction to store both registers.
    
    R=thibaudm@chromium.org
    
    Bug: v8:14357, v8:14473
    Change-Id: Ia7cb42fa32973a937357629ba00056b1769bc469
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043728
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91078}

commit f263c38275d0685e750e858c7c3fcec4a728f7a8
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 21 11:54:05 2023 +0100

    [heap] Fix can_start_incremental_gc condition in MemoryReducer
    
    optimize_for_memory is already used for should_start_incremental_gc
    but should not overrule CanBeStarted(). If incremental marking cannot
    be started it shall not be started even if optimize_for_memory is true.
    
    This CL also turns DCHECKs in IncrementalMarking::Start into CHECKs.
    This will ensure that we never start incremental marking when it
    is already running and crash immediately.
    
    Bug: chromium:1503384
    Change-Id: Iacf255d03c006797bc9e3475139bb749f0e05d48
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5047535
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91077}

commit 8ecfb51de0c12a0e76c2dbb2b86ea671e2fd373b
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 21 08:44:54 2023 +0100

    [heap] Switch shared space LABs to MainAllocator
    
    Switch shared space allocator in LocalHeap and HeapAllocator to
    the MainAllocator.
    
    This also requires a change in IsBlackAllocationEnabled(), which
    now needs to check the space's heap for black allocation because
    the heap_ field may now differ from space_->heap() for shared space
    allocation in client isolates.
    
    Bug: chromium:1480975
    Change-Id: Id30ff83946a2c7506bbbecab6cd696f218588a5d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5039812
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91076}

commit 53d774d524392f74b11cfbc95b466c9206e2d3e7
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Nov 21 19:51:56 2023 +0800

    [loong64][mips64][wasm] Pass arguments directly to memory.init
    
    Port commit 852a76c0b3c84c007c11813cd20df241dfd7a421
    Port commit 200df6f6bf1752d9c7c27d8868321fb5c26fef53
    
    Bug: v8:14357
    Change-Id: I32834ec60b365792d620dfba344072c3e827fd7e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5047875
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91075}

commit a1dee7c835ccc2020067010dffea493dbeab1c1d
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Nov 20 15:16:29 2023 +0100

    [wasm] Call memory.fill with direct C parameters
    
    Avoid allocating stack space for this C call. Just pass the arguments
    directly according to the C calling conventions.
    
    R=thibaudm@chromium.org
    
    Bug: v8:14357, v8:14473
    Change-Id: I657e31fccf9eed392bc39d13c5b7b542385e8c61
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040799
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91074}

commit 318461db5e11c3d40d9f65be3bcf21d6562abbd1
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Nov 20 16:53:38 2023 +0100

    [tools] gm.py: Also pass through testrunner args with out directory
    
    When running gm.py with an output directory as its first arg all
    additional args were not forwarded to run_tests.py, e.g.:
      gm out/arm64.debug_no_ptr_compression mjsunit/* --variants=turboshaft
    did not forward the --variants flag.
    
    Change-Id: Iad4b1dd9417ff94a53180eb4bd8712a7936802a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043225
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91073}

commit 3c3aca4f42afd429977d2eea9707fbb1ed55a21e
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Nov 20 16:55:43 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 8
    
    This CL contains mainly more arithmetic operations and type conversion
    operations.
    
    Bug: v8:12783
    Change-Id: If1622a8233d5fcb81fcab05338e2c2f9ed1c2854
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040693
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91072}

commit 21d3e127fc0b8f21268455fc5a976b705fa37ed4
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Tue Nov 21 15:44:41 2023 +0800

    [riscv][wasm] Pass arguments directly to memory.init
    
    Port commit 200df6f6bf1752d9c7c27d8868321fb5c26fef53
    
    Bug: v8:14357
    
    Change-Id: I7c593aeae9c60aec2706eee1383693f9cad4444d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046837
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91071}

commit bb13a4b074502efbaeaa3ecd5e3f6bb3c1f4ceb5
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Nov 21 08:39:53 2023 +0100

    Whitespace change to test patching rolls
    
    No-Try: true
    Bug: chromium:1445862
    Change-Id: Ia5352c92420c26840fff894e31be9bfa33742d5d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046671
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91070}

commit a70c495c7f8608bafba06f673cb7f6403d55716b
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 17 11:40:04 2023 +0100

    Reland "[heap] Switch some spaces in LocalHeap to MainAllocator"
    
    This is a reland of commit 202fe945b985f68287d5b5cc0abb0208e81533ea
    
    Now that https://crrev.com/c/5040952 landed again with a fix. This
    CL can reland unchanged.
    
    Original change's description:
    > [heap] Switch some spaces in LocalHeap to MainAllocator
    >
    > This CL switches the ConcurrentAllocator instances in LocalHeap
    > to MainAllocator for the old, code and trusted spaces.
    >
    > The shared space will be addressed in a follow-up.
    >
    > Bug: chromium:1480975
    > Change-Id: I515482c716acbab03b05f2cfe705d3634797f42d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040512
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91021}
    
    Bug: chromium:1480975
    Change-Id: I5c128cee0e5c5887f138d9f5436ad52781e6999a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040516
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91069}

commit 6fb5d203196d6608ab5322183211369f256a0b8f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Nov 20 20:08:55 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/cd2687c..b753759
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/2895795..4f46c73
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/bd17576..5c1525f
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/eb48a6a..38b8de0
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/a96e763..434a8ef
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/f06a19e..9db1a23
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763849118102436257
    
    Change-Id: I7844be7707f4598086525db225714f938fc25d58
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5046983
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91068}

commit c4946b3e60c597fb9d9cccb2b100647a945e309d
Author: Shu-yu Guo <syg@chromium.org>
Date:   Mon Nov 20 12:57:39 2023 -0800

    [test262] Roll test262
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/6396ebde..873f2604
    
    Fixed: v8:14326
    Bug: v8:7834
    Change-Id: If75b1a6ab425e920f9ad49c611b7e5e38c717f89
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017769
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91067}

commit b8d4cdebc0b8fc083472f1851ea6daf3d8bf771f
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Nov 20 16:04:17 2023 +0100

    [api] Refactor GlobalizeTracedReference()
    
    - Avoid Handle<> for TracedReference (and its internals).
    - Don't emit RCS scope for creation.
    - Elide duplicate emptiness check on API fast path.
    - Move write barrier and young node tracking after node publishing.
      This works as we merely want the node itself to be in consistent
      state for concurrent marking.
    
    Bug: chromium:1502777
    Change-Id: Ib84a050f4a45567eb6bedcdce4e4f08d71fb3159
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043732
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91066}

commit 7afd5eb2aebb737267b1b55a6cb895c9e6a97e38
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Nov 20 16:55:33 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 7
    
    This CL adds handling for more 64 bit word related instructions.
    The int64 lowering related mjsunit tests now pass with the new ISel on
    arm64. (mjsunit/wasm/turboshaft/int64-lowering.js)
    
    Bug: v8:12783
    Change-Id: I7a551f2f623dd05b23f464ebd18097d8292fdb54
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033670
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91065}

commit 07b044d1a3f115972f7fee4a852334d8cf5a2eb7
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Nov 20 08:17:34 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools/linux64: git_revision:bc5744174d9ea1c292f3f08cfb95fa97ea5c595e..git_revision:c7b223bfb225ce87a72a244d016ffdfcf227fa5e
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/d1c140e..1e8861f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763894415383560337
    
    Change-Id: I2d8bf8cdbec465d2791925092d5d85ce7d0cd2eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5044932
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91064}

commit f4e124a033b5df283bc98be2af3e521b379c095d
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri Nov 10 15:36:52 2023 +0100

    [api] Don't allow the context to be empty
    
    Change-Id: I1f6f3fdc93fb240a81659a1a952f52a387c6f228
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016841
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91063}

commit e6875a05195cdb82fc1a38eb4ba0bbf24a3699e7
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Nov 20 09:03:52 2023 +0100

    [torque] ClangTidy performance findings
    
    Spotted by Google3:
    
    - loop variable is copied but only used as const reference; consider making it a const reference For more info see go/clang_tidy/checks/performance-for-range-copy (12 times)
    - 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop For more info see go/clang_tidy/checks/performance-inefficient-vector-operation
    
    Change-Id: I8beccb1f693c9de224044d5af0f9239ae63f21dc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043723
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91062}

commit 66ba3e9cb169c2f7ac5d7a08df1a72453e324a45
Author: Joyee Cheung <joyee@igalia.com>
Date:   Fri Nov 17 12:24:57 2023 +0100

    Ignore flags implied by --predictable in ComputeFlagListHash()
    
    Bug: chromium:1503074
    Change-Id: I8a825e35ddb3e594f59f9ceb1ac20987defa16cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040811
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91061}

commit f5c4e2084716671c5ed0f1580420a93b539834f5
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Nov 17 13:43:18 2023 +0100

    [api] Allow setting non empty handles
    
    This can eliminate a branch in very hot code that sets up the return
    value for embedders.
    
    Bug: chromium:1501315
    Change-Id: I767376fde3d45a811903f9597fe688a99c6b7883
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5039815
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91060}

commit 200df6f6bf1752d9c7c27d8868321fb5c26fef53
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 17 17:14:03 2023 +0100

    [wasm] Pass arguments directly to memory.init
    
    Avoid setting up a stack buffer per C call as those stack buffers are
    not shared and hence blow up the frame.
    
    As this is the first C function with more than four parameters, we need
    to implement logic to push remaining arguments to the stack on platforms
    with less than six parameter registers.
    
    R=thibaudm@chromium.org
    
    Bug: v8:14357
    Change-Id: Id315ce9b5c5127b4889523123a8a3e81c6086aa7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040950
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91059}

commit b9de0f3a7a3d7027a4f0edbbafb2c9cd7c659b20
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Nov 17 14:39:59 2023 +0100

    [exceptions] Abort error message printing on terminate
    
    Prevent trying to print the pending termination exception when a print
    of an error causes termination.
    
    Bug: chromium:1500082
    Change-Id: I5d02cd78f05f763cce3f21a7b2270f10957220c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040991
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91058}

commit 89443325c3de6bd61a520735a0befca302462de2
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Nov 20 08:51:48 2023 -0500

    PPC/S390: Add code comment to CallCFunction
    
    Code comment was never emitted as part of CallCFunction.
    Refer to the comment section of https://crrev.com/c/5038423
    for more details.
    
    Change-Id: I5b6afb3b9ba712f2cc9b0943bec5115646dff92b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5044111
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91057}

commit 6b18ce2e06688b37b8b0c05b69408de66b70122c
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Nov 20 13:59:52 2023 +0100

    [mjsunit][turboshaft] Disable instruction selection if not supported
    
    On win32 we hit a timeout when creating stack traces for the
    UNIMPLEMENTED() calls it hits in the turboshaft instruction selection.
    We don't care about the non-working platforms yet, I only set it to
    FAIL initially to assert that we enable the test case once these
    platforms are indeed supported.
    Otherwise there isn't any disadvantage of just skipping the test for
    these platforms.
    
    Fixed: v8:14472
    Change-Id: I83556ce5fb2524f2fdbdd13fde9dd9162c8c00a0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043731
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91056}

commit f55988d814295f0c8445c3d9230a3966d8005665
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Nov 20 13:22:47 2023 +0100

    [release] Fix version regex for matching roll-revision tags.
    
    No-Try: true
    Bug: chromium:1445862
    Change-Id: Ia19623566a0c4d0c2068ea4f3a5589b56697a230
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5041815
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91055}

commit ce5999e86e234dbd7000989556567a69e1ecafcf
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Mon Nov 20 12:56:04 2023 +0100

    [turboshaft][wasm] Enable loop peeling
    
    Bug: v8:14108
    Change-Id: I360809827d10781efae9354f6eb2354d29e827f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033018
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91054}

commit 35b2f70852a91cb8b298f59f773bdbc39f9449dc
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Nov 20 12:56:16 2023 +0100

    Whitespace change to test patching rolls
    
    No-Try: true
    Bug: chromium:1445862
    Change-Id: I98a316e80ce83ac66a2d4cadcebe858ffcae43cf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5042764
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91053}

commit d6a04055e27d0db9ff672884965f525ab4305f04
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Nov 16 16:58:56 2023 +0100

    Reland "[heap] Merge large allocation code paths"
    
    This is a reland of commit 2ca77f5fc33901e8f6ee356c64fc1f10d9c5c4c6
    
    Now that https://crrev.com/c/5040952 landed again with a fix. This
    CL can reland unchanged.
    
    Original change's description:
    > [heap] Merge large allocation code paths
    >
    > This CL merges large object allocation code paths for main and
    > background threads.
    >
    > Bug: chromium:1480975
    > Change-Id: I641b55561d7a27be6651bb230441ed3aac2e5f41
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033404
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91015}
    
    Bug: chromium:1480975
    Change-Id: I201b8250ceae5938768ddd387c7186b2f5bf4999
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5038712
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91052}

commit ec8e1b42f4aa8b871e842783f871fd532648d9db
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Nov 20 10:25:33 2023 +0100

    [wasm][turboshaft] Make DataView import error messages consistent
    
    Bug: v8:14108
    Change-Id: I03ee8d7f04b169393f9fca7bb7c364fa4efabf25
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040515
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91051}

commit 66e434603c6a92a72605c7ad0bcf170b0c4d497b
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Nov 20 09:13:01 2023 +0100

    [object] Fix ClangTidy performance issues
    
    Spotted by Google3:
    
    - 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character For more info see go/clang_tidy/checks/performance-faster-string-find (2 times)
    
    - loop variable is copied but only used as const reference; consider making it a const reference For more info see go/clang_tidy/checks/performance-for-range-copy (2 times)
    
    - 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop For more info see go/clang_tidy/checks/performance-inefficient-vector-operation
    
    Change-Id: Iea1570f7358fa0c790838fb507e61890d1f5dd2d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5042763
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91050}

commit 01b8b39b5a28dd6e67c6df4a1a5eb520232fc266
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Nov 20 10:20:31 2023 +0100

    [release] Add a safe roll-open message to roll-merge-gerrit
    
    This now hints to the user when to open the auto roller again after
    patching a roll. A concurrent bot resets the ref of what should be
    rolled next. First after this reset, it is safe to open the roller
    as otherwise the auto-roller might eagerly roll to the wrong commit.
    
    This patch now reuses an existing waiting loop for PGO to also wait
    for the correct state of the roll ref.
    
    No-Try: true
    Bug: chromium:1445862
    Change-Id: Ibe283f2ad4b740ebe5d3417718d6b6bb6dd8c072
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043724
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91049}

commit 05d97f50c8adaff7b490d3b0a1540ff5f407fc2b
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Sun Nov 19 13:07:40 2023 +0100

    [release] Add test for roll-merge-gerrit
    
    Bug: chromium:1445862
    Change-Id: I43d2de217eacbd4a22e0dda684500f96f6ccc551
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043202
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#91048}

commit bb02a186649c2cf058d88141e920e18acdb6befd
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Nov 20 07:06:12 2023 +0000

    [sandbox] Fix InterpreterData::BodyDescriptor
    
    Now that InterpreterData is an ExposedTrustedObject, its BodyDescriptor
    must iterate over the 'self' indirect pointer so that e.g. its pointer
    table entry is visited by the garbage collector.
    
    Bug: chromium:1503314
    Change-Id: I27fbe7c074ed3c73b489f681816a5e4d3c6fedcf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043722
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91047}

commit d8d0ab1b13482ec5a93b751faa1e52b485e3353a
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Nov 17 15:23:04 2023 +0100

    [handles] Reuse base::DoublyThreadedList
    
    Reuse DoublyThreadedList for TracedHandles. Immediately unlink full
    blocks on allocation to allow relying on the fact that full blocks are
    not linked in usable blocks.
    
    Bug: chromium:1502777
    Change-Id: I845056a101796fe3429e74c0217df9bfcb0bac5b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040814
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91046}

commit 055e7bcf1d6323cb57cec2b4e922bcc9049d1abd
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Nov 20 09:07:47 2023 +0100

    [compiler] ClangTidy issues
    
    Spotted by Google3:
    
    - the 'empty' method should be used to check for emptiness instead of 'size' For more info see go/clang_tidy/checks/readability-container-size-empty
    
    - loop variable is copied but only used as const reference; consider making it a const reference For more info see go/clang_tidy/checks/performance-for-range-copy (2 times)
    
    Change-Id: If9e7878b7c14bfaaf4981c52adf47766c7c88f80
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5043842
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91045}

commit ab1e39f9c96046869546cb42ed93c33a8b579fe3
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Nov 19 20:11:11 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/51b30fe..2895795
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/e04aba7..bd17576
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/038521e..a96e763
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/79413b1..3715938
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/668c76f..85df028
    
    Roll created at https://cr-buildbucket.appspot.com/build/8763939713973815153
    
    Change-Id: I4b49c2fca0aec42c7ffd1003af94801626f9efb4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5042948
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91044}

commit ed9cba3d0ec0b4a03cb06fd5051b006edd05b859
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Nov 17 20:16:52 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/8918c32..cd2687c
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/7d02c8c..51b30fe
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/bb1266a..e04aba7
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/06c4261..eb48a6a
    
    Rolling v8/third_party/fuchsia-sdk/sdk: version:16.20231110.0.1..version:16.20231117.2.1
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/4399383..038521e
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/d529bb5..79413b1
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/19b1234..668c76f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764120910301028097
    
    Change-Id: I1df3adb61d17459aad460f4c2a159c9c96417a50
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5038576
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91043}

commit 5601ea256b4b3a4fd0772adfd8b028bad5225e6a
Author: Milad Fa <mfarazma@redhat.com>
Date:   Fri Nov 17 11:33:37 2023 -0500

    PPC/s390: [codegen] Avoid redundant code comment
    
    Port b578a2d5fe3fc407b2d63a7f0d0240f3016120dd
    
    Original Commit Message:
    
        We sometimes generated two nested "CallCFunction" comments if one
        CallCFunction method called another one.
        This CL fixes this by only generating a comment in the lowest-level
        method.
    
        It also removes a redundant CallCFunctionHelper method on arm.
    
    R=clemensb@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I05758242ca23566f2f7394b1012a7cfb647fba5a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5038423
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91042}

commit 0da78a49ceddd38910efcd7983e54e99b1166d0a
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Nov 17 17:44:25 2023 +0100

    [asm.js][turboshaft] eliminate unnecessary alignment masks
    
    C++ code compiled to asm.js often contains memory accesses with
    a computed address of the following pattern:
      addr = (C1 + x * C2 + y << C3) & -S
    where S is the size of the access (often 4 bytes), and "& -S"
    serves to align the value, but constants C1, C2, and (1 << C3)
    are already multiples of S, so the alignment-masking is actually
    a no-op.
    This patch ports the required logic from TF to TS to allow the
    compiler to recognize this fact and eliminate the unnecessary
    masking.
    This improves e.g. JetStream2's "float-mm" test by around 20%.
    
    Bug: v8:14108
    Change-Id: I4be6f0464b729c100928c3eb6858d9270e0d2f9d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5034123
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91041}

commit f81077748d41a38d2d3b6a544291f77b28f47c5a
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Nov 17 17:13:22 2023 +0100

    [turboshaft][wasm] Lower loop stack checks right away
    
    Lowering the stack checks on loop back edges immediately during
    graph building allows us to add custom handling for growable
    shared memories to the "interrupt requested" branch, which in turn
    is a prerequisite for enabling Loop Peeling.
    
    Bug: v8:14108
    Change-Id: I7adf38eb93709195d33715f59c6b80d7ec195cdd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040816
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91040}

commit 5e119456e516adf10663cb2e5ee07d6c9b21cc82
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Nov 17 08:09:50 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/3271efb..8918c32
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/1f8329e..f06a19e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764166206993647025
    
    Change-Id: Ib1937c7696ddd2743e10f083baa04e6a4eb24c7d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5038422
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91039}

commit 911c7de73b68e3615e952066417ece5f2d319ddd
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 17 16:15:18 2023 +0000

    [sandbox] Make SFI::trusted_function_data a trusted pointer
    
    This is the follow-up to crrev.com/c/4922343 which introduced the
    trusted_function_data field, but still as a tagged pointer. The field
    must be a trusted pointer field so that it can reference BytecodeArrays
    in trusted space, outside of the sandbox.
    
    Bug: chromium:1490564
    Change-Id: Ifdb946e4ebc3cc4f514c0c47f67133e06197d38f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4932248
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91038}

commit 8c22b422678bc2429fd045d3e94366850b03a6e4
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri Nov 17 09:37:20 2023 +0800

    [loong64][mips64] Reland^5 "[wasm][x64] Run JS imports on the central stack"
    
    Port commit aef80d12d489b55217b63821ce3b0eaca2b5e2ab
    
    Change-Id: I834dd30f01de6a19b2873408791153158e2cccbe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5039870
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91037}

commit e073ebd48598f60f4f531ec6ae00a214b0035053
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Nov 17 13:28:01 2023 +0100

    [objects] Fast TypedArray stores with frozen prototype
    
    TypedArray element stores don't inspect the prototype chain, and
    therefore don't need to check whether there can be readonly elements on
    the prototype chain as part of "override mistake" handling. This means
    we can bail out early in MayHaveReadOnlyElementsInPrototypeChain, and
    allow TypedArray element stores to stay fast and monomorphic even if the
    prototype is frozen.
    
    Bug: chromium:1463387
    Change-Id: Iba09bb181cf58231e3959e2e41e994e5dab6adb1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5037570
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91036}

commit 852a76c0b3c84c007c11813cd20df241dfd7a421
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 17 10:51:37 2023 +0100

    [codegen] Harmonize definition of C parameter registers
    
    Define a {kCArgRegs} array in every platform, and use that instead of
    the {arg_reg_N} (which were incomplete on some platforms anyway).
    The compiler will emit an error if the array is indexed with a
    statically out-of-bounds index.
    
    Bug: v8:14357
    Change-Id: I9605fd7f032f6dc8bb32038e25c922ba0386cdee
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040810
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91035}

commit 46087cf6fe634dcd189cc01bcafef39cc0dad4df
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 17 14:54:40 2023 +0000

    [sandbox] Reference InterpreterData via SFI::trusted_function_data
    
    InterpreterData is a trusted object and therefore should move into
    trusted space. For that, it needs to be referenced from inside the
    sandbox through a trusted pointer (so use a pointer table indirection).
    This CL takes care of that for the reference from SharedFunctionInfo.
    
    Bug: chromium:1502461
    Change-Id: I6abd818ea040597667d487fc6501b7ef709dbbc0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5034002
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91034}

commit b578a2d5fe3fc407b2d63a7f0d0240f3016120dd
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 17 13:57:36 2023 +0100

    [codegen] Avoid redundant code comment
    
    We sometimes generated two nested "CallCFunction" comments if one
    CallCFunction method called another one.
    This CL fixes this by only generating a comment in the lowest-level
    method.
    
    It also removes a redundant CallCFunctionHelper method on arm.
    
    R=thibaudm@chromium.org
    
    Bug: v8:14357
    Change-Id: I7bdac39517acf14d2d6f1fb96b4b6f47fc98b369
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033267
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91033}

commit 9c15d9a7e8876ccc2641628201817158b2b18a19
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Nov 17 14:37:52 2023 +0100

    [wasm][turboshaft] Refactor error builtins for DataView operations
    
    The well-known DataView imports (getters, setters, byteLength operation)
    can throw 3 types of errors (incompatible receiver TypeError, detached
    buffer TypeError and OOB RangeError). When an error occurs, a specific
    error message containing the import's type appears in the stack trace.
    Previously, we had a separate builtin for each error and each import,
    as we couldn't easily pass the import's type as a parameter. This
    resulted in 60+ builtins.
    
    This CL adds a field to the isolate_data that can be used to pass the
    type of the import. With this change there are only 3 builtins for
    error, one for each type of error.
    
    Bug: v8:14108
    Change-Id: Ic204c53433b8ba930df1be39ce37f41eae174431
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033998
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91032}

commit ff2d0bb14d0796c7ad9e071b7043bcf9923628ee
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri Nov 17 14:55:24 2023 +0100

    [wasm][exnref] Fix catch after catch-all
    
    Stop generating catches after the first catch-all. This is syntactically
    allowed, but semantically a no-op.
    This fixes a bug in the Turboshaft interface. The next handler expects a
    new label in the try block, which the catch-all block does not create.
    
    R=manoskouk@chromium.org
    
    Bug: v8:14398,chromium:1502837
    Change-Id: I8c9bb66c53a4c6e3a9e8a572ae2729222f09929a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040813
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91031}

commit 1cb820f3a428c9f88f585971c872e3e32291f687
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Nov 17 15:09:05 2023 +0100

    Reland "[turboshaft][arm64] Port InstructionSelector part 6"
    
    This is a reland of commit e90dc6639d6ef470559410497c7f66fe43435412
    
    Fixes applied in the reland:
    - Convert constant offsets in the LoadOp and StoreOp to a constant index
      input on arm64 and related platforms as part of the
      LoadStoreSimplificationReducer.
    - Simplify instruction selection that now doesn't have to care about
      offsets any more and only handles the index input for loads and
      stores.
    
    Original change's description:
    > [turboshaft][arm64] Port InstructionSelector part 6
    >
    > This CL adds handling for store operations and other needed code paths
    > for creating, setting and reading wasm arrays.
    >
    > Bug: v8:12783
    > Change-Id: I417ec9c112fd925840bffb574e9aaa78dada009f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029863
    > Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91002}
    
    Bug: v8:12783
    Change-Id: I7b5fe7c04a7943f59e7cb9236f8abbae698f511a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033416
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91030}

commit 557cdfb6ce4b05eb100d335878e9c5780bec67ba
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 17 09:30:00 2023 +0000

    [sandbox] Introduce CodeWrapper type
    
    Similar to the BytecodeWrapper type (introduced in crrev.com/c/4993365),
    this is a HeapObject that contains a code pointer to the real Code
    object. While the Code object will move out of the sandbox and into
    trusted space, the wrapper object will remain inside the sandbox and can
    therefore for example be used in situations where a reference to a Code
    object needs to be stored in a collection of tagged values, such as a
    FixedArray. There is a 1:1 relationship between Code and CodeWrapper.
    
    Bug: chromium:1500887
    Change-Id: I94d5a201f2ed02f91fc2d1adbd6554b5fa6f3cef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017768
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91029}

commit 42df7329ed0fb1e47aa93a159d7b820c44124a31
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 17 14:40:23 2023 +0100

    Reland "[heap] Merge StartIncrementalMarkingIfLimitIsReached for all threads"
    
    This is a reland of commit d05fed47b7154915a52dbaddf3d76a5f4dc82347
    
    This CL fixes the race by only performing this check on the main
    thread.
    
    Original change's description:
    > [heap] Merge StartIncrementalMarkingIfLimitIsReached for all threads
    >
    > Merge this method for main and background threads. The method now
    > gets the LocalHeap as an argument to decide whether it currently
    > runs on a main or background thread.
    >
    > As soon as the hard limit is reached, incremental marking starts
    > right away on the main thread. However marking can not be started
    > on a background thread, so on such threads marking is lazily
    > started on the main thread both through a stack guard and posting a
    > task.
    >
    > Note that this changes behavior in ConcurrentAllocator. So far this
    > Allocator always used the background thread version of this method.
    > And in that version marking was never started right away even on the
    > main thread.
    >
    > This means that we now need to change order and invoke this method
    > before the allocation like we already do on the main thread in order
    > for black allocation to work. It also means that incremental marking
    > could start in situations where we didn't expect it so far (see changes
    > in tests for this).
    >
    > Bug: chromium:1480975
    > Change-Id: I02460e07fc159a443e5e2ba00e48e988707cdcbb
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030192
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90994}
    
    Bug: chromium:1480975
    Change-Id: I94c3a85194cfe6757cbada925d7f57e03a317a1f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040952
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91028}

commit bac7ff2dc72ece84af1d61a6ca03b040206e9336
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 17 08:57:30 2023 +0100

    Reland "[heap] Remove Heap::IsSharedMainThread()"
    
    This is a reland of commit 26e179f558de8933470cd3799298d99a85af4d77
    
    The reland moved the TRACE_GC scope in
    Heap::IterateConservativeStackRoots() to its callers to fix the
    only use case left for IsSharedHeapMain().
    
    Original change's description:
    > [heap] Remove Heap::IsSharedMainThread()
    >
    > This was only necessary with shared isolate GCs but now that we
    > switched to the shared space isolate approach we can be more strict
    > again.
    >
    > Bug: chromium:1480975
    > Change-Id: I5d7a24e186dcd6521329675a7d780168cfabbf13
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033261
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91014}
    
    Bug: chromium:1480975
    Change-Id: I7f7358052e978293a9904b911f4250596de5e546
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040511
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91027}

commit c33c23f36fdd2b9ce3db1af221b6d1bbc06dad7f
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Nov 17 13:22:35 2023 +0100

    [handles] Only flush empty TracedNodeBlocks on memory reducing GCs
    
    Similar to other caches, maintain the cache of empty node blocks
    throughout regular GCs.
    
    Bug: chromium:1502777
    Change-Id: I64aec575185355664d052d693b96f227146056c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5039814
    Auto-Submit: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91026}

commit 0d64ceb69b3bc999dcc66162042bb2fe29677d28
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 17 12:54:27 2023 +0000

    Revert "[heap] Merge StartIncrementalMarkingIfLimitIsReached for all threads"
    
    This reverts commit d05fed47b7154915a52dbaddf3d76a5f4dc82347.
    
    Reason for revert: Discovered non-trivial race in
    https://logs.chromium.org/logs/v8/buildbucket/cr-buildbucket/8764183817836406497/+/u/Num_Fuzz_-_delay/box2d
    
    Original change's description:
    > [heap] Merge StartIncrementalMarkingIfLimitIsReached for all threads
    >
    > Merge this method for main and background threads. The method now
    > gets the LocalHeap as an argument to decide whether it currently
    > runs on a main or background thread.
    >
    > As soon as the hard limit is reached, incremental marking starts
    > right away on the main thread. However marking can not be started
    > on a background thread, so on such threads marking is lazily
    > started on the main thread both through a stack guard and posting a
    > task.
    >
    > Note that this changes behavior in ConcurrentAllocator. So far this
    > Allocator always used the background thread version of this method.
    > And in that version marking was never started right away even on the
    > main thread.
    >
    > This means that we now need to change order and invoke this method
    > before the allocation like we already do on the main thread in order
    > for black allocation to work. It also means that incremental marking
    > could start in situations where we didn't expect it so far (see changes
    > in tests for this).
    >
    > Bug: chromium:1480975
    > Change-Id: I02460e07fc159a443e5e2ba00e48e988707cdcbb
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030192
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90994}
    
    Bug: chromium:1480975
    Change-Id: Iba59d168679113f1fa67691ea26ac7c732324595
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040951
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91025}

commit ab20a78dabcfd4143e9dd709d812a85b35f4b068
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 17 12:52:25 2023 +0000

    Revert "[heap] Merge large allocation code paths"
    
    This reverts commit 2ca77f5fc33901e8f6ee356c64fc1f10d9c5c4c6.
    
    Reason for revert: Discovered a non-trival race in
    Heap::StartIncrementalMarkingIfAllocationLimitIsReached.
    
    Original change's description:
    > [heap] Merge large allocation code paths
    >
    > This CL merges large object allocation code paths for main and
    > background threads.
    >
    > Bug: chromium:1480975
    > Change-Id: I641b55561d7a27be6651bb230441ed3aac2e5f41
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033404
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91015}
    
    Bug: chromium:1480975
    Change-Id: I8cb1dc898dfe061333f15688eb249b7ba0fcd852
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040513
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91024}

commit 6dd92642e28ca7b70933b1a34bcb18459c298b75
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 17 12:49:09 2023 +0000

    Revert "[heap] Switch some spaces in LocalHeap to MainAllocator"
    
    This reverts commit 202fe945b985f68287d5b5cc0abb0208e81533ea.
    
    Reason for revert: Discovered a non-trival race in
    Heap::StartIncrementalMarkingIfAllocationLimitIsReached.
    
    Original change's description:
    > [heap] Switch some spaces in LocalHeap to MainAllocator
    >
    > This CL switches the ConcurrentAllocator instances in LocalHeap
    > to MainAllocator for the old, code and trusted spaces.
    >
    > The shared space will be addressed in a follow-up.
    >
    > Bug: chromium:1480975
    > Change-Id: I515482c716acbab03b05f2cfe705d3634797f42d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040512
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91021}
    
    Bug: chromium:1480975
    Change-Id: I6a94b3301be238618195e5f27bc454dbb184aa79
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040990
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91023}

commit 40149fca55887356fce39264a74b73bc04a5ccb2
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 17 11:05:13 2023 +0000

    [sandbox] Add support for kUnknownIndirectPointerTag in assemblers
    
    We'll soon need to support it when converting SFI::trusted_function_data
    into a trusted pointer field as that field can reference different
    trusted objects, such as Code and BytecodeArray.
    
    Bug: chromium:1473677
    Change-Id: I8d6a73aaa7b59366564a779d76c13362533b3382
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033997
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91022}

commit 202fe945b985f68287d5b5cc0abb0208e81533ea
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 17 11:40:04 2023 +0100

    [heap] Switch some spaces in LocalHeap to MainAllocator
    
    This CL switches the ConcurrentAllocator instances in LocalHeap
    to MainAllocator for the old, code and trusted spaces.
    
    The shared space will be addressed in a follow-up.
    
    Bug: chromium:1480975
    Change-Id: I515482c716acbab03b05f2cfe705d3634797f42d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040512
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91021}

commit c9dcfbdf5a79678896d0cdf9b243bada4fc1f4c7
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Nov 16 17:24:20 2023 +0100

    [turboshaft] Use proper AbortReason in type assertions
    
    The previous `unreachable` in the type asserting builtins caused
    issues for clusterfuzz to file meaningful reports. This CL
    introduces a proper AbortReason that helps producing a recognizable
    error message.
    
    Bug: v8:12783
    Change-Id: I67c271f1e38e1cb9a6daf81e33aeb044c1a4c7ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033608
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91020}

commit de30b11c795ede486e8ea4a8cb1824c56be867e9
Author: Jérôme Vouillon <jerome.vouillon@gmail.com>
Date:   Thu Nov 16 20:33:19 2023 +0100

    [wasm] Fix Wasm code cache
    
    Make sure there is not attempt to clear the cache before deleting it.
    
    Fixed: v8:14463,v8:14465
    Change-Id: I4e773eb621a96f56907e8c4d20aa7129a56c3847
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5038510
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91019}

commit d78a1463ee0b96e36ae1702a6f1a1b37c5882481
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Nov 16 09:19:09 2023 +0100

    [objects] Turn DCHECK into CHECK for IsCompiledScope
    
    Ensure that this condition holds in production as well. The
    condition is relatively cheap and not on the hottest code path.
    
    Bug: v8:13842
    Change-Id: I83782b8f9d825ec1f7aa6ea35d78d52273e476ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5034001
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91018}

commit 8a946ac6e820a3e4f22abb89a8d0c7ce09ec1196
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 17 09:23:57 2023 +0100

    [heap] Fix race in IncrementalMarkingLimitReached
    
    max_marking_limit_reached_ now needs to be updated atomically, since
    it is now also updated from background threads.
    
    Bug: v8:14467
    Change-Id: I7b963ead182b58b893589df41b046952850d12cf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5040630
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91017}

commit 20179b9452c638f8f91438efc0c9381f1940baf2
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 17 07:35:20 2023 +0000

    Revert "[heap] Remove Heap::IsSharedMainThread()"
    
    This reverts commit 26e179f558de8933470cd3799298d99a85af4d77.
    
    Reason for revert: Breaks CSS build.
    
    Original change's description:
    > [heap] Remove Heap::IsSharedMainThread()
    >
    > This was only necessary with shared isolate GCs but now that we
    > switched to the shared space isolate approach we can be more strict
    > again.
    >
    > Bug: chromium:1480975
    > Change-Id: I5d7a24e186dcd6521329675a7d780168cfabbf13
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033261
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91014}
    
    Bug: chromium:1480975
    Change-Id: I4f7f97b83fa3046b18eddeb46a071b400d7ce5c5
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5038751
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91016}

commit 2ca77f5fc33901e8f6ee356c64fc1f10d9c5c4c6
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Nov 16 16:58:56 2023 +0100

    [heap] Merge large allocation code paths
    
    This CL merges large object allocation code paths for main and
    background threads.
    
    Bug: chromium:1480975
    Change-Id: I641b55561d7a27be6651bb230441ed3aac2e5f41
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033404
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91015}

commit 26e179f558de8933470cd3799298d99a85af4d77
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Nov 15 16:59:16 2023 +0100

    [heap] Remove Heap::IsSharedMainThread()
    
    This was only necessary with shared isolate GCs but now that we
    switched to the shared space isolate approach we can be more strict
    again.
    
    Bug: chromium:1480975
    Change-Id: I5d7a24e186dcd6521329675a7d780168cfabbf13
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033261
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91014}

commit 1ddf4be70d2f7df122b72d37cb026f39f9626146
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Nov 16 20:17:26 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/2e760d5..3271efb
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/b46041d..bb1266a
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/df3e577..06c4261
    
    Rolling v8/third_party/instrumented_libraries: https://chromium.googlesource.com/chromium/src/third_party/instrumented_libraries/+log/77706d9..0011c28
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/0226cb1..d529bb5
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/7b9fd7a..19b1234
    
    Rolling v8/third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/dfc48fc..5daffc7
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764211504078750641
    
    Change-Id: I7a653ffd8b74a1b3e7c49b7a21b19321afb20973
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5038284
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91013}

commit f95794ade0b45eabf738e35fd363dca6ce7642cc
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Nov 17 10:53:46 2023 +0800

    [riscv]Reland^5 "[wasm][x64] Run JS imports on the central stack"
    
    Port commit aef80d12d489b55217b63821ce3b0eaca2b5e2ab
    
    Change-Id: I48e29762125a9cb568e0242b903fc6112d035c15
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5038248
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91012}

commit bf9318f5a59347042ccc393e9f9b102b7e7abf7e
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Nov 17 10:42:48 2023 +0800

    [riscv] Port InstructionSelector part 3
    
    Port commit d88fb0fc348dffc6193958be997c4406fb9ff856
    
    Bug: v8:12783
    Change-Id: Ia6b6b5cd67712e677c71709edd3d3c41d9f4449e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5037923
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#91011}

commit 502b1ffc3a3f7050f068f7a5d1d031d56324c03a
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Nov 16 15:21:23 2023 -0500

    PPC/s390: Reland^5 "[wasm][x64] Run JS imports on the central stack"
    
    Port aef80d12d489b55217b63821ce3b0eaca2b5e2ab
    
    Original Commit Message:
    
        This is a reland of commit 3ebc66786099800b9c7170fc6e72eb59298dfb7c
        The last revert also reverted one of the previous fixes, which
        was landed separately so it was not included in the reland...
        Just skip the stack-switching-generic-wrapper test again on
        single_generation.
    
        Original change's description:
        > Reland^4 "[wasm][x64] Run JS imports on the central stack"
        >
        > This is a reland of commit be830f359c50f21db867f7e6f430124af314e0db
        > Clang inlining heuristics caused a stack-overflow in mksnapshot.
        > This is fixed separately here:
        > https://chromium-review.googlesource.com/c/v8/v8/+/5033408/1
        > So this is relanded without any changes.
        >
        > Original change's description:
        > > Reland^3 "[wasm][x64] Run JS imports on the central stack"
        > >
        > > This is a reland of commit 2d6e2bd5293624379214d831cdf82a336b820828
        > > The stack-switching test uses %SimulateNewspaceFull, which is
        > > incompatible with the single-generation flag, so just skip the test
        > > in this case.
        > >
        > > Original change's description:
        > > > Reland "Reland "[wasm][x64] Run JS imports on the central stack""
        > > >
        > > > This is a reland of commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
        > > >
        > > > Builtins should have the same IR shape on all platforms for PGO. The
        > > > wasm-to-js torque wrapper was different on x64 because of a compile-time
        > > > guard, which is fixed by turning it into an IR check. The check will
        > > > eventually be removed when this is ported to other archs.
        > > >
        > > > Original change's description:
        > > > > Reland "[wasm][x64] Run JS imports on the central stack"
        > > > >
        > > > > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
        > > > >
        > > > > The reland includes:
        > > > >
        > > > > - Ignore secondary stacks for conservative scanning. Now that we always
        > > > >   switch to the central stack, all "interesting" frames are on the
        > > > >   central stack.  Without this change, the marker is not in sync with
        > > > >   the stack start because of the switch to the central stack.
        > > > > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
        > > > >   because landing them separately also breaks the CSS bot. I think this
        > > > >   was already broken before but reproduces more easily with this change.
        > > > >   The problem is that because of the switch to the central stack, the
        > > > >   marker is not in sync with the registered secondary stack start.
        > > > > - Also switch in the generic (torque) wrapper.
        > > > >
        > > > > Original change's description:
        > > > > > [wasm][x64] Run JS imports on the central stack
        > > > > >
        > > > > > Switch to the central stack before running a JS import, and switch
        > > > > > back after the call. Only on x64 for now, will be ported to other archs
        > > > > > in a separate CL.
        > > > > >
        > > > > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
        > > > > >
        > > > > > R=ahaas@chromium.org
        > > > > > CC=irezvov@chromium.org
        > > > > >
        > > > > > Bug: v8:13983
        > > > > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
        > > > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
        > > > > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
        > > > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
        > > > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
        > > > > > Cr-Commit-Position: refs/heads/main@{#90041}
        > > > >
        > > > > Bug: v8:13983
        > > > > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
        > > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
        > > > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
        > > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
        > > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
        > > > > Cr-Commit-Position: refs/heads/main@{#90864}
        > > >
        > > > Bug: v8:13983
        > > > Change-Id: I4808e17bcaafc309bd0c40c0705bee3fa52528c0
        > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022950
        > > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
        > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
        > > > Cr-Commit-Position: refs/heads/main@{#90879}
        > >
        > > Bug: v8:13983
        > > Change-Id: I5e19a1759ffb56b8d38231cb1b3b5c9742ffc90c
        > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024199
        > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
        > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
        > > Cr-Commit-Position: refs/heads/main@{#90889}
        >
        > Bug: v8:13983
        > Change-Id: Ib3d83ba10a477b00a8bfe94ac5b98a5a3f6ccc43
        > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033021
        > Reviewed-by: Igor Sheludko <ishell@chromium.org>
        > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
        > Cr-Commit-Position: refs/heads/main@{#90997}
    
    R=thibaudm@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I2dc7cecdbacfaa5e3b739aab639123247e87c797
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5038671
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#91010}

commit 6d625a904b22dccfe11bbe038c9e3083bffb744a
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed Nov 15 10:57:24 2023 -0800

    [isolate] Use unique_ptr for tables owned by the shared space isolate
    
    Bug: v8:12547
    Change-Id: I229c05c295468915f232f9fac106dd71131b4932
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5034706
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91009}

commit b4eb7576daa76e0db83316946b3af3f691cd9540
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed Nov 15 16:57:06 2023 -0800

    [change-array-by-copy] Remove flag
    
    The feature has shipped since 11.0
    
    Bug: v8:12764
    Change-Id: I15eda0d9b8da09cc4ae32791a9823fe3484108d0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5035578
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91008}

commit aef80d12d489b55217b63821ce3b0eaca2b5e2ab
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Nov 16 17:02:58 2023 +0100

    Reland^5 "[wasm][x64] Run JS imports on the central stack"
    
    This is a reland of commit 3ebc66786099800b9c7170fc6e72eb59298dfb7c
    The last revert also reverted one of the previous fixes, which
    was landed separately so it was not included in the reland...
    Just skip the stack-switching-generic-wrapper test again on
    single_generation.
    
    Original change's description:
    > Reland^4 "[wasm][x64] Run JS imports on the central stack"
    >
    > This is a reland of commit be830f359c50f21db867f7e6f430124af314e0db
    > Clang inlining heuristics caused a stack-overflow in mksnapshot.
    > This is fixed separately here:
    > https://chromium-review.googlesource.com/c/v8/v8/+/5033408/1
    > So this is relanded without any changes.
    >
    > Original change's description:
    > > Reland^3 "[wasm][x64] Run JS imports on the central stack"
    > >
    > > This is a reland of commit 2d6e2bd5293624379214d831cdf82a336b820828
    > > The stack-switching test uses %SimulateNewspaceFull, which is
    > > incompatible with the single-generation flag, so just skip the test
    > > in this case.
    > >
    > > Original change's description:
    > > > Reland "Reland "[wasm][x64] Run JS imports on the central stack""
    > > >
    > > > This is a reland of commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
    > > >
    > > > Builtins should have the same IR shape on all platforms for PGO. The
    > > > wasm-to-js torque wrapper was different on x64 because of a compile-time
    > > > guard, which is fixed by turning it into an IR check. The check will
    > > > eventually be removed when this is ported to other archs.
    > > >
    > > > Original change's description:
    > > > > Reland "[wasm][x64] Run JS imports on the central stack"
    > > > >
    > > > > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
    > > > >
    > > > > The reland includes:
    > > > >
    > > > > - Ignore secondary stacks for conservative scanning. Now that we always
    > > > >   switch to the central stack, all "interesting" frames are on the
    > > > >   central stack.  Without this change, the marker is not in sync with
    > > > >   the stack start because of the switch to the central stack.
    > > > > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
    > > > >   because landing them separately also breaks the CSS bot. I think this
    > > > >   was already broken before but reproduces more easily with this change.
    > > > >   The problem is that because of the switch to the central stack, the
    > > > >   marker is not in sync with the registered secondary stack start.
    > > > > - Also switch in the generic (torque) wrapper.
    > > > >
    > > > > Original change's description:
    > > > > > [wasm][x64] Run JS imports on the central stack
    > > > > >
    > > > > > Switch to the central stack before running a JS import, and switch
    > > > > > back after the call. Only on x64 for now, will be ported to other archs
    > > > > > in a separate CL.
    > > > > >
    > > > > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
    > > > > >
    > > > > > R=ahaas@chromium.org
    > > > > > CC=irezvov@chromium.org
    > > > > >
    > > > > > Bug: v8:13983
    > > > > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
    > > > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
    > > > > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > > > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > > > > Cr-Commit-Position: refs/heads/main@{#90041}
    > > > >
    > > > > Bug: v8:13983
    > > > > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
    > > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
    > > > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > > Cr-Commit-Position: refs/heads/main@{#90864}
    > > >
    > > > Bug: v8:13983
    > > > Change-Id: I4808e17bcaafc309bd0c40c0705bee3fa52528c0
    > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022950
    > > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > Cr-Commit-Position: refs/heads/main@{#90879}
    > >
    > > Bug: v8:13983
    > > Change-Id: I5e19a1759ffb56b8d38231cb1b3b5c9742ffc90c
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024199
    > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90889}
    >
    > Bug: v8:13983
    > Change-Id: Ib3d83ba10a477b00a8bfe94ac5b98a5a3f6ccc43
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033021
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90997}
    
    Bug: v8:13983
    Change-Id: I13f55a0ff07997dbe7ec2d3973c0a77237bfb350
    Cq-Include-Trybots: luci.v8.try:v8_linux64_single_generation_dbg,v8_linux64_css_dbg
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033607
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91007}

commit 1d9f4e82cacd7a52e04d5bc452d56a23e5385ca0
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Fri Nov 10 13:14:09 2023 -0800

    Reland "[json] Use Tagged_t rather than Handles in SimplePropertyKeyCache"
    
    Changes since original:
    1. Update to use Tagged<T> instead of plain T
    2. Avoid DCHECK failures by cleaning up any in-progress instances of
       SimplePropertyKeyCache during Shell::OnExit
    
    Original change's description:
    > [json] Use Tagged_t rather than Handles in SimplePropertyKeyCache
    >
    > My recent change https://crrev.com/c/4775988 introduced a cache of
    > recently used property keys as a speed optimization. However, when
    > serializing very small amounts of data, the cost of setting up this
    > cache caused notable slowdowns. This showed up in uglify-js-wtb, which
    > frequently calls JSON.stringify on one-character strings.
    >
    > This change updates SimplePropertyKeyCache to use an array of Tagged_t
    > values rather than an array of Handles, because zeroing a block of stack
    > memory is much faster than allocating a bunch of Handles.
    >
    > Bug: v8:13955, chromium:1475961
    > Change-Id: I297d51c3b707473d42656c714ef540b076ad0ac9
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4813976
    > Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    > Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    > Cr-Commit-Position: refs/heads/main@{#89658}
    
    Bug: v8:13955, chromium:1475961
    Change-Id: I7519f18548043a1df61dd42af657fcd407733143
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4854536
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91006}

commit bad035afda756aca13c97d7f2ef2d119a97def34
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Nov 16 17:26:48 2023 +0100

    [heap] Unprotect page header in FreeLinearAllocationArea
    
    UpdateHighWaterMark() already writes to the page header. Needed for
    code object allocations.
    
    Bug: chromium:1480975
    Change-Id: I31bf80dd79d0d6ac5e8d2c6e812fc4836e5024e8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5037571
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91005}

commit 8765646cfe1e66313520f2ff5b09dc539fde2d3a
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Nov 16 16:49:52 2023 +0000

    Revert "[turboshaft][arm64] Port InstructionSelector part 6"
    
    This reverts commit e90dc6639d6ef470559410497c7f66fe43435412.
    
    Reason for revert: Failing https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20arm64%20-%20sim%20-%20no%20pointer%20compression/7162/overview
    
    Original change's description:
    > [turboshaft][arm64] Port InstructionSelector part 6
    >
    > This CL adds handling for store operations and other needed code paths
    > for creating, setting and reading wasm arrays.
    >
    > Bug: v8:12783
    > Change-Id: I417ec9c112fd925840bffb574e9aaa78dada009f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029863
    > Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#91002}
    
    Bug: v8:12783
    Change-Id: Ia9865d7f59ba6010cd573066a390ff54c25514e8
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5037572
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91004}

commit 71ac28fc424bbd5bcb3c100c5ea3e97dc2bfe9ca
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Nov 16 08:05:33 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/cacb5e6..2e760d5
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/b20d1ec..7d02c8c
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/5cbc521..df3e577
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/5b600ba..4399383
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764256805539866081
    
    Change-Id: Ic7419ec7d5ae938d88220e6c248bfeab6f711fac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5037510
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#91003}

commit e90dc6639d6ef470559410497c7f66fe43435412
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Nov 16 12:05:44 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 6
    
    This CL adds handling for store operations and other needed code paths
    for creating, setting and reading wasm arrays.
    
    Bug: v8:12783
    Change-Id: I417ec9c112fd925840bffb574e9aaa78dada009f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029863
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91002}

commit 746cc3073e085c9b25d96364ad6e045193b4c69a
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Nov 16 15:25:39 2023 +0100

    [wasm] Assign unique_ptr to shared_ptr directly
    
    shared_ptr has an assignment operator from unique_ptr, so use that
    instead of manually releasing the pointer and copying over the deleter.
    
    R=jkummerow@chromium.org
    
    Change-Id: Ie29ea5d2edb523af9ef830081566a4699ba99a21
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033410
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91001}

commit 547a9e7986e7c887e6b6afa86affe8e946a66ea0
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Nov 16 16:33:03 2023 +0100

    [turboshaft][wasm] Fix in WasmLoadElimination
    
    We should look up the `string()` argument of a `ProcessStringAsWtf16` operation, and not the operation itself.
    
    Bug: v8:14108
    Change-Id: I66450938c1ab39e11ddf8b945446e0e7968b50ca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033019
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#91000}

commit 51e26ceb0762cb1349fe2d3cd0147bd2702df084
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Thu Nov 16 11:08:15 2023 +0100

    Move DoublyThreadedList to base/
    
    Move DoublyThreadedList from TS to base to be able to reuse it in
    TracedHandles. This is a pure move, not changing any APIs or semantics
    of DoublyThreadedList.
    
    Bug: chromium:1502777
    Change-Id: I8caed94a9f33f75bb8e07b03fd75cf3b227e3c21
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033668
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90999}

commit 8081d32346551df2bf06e29899472d1371318c66
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Nov 16 15:52:55 2023 +0000

    Revert "Reland^4 "[wasm][x64] Run JS imports on the central stack""
    
    This reverts commit 3ebc66786099800b9c7170fc6e72eb59298dfb7c.
    
    Reason for revert: Failures on https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20single%20generation/12549/overview
    
    Original change's description:
    > Reland^4 "[wasm][x64] Run JS imports on the central stack"
    >
    > This is a reland of commit be830f359c50f21db867f7e6f430124af314e0db
    > Clang inlining heuristics caused a stack-overflow in mksnapshot.
    > This is fixed separately here:
    > https://chromium-review.googlesource.com/c/v8/v8/+/5033408/1
    > So this is relanded without any changes.
    >
    > Original change's description:
    > > Reland^3 "[wasm][x64] Run JS imports on the central stack"
    > >
    > > This is a reland of commit 2d6e2bd5293624379214d831cdf82a336b820828
    > > The stack-switching test uses %SimulateNewspaceFull, which is
    > > incompatible with the single-generation flag, so just skip the test
    > > in this case.
    > >
    > > Original change's description:
    > > > Reland "Reland "[wasm][x64] Run JS imports on the central stack""
    > > >
    > > > This is a reland of commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
    > > >
    > > > Builtins should have the same IR shape on all platforms for PGO. The
    > > > wasm-to-js torque wrapper was different on x64 because of a compile-time
    > > > guard, which is fixed by turning it into an IR check. The check will
    > > > eventually be removed when this is ported to other archs.
    > > >
    > > > Original change's description:
    > > > > Reland "[wasm][x64] Run JS imports on the central stack"
    > > > >
    > > > > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
    > > > >
    > > > > The reland includes:
    > > > >
    > > > > - Ignore secondary stacks for conservative scanning. Now that we always
    > > > >   switch to the central stack, all "interesting" frames are on the
    > > > >   central stack.  Without this change, the marker is not in sync with
    > > > >   the stack start because of the switch to the central stack.
    > > > > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
    > > > >   because landing them separately also breaks the CSS bot. I think this
    > > > >   was already broken before but reproduces more easily with this change.
    > > > >   The problem is that because of the switch to the central stack, the
    > > > >   marker is not in sync with the registered secondary stack start.
    > > > > - Also switch in the generic (torque) wrapper.
    > > > >
    > > > > Original change's description:
    > > > > > [wasm][x64] Run JS imports on the central stack
    > > > > >
    > > > > > Switch to the central stack before running a JS import, and switch
    > > > > > back after the call. Only on x64 for now, will be ported to other archs
    > > > > > in a separate CL.
    > > > > >
    > > > > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
    > > > > >
    > > > > > R=ahaas@chromium.org
    > > > > > CC=irezvov@chromium.org
    > > > > >
    > > > > > Bug: v8:13983
    > > > > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
    > > > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
    > > > > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > > > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > > > > Cr-Commit-Position: refs/heads/main@{#90041}
    > > > >
    > > > > Bug: v8:13983
    > > > > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
    > > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
    > > > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > > Cr-Commit-Position: refs/heads/main@{#90864}
    > > >
    > > > Bug: v8:13983
    > > > Change-Id: I4808e17bcaafc309bd0c40c0705bee3fa52528c0
    > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022950
    > > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > Cr-Commit-Position: refs/heads/main@{#90879}
    > >
    > > Bug: v8:13983
    > > Change-Id: I5e19a1759ffb56b8d38231cb1b3b5c9742ffc90c
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024199
    > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90889}
    >
    > Bug: v8:13983
    > Change-Id: Ib3d83ba10a477b00a8bfe94ac5b98a5a3f6ccc43
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033021
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90997}
    
    Bug: v8:13983
    Change-Id: I58f7186c6af35bc603fb74e0de7669d378cd718e
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033606
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Owners-Override: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90998}

commit 3ebc66786099800b9c7170fc6e72eb59298dfb7c
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Nov 16 14:40:19 2023 +0100

    Reland^4 "[wasm][x64] Run JS imports on the central stack"
    
    This is a reland of commit be830f359c50f21db867f7e6f430124af314e0db
    Clang inlining heuristics caused a stack-overflow in mksnapshot.
    This is fixed separately here:
    https://chromium-review.googlesource.com/c/v8/v8/+/5033408/1
    So this is relanded without any changes.
    
    Original change's description:
    > Reland^3 "[wasm][x64] Run JS imports on the central stack"
    >
    > This is a reland of commit 2d6e2bd5293624379214d831cdf82a336b820828
    > The stack-switching test uses %SimulateNewspaceFull, which is
    > incompatible with the single-generation flag, so just skip the test
    > in this case.
    >
    > Original change's description:
    > > Reland "Reland "[wasm][x64] Run JS imports on the central stack""
    > >
    > > This is a reland of commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
    > >
    > > Builtins should have the same IR shape on all platforms for PGO. The
    > > wasm-to-js torque wrapper was different on x64 because of a compile-time
    > > guard, which is fixed by turning it into an IR check. The check will
    > > eventually be removed when this is ported to other archs.
    > >
    > > Original change's description:
    > > > Reland "[wasm][x64] Run JS imports on the central stack"
    > > >
    > > > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
    > > >
    > > > The reland includes:
    > > >
    > > > - Ignore secondary stacks for conservative scanning. Now that we always
    > > >   switch to the central stack, all "interesting" frames are on the
    > > >   central stack.  Without this change, the marker is not in sync with
    > > >   the stack start because of the switch to the central stack.
    > > > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
    > > >   because landing them separately also breaks the CSS bot. I think this
    > > >   was already broken before but reproduces more easily with this change.
    > > >   The problem is that because of the switch to the central stack, the
    > > >   marker is not in sync with the registered secondary stack start.
    > > > - Also switch in the generic (torque) wrapper.
    > > >
    > > > Original change's description:
    > > > > [wasm][x64] Run JS imports on the central stack
    > > > >
    > > > > Switch to the central stack before running a JS import, and switch
    > > > > back after the call. Only on x64 for now, will be ported to other archs
    > > > > in a separate CL.
    > > > >
    > > > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
    > > > >
    > > > > R=ahaas@chromium.org
    > > > > CC=irezvov@chromium.org
    > > > >
    > > > > Bug: v8:13983
    > > > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
    > > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
    > > > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > > > Cr-Commit-Position: refs/heads/main@{#90041}
    > > >
    > > > Bug: v8:13983
    > > > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
    > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
    > > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > Cr-Commit-Position: refs/heads/main@{#90864}
    > >
    > > Bug: v8:13983
    > > Change-Id: I4808e17bcaafc309bd0c40c0705bee3fa52528c0
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022950
    > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90879}
    >
    > Bug: v8:13983
    > Change-Id: I5e19a1759ffb56b8d38231cb1b3b5c9742ffc90c
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024199
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90889}
    
    Bug: v8:13983
    Change-Id: Ib3d83ba10a477b00a8bfe94ac5b98a5a3f6ccc43
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033021
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90997}

commit a619087d49b84eb2f98c7c13d5329c34eca17bde
Author: Yoav Weiss <yoavweiss@chromium.org>
Date:   Mon Nov 13 17:49:22 2023 +0000

    Add continuation preserved embedder data to Isolate
    
    We want to move the continuation preserved embedder data from the
    Context to the Isolate.
    This CL is the first step on that path - adding a similar API surface
    on the Isolate that could be called from the Blink side.
    
    Future Blink-side CL would make use of this API instead of Context's.
    Then a future v8 CL would remove the Context API.
    
    Change-Id: Ia2cf99c42dffea0299bb7d95b4a6d371098ba58f
    Bug: chromium:1351643
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006444
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Yoav Weiss <yoavweiss@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90996}

commit d07f3b52cefbf1dc31eed67674d0950512e862d0
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Nov 16 14:26:34 2023 +0100

    [mksnapshot] Outline some functions to avoid frame size explosion
    
    When clang inlines these functions, the SetupBuiltinsInternal() frame
    becomes unreasonably big, especially with asan instrumentation. The
    small change in the following CL triggered inlining, and the frame
    suddenly went from 96B to 12MB:
    https://chromium-review.googlesource.com/c/v8/v8/+/5028407
    
    R=ishell@chromium.org
    
    Change-Id: I6603ebf92c723c752cc9f8c22b38a1fa352f3b3c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033408
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90995}

commit d05fed47b7154915a52dbaddf3d76a5f4dc82347
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Nov 15 18:18:05 2023 +0100

    [heap] Merge StartIncrementalMarkingIfLimitIsReached for all threads
    
    Merge this method for main and background threads. The method now
    gets the LocalHeap as an argument to decide whether it currently
    runs on a main or background thread.
    
    As soon as the hard limit is reached, incremental marking starts
    right away on the main thread. However marking can not be started
    on a background thread, so on such threads marking is lazily
    started on the main thread both through a stack guard and posting a
    task.
    
    Note that this changes behavior in ConcurrentAllocator. So far this
    Allocator always used the background thread version of this method.
    And in that version marking was never started right away even on the
    main thread.
    
    This means that we now need to change order and invoke this method
    before the allocation like we already do on the main thread in order
    for black allocation to work. It also means that incremental marking
    could start in situations where we didn't expect it so far (see changes
    in tests for this).
    
    Bug: chromium:1480975
    Change-Id: I02460e07fc159a443e5e2ba00e48e988707cdcbb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030192
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90994}

commit 6243dcd86a3c45031654de6f0c2520c06b19aea0
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Nov 16 12:30:09 2023 +0100

    [infra] Add mac-arm64 gc-stress bots
    
    Also remove obsolete mac x64 gc-stress, since that only found false
    positives or the same as the Linux bots.
    
    No-Try: true
    Bug: chromium:1500139
    Change-Id: I1ea970312c14dcec323735ab365df8e9b559e629
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5034003
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90993}

commit 59ffb210df44eff49dabfb346daa831cf71b234a
Author: Cheng Zhao <zcbenz@gmail.com>
Date:   Thu Nov 16 10:35:58 2023 +0900

    V8_NO_ARGUMENTS_ADAPTOR is no longer used
    
    Change-Id: Ie53b3297427044068edddfcd1b57aec04ccade44
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5035339
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90992}

commit eea1201af4b5430d9de142f171293a93353dbc50
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Nov 15 10:33:57 2023 +0000

    [sandbox] Support indirect pointer pending refs in deserializer
    
    Even though we don't yet support these in the serializer, we'll still
    need to support them in the deserializer soon (once we reference more
    objects through trusted/indirect pointers) as the serializer may decide
    to defer serializing an object (in which case it becomes a pending
    reference) if the recursion depth is too large.
    
    Bug: chromium:1472252
    Change-Id: I536a5986d2333057f189c99b759acbfaa2a027ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5032577
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90991}

commit 4652a8dfcc8bef72064513f115a3a208832cab24
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Thu Nov 16 10:30:50 2023 +0100

    cppgc: Unpoison PMRs before giving them back to the OS
    
    Some asan implementations (on Windows) may try to access memory (memset)
    on discarding and will fail.
    
    Bug: chromium:1502153
    Change-Id: I31ac70500473077b0964b0d52e9547b46a3f0b15
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5034000
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90990}

commit 7930e4b78db2f7d7e60f6787197ba2b5c8cc8a75
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Nov 16 10:17:14 2023 +0100

    [compiler] Generalize InstructionSelectorT for Turboshaft (part 20)
    
    Fill a few remaining gaps. In particular:
    - generalize load-simplification-reducer to rewrite loads/stores that
      have an element_size_log2 that is larger than what the target
      architecture supports
    - put --turboshaft-wasm-instruction-selection behind --turboshaft-future
    
    Drive-by: Fix a bug in Graph::BlockOf.
    
    Bug: v8:12783
    Change-Id: Ib4188882410d16378cdb35f89c830569f4fc8cf0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029750
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90989}

commit 873c30fb8b544103447fe6942b4bfa0e4766dd78
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Nov 15 12:24:07 2023 +0000

    [sandbox] Make InterpreterData a trusted object
    
    In many places we use InterpreterData and BytecodeArray interchangeably
    as InterpreterData is mostly just a wrapper around a BytecodeArray. For
    moving BytecodeArrays out of the sandbox, we need to reference them via
    trusted pointers from within the sandbox. Then, in order to keep union
    fields that can reference either a BytecodeArray or an InterpreterData
    object working, both of these objects must be referenced via a trusted
    pointer and so need to be ExposedTrustedObjects living in trusted space.
    
    Bug: chromium:1502461
    Change-Id: I123915ddd1601f1ed0ee61bcdf195997694c643e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976264
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90988}

commit f7974fdd91b488c8a18c6be547d9a2b83f384759
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Nov 16 08:05:45 2023 +0000

    [sandbox] Sweep the TrustedPointerTable
    
    We were already marking the live entries in the table, but weren't yet
    actually sweeping the table to free the dead entries.
    
    Bug: chromium:1473677
    Change-Id: I07f27bcec2cf4c847cbd1eed16a5ed1d521d26ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5034120
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90987}

commit 2b69912ee216e0aa2f50180fead116bcc0650df7
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Nov 15 15:09:13 2023 +0100

    Reland "[heap] Remove IsMainThread() uses in MainAllocator"
    
    This is a reland of commit f9039a27e8164a004dd1f6160da76727915e413b
    
    This is a clean reland as this CL likely did not cause the
    failures.
    
    Original change's description:
    > [heap] Remove IsMainThread() uses in MainAllocator
    >
    > Heap::IsMainThread() cannot be used on background threads because
    > it might race with V8::Locker there. It can be replaced with
    > MainAllocator::is_main_thread() in all but one use case.
    >
    > In this case we want to use the the main thread scope even for
    > the GC main thread but MainAllocator::is_main_thread() would return
    > false in this case. Here we need to explicitly use
    > Heap::IsMainThread() after all. But during GC it is safe to use that
    > method from background threads because v8::Locker can't be used by the
    > embedder concurrently because the main thread is still occupied by the
    > GC.
    >
    > Bug: chromium:1480975
    > Change-Id: I145b30360a8f4d5b05e55489e3bfb0b54de96583
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033263
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90968}
    
    Bug: chromium:1480975
    Change-Id: Ia5655e7a297da5beacc315d2675931ad453693cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033403
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90986}

commit 859bdef36f8dc8e4bf4a71ea27e24b62a29077a8
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Nov 15 20:06:42 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/631878b..cacb5e6
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/23e70e6..b46041d
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/86c7f73..5cbc521
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/69b8c64..7b9fd7a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764302101968316529
    
    Change-Id: I788e0a25ee5460ef2356fc379e1ef6118c959ce8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033226
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90985}

commit 0ed82ef0d30760c6a20e0f560da19d51c1179724
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Nov 15 17:27:07 2023 +0800

    [riscv][compiler] Generalize InstructionSelectorT for Turboshaft (part 19)
    
    Port commit c89fb798454d076f3d404185678ac5a71fd09c28
    
    Bug: v8:12783
    Change-Id: Ia42eb8db8df57a899afa980958987c3430b291fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5032534
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90984}

commit 2fae7bdf1c664a943b370d9b5ed13ace0742a348
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Nov 13 20:13:16 2023 +0800

    [riscv] Port InstructionSelector part 2
    
    Port commit 8b70c9388f66fb35d4a4233b13ac867a93be9b06
    
    Bug: v8:12783
    
    Change-Id: Ie5ea7d3881a87720f850af3c01a8dd3f673e89b8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024353
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90983}

commit f38b9f169a053efe8a5b1b3ed838900605dcb450
Author: Yahan Lu <yahan@iscas.ac.cn>
Date:   Thu Nov 16 01:39:12 2023 +0000

    Revert "[riscv]Reland^3 '[wasm][x64] Run JS imports on the central stack'"
    
    This reverts commit c5fdbca6df0385d9f11297353fb2d0667d4de57b.
    
    Reason for revert: 083b24225f7 Revert
    
    Original change's description:
    > [riscv]Reland^3 '[wasm][x64] Run JS imports on the central stack'
    >
    > Port commit be830f359c50f21db867f7e6f430124af314e0db
    >
    > Bug: v8:13983
    >
    > Change-Id: Idde2157e0c506996654b26a16e96dc53cfb60bed
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028221
    > Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    > Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    > Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    > Cr-Commit-Position: refs/heads/main@{#90907}
    
    Bug: v8:13983
    Change-Id: Ic366bbfffd3a460cdcba8c4240bf00a60fc4d508
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5035519
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90982}

commit f08d41bf4a9f28f30bdf84ec116062a6c24ff268
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Thu Nov 16 00:07:43 2023 +0000

    Revert "Reland "cppgc: Globalize normal page pool across all Oilpan instances""
    
    This reverts commit 809b73c94a8b6a12b0974b0ecc81b8bf7dab9a82.
    
    Reason for revert: cppgc roll failures: https://ci.chromium.org/ui/p/chromium/builders/try/mac-rel/1586473/overview
    
    Original change's description:
    > Reland "cppgc: Globalize normal page pool across all Oilpan instances"
    >
    > Apparently we may try to per-process initialize Oilpan twice: for Blink
    > and for Pfdfium.
    >
    > Original change's description:
    > > cppgc: Globalize normal page pool across all Oilpan instances
    > >
    > > Currently the page pool works per Oilpan heap, which can be suboptimal
    > > for workloads with multiple workers, since the pooled pages are not
    > > shared between Oilpan instances.
    > >
    > > Bug: v8:14390
    > > Change-Id: Ia63863e799221afbd1d60460e095d0932b8492bb
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020703
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90966}
    >
    > Bug: v8:14390
    > Change-Id: I40e48276dfb392cef109b810bda0ab721e8855dd
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033999
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90979}
    
    Bug: v8:14390
    Change-Id: I1bcb1d77df91d3ada6efa5094c1b824e32901b2c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5035384
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Deepti Gandluri <gdeepti@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90981}

commit 6c1190fceb71faf2c83c2e486ecd80f8971eb6f9
Author: Jérôme Vouillon <jerome.vouillon@gmail.com>
Date:   Wed Nov 15 17:26:29 2023 +0100

    [wasm] Introduce a cache to speed up finding Wasm code from a pc
    
    This cache makes stack frame traversal significantly faster. It is
    modeled after InnerPointerToCodeCache.
    
    Bug: v8:14425
    Change-Id: I66f657872f9b27c1f7961d86598c9cc4f7c599b7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013674
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90980}

commit 809b73c94a8b6a12b0974b0ecc81b8bf7dab9a82
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Wed Nov 15 21:21:44 2023 +0100

    Reland "cppgc: Globalize normal page pool across all Oilpan instances"
    
    Apparently we may try to per-process initialize Oilpan twice: for Blink
    and for Pfdfium.
    
    Original change's description:
    > cppgc: Globalize normal page pool across all Oilpan instances
    >
    > Currently the page pool works per Oilpan heap, which can be suboptimal
    > for workloads with multiple workers, since the pooled pages are not
    > shared between Oilpan instances.
    >
    > Bug: v8:14390
    > Change-Id: Ia63863e799221afbd1d60460e095d0932b8492bb
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020703
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90966}
    
    Bug: v8:14390
    Change-Id: I40e48276dfb392cef109b810bda0ab721e8855dd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033999
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90979}

commit 4f47e254d6a1fb9834488085116b7f597451db73
Author: Adam Klein <adamk@chromium.org>
Date:   Wed Nov 15 19:27:40 2023 +0000

    Revert "cppgc: Globalize normal page pool across all Oilpan instances"
    
    This reverts commit e6b0f8052b5773036770c3dbc7be765772835cb5.
    
    Reason for revert: suspected blocking V8 roll due to CHECK failures:
    https://crrev.com/c/5034480
    
    Original change's description:
    > cppgc: Globalize normal page pool across all Oilpan instances
    >
    > Currently the page pool works per Oilpan heap, which can be suboptimal
    > for workloads with multiple workers, since the pooled pages are not
    > shared between Oilpan instances.
    >
    > Bug: v8:14390
    > Change-Id: Ia63863e799221afbd1d60460e095d0932b8492bb
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020703
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90966}
    
    Bug: v8:14390
    Change-Id: I586aaf9a0a32dcda0420d42944fa32119865ac5c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5034213
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90978}

commit 654d207acd4dd773d8b4a712bb92cfa14dfbdde4
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Nov 15 14:54:10 2023 +0100

    [asm.js] Only register new scripts when logging code
    
    When the same asm.js module is instantiated twice, we only need
    to register the script once.
    We also need to give the {WeakScriptHandle} a proper destructor
    that destroys the global handle, because for asm.js modules the
    Script can die before the NativeModule.
    
    Fixed: chromium:1502158,chromium:1502393
    Change-Id: I247e2a56b8b29adc4291bede19bed9b32393feaa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028402
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90977}

commit 7b54f201984884925c665755b42b9a3b1810a215
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Nov 13 13:01:08 2023 +0100

    d8: Fix stray promise resolve task leading to UAF
    
    This is a d8-only fuzzing issue.
    
    Bug: chromium:1493369
    Change-Id: I7496e17312405a33efb85b7b3baeff6ffba2c2a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024273
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90976}

commit db57e8658efc2894fa61715580073dafa0a3f4a9
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Nov 15 08:16:53 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/33f6a1b..631878b
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/a0c5cf9..b20d1ec
    
    Rolling v8/buildtools/linux64: git_revision:9a45b61238317b09b778c47555527c9926700e0c..git_revision:bc5744174d9ea1c292f3f08cfb95fa97ea5c595e
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/84ccde0..d1c140e
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/fba0ae4..86c7f73
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/333c767..5b600ba
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764347402426566817
    
    Change-Id: I413f5f4d5277c047547d83cf8e668cd89a257be5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033439
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90975}

commit 08aa66d7b3e738d74f1ebc6abbbf22f94b5eae6c
Author: Adam Klein <adamk@chromium.org>
Date:   Wed Nov 15 18:50:29 2023 +0000

    Revert "[heap] Remove IsMainThread() uses in MainAllocator"
    
    This reverts commit f9039a27e8164a004dd1f6160da76727915e413b.
    
    Reason for revert: CHECK failures on GPU tests & blocking V8 roll:
    https://ci.chromium.org/ui/p/v8/builders/ci/Mac%20V8%20FYI%20Release%20(Intel)/23464/overview
    https://crrev.com/c/5034480
    
    Original change's description:
    > [heap] Remove IsMainThread() uses in MainAllocator
    >
    > Heap::IsMainThread() cannot be used on background threads because
    > it might race with V8::Locker there. It can be replaced with
    > MainAllocator::is_main_thread() in all but one use case.
    >
    > In this case we want to use the the main thread scope even for
    > the GC main thread but MainAllocator::is_main_thread() would return
    > false in this case. Here we need to explicitly use
    > Heap::IsMainThread() after all. But during GC it is safe to use that
    > method from background threads because v8::Locker can't be used by the
    > embedder concurrently because the main thread is still occupied by the
    > GC.
    >
    > Bug: chromium:1480975
    > Change-Id: I145b30360a8f4d5b05e55489e3bfb0b54de96583
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033263
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90968}
    
    Bug: chromium:1480975
    Change-Id: I24f2618a250538d579d35357a5d1e7329a785e4b
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5034210
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90974}

commit 2282b3d3b4af1b38ba135e2c576ed3717406f268
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Tue Nov 14 09:57:23 2023 +0100

    [api] Strip isolate from v8::ScriptOrigin
    
    The isolate is currently unused and the isolate member  will be full
    deprecated when migrating to context-allocated host-defined options.
    
    Bug: v8:10284
    Change-Id: I06cca5eb7ad74ecb7ec7888c91b93f2ea70f5a63
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029734
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Philip Pfaffe <pfaffe@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90973}

commit 952bfd9af3fdf1e22b22e4683802bce7418ac2d5
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Nov 14 17:27:00 2023 -0800

    [shared-struct] Take mutex when iterating type registry
    
    Fixed: chromium:1502027
    Change-Id: I540a00b60a42dca807f5b653292c572c11ade06a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028199
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90972}

commit 68c0589cb8fe287a61135d7fc8644a1ca839af2b
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Nov 15 15:53:28 2023 +0100

    [wasm] Fuzz exnref/try-table
    
    Drive-by 1: rename Exception to Tag in the wasm module builder.
    Drive-by 2: remove redundant relaxed-simd feature scope
    
    R=manoskouk@chromium.org
    
    Bug: v8:14398
    Change-Id: I33d88dd7fefc67f697243a937f4bb019c218dc83
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024194
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90971}

commit 449af38f0c9c942a5e052c3f5e4f592717728ab0
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Nov 13 13:55:01 2023 +0100

    [ml] Cleanup regression test
    
    Use %OptimizeOsr instead of long loop.
    
    Bug: chromium:1501467
    Change-Id: I114669f8bc5cd37df2a7559a66679c3691cb5828
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024197
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90970}

commit 6b5d70e60d5b7867631214985369a79753ebf199
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Nov 15 16:47:50 2023 +0100

    [infra] Prepare renaming Mac builder and adjust priorities
    
    This prepares using naming conventions for the Mac release
    builder. We'll delete the old one as soon as the infra side
    has landed.
    
    This also uses now default swarming attributes, since the bots
    aren'e experimental for a while now.
    
    Bug: chromium:1500139
    No-Try: true
    Change-Id: I01fdaccbf40c21750f2f1fafebc6bd542e03cd41
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033761
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90969}

commit f9039a27e8164a004dd1f6160da76727915e413b
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Nov 15 15:09:13 2023 +0100

    [heap] Remove IsMainThread() uses in MainAllocator
    
    Heap::IsMainThread() cannot be used on background threads because
    it might race with V8::Locker there. It can be replaced with
    MainAllocator::is_main_thread() in all but one use case.
    
    In this case we want to use the the main thread scope even for
    the GC main thread but MainAllocator::is_main_thread() would return
    false in this case. Here we need to explicitly use
    Heap::IsMainThread() after all. But during GC it is safe to use that
    method from background threads because v8::Locker can't be used by the
    embedder concurrently because the main thread is still occupied by the
    GC.
    
    Bug: chromium:1480975
    Change-Id: I145b30360a8f4d5b05e55489e3bfb0b54de96583
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033263
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90968}

commit 8e2245b6e6b9c51379d429d73dd0e3445991f9df
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Nov 15 13:21:20 2023 +0100

    [wasm][exnref] Stage the new exception handling proposal
    
    R=clemensb@chromium.org
    
    Bug: v8:14398
    Change-Id: I391b704ee2e22b617960f3d976c507ebf6b7a52b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5032979
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90967}

commit e6b0f8052b5773036770c3dbc7be765772835cb5
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Tue Nov 14 16:52:25 2023 +0100

    cppgc: Globalize normal page pool across all Oilpan instances
    
    Currently the page pool works per Oilpan heap, which can be suboptimal
    for workloads with multiple workers, since the pooled pages are not
    shared between Oilpan instances.
    
    Bug: v8:14390
    Change-Id: Ia63863e799221afbd1d60460e095d0932b8492bb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020703
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90966}

commit ccff355b60e017793c62355ada7b170651748ab3
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Nov 15 14:07:07 2023 +0000

    Use checked truncation in more places in arm64 assembler
    
    In crrev.com/c/5029995 we introduced checked_truncate_to_intn which we
    can now use in places that already had a manual check before the
    truncation.
    
    Bug: chromium:1485829
    Change-Id: Id9790a40ea7574d8afc8b1054f23825feb88cd3d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5033757
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90965}

commit b463104c44e3930672490e4ef9ecda493672b3fd
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Nov 15 13:34:24 2023 +0000

    [sandbox] Reference Code through SFI::trusted_function_data
    
    In the end, we probably want everything "code-like" to be referenced
    through the "trusted" field via a trusted pointer. This will probably
    include BytecodeArrays, Code, and InterpreterData.
    
    Bug: chromium:1490564
    Change-Id: Ide061f23897da9a0053f5dc00e554072b1143f39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5032578
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90964}

commit 96af725f728fbdad75be9467118586bc1e839160
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Nov 15 10:47:40 2023 +0100

    [wasm][exnref] Test rethrow null
    
    R=manoskouk@chromium.org
    
    Bug: v8:14398
    Change-Id: I116ff36d1b91b6d31539129626ea8a2e70d0b34e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030404
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90963}

commit b50d4c5abd11647be8f6e651cfcc62ab3b9e7a94
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Nov 15 14:34:33 2023 +0100

    [wasm][exnref] Do not increment legacy EH use counter on 'throw'
    
    The 'throw' instruction is the same in the legacy (eh) and new
    (exnref) proposal. Only count it as a use of the new proposal so that we
    can monitor the actual use count of the old proposal.
    
    R=clemensb@chromium.org
    
    Bug: v8:14398
    Change-Id: Id5b96b7be551d284a0628a326767b486a6d7af8a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030407
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90962}

commit 5a90802370106c1edf9fbd68f1b262599d18097e
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Nov 15 12:54:46 2023 +0100

    [wasm] Take mutex before accessing compilation unit queues
    
    R=jkummerow@chromium.org
    
    Fixed: v8:14450
    Change-Id: I13779c5bbd807e928accaa8ae0cb3a669e79bb55
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030408
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90961}

commit 9a1c100728a15c6b810467523cdf5c016e01368a
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Nov 15 12:55:40 2023 +0100

    [heap] Avoid sweeper tasks running check in ContributeToSweepingMain
    
    It is now possible to directly invoke IsSweepingDoneForSpace()
    without checking first whether sweeping tasks are running because
    this method is now thread-safe.
    
    This will help enabling the use of MainAllocator on background
    threads as well.
    
    Bug: chromium:1480975
    Change-Id: If712d61a141f0350b1f4f458e7c754ef69691c0e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030409
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90960}

commit 64dcd83e985bee336512e9f485ed51016b5d56c9
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Wed Nov 15 13:36:24 2023 +0100

    Improve C++ readability to be in sync with google 3 guidelines
    
    Change-Id: Ic65f03c9babf3bbc838fb01e67cf7ce18ddc2263
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5032981
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90959}

commit c434eb314f23ec36c3392fc04c7980d86454f6bb
Author: Jérôme Vouillon <jerome.vouillon@gmail.com>
Date:   Wed Nov 15 12:54:57 2023 +0100

    [wasm][eh] Optimize GetWasmInstanceOnStackTop
    
    Using a stack frame iterator is very expensive just to get some
    information from the stack top.
    
    Bug: v8:14425
    Change-Id: If4c42116f04279bdd2402affb780e610d99c3bf1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024278
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90958}

commit 5d056b77b70cdcd27deb3aed0ce9d1864f82fed1
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 14 18:06:39 2023 +0100

    [heap] Add SupportsPendingAllocation() to MainAllocator
    
    In the future not only GC threads do not support the pending
    allocation checks but also background threads.
    
    Bug: chromium:1480975
    Change-Id: I96b8424f13d513f97be431321147e1fe991bbf9f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028404
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90957}

commit 2054c8f629321b0789f72e751c3813aec6539008
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Nov 15 09:39:35 2023 +0100

    Reland^2 "[turboshaft] Basic pipeline for builtins"
    
    This reverts commit 34df0e07d0b5eec915e26225cdca7f6a80a98207.
    
    This reland disables most non-trivial changes. We are planning to
    enable them incrementally to figure out where the unexpected crashes
    might be coming from.
    
    Bug: v8:12783
    Change-Id: I2227b0544981e9e2c1587cdf98f3119bba7e3a3b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030398
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90956}

commit 57b433b0edba8caf729aed901355ec51f10e7c91
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Nov 15 17:58:03 2023 +0800

    [riscv] Skip cctest test-serialize/StaticRootsPredictableSnapshot
    
    Change-Id: I17aaf6846fbe60b0b4ae6a38a5cf1637131883c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012258
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90955}

commit bec0fd95370043d3c1830356965d800be356056e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Nov 13 10:42:34 2023 +0100

    [lazy-compilation] Clang tidy: bugprone inaccurate erase
    
    Spotted by Google3 Clang Tidy.
    
    See https://clang.llvm.org/extra/clang-tidy/checks/bugprone/inaccurate-erase.html
    
    Change-Id: I8d4041f8425cd30dc481690b07157318a5bd3dc3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022953
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90954}

commit dfffb3cb20af1c8cf809e54e4a522c78789583b3
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Nov 15 10:13:25 2023 +0000

    Fix store order in SharedFunctionInfo::SetData
    
    Since the SFI's data is accessed from background threads but is now
    implemented as two fields (function_data and trusted_function_data), the
    order that we store to these fields matters: we need to first store the
    new value, then potentially clear the old value (if it was stored in the
    other field).
    In the future, we'll want to disallow transitions from function_data to
    trusted_function_data and vice versa to entirely avoid these kinds of
    issues. For that, we'll need to reference Code and InterpreterData also
    through the trusted_function_data field.
    
    Bug: v8:14452
    Change-Id: Ic42996e4aef2b1ea9cf2729020a43f17734e891f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030405
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90953}

commit 6db1191256a62459a7dcbfe7e120cf0efe1ba9de
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Wed Nov 15 10:58:22 2023 +0100

    [api] Add override for uint16_t for ReturnValue
    
    This allows setting simple enum values without smi checks.
    
    Bug: chromium:1502243
    Change-Id: Ie98921b7361f59465a1c1d2fcf072c2a68c6afa9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5032576
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90952}

commit 2ddf3ff3020c361ccaf5bd35b9e734cda031a3d9
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Nov 14 21:42:01 2023 +0100

    [asm.js] Don't deref source_url when it's nullptr
    
    That can happen when the origin of the asm.js module is executed
    via `eval()`. The established alternative is to use an empty string.
    
    Drive-by fix: skip mjsunit/asm/log-lazy-code in --verify-predictable
    mode, because like other tests that enable profiling, it inherently
    causes non-deterministic allocations.
    
    Fixed: chromium:1502180, v8:14453
    Change-Id: Ie198cff40d6df38e8cf15766f2f7ac0c39ca54b3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028331
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90951}

commit baa8498eb4390be066c0b22301b79164e86f848f
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Wed Sep 27 11:13:14 2023 +0200

    [tools] Add a roll bisection script
    
    Add a script which automates bisection of rolls via CQ. This is used
    to bisect a V8->Chromium roll CL which is failing on Chromium CQ, to
    figure out which V8 CL is blocking the roll.
    
    The script uploads a new roll CL with the gerrit API, and uses one CQ
    trybot for the bisect (it tries to autodetect which trybot to use,
    by looking at the failures and durations of runs on the existing CL).
    It updates the commit message of the uploaded CL with the current
    bisect state.
    
    Change-Id: I1342e03eeb427232e1c8a9465fc301272caa3d75
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4667398
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90950}

commit bde3d360097607f36cd1d17cbe8412b84eae0a7f
Author: Marja Hölttä <marja@chromium.org>
Date:   Tue Nov 14 14:45:27 2023 +0100

    [promises, async stack traces] Fix the case when the closure has run
    
    We were using the closure pointing to NativeContext as a marker that the
    closure has run, but async stack trace code was confused about it.
    
    Bug: chromium:1501326
    Change-Id: I30d438f3b2e3fdd7562ea9a79dde4561ce9b0083
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029996
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90949}

commit ae851662076b2014f884b28cb55e6e04a60fd602
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 3 14:05:58 2023 +0100

    [api] Remove deprecated TypedArray::kMaxLength
    
    This is deprecated in favor of TypedArray::kMaxByteLength.
    
    Chromium was switched over in https://crrev.com/c/4925373, node in
    https://github.com/v8/node/pull/170.
    
    R=mlippautz@chromium.org
    
    Bug: v8:4153
    Change-Id: Iacf26d9a2ca4d66fb91edc1957f51fec3d223960
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5001638
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90948}

commit 5df4077b60877f549a4cc9bc35f427021a2572d1
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Nov 14 16:47:43 2023 +0100

    [wasm][exnref] Use consistent null representation
    
    Always use the JS null value to represent a null exnref for now, and fix
    a couple of places where exnref was not handled.
    
    R=manoskouk@chromium.org
    
    Change-Id: I2e2b7242707a2c1cb152c68693cbb91b13c0fc31
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028399
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90947}

commit d88fb0fc348dffc6193958be997c4406fb9ff856
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Nov 14 17:09:53 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 5
    
    This CL adds a bunch of shifts and comparisons that are needed
    e.g. for any.convert_extern in webassembly.
    
    Bug: v8:12783
    Change-Id: I13c403eb45474ce622f5f31cdb3c59f22f13e7ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016849
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90946}

commit a6337d20c4ae2c865fab55b89ca11ee5ecf9905a
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 14 15:49:23 2023 +0100

    Reland "[heap] Do not use in_gc() for SupportsAllocationObserver()"
    
    This is a reland of commit 903b6423acee35b673f8427d4c1825d3ba8bd0c9
    
    This is a clean reland as this CL wasn't the real culprit.
    
    Original change's description:
    > [heap] Do not use in_gc() for SupportsAllocationObserver()
    >
    > Background threads do not support allocation observers as well.
    > Instead of checking in_gc() we can check whether allocation_counter_
    > was set up.
    >
    > Bug: chromium:1480975
    > Change-Id: I56dd41bd42f7f0a508fe0ad441c1cf9ec4c4cdc7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030195
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90930}
    
    Bug: chromium:1480975
    Change-Id: Ic418dad2cbef3722f7abc34d23a74b082c406353
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028406
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90945}

commit ba7bbec5aa4dc6ed90555a4daf04564d383e784b
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Nov 15 11:37:00 2023 +0800

    [loong64][mips64][compiler] Generalize InstructionSelectorT for Turboshaft (part 19)
    
    Port commit c89fb798454d076f3d404185678ac5a71fd09c28
    
    Bug: v8:12783
    Change-Id: Ic52cc6b5685ec6dc4eaa3e85668d2659bb806373
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029084
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90944}

commit 1e11e756ed89d04b955f5311290ce361f03fb982
Author: JiQiu <qiuji@iscas.ac.cn>
Date:   Wed Nov 15 10:46:44 2023 +0800

    [riscv][assembler] Refactor log format for --riscv-debug
    
    Change-Id: I988c94da8b9e38dcfdb3e9937f268503835f3c6c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5031521
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90943}

commit 0378a0ba6ecfdfe06382161e3190b1300a8b32c8
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Nov 14 20:06:57 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/02912ba..33f6a1b
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/18624e2..a0c5cf9
    
    Rolling v8/buildtools/linux64: git_revision:85bd0a62938bc84e1b8db0ef92be0e2bb634378d..git_revision:9a45b61238317b09b778c47555527c9926700e0c
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/0157385..23e70e6
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7a9b709..fba0ae4
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764392699093079745
    
    Change-Id: Id87a40f9498ce9b2f927d284fbfe2f24159909b8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5027505
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90942}

commit 38427266360dc060064716ce47df0f104b504049
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Nov 15 03:03:43 2023 +0000

    Revert "[loong64][mips64][wasm] Run JS imports on the central stack"
    
    This reverts commit 417f558816f845f9877b37b54a6275314267bee0.
    
    Reason for revert: The ported commit was reverted.
    
    Original change's description:
    > [loong64][mips64][wasm] Run JS imports on the central stack
    >
    > Port commit be830f359c50f21db867f7e6f430124af314e0db
    >
    > Change-Id: Icc06d882a994666f8cf26824f752d50028758984
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029256
    > Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    > Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90926}
    
    Change-Id: I6d26f85ab613482fd28c00cb407e39c684434f3a
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029386
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#90941}

commit d37732ceddf2b0261ebb3ef4ff76d7c7bea5ac23
Author: Shu-yu Guo <syg@chromium.org>
Date:   Tue Nov 14 16:19:50 2023 -0800

    [shared-struct] Fix dequeuing WaiterQueueNodes
    
    Drive-by fixes:
     - Fix WaiterQueueNode encoding typo in the timeout case.
     - The timeout re-lock edge case should be a rel_acq because it both
       releases the queue lock and acquires the actual lock.
    
    Fixed: v8:14448
    Bug: v8:12547
    Change-Id: Ibc958f2634de4bcbd4bda9e0959809e5363911b8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028229
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90940}

commit 0280f9d2c77d900c2a31af9ddcd920c856851d53
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Tue Nov 14 16:15:35 2023 -0800

    [shared-struct] Keep locking isolate alive in JSAtomicsMutexTest.Timeout
    
    Avoid deleting the isolate which is holding the js lock.
    
    Bug: v8:14448, v8:12547
    Change-Id: Ie26d13c9a623dcba575d8a8cf9777919280108d0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028198
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#90939}

commit 3ec5a0838c2504485ce7e048e1d0458502544bf4
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Nov 14 14:42:44 2023 -0500

    PPC/s390: [compiler] Generalize InstructionSelectorT for Turboshaft (part 19)
    
    Port c89fb798454d076f3d404185678ac5a71fd09c28
    
    Original Commit Message:
    
        Support more atomic and simd128 instructions for
        --turboshaft-wasm-instruction-selection.
    
    R=nicohartmann@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Id1331e5472ab0ccee3ec160d3042ec115764d638
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030080
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90938}

commit 12f511861b5ebaa409e2d043f5ee3fff151baefd
Author: Milad Farazmand <mfarazma@redhat.com>
Date:   Tue Nov 14 20:10:57 2023 +0000

    Revert "PPC/s390: Reland^3 "[wasm][x64] Run JS imports on the central stack""
    
    This reverts commit d62459f10401390ede081ed9701a8300ec26c48f.
    
    Reason for revert: https://chromium-review.googlesource.com/c/v8/v8/+/5028407
    
    Original change's description:
    > PPC/s390: Reland^3 "[wasm][x64] Run JS imports on the central stack"
    >
    > Port be830f359c50f21db867f7e6f430124af314e0db
    >
    > Original Commit Message:
    >
    >     This is a reland of commit 2d6e2bd5293624379214d831cdf82a336b820828
    >     The stack-switching test uses %SimulateNewspaceFull, which is
    >     incompatible with the single-generation flag, so just skip the test
    >     in this case.
    >
    >     Original change's description:
    >     > Reland "Reland "[wasm][x64] Run JS imports on the central stack""
    >     >
    >     > This is a reland of commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
    >     >
    >     > Builtins should have the same IR shape on all platforms for PGO. The
    >     > wasm-to-js torque wrapper was different on x64 because of a compile-time
    >     > guard, which is fixed by turning it into an IR check. The check will
    >     > eventually be removed when this is ported to other archs.
    >     >
    >     > Original change's description:
    >     > > Reland "[wasm][x64] Run JS imports on the central stack"
    >     > >
    >     > > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
    >     > >
    >     > > The reland includes:
    >     > >
    >     > > - Ignore secondary stacks for conservative scanning. Now that we always
    >     > >   switch to the central stack, all "interesting" frames are on the
    >     > >   central stack.  Without this change, the marker is not in sync with
    >     > >   the stack start because of the switch to the central stack.
    >     > > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
    >     > >   because landing them separately also breaks the CSS bot. I think this
    >     > >   was already broken before but reproduces more easily with this change.
    >     > >   The problem is that because of the switch to the central stack, the
    >     > >   marker is not in sync with the registered secondary stack start.
    >     > > - Also switch in the generic (torque) wrapper.
    >     > >
    >     > > Original change's description:
    >     > > > [wasm][x64] Run JS imports on the central stack
    >     > > >
    >     > > > Switch to the central stack before running a JS import, and switch
    >     > > > back after the call. Only on x64 for now, will be ported to other archs
    >     > > > in a separate CL.
    >     > > >
    >     > > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
    >     > > >
    >     > > > R=ahaas@chromium.org
    >     > > > CC=irezvov@chromium.org
    >     > > >
    >     > > > Bug: v8:13983
    >     > > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
    >     > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
    >     > > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    >     > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    >     > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    >     > > > Cr-Commit-Position: refs/heads/main@{#90041}
    >     > >
    >     > > Bug: v8:13983
    >     > > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
    >     > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
    >     > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    >     > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    >     > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    >     > > Cr-Commit-Position: refs/heads/main@{#90864}
    >     >
    >     > Bug: v8:13983
    >     > Change-Id: I4808e17bcaafc309bd0c40c0705bee3fa52528c0
    >     > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022950
    >     > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    >     > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    >     > Cr-Commit-Position: refs/heads/main@{#90879}
    >
    > R=thibaudm@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    > BUG=
    > LOG=N
    >
    > Change-Id: I7c9d61e5da2e5dfd46e1b5385894dbaae7e37d92
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024956
    > Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    > Reviewed-by: Junliang Yan <junyan@redhat.com>
    > Cr-Commit-Position: refs/heads/main@{#90901}
    
    BUG=
    
    Change-Id: I15fd24d72186ae73949403581b904a8c67e14995
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029322
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90937}

commit 083b24225f72a735ca8848692640ffc43ee727b5
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Nov 14 20:08:33 2023 +0100

    Revert "Reland^3 "[wasm][x64] Run JS imports on the central stack""
    
    This reverts commit be830f359c50f21db867f7e6f430124af314e0db.
    
    Reason for revert: This broke on the chromium roll, see e.g.
    https://ci.chromium.org/ui/p/chromium/builders/try/linux-asan-v8-arm-rel/22/overview
    The bisection is off by one because of an unrelated build failure
    
    Original change's description:
    > Reland^3 "[wasm][x64] Run JS imports on the central stack"
    >
    > This is a reland of commit 2d6e2bd5293624379214d831cdf82a336b820828
    > The stack-switching test uses %SimulateNewspaceFull, which is
    > incompatible with the single-generation flag, so just skip the test
    > in this case.
    >
    > Original change's description:
    > > Reland "Reland "[wasm][x64] Run JS imports on the central stack""
    > >
    > > This is a reland of commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
    > >
    > > Builtins should have the same IR shape on all platforms for PGO. The
    > > wasm-to-js torque wrapper was different on x64 because of a compile-time
    > > guard, which is fixed by turning it into an IR check. The check will
    > > eventually be removed when this is ported to other archs.
    > >
    > > Original change's description:
    > > > Reland "[wasm][x64] Run JS imports on the central stack"
    > > >
    > > > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
    > > >
    > > > The reland includes:
    > > >
    > > > - Ignore secondary stacks for conservative scanning. Now that we always
    > > >   switch to the central stack, all "interesting" frames are on the
    > > >   central stack.  Without this change, the marker is not in sync with
    > > >   the stack start because of the switch to the central stack.
    > > > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
    > > >   because landing them separately also breaks the CSS bot. I think this
    > > >   was already broken before but reproduces more easily with this change.
    > > >   The problem is that because of the switch to the central stack, the
    > > >   marker is not in sync with the registered secondary stack start.
    > > > - Also switch in the generic (torque) wrapper.
    > > >
    > > > Original change's description:
    > > > > [wasm][x64] Run JS imports on the central stack
    > > > >
    > > > > Switch to the central stack before running a JS import, and switch
    > > > > back after the call. Only on x64 for now, will be ported to other archs
    > > > > in a separate CL.
    > > > >
    > > > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
    > > > >
    > > > > R=ahaas@chromium.org
    > > > > CC=irezvov@chromium.org
    > > > >
    > > > > Bug: v8:13983
    > > > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
    > > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
    > > > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > > > Cr-Commit-Position: refs/heads/main@{#90041}
    > > >
    > > > Bug: v8:13983
    > > > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
    > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
    > > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > Cr-Commit-Position: refs/heads/main@{#90864}
    > >
    > > Bug: v8:13983
    > > Change-Id: I4808e17bcaafc309bd0c40c0705bee3fa52528c0
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022950
    > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90879}
    >
    > Bug: v8:13983
    > Change-Id: I5e19a1759ffb56b8d38231cb1b3b5c9742ffc90c
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024199
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90889}
    
    Bug: v8:13983
    Change-Id: I77787d7409ce3331609056650a27b63cfaee5f35
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028407
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90936}

commit e1f7254f7a7042d9b4139e3847d3946e71bba663
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Nov 14 18:06:56 2023 +0100

    [turboshaft] Fix another missing case in typing of division
    
    Bug: v8:12783, chromium:1499633
    Change-Id: I3eb4261b73518c0aaee97de12dd8b81eeb5f6721
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029864
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90935}

commit 3685b1eb2f2b0b923c60df893212b2ddac10ec35
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Nov 14 17:05:59 2023 +0100

    [maps] Get object's creation context from the meta map
    
    This CL simplifies implementation of JSReceiver::GetCreationContext()
    which now loads creation context via
      object -> map -> meta map -> native context
    
    instead of walking back the transition tree to the root map to get
    the constructor to read the context from.
    
    Bug: chromium:1495743
    Change-Id: I466ddb05e4774ab134a436656569f536727d707e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030191
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90934}

commit b3394e1779d1fbf76eaf7bd8a7408e68c6941e3b
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 14 18:26:20 2023 +0000

    Revert "[heap] Do not use in_gc() for SupportsAllocationObserver()"
    
    This reverts commit 903b6423acee35b673f8427d4c1825d3ba8bd0c9.
    
    Reason for revert: Might have caused crashes.
    
    Original change's description:
    > [heap] Do not use in_gc() for SupportsAllocationObserver()
    >
    > Background threads do not support allocation observers as well.
    > Instead of checking in_gc() we can check whether allocation_counter_
    > was set up.
    >
    > Bug: chromium:1480975
    > Change-Id: I56dd41bd42f7f0a508fe0ad441c1cf9ec4c4cdc7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030195
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90930}
    
    Bug: chromium:1480975
    Change-Id: I86b6a621dff9daedd5479720f1fa1d5c74604daf
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028405
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90933}

commit df728a863d852bfe3e364f720854dfadbdd2e825
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Nov 14 08:17:12 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/b142517..18624e2
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/481ceeb..7a9b709
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/2acf65d..333c767
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764437999042210657
    
    Change-Id: I98cac8183087e517765172ec9d2afccd78f42f01
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030076
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90932}

commit c89fb798454d076f3d404185678ac5a71fd09c28
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Nov 14 15:04:29 2023 +0100

    [compiler] Generalize InstructionSelectorT for Turboshaft (part 19)
    
    Support more atomic and simd128 instructions for
    --turboshaft-wasm-instruction-selection.
    
    Bug: v8:12783
    Change-Id: If2a28a423714164bdd41532f4b285abc4080b76b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5001637
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90931}

commit 903b6423acee35b673f8427d4c1825d3ba8bd0c9
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 14 15:49:23 2023 +0100

    [heap] Do not use in_gc() for SupportsAllocationObserver()
    
    Background threads do not support allocation observers as well.
    Instead of checking in_gc() we can check whether allocation_counter_
    was set up.
    
    Bug: chromium:1480975
    Change-Id: I56dd41bd42f7f0a508fe0ad441c1cf9ec4c4cdc7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030195
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90930}

commit 7053cae631ba0482a84d45b9fa8a741910127008
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 14 12:55:25 2023 +0000

    Use checked truncation when computing branch offsets on arm64
    
    This change hardens against certain bugs where we forget to check if
    branch veneers are required on arm64. In these cases, the branch offset
    will be too large, so we now perform a "checked" truncation that makes
    sure that the input value fits into the output type.
    
    Bug: chromium:1485829
    Change-Id: Icb15c71345e24d57c7882d9de8044733391aedef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029995
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90929}

commit b14c255f29ac748649988ca913fe45fdab6995af
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Nov 14 14:49:04 2023 +0100

    [wasm] Mark fake Scripts as "shared cross origin"
    
    Wasm modules don't have associated Script objects in the same way
    as JS source code, and they reach the browser in different ways
    (typically, via fetch() or embedded directly as array literals
    etc., not via <script> tags).
    For reasons of implementation uniformity, we still create fake Script
    objects for them, so that e.g. the handling of exceptions can assume
    that every frame that can throw has a Script.
    Blink uses a particular attribute of Scripts, the IsSharedCrossOrigin
    bit, to enforce the concept of "muted errors" [1], which prevents a
    particular form of possible cross-origin information leakage by not
    surfacing certain errors, in particular in the "onunhandledrejection"
    callback, for non-shared scripts. Since the scenario this targets is
    unrelated to Wasm, and since catching bugs in Wasm modules that are
    instantiated and/or executed asynchronously in Promises is very useful,
    this patch marks the fake Script objects we create for Wasm modules
    as IsSharedCrossOrigin.
    
    [1] https://html.spec.whatwg.org/#muted-errors
    
    Change-Id: If35c1dec52fa02b6331cddad1dff7fa1336a94e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013671
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90928}

commit 5703ebf328f5738b1b3ee2799e40af72f26331df
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Nov 14 14:39:54 2023 +0100

    [interpreter] Check the impact of not updating the FBV cache
    
    ... in the interpreter frame during FBV creation.
    
    Change-Id: I59b29c40ed695fb29dd077f29aa1cf0c8fb1f3ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029733
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90927}

commit 417f558816f845f9877b37b54a6275314267bee0
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Nov 14 15:04:59 2023 +0800

    [loong64][mips64][wasm] Run JS imports on the central stack
    
    Port commit be830f359c50f21db867f7e6f430124af314e0db
    
    Change-Id: Icc06d882a994666f8cf26824f752d50028758984
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029256
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90926}

commit 84ec6f75111206fd74d92300d9641d1323287fd8
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Nov 14 13:44:16 2023 +0100

    Allow termination during memory measurement
    
    R=mlippautz@chromium.org
    
    Fixed: chromium:1502014
    
    Change-Id: I8609a138e728f89e77c2bc0f8e57dd89f1d8c4a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030194
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90925}

commit 3d65ada8f08ecf7728f2cd92496c0ff4a9e4c7ce
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Nov 13 10:15:56 2023 +0100

    [turboshaft] Update comment explaining how to define new Operations
    
    Bug: v8:12783
    Change-Id: If3374073ef4c20d14c7034607bfe6463ad5669a6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012676
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90924}

commit fe0a5fade3fffd7eeb77c3a295492d698b719e38
Author: JialuZhang-intel <jialu.zhang@intel.com>
Date:   Tue Nov 14 17:03:48 2023 +0800

    [regalloc] clean up the `total_block_count` parameter.
    
    Change-Id: I553c64077f3b035ca5dcbe4a69f15ec2559c058e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028223
    Commit-Queue: Jialu Zhang <jialu.zhang@intel.com>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90923}

commit c57f5b496a4f1f20ec0889b81091c53653b548ce
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Nov 14 13:47:11 2023 +0100

    Reland "[wasm] Introduce caching timeout"
    
    This is a reland of commit 19ebfc7d159dfe1c3a28880c14d07e8724094956.
    
    PS2 uses larger timeouts, which didn't fix the flakes completely. PS3
    fixes issues in the test and also avoids rescheduling if the deadline
    was missed by less than half a millisecond.
    
    R=jkummerow@chromium.org
    
    Original change's description:
    > [wasm] Introduce caching timeout
    >
    > In order to improve our cache hit rate, we aim to cache code in smaller
    > chunks. To avoid caching too often, the caching timeout will be used. As
    > long as new TurboFan code is being compiled within the timeout, no
    > caching is triggered yet. Only after the timeout expires without any new
    > TurboFan code, we trigger caching.
    >
    > R=ahaas@chromium.org
    >
    > Bug: v8:14411
    > Change-Id: Ic682251f59106f62a74d34bd3bf2243286eddd7d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013669
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90860}
    
    Bug: v8:14411
    Change-Id: I16211b694850e115f9644538545d3ec1478b7256
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024193
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90922}

commit 2ff36dae3ea269d21125c6b1a1897a60aa5ff2ca
Author: Darius M <dmercadier@chromium.org>
Date:   Tue Nov 14 13:46:13 2023 +0100

    [turboshaft] Fix inner loop revisit in AnalyzerIterator
    
    AnalyzerIterator would sometimes not revisit inner loops when
    revisiting the outer loop if the inner loop had already been revisited
    on its own.
    
    Fixed: chromium:1502042
    Bug: v8:12783
    Change-Id: I366d978a641b36c987bdbc506812d323fddb86af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029934
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90921}

commit 242fa685d0c4eb07b27a167157e3b5c8cc70c244
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 14 08:54:36 2023 +0000

    [sandbox] Split SFI::function_data into two fields
    
    When the sandbox is enabled, we now have SFI::trusted_function_data and
    SFI::function_data. Only one of the two can be "active" at a time. For
    now, both fields are tagged pointers, but in a follow-up CL, the
    trusted_function_data field will be converted into a trusted pointer
    field so it can reference objects in trusted space.
    
    Once we also move Code (and likely InterpreterData) objects into trusted
    space, we could convert the trusted_function_data field into a "code"
    field that contains a trusted pointer to the code (BytecodeArray, Code,
    or InterpreterData) to use when executing the function.
    
    Bug: chromium:1490564
    Change-Id: I8e215c809a27604855bebb11f706e907950d6ccc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922343
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90920}

commit 3d1b64181cfebe466919c0062c6b48e21f096797
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Nov 14 09:59:18 2023 +0100

    [maps] Use native context specific meta maps for all JSReceiver
    
    ... objects that must be tied to some native context.
    
    The following JSReceiver objects are the exceptions:
     - JSObjects allocated in shared space,
     - remote Api objects,
     - JSMessageObject and JSExternalObject (they are just wrappers around
       a set of primitive values and exist only for the purpose of passing
       the data across V8 Api).
    
    JSReceiver::GetCreationContext() still uses the old machinery but in
    a follow-up CL it'll be replaced with a constant time version loading
    the native context via
      object -> map -> meta map -> native context
    
    Bug: chromium:1495743
    Change-Id: I9f4765ca4a102d3617c5485e87b60471b5214387
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017893
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90919}

commit 65691b8fad420f658712aa68f8b50d93d852b516
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 14 08:18:30 2023 +0100

    [heap] Merge PagedSpaceBase::TryExpand for main and background thread
    
    This CL merges PagedSpaceBase::TryExpand with TryExpandBackground
    and now simply uses the same version on both main and background
    threads.
    
    TryExpandBackground() supported immediate allocation on a newly
    allocated page to guarantee that a thread would be able to allocate
    the object after growing the space by one page. In order to
    simplify this code, the new version gets rid of this corner case and
    simply invokes TryExpand() in a while-loop instead.
    
    Bug: chromium:1480975
    Change-Id: I50946b59677c391baf7279fece3dfd1947140bbe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5018595
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90918}

commit 1acc11155a661fa0ff1c521176baedb13f1f0010
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 14 12:29:24 2023 +0100

    [heap] Update VMState in MainAllocator only on the main thread
    
    This state should only be changed on the main thread.
    
    Bug: chromium:1480975
    Change-Id: I3c19b25bdb9df1cb4f2920f22e01496d448c692c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5030193
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90917}

commit 5985a12b2a4284c428fd388cd5474bb29667fd23
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Nov 14 10:13:30 2023 +0000

    Revert "[handles] Deprecate vector of handles in error messages"
    
    This reverts commit 89c3816fc40ab1c48038e1b9d017aa4de56cf99b.
    
    Reason for revert: These changes were not necessary.
    
    Original change's description:
    > [handles] Deprecate vector of handles in error messages
    >
    > Some methods for constructing error messages take as parameters vectors
    > of handles to strings or objects. Such handles cannot be migrated to
    > direct handles, as the latter must be stack-allocated. This CL replaces
    > these vectors of handles with MemorySpan objects, as a first step in
    > the migration towards direct handles.
    >
    > Bug: v8:13270
    > Change-Id: Ia730b3794fa8edf7b5ad07a747c3eb4690b42caf
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020707
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Reviewed-by: Omer Katz <omerkatz@chromium.org>
    > Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90894}
    
    Bug: v8:13270
    Change-Id: Ie03b8044d31d7bdbc198efc5dc3e5c9ff604518c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029994
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Auto-Submit: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90916}

commit 4010821cc3a66504447f6e67929a22f9f23363f2
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Nov 14 11:14:11 2023 +0100

    [maglev] Enable loop peeling for trivial loops
    
    Loops are marked trivial if they don't have calls and no forward jumps.
    The former causes inlining to blow up the peeled size. The latter
    is used as a proxy to guess if the loop contains control-flow
    with non-trivial merge states. Additionally we limit the max size to
    120 bytecodes. All of this ensures we only peel loops where the
    increase in compilation time is worth the still modest gains from
    peeling.
    
    Drive-by: Fix one optimization to not be permanently disabled with
    loop peeling.
    
    Bug: v8:7700
    Change-Id: Ife6574d99b8a2c094fc3cb9ca4c7646a1f5d25e9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4775585
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90915}

commit b064f0b4df9fd81374e401748e1a82c29d0fb2c6
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Nov 14 10:38:27 2023 +0100

    [wasm][turboshaft] Add DataView well-known import recognition test
    
    Bug: v8:14108
    Change-Id: I688203461a93317a64622b1c0a06bc2fc2349d5d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024279
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90914}

commit 1f1b4544945b1062eac1306b1f8d221883966bb1
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Nov 14 10:18:53 2023 +0100

    [turboshaft][arm64] Skip Load simplification with Turbofan ISel
    
    The new load simplification reducer should only run if turboshaft
    instruction selection is enabled as recreate schedule handles complex
    Turboshaft loads. Running it there might just introduce new issues
    and it doesn't provide any benefits.
    
    Bug: v8:12783
    Change-Id: Ie27f94bf5d2dcb9b1fdd6e053761708c72b6a818
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029735
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90913}

commit 2d3110439cbb359d9490106850aaa45f39f9739a
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Nov 14 10:57:06 2023 +0100

    [cleanup] Clang Tidy: unique_ptr<> assignment over release
    
    Spotted by Google3 Clang Tidy
    
    Change-Id: Ic52007390fffed802af0b9399f48cf325498b8d3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029993
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90912}

commit 9a1ef81f0128abc5dc266979c47722f8d651d956
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Nov 13 19:06:13 2023 +0100

    [asm.js] Fix code logging for lazy compilation
    
    The WasmEngine aborts code logging requests when it doesn't know
    the corresponding Script. For lazily compiled asm.js code, we hence
    need to manually register the (existing) Script with the WasmEngine.
    
    This is a follow-up to crrev.com/c/4987307, which fixed asm.js code
    logging for eager compilation.
    
    Change-Id: I4f4b2706de4052d298ee383c1797019380875d14
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5018097
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90911}

commit f84ced65bfd5e7ff1dbe1d052d5ab7cb88004f01
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Nov 13 17:56:03 2023 +0100

    [wasm] Fix two bugs in EstimateCurrentMemoryConsumption
    
    1) The wire_bytes_ shared pointer has to be read atomically and held in
       a shared pointer by the caller. Otherwise another thread might
       deallocate the OwnedVector while we call {size()} on it.
    2) The import wrapper cache gets reset before the native module is
       deregistered from the WasmEngine. So there is a point in time where
       we might call EstimateCurrentMemoryConsumption but the import wrapper
       cache is a nullptr. This CL fixes that by removing the unique_ptr,
       embedding the cache directly in the NativeModule, and providing a
       new method to clear the cache instead.
    
    R=jkummerow@chromium.org
    
    Fixed: chromium:1500804
    Change-Id: Ie409bd8fc0cb8e1953d690ef5e77fc3c2652b4f4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5023847
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90910}

commit 9553f411604d07fba267013a1f01cc3e2fdedef5
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 14 08:16:18 2023 +0100

    [heap] Prepare MainAllocator for usage on background threads
    
    This CL adds the LocalHeap as a field to MainAllocator. This will
    be used to allow the usage of the MainAllocator on background threads
    as well. It also introduces a new IsBlackAllocationEnabled() method to
    simplify checking for this condition.
    
    MainAllocator also gets a separate ctor for GC LABs. So far it used
    the regular ctor with an optional Context argument. This argument
    is now a "tag" type which forces the use of a separate ctor.
    
    Bug: chromium:1480975
    Change-Id: I31c1f198939303a20f95e8001fa5c97b22bada04
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016843
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90909}

commit e2698765d28b6727b69b8e2d4acd729fb8c48d74
Author: wenqin.yang <wenqin.yang@intel.com>
Date:   Tue Nov 14 10:41:23 2023 +0800

    [runtime] Bug fix for HaveSameMap with SMI arguments
    
    %HaveSameMap({},0x1234); will crash due to not check the argument
    with SMI, this CL introduces a check for this case.
    
    Bug: v8:14438
    Change-Id: I662084322429e1d94255a91f4765fcdfba8149e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022643
    Commit-Queue: Wenqin Yang <wenqin.yang@intel.com>
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Cr-Commit-Position: refs/heads/main@{#90908}

commit c5fdbca6df0385d9f11297353fb2d0667d4de57b
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Tue Nov 14 09:43:46 2023 +0800

    [riscv]Reland^3 '[wasm][x64] Run JS imports on the central stack'
    
    Port commit be830f359c50f21db867f7e6f430124af314e0db
    
    Bug: v8:13983
    
    Change-Id: Idde2157e0c506996654b26a16e96dc53cfb60bed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5028221
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90907}

commit 67114997066ccd70866fb05b3936d9a9dfbcbd5c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Nov 13 20:21:41 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/481e01d..02912ba
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/f25d23e..0157385
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7f22330..481ceeb
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764483297687314577
    
    Change-Id: Id9ef768b724b2ec0f08bd0d1cd39275073564c16
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5029213
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90906}

commit 61e382f9ef2473485360694fa63211d7dcfe3b1c
Author: Shu-yu Guo <syg@chromium.org>
Date:   Mon Nov 13 12:47:07 2023 -0800

    [shared-struct] Implement a SharedStructType registry
    
    Prototypes the registry idea detailed in [1]. SharedStructTypes accept
    an optional second argument as the key to the registry. If undefined is
    passed, then the type is not registered.
    
    [1] https://github.com/tc39/proposal-structs/blob/main/ATTACHING-BEHAVIOR.md#coordinating-identity-continuity-among-workers
    
    Bug: v8:12547
    Change-Id: If24a91d679b732240c718d6c911e9ae6c8269601
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009066
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90905}

commit 519f6f688d79239b598c1c8a0f215e64c21b86ea
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Mon Nov 13 11:29:08 2023 -0800

    [shared-struct] Fix timeout test
    
    Timeout test is hanging, likely because of the notify being called
    before the wait in the JS test.
    
    Bug: v8:14446, v8:12547
    Change-Id: I37a6e2a751f1c6ced47b714ee31a6884703d606b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5026573
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#90904}

commit 8ebd281794b9211aff11db1b970b019f38cbd356
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Oct 25 12:11:58 2023 +0200

    [wasm][relaxed-simd] Fix I32x4TruncF64x2UZero
    
    Use the saturating conversion to implement the relaxed instruction.
    Without the saturation, large out-of-range inputs can produce invalid
    results. See the reproducer in the linked crbug for an example.
    
    R=gdeepti@chromium.org
    
    Bug: chromium:1491815
    Change-Id: I33af9c6731566b079d7292f47fb6ee1ee3fdd23e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952160
    Reviewed-by: Deepti Gandluri <gdeepti@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90903}

commit 9ad37d34f40ad49e0812c35ddbe90b7d9c95ac10
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Nov 13 19:21:45 2023 +0100

    [asm.js] Revert to faster address handling
    
    This effectively reverts crrev.com/c/5006386 and replaces it with
    a different approach.
    
    While "ChangeInt32ToIntPtr" and "ChangeUint32ToUintPtr" look like they
    are equally complex/costly, it turns out that the former results in
    an explicit machine instruction, whereas the latter happens "for free".
    The behavioral difference is only observable for memories larger than
    2 GiB (where only signed conversion is correct), so for the benefit of
    performance, we revert to unsigned conversions and reject overly large
    memories from the fast path -- which only makes a difference in d8,
    because Chrome (due to PartitionAlloc's limitations) doesn't allow
    creation of such large asm.js memories anyway.
    
    Fixed: chromium:1500906
    Change-Id: Icf0ed7fbc2786f28941ba9293f0f43e6f49d6621
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5018856
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90902}

commit d62459f10401390ede081ed9701a8300ec26c48f
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Nov 13 12:15:41 2023 -0500

    PPC/s390: Reland^3 "[wasm][x64] Run JS imports on the central stack"
    
    Port be830f359c50f21db867f7e6f430124af314e0db
    
    Original Commit Message:
    
        This is a reland of commit 2d6e2bd5293624379214d831cdf82a336b820828
        The stack-switching test uses %SimulateNewspaceFull, which is
        incompatible with the single-generation flag, so just skip the test
        in this case.
    
        Original change's description:
        > Reland "Reland "[wasm][x64] Run JS imports on the central stack""
        >
        > This is a reland of commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
        >
        > Builtins should have the same IR shape on all platforms for PGO. The
        > wasm-to-js torque wrapper was different on x64 because of a compile-time
        > guard, which is fixed by turning it into an IR check. The check will
        > eventually be removed when this is ported to other archs.
        >
        > Original change's description:
        > > Reland "[wasm][x64] Run JS imports on the central stack"
        > >
        > > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
        > >
        > > The reland includes:
        > >
        > > - Ignore secondary stacks for conservative scanning. Now that we always
        > >   switch to the central stack, all "interesting" frames are on the
        > >   central stack.  Without this change, the marker is not in sync with
        > >   the stack start because of the switch to the central stack.
        > > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
        > >   because landing them separately also breaks the CSS bot. I think this
        > >   was already broken before but reproduces more easily with this change.
        > >   The problem is that because of the switch to the central stack, the
        > >   marker is not in sync with the registered secondary stack start.
        > > - Also switch in the generic (torque) wrapper.
        > >
        > > Original change's description:
        > > > [wasm][x64] Run JS imports on the central stack
        > > >
        > > > Switch to the central stack before running a JS import, and switch
        > > > back after the call. Only on x64 for now, will be ported to other archs
        > > > in a separate CL.
        > > >
        > > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
        > > >
        > > > R=ahaas@chromium.org
        > > > CC=irezvov@chromium.org
        > > >
        > > > Bug: v8:13983
        > > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
        > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
        > > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
        > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
        > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
        > > > Cr-Commit-Position: refs/heads/main@{#90041}
        > >
        > > Bug: v8:13983
        > > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
        > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
        > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
        > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
        > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
        > > Cr-Commit-Position: refs/heads/main@{#90864}
        >
        > Bug: v8:13983
        > Change-Id: I4808e17bcaafc309bd0c40c0705bee3fa52528c0
        > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022950
        > Reviewed-by: Igor Sheludko <ishell@chromium.org>
        > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
        > Cr-Commit-Position: refs/heads/main@{#90879}
    
    R=thibaudm@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I7c9d61e5da2e5dfd46e1b5385894dbaae7e37d92
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024956
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90901}

commit 9be14160ebd0ed119c6954f2ee602bfc572fb721
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Nov 13 16:43:45 2023 +0100

    [turboshaft] Optimize retagging of untagged Smis
    
    When compiling
    
        function f(a) {
            return a | 0;
        }
    
    We used to generate something like
    
       t1 = ShiftRightArithmeticShiftOutZero(a)
       (t2, ovf) = OverflowCheckedBinop(Add, t1, t1)
       if (ovf) { t3 = /* Allocate heap number */ }
       return Phi(t2, t3)
    
    We now instead generate
    
       t1 = ShiftRightArithmeticShiftOutZero(a)
       return a
    
    Bug: v8:12783
    Change-Id: I416b93c939580d1e9fb2cee08719a402ac8d25ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024203
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90900}

commit 9e96c608f8f8dc1df3ca0f967bc86f0c45a30029
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Nov 13 15:56:25 2023 +0100

    [api] Provide Object::GetAlignedPointerInternalField with Isolate
    
    If the embedder has the Isolate, then V8 can save the lookup. This is
    useful for Blink's generated callbacks.
    
    Bug: chromium:1501420
    Change-Id: If76c5d25c61d0a03b7b48a658440ead0c94799d3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024276
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90899}

commit aa6c8434a003e315ccc1794766c3fb82664b357a
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Mon Nov 13 17:31:24 2023 +0100

    [eval-cache] Drop feedback cells when the cache entry is aged
    
    Change-Id: I7b5acdac74e387e55f3d5a74f74a04f89689b1c6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024204
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90898}

commit 9577e9c680e60b760965e873665f63072cc5956c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Nov 13 08:16:15 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/bbd90fe..481e01d
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/8c05271..b142517
    
    Rolling v8/buildtools/linux64: git_revision:e4702d7409069c4f12d45ea7b7f0890717ca3f4b..git_revision:85bd0a62938bc84e1b8db0ef92be0e2bb634378d
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/ea9bf7f..7f22330
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/2a2315e..2acf65d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764528596891817185
    
    Change-Id: I5fcd01fe5e39ac1f9d9767768bd3f54086225bee
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024954
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90897}

commit 86e1691e0403ac20802e84340b3fed7c84470070
Author: jing.bao <jing.bao@intel.com>
Date:   Thu Nov 9 16:11:04 2023 +0800

    Fix chrome tracing by not missing TRACE_EVENT_END
    
    Change-Id: Ie25ad2cb31915af8a21f7b9f85c9193dd5010228
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016050
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Jing Bao <jing.bao@intel.com>
    Cr-Commit-Position: refs/heads/main@{#90896}

commit 1c1814f17a7c83713c78335269433ef7192a14e8
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Nov 13 17:34:50 2023 +0100

    [wasm] Skip stack-switching test for single_generation
    
    Cq-Include-Trybots: luci.v8.try:v8_linux64_single_generation_dbg
    
    R=mliedtke@chromium.org
    
    No-Tree-Checks: true
    Bug: v8:13983
    Change-Id: Ib743e1ab30c92fa7180274d2fbe8a7ae939395ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024277
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90895}

commit 89c3816fc40ab1c48038e1b9d017aa4de56cf99b
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Fri Nov 10 17:27:39 2023 +0100

    [handles] Deprecate vector of handles in error messages
    
    Some methods for constructing error messages take as parameters vectors
    of handles to strings or objects. Such handles cannot be migrated to
    direct handles, as the latter must be stack-allocated. This CL replaces
    these vectors of handles with MemorySpan objects, as a first step in
    the migration towards direct handles.
    
    Bug: v8:13270
    Change-Id: Ia730b3794fa8edf7b5ad07a747c3eb4690b42caf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020707
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90894}

commit 4f407aacdeeee6416232a86aaa96f3c70d2eac4d
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Nov 13 15:24:49 2023 +0100

    [wasm][turboshaft] Handle RAB and GSAB for DataView imports in Turboshaft
    
    Bug: v8:14108
    Change-Id: I8af5775ad165ef40d51f214da9eacbefbb1c288f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5004671
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90893}

commit 9284db56a3118747088019673ca50ba7c7ccfb1b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Nov 13 15:32:00 2023 +0100

    [compiler][arm64] VisitStore: Move helper function out
    
    Bug: v8:12783
    Change-Id: I2c8ff27dd9905e1f6f31209afd99e30aaaaae4bf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024201
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90892}

commit 88347a628f9065a1874194f820ecbf5235212632
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon Nov 13 11:29:50 2023 +0100

    [maps] Introduce native context specific meta maps
    
    ... and use them for all Context maps. Previously there was only one
    meta map referencing itself via the map field.
    Note that since meta map is not unique anymore the IsMap(obj)
    predicate must check instance type.
    
    This is a first step towards using native context specific meta maps
    for all objects tied to a certain native context. This will allow us
    to compute object's creation context in constant time via just the
    following hops:
      object -> map -> meta map -> native context
    
    Bug: chromium:1495743
    Change-Id: If145c676677e77e2236591387a2c406634b50ff7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017773
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90891}

commit 6d09b900172c4a0fb59419feb30119b05fb7654e
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Nov 10 18:40:16 2023 +0100

    [runtime] Mark --feedback-normalization flag as experimental
    
    ... until we decide to move forward with it.
    
    Bug: chromium:1417121, chromium:1495933
    Change-Id: Ic56526e7a838ba2dd1c3eb2c4be5ae730b5c7c40
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020713
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90890}

commit be830f359c50f21db867f7e6f430124af314e0db
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Nov 13 14:57:44 2023 +0100

    Reland^3 "[wasm][x64] Run JS imports on the central stack"
    
    This is a reland of commit 2d6e2bd5293624379214d831cdf82a336b820828
    The stack-switching test uses %SimulateNewspaceFull, which is
    incompatible with the single-generation flag, so just skip the test
    in this case.
    
    Original change's description:
    > Reland "Reland "[wasm][x64] Run JS imports on the central stack""
    >
    > This is a reland of commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
    >
    > Builtins should have the same IR shape on all platforms for PGO. The
    > wasm-to-js torque wrapper was different on x64 because of a compile-time
    > guard, which is fixed by turning it into an IR check. The check will
    > eventually be removed when this is ported to other archs.
    >
    > Original change's description:
    > > Reland "[wasm][x64] Run JS imports on the central stack"
    > >
    > > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
    > >
    > > The reland includes:
    > >
    > > - Ignore secondary stacks for conservative scanning. Now that we always
    > >   switch to the central stack, all "interesting" frames are on the
    > >   central stack.  Without this change, the marker is not in sync with
    > >   the stack start because of the switch to the central stack.
    > > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
    > >   because landing them separately also breaks the CSS bot. I think this
    > >   was already broken before but reproduces more easily with this change.
    > >   The problem is that because of the switch to the central stack, the
    > >   marker is not in sync with the registered secondary stack start.
    > > - Also switch in the generic (torque) wrapper.
    > >
    > > Original change's description:
    > > > [wasm][x64] Run JS imports on the central stack
    > > >
    > > > Switch to the central stack before running a JS import, and switch
    > > > back after the call. Only on x64 for now, will be ported to other archs
    > > > in a separate CL.
    > > >
    > > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
    > > >
    > > > R=ahaas@chromium.org
    > > > CC=irezvov@chromium.org
    > > >
    > > > Bug: v8:13983
    > > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
    > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
    > > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > > Cr-Commit-Position: refs/heads/main@{#90041}
    > >
    > > Bug: v8:13983
    > > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
    > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90864}
    >
    > Bug: v8:13983
    > Change-Id: I4808e17bcaafc309bd0c40c0705bee3fa52528c0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022950
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90879}
    
    Bug: v8:13983
    Change-Id: I5e19a1759ffb56b8d38231cb1b3b5c9742ffc90c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024199
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90889}

commit bd77e012c6c92c9b95e040db4251b70f070a2784
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Mon Nov 13 18:19:00 2023 +0800

    [loong64][mips64][wasm] Add platform-specific support for the wasm-to-js wrapper
    
    Port commit 93bb287c2fef9c52760940895e82759f780ec93f.
    
    Change-Id: I8107141bb067eb6bc3d08dfd374b64dceed5f1af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5018573
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#90888}

commit d5d40dadd4cfe63573ec79956c744d59ffe4900d
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Nov 13 12:44:36 2023 +0100

    [wasm][exnref] Implement try-table in TurboFan
    
    R=clemensb@chromium.org
    
    Bug: v8:14398
    Change-Id: I74411c64528ecfab14d6450f9fa8fa76843cfcf0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5023768
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90887}

commit e8b04e6e16fe77b73bc34f97b8b00a67108a5233
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Fri Nov 10 18:13:35 2023 +0100

    [handles] Minor changes related to direct handles
    
    This CL introduces some minor changes related to direct handles.
    
    1. It moves internal::ValueHelper and internal::HandleHelper to
       v8-internal.h
    2. It introduces method internal::HandleHelper::VerifyOnMainThread
    3. It fixes some issues in handle conversions and introduces missing
       methods
    4. It implements handle equality for DirectHandle and between
       Handle and DirectHandle
    
    Bug: v8:13270
    Change-Id: I7b0a0613ce40926da14677373f56b549a01e3db5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016850
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90886}

commit c82b8b171f9f78ada1014a32f342c6695326988e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Sep 21 14:31:32 2023 +0200

    [platform][posix] Add a not null check in LocalTimeOffset
    
    The "fix" is based on other implementation of LocalTimeOffset
    in other platforms.
    
    Bug: v8:14325
    Change-Id: Ib1db3215dbf62c0cea5db2e031b174ea54f719a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4882485
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90885}

commit 700381d5b84d5a0ea736d75021f7d6924eca54b4
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Nov 13 12:14:01 2023 +0100

    [wasm][exnref] Enable exnref spec tests
    
    R=ahaas@chromium.org
    
    Bug: v8:14398
    Change-Id: If0bb4091e081bca5e9514ea5a09c32630357ae19
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012677
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90884}

commit 4f9c1862ed19a9530bff80e79239db106569dcd2
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Nov 13 13:18:11 2023 +0100

    [heap] Clang tidy: prefer unique_ptr<> assignment
    
    Spotted by Google3 Clang Tidy.
    
    Change-Id: I69f6c2a5db4c891237113f072e4b55411afbf517
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024195
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90883}

commit 06e522fbed859b92d9bb093843c47949c6b18173
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Nov 13 09:45:38 2023 +0800

    [riscv] Add Zbb/Zba/Zbs extension
    
    Change-Id: I5bdabf523947b8c5db7f2a9cf945ce0951fd4123
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009246
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90882}

commit 51145cc4a57b5f859931d2bf48bcbc6d50f901c7
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Nov 13 13:13:21 2023 +0000

    Revert "Reland "Reland "[wasm][x64] Run JS imports on the central stack"""
    
    This reverts commit 2d6e2bd5293624379214d831cdf82a336b820828.
    
    Reason for revert: Failing on Linux64 debug:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20single%20generation/12461/overview
    https://bugs.chromium.org/p/v8/issues/detail?id=14444
    
    Original change's description:
    > Reland "Reland "[wasm][x64] Run JS imports on the central stack""
    >
    > This is a reland of commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
    >
    > Builtins should have the same IR shape on all platforms for PGO. The
    > wasm-to-js torque wrapper was different on x64 because of a compile-time
    > guard, which is fixed by turning it into an IR check. The check will
    > eventually be removed when this is ported to other archs.
    >
    > Original change's description:
    > > Reland "[wasm][x64] Run JS imports on the central stack"
    > >
    > > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
    > >
    > > The reland includes:
    > >
    > > - Ignore secondary stacks for conservative scanning. Now that we always
    > >   switch to the central stack, all "interesting" frames are on the
    > >   central stack.  Without this change, the marker is not in sync with
    > >   the stack start because of the switch to the central stack.
    > > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
    > >   because landing them separately also breaks the CSS bot. I think this
    > >   was already broken before but reproduces more easily with this change.
    > >   The problem is that because of the switch to the central stack, the
    > >   marker is not in sync with the registered secondary stack start.
    > > - Also switch in the generic (torque) wrapper.
    > >
    > > Original change's description:
    > > > [wasm][x64] Run JS imports on the central stack
    > > >
    > > > Switch to the central stack before running a JS import, and switch
    > > > back after the call. Only on x64 for now, will be ported to other archs
    > > > in a separate CL.
    > > >
    > > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
    > > >
    > > > R=ahaas@chromium.org
    > > > CC=irezvov@chromium.org
    > > >
    > > > Bug: v8:13983
    > > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
    > > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
    > > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > > Cr-Commit-Position: refs/heads/main@{#90041}
    > >
    > > Bug: v8:13983
    > > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
    > > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90864}
    >
    > Bug: v8:13983
    > Change-Id: I4808e17bcaafc309bd0c40c0705bee3fa52528c0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022950
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90879}
    
    Bug: v8:13983, v8:14444
    Change-Id: I86f4924c2c53343486b0a0e293a53265d0793c65
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5024274
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90881}

commit edd9a860d2317f981cc81b230b256e0b1e28fae7
Author: Igor Sheludko <ishell@chromium.org>
Date:   Fri Nov 10 17:50:39 2023 +0100

    [message] Also clear pending message when swallowing an exception
    
    ... thrown during formatting of an error message.
    
    Bug: chromium:1500898, v8:12439
    Change-Id: I95a2490b19e992dc646cf236c93102b217121021
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020709
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90880}

commit 2d6e2bd5293624379214d831cdf82a336b820828
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Nov 13 11:28:54 2023 +0100

    Reland "Reland "[wasm][x64] Run JS imports on the central stack""
    
    This is a reland of commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
    
    Builtins should have the same IR shape on all platforms for PGO. The
    wasm-to-js torque wrapper was different on x64 because of a compile-time
    guard, which is fixed by turning it into an IR check. The check will
    eventually be removed when this is ported to other archs.
    
    Original change's description:
    > Reland "[wasm][x64] Run JS imports on the central stack"
    >
    > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
    >
    > The reland includes:
    >
    > - Ignore secondary stacks for conservative scanning. Now that we always
    >   switch to the central stack, all "interesting" frames are on the
    >   central stack.  Without this change, the marker is not in sync with
    >   the stack start because of the switch to the central stack.
    > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
    >   because landing them separately also breaks the CSS bot. I think this
    >   was already broken before but reproduces more easily with this change.
    >   The problem is that because of the switch to the central stack, the
    >   marker is not in sync with the registered secondary stack start.
    > - Also switch in the generic (torque) wrapper.
    >
    > Original change's description:
    > > [wasm][x64] Run JS imports on the central stack
    > >
    > > Switch to the central stack before running a JS import, and switch
    > > back after the call. Only on x64 for now, will be ported to other archs
    > > in a separate CL.
    > >
    > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
    > >
    > > R=ahaas@chromium.org
    > > CC=irezvov@chromium.org
    > >
    > > Bug: v8:13983
    > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
    > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90041}
    >
    > Bug: v8:13983
    > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90864}
    
    Bug: v8:13983
    Change-Id: I4808e17bcaafc309bd0c40c0705bee3fa52528c0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022950
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90879}

commit c96738991a528253d7a8392bd170c8bb1ea5d14a
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Nov 13 11:23:07 2023 +0100

    [ml] Fix osr phi untagging
    
    Fixes two issues with untagging of OSR values:
    1. Bailout needs to be before the entrypoint and not at the entrypoint,
       since we are still in the prologue.
    2. CheckedTruncateNumberToInt32 does not bail if the input does not fit.
    
    Fixed: crbug:1501467
    Change-Id: I0221f073c4db17bc5b6cccf5734d8d49eb5bc16f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022956
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90878}

commit 56f03322031b598759daacf81d80afc3de749636
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Mon Nov 13 10:32:34 2023 +0100

    [heap] Clang tidy: bugprone inaccurate erase
    
    Spotted by Google3 Clang Tidy.
    
    See https://clang.llvm.org/extra/clang-tidy/checks/bugprone/inaccurate-erase.html
    
    Change-Id: I9b9b34a52d0979f63e30f8918365862d7eeb4a1c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5022952
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90877}

commit 23da600e2a9d64bf2e81ebb0b6fa93410dbb0231
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Nov 9 12:58:17 2023 +0100

    [heap] Remove unused LocalAllocationBuffer and MaybeFreeUnusedLab
    
    Remove unused code now that EvacuationAllocator directly uses
    MainAllocator to allocate in new space.
    
    Bug: chromium:1480975
    Change-Id: I2631a7fc98436429ffc2190d6490d043c34e147b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013672
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90876}

commit 5ff265b202a593d7f45348c2a3f0d4dd5fdff74e
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Nov 8 17:03:46 2023 +0100

    [value-serializer] Support Error with circular cause
    
    Bug: v8:14433
    Change-Id: Idd56a7b366ceb31e44f908f4832a17d0820727ce
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012806
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90875}

commit fd19ce16c4f1cb3cc97e229faa4be3c1fba8c753
Author: Michaël Zasso <mic.besace@gmail.com>
Date:   Mon Nov 13 08:59:41 2023 +0100

    [postmortem] Use Python raw strings for regexes
    
    This avoids warnings with Python 3.12.
    
    Change-Id: I31db3df3fa87bccaf1f8ae2835e457124b37b460
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5018593
    Commit-Queue: Michaël Zasso <mic.besace@gmail.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Michaël Zasso <mic.besace@gmail.com>
    Cr-Commit-Position: refs/heads/main@{#90874}

commit 0e403531e2d04b6c8ba66634f31001dddbd0038c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Nov 12 20:06:27 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/8d813a1..bbd90fe
    
    Rolling v8/buildtools/reclient: re_client_version:0.118.1.ae3c3be-gomaip..re_client_version:0.120.1.f75cfb7-gomaip
    
    Rolling v8/third_party/instrumented_libraries: https://chromium.googlesource.com/chromium/src/third_party/instrumented_libraries/+log/4aedc47..77706d9
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/bbcb7c6..1f8329e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764573894514997953
    
    Change-Id: Ia1fcf6264f434f9ed60b7e43f6dca801bc0b5992
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020673
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90873}

commit 1c7d3a94fc051e0fd69584b930faab448026941e
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Fri Nov 10 12:38:04 2023 -0800

    [shared-struct] Add Atomics.Mutex.lockWithTimeout API
    
    Add API surface for Atomics.Mutex.lockWithTimeout.
    Add mjsunit test.
    
    Bug: v8:12547
    Change-Id: Ia666b11a113814274ecd36a2a76a824b6d4abe9e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002155
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90872}

commit 2d6481548d69f9bef0a31340dcef5b64d23fc897
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Fri Nov 10 11:58:44 2023 -0800

    [shared-struct] Don't coerce Atomics.Condition.wait timeout into number.
    
    Added a new IsNotNumber message to throw when the typeof the timeout
    is not number. Updated bytecode expectations.
    
    Bug: v8:12547
    Change-Id: Id0944850c3ba21da09d17eebc332ec4710aba9c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5018302
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#90871}

commit 4b17b09f0befe2dcdcdeffa6141eb69c1d8b037c
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Fri Nov 10 11:04:14 2023 -0800

    [shared-struct] Support timeout for sync locks in Atomics.Mutex.
    
    This CL doesn't change the API. In this CL:
    
    - Add backend logic support for timeouts in synchronous mutexes.
    - Add unittest.
    
    Bug: v8:12547
    Change-Id: Ic63ca5b966badb01d47ffb6c9ecc48becdae4c17
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4956060
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#90870}

commit 5e88842dc20b0f3519dbf89f4a0fbbf6774352a7
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri Nov 10 16:44:23 2023 +0100

    [maglev] Fix another phi untagging skipping smi check
    
    If a CheckedSmiUntag flows into int32 or float64 we also need to
    pesimistically assume that we could rely on its smi range later.
    
    Fixed: chromium:1501211
    Change-Id: If7e736d066288569d9b78a678dd6536db810a589
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020706
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90869}

commit e0cf47abb077d52dbee697369da1d1621226e30d
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri Nov 10 14:45:40 2023 +0100

    [static-roots] Use SR in GetSharedFunctionInfoBytecodeOrBaseline
    
    Bug: v8:13466
    Change-Id: I5da59f3b2f9eec3af751bc44fceadb5233a75f2d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016845
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90868}

commit a5f5b8da714903100eb96342c9d102919baf81c1
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Nov 10 08:16:29 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/e159812..8d813a1
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/d62e23e..8c05271
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/dbd2967..ea9bf7f
    
    Rolling v8/third_party/fuchsia-sdk/sdk: version:16.20231109.2.1..version:16.20231110.0.1
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/cec6ffa..2a2315e
    
    Rolling v8/tools/luci-go: git_revision:540222a3d0b11c1370539a1f698643113a0ee029..git_revision:bd7ce256f73f85cb75c630b40afa382cdf7fcc51
    
    Rolling v8/tools/luci-go: git_revision:540222a3d0b11c1370539a1f698643113a0ee029..git_revision:bd7ce256f73f85cb75c630b40afa382cdf7fcc51
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764800386889182097
    
    Change-Id: Id55360e29e9342e98c4e8bc2556b7c0d1662641a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017503
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90867}

commit d74175625a6e6409a08393c24ffaa53598fbbf11
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Nov 10 16:54:41 2023 +0000

    Revert "[wasm] Introduce caching timeout"
    
    This reverts commit 19ebfc7d159dfe1c3a28880c14d07e8724094956.
    
    Reason for revert: Flakes on many builders:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Win64/55266/overview
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20verify%20csa/36225/overview
    
    Original change's description:
    > [wasm] Introduce caching timeout
    >
    > In order to improve our cache hit rate, we aim to cache code in smaller
    > chunks. To avoid caching too often, the caching timeout will be used. As
    > long as new TurboFan code is being compiled within the timeout, no
    > caching is triggered yet. Only after the timeout expires without any new
    > TurboFan code, we trigger caching.
    >
    > R=ahaas@chromium.org
    >
    > Bug: v8:14411
    > Change-Id: Ic682251f59106f62a74d34bd3bf2243286eddd7d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013669
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90860}
    
    Bug: v8:14411
    Change-Id: I484d2de56ce81e71c72d990d26b85a13ec728adf
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020711
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90866}

commit 9283415d8f0629f470b649ca3642f96795575fa8
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Nov 10 16:51:41 2023 +0000

    Revert "Reland "[wasm][x64] Run JS imports on the central stack""
    
    This reverts commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c.
    
    Reason for revert:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20verify%20builtins/2422/overview
    
    Original change's description:
    > Reland "[wasm][x64] Run JS imports on the central stack"
    >
    > This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
    >
    > The reland includes:
    >
    > - Ignore secondary stacks for conservative scanning. Now that we always
    >   switch to the central stack, all "interesting" frames are on the
    >   central stack.  Without this change, the marker is not in sync with
    >   the stack start because of the switch to the central stack.
    > - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
    >   because landing them separately also breaks the CSS bot. I think this
    >   was already broken before but reproduces more easily with this change.
    >   The problem is that because of the switch to the central stack, the
    >   marker is not in sync with the registered secondary stack start.
    > - Also switch in the generic (torque) wrapper.
    >
    > Original change's description:
    > > [wasm][x64] Run JS imports on the central stack
    > >
    > > Switch to the central stack before running a JS import, and switch
    > > back after the call. Only on x64 for now, will be ported to other archs
    > > in a separate CL.
    > >
    > > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
    > >
    > > R=ahaas@chromium.org
    > > CC=irezvov@chromium.org
    > >
    > > Bug: v8:13983
    > > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
    > > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90041}
    >
    > Bug: v8:13983
    > Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90864}
    
    Bug: v8:13983
    Change-Id: I2b28314e26cbd3e7129b7508a3f43f12febada7a
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020710
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90865}

commit 4be9ff946b727ea05e6049c72ad62f5c83f6a13c
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri Nov 10 15:35:22 2023 +0100

    Reland "[wasm][x64] Run JS imports on the central stack"
    
    This is a reland of commit 9d9f49d2018c6e268fb4c5a484f6de26ba251b12
    
    The reland includes:
    
    - Ignore secondary stacks for conservative scanning. Now that we always
      switch to the central stack, all "interesting" frames are on the
      central stack.  Without this change, the marker is not in sync with
      the stack start because of the switch to the central stack.
    - Merging 8bbc90166d0dd1bb2037f89207aff00373a42584 into this change,
      because landing them separately also breaks the CSS bot. I think this
      was already broken before but reproduces more easily with this change.
      The problem is that because of the switch to the central stack, the
      marker is not in sync with the registered secondary stack start.
    - Also switch in the generic (torque) wrapper.
    
    Original change's description:
    > [wasm][x64] Run JS imports on the central stack
    >
    > Switch to the central stack before running a JS import, and switch
    > back after the call. Only on x64 for now, will be ported to other archs
    > in a separate CL.
    >
    > Design doc: https://docs.google.com/document/d/1DBVwKthBdejx9Qy1W8indme5pJ6mq_fSdhQ3N-K2XP4/edit?usp=sharing
    >
    > R=ahaas@chromium.org
    > CC=irezvov@chromium.org
    >
    > Bug: v8:13983
    > Change-Id: I217ef988f46bb9a747cc65a37688817a4abf9618
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4846976
    > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Reviewed-by: Andreas Haas <ahaas@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90041}
    
    Bug: v8:13983
    Change-Id: I75492e0b26955c66ba59d4f19ef19764c516fcac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4875537
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90864}

commit 1696d9f5accd51997f9af78e4d5ea5fb83efd31f
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Nov 10 14:36:36 2023 +0100

    [wasm][turboshaft] Refactor DataView related imports
    
    This change refactors the DataView import implementations for the
    upcoming support of resizable ArrayBuffers and growable
    SharedArrayBuffers.
    
    Furthermore, this change:
    - adds the forgotten smi type check of the dataview for the byteLength operation;
    - adds branch hints for error handling.
    
    Bug: v8:14108
    Change-Id: Ic8ed0c19120b86a44578044ec6d71d0ffcaee7ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5001643
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90863}

commit f729a0fbfcf492bbfc9f3dbd7568499e4e893cd7
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Fri Nov 10 12:07:56 2023 +0100

    cppgc: Never free normal pages on memory-reducing GCs
    
    The logic before this CL was not uniform:
    - pages are freed (returned back to the OS, e.g. munmaped without the
      cage) when discovered to be empty by the sweeper,
    - pooled pages are discarded (e.g. madvise) at the end of the
      memory-reducing GC phase.
    
    The CL fixes it by keeping only discarding logic.
    
    Bug: v8:14441, chromium:1500388
    Change-Id: Idf318c9c1ee720f5d5aa2d2c64bb4e4cf87065d2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020807
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90862}

commit 7b59899e869fd1520ca45c6eb9f418402ec9ce59
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Fri Nov 10 11:15:12 2023 +0100

    [maglev] Hoist some phi input untagging out of loops
    
    Implement the ability to hoist untagging operations for untagged loop
    phis out of the loop.
    
    If we can hoist the untagging we ignore the input edge in
    representation inference, since it should always be cheaper to untag
    before the loop.
    
    For now the optimization is only enabled for OSR values. The reason is
    that in normal code we could have a deopt loop if we can't learn when
    the speculative untagging failed.
    
    To be able to insert checked untaggings we create a use a new
    checkpointed jump instruction that has a deopt frame attached.
    
    Bug: v8:7700
    Change-Id: Ic3f3b0809374ffad412ef9028bb047dd6cd57ad0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5008116
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90861}

commit 19ebfc7d159dfe1c3a28880c14d07e8724094956
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 10 12:58:19 2023 +0100

    [wasm] Introduce caching timeout
    
    In order to improve our cache hit rate, we aim to cache code in smaller
    chunks. To avoid caching too often, the caching timeout will be used. As
    long as new TurboFan code is being compiled within the timeout, no
    caching is triggered yet. Only after the timeout expires without any new
    TurboFan code, we trigger caching.
    
    R=ahaas@chromium.org
    
    Bug: v8:14411
    Change-Id: Ic682251f59106f62a74d34bd3bf2243286eddd7d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013669
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90860}

commit dd1ac637c65dfb6355127a5c778f5125acc4de40
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 10 14:00:03 2023 +0100

    Reland "[wasm] Drop mostly-unused argument to BrOrRet"
    
    This is a reland of commit ab3efdb5594cef25226b14cc0e2783ae4d6537ff.
    
    The merge conflict is fixed in PS2.
    
    Original change's description:
    > [wasm] Drop mostly-unused argument to BrOrRet
    >
    > In particular, the function body decoder always passes 0 there. Internal
    > calls in TurboFan and Turboshaft will sometimes pass 1 instead.
    > This CL thus removes the argument from the interface definition and
    > makes it optional in TurboFan and Turboshaft. This in particular means
    > that Liftoff is not pulluted by requirements of other interfaces.
    >
    > R=thibaudm@chromium.org
    >
    > Change-Id: Ia72f8033127c14d0bbd8784ab40a14c381f880ec
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016840
    > Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90857}
    
    Change-Id: I947c141f73e1182d11357be170ed9a898c26c86f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020810
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90859}

commit 7a8505fc50171fa21463dc60f58bc0ec1ffa6f88
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 10 12:57:10 2023 +0000

    Revert "[wasm] Drop mostly-unused argument to BrOrRet"
    
    This reverts commit ab3efdb5594cef25226b14cc0e2783ae4d6537ff.
    
    Reason for revert: In-flight collision: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20builder/70984/overview
    
    Original change's description:
    > [wasm] Drop mostly-unused argument to BrOrRet
    >
    > In particular, the function body decoder always passes 0 there. Internal
    > calls in TurboFan and Turboshaft will sometimes pass 1 instead.
    > This CL thus removes the argument from the interface definition and
    > makes it optional in TurboFan and Turboshaft. This in particular means
    > that Liftoff is not pulluted by requirements of other interfaces.
    >
    > R=thibaudm@chromium.org
    >
    > Change-Id: Ia72f8033127c14d0bbd8784ab40a14c381f880ec
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016840
    > Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90857}
    
    Change-Id: I3ed005d25675e4d82884c00bc56cff0bd63c3d68
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5020809
    Auto-Submit: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90858}

commit ab3efdb5594cef25226b14cc0e2783ae4d6537ff
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Nov 9 15:53:04 2023 +0100

    [wasm] Drop mostly-unused argument to BrOrRet
    
    In particular, the function body decoder always passes 0 there. Internal
    calls in TurboFan and Turboshaft will sometimes pass 1 instead.
    This CL thus removes the argument from the interface definition and
    makes it optional in TurboFan and Turboshaft. This in particular means
    that Liftoff is not pulluted by requirements of other interfaces.
    
    R=thibaudm@chromium.org
    
    Change-Id: Ia72f8033127c14d0bbd8784ab40a14c381f880ec
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016840
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90857}

commit a66c69351db7db3589a0f536bb9af0b0bd18ee1c
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri Nov 10 10:17:21 2023 +0100

    [wasm][exnref] Implement try-table in Liftoff
    
    R=clemensb@chromium.org
    
    Bug: v8:14398
    Change-Id: I5d61feb41be7d461a464f8ddf8e24da57795d83c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013668
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90856}

commit 8b70c9388f66fb35d4a4233b13ac867a93be9b06
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Nov 10 11:21:52 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 4
    
    This CL adds some basic support for loads.
    In Turboshaft loads are more complex operations that encode a base, an
    index, an element size and an offset.
    This doesn't fit very well to the arm64 instructions, so a
    LoadLoweringReducer is added to "simplify" loads back to the pattern
    *(base + offset) which is equivalent to loads in Turbofan.
    
    Bug: v8:12783
    Change-Id: I10e93b252a5426aef5a3c08838dcfb0a1dd090fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994354
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90855}

commit 6cea1972676c2f65e82311a6eeb42c4a1b4d99b7
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Nov 9 11:10:46 2023 +0800

    [riscv] Enable some SIMD test cases and enable turboshaft/instruction-selection on riscv64
    
    Change-Id: If9660dd9e9ce7a42d5f59df242da12586a427367
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013640
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90854}

commit 0f2d638941a9773e47a887e027ade00a17c2da63
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 10 10:17:08 2023 +0100

    [heap] Remove TryExpandImpl methods
    
    This CL removes CompactionSpace::TryExpandImpl. This class
    overloaded this method in order to register new pages. Instead of
    doing this CompactionSpace now overloads a new virtual method
    NotifyNewPage() for this.
    
    PagedSpace::TryExpandImpl() can then be moved directly into
    PagedSpace::TryExpand().
    
    Bug: chromium:1480975
    Change-Id: Idb13e48d67d3af09bec5975b0cb416e220fac5a5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017761
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90853}

commit 620ab619af95818039143c2b00ab02eb0d2aaaa1
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Nov 9 15:10:30 2023 +0100

    [turboshaft][wasm] Inlining improvements
    
    - Respect command line flags when inlining with liftoff.
    - Add tracing.
    - Do not mark imported functions for inlining.
    
    Bug: v8:14108
    Change-Id: I5ead88f8c88e1e94068f6c6c201964966dd4bf67
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4995786
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90852}

commit 2555642f6a04913a0689d72b31a23cdad43d8c33
Author: Liviu Rau <liviurau@chromium.org>
Date:   Thu Nov 9 12:14:43 2023 +0100

    [test262] Clean-up staging folder on import.
    
    We will delete the staging tests as they come full cycle via local Upload then export then import.
    
    Bug: v8:7834
    Change-Id: Ib675463c8d317879db99ecff5ff0c34bceca0047
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016836
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90851}

commit b8997b5668474283e3ecbcf6dcc6538565ef2cc5
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Nov 10 08:37:41 2023 +0100

    [turboshaft] Do not clone branches that Branch on a single Constant
    
    CanBeConstantFolded assumed that the condition would be at least a
    binop/comparison, and that it would therefore recurse only once and
    have inputs in predecessor blocks. This is obviously not always the
    case, and when a condition only uses constants of the same block, we
    should not attempt to clone its block.
    
    Fixed: chromium:1501153
    Bug: v8:12783
    Change-Id: I81aa7f6e9ecb16f22a10707670138bc96c0dc10c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017760
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90850}

commit 029fb0e3078b45ed918f7a36d6661c9c2d0f6490
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Nov 9 14:12:27 2023 +0100

    [wasm] Handle calls to imports in wrapper inlining
    
    The js-to-wasm wrapper inlining assumed that the called wasm function is
    not an imported function. This CL fixes this incorrect assumption.
    
    Additionally this CL changes the creation of WasmInternalFunctions to
    set a call_target only for not-imported functions. The reason is that at
    wrapper tier-up the call_target cannot be updated. The inconsistency,
    that the call_target is set before wrapper tier-up but not after wrapper
    tier-up, was hiding the referenced bug. This CL removes this
    inconsistency.
    
    Bug: chromium:1493747
    Change-Id: I2ce3d2f80588c978d1d6adbb6fa457a34f5b6e0e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016842
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90849}

commit 4c85b27d02889237f2145bffc378de9372a3f381
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Nov 10 10:10:49 2023 +0100

    [infra] Remove mac-arm64 simulator bots
    
    Counterpart to https://crrev.com/c/5017762.
    
    Bug: chromium:1500139
    Change-Id: Iecc6b13dd4fc5104a57eaf63cf405e95fd54b472
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017763
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90848}

commit 8dc65ee0a4e031d70ef76012fcce6d67409d30c5
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 10 08:36:19 2023 +0100

    [heap] Unify Heap::NotifyOldGenerationExpansion
    
    This CL merges NotifyOldGenerationExpansion() and
    NotifyOldGenerationExpansionBackground() together to reduce
    code duplication between main and background thread allocation.
    
    Bug: chromium:1480975
    Change-Id: I39a18590e87eed4f4263cf7ed7e0d7f988a27568
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5018096
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90847}

commit 0fc632f4343124cf0fd0b165c6afa0b4d98df12b
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Nov 9 13:43:18 2023 +0100

    [wasm][refactor] Replace some USE by [[maybe_unused]]
    
    In many cases (if the USE is close to the definition of the potentially
    unused variable) it is more elegant to annotate the variable as
    [[maybe_unused]] (C++17).
    
    R=thibaudm@chromium.org
    
    Change-Id: I214f3dccca9f98c247598df22cd47b6470b38c2a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016838
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90846}

commit b38e1e9fd6b5a0c6b4a38ca32368f494a65c99d7
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Nov 9 13:31:45 2023 +0100

    [wasm] Remove another instance of touching all memory
    
    This is a follow-up to https://crrev.com/c/4935418.
    I just found another debug-only code path that touches each memory page
    of allocated Wasm memory.
    Removing this will drastically reduce memory usage for tests that
    allocate huge memories.
    
    R=ahaas@chromium.org
    CC=machenbach@chromium.org
    
    Bug: v8:14373
    Change-Id: I088f4aa720ffc9cc0b0156097ab40ab16760051b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5016839
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90845}

commit d20e2319cfcdacd2e8f71100b267b9791d69f722
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Nov 9 13:48:39 2023 +0100

    [heap] DCHECK that LABs are either used in or outside GC
    
    DCHECK that GC LABs are only used in the atomic GC pause and
    always use AllocationOrigin::kGC. At the same time this CL ensures
    that non-GC LABs are never used inside the atomic pause and never use
    AllocationOrigin::kGC.
    
    Drive-by: Fix a possible race condition in Heap::IsInGC().
    
    Bug: chromium:1480975
    Change-Id: I6cede32eb7662cb874a747e67de1fbabf22426f6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012675
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90844}

commit cd7b6d88522858f05457d9928e785c60080fbc94
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Nov 9 20:06:03 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/7f3a1ab..e159812
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/32d5d56..d62e23e
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/5a57691..f25d23e
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/5828285..dbd2967
    
    Rolling v8/third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/3f588d7..c078b56
    
    Rolling v8/third_party/fuchsia-sdk/sdk: version:16.20231030.2.1..version:16.20231109.2.1
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/2780606..cec6ffa
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764845685714121841
    
    Change-Id: I6e5da704875d7c9d83b30a65bf63724fe4b8029a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017288
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90843}

commit 2ac21a631377a1dffaf3d37244dfd0c2528650b6
Author: JianxiaoLuIntel <jianxiao.lu@intel.com>
Date:   Tue Nov 7 14:37:35 2023 +0800

    [turboshaft] If offset of store/load is in int range, use it as static offset.
    
    Bug: v8:14108
    
    Change-Id: I6f2c87e6839184fcbc56f4b747d49965f1f1adca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009244
    Commit-Queue: Jianxiao Lu <jianxiao.lu@intel.com>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90842}

commit 71e64845cb95e8148bf90da67d232cc9515de1b8
Author: jiepan <jie.pan@intel.com>
Date:   Wed Nov 8 23:00:29 2023 +0800

    [assembler][x64] remove unnecessary rex prefix in bswapl
    
    Change-Id: Ia56c00d9d75c86d40b7f083ffb290ae59e8aaadc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5014283
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jie Pan <jie.pan@intel.com>
    Cr-Commit-Position: refs/heads/main@{#90841}

commit 37dd0f9f37161d20a368e37974acd9037d1ef894
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Nov 9 11:55:11 2023 -0500

    PPC: fix invocation_count endianness issue
    
    Port a382e586106c2966c1c4332c14985555eed92d3a
    
    R=junyan@redhat.com, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I3b24649e58130a3be6a528d6c5214fd7c9bf262c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017557
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90840}

commit f1a4b9c9ea5f4f511e5ebdbc88b573f184116f07
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Wed Nov 8 16:33:47 2023 +0100

    Add HeapObject::Print
    
    This shoudl making printing in gdb more intuitive for most use-cases.
    
    Change-Id: I587178ab756933948ff4ac330f4574ab74ddbc34
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013667
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90839}

commit e7bd8d0ac8223287b13a77556a7ebe03a38b1f7f
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Thu Nov 9 09:36:33 2023 -0700

    [wasm] Override bind for WebAssembly.Function.prototype
    
    Function.prototype.bind returns BoundFunction with its [[proto]] set to a target function's prototype. It introduces a lot confusion for WebAssembly.Function, because it indistinguishable from a legit WebAssembly.Function but cannot be used as an argument for WebAssembly.Table.set.
    
    To fix it bind is overloaded on WebAssembly.Function level to always return BoundFunction exotic object with regular Function prototype.
    
    Bug: v8:7742
    Change-Id: I326b7dfa01b0da9f88e72ce29fca2517778d246a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013637
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90838}

commit ac98b4aac6a8cae7b1cfb2a25e488b1d98f081ac
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Nov 9 08:15:49 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/59a4989..7f3a1ab
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/3a66263..5828285
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/419fc57..bbcb7c6
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764890984702990433
    
    Change-Id: I820c84e60c2b7f653531b3910e73fe1578e1acaa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5017100
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90837}

commit a5562a2f1231b64145d41ef1a861535448bafc16
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Nov 9 14:43:30 2023 +0100

    [wasm][eh] Remove exception handling histograms
    
    These counters have a significant impact on performance and are not
    very useful.
    
    R=clemensb@chromium.org
    
    Bug: v8:14425
    Change-Id: I4d78c8f2e25c54ecc55aa792168804d2c55859de
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013478
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90836}

commit e7daa0f8f5cdb6715dcd33934d11311d8ba62863
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Nov 2 10:41:49 2023 +0100

    [asmjs] Log code
    
    Code logging was missing after synchronous asmjs compilation, even
    though it existed for synchronous wasm compilation.
    
    Bug: v8:14108
    Change-Id: I6272e6fa7bfaff63bcd0d0190b805a55f7d4bd11
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4987307
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90835}

commit 2d8644327784641f54bffd6c52a47cc9c73fab3f
Author: Junji Watanabe <jwata@google.com>
Date:   Thu Nov 9 17:20:30 2023 +0900

    Reduce unused gen/include include dir
    
    $target_gen_dir/include is added to many compile actions, while only
    `include/v8-inspector-protocol.h` depends on the generated header files.
    
    The redundant include dir is problematic for deterministic remote
    compiles. See http://b/306144160 for more details.
    
    //third_party/blink/renderer/core/inspector:generated
    is the only target that depends `v8-inspector-protocol.h`
    The dependency has already been corrected in https://crrev.com/c/4951341
    
    This CL changes v8 GN configs to add `$target_gen_dir/include`
    only to a subset of compiles.
    
    Bug: b/306144160
    Change-Id: Id1b00584580af49726fec3fc183b655c83d4cf28
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5004484
    Auto-Submit: Junji Watanabe <jwata@google.com>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90834}

commit efb1133eb894a283ff0341c4e44d43e913911b6c
Author: Joyee Cheung <joyee@igalia.com>
Date:   Fri Nov 3 12:30:49 2023 +0000

    [api] Add v8::ScriptCompiler::CachedData::CompatibilityCheck()
    
    This patch adds a new API v8::ScriptCompiler::CachedData::CompatibilityCheck()
    in order to allow embedders to check if the code cache can be used in
    the current isolate without looking up for the source code. It also returns more detailed reasons about why the code cache cannot be used
    when it's bound to be rejected. This makes it possible to enforce
    portability checks in case code code becomes CPU-dependent in the
    future.
    
    Refs: https://github.com/nodejs/node/issues/42566#issuecomment-1735862123
    
    Change-Id: Ia1d677b949050add961af6fbf62c44342c061312
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905290
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#90833}

commit 45d4d7715f11e4fa4cf851faeeb7da0aa9c2a626
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Nov 9 11:16:36 2023 +0100

    [heap] Fix crash in CHECK in StartMarkingMinor()
    
    The key issue here is that IsolateInBackgroundNotification() for
    worker isolates do not happen in a task, but directly update the
    atomic flag Isolate::IsIsolateInBackground() which is then used in
    Heap::ShouldUseBackgroundThreads().
    
    The crash here was because I assumed that the result of
    ShouldUseBackgroundThreads() doesn't change in-between
    Heap::StartMinorMSIncrementalMarkingIfNeeded() and
    IncrementalMarking::StartMarkingMinor() as no tasks can run here.
    However, for worker isolates this is not enough as the state can
    be directly changed from the main thread. This CL therefore removes
    this CHECK.
    
    However, there is another potential issue/inconsistency when
    starting concurrent marking. StartMarking() invokes
    Heap::ShouldUseBackgroundThreads() a second time if it happens
    outside the atomic pause. Both calls could observer different results.
    From what I can see this does not result in a crash but is still
    surprising and unintended. A GC cycle should use a consistent
    result/value for ShouldUseBackgroundThreads().
    This CL fixes this by avoiding the second invocation when
    StartMarking() is invoked from outside the atomic pause.
    
    Bug: chromium:1500838
    Change-Id: I6b572b1e1d92e79e6b9dfc35e6867b5de97afe80
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013474
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90832}

commit 92d4e663fa8afc74876a39cab46476118a0c9c74
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Thu Nov 9 11:31:59 2023 +0100

    [maglev] Add eager deopt registers to register snapshot
    
    We proactively add the deopt registers to the register snapshot in
    nodes that can eagerly deopt and do a deferred call.
    
    Currently, this happens to these nodes:
    - CheckedObjectToIndex
    - CheckMapsWithMigration
    - CheckValueEqualsString
    - MaybeGrowAndEnsureWritableFastElements
    - TryOnStackReplacement
    
    In 4 of these nodes we were already adding the deopt registers
    in an ad-hoc fashion. {CheckedObjectToIndex} currently does not
    need, since it is *currently* guaranteed that the eager deopt
    registers are subset of the live registers due to the lifetime
    extension of deopt inputs. This could easily change in the future
    though. This CL guarantees that we don't shoot ourselves in the foot.
    
    Bug: chromium:1381335, chromium:1500857
    
    Change-Id: I213f2f02861c5911bc0da3cfb1f5c8189928efbd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013477
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90831}

commit 466122d915798dba7fb4eafb9193160865230e00
Author: Samuel Groß <saelo@chromium.org>
Date:   Thu Nov 9 08:27:57 2023 +0000

    [sandbox] Make SFI::function_data private
    
    In an upcoming CL, we want to split the field into a trusted pointer
    part and a tagged pointer part. As such, users of the field should not
    directly load the tagged pointer but should instead call a new GetData()
    method that returns the correct data depending on which of the two
    fields is "active".
    
    In addition, most existing places that use the "raw" function_data are
    better off using one of the specialized accessors (set_bytecode_array(),
    wasm_function_data(), etc.). so this CL also switches them to these.
    
    Bug: chromium:1490564
    Change-Id: Idbced7b6c32fef231d767d28ebe4534d3f2da56e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922342
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90830}

commit 59ea282d583bb76c726f7319664e096294fa5a74
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Nov 2 12:56:08 2023 +0100

    [debug][inspector] Deprecate vector<v8::Local>
    
    According to V8's public API documentation, local handles (i.e.,
    objects of type v8::Local<T>) "should never be allocated on the heap".
    This disallows heap-allocated data structures containing instances of
    v8::Local, like std::vector<v8::Local<v8::String>>.
    
    This CL continues the deprecation of such data structures from the V8
    code base, using v8::LocalVector instead.
    
    Bug: chromium:1454114
    Change-Id: I90e76c85abad6be2288666bfafade1bd19352cb7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4995788
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90829}

commit d79fd0e2b0e71c72c1363b48804413a65916fd7d
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Nov 8 20:23:29 2023 +0100

    [heap] Use separate MainAllocator instances for new space in GC
    
    EvacuationAllocator was using its own LAB implementation around
    the new space's MainAllocator instance. This CL changes this and
    adds a MainAllocator instance to each GC thread.
    
    This CL also limits LAB size in the semi space new space during
    GC to 32K as was used in the EvacuationAllocator LAB. This was
    necessary to fix a ~1-2% regression in Octane. Without that each
    LAB would likely allocate a full page which increases
    fragmentation.
    
    With this CL we now have the invariant that the regular LABs are
    only used outside GC and the GC itself exclusively uses its own
    LABs for allocation.
    
    Bug: chromium:1480975
    Change-Id: Ie4fab0f6f2fc0818506b0a188ae17b909a6c1b27
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006442
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90828}

commit c45d43c8811db4ea4bcf3d91c610b7b10c7b28d4
Author: Jose Dapena Paz <jdapena@igalia.com>
Date:   Tue Sep 5 13:44:05 2023 +0200

    Add system memory usage to csuite
    
    New command line option for csuite.py --memory, that will use the just
    introduced d8 command line switch --dump-system-memory-stats and add a
    row with the obtained value.
    
    This way we not only compute the CPU time of the test, but also the
    peak memory usage.
    
    Bug: v8:14298
    Change-Id: I6d34c03a3c2dbc77894c53a8ddf76a46eaa8ca63
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4843110
    Commit-Queue: Liviu Rau <liviurau@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90827}

commit 49e94916b9297e7653d1fe5d96c39137f974bc85
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Nov 8 20:16:15 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/df6338f..59a4989
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/48ab3bd..32d5d56
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/df8f862..84ccde0
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/96c026e..5a57691
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/a83e690..3a66263
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764936282545113649
    
    Change-Id: Iec386b63297c840139924f7d8a794050edf229ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013067
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90826}

commit 4f9a1267cad0237549587f3007ccf90e0295efda
Author: Pan, Tao <tao.pan@intel.com>
Date:   Tue Nov 7 22:31:24 2023 -0500

    [json] Don't advance to non decimal when parsing integer string
    
    This CL can reduce scanning from begin to end of decimal digit character
    once. Execution time of below micro case can be reduced by ~7%.
    
    let json_str = "[1";
    for (let i = 2; i <= 100; i++) { json_str += "," + i; }
    json_str += "]";
    for (let i = 0; i < 5e6; i++) JSON.parse(json_str);
    
    Change-Id: I939de9e5a9edf459cd5793ea71cf3a91eb33d3a8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4987196
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Tao Pan <tao.pan@intel.com>
    Cr-Commit-Position: refs/heads/main@{#90825}

commit 207b5f553aafb8e8b37c30568daaf09f750b708e
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Wed Nov 8 14:49:31 2023 +0800

    [loong64][mips64][riscv] Skip turboshaft/instruction-selection on more platforms
    
    Bug: v8:12783
    Change-Id: I228951aa5430b210b14e1409fd1c4b13b650a6ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003822
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90824}

commit a3cc2f3723e7e1c200991076cd1a9c936cd3a7e7
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed Nov 8 10:49:39 2023 -0800

    [shared-struct] Move elements template to instance map
    
    The elements template currently lives on the constructor JSFunction.
    Move this to be a data constant on the instance map so prepare for
    having a shared struct type registry.
    
    Bug: v8:12547
    Change-Id: Ic6a46e9e7befafcb4aec43f86d7dbc6854c3fd4d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5008163
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90823}

commit e9847b71ee7d77cdc995d2655f588b24b9689e03
Author: Jérôme Vouillon <jerome.vouillon@gmail.com>
Date:   Wed Nov 8 11:51:20 2023 +0100

    [wasm] Speed-up creation of WasmExceptionPackage objects
    
    The object is directly created with the right map, so that its
    properties can be set directly without further allocation and without
    having to update the map.
    
    This significantly speeds up Wasm exceptions.
    
    Bug: v8:14425
    Change-Id: I81da130353607ccffb52a25da620208492056204
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012683
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90822}

commit 9a06581a0bd77066d0ac35d4eea90f270957d197
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Nov 8 18:21:24 2023 +0100

    [test] Bump shard on slow test suite
    
    There were too few shards chosen in:
    https://crrev.com/c/5012666
    
    Bug: v8:13008
    Change-Id: I83c22b5aff31a93d601590f45c271cc0f79ee9b8
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012808
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90821}

commit 27a3ac441c05b8db95489680d76d768c93232447
Author: Daniel Cheng <dcheng@chromium.org>
Date:   Wed Nov 8 07:30:05 2023 +0000

    Initialize row and column fields in ScriptCompiler::Source.
    
    The stricter -fsanitize-memory-param-retval flag appears to show these
    fields are used to construct ScriptCacheKey:
    
    ==1545976==WARNING: MemorySanitizer: use-of-uninitialized-value
        #0 0x5557f29ad140 in ScriptCacheKey v8/src/objects/compilation-cache-table.cc:307:7
        #1 0x5557f29ad140 in v8::internal::CompilationCacheTable::LookupScript(...) v8/src/objects/compilation-cache-table.cc:399:18
        ...
    
      Uninitialized value was stored to memory at
        #0 0x5557f29ad139 in ScriptCacheKey v8/src/objects/compilation-cache-table.cc:308:38
        #1 0x5557f29ad139 in v8::internal::CompilationCacheTable::LookupScript(...) v8/src/objects/compilation-cache-table.cc:399:18
        ...
    
      Uninitialized value was stored to memory at
        #0 0x5557f19c807f in GetScriptDetails v8/src/api/api.cc:2549:30
        #1 0x5557f19c807f in v8::ScriptCompiler::CompileUnboundInternal(...) v8/src/api/api.cc:2576:37
    
      Uninitialized value was created by an allocation of 'script_source17' in the stack frame
        #0 0x5557f19d163c in v8::Script::Compile(...) v8/src/api/api.cc:2956:3
    
    Presumably, these are only left uninitialized when there is no actual
    row or column information, so these two fields now default to -1 to
    indicate an unknown provenance.
    
    Bug: chromium:1369167
    Change-Id: Icdb9a9fe5880045a8a524662e722ed972a8ea990
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5011167
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Daniel Cheng <dcheng@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90820}

commit 434d639d2833afb0af639e52a07406e7f3dcc7b4
Author: Daniel Cheng <dcheng@chromium.org>
Date:   Wed Nov 8 06:08:32 2023 +0000

    Initialize simulator stack.
    
    With -fsanitize-memory-param-retval flag, msan uses stricter checks that
    better match the standard, which states in [basic.indet]/2 that "If an
    indeterminate value is produced by an evaluation, the behavior is
    undefined", with limited exceptions for unsigned char and std::byte
    values. An important side effect is this makes C++ ABI compatible with
    Rust when building with msan support.
    
    This means code like the following is no longer accepted:
    
      void F(int) {}
      void G() {
        int uninitialized;
        // use-of-uninitialized-value here when calling F().
        F(uninitialized);
      }
    
    In the case of the simulator, this becomes problematic when tracing
    arguments that originate from the stack. Simulator::DoRuntimeCall()
    populates args, some with potentially indeterminate values:
    
      const int64_t arg0 = xreg(0);
      ...
      const int64_t arg7 = xreg(7);
      const int64_t arg8 = stack_pointer[0];  // potentially indeterminate
      ...
    
    And later passes these to TraceSim():
    
          TraceSim(..., arg0, arg1, arg2, ...);
    
    At which point msan complains about uninitialize-use-of-value. The
    simple fix is just to zero-initialise the simulator stack.
    
    Bug: chromium:1369167
    Change-Id: I51df36f585b3f0bf15086a8087d1b99bf57cc40e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5011430
    Commit-Queue: Daniel Cheng <dcheng@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90819}

commit 3df8881a4cbd96ff209a7919a9fa62316a661aa5
Author: Shu-yu Guo <syg@chromium.org>
Date:   Wed Nov 8 08:14:58 2023 -0800

    [object] Introduce OffHeapHashTableBase and use it for StringTable
    
    This is a pure refactoring CL which refactors a OffHeapHashTableBase<T>
    base class out of StringTable::Data.
    
    The new base class is planned to be used for the shared struct type
    registry table in an upcoming CL.
    
    Bug: v8:12547
    Change-Id: I39e9d98ca696e9237bdf7fa06c316f3263187983
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5008162
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90818}

commit 7941062aa9f264a72617be772de2b8dffdffc54a
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Tue Nov 7 15:10:37 2023 +0100

    [json] Avoid FlatStringReader and use GetCharVector directly
    
    We know the character width, so there is not need to use the
    FlatStringReader helper,=.
    
    Drive-by-fix:
    - Dehandlify more code
    
    Change-Id: I238d7c67d7c39f82a1a512efaa74437973c88abb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4897276
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90817}

commit ebcb255b156de789dfeb84d94eb024081db98c36
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Nov 7 14:36:31 2023 +0100

    [heap] Avoid usage of CompactionSpaceKind in MainAllocator
    
    Instead of Allocator::GetCompactionSpaceKind() the constructor gets
    an additional MainAllocator::Context argument to decide whether this
    is an allocation during GC or not. This is similar to the
    ConcurrentAllocator usage in a GC and it also will allow us to
    get rid of CompactionSpaces in the future.
    
    In addition this CL also makes allocation_counter_ and
    linear_area_original_data_ optional. These fields are not needed
    during a GC and don't need to be set up at all.
    
    Bug: chromium:1480975
    Change-Id: I06681942c530a88b1be94cbf4327188dc591ad3f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009402
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90816}

commit 79a587aff318f3df5ea3c5c0ab4b8ef3d2766683
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Nov 8 08:07:14 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/03ab17b..df8f862
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/197399a..a83e690
    
    Roll created at https://cr-buildbucket.appspot.com/build/8764981580437234481
    
    Change-Id: I6a8d8f16f38413ff13bb43bfbab64225998ffc67
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013064
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90815}

commit fa7521ef3eb6c69fa398809e7ce4a869c94661fa
Author: Darius M <dmercadier@chromium.org>
Date:   Tue Nov 7 09:43:26 2023 +0100

    [turboshaft] Use absl containers instead of std::unordered*
    
    Bug: v8:12783
    Change-Id: Ifdb5ae48d6f236ad7ace474c38c1822ebb7930f3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4681718
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90814}

commit bad6f61c3527cf7de18b4c9f9ef216df52f7f703
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Nov 8 14:12:27 2023 +0100

    [test] Move code-serializer testing to x64 and make it block CQ
    
    Bug: v8:13008
    Change-Id: I1f34069947bc6332c9c02ed9b5ba5ace68e8f0b9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012666
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90813}

commit f81f97ba134e26e8c5207d7f1adf67072c3dcaad
Author: Peter Varga <pvarga@inf.u-szeged.hu>
Date:   Wed Nov 8 13:06:12 2023 +0100

    IWYU: Add missing include for DCHECK_NE
    
    Bug: none
    Change-Id: Ib0c85f171b6f77212722f5edd6fc2a0709763cbc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012785
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90812}

commit 1a57a3762358979f69800a5d891fcaece0f37ed2
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Nov 8 14:03:09 2023 +0100

    [maglev] Phi untagging fix
    
    For non loop phis the actual number of inputs should be used when
    traversing a partially constructed phi structure.
    
    Fix for CL https://crrev.com/c/5004063
    
    Fixed: chromium:1500577
    Change-Id: I00129a3c4d5c879af993bd0b3e5eb011cc086935
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012665
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90811}

commit bf3032705d5740910bdca311ab07339cd5d52db0
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 7 10:27:40 2023 +0000

    [sandbox] Reference BytecodeArrays from Code through their wrapper
    
    As Code objects are still inside the sandbox, they cannot reference
    BytecodeArrays through a tagged pointer once these move out of the
    sandbox. So instead, we now use the BytecodeArray's in-sandbox wrapper
    object. While it would be better to use a trusted pointer directly to
    the BytecodeArray, we expect to also move Code objects out of the
    sandbox, at which point they can again use a tagged pointer to reference
    the BytecodeArray. As such, either solution is a temporary one, and
    using the wrapper object is the easier approach.
    
    Bug: chromium:1472252
    Change-Id: I0b965a368ef08dd0988fa41b440627f9818d0454
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002440
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90810}

commit ec7f9b2677b7268477126483a5cace0cf7e95c3d
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Nov 8 12:35:10 2023 +0100

    [heap] Remove unused buffer_ field in EvacuateNewSpaceVisitor
    
    The buffer_ field isn't used anymore.
    
    Bug: chromium:1480975
    Change-Id: Ic2aceab5345da3d09dd76d278e0f9765e636b528
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5012784
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90809}

commit 42f459e030ea93350f01d7fd81e12559872430ba
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Nov 8 12:42:22 2023 +0000

    Revert "[runtime] Add and use Script::has_host_defined_options"
    
    This reverts commit bb5ec5ba1a9499a9a1201802e9c91db125ec448d.
    
    Reason for revert: Fails on linux debug:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20debug/46107/overview
    e.g. "host_defined_options() == ReadOnlyRoots(GetHeap()).empty_fixed_array() || host_d"
    
    
    Original change's description:
    > [runtime] Add and use Script::has_host_defined_options
    >
    > Check that we don't replace existing host-defined options.
    >
    > Bug: chromium:1244145, v8:10284
    > Change-Id: I699e3f1512cf649bae340066d6ac079a5f91abd0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4972716
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90806}
    
    Bug: chromium:1244145, v8:10284
    Change-Id: Id62aecc45bf7d436ce330a8102c2c9f256924b3f
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5013663
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90808}

commit 17e1db673577433c93b52c879c1fab2e5319fd97
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Nov 8 16:03:23 2023 +0800

    [riscv][turboshaft] Port InstructionSelector
    
    Bug: v8:12783
    
    Change-Id: I13b120d7599920a294040c2a12e26f79ecd976c4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5011169
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90807}

commit bb5ec5ba1a9499a9a1201802e9c91db125ec448d
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Tue Nov 7 13:16:16 2023 +0100

    [runtime] Add and use Script::has_host_defined_options
    
    Check that we don't replace existing host-defined options.
    
    Bug: chromium:1244145, v8:10284
    Change-Id: I699e3f1512cf649bae340066d6ac079a5f91abd0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4972716
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90806}

commit e48c47268c53499814c88c35064d564dbb92e6fd
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Tue Nov 7 19:13:31 2023 +0100

    [api] Remove AllCan Read/Write
    
    AllCan Read and Write are long-deprecated mechanisms for dealing with
    cross-origin access. Chrome doesn't use this anymore, and other
    embedders shouldn't be using it in the first place.
    
    I'm trying to skip some steps though by directly dropping AccessControl
    in various places. Presumably most embedders won't be directly affected
    by this because they won't pass in those non-default values anyway.
    
    In the CL I'm also deprecating SetAccessor which is an outdated type of
    accessor. They should be replaced with SetNativeDataProperty for
    internal properties that are spec'd as properties with special
    behaviour, or SetAccessorProperty for properties that are visible to JS
    as accessors.
    
    Change-Id: I6c15fb436bd949d524fe7f90d2afad05358b963e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006387
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90805}

commit b6c15996ba20d6afc115f1d5973f8af789f9815d
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 7 09:01:48 2023 +0000

    [sandbox] Use bytecode wrappers in pending optimization table
    
    Once we move BytecodeArrays out of the sandbox, we can no longer
    reference them through tagged/compressed pointers from inside the main
    pointer compression cage. Instead, we can use the BytecodeArray's
    in-sandbox wrapper object.
    
    Bug: chromium:1472252
    Change-Id: Ib21ab81098fa08a0d2af741378de050b1cdbb0f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009931
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90804}

commit 9e0df0bc4041c22d444a50ef67c8486f329ce837
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Tue Nov 7 14:15:40 2023 +0100

    [maglev] Fix phi untagging skipping smi check
    
    A CheckedSmiUntag can only be removed if there is no use of the phi
    which requires the int32 to be within the smi value range.
    
    For instance if we still have tagged uses downstream and they currently
    assume UnsafeSmiTag, then we must stay in the smi range for correctness.
    
    Bug: v8:7700, chromium:1499133
    Change-Id: I340b48eb8d6e5eeb1cc6ca00fa5af0a4f2953513
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5004063
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90803}

commit f19d2d36709d41acb64020eb4663e18b299278bc
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Nov 7 20:17:21 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/ab8815d..df6338f
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/a724b3a..48ab3bd
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/124950e..96c026e
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/ccc34d2..197399a
    
    Rolling v8/third_party/instrumented_libraries: https://chromium.googlesource.com/chromium/src/third_party/instrumented_libraries/+log/10e7f91..4aedc47
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/2364ae8..2780606
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/d1e293c..419fc57
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765026880579667633
    
    Change-Id: I654efcc74e7e43f41cc7f98d6ebbe4aeeb778e68
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5007229
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90802}

commit 39399268bc97f60520abef1576f95c894fc30332
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Tue Nov 7 11:15:41 2023 +0800

    [loong64][interpreter] Skip spread machinery in default derived constructor
    
    Port commit 6ee16b764a2e267e20a3b25163b5077656eda9a3
    
    Change-Id: I83592cfe23b47c1b64906c4de2d0b1e13fbd04e7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5004476
    Auto-Submit: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90801}

commit f5a7962861b208e9cf82e61c1fa9f8dc0d216a87
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Nov 7 16:44:10 2023 +0100

    [wasm][turboshaft] Manually cache instance fields
    
    This introduces an "InstanceCache" helper that conveniently lets us
    cache the values of commonly used WasmInstanceObject fields during
    graph building.
    In particular, this allows caching the memory start for asm.js code,
    which LateLoadElimination couldn't handle due to loads of this value
    always happening in conditional branches (after the bounds check).
    
    Bug: v8:14108
    Change-Id: I6e60bdc7ac368d9f4b8821171dbdfe4ec8c949d5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002000
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90800}

commit 492a4920f011fa2ceeadfe99022d8d573e7d74a6
Author: pthier <pthier@chromium.org>
Date:   Tue Nov 7 16:49:13 2023 +0100

    [regexp] Check for valid flags in deserializer.
    
    Verify RegExp flags in value deserializier. Invalid flag combinations
    were first introduced with unicode sets (flags u and v are mutually
    exclusive) and correctness wasn't verified in the ValueDeserializer.
    
    Bug: v8:14412
    Change-Id: Ib5fbd845dee3db3a09f0adb74977d12814aee052
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5008004
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90799}

commit 286339b67f6a16f1e3e8a210a4b8972c87715855
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Nov 7 11:09:39 2023 -0500

    Skip turboshaft/instruction-selection on more platforms
    
    Bug: v8:12783
    Change-Id: I5813494ac60af8771225dbcadc0579b7f0d08606
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009736
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90798}

commit 54a530a1c87a3086de6d8621e6f9d711d965ea70
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Nov 7 08:07:07 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/d1c7080..ab8815d
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/e1fa883..a724b3a
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/c6db851..124950e
    
    Rolling v8/third_party/instrumented_libraries: https://chromium.googlesource.com/chromium/src/third_party/instrumented_libraries/+log/09ea53c..10e7f91
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/d781e6e..2364ae8
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765072172243263633
    
    Change-Id: I04d9c0f6153440cd5b8bc1991cf8cb2b08e5a926
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009735
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90797}

commit 892a18491d01d922a2c3580a472c7e126e9360f5
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Nov 7 16:41:57 2023 +0100

    [turboshaft] Keep DebugFeatureLoweringPhase behind build flag
    
    On a release d8 build this saves 76 KB by not compiling the phase,
    the impact on chrome should be comparable.
    
    Bug: v8:12783
    Change-Id: Iac885e6fd0252a79deda264fd09f7d22770f0564
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5008001
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90796}

commit 474c8375ee6caeb38a2d3019c1785bfec49e60b2
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Nov 7 16:02:44 2023 +0100

    [infra] Install reclient on Mac arm64
    
    In https://crrev.com/c/4166667 we previously omitted arm64 for Linux
    explicitly, but for Mac we wnat to permit it, making the condition a
    bit bulky.
    
    Bug: chromium:1500139
    Change-Id: Ifc24df4c648480ae21058cef670ac27c2ee86da4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006445
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90795}

commit cb58ae3b26f84f8deeaf98a476e2dff970871720
Author: Daniel Lehmann <dlehmann@chromium.org>
Date:   Tue Nov 7 15:34:57 2023 +0100

    [regalloc] Remove mid-tier register allocator
    
    Background: As of earlier this year, the mid-tier regalloc was only
    used as a fallback for very large Wasm functions, due to some
    pathological compile times with the top-tier regalloc.
    Since we have fixed the (known) issues in the top-tier register
    allocator, the mid-tier regalloc is fully disabled via a Finch
    experiment in Chrome M117 and M118 and by default in M119.
    We can remove it now.
    
    This CL
    - removes the mid-tier regalloc implementation and build files,
    - collapses the (now empty) class hierarchy of
    `TopTierRegisterAllocationData` to just `RegisterAllocationData`,
    - removes tests that required the mid-tier regalloc to reproduce.
    
    Bug: v8:14082, chromium:1469533
    Change-Id: I8dd8127eb7649dc96b8872f7cfd2ac244b8edac9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009399
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90794}

commit e0c226a43ad7151003fc63e1c15da8fc2e93decb
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Nov 7 14:41:56 2023 +0100

    [turboshaft] Move OpMasks into separate header
    
    Bug: v8:12783
    Change-Id: I6c0aa943972165fb6f7b29f5d7a39f3a4975bd2c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009813
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90793}

commit ea2045f0233bb87cdafcde6fe1f204fa80e03e0e
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Nov 7 14:00:17 2023 +0100

    [wasm] Don't record empty safepoints for protected instructions
    
    When the trap handler handles an out-of-bounds memory access, then the
    allocation of the JavaScript exception may trigger a GC and invalidate
    the references in the frame of the function of the oob memory access.
    These references, however, are only needed in debug mode, where stack
    values can be inspected when an exception is happening. In production
    mode, the frame will just be unrolled anyways, and nobody accesses the
    references anymore.
    Therefore, no safepoint information is needed for these references in
    production code. So far, however, even though the safepoint information
    was empty for TurboFan, with this CL the safepoint gets eliminated
    altogether. Also safepoints in Liftoff get eliminated when the Liftoff
    code is not for debugging.
    
    To avoid hiding missing safepoint information there is a check that only
    safepoints at protected instructions are allowed to be missing.
    
    Bug: v8:14102
    Change-Id: I0c481f2698c8ca60278680d3d9bafc55851bd153
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5008112
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90792}

commit 85f0e9d884c7cb5fc2b4fa1e40d1270c858781fe
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Nov 7 12:30:36 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 3
    
    This CL adds turboshaft support for comparisons like VisitWordCompare.
    
    Bug: v8:12783
    Change-Id: I5ad68589459cb24e0e10ff4d1503fc33b06740d5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002003
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90791}

commit d136cd9f4d02ef97a60bdd543f86a5079474679f
Author: Stephen Belanger <stephen.belanger@datadoghq.com>
Date:   Mon Oct 23 18:44:22 2023 +0300

    Build flag ContinuationPreservedEmbedderData API
    
    This places the ContinuationPreservedEmbedderData API behind the
    V8_ENABLE_CONTINUATION_PRESERVED_EMBEDDER_DATA build flag.
    
    Change-Id: Ib098a3f500a1cbc35d69795b41f4d2636776d7b3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4903009
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90790}

commit 63959e0bcd04bc0fd4ce5e1900feef44f9220f28
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Nov 7 09:45:40 2023 +0100

    [bazel] Update prebuilt bazel to 6.4.0
    
    Bug: v8:14110
    Change-Id: Ia76e80397fd830fa8e0352911c7bda0d7bfd0d09
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006438
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90789}

commit 8d07052912178c154a25d8e5166dc4ee94570344
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Nov 7 11:34:32 2023 +0100

    [heap] Fix crash in Scavenger new space allocations
    
    RuntimeCallStats should only be used on the main thread. During
    Scavenger cycles, new space labs can be allocated on background threads.
    a RCS scope was established in such cases (even though they should not
    exist) because the regular new space MainAllocator is used (which is not
    marked as a compaction space).
    
    Change-Id: I284ceaf403c8bd97d4b0d3a0008c35cf13c11845
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002002
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90788}

commit 358dfc64f90ba62b7b65942468419d5c3f177313
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 3 14:49:53 2023 +0100

    [wasm] Add a fast path for type checking
    
    TypeCheckStackAgainstMerge is called a lot, and often in trivial
    situations (like TypeCheckFallThru with no result at the merge).
    Since the general TypeCheckStackAgainstMerge implementation is pretty
    involved, clang does not inline it and we spend ~6% of validation time
    in that method.
    This CL adds a fast path implementation for the case that we have no
    merge values, or exactly one merge value with matching type. For MVP
    modules this hits in nearly 100% of cases, speeding up validation by
    roughly 5% overall.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14402
    Change-Id: Ia09a6a635207701d10258bdca489bf29476bb254
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5001640
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90787}

commit a2647085637404d4edaa9bf9604f9d1fddeec797
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Nov 6 15:11:38 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 2
    
    This CL adds int32 and int64 addition, subtraction and multiplication.
    
    Bug: v8:12783
    Change-Id: Ib7d67968632b2648e9f818a81c7703f5aadd5e69
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5001642
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90786}

commit 29811efcdb11badc617b65fe68c81549afaf8052
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Nov 6 19:43:22 2023 +0100

    [asm.js] Fix memory access for >2GiB buffers
    
    This doesn't currently affect Chrome, because PartitionAlloc limits
    ArrayBuffers to 2 GiB anyway, but in d8 the difference in behavior
    was observable.
    
    Change-Id: Ibe13debcee08996f78b22db0f192a0a3adac0af6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006386
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90785}

commit 67ccae74970e65c280663a33e1fc80e1936bc773
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Nov 7 11:20:58 2023 +0100

    [promise] Clear pending message in PromiseConstructorLazyDeoptContinuation
    
    Bug: chromium:1499200, chromium:1445821
    Change-Id: I245035101d295b6d12efa12786f04136b806119e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5008114
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90784}

commit 5d3fe0fd1a4e475106dc8ce3029ce61499373754
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Nov 7 08:26:10 2023 +0000

    Fix iteration order of CallSiteInfo::BodyDescriptor
    
    We need to iterate over the outgoing pointers in the same order that
    they are defined, or else the serializer may get confused.
    
    Bug: v8:14436
    Change-Id: I6cc7f331b14552c52c328b94ab4c2cecf504f08c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009812
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90783}

commit b0c4bae22fd3f1fda3ffb0410b61a384b7ac67e5
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Nov 7 10:33:46 2023 +0100

    [heap] Override min lab size for MinorMS
    
    This override is similar to the existing min_semi_space_size and
    max_semi_space_size. If it's set to 0, a default value is used.
    This has been useful for experimentation.
    
    Bug: v8:12612
    Change-Id: I51ad4c70b09f5d6e27aa83654ea4e2b131010ac3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5001999
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90782}

commit 5436abb1a2a72566641346f2f895cddca0d99ee8
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Nov 6 08:09:37 2023 +0000

    [sandbox] Prepare bytecode flushing for BytecodeArrays in trusted space
    
    When flushing bytecode, the BytecodeArray object is in-place converted
    to an UncompiledData object. This, however, no longer works once
    BytecodeArrays are moved out of the main cage (at least unless
    UncompiledData is also moved into TrustedSpace). To support this, we now
    simply convert the bytecode's wrapper object instead.
    
    Bug: chromium:1472252
    Change-Id: I0eab2dce092cde9c844aae827f1116e79ceea267
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4993368
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90781}

commit 150690d5f6a0fd6ad3787d7070d6968c3ead2f78
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Tue Nov 7 10:20:12 2023 +0800

    [riscv][interpreter] Skip spread machinery in default derived constructor
    
    Port commit 6ee16b764a2e267e20a3b25163b5077656eda9a3
    Bug: v8:13249
    
    Change-Id: I92d70b1edda21c74429c85269af496954c6e6922
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5009304
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90780}

commit f17ce7ccfad0a00650067a4761aacb6a07bc276b
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Nov 7 08:26:59 2023 +0100

    [infra] Add a mac arm64 builder running on arm64
    
    Bug: chromium:1500139
    No-Try: true
    Change-Id: I04fed9bf338aafcafe1c550502049459e580956d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006437
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90779}

commit 1cbc1132e61dcae68340907c134abb6904a00975
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Nov 6 20:17:02 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/f4f9306..d1c7080
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/f3e882d..c6db851
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/b4e466e..ccc34d2
    
    Rolling v8/third_party/instrumented_libraries: https://chromium.googlesource.com/chromium/src/third_party/instrumented_libraries/+log/48a6bee..09ea53c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765117476129276097
    
    Change-Id: Id2727ffb11189ee71874f78099d5b60c81fdc3a5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5007783
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90778}

commit 58d0430cadb4b7fac6b7221438095b46f4f81e53
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Nov 6 14:45:48 2023 -0500

    PPC/s390: [interpreter] Skip spread machinery in default derived constructor
    
    Port 6ee16b764a2e267e20a3b25163b5077656eda9a3
    
    Original Commit Message:
    
        This implements one part of the normative change in
        https://github.com/tc39/ecma262/pull/2216, which changed the default
        derived constructor to not behave literally like super(...args), and
        instead skip any user-visible changes to
        `Array.prototype[Symbol.iterator]` to forward arguments directly.
    
    R=syg@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Id785e7cd159f22389697020ba40a6a1ae2668198
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5008075
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90777}

commit c52a10eef4ca73384b3bd89e0611d33bb1cea3e6
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Nov 6 14:13:58 2023 -0500

    [sandbox] Fix MultiMappedAllocator under TypedArraySortFast
    
    Bug: chromium:1218005
    Change-Id: I8b101e6e5b25d63137c62ff733e27d31f764338e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5008074
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90776}

commit ee3b36c1d7e4341a3e07fa24db8118e5c735ea5f
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Mon Nov 6 20:19:17 2023 +0100

    cppgc: Fix age-table test after introducing page pool
    
    This fixes the custom unique_ptr deleter that destroys the pages.
    
    Bug: v8:14390
    Change-Id: Iabb8653b0dad950a32c6a4633f091c20f1994252
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5008117
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90775}

commit e8f2797ec4617d59edadeae7119d780bef9498ab
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Nov 6 19:37:57 2023 +0100

    [wasm][turboshaft] Port AsmjsRemS optimization
    
    This ports https://codereview.chromium.org/2556963005 to Turboshaft.
    It improves Life by nearly 2x.
    
    Bug: v8:14108
    Change-Id: I960fc69ad356ec949a1f882bc290015c55bbeb43
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5007736
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90774}

commit a95747ffa7a35f648a48d340028c5a949aaf8546
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Fri Nov 3 17:19:48 2023 +0000

    [explicit-resource-management] Add SuppressedError
    
    SuppressedError can contain the error that was most recently
    thrown as well as the error that was suppressed.
    
    Bug: v8:13559
    Change-Id: I013730dcf8480e934626743bd231ba41ea177861
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4998056
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90773}

commit cc9a9f5c82f27c19d7ee64cc2c2ae36f6cb97126
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Mon Nov 6 16:40:41 2023 +0100

    cppgc: Implement page pooling for Oilpan
    
    The performance profile shows that the main threads spends too many
    cycles in madvise(), ~70% of those are coming from the incremental
    sweeper in Oilpan.
    
    The CL implements a simple page pool for normal Oilpan pages. The CL
    also removes reservation of 10 pages:
     - we no longer require all the reservations to belong to the same
       space,
     - the reservation caching is not needed in the presence of the cage.
    
    Speedometer2.1 progressins:
     - Linux: 1.5%:
       - https://pinpoint-dot-chromeperf.appspot.com/job/10b08c4ef60000
     - M1: 0.7%
       - https://pinpoint-dot-chromeperf.appspot.com/job/166e2c65f60000
    
    For memory sheriffs: this may introduce a memory regression for the
    foreground renderer. For the background renderers we execute
    a memory-reducing GC, which will flushe the pool.
    
    Bug: v8:14390
    Change-Id: Ie068aba7123fff381bb086b253c753bbd2c7677a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952094
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90772}

commit 344816f02dcee09bb6840ea68b41fd0949d8f6f3
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Nov 6 16:16:13 2023 +0000

    Reland "Use CompressObject instead of CompressAny in CompressedMaybeObjectSlot"
    
    This is a reland of commit b2f0241c4823d1df1cacf34818342f66870bc0d5
    
    When storing the raw part of embedder data slots, we now need to use a
    raw store operation as well, not a MaybeObjectSlot.
    
    Original change's description:
    > Use CompressObject instead of CompressAny in CompressedMaybeObjectSlot
    >
    > For MaybeObject slots we should also use CompressObject as that allows
    > the compiler to make assumptions about parts of the pointer value and
    > comes with additional correctness checks. See also crrev.com/c/4983806
    > for more details.
    >
    > Bug: chromium:1473677
    > Change-Id: If52ab8b030c19c117b69ddaa57ad3d2fd5669838
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003154
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Auto-Submit: Samuel Groß <saelo@chromium.org>
    > Commit-Queue: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90748}
    
    Bug: chromium:1473677
    Change-Id: I219287da42234fcc980d39e7c6d6915dee3b2777
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5004064
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90771}

commit 6ee16b764a2e267e20a3b25163b5077656eda9a3
Author: Shu-yu Guo <syg@chromium.org>
Date:   Mon Nov 6 10:00:35 2023 -0800

    [interpreter] Skip spread machinery in default derived constructor
    
    This implements one part of the normative change in
    https://github.com/tc39/ecma262/pull/2216, which changed the default
    derived constructor to not behave literally like super(...args), and
    instead skip any user-visible changes to
    `Array.prototype[Symbol.iterator]` to forward arguments directly.
    
    Fixed: v8:11533
    Bug: v8:13249
    Change-Id: I1dffa3576b8741776ed326c58e8431e8b7bcda36
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4970116
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90770}

commit 730faade1f5b51a026c3e636a399d8e33d2246b9
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Mon Nov 6 08:58:03 2023 -0800

    Use less memory in MachineOperatorReducerTest
    
    Several MachineOperatorReducerTest cases consume a lot of memory because
    they iterate through many values running the same test, and retain the
    content from each iteration in a single Zone. This CL adds a Reset()
    function to the unit test class, which resets the Zone and rebuilds all
    of the other objects which depend upon it, so that these tests can reset
    their memory usage periodically.
    
    Bug: v8:14424
    Change-Id: I202cde97438ad9a2d60780400c63d05c11ea3c8d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4995484
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90769}

commit bcd4d63cf9d44d0e3e5653a1d54b8285c747ee7b
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Nov 6 14:24:15 2023 +0100

    [wasm][traphandler] Introduce constant for the return address offset
    
    Introducing a constant instead of just using "+ 1" helps to establish a
    single point for documentation.
    
    Bug: v8:14102
    Change-Id: I69aaa54663995808fb5b79bd283dca67973d2373
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006390
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90768}

commit 7bbcb1798a67f6a8720d7665f0c016dd3f047328
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Nov 2 11:51:16 2023 +0100

    [owners] Make DEPS file owned by COMMON_OWNERS
    
    DEPS files often need to be touched e.g. for roll CLs that need a
    manual fix. Chromium gives ownership to * for their DEPS files, so
    COMMON_OWNERS should be a reasonable choice.
    
    Change-Id: Ie71610b13629e4ff2fb457454961c8f65e020158
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994616
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Adam Klein <adamk@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90767}

commit 71bb4725a71dc3ace905f35073716efe623214ae
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Nov 6 09:48:42 2023 -0500

    PPC/s390: [wasm] Add platform-specific support for the wasm-to-js wrapper
    
    `WasmToJsWrapperAsm` pushes param values 8 byte at a time even if
    the represented value is only 4 bytes. As a result changes need to be
    applied under Torque to read back the correct values. We also need to make sure the returned values are prepared in correct formats.
    Torque changes are needed to support the following platforms:
    
    ppc64le: floating point values are represented in DP format.
    FP values are on the high side (left side) of a FP register and they
    get stored in little endian format.
    
    ppc64be(AIX): same as ppc64le but they are stored in big endian format. int32 values must also be read back correctly.
    
    s390x native: FP values are on the high side (left side) of a FP register and they get stored in big endian format. int32 values must also be read back correctly.
    
    s390x simulator: same as s390x native but they are stored in little endian format.
    
    Port afcc6231a03a446e67fc1752e0f0d4d515057351
    Bug: v8:14035
    R=ahaas@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Iacb66043586d259625215107d60a35090fb08a46
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5004648
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90766}

commit 40300c832a1d39c73248a74cba53b1bc6c9cb986
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Nov 6 08:06:36 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/401c753..f4f9306
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765162775372654641
    
    Change-Id: Ieaeb95d6ced003f5a91e1e805031b6a2741ed53f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5007853
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90765}

commit b9622b407c49cfc2e8b80a690e633ee5b77f6d86
Author: Liviu Rau <liviurau@chromium.org>
Date:   Mon Nov 6 15:55:41 2023 +0100

    [test262] Fix folder sync functionality
    
    Bug: v8:7834
    Change-Id: Ic48787954d3d08e8b5c3922b264f374dc70c08c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5004061
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90764}

commit 961dd29ccfd1716a88bc8bc236768f7dc828aacc
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon Nov 6 15:50:50 2023 +0100

    Reland "[maglev] Fix inlining Api call builtin"
    
    This is a reland of commit 3281d2b6b068ef50350bfc68f476d410df5edfa4
    The temporary fix is to disable code space compaction when
    --maglev-inline-api-calls is enabled.
    
    Original change's description:
    > [maglev] Fix inlining Api call builtin
    >
    > ... which didn't work when the Maglev code had to be lazy
    > deoptimized.
    >
    > Bug: v8:13825, chromium:1445925, chromium:1496606
    > Change-Id: I640791a0ce1f8180cdc280382c0f7b0e5668d5dd
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994337
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90715}
    
    Bug: v8:13825, chromium:1445925, chromium:1496606
    Change-Id: Ic2c08540e6095d21d58c2e6058fe14006cd6ac5e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003146
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90763}

commit 48ee35fc132c68123f078496365bfcf2eac00391
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Nov 6 15:35:46 2023 +0100

    [wasm] Ignore empty recursion groups in canonicalization
    
    We currently add them to the set of canonical groups, which probably
    does not hurt, but creates the strange situation that we have multiple
    entries mapping to the same canonical ID.
    
    This CL fixes that by just ignoring empty groups instead of adding them
    to the set of canonical groups. Looking up the canonical ID of empty
    groups is forbidden anyway.
    
    R=jkummerow@chromium.org
    
    Change-Id: Ia72af5c29b6ea3d2d600602d817d1d765405c0bb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002001
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90762}

commit 8569885d99a6120423197ea8ccd79e7d31f5d926
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Nov 6 11:51:51 2023 +0100

    [wasm][exnref] Mark exnref as experimental
    
    R=manoskouk@chromium.org
    
    Bug: chromium:1499582,v8:14398
    Change-Id: Iad09677d6fc389bef5a91410321df787bd1d6db8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5007731
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90761}

commit ab3771754b18ea70b8e3c99556caa7d70b539332
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Nov 6 15:07:51 2023 +0000

    Revert "Use CompressObject instead of CompressAny in CompressedMaybeObjectSlot"
    
    This reverts commit b2f0241c4823d1df1cacf34818342f66870bc0d5.
    
    Reason for revert: This fails on the roll into chromium on fuchsia:
    https://ci.chromium.org/ui/p/chromium/builders/try/fuchsia-x64-cast-receiver-rel/419127/overview
    # Fatal error in ../../v8/src/common/ptr-compr-inl.h, line 74
    # Debug check failed: (tagged & kPtrComprCageBaseMask) == base() || HAS_SMI_TAG(tagged).
    
    Original change's description:
    > Use CompressObject instead of CompressAny in CompressedMaybeObjectSlot
    >
    > For MaybeObject slots we should also use CompressObject as that allows
    > the compiler to make assumptions about parts of the pointer value and
    > comes with additional correctness checks. See also crrev.com/c/4983806
    > for more details.
    >
    > Bug: chromium:1473677
    > Change-Id: If52ab8b030c19c117b69ddaa57ad3d2fd5669838
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003154
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Auto-Submit: Samuel Groß <saelo@chromium.org>
    > Commit-Queue: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90748}
    
    Bug: chromium:1473677
    Change-Id: Ie3f21e2289ca2a115d10ce0e9249d4effc99195a
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5004062
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90760}

commit 30269c54d28fb551d9c5176c4aadb6f8656921d9
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Nov 6 13:48:34 2023 +0000

    [sandbox] Support the MultiMappedAllocator
    
    When the sandbox is enabled, this allocator needs to reserve virtual
    address space inside the sandbox so that the memory can be used as
    ArrayBuffer contents afterwards.
    
    Bug: chromium:1218005
    Change-Id: Icf4c1549f94e584e8984b2771c95d5234d903e2b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006389
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90759}

commit 55ff9f96d5e0c94157ad5e6a753d695856b7ba71
Author: Liviu Rau <liviurau@chromium.org>
Date:   Mon Nov 6 13:42:54 2023 +0100

    [test262] Keep original structure of the import block
    
    Drive by:
      - allow adding new import blocks without editing existing ones in test262 status file;
      - output the import range for the recipe to pick up after running the postbuild phase.
    
    Bug: v8:14002
    Change-Id: Ief7ed8298191f1192299ce7bb01f2455091a739f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5007734
    Commit-Queue: Liviu Rau <liviurau@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90758}

commit ad016a2de5c5ef218008017580a633b0569ddee0
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 3 15:53:36 2023 +0000

    Reland "[sandbox] Remove InitCodeSelfIndirectPointer"
    
    This is a reland of commit fd0e4132218a718fdde3b7d46a66a9d07da69d64
    
    isolate_for_sandbox may be nullptr (in non-sandbox builds), so we should
    use isolate() instead.
    
    Original change's description:
    > [sandbox] Remove InitCodeSelfIndirectPointer
    >
    > Instead, we now use the existing InitSelfIndirectPointer also for Code
    > objects. This dedpulicates some code and avoids branching based on the
    > instance type in the callers, for example in the deserializer.
    >
    > Bug: chromium:1473677
    > Change-Id: Iad9119bdfef684e96cdc0bad7b2816e66711886e
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003147
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Auto-Submit: Samuel Groß <saelo@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90727}
    
    Bug: chromium:1473677
    Change-Id: Iac3dd443328afd007e61e375af7210e552b3e442
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003149
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90757}

commit a095189524bb4c2459e860519cf55e0241441eb0
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Nov 6 13:12:55 2023 +0100

    [test] Mark some more slow tests
    
    Bug: v8:14373
    Change-Id: Ib63585134a87863f60213b010422883345d611f5
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006384
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90756}

commit 4bd36a1ac2fcd78ace119c6c9a7e4365357f494b
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Thu Nov 2 14:41:23 2023 +0100

    [inspector] Deprecate vector<v8::Local>
    
    According to V8's public API documentation, local handles (i.e.,
    objects of type v8::Local<T>) "should never be allocated on the heap".
    This disallows heap-allocated data structures containing instances of
    v8::Local, like std::vector<v8::Local<v8::String>>.
    
    This CL continues the deprecation of such data structures from the V8
    code base, using v8::LocalVector instead.
    
    Bug: chromium:1454114
    Change-Id: Ia91d45e4e298a670f84ba30e7582267b3e29443e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5000625
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90755}

commit b83287d25218d226b87316393ab2e2f9a5a24232
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Nov 6 12:36:12 2023 +0100

    [turboshaft] Tune down BranchElimination/block cloning a little bit
    
    When we had a pattern like:
    
             B0:
             c1 = 42
             branch(c1, B1, B2)
              /          \
             /            \
           B1:            B2:
           ...            ...
           Goto(B3)       Goto(B3)
                 \       /
                  \     /
                  B3:
                  ...
                  c2 = 18
                  c = EqualOp(c1, c2)
                  Branch(c, ...)
    
    We would clone B3 into both B1 and B2, because we'd realize from B1
    that we can compute its branch condition. However, cloning here
    doesn't really bring anything since the branch would be anyways
    eliminated once we'd try to constant-fold its condition.
    
    Fixed: chromium:1496055
    Bug: v8:12783
    Change-Id: I0a4e11b31c0d5cfb601721510ae5a4d239d75b19
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5005142
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90754}

commit d3dcda44163535c58931c3037cdf3b085969b75b
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Nov 6 11:59:26 2023 +0100

    [wasm] Remove Wasm inlining from --future
    
    We don't plan to ship Wasm inlining for MVP modules in its current form,
    so remove the implication from --future to avoid skewing performance
    results if --future is enabled.
    
    R=ahaas@chromium.org
    
    Bug: chromium:1424350
    Change-Id: I9364374bc106cba528c66052b4de9f0d2125e5ba
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006382
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90753}

commit bd30137462b09697601a2051c37a6937c68cd684
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Nov 6 10:27:15 2023 +0000

    [sandbox] Reference bytecode from InterpreterData via a trusted pointer
    
    This is required for moving BytecodeArrays out of the sandbox. We may
    also want to move InterpreterData out of the sandbox as it can often
    occur in places where a BytecodeArray is normally expected. If we do
    that, we can again reference BytecodeArrays from InterpreterData through
    a regular tagged pointer.
    
    Bug: chromium:1472252
    Change-Id: I9fee01fa6273a9f185c0123f9fdc78876680c98d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006377
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90752}

commit 6ee4ed47da3181350102a2aed537da60c2d74cc7
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Nov 3 14:28:57 2023 +0100

    [heap] Do not use concurrent marking in MinorMS in background
    
    This CL disables concurrent marking in MinorMS when the isolate is
    in the background and --single_threaded_gc_in_background is enabled.
    
    Bug: v8:14174
    Change-Id: I202f2638a3b0c552def163d7ed7ca55b1445e267
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5000626
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90751}

commit 524ed13634b17d329b4621bd9f58ff5651ce1be6
Author: Liviu Rau <liviurau@chromium.org>
Date:   Mon Nov 6 10:14:35 2023 +0100

    Add Test262 Exporter builder (follow-up)
    
    Follow-up to https://crrev.com/c/4971838 . This contains the updates necessary to solve the comments from the review.
    
    Bug: v8:14002
    Change-Id: Icaa0cb733a945deef6a7a6d6814474721f0529ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006379
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90750}

commit 7b99c789361b8a1b08c84846fee99eb496352d2e
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Nov 6 08:15:39 2023 +0000

    [sandbox] Reference BytecodeArrays through their wrapper in unittests
    
    The serialization unittests store BytecodeArrays in weak fixed for
    tracking purposes. However, once BytecodeArrays move out of the sandbox
    (and therefore the main pointer compression cage), this will no longer
    be possible. So instead, we now use the BytecodeArray's wrapper object.
    
    Bug: chromium:1472252
    Change-Id: I048275a7c627ed04e300e32228d05d5eec2d4a81
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006376
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90749}

commit b2f0241c4823d1df1cacf34818342f66870bc0d5
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Nov 6 08:12:44 2023 +0000

    Use CompressObject instead of CompressAny in CompressedMaybeObjectSlot
    
    For MaybeObject slots we should also use CompressObject as that allows
    the compiler to make assumptions about parts of the pointer value and
    comes with additional correctness checks. See also crrev.com/c/4983806
    for more details.
    
    Bug: chromium:1473677
    Change-Id: If52ab8b030c19c117b69ddaa57ad3d2fd5669838
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003154
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90748}

commit c538f208d41f0c38c92c13bc7a90aa3d815ae98b
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Nov 6 10:21:22 2023 +0100

    [test] Mark another slow test
    
    Before https://crrev.com/c/4989322 this test was marked as HEAVY,
    which it's not, but it's still SLOW.
    
    Bug: v8:14373
    Change-Id: I78a6379f11018ba53ddbff9382897adba90ab7ae
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5006380
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90747}

commit 79641f1109106865a95142fc1c89c7790039341a
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Sat Nov 4 11:29:58 2023 +0100

    [test] Mark slow test
    
    After https://crrev.com/c/5002174 we need to mark LogAll as SLOW because
    it is slow and heavy.
    
    Bug: v8:14373, v8:14371
    Change-Id: I4666c8a9b6167bc62f21f63686e22acf51f18fdc
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003153
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90746}

commit d6502e8139c37ccb220d8d7c8da00681fd8c9be6
Author: Liviu Rau <liviurau@chromium.org>
Date:   Fri Nov 3 12:06:55 2023 +0100

    [test262] V8 Test262 importer/roller implementation
    
    The script is supposed to be used both manually and by a bot in a recipe.
    
    When used manually it will, by default, run 4 distinct phases to prepare the change (DEPS and other files), determine the impact of the change (newly failing tests), make further adjustments (update status file based on test results) and upload the change. The script expects that the devs run it in an environment where `gn args` was set for `out/Default` and a new branch was created.
    
    When running in the context of a recipe, the script is invoked twice: once to prepare the change and another time to adjust the status file. Optionally, the recipe can trigger the compilation and tests to determine the impact of the change, between the 2 script invocation. The recipe also will take care of uploading the change.
    
    Depends on changes in blinkpy https://crrev.com/c/4971212 .
    
    Bug: v8:14002
    Change-Id: I8c40ce591355529e4c0d0a4419660e30c9537fcd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971838
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90745}

commit ab7f57ab7e2f2f0848009cd8db6d4011954cbb85
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Nov 5 20:16:03 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/dbdccca..401c753
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/6ed4763..e1fa883
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/0a17221..d781e6e
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765208070232562609
    
    Change-Id: I86555953d1e57eeddaf20a352245e2fcb3b292b1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002760
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90744}

commit fec4f2965eaaaa4bb3535522f40cafda46446916
Author: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date:   Fri Nov 3 15:30:42 2023 +0800

    [mips64] Skip console-profile-wasm on unsupported platforms
    
    Change-Id: I9ebd5529df3f9990a0434a1855a65f6b8ef45ad2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003547
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90743}

commit 7cfc1adc6711cf6751d8e092ac9d811c89bc7029
Author: Fanchen Kong <fanchen.kong@intel.com>
Date:   Fri Nov 3 03:39:13 2023 +0800

    [x64] let F32x4Abs use constant via ExternalReference
    
    With this change, F32x4Abs loads the mask from an ExternalReference same as other F32/F64 Abs/Neg opcode, instead of set up it in temporary register.
    
    Change-Id: I2019fe12aca39dda106230aa943889b1d4bfa866
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4998435
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Fanchen Kong <fanchen.kong@intel.com>
    Cr-Commit-Position: refs/heads/main@{#90742}

commit fbdf025c526b33446b64d0c641181b787bf06f45
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Nov 5 08:05:52 2023 -0800

    Update V8 DEPS (trusted)
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/2074d6d..0226cb1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765253372053507169
    
    Change-Id: I119f38b0d6e3b9ddd83fcfa61ce291e6dccbdc42
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003240
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90741}

commit 5b79b92786234536a9777c70775abd06a461f7bd
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Nov 4 21:16:32 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/f902dff..dbdccca
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/98c672d..6ed4763
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/acecd09..0a17221
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765298668308059393
    
    Change-Id: Ibd577021a63585f4096ba8c550f14c507f9a405d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5005256
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90740}

commit db8b3ade7e7dff9f994929b128647c03d571172b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Nov 3 21:16:52 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/e57ae7a..f902dff
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/214c752..98c672d
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/e2e6aa8..f3e882d
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/907c046..acecd09
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/3ed0e2b..2074d6d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765389267820038689
    
    Change-Id: I9dbad6e77045c0cd6a9ad267e21e613c8caf0194
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5005709
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90739}

commit b3764841e25223231dab6d7d63986cad85cc8835
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Oct 31 15:46:59 2023 +0100

    [api] Deprecate vector<v8::Local>, part 3
    
    According to V8's public API documentation, local handles (i.e.,
    objects of type v8::Local<T>) "should never be allocated on the heap".
    This disallows heap-allocated data structures containing instances of
    v8::Local, like std::vector<v8::Local<v8::String>>. It is unfortunate
    that the V8 API itself requires the usage of such data structures.
    
    This CL continues the deprecation of such data structures from V8's
    public API:
    
    1. It deprecates v8::Module::GetStalledTopLevelAwaitMessage
       (returning a std::vector of tuples of locals) in favour of
       v8::Module::GetStalledTopLevelAwaitMessages (returning a pair
       of two v8::LocalVector).
    2. It renames the corresponding internal method to
       SourceTextModule::GetStalledTopLevelAwaitMessages; plural is
       more appropriate, as both return many messages.
    
    Bug: chromium:1454114
    Change-Id: I827718bd236074188a553ec040dece479d2502b9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994330
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90738}

commit bbd0a517434addd7fa9ab6fae32e8d813c7b684c
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Oct 31 16:42:07 2023 +0100

    [test][wasm] Deprecate vector<v8::Local>
    
    According to V8's public API documentation, local handles (i.e.,
    objects of type v8::Local<T>) "should never be allocated on the heap".
    This disallows heap-allocated data structures containing instances of
    v8::Local, like std::vector<v8::Local<v8::String>>.
    
    This CL refactors a few wasm tests that use such vectors, using instead
    stack-allocated std::arrays and v8::MemorySpan objects.
    
    Bug: chromium:1454114
    Change-Id: I04b467c447e2a61369678fa05606d75f971289cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994333
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90737}

commit ef2cc1d450ea5cc24d8ef92bc4f235f70ba7b753
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 3 17:23:16 2023 +0000

    [sandbox] Reference BytecodeArrays through their wrapper from deopt data
    
    The DeoptimizationLiteralArray contains (tagged pointer) references to a
    number of different objects needed for code deoptimization. When moving
    BytecodeArrays out of the main cage, it will no longer be possible to
    reference them through a tagged pointer, so instead we now simply use
    the BytecodeArray's wrapper object, which was created exactly for this
    purpose. The entry in the array is only needed to keep the BytecodeArray
    alive during GC, so no further change is necessary.
    
    Bug: chromium:1472252
    Change-Id: I8f31c656927aff9c3b10c3e845b5af18e7420d3f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4993369
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90736}

commit 8b4ef4660c63996eab4d829a99e5fcdfa9d21c70
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Nov 3 09:05:44 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/2492c5a..d1e293c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765434565796981169
    
    Change-Id: Idbcf8be2d37ad27cabbeb4f1e584ba1d04f3b78c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003127
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90735}

commit ec53113a6d7d95cf8b255aec7fc91b17acd33d80
Author: Carl Smith <cffsmith@chromium.org>
Date:   Fri Nov 3 16:30:07 2023 +0100

    Introduce a PromiseHole
    
    Introduce a new PromiseHole that is used exclusively for marking promise
    resolution.
    
    Bug: chromium:1445008
    Change-Id: I50bbca1980f1785f4ae937db2d08241e84d1b38a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003525
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Carl Smith <cffsmith@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90734}

commit d181f2d755cbf713402540e6aab0010df8185a59
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 3 16:02:24 2023 +0100

    [wasm] Speed up creation of exports object
    
    Adding multiple properties one after another to the exports object
    requires allocation of multiple maps and transitioning the object
    between them. This CL switches the object to dictionary mode and adds
    the properties to the dictionary directly. After adding all exports we
    switch back to fast properties if possible.
    
    This has been observed to speed up the overall time in ProcessExports by
    roughly 50%.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14402
    Change-Id: I833bc9e115e89047549c181a4c1feecac2e022b1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002171
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90733}

commit c051ee8d837aaf5a2863b5eb2c06cb0fb6c52d6c
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Nov 2 22:27:41 2023 +0000

    [array-from-async] Ship Array.fromAsync
    
    3 lgtms on intent to ship:
    https://groups.google.com/a/chromium.org/g/blink-dev/c/8-BdTuYXFH0/m/CEKN2H-WBQAJ
    
    Bug: v8:13321
    Change-Id: I6cfce6b79115cb3851bbbb5f0f14b48cbe2242a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002572
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90732}

commit c99cfcb6ae6d8e6eb42e18f571229a66e6955724
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Nov 3 15:36:49 2023 +0100

    [test] Disentangle heavy and slow status entries
    
    Previously a HEAVY test was also treated like a SLOW test in all
    regards. But since we can have have memory-hungry, but fast tests,
    we now lift this implication.
    
    Additionally, we ensure that heavy tests have the highest priority
    in the test ordering, since they create the biggest bottleneck,
    being executed in sequence. The slow tests come second, followed
    by the remaining tests.
    
    In practice, the implementation of the sequence proc just buffers
    the other heavy tests, as soon as one is in the pipeline. Hence,
    independent of the number of tests in each group, we should get
    an overall ordering like (H: heavy, S: slow, R: remaining):
    
    Worker 1: H, H, H, H, H, R, R
    Worker 2: S, S, S, R, R, R, R,
    Worker 3: S, S, R, R, R, R, R
    
    Before this change, heavy and slow tests where treated with the
    same priority, which could lead to heavy tests starting much later,
    creating a bottleneck.
    
    After this change, it's possible that some slow tests, that are also
    heavy, time out. We'll just add back separate SLOW status entries
    for such tests, if there are any.
    
    Bug: v8:14373
    Change-Id: I789f8b00e3d73ab975c9e4655e02a4bed24b8bd5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002174
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90731}

commit 6c95a2ea4cf519eb903830469e10e69934a0177a
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Nov 3 14:59:46 2023 +0100

    [api] Rename deprecated use counters as OBSOLETE
    
    This finishes the deprecation of unused use counters.
    
    R=leszeks@chromium.org
    
    Change-Id: I83fab0eaf6657cbcf70cff432890078ec8066a7d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002176
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90730}

commit 08c87ab24ddf4c9fe401d3200bc4de5d708fc289
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Thu Nov 2 10:14:23 2023 -0700

    Optimize spill placement in builtins
    
    This change enables spill placement optimization for all values in
    builtins, rather than only for loop-top phi values. There is no
    correctness reason that this optimization is limited to loop-top phi
    values; I just chose that heuristic because I didn't have much evidence
    of benefits outside loops. See [1] for an overview of how spill
    placement optimization works. This change is beneficial not only because
    it saves a store instruction along some control-flow paths, but also
    because it gives the frame elider more freedom to avoid creating stack
    frames along those paths. I suspect that frame elision is more impactful
    for builtins than for JIT-compiled code, because builtins tend to be
    small functions called often, rather than large functions with loops. In
    Edge, I see about 0.3% improvement on Speedometer with this change.
    
    [1] https://docs.google.com/document/d/1n9ADWnDI-sw0OvdSmrthf61prmDqbDmQq-NSrQw2MVI/edit?usp=sharing
    
    Change-Id: Ibea4d63dda522cd8b1b95bbf4c67e10a1b3186e9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002146
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90729}

commit e35eccf81f22b074f195c011e920e64bc1f93140
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Nov 3 14:06:43 2023 +0000

    Revert "[sandbox] Remove InitCodeSelfIndirectPointer"
    
    This reverts commit fd0e4132218a718fdde3b7d46a66a9d07da69d64.
    
    Reason for revert: Segmentation fault on clusterfuzz ASAN no inline builder:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Clusterfuzz%20Linux%20ASAN%20no%20inline%20-%20release%20builder/16648/overview
    
    Original change's description:
    > [sandbox] Remove InitCodeSelfIndirectPointer
    >
    > Instead, we now use the existing InitSelfIndirectPointer also for Code
    > objects. This dedpulicates some code and avoids branching based on the
    > instance type in the callers, for example in the deserializer.
    >
    > Bug: chromium:1473677
    > Change-Id: Iad9119bdfef684e96cdc0bad7b2816e66711886e
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003147
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Auto-Submit: Samuel Groß <saelo@chromium.org>
    > Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90727}
    
    Bug: chromium:1473677
    Change-Id: Ia95a328527307b20bfc69d45ce7ce507bf8cf436
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5001641
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90728}

commit fd0e4132218a718fdde3b7d46a66a9d07da69d64
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 3 10:01:55 2023 +0000

    [sandbox] Remove InitCodeSelfIndirectPointer
    
    Instead, we now use the existing InitSelfIndirectPointer also for Code
    objects. This dedpulicates some code and avoids branching based on the
    instance type in the callers, for example in the deserializer.
    
    Bug: chromium:1473677
    Change-Id: Iad9119bdfef684e96cdc0bad7b2816e66711886e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003147
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90727}

commit 125bf8a5beed760af13cd02b94ae0bdf22a378d6
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Oct 31 16:45:54 2023 +0100

    [test] Fix encoding of resultdb artifacts
    
    By default on windows, the cp1252 encoding is used for temporary files.
    This doesn't map some utf-8 characters that might appear in V8's output.
    
    Ensuring utf-8 encoding should fix this.
    
    Bug: chromium:1497956
    Change-Id: I6c05b5a62bec1835262fe5a29c852e555aa807fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994334
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90726}

commit 509d98cded9280149880b23d3c0637468e41433f
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Nov 3 11:26:22 2023 +0100

    [debug] Add missing mutex in TemporaryObjectsTracker
    
    Bug: v8:14432
    Change-Id: I94440aa0a5a3108582d74fc6e1ba2bcfee933967
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5003148
    Owners-Override: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90725}

commit b9e45d3d4440937235ef1cecae821e58d78a4f2c
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Nov 3 02:36:23 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/3760e3d..e57ae7a
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/6f834e2..214c752
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/16ed8d7..03ab17b
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/47efdb4..e2e6aa8
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/9f3b33a..b4e466e
    
    Rolling v8/third_party/instrumented_libraries: https://chromium.googlesource.com/chromium/src/third_party/instrumented_libraries/+log/032e9c8..48a6bee
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/a429c26..907c046
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/2ca9f38..3ed0e2b
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/7686b5d..69b8c64
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/abf1537..2492c5a
    
    Rolling v8/tools/luci-go: git_revision:924cfd2323a9192361b765f81fffc135026c1fee..git_revision:540222a3d0b11c1370539a1f698643113a0ee029
    
    Rolling v8/tools/luci-go: git_revision:924cfd2323a9192361b765f81fffc135026c1fee..git_revision:540222a3d0b11c1370539a1f698643113a0ee029
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765458924298445201
    
    Change-Id: I2d6b8629246fa978284a0956ce406545c587303c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5004645
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90724}

commit 37a28ee64751ef4b6aa584bb11e2fea65c8a5463
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Nov 3 11:09:07 2023 +0100

    [turboshaft][arm64] Port InstructionSelector part 1
    
    Bug: v8:12783
    Change-Id: I7ce838c1a9f1b6f284d5c30fb2c175adadc73815
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5000025
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90723}

commit 4debe18426cfe4342634f8241e855bfc134027e0
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Nov 3 09:26:50 2023 +0100

    [test] Skip test that's not predictable
    
    Bug: v8:14421
    Change-Id: I02a60ce51fc88b76a9dfb7d5c5fd7a8cb48086a6
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5001633
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90722}

commit b38fe81cc6a7828ae877c02acf4a7fafdd035e07
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Nov 3 09:41:29 2023 +0100

    [turboshaft][x64] InstructionSelection: Helper for comparison flags
    
    The same mapping is also needed at least for arm64, so this CL factors
    it out for re-use.
    
    Bug: v8:12783
    Change-Id: Id932e6c30eb7aa83cf80081ad8e781bc178f73ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989252
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90721}

commit 6269165f3e5b40baaec1ee6899281214ece022ea
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Nov 3 08:49:29 2023 +0000

    [sandbox] Introduce BytecodeWrapper type
    
    This is a HeapObject that only contains a (trusted pointer) reference to
    a BytecodeArray object. However, in contrast to the BytecodeArray
    itself, the wrapper object lives inside the sandbox. This allows it to
    be used in cases where a BytecodeArray is referenced from a collection
    of tagged pointers (e.g. a FixedArray).
    This change also implements support for indirect-pointer back-references
    in the snapshot serializer as that is required to properly handle the
    bytecode <-> wrapper cycle.
    
    Drive-By: Rename kIndirectPointerSlotSize to simply kIndirectPointerSize
    
    Bug: chromium:1472252
    Change-Id: I7bf3927c680d234fd4559db4459510e8af81883b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4993365
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90720}

commit 0479f95a75e704be4e4469b98aa4c1b3882385ed
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Nov 3 10:27:55 2023 +0100

    [test] Mark slow tests
    
    Bug: v8:14373
    Change-Id: I5103bd299098ee7769fbe2fe390b271d195cd6fc
    No-Try: true
    No-Tree-Checks: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5001634
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90719}

commit ee4ed241333faed930bb444cf9b4c0c02ab8b80b
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Oct 31 16:23:25 2023 +0100

    [test] Mark tests with large memory consumption
    
    This reorganizes tests marked as HEAVY in status files. The new data
    is from recent memory probing on various platforms, tracked in the
    UI.
    
    The previous data was mostly anecdotal (i.e. based on certain
    test failures). This old data might have been set incorrectly,
    as we might have marked tests as heavy just because they failed,
    while the real heavy test was running in the background.
    
    Hence, tests not showing up in the list of tests with large memory
    consumption are now unmarked.
    
    Additionally mjsunit/huge-typedarrays is now only run in the default
    variant on Windows, as it always ran in the background when
    any memory problems appeared in other tests, see analysis in
    issue v8:14373.
    
    Bug: v8:14373
    Change-Id: I69f3b4a2b63ab00aff3a5c2ed30e437a168037a3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989322
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90718}

commit d5481000308f561dd8dc1b0c7ac42d983e162574
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Nov 2 21:38:38 2023 +0000

    Revert "[maglev] Fix inlining Api call builtin"
    
    This reverts commit 3281d2b6b068ef50350bfc68f476d410df5edfa4.
    
    Reason for revert: Failed on Linux arm64 gc stress
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20arm64%20-%20sim%20-%20gc%20stress/29537/overview
    
    Original change's description:
    > [maglev] Fix inlining Api call builtin
    >
    > ... which didn't work when the Maglev code had to be lazy
    > deoptimized.
    >
    > Bug: v8:13825, chromium:1445925, chromium:1496606
    > Change-Id: I640791a0ce1f8180cdc280382c0f7b0e5668d5dd
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994337
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Igor Sheludko <ishell@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90715}
    
    Bug: v8:13825, chromium:1445925, chromium:1496606
    Change-Id: I9b555efaf3ca9354a6cd585c782a2b0307ddbf64
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002570
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90717}

commit af403d77484ad67f8f065a6071e05020edd90b1d
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Nov 2 17:28:41 2023 +0100

    [wasm][asm] Reenable lazy compilation of asm.js modules
    
    We accidentally disabled lazy compilation of asm.js modules translated
    to Wasm (https://crrev.com/c/3850841). Interestingly this did not create
    any performance alerts back then (August 2022), but let's switch it back
    on. Lazy compilation was always the intended configuration and it is
    consistent with Wasm modules.
    
    Drive-by: Change some flag descriptions and their default value (no
    semantical change here).
    
    R=jkummerow@chromium.org
    
    Bug: v8:14402
    Change-Id: I0b6e2ee5b013fb38c3e6e6eb93ef56c78f1255ac
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5002425
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90716}

commit 3281d2b6b068ef50350bfc68f476d410df5edfa4
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Nov 2 15:04:07 2023 +0100

    [maglev] Fix inlining Api call builtin
    
    ... which didn't work when the Maglev code had to be lazy
    deoptimized.
    
    Bug: v8:13825, chromium:1445925, chromium:1496606
    Change-Id: I640791a0ce1f8180cdc280382c0f7b0e5668d5dd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994337
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90715}

commit 9fe8488f530dc16040a6d15245699d9c3d094903
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Nov 2 15:37:23 2023 +0100

    [wasm][exnref] Add missing exnref in table set/get
    
    Drive-by: fix try-table formatting in disassembler.
    
    R=manoskouk@chromium.org
    
    Bug: chromium:1498784
    Change-Id: I09298dd45d573b7f069010b76254290d8db04861
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5000347
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90714}

commit 5717dde33c7d2f8a5df199d634ac96c1d2386b84
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Nov 2 16:00:44 2023 +0100

    [turboshaft] Fix incorrect -0 computation in typing of division
    
    Bug: v8:12783, chromium:1486747
    Change-Id: Ifc7e904f3fd08e2f1cbc554bc4c9293d6b48e8d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5000627
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90713}

commit 62f65c5c0890bf3859f166671a80cff0be1cb8e3
Author: Igor Sheludko <ishell@chromium.org>
Date:   Wed Nov 1 18:48:54 2023 +0100

    [turbofan][promise] Clear pending message on Promise rejection
    
    Bug: chromium:1445821
    Change-Id: I3caf9157870444e0f05c203ae0b1c6fa87f9ba5a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4997346
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90712}

commit 7b677a5904598d65254d64c97ff52161205f0f5a
Author: Pan, Tao <tao.pan@intel.com>
Date:   Thu Nov 2 04:04:52 2023 -0400

    Reland "[cache] Don't compare host defined options if the script was deserialized"
    
    This is a reland of commit b9cfb8b7cfdbf195c3baf87735865948dfa5907e
    
    Original change's description:
    > [cache] Don't compare host defined options if the script was deserialized
    >
    > We don't serialize host defined options (see
    > CodeSerializer::SerializeObjectImpl()).
    >
    > Change-Id: Icab9fe910a5ec93b5eacc4869aba75034ad8b447
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4805329
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Tao Pan <tao.pan@intel.com>
    > Cr-Commit-Position: refs/heads/main@{#90698}
    
    Change-Id: I7ea5e9355056104ebd25b385aba63c1233d42260
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4998581
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Tao Pan <tao.pan@intel.com>
    Cr-Commit-Position: refs/heads/main@{#90711}

commit ef62aa3fa94be718ec543f623bbb4bf052e60ab9
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Thu Nov 2 14:48:08 2023 +0100

    [builtins] Unify how Promise.all and .allSettled track resolution
    
    Promise.all had a clever hack to track whether a resolve closure was
    already called, but that didn't work when .allSettled needed to track
    the state of a promise across both resolve and reject. Tracking was
    changed to checking a hole in the values array. This CL now migrates
    Promise.all to the same mechanism; avoiding the need to check the old
    mechanism.
    
    Change-Id: I501a660659804c27f16f8676f55f94953a6b089b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5000306
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90710}

commit 68d1f7534f616977e386dfa5041206bed2ec213a
Author: Carl Smith <cffsmith@google.com>
Date:   Mon Oct 30 19:52:16 2023 +0100

    [fuzzing] Call _exit when hole fuzzing
    
    Call _exit instead of exit when doing hole fuzzing to make the process
    stop immediately because exit will call destructors that try to tear down the V8 heap while other worker threads might still be executing which can result in them accessing unmapped memory.
    
    Bug: chromium:1497704
    Change-Id: Ic2584ba633ca8d7096683b86b665ab42409ee687
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989324
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Carl Smith <cffsmith@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90709}

commit 0f141c0a52d85875aa406f1b5fd10cb683a27a26
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Nov 2 14:06:04 2023 +0100

    [debug] Reimplement TemporaryObjectsTracker to fix remaining issues
    
    TemporaryObjectsTracker didn't handle the cases correctly when new
    allocation regions overwrite multiple existing regions (e.g. because a
    large object is allocated on top of multiple small dead regions).
    
    This CL is a full rewrite of the tracker to not just properly handle
    these cases, but also do so in a somewhat clean implementation.
    
    Bug: v8:14420
    Change-Id: Ifeda1f0b727a382b339f3b39ef4f62e97f1eada9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4987312
    Reviewed-by: Yang Guo <yangguo@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90708}

commit f6a73dd0be0a1ab8bc7249a2ef457a359f8339fa
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Nov 2 13:42:48 2023 +0100

    [turboshaft] Add a BranchConditionDuplication reducer
    
    Bug: v8:12783
    Change-Id: I03518c94df3f3dbd2bdb09c7a3204fbb263b415d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4907921
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90707}

commit 7d0f7e0021dcc07f587fe8b2ca1e6e4d03a3411c
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 30 15:34:31 2023 +0100

    [wasm] Skip JS compilation in Wasm instantiation
    
    This was added just to access the SharedFunctionInfo's
    is_safe_to_skip_arguments_adaptor field (see
    https://crrev.com/c/2317061). We do not read this field any more, so the
    compilation is not needed any more now.
    
    This sometimes saves half of the Wasm instantiation time.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14402
    Change-Id: I83d6fcbb50ed2abd21837c7d2d096e5d81d17301
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989250
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90706}

commit 3da386ce432d264b439f31e5cc7cd90254b8602b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Oct 31 13:48:13 2023 +0100

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/70bf5ea..3760e3d
    
    Rolling v8/buildtools/reclient: re_client_version:0.117.1.21520c6-gomaip..re_client_version:0.118.1.ae3c3be-gomaip
    
    Rolling v8/third_party/fuchsia-sdk/sdk: version:15.20231022.3.1..version:16.20231030.2.1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765751656263905601
    
    Change-Id: I5afdf86574797ea59613d6ea4d2181991f46313e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4990037
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90705}

commit 3de45211640ea3c7f7637408b74bc9a186a7e97d
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Nov 2 10:56:35 2023 +0100

    [wasm][exnref] Implement try-table in turboshaft
    
    R=manoskouk@chromium.org
    
    Bug: v8:14398
    Change-Id: Ia09370eaab7ef1957faeb4bac29e17c5bf4633f2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976268
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90704}

commit 0aec2b50a0c5b600470d6c20858d69d20d58e374
Author: Darius M <dmercadier@chromium.org>
Date:   Tue Oct 31 16:06:05 2023 +0100

    Reland "[turboshaft] Implement Loop Peeling"
    
    This is a reland of commit 3b084cc30429bb01329715c8ef043ebbc7a776c5
    
    This CL was reverted because of binary size increase. This is expected
    since it adds a new phase to Turboshaft.
    We'll look into reducing Turboshaft binary-size in the mid-term
    future, but for now we have to live with some binary size increases.
    
    Original change's description:
    > [turboshaft] Implement Loop Peeling
    >
    > Bug: v8:12783
    > Change-Id: I95a1bd80adec0433cae8a50bc4d671de29413744
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4935413
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90693}
    
    Bug: v8:12783
    Change-Id: I0032121aef723c0564184f4f1c281e74d082cf80
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4999945
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90703}

commit ef567ad1cebdce81831b419ad8fe52cc677ed400
Author: Liu Yu <liuyu@loongson.cn>
Date:   Wed Nov 1 15:24:36 2023 +0800

    [loong64][mips64][compiler] Fix Float64ToInt32 and Float64ToUint32 opcode
    
    These two instructions allocate a temp floating-point register as
    the scratch register, which is the same as the input register,
    resulting in incorrect results.
    
    Change-Id: I0a967e5730e1e6d6e816e0a2aa9019342df1b516
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4997465
    Auto-Submit: Liu Yu <liuyu@loongson.cn>
    Reviewed-by: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#90702}

commit 2c08fafc089e2d853c0c30fd0b0133a0152c5a1d
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Oct 31 17:54:21 2023 +0000

    Reland "[sandbox] Reference code from CallSiteInfo via an indirect pointer"
    
    This is a reland of commit 4c2729397d03d5679728e6922638a6378f95a2d9
    
    The code_object field may now also contain Smi::zero(), so the torque-
    generated object verification code needs to be able to deal with that.
    
    Original change's description:
    > [sandbox] Reference code from CallSiteInfo via an indirect pointer
    >
    > This is necessary in order to move BytecodeArray and Code out of the
    > sandbox. As the field can reference both Code and BytecodeArray objects,
    > we need to use the newly-introduced kUnknownIndirectPointerTag which
    > will cause the accessors to determine the correct pointer table (code
    > pointer table or trusted pointer table) to use based on the handle.
    >
    > Bug: chromium:1472252
    > Change-Id: Ia81d688a7cdf1493e227be80e3b20cb596830414
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989243
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90695}
    
    Bug: chromium:1472252
    Change-Id: Idb530a19ddb7e1346659ddbe31e1a93971b82abe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4995784
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90701}

commit 04f51bc70a38fbea743588e41290bea40830a486
Author: Liu Yu <liuyu@loongson.cn>
Date:   Wed Nov 1 16:34:53 2023 +0800

    [loong64][simulator] Add support for single landing pad of trap handler
    
    Related to commit 4341fa249188705e78fff2a4dad4df68f6e46116
    
    Change-Id: Ic212a7b725d02dc398bd7cdf41e8e30542bd0268
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4996832
    Reviewed-by: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Auto-Submit: Liu Yu <liuyu@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#90700}

commit ace901484a9587944d0228ded759b3e9ebf426b5
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Nov 1 08:49:46 2023 +0000

    Revert "[cache] Don't compare host defined options if the script was deserialized"
    
    This reverts commit b9cfb8b7cfdbf195c3baf87735865948dfa5907e.
    
    Reason for revert: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20debug/46032/overview
    
    Original change's description:
    > [cache] Don't compare host defined options if the script was deserialized
    >
    > We don't serialize host defined options (see
    > CodeSerializer::SerializeObjectImpl()).
    >
    > Change-Id: Icab9fe910a5ec93b5eacc4869aba75034ad8b447
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4805329
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Commit-Queue: Tao Pan <tao.pan@intel.com>
    > Cr-Commit-Position: refs/heads/main@{#90698}
    
    Change-Id: I6bd71e901b7a32f34fd3c344f72e9d87128541dc
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994356
    Owners-Override: Manos Koukoutos <manoskouk@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90699}

commit b9cfb8b7cfdbf195c3baf87735865948dfa5907e
Author: Pan, Tao <tao.pan@intel.com>
Date:   Wed Oct 25 10:41:03 2023 +0800

    [cache] Don't compare host defined options if the script was deserialized
    
    We don't serialize host defined options (see
    CodeSerializer::SerializeObjectImpl()).
    
    Change-Id: Icab9fe910a5ec93b5eacc4869aba75034ad8b447
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4805329
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Tao Pan <tao.pan@intel.com>
    Cr-Commit-Position: refs/heads/main@{#90698}

commit c5eeb1d68eb82d3ed06c6574fb9f8492f17fb299
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Tue Oct 31 20:58:23 2023 +0000

    Revert "[turboshaft] Implement Loop Peeling"
    
    This reverts commit 3b084cc30429bb01329715c8ef043ebbc7a776c5.
    
    Reason for revert: Tentative candidate of failing on android binary size
    https://ci.chromium.org/ui/p/chromium/builders/try/android-binary-size/1673914/overview
    
    Original change's description:
    > [turboshaft] Implement Loop Peeling
    >
    > Bug: v8:12783
    > Change-Id: I95a1bd80adec0433cae8a50bc4d671de29413744
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4935413
    > Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    > Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90693}
    
    Bug: v8:12783
    Change-Id: Icf0c7a1e238b4af412462497550c1b43285b9e15
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4995771
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90697}

commit 66865a7db35404400c7a15ae4667ca52ba0547e9
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Oct 31 16:37:06 2023 +0000

    Revert "[sandbox] Reference code from CallSiteInfo via an indirect pointer"
    
    This reverts commit 4c2729397d03d5679728e6922638a6378f95a2d9.
    
    Reason for revert: Failures on gc-stress mode
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20gc%20stress/46447/overview
    
    Original change's description:
    > [sandbox] Reference code from CallSiteInfo via an indirect pointer
    >
    > This is necessary in order to move BytecodeArray and Code out of the
    > sandbox. As the field can reference both Code and BytecodeArray objects,
    > we need to use the newly-introduced kUnknownIndirectPointerTag which
    > will cause the accessors to determine the correct pointer table (code
    > pointer table or trusted pointer table) to use based on the handle.
    >
    > Bug: chromium:1472252
    > Change-Id: Ia81d688a7cdf1493e227be80e3b20cb596830414
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989243
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90695}
    
    Bug: chromium:1472252
    Change-Id: I8c9d1b5fab0f8a8249e9116770120e6c430296a5
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994336
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90696}

commit 4c2729397d03d5679728e6922638a6378f95a2d9
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Oct 31 14:45:08 2023 +0000

    [sandbox] Reference code from CallSiteInfo via an indirect pointer
    
    This is necessary in order to move BytecodeArray and Code out of the
    sandbox. As the field can reference both Code and BytecodeArray objects,
    we need to use the newly-introduced kUnknownIndirectPointerTag which
    will cause the accessors to determine the correct pointer table (code
    pointer table or trusted pointer table) to use based on the handle.
    
    Bug: chromium:1472252
    Change-Id: Ia81d688a7cdf1493e227be80e3b20cb596830414
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989243
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90695}

commit 1b61b60c48f5806209695ca9869a99af747e6087
Author: Francis McCabe <fgm@chromium.org>
Date:   Mon Oct 30 22:16:44 2023 +0000

    [WASM] Implementation of ia32 jspi.
    
    This is a port of the implementation for x64. Essentially the same;
    except that ia32 only has 8 registers and ia32 does not support concepts
    such as heap cages.
    
    Bug: v8:12191
    Change-Id: Ia04efb9526d4b3045c5603bc1e980c495d75c3d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4913933
    Reviewed-by: Ilya Rezvov <irezvov@chromium.org>
    Commit-Queue: Francis McCabe <fgm@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90694}

commit 3b084cc30429bb01329715c8ef043ebbc7a776c5
Author: Darius M <dmercadier@chromium.org>
Date:   Tue Oct 31 16:06:05 2023 +0100

    [turboshaft] Implement Loop Peeling
    
    Bug: v8:12783
    Change-Id: I95a1bd80adec0433cae8a50bc4d671de29413744
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4935413
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90693}

commit 8c6cd6a8d2840c2053dbf856c4f31743cc74883b
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Oct 30 12:56:52 2023 -0400

    PPC: pass a scratch register to LoadStackLimit
    
    Change-Id: I95218c1c6cad5dfda4ae80dc4a397acdf3184d19
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4988959
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90692}

commit a5147443e1cd2222d534a84723f7206cc08930df
Author: François Doray <fdoray@chromium.org>
Date:   Mon Oct 30 17:35:24 2023 +0000

    Don't allocate  MicrotasksScope on the heap in MicrotaskQueue::PerformCheckpointInternal.
    
    The heap alloc+free for MicrotasksScope in
    MicrotaskQueue::PerformCheckpointInternal routinely shows up as taking
    ~0.2% of Chrome's total CPU in local CPU profiles. This overhead can
    be eliminated by holding the MicrotasksScope in a base::Optional
    rather heap-allocating it. Despite the modest impact, the fix is
    simple so worth implementing.
    
    Sample flame graph: go/microtaskscope-heap-allocate-sample-flame
    
    Change-Id: I4c30743aca074d2d0c346f021066f970de7ae377
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4986134
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90691}

commit 74c0c6e88aedf410d49efc086ebca91cd212e330
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri Oct 27 16:41:00 2023 +0200

    [wasm][exnref] Fix exnref subtyping
    
    R=manoskouk@chromium.org
    
    Bug: chromium:1496602,v8:14398
    Change-Id: Ie9f20fd22fe0320357bfd72c0d6d483bc7b37fea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983821
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90690}

commit 5a97cfb60817e3d48892b06c208b0173e32ab4e9
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Oct 31 13:27:10 2023 +0000

    Reland "[sandbox] Mark code pointer handles"
    
    This is a reland of commit 8d8515ce80cb1e6897d108fdf4b71500b42b0c10
    
    We were using the wrong register in the Arm64 code for resolving
    trusted/code pointer handles.
    
    Original change's description:
    > [sandbox] Mark code pointer handles
    >
    > There can be situations where we need to distinguish a code pointer
    > handle (i.e. an index into the code pointer table) from a regular
    > trusted pointer handle (index into the trusted pointer table). An
    > example would be a union field that can refer to both a Code object and
    > other trusted objects. In these cases, we cannot use a type tag to
    > select the correct table. Instead, we now mark code pointer handles by
    > setting one of the unused lower bits. Then, if the special
    > kUnknownIndirectPointerTag is used, the trusted pointer accessor will
    > select the correct table based on the handle.
    >
    > This mechanism is otherwise free: we only need an additional bitwise OR
    > when allocating a code pointer entry. In cases where we know which table
    > to use the marker is simply removed when shifting the handle to obtain
    > the actual table index.
    >
    > Drive-By: refactor the various LoadIndirectPointerField implementations
    > by moving the handle resolving code into new subroutines.
    >
    > Bug: chromium:1473677
    > Change-Id: I2ceec685f348ca9b2e3769d58e2957fd0fe4906a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989242
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90684}
    
    Bug: chromium:1473677
    Change-Id: I5ab360ee67143ef59bf237bbffd4e89eb00a9c39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994347
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90689}

commit 016f5f6e7171a601d95dc7d0a7af587cb7be4ffd
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Oct 31 14:52:59 2023 +0100

    [heap] Refactor weakness computation of TracedHandles
    
    (*) Rename IsRoot to IsWeak and update usages
    (*) Drop `is_unmodified` parameter from `ComputeWeaknessForYoungObjects`
    (*) Split out computation for individual node
    
    Bug: v8:14406
    Change-Id: I6460e4f69346a5004347a4a2d71425e37204add4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4993367
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90688}

commit 596484dfd7820664d5960e0f575cd2b6424c3f06
Author: Timo Teräs <timo.teras@iki.fi>
Date:   Mon Oct 30 13:49:22 2023 +0200

    Add back accidentally lost postmortem metadata of Code and JSFunction
    
    Due to Code object refactoring and changes in instantiation accessor
    usage, metadata for some Code and JSFunction fields were lost. This
    adds back the metadata for these fields.
    
    Bug: v8:14419
    Change-Id: Ic5111f790656063e4c4d9304a0a4dbd5157210fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989247
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90687}

commit 6fc6a5a0566b49f55f87cd0025ba8791c5679217
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Oct 31 13:53:39 2023 +0100

    [interpreter] Fix unparking issue
    
    This CL avoids unparking the main thread while compiling, which is not
    required after https://crrev.com/c/4553336.
    
    Bug: chromium:1497251
    Change-Id: Iaee84d6944a3da537a014aefbdaf26ef40bdff45
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4987310
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90686}

commit 4d890c0dc3256cae3185d6ef8f7b454543835c6e
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Oct 31 13:21:36 2023 +0000

    Revert "[sandbox] Mark code pointer handles"
    
    This reverts commit 8d8515ce80cb1e6897d108fdf4b71500b42b0c10.
    
    Reason for revert: Mac Arm64 failures
    
    Original change's description:
    > [sandbox] Mark code pointer handles
    >
    > There can be situations where we need to distinguish a code pointer
    > handle (i.e. an index into the code pointer table) from a regular
    > trusted pointer handle (index into the trusted pointer table). An
    > example would be a union field that can refer to both a Code object and
    > other trusted objects. In these cases, we cannot use a type tag to
    > select the correct table. Instead, we now mark code pointer handles by
    > setting one of the unused lower bits. Then, if the special
    > kUnknownIndirectPointerTag is used, the trusted pointer accessor will
    > select the correct table based on the handle.
    >
    > This mechanism is otherwise free: we only need an additional bitwise OR
    > when allocating a code pointer entry. In cases where we know which table
    > to use the marker is simply removed when shifting the handle to obtain
    > the actual table index.
    >
    > Drive-By: refactor the various LoadIndirectPointerField implementations
    > by moving the handle resolving code into new subroutines.
    >
    > Bug: chromium:1473677
    > Change-Id: I2ceec685f348ca9b2e3769d58e2957fd0fe4906a
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989242
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Samuel Groß <saelo@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90684}
    
    Bug: chromium:1473677
    Change-Id: Ifb53be9d4d18fb333d27a533a314f600adec2532
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4994346
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90685}

commit 8d8515ce80cb1e6897d108fdf4b71500b42b0c10
Author: Samuel Groß <saelo@chromium.org>
Date:   Tue Oct 31 12:04:50 2023 +0000

    [sandbox] Mark code pointer handles
    
    There can be situations where we need to distinguish a code pointer
    handle (i.e. an index into the code pointer table) from a regular
    trusted pointer handle (index into the trusted pointer table). An
    example would be a union field that can refer to both a Code object and
    other trusted objects. In these cases, we cannot use a type tag to
    select the correct table. Instead, we now mark code pointer handles by
    setting one of the unused lower bits. Then, if the special
    kUnknownIndirectPointerTag is used, the trusted pointer accessor will
    select the correct table based on the handle.
    
    This mechanism is otherwise free: we only need an additional bitwise OR
    when allocating a code pointer entry. In cases where we know which table
    to use the marker is simply removed when shifting the handle to obtain
    the actual table index.
    
    Drive-By: refactor the various LoadIndirectPointerField implementations
    by moving the handle resolving code into new subroutines.
    
    Bug: chromium:1473677
    Change-Id: I2ceec685f348ca9b2e3769d58e2957fd0fe4906a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989242
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90684}

commit 4a95b13ffcec191f8e7409fe89b58198005ed085
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Oct 31 11:57:00 2023 +0100

    [heap] Add DisallowGC to TracedHandles::ProcessYoungObjects
    
    Prevent allocations when resetting roots from blink during unmodified
    wrapper reclamation.
    Specifically, this prevents shrinking of the hash map used to record
    wrappers.
    
    Bug: v8:14406
    Change-Id: I6973a8412072fc4eeaa5868977ef0777c8b443b9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4992104
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90683}

commit dec536c7675768c1d7f4f3c609a32b7d1c5eb50a
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Oct 31 12:30:35 2023 +0100

    [wasm-gc] Fix UBSan error with unaligned access
    
    Since 8-byte array elements are aligned to 4 bytes only, we cannot
    use C++ pointers to access them; we should use `memcpy` instead.
    
    Bug: v8:7748, chromium:1496004
    Change-Id: I8ba0e4f64a931c892c7871d772e7b10958395831
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989249
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90682}

commit e837e8613307f7feab7818237540fd35071af93e
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Oct 31 10:57:49 2023 +0100

    [heap] Fix broken DCHECK in %SimulateNewspaceFull()
    
    The code path that created a small filler object at the end of a
    page, didn't increment allocation_top(). But AddFreshPage() was
    DCHECKing that allocation_top() was at the end of the page.
    
    This CL fixes this by introducing a new method
    FillCurrentPageForTesting() which puts a filler object at the end of
    the page and increments allocation_top() as well. In order for this
    to work, we need to free the LAB before this operation. This CL
    does this by freeing the LAB after each individual operation for
    simplicity. Each new allocation can assume that no LAB exists.
    
    Bug: chromium:1494924
    Change-Id: Id5c43432886fef180a22abe647486633b6492229
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4992102
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90681}

commit 63761c455d548b4068697c9d3c5cb881f11b2d0f
Author: pthier <pthier@chromium.org>
Date:   Tue Oct 31 11:49:43 2023 +0100

    [test][regexp] Remove test for case folding special handling
    
    The spec [1] refers to the unicode character database to define
    case-insensitive unicode character matches.
    In the latest version 3 simple case folding mappings were added:
    1FD3; S; 0390; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA
    1FE3; S; 03B0; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA
    FB05; S; FB06; # LATIN SMALL LIGATURE LONG S T
    
    Previoulsy we had special handling in V8 for these cases (removed in
    [2]).
    This CL removes the test cases that were added to cover the special
    handling path in V8.
    
    [1] https://tc39.es/ecma262/#sec-runtime-semantics-canonicalize-ch
    [2] https://crrev.com/c/4694009
    
    Bug: b:308431565
    Change-Id: I44cb6c1c8703998431669f16b8f4eeb7583a63d8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4992103
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90680}

commit 1d3870292d3938c12510675e2798ca076a1db74b
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Oct 31 09:56:40 2023 +0100

    [wasm] Eliminate stack checks of leaf functions
    
    With a recent refactoring of stack checks this optimization got removed
    by accident. This CL restores the optimization.
    
    R=dmercadier@chromium.org
    
    Bug: v8:14108
    Change-Id: I0757d3f0689cc092e03ee9baa26805337ba5b94c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4992441
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90679}

commit 5591d092f49213f81534c709a794783f19c09f44
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Fri Oct 27 18:38:43 2023 +0200

    [wasm][exnref] Decode try_table and throw_ref
    
    R=clemensb@chromium.org
    
    Bug: v8:14398
    Change-Id: Ib89c5ee105bcc0ed3873bed6bcafb63b58656185
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4953361
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90678}

commit 10adbdb146dd1baf539c068266291b8f854a80a2
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Oct 31 08:19:21 2023 +0100

    [wasm] Don't record references in registers in safepoints
    
    So far safepoints were only recorded after calls when all values on the
    value stack were spilled to their stack slots. Now that safepoints are
    also registered at memory accesses, some reference can also be stored in
    registers. This CL removes the corresponding DCHECK.
    
    The safepoint is only needed for debugging, otherwise references on the
    stack frame will not be accessed anymore. References kept in registers
    will be lost for debugging at the moment, but this will be fixed
    separately.
    
    R=mliedtke@chromium.org
    
    Bug: v8:14422, chromium:1497018
    Change-Id: I909d1c1570573f560c4eb21cc61c1322845cbcad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989328
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90677}

commit d2aa2bae7080834052c9fc97ba12ca3bb5923278
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Tue Oct 31 09:29:40 2023 +0100

    [heap] Temporarily check for FreeSpace on marking
    
    Left trimming is disabled during marking and the GC does not expect to
    find fillers anymore which is checked on pop() from the worklist. Move
    the check to the push temporarily for diagnosing purposes.
    
    Bug: chromium:1495151
    Change-Id: I51f49862e819cd79aa4f813cd67e9eaf89f7f9b6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989325
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90676}

commit d5631f63d2ea4269b47e0a71bec3b47177073623
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Oct 30 17:18:57 2023 +0100

    [api] Allow passing CppHeap on Isolate creation
    
    This is a first step towards always having a CppHeap when constructing
    V8 Isolates.
    
    AttachCppHeap() and DetachedCppHeap() are deprecated. Once they are
    removed, V8 will either be constructed with an API provided CppHeap or
    will initialize a Heap internally, so that code can rely on its
    existence.
    
    Bug: v8:13754
    Change-Id: Ica37dca5da7d30e7f0f3fcbac96c2afe7624f84d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989254
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90675}

commit 4341fa249188705e78fff2a4dad4df68f6e46116
Author: Liu Yu <liuyu@loongson.cn>
Date:   Tue Oct 31 11:06:56 2023 +0800

    [loong64][wasm] Single landing pad for trap handlers
    
    Port commit 49d78b893bffdaf59db5bd68fda73280914c15a8
    
    Bug: v8:14102
    Change-Id: I2d473596b3afdd6353a7fb8a34746c5b5183bdaf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4988822
    Auto-Submit: Liu Yu <liuyu@loongson.cn>
    Reviewed-by: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90674}

commit 2cff5f45aff1e9991e1239168831827e2f76ed7e
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Oct 30 16:20:03 2023 +0100

    [api] Add Array::New that initializes from callback
    
    Initializing from a callback allows for avoiding a temporary array
    where embedders would otherwise need to create an array holding JS
    values to call Array::New.
    
    Blink side: https://crrev.com/c/4983815
    
    Change-Id: I547b4e3597a211e1d5a18ded108dce6c25056a0b
    Bug: chromium:1495752
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4978445
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90673}

commit f760a1aae4f1d623cda6e6fa5dc1323cac8b3791
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Oct 30 09:04:47 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/a21fc60..70bf5ea
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/d76d091..abf1537
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765796948058303969
    
    Change-Id: I8dc3e2904998fe04c5620a87b602e09f3c18cc68
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4988957
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90672}

commit eaa486909959e530ff157b258654fa0932225aa5
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Fri Oct 27 10:11:29 2023 -0700

    Add fast path in SharedFunctionInfo::PassesFilter
    
    In a recent profiler recording, I saw that V8 was wasting about 0.4% of
    main-thread time running SharedFunctionInfo::DebugNameCStr. This change
    avoids calling that function unless we actually need the result.
    
    Change-Id: I8060f4978d054d1689b3d6e608df601f844a3076
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4984765
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#90671}

commit 94fe99fedca8cdca4cfbb3dcc544095e5acb0043
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Oct 30 15:28:56 2023 +0000

    Revert "Propagate ContinuationPreservedEmbedderData through thenables"
    
    This reverts commit 0eef5019d709cdb4283caaf333ef167b2ec969bf.
    
    Reason for revert: Failures for softnavigation on V8 Blink Linux
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Blink%20Linux/27580/overview
    
    Original change's description:
    > Propagate ContinuationPreservedEmbedderData through thenables
    >
    > Because the `then` function of a thenable is run within a microtask for PromiseResolveThenableJobTask, the state of the stored ContinuationPreservedEmbedderData may not match what is expected within that `then` call unless the microtask which makes that call also propagates the value as is done with PromiseFulfillReactionJobTask and PromiseRejectReactionJobTask.
    >
    > This change simply copies what is already done with PromiseFulfillReactionJobTask and PromiseRejectReactionJobTask to copy the ContinuationPreservedEmbedderData state on creation of the job tasks and restoring the state while running.
    >
    >   setContinuationPreservedEmbedderData('data')
    >   await Promise.resolve({
    >     then (fulfill) {
    >       // Without this change the state here will be empty
    >       console.log(getContinuationPreservedEmbedderData())
    >       setImmediate(fulfill)
    >     }
    >   })
    >
    > Change-Id: Iebc568deb7dcc43dfeed0bf5a0d140df8614f9e8
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4674242
    > Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90668}
    
    Change-Id: I06d8746916bd6db95a44427858bbad1289facbe8
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989251
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90670}

commit ad30a54167fae74bd1420321e0e5ce8922c96e63
Author: pthier <pthier@chromium.org>
Date:   Mon Oct 30 11:59:09 2023 +0100

    [regexp][arm64] Fix stack check extra space argument
    
    Pass argument in register instead of the stack.
    
    Bug: chromium:1488199, v8:14415
    Change-Id: Ic9967c9f2ca5da1981a0138ddb5f0335ab7f1425
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4987306
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90669}

commit 0eef5019d709cdb4283caaf333ef167b2ec969bf
Author: Stephen Belanger <stephen.belanger@datadoghq.com>
Date:   Fri Oct 20 00:38:06 2023 +0200

    Propagate ContinuationPreservedEmbedderData through thenables
    
    Because the `then` function of a thenable is run within a microtask for PromiseResolveThenableJobTask, the state of the stored ContinuationPreservedEmbedderData may not match what is expected within that `then` call unless the microtask which makes that call also propagates the value as is done with PromiseFulfillReactionJobTask and PromiseRejectReactionJobTask.
    
    This change simply copies what is already done with PromiseFulfillReactionJobTask and PromiseRejectReactionJobTask to copy the ContinuationPreservedEmbedderData state on creation of the job tasks and restoring the state while running.
    
      setContinuationPreservedEmbedderData('data')
      await Promise.resolve({
        then (fulfill) {
          // Without this change the state here will be empty
          console.log(getContinuationPreservedEmbedderData())
          setImmediate(fulfill)
        }
      })
    
    Change-Id: Iebc568deb7dcc43dfeed0bf5a0d140df8614f9e8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4674242
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90668}

commit e96e0505fe9a7ad210a0e1826f513412f056f9b6
Author: Eva Herencsarova <evih@chromium.org>
Date:   Mon Oct 30 10:48:01 2023 +0100

    [wasm][turboshaft] Add Dataview.byteLength to Turboshaft
    
    Bug: v8:14108
    Change-Id: I0731d3bc7309522cfff4c30067095d363a5f2716
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980265
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90667}

commit 71dbcc5d419b6915425466d43b13c097d9f02cc2
Author: Timo Teräs <timo.teras@iki.fi>
Date:   Mon Oct 30 13:09:27 2023 +0200

    [build] use inputs instead of sources for postmortem metadata dependencies
    
    Fixes gn error:
    
    ERROR at //src/snapshot/embedded/platform-embedded-file-writer-mac.cc:7:11: Can't include this header from here.
              ^-------------------------------
    The target:
      //:mksnapshot
    is including a file from the target:
      //:postmortem-metadata
    
    It's usually best to depend directly on the destination target.
    In some cases, the destination target is considered a subcomponent
    of an intermediate target. In this case, the intermediate target
    should depend publicly on the destination to forward the ability
    to include headers.
    
    Dependency chain (there may also be others):
      //:mksnapshot -->
      //:v8_base_without_compiler --[private]-->
      //:postmortem-metadata
    
    Bug: v8:14418
    Change-Id: I878437a0770afc6e4d74e29f117969b6a180a27d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989246
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90666}

commit 817f17ec6bc781e7ade6c7b854f16134e03a33a1
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 30 12:21:48 2023 +0100

    [wasm] Fix canonicalization of empty recursion group
    
    Empty recursion groups are allowed according to the spec. This fixes a
    DCHECK that failed when we tried to canonicalize one.
    
    R=manoskouk@chromium.org
    
    Fixed: chromium:1495855
    Change-Id: I69d8a89bca207457ba30ba79863b211d7b8b8c91
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4987308
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90665}

commit 17a49e64a6ae1fcd9a7846e4a0758680f1432d88
Author: Hans Wennborg <hans@chromium.org>
Date:   Fri Oct 27 10:52:17 2023 +0200

    Stop using /Zc:twoPhase- for building v8windbg
    
    Clang has recently deprecated the flag, and it isn't needed to parse
    the DbgModelh.h header anymore. The header does need some extra
    includes though.
    
    Bug: chromium:1495100
    Change-Id: I97d5a3bf8064c6a3c27761a834ef72d16676ad27
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983808
    Reviewed-by: Seth Brenith <seth.brenith@microsoft.com>
    Commit-Queue: Hans Wennborg <hans@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90664}

commit 74d5efea2a135f08b825d87329c089b801ad01d4
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Mon Oct 30 12:49:12 2023 +0100

    [wasm] Fix error offset for initializer expressions
    
    When validating an initializer expression (e.g. for a global)
    failed, we incorrectly computed the error offset as "start of
    globals section + error offset within initializer", whereas it
    should be "start of this initializer + offset within initializer".
    
    in the output, rather than quitting right before them.
    
    Bonus: in wami's --full-hexdump mode, include the invalid bytes
    Change-Id: I60f26bf9edb76d2cffb2ef952d3f30355432aaff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989244
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90663}

commit 47f71031cbcf83d28f929bcd7447f2a827ab1405
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Oct 27 13:54:53 2023 +0200

    [base] Introduce Hasher
    
    We are pretty inconsistent currently in the use of the
    base::hash_combine functions. There is a templatized function which
    hashes multiple values and combines the computed hashes. The function to
    combine two hashes is also called base::hash_combine, so it can happen
    that we (or the compiler) accidentally chooses that implementation,
    which then does *not* hash the values but just combines them (which
    results in poor hashes).
    
    The Hasher also provides an explicit AddHash method which works like
    the previous hash_combine(size_t, size_t), i.e. it assumes that the
    RHS is a hash and not a plain integer value (which might have less
    uniform distribution than a hash).
    
    This CL also adds a hash_value function for each type with a
    hash_value member function, which allows to implement hash_value
    within a class or struct definition. This is particularly useful if
    the class is private (hence it would be difficult to implement a
    function that accepts this class as parameter).
    
    R=leszeks@chromium.org
    
    Bug: v8:12791
    Change-Id: Ie6b9daf7a957660791e007951310ee6c60a6e2d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983675
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90662}

commit 2d3c5a50337d421c4d0c41ab53f5d86a6683bf7f
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Oct 30 13:32:07 2023 +0100

    [test][debugger] Disable flaky test case for --gc-stress
    
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Bug: v8:14420
    Change-Id: Iaee71fbf4b72042cc51847c221343a2cd902c34f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989248
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90661}

commit eb5ad0c04d128b4750b60306d2cb58d8d78cb001
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Oct 30 10:10:11 2023 +0100

    [tools] Fix missing return in grokdump
    
    Change-Id: I52c10d1df760ba1947a9e9d7b65558caaa6051fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4987305
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90660}

commit 937cf0084d3b986247caa8ffb7862d7c53155795
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Oct 30 10:01:27 2023 +0100

    [turboshaft] Fix wrong detection of wrapping ranges in type checks
    
    Fixed: chromium:1495273
    Bug: v8:12783
    Change-Id: I73d5dfc46b72759c8e151e5ef998357ff888b714
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4989241
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90659}

commit e67df257ca44324fdc7690995da2382dffbb829b
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Sat Oct 28 19:40:53 2023 +0200

    [api] Fix MemorySpan<T>::Iterator
    
    MemorySpan<T>::Iterator, introduced in https://crrev.com/c/4866222,
    resulted in a compiler error whenever used. This CL fixes the issue.
    
    Change-Id: I15fe0037bf2356af6967dddd75f631cdf7ed5c60
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4987302
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90658}

commit 06d8a985d8180221c7c5a227b49c6d8b8c938c53
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Oct 27 19:05:19 2023 +0800

    [wasm][riscv] Add platform-specific support for the wasm-to-js wrapper
    
    Port commit 93bb287c2fef9c52760940895e82759f780ec93f
    
    Also add check_nanbox argument to control WriteMem<Float32> in simulator. FSW/C_FSWSP should not be checked and converted.
    
    Bug: v8:14035
    Change-Id: I82a675b891abfbbe8cc3d37161617f98321ff321
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4974898
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90657}

commit ea510dd78b3e641fa7e9f5a867495bfb730fe928
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Oct 30 07:53:17 2023 +0100

    [test] Disable mid-tier allocator for test
    
    The test fails with the mid-tier register allocator. Since the mid-tier
    allocator is already disabled by default and will be removed soon, this
    CL only disables the mid-tier allocator for the failing test so that
    numfuzz does not pick up the flag.
    
    Bug: v8:14413
    Change-Id: I13d4bf5ad3ac54e0c64a45f0035bc03c80c29268
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4987304
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90656}

commit 811b7e772faa4318e1e4a54459b866bb473d61fe
Author: V8 Autoroll <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Oct 30 01:26:15 2023 -0700

    Version 12.1.0
    
    Change-Id: I4e89ac8ad42e02ff5597e459843293f3b38b19de
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4986846
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90655}

commit 5c5be1448b2a98dcf25229a7cc4e38f3a0b13509
Author: Marja Hölttä <marja@chromium.org>
Date:   Thu Oct 26 15:30:50 2023 +0200

    [test] Add Runtime_GetFunctionForCurrentFrame
    
    It can be used for querying the top level code optimization status.
    
    Change-Id: Ie03c374407d45b18c5ae1737d674d4803991513a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952123
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90654}

commit 11bdcdbf00e44e69589ffa1dc6585ab63c5f2106
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Oct 27 11:59:03 2023 +0000

    Don't store WasmCode references in CallSiteInfo's code_object field
    
    The code_object field is only used for computing source positions, but
    for Wasm frames these are computed independently of the code object. As
    such, we don't need to allocate a Managed wrapper object for the
    WasmCode. This change is also beneficial for the sandbox: now the
    CallSiteInfo's code_object can only ever be Code or BytecodeArray, both
    of which can be referenced via indirect pointers. If we also had to
    support other objects that live inside the sandbox, then we'd need two
    separate fields.
    
    Bug: chromium:1473677
    Change-Id: I4488bb169ef5b275fe86a114a94ab80d40e2f6b7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983676
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90653}

commit af2883e0c964caa26e65a5cae55d3266036989ec
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Oct 27 18:06:02 2023 +0200

    [tools] Improve grokdump
    
    * Print the PushStackTraceAndDie message in the web interface
    * Fix issues around uncompressing tagged pointers
    * Highlight present/missing pointers correctly in the tagged dump
    * Make the tagged dump "more" link also be tagged
    * Print known RO-space objects
    
    Change-Id: I0017622a9ad1e0b3d18a0d5ca2a770887475bae1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983677
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90652}

commit 210e75b19db4352c9b78dce0bae11c2dc3077df4
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Oct 29 09:17:07 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/e5ed343..a21fc60
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/c7628f7..9f3b33a
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765887550986278849
    
    Change-Id: I92d604c42ad5d1cd177cbd51a650a917c9190630
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4988206
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90651}

commit f07c2b96ee0ec5228d5029d02fa4fd952c70efca
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Oct 28 21:06:47 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/9ad7d66..6f834e2
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/7c70886..a429c26
    
    Roll created at https://cr-buildbucket.appspot.com/build/8765932847975014401
    
    Change-Id: I3058122aea9ccf7885a98bfb1e074f658e6e41e0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4987885
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90650}

commit 7fdc2728f2114b083ebbd24710a32fe4574c0c57
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Oct 27 21:06:10 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/9befff2..e5ed343
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/5a1d6bf..9ad7d66
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/16e6d79..47efdb4
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/7751ddf..c7628f7
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/9b27200..7c70886
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766023447045224961
    
    Change-Id: I1bbdde657a6e9222d7d932056fe4bc8f8be1a75f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4986841
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90649}

commit d5413ed6a23e368bae319813572d7ef92eef1a31
Author: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
Date:   Thu Oct 26 09:58:41 2023 -0700

    [shared-struct] Increase SharedArray max length
    
    Support for allocation of shared large objects was implemented in
    https://crrev.com/c/3811579.
    
    Drive by: move SharedArrayIsSharedArray builtin to
    builtins-shared-array.cc.
    
    Bug: v8:12547
    Change-Id: I1bc819446d9e41d9771e68ae4bf5009dd8e608e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980786
    Commit-Queue: Luis Fernando Pardo Sixtos <lpardosixtos@microsoft.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90648}

commit dd122ffc8c301f710b4754f23909c7c47d0eb2bf
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Oct 27 18:59:47 2023 +0200

    [turboshaft][wasm] Limit LateLoadElimination workload
    
    The current implementation of LateLoadElimination can become
    very slow for certain large functions. To give us time to work
    out a proper scaling solution for that, this patch as a temporary
    mitigation introduces an upper cap on the number of "keys"
    (roughly: object × offset) that LateLoadElimination will track.
    
    With this limit set to 10,000, LLE analysis time for the repro
    in the bug shrinks from 18 to 1.5 seconds on my machine. That's
    probably fast enough, considering that register allocation then
    still needs around 30 seconds for the same function.
    We expect the vast majority of functions to never hit this limit.
    
    Bug: v8:14370
    Change-Id: I21d2d4f341a5763e830f54cdcb3e41f65e2012d4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983678
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90647}

commit 4fdc6c6c4741336c249bc664ecd3a3010ef642dc
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Oct 27 09:15:49 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/dc772ab..9befff2
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/9055ad7..16e6d79
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/0b210c1..7751ddf
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/5acf60c..2ca9f38
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/86aed39..d76d091
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766068744940249841
    
    Change-Id: Id61d189c7800696560c3360f36c47fced57f2e22
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4982399
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90646}

commit feb138d30bb2345433d4ec8a16c2b4d26272b75b
Author: Liviu Rau <liviurau@chromium.org>
Date:   Fri Oct 27 12:44:38 2023 +0200

    [test262] Add set method tests to staging
    
    Reland https://crrev.com/c/4913993
    
    This CL adds three tests from test methods tests to staging
    directory with correct format.
    
    Bug: v8:13556
    Change-Id: I93817eb84e077436071dbae98bc800dd58851f91
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983674
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90645}

commit 22aaa6fca535866df26f1a2031814e509726d10c
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Oct 27 15:43:05 2023 +0200

    [turboshaft][wasm] Fix inlining with --no-liftoff
    
    When using the no-liftoff fallback inlining strategy:
    - we shouldn't inline more than kMaxInlinedCount functions
    - we shouldn't inline at all when command-line flags disable inlining.
    The latter is important to get the intended coverage from some of our
    mjsunit tests, which intentionally use non-inlined functions to create
    certain situations for the compiler to deal with.
    
    Change-Id: Ib0fd51d70384a959835a91274dd2c3faa4321bcc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980268
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90644}

commit 127d0e9df27247620d660307c2f1cb146e748500
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Oct 27 12:22:53 2023 +0200

    [wasm][turboshaft] Add test for SharedArrayBuffers for DataView imports
    
    Bug: v8:14108
    Change-Id: I26699e9a78c70efa070c457bcc04f76ec4315932
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983812
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90643}

commit 49d78b893bffdaf59db5bd68fda73280914c15a8
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Oct 27 10:43:14 2023 +0200

    Reland "[wasm] Single landing pad for trap handlers"
    
    This is a reland of commit 682d41b0064f61b364d58557259c89299e05507f
    
    A macro was missing for arm64 linux in the original CL.
    
    Original change's description:
    > [wasm] Single landing pad for trap handlers
    >
    > This CL is the implementation of https://docs.google.com/document/d/19ANifiWruc4k1PX4HSZ-61Ssnk6DSov7E1Iusd6mN94/edit?usp=sharing
    >
    > With this CL the WebAssembly trap handler always jumps to the same
    > landing pad for segfaults that should be transformed into JavaScript
    > exceptions. The landing pad then calls into the runtime to throw the
    > exception. The landing pad fakes a call from the memory access which
    > triggered the segfault so that a correct stack trace is created.
    > Source position information is added at the memory access to provide
    > debug information, and safepoint information for GCs that get
    > triggered when allocating the exception.
    >
    > Bug: v8:14102
    > Change-Id: I5abb57f4ecdf9e575eba8f49e4c1e28815fadf21
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4660460
    > Reviewed-by: Mark Mentovai <mark@chromium.org>
    > Reviewed-by: Mark Seaborn <mseaborn@chromium.org>
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > Reviewed-by: Clemens Backes <clemensb@chromium.org>
    > Commit-Queue: Andreas Haas <ahaas@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90626}
    
    Bug: v8:14102
    Change-Id: Ibbbfb7d7dd6594fa6e8f1193f9f63fcdb409b316
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983668
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90642}

commit a0d0d4fc4f190b192864ba7c0ff0758dd803e6fd
Author: Ho Cheung <uioptt24@gmail.com>
Date:   Fri Oct 27 19:25:49 2023 +0800

    [py3.12] Optimize some py files
    
    1. Remove the imp module and use its equivalent instead
    2. Delete unused module imports
    
    Bug: chromium:1487454
    Change-Id: I06fd342ba8e17f96ee2e55926cca0efded845b2a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983809
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Ho Cheung <uioptt24@gmail.com>
    Cr-Commit-Position: refs/heads/main@{#90641}

commit 5a9775bc34b844773d76032175ddb6f76ec57944
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Oct 26 12:55:52 2023 +0200

    [wasm] Update spec tests
    
    R=jkummerow@chromium.org
    
    Change-Id: Id36c364dddb2561f22c59c7a6b47e3b7435a56ea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4978885
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90640}

commit 6af530958779f086ffea75093d9bd67064622ad5
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Oct 27 13:51:10 2023 +0200

    [turboshaft][wasm] Implement WasmLoadElimination
    
    This adds a WasmLoadEliminationReducer, which runs before lowering,
    and takes Wasm-level type information into account (contrary to
    LateLoadElimination).
    For now, this supports only the cases we supported in Turbofan,
    which notably excludes array.get/set.
    Also for now, this duplicates some code that's also used in
    LateLoadElimination; factoring out what can be shared is left as
    a future exercise.
    
    Bug: v8:14108
    Change-Id: Ib209ead623baf84f832b85ae2e84fcdbc788260c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980490
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90639}

commit 05ac01354eb8edcd0b0907e1db81e8f1ae2d0d1d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Oct 27 13:46:08 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Track reachability in analysis
    
    - Any block that produces an uninhabited ("impossible") type is ignored
      when merging predecessors.
    - Any branch based on a ref.test / ref.is_null for which the result
      is known marks the branch target which is not taken as unreachable.
    
    Bug: v8:14108
    Change-Id: If807cc1cf1dbb7acf415a0ab8830efb3d508b5f5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980266
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90638}

commit e186783cef47371df169a4406ca54497e9ecab72
Author: Eva Herencsarova <evih@chromium.org>
Date:   Fri Oct 27 12:08:45 2023 +0200

    [wasm][turboshaft] Check for Smi in type check for DataView imports
    
    Previously, when doing type checks for the well-known DataView imports,
    we assumed the type is a HeapObject. However, the type could also be a Smi and we should handle it.
    
    Bug: v8:14108
    Change-Id: If284b86c0faf237cafa753d4aad95ad9d0088d1e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983673
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90637}

commit 9002927ce3f51162a3d2874d8e5c2fb1103c9e14
Author: Ho Cheung <uioptt24@gmail.com>
Date:   Fri Oct 27 17:13:32 2023 +0800

    [py3.12] Optimize some py files in test262-harness
    
    Remove unused module imports
    
    Bug: None
    Change-Id: I951f1a2c6f870d0bf77e1c5a80a71610cf2697e3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983811
    Commit-Queue: Ho Cheung <uioptt24@gmail.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90636}

commit 63c5122d294380ff27f17eba63d82b2f4a201f83
Author: Benedikt Meurer <bmeurer@chromium.org>
Date:   Thu Oct 26 15:06:03 2023 +0200

    [inspector] Simplify "array like" treatment.
    
    Previously we had some really complicated logic to check whether an
    object should be considered "array like":
    
    (1) It had to have an own property called "length" with a uint32 value.
    (2) It had to have a "splice" property that is a function or be an
        arguments object.
    
    Besides arguments object and arrays this would barely yield true for
    any objects, so we can as well just be very explicit and limit it just
    to arguments objects and arrays for now.
    
    Fixed: chromium:1495781
    Change-Id: I2c0d12c43255ed04b15bdac80ace6d072ed800c5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4978887
    Auto-Submit: Benedikt Meurer <bmeurer@chromium.org>
    Reviewed-by: Yang Guo <yangguo@chromium.org>
    Commit-Queue: Yang Guo <yangguo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90635}

commit f2d603caa735034365a194cc04b7813fe4ea2b63
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Oct 27 08:37:10 2023 +0000

    Always use CompressObject when compressing tagged slots
    
    This CL removes the special case for compressing MaybeObject slots,
    and now also uses CompressObject for them instead of CompressAny. The
    effect of that is that we can also assume that the cage base matches,
    and in debug builds we have a DCHECK for that. This is beneficial when
    moving objects into trusted space (and out of the main pointer
    compression cage) as it immediately catches any remaining tagged
    (instead of indirect) pointers to moved-out objects.
    
    Bug: chromium:1473677
    Change-Id: Id93c5d389752352ad0347628916c78139def89eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983806
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90634}

commit 0fb237e2ab3e830d89a931e08b3680996fa7e59c
Author: Liviu Rau <liviurau@chromium.org>
Date:   Fri Oct 27 12:09:35 2023 +0200

    [test262] More revisions to skip
    
    No-try: true
    Bug: v8:14002
    Change-Id: I28da13c6dc9ad03940bf4b3f7d081be7abefa1a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983672
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90633}

commit b97d50ae5e4bb6b5abfc811c0b618d888c3f1377
Author: Liviu Rau <liviurau@chromium.org>
Date:   Fri Oct 27 11:02:15 2023 +0200

    [test262] Move file to correct staging folder
    
    No-try: true
    Bug: v8:14002
    Change-Id: I4bc40f625e59b536cd272486a93f45dc8ac074f5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983810
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90632}

commit 1de575249a4d9e00b619d05966d5b1429a24f37a
Author: Liviu Rau <liviurau@chromium.org>
Date:   Fri Oct 27 10:26:11 2023 +0200

    [test262] Add features file in an non-exportable CL
    
    See revert reason: https://chromium-review.googlesource.com/c/v8/v8/+/4983669
    
    No-try: true
    Bug: v8:14002
    Change-Id: I258003430c965c16ccc330501df881090ef447ea
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983671
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90631}

commit 85bf69fd70e118b1ace64110ed82cb1ff0d58533
Author: Liviu Rau <liviurau@google.com>
Date:   Fri Oct 27 08:20:22 2023 +0000

    Revert "Reland "[test262] Add set method tests to staging""
    
    This reverts commit 46c933180967191758afd0427f9d0ba02a4d24a3.
    
    Reason for revert: Cannot have the features.txt file added in this CL. It needs to look like a modified file to the exporter. Will add it in a separate CL (excepted from import) and reland this behind that CL.
    
    Original change's description:
    > Reland "[test262] Add set method tests to staging"
    >
    > This is a reland of commit 87437c41113c2b41aaf5bcbc7fee996df0ab1711
    >
    > Original change's description:
    > > [test262] Add set method tests to staging
    > >
    > > This CL adds three tests from test methods tests to staging
    > > directory with correct format.
    > >
    > > Bug: v8:13556
    > > Change-Id: Id6fe4a443bc871964450a44334126ba3633bb62d
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4913993
    > > Reviewed-by: Liviu Rau <liviurau@google.com>
    > > Commit-Queue: Liviu Rau <liviurau@google.com>
    > > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90574}
    >
    > Bug: v8:13556
    > Change-Id: I19771bfd0ccf519b78ce82a0a458f7b7937d4c9d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980271
    > Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Commit-Queue: Liviu Rau <liviurau@google.com>
    > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90628}
    
    Bug: v8:13556
    Change-Id: I1f3a269917d1ac233b4aadaf387c952926e2a804
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983669
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90630}

commit 22227c5aff4d040a87ca4f58de03982a21d34b77
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Oct 26 19:48:18 2023 +0200

    [turbofan] Fix nullptr crash in BitcastElider
    
    Found this issue as a side effect of investigating the Wasm module
    provided in issue 14370.
    
    Change-Id: I686d8bb0128545011d8ed58c43d65941e1cd1bdf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980489
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90629}

commit 46c933180967191758afd0427f9d0ba02a4d24a3
Author: Liviu Rau <liviurau@chromium.org>
Date:   Fri Oct 27 00:24:08 2023 +0200

    Reland "[test262] Add set method tests to staging"
    
    This is a reland of commit 87437c41113c2b41aaf5bcbc7fee996df0ab1711
    
    Original change's description:
    > [test262] Add set method tests to staging
    >
    > This CL adds three tests from test methods tests to staging
    > directory with correct format.
    >
    > Bug: v8:13556
    > Change-Id: Id6fe4a443bc871964450a44334126ba3633bb62d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4913993
    > Reviewed-by: Liviu Rau <liviurau@google.com>
    > Commit-Queue: Liviu Rau <liviurau@google.com>
    > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90574}
    
    Bug: v8:13556
    Change-Id: I19771bfd0ccf519b78ce82a0a458f7b7937d4c9d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980271
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90628}

commit 84eecd6ac4ccfacf797bbec5d2a51b181adfcf87
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Oct 27 07:24:23 2023 +0000

    Revert "[wasm] Single landing pad for trap handlers"
    
    This reverts commit 682d41b0064f61b364d58557259c89299e05507f.
    
    Reason for revert: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Arm64%20-%20builder/29111/overview
    
    Original change's description:
    > [wasm] Single landing pad for trap handlers
    >
    > This CL is the implementation of https://docs.google.com/document/d/19ANifiWruc4k1PX4HSZ-61Ssnk6DSov7E1Iusd6mN94/edit?usp=sharing
    >
    > With this CL the WebAssembly trap handler always jumps to the same
    > landing pad for segfaults that should be transformed into JavaScript
    > exceptions. The landing pad then calls into the runtime to throw the
    > exception. The landing pad fakes a call from the memory access which
    > triggered the segfault so that a correct stack trace is created.
    > Source position information is added at the memory access to provide
    > debug information, and safepoint information for GCs that get
    > triggered when allocating the exception.
    >
    > Bug: v8:14102
    > Change-Id: I5abb57f4ecdf9e575eba8f49e4c1e28815fadf21
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4660460
    > Reviewed-by: Mark Mentovai <mark@chromium.org>
    > Reviewed-by: Mark Seaborn <mseaborn@chromium.org>
    > Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > Reviewed-by: Clemens Backes <clemensb@chromium.org>
    > Commit-Queue: Andreas Haas <ahaas@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90626}
    
    Bug: v8:14102
    Change-Id: I47a72727dac598575d443ed7e818c48882758a53
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983667
    Owners-Override: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90627}

commit 682d41b0064f61b364d58557259c89299e05507f
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Oct 27 07:35:09 2023 +0200

    [wasm] Single landing pad for trap handlers
    
    This CL is the implementation of https://docs.google.com/document/d/19ANifiWruc4k1PX4HSZ-61Ssnk6DSov7E1Iusd6mN94/edit?usp=sharing
    
    With this CL the WebAssembly trap handler always jumps to the same
    landing pad for segfaults that should be transformed into JavaScript
    exceptions. The landing pad then calls into the runtime to throw the
    exception. The landing pad fakes a call from the memory access which
    triggered the segfault so that a correct stack trace is created.
    Source position information is added at the memory access to provide
    debug information, and safepoint information for GCs that get
    triggered when allocating the exception.
    
    Bug: v8:14102
    Change-Id: I5abb57f4ecdf9e575eba8f49e4c1e28815fadf21
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4660460
    Reviewed-by: Mark Mentovai <mark@chromium.org>
    Reviewed-by: Mark Seaborn <mseaborn@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Linke <jgruber@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90626}

commit 80717207474bb8faf10de8458ff0ae0aa90c1cd0
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Fri Oct 27 12:34:49 2023 +0800

    [riscv][wasm] Also load the real stack limit from the root register
    
    Port commit d5244423b7fb9b9c237472dc610f762d18c4d2ad
    
    Bug: v8:14393
    Change-Id: Ia7c7282ef4ddd7f0722bd0b3bf307ed7c98d3a93
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983265
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90625}

commit 9a19c22af69794bf564abe396c5d49b08eeb63c6
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Oct 26 21:06:31 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/344b916..dc772ab
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/11e982b..5a1d6bf
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/e0c9c85..9055ad7
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/27ea34f..0b210c1
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/d8fb829..9b27200
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766114042689991537
    
    Change-Id: Id5673f87de158ab00f19ea63ea712a769df1c490
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4983206
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90624}

commit 3966c4c403d9415cca3559d2c73a944e65949a32
Author: Liviu Rau <liviurau@chromium.org>
Date:   Thu Oct 26 23:12:30 2023 +0200

    [test262] Update project properties
    
    Updates:
     - features.txt needs to sit in staging folder to be picked up by the importer (to be added on reland of https://crrev.com/c/4913993)
     - patch renames needs to happen from most specific to least specific
     - more CLs that would fail github checks added to skipped revisions
    
    Bug: v8:14002
    Change-Id: Id18204dff87ac7b9c42504345d390920efd3f13d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980270
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90623}

commit b8d49712ab12dd13bee5da34849f8ab7f5309715
Author: Liviu Rau <liviurau@google.com>
Date:   Thu Oct 26 18:50:45 2023 +0000

    Revert "[test262] Add set method tests to staging"
    
    This reverts commit 87437c41113c2b41aaf5bcbc7fee996df0ab1711.
    
    Reason for revert: feature.txt needs to land in the staging folder; when exporting this CL we fail to reach the features file. Will reland it correctly later
    
    Original change's description:
    > [test262] Add set method tests to staging
    >
    > This CL adds three tests from test methods tests to staging
    > directory with correct format.
    >
    > Bug: v8:13556
    > Change-Id: Id6fe4a443bc871964450a44334126ba3633bb62d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4913993
    > Reviewed-by: Liviu Rau <liviurau@google.com>
    > Commit-Queue: Liviu Rau <liviurau@google.com>
    > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90574}
    
    Bug: v8:13556
    Change-Id: I068e0ec6d099bd99fcce2ab8fdca40843273a742
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980269
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90622}

commit 8212aa2920ff4eba690ce0d78a6d8391989eec45
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Oct 26 19:35:21 2023 +0000

    [parser] Use PeekContextualKeyword instead of peek
    
    PeekContextualKeyword checks the escaped characters as well. Using
    this instead of peek keeps the behavior of the code same as
    before.
    
    Bug: v8:13559
    Change-Id: I6031bfa2a5329ac0301c59703227be651c2f0c8e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4980793
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90621}

commit ccb02aa73d9016cc33916bf70dfda8a50da5beeb
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Oct 26 09:16:45 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/b43af39..344b916
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766159341822514017
    
    Change-Id: I05c3fc80f793db7eb99b5ba60f29a1ad3ac97aa4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4979111
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90620}

commit ca9eb061caf4ef46382b3d74a885b9c2bcad6747
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 26 11:31:02 2023 +0200

    [wasm] Improve hashing of CanonicalType
    
    This implements better hashing for the CanonicalType struct. This
    improves the efficiency of the canonical_singleton_groups_ hash map by
    more than 30%, which makes module decoding overall 17% faster in a local
    test.
    
    The better hash function will produce much less hash collisions, hence
    much fewer equality checks need to be executed.
    
    R=manoskouk@chromium.org
    
    Bug: v8:14402
    Change-Id: I2ab17b2c56b7b078db5b1417dda9c8131555b699
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976265
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90619}

commit 6e5775b0e624709e174f19996f9f142da671bc3c
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Oct 25 17:09:40 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Type call results
    
    While it seems like a simpler change to just add the wasm::ValueType to
    the CallOp (it doesn't actually cost any memory on 64 bit platforms due
    to alignment), this would unfortunately require many
     #if V8_ENABLE_WEBASSEMBLY
    resulting in different signatures for reducers of callops depending
    whether webassembly is enabled or not.
    
    So instead the more generic WasmTypeAnnotationOp is added to the graph
    to store this information in a generic way. The node is only generated
    for reference types (as we don't perform any type optimizations on
    non-reference types).
    
    Bug: v8:14108
    Change-Id: I65527b080ce5bb55084441c4bb9bfde752d8a333
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976266
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90618}

commit c780cc16544f5a9516697a494b2f687c53d3d393
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 26 13:31:39 2023 +0200

    [message] Allow missing parameter in one more template
    
    When parsing reserved tokens we get the FUTURE_STRICT_RESERVED_WORD
    token which does not have a string representation (because it represents
    multiple reserved tokens). This then later fails validation when
    generating the error message because there is no argument.
    
    This CL just allows that, even though the error message is not very
    user-friendly. Fixing that can be done in a follow-up CL.
    
    R=marja@chromium.org
    
    Bug: chromium:1494681, v8:14386
    Change-Id: I7e790eeb058add9270b653cea5513b51b08efa9e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4978441
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90617}

commit 559710e24b62bf28313b4a8d8afd976ae5cccaa1
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Fri Oct 20 12:44:06 2023 +0200

    [wasm] Fulfill and reject promise after switching back to the central stack
    
    `FulfillPromise` and `RejectPromise` JS builtins are used in
    `WasmReturnPromiseOnSuspendAsm` Wasm builtin for returnint promise to JS.
    As non-Wasm builtins they have to run on the central stack.
    This CL postpones a call to these builtins untill we switch to the central
    stack.
    
    Bug: v8:13983
    Change-Id: If96105a8917f0e7bc8f305e34c251855da13cacc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958339
    Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90616}

commit c5310ea2e9e8ca0395e73588cfafaadd221cea93
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Oct 26 15:30:42 2023 +0200

    [test] More gracefully handle reuse of PIDs on MacOS
    
    On MacOS, we sometimes quickly run into access denied errors when
    attemtping to collect memory stats after a process finished fast.
    
    We treat this as benign now, in the same way as other fast processes.
    
    Bug: v8:14373
    Change-Id: I427dcc8475ee1d866e004e3942598cadabe8bdf0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4978446
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90615}

commit 6f4153271fbe70ae456877632d02cb0be6c889cb
Author: Carl Smith <cffsmith@google.com>
Date:   Thu Oct 26 13:19:07 2023 +0200

    [fuzzing] Make SetForceSlowPath fuzzing safe
    
    Only do a DCHECK in SetForceSlowPath if we are not fuzzing.
    
    Change-Id: I3e190802398c286a05ad19baf1e4a3320eeeb455
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4978439
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Carl Smith <cffsmith@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90614}

commit 9caec1cc8a4a973d15a82c8158973595f0c6efdb
Author: Liviu Rau <liviurau@chromium.org>
Date:   Thu Oct 26 13:55:10 2023 +0200

    [test262] Add un-exportable revisions
    
    We will not be able to export these revisions.
    
    Bug: v8:14002
    Change-Id: I2d91fa2313302c61bb30c4a95ebb2ed0a2d4177f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4978886
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@chromium.org>
    Auto-Submit: Liviu Rau <liviurau@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90613}

commit dabb00817c94bfd73adf3391131c0f30a3d375ad
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Oct 26 13:49:14 2023 +0200

    [foozzie] Be less chatty when fuzzing to avoid false positives (take 2).
    
    This fixes the intended function.
    
    Bug: chromium:1496002
    Change-Id: I82c39cbf7edc699b4ebe75383952900e60e65d0f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4978442
    Reviewed-by: Carl Smith <cffsmith@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90612}

commit d6e6d54ef8163184e9af108729f6ae3a808bde1c
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Wed Oct 25 18:42:59 2023 +0200

    [tools][profiling] Use absolute path for renderer cmd prefix
    
    No-Try: true
    Change-Id: Ie23782eee09989ee38ef50e1086da4978a06dc15
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976471
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Victor Gomes <victorgomes@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90611}

commit 036066bcf4c7aab76c30e0ee2a317e1e587ba931
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 26 11:04:36 2023 +0200

    [wasm] Add a fast path for typechecking function tables
    
    For standard MVP function tables we can skip the somewhat expensive
    subtype check.
    
    R=manoskouk@chromium.org
    
    Bug: v8:14402
    Change-Id: I7fd95438256459bb16b1b1429882ba03bca0b38d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976270
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90610}

commit f5f921a4840470798e784001ca47797c4bd7fce5
Author: Jakob Linke <jgruber@chromium.org>
Date:   Thu Oct 26 13:17:26 2023 +0200

    Port WeakFixedArray to derive from TaggedArrayBase
    
    .. and remove obsolete overloads:
    
     Heap::CreateFillerForArray
     Heap::RightTrimFixedArray
     Heap::RightTrimWeakFixedArray
    
    They are all replaced by the templated Heap::RightTrimArray.
    
    Since it's now possible for TaggedArrayBase elements to be
    MaybeObjects, consider this for the pointer type and slot type.
    
    Bug: v8:14345
    Change-Id: Ifec200b734585511d8d3f4d6d9a8205248387fed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971831
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Jakob Linke <jgruber@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90609}

commit e381a5c3459cf80e9fc6f478716b5b2103b51bbe
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 26 11:21:23 2023 +0200

    [wasm][multi-memory] Ship multi-memory
    
    This enables the WebAssembly Multi-Memory proposal by default in v12.0.
    Note that there is a separate Chromium feature flag which can override
    V8's default (https://crrev.com/c/4965265).
    
    R=ahaas@chromium.org, vahl@chromium.org
    CC=ecmziegler@chromium.org
    
    Bug: v8:13918
    Change-Id: I9face44ee78550f379fda77693793eb7ee631a8b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4966260
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Lutz Vahl <vahl@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90608}

commit e5dd31bf0e2c2fe063ff0382a9657825c436b66c
Author: Jakob Linke <jgruber@chromium.org>
Date:   Thu Oct 26 11:53:10 2023 +0200

    Various tiny cleanups around Arraylike::length
    
    - Remove the obsolete comment saying 'Acquire should not be needed
      anymore' (it is).
    - Rename DECL_RELAXED_SMI_ACCESSORS to DECL_RELAXED_INT_ACCESSORS for
      consistency.
    - Use AllocatedSize in a few spots for consistency.
    
    Bug: v8:14345
    Change-Id: Iafeecb2ea7fdedb2ee6d141a6fb9f95aa5dd69b0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4968334
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Jakob Linke <jgruber@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90607}

commit 3b919d35b6786f6a3b101d83645daa773f32ab8d
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Oct 26 09:25:34 2023 +0200

    [foozzie] Be less chatty when fuzzing to avoid false positives.
    
    Bug: chromium:1496002
    Change-Id: Ic37e83b6e5be7682b0f9e209ca0a997dc02ad1a6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4978437
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Carl Smith <cffsmith@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90606}

commit a7605e688f044eb22d0f053db0591778aab19e29
Author: Omer Katz <omerkatz@chromium.org>
Date:   Thu Oct 26 10:31:05 2023 +0200

    [heap] Adjust RuntimeCallStats for GC
    
    1) Change background GC regex to also look for "GC_" instead of just
       "GC".
    2) Add scope for `Sweeper::EnsurePageIsSwept` which was counted as
       JavaScript instead of GC.
    3) Move allocation slow path RCS scope to cover all slow paths instead
       of just `RefillLabMain` (MinorMS for example is doing a bunch more
       stuff in the slow path, like waiting for background sweeping, which
       weren't accounted for in the scope).
    
    Bug: v8:12612
    Change-Id: Iacbd4451e7d055ed75e2e93dae9ac8be8bd49193
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976461
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90605}

commit d00c5048526c9dd9b5753fa0d9eda923d836ef55
Author: Liviu Rau <liviurau@chromium.org>
Date:   Wed Oct 25 17:18:25 2023 +0200

    Unpack "patch paths rename" adhoc objects to expected tuples
    
    Bug: v8:14002
    Change-Id: I3c05fd4636027914080bfc9fe6cf01986c7fef87
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976467
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90604}

commit d7163cc094b0e0aa4fd946b335163c2d5ad473c6
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Oct 26 09:16:27 2023 +0200

    [test] Log system memory stats if available
    
    This logs the percent value of available memory using psutil's
    memory_info() implementation on desktop.
    
    The log file is per default written side-by-side with the json
    output when that is switched on, e.g. on the bots. A prerequisite
    is vpython.
    
    Bug: v8:14373
    Change-Id: Ife10362d5e583765303697f1924e8aa1f9709aab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976463
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90603}

commit a49788d542ec4a9874abde0ccb4b2db1e9913ccc
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Oct 23 07:41:36 2023 +0000

    [sandbox] Reference BytecodeArray via indirect pointers from DebugInfo
    
    In order to move BytecodeArrays out of the sandbox, they must be
    referenced via indirect pointers (instead of tagged pointers) from other
    objects inside the sandbox. This CL changes the reference from DebugInfo
    objects to an indirect pointer, and also introduces macros for declaring
    and defining such accessors.
    
    Bug: chromium:1473677
    Change-Id: I7602f635da7e45e5b7d656b524c6a6daf1f29ad7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952151
    Reviewed-by: Jakob Linke <jgruber@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90602}

commit 88d2d47bbf2146e2575a14a93574cbc78948c9e9
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Oct 25 17:41:32 2023 +0200

    [wasm] Add histogram for code size in kB
    
    The current histogram has 87% of sammples in the [0, 1) bucket. Hence
    add another histogram with kB resolution instead of MB.
    Choose it big enough so it can eventually fully replace the MB
    histogram.
    
    R=ahaas@chromium.org
    
    Bug: v8:14411
    Change-Id: I6c3c63dac0fb9c1991c1f24bcd58c718921ecea5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976267
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90601}

commit cb922c943bd620a202c41e3fa16d6bd75163b8a6
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Thu Oct 26 10:39:53 2023 +0800

    [riscv] skip console-profile-wasm on unsupported platforms
    
    Change-Id: Ifd0ab81e011a78b7722f29dbb60aa94d425a51b3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4974897
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90600}

commit 2e477805ee0e782169c8eac71717f64a2da10298
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Oct 25 21:06:42 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/399e494..b43af39
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/9d8a076..e0c9c85
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766204638850697825
    
    Change-Id: I01e61cda423c18c2aaec653e76f7d59933e8df87
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976929
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90599}

commit ac3c3af41810bcfcb0996aa63b0ee9863a8d2a18
Author: Liu Yu <liuyu@loongson.cn>
Date:   Thu Oct 26 11:03:13 2023 +0800

    [loong64][mips64][wasm] Also load the real stack limit from the root register
    
    Port commit d5244423b7fb9b9c237472dc610f762d18c4d2ad
    
    Bug: v8:14393
    Change-Id: Id0526dcf6cf999fc04ff7daf4e494e2aaccf99f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4974803
    Auto-Submit: Liu Yu <liuyu@loongson.cn>
    Reviewed-by: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#90598}

commit 65bccd205487b07f01e334891949d1daed1c80d6
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Oct 25 10:44:00 2023 +0800

    [riscv][regexp] Fix stack check in native code when interrupt was requested
    
    Port commit 7f1aaf2a1c763c8aa1358ec8ed24f39bfa17b767
    
    Bug: chromium:1488199
    
    Change-Id: I6b2567267cee0b30230b2e42b8606188011b4463
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4975715
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90597}

commit e0dbdcfae2fe1f65cf117ddc35656c0956de37a5
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Oct 25 15:31:11 2023 +0000

    PPC/S390: Implement TryTruncateFloat64ToInt32 and Uint32
    
    Change-Id: I0d39bd1e3cfc67778276a48639d778d324a27423
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4974350
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90596}

commit 8dd093333f101fbec78ba2a20c1e4b3135891994
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Wed Oct 25 20:26:30 2023 +0000

    [parser] Add `of` as a token
    
    This CL adds the `of` contextual keywords to tokens.
    
    Bug: v8:13559
    Change-Id: Id7b50afce0d41cc8452334c9426f1f9eff6ac3ad
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4956786
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90595}

commit 51c1d0b733b5cf77ab567d8459d7e5845c21824b
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Oct 25 17:38:08 2023 +0000

    PPC/s390: [wasm] Also load the real stack limit from the root register
    
    Port d5244423b7fb9b9c237472dc610f762d18c4d2ad
    
    Original Commit Message:
    
        Since the root register is now also used in WebAssembly, the root
        register can be used for stack checks in WebAssembly. The changes in
        other compilers have already been done in other CLs, this CL now changes
        the backup stack-checks for Turboshaft and TurboFan.
    
    R=ahaas@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Ib107f93d092691a538d9deb171073aef0fae3ec1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976921
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90594}

commit f31599a55aa0a72bc558966a5883550eb2580928
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Oct 25 09:16:37 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/6dbd938..399e494
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/cd6bd50..11e982b
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/a391ecb..16ed8d7
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/7b5e316..d8fb829
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766249937384051729
    
    Change-Id: I0719310ca4db1b2d4b67480a675c16c5ab732085
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4974351
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90593}

commit c75efb8fba4d365768396de82512f69381fd62e3
Author: Camillo Bruni <cbruni@chromium.org>
Date:   Mon Oct 23 17:55:54 2023 +0200

    [tools] Support bigint addresses in the tickprocessor
    
    - Rename useBigInt to useBigIntAddresses
    - Propagate useBigIntAddresses to more profile helpers
    - Add more tests with useBigIntAddresses
    - Add new --use-bigint-addresses flag for the tickprocesser
    
    Bug: v8:13440
    Change-Id: If51c3d0e8c6ff8cd1aed0bd4dd857386caa835f0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4965425
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90592}

commit fd0fbe29b3d73e29c32ebb9a8a9eeacd30cbe150
Author: Eva Herencsarova <evih@chromium.org>
Date:   Wed Oct 25 15:00:14 2023 +0200

    [wasm][turboshaft] Separate DataView reducers from
    MachineLoweringReducer
    
    Bug: v8:14108
    Change-Id: I68deb527678a8b965c4ef6ae43efba6753ea3aeb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976460
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90591}

commit 10b1c202cc7ceb9cf78b61f5374d50bf33bd9e36
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Tue Oct 3 11:59:01 2023 -0700

    Don't check for implicit fallthrough in jump threading
    
    The implementation of jump threading includes some logic to check
    whether a block falls through into the following block. However, this
    logic is unnecessary, because earlier phases of the compiler never
    construct blocks with implicit fallthrough. Blocks with a single
    successor, even if the successor is the next block in order, end with
    the kArchJmp instruction. Furthermore, the fallthrough logic in
    JumpThreading is incorrect: ComputeForwarding treats implicit
    fallthrough as a jump to the next block in reverse post-order, whereas
    ApplyForwarding treats implicit fallthrough as a jump to the next block
    in assembly order. (I am to blame for this inconsistency; see
    https://crrev.com/c/3039261 .)
    
    In this change, I propose that we remove the code which checks for
    fallthrough, since it is both unnecessary and incorrect.
    
    Change-Id: I36410ebd56e7cf0f044f2a5e53f8e35f57d9ea3e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4596019
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90590}

commit c426f6d9c21aed88a9660a8d1216b6614e5d72c9
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Oct 24 12:50:03 2023 +0200

    [heap] Avoid repeated map loads in JSObject::IsUnmodifiedApiObject
    
    Bug: v8:14406
    Change-Id: Ide336d70336a0f981c0dbea47b598bb049c49bb6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971830
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90589}

commit 1c7034cd9acd044aedaa188696ae4c279f3753b0
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Oct 25 15:14:15 2023 +0200

    [asm][test] Disable mid-tier allocator in test
    
    R=dlehmann@chromium.org
    
    Bug: v8:14410
    Change-Id: I1cd596194c7fd84c4f5494e53be15734c55604e4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976263
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90588}

commit 8f1880f0da10240775b5f779860233e762bac8e4
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Oct 25 12:44:56 2023 +0200

    [wasm][exnref] Reintroduce exnref type
    
    R=manoskouk@chromium.org
    
    Bug: v8:14398
    Change-Id: I3b25537a742f4f22ed9d5450997f109ab3f0b433
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4953360
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Philip Pfaffe <pfaffe@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90587}

commit a930f2a42cca6ce13467b8805e05da5a89a63e90
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Oct 25 14:01:03 2023 +0200

    [turboshaft] Fix various issues in instruction selector
    
    In particular:
    * Make --turboshaft-instruction-selection a non-experimental flag.
    * Fix problem of unused ParameterOp with
      --turboshaft-wasm-instruction-selection
    * Improve FindProjection now that they are always scheduled right
      after the operation.
    * Fix printing of instruction selection output in --trace-turbo.
    
    Bug: v8:12783
    Change-Id: I4b54815976ec8f77c93085af731d195662b3118b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4945692
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90586}

commit c8672adeebb105c7636334b9931831bf1945f4ec
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Oct 25 13:19:37 2023 +0200

    [turboshaft] CallOp::PrintOptions: Pretty-print call descriptor
    
    Instead of printing the pointer to the call descriptor, the
    call descriptor will be printed.
    
    Bug: v8:12783, v8:7327
    Change-Id: I58335285d9c880507fa2a5c5a3a72dec3737339a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976260
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90585}

commit 0d21b073d1a97072bced15f47bb3324caf10e9dd
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Oct 25 12:49:47 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Resolve aliases for type data
    
    When having chains of aliasing nodes, the "original" operation's type
    needs to be updated as well.
    
    Example:
      local.get 0
      ref.cast anyref
      ref.cast structref
      local.get 0
      ref.cast structref
    
    Local[0] will be typed anyref after the first cast. Then the second
    cast previously would update the known type to structref for the cast
    result of anyref. It did not update the type of local.get 0 to be
    structref as well so the last cast could not be removed.
    
    With this change, types are only tracked for non-aliasing nodes meaning
    ref.cast and ref.as_non_null do not type their result but only update
    the type of their input.
    This requires all type lookups to resolve these aliases.
    
    Bug: v8:14108
    Change-Id: I9cd62a1ebcc6040ef6d8f29a315f4f0414be6a14
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4974617
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90584}

commit 7ec04aeb1f87704842932888952f902b9ed0feb3
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Oct 24 18:32:11 2023 +0200

    [sandbox] Add output if a sandbox violation is detected
    
    Clusterfuzz should not merge crashes caused by sandbox violation with
    other crashes.
    To achieve this, this CL adds some output to the signal handler which is
    installed when testing the V8 sandbox. This output can then be used by
    the Clusterfuzz crash classification to assign a different crash type to
    those crashes.
    
    R=saelo@chromium.org
    
    Change-Id: I4ea52c81df1d1d0cc9780c1669db5eba1af76af5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971842
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90583}

commit 2bea39162a543658ff819f95f0fba64b00fdcd88
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Oct 25 11:36:48 2023 +0200

    [wasm][cleanup] Free space of dead instance field
    
    R=clemensb@chromium.org
    
    Bug: v8:14393
    Change-Id: Id9f2d19f57699fbee8cf1e9c385114c567441546
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976516
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90582}

commit 1ec3c714bf75f01e3f4f6519bebb953eab93df39
Author: Liu Yu <liuyu@loongson.cn>
Date:   Wed Oct 25 17:27:54 2023 +0800

    [loong64][mips64][regexp] Fix stack check in native code when interrupt was requested
    
    Port commit 7f1aaf2a1c763c8aa1358ec8ed24f39bfa17b767
    
    Change-Id: I6b29906171e51117abd0ef8ce2138cfc526b1859
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4974800
    Reviewed-by: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Auto-Submit: Liu Yu <liuyu@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#90581}

commit 320602d92630f9a23d5223299b8e0302772cd08d
Author: pthier <pthier@chromium.org>
Date:   Wed Oct 25 10:24:25 2023 +0200

    [turbofan] Don't inline Array.prototype.shift
    
    The current implementation of the inlined version doesn't seem to be
    beneficial. Instead it even causes regressions on e.g.
    JetStream2.1/UniPoker.
    Disable inlining of Array.prototype.shift in TF until we have a
    better version of it.
    
    Bug: v8:14409
    Change-Id: I754f70d75552a8f335a13d949fda435c3b132c9b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4968341
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90580}

commit d5244423b7fb9b9c237472dc610f762d18c4d2ad
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Oct 23 12:38:32 2023 +0200

    [wasm] Also load the real stack limit from the root register
    
    Since the root register is now also used in WebAssembly, the root
    register can be used for stack checks in WebAssembly. The changes in
    other compilers have already been done in other CLs, this CL now changes
    the backup stack-checks for Turboshaft and TurboFan.
    
    R=mliedtke@chromium.org
    
    Bug: v8:14393
    Change-Id: I7d5bbee947ab41e1c5f039845a7a9609e6aae237
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4965802
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90579}

commit f292d6f56527d18ef6112c74372cdd3ad772279c
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Oct 24 18:13:39 2023 +0200

    [wasm][cleanup] Rename methods that are only called from tests
    
    This makes it more clear who modifies WasmModule's fields. We have a
    presubmit check that will disallow calling those methods from code
    outside the test/ directory.
    
    R=manoskouk@chromium.org
    
    Change-Id: I0ea0220845084ab694d2b32ac4194b83e919a22f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971840
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90578}

commit 6d9a24d56bebdb77a5e430519608b8bf71bfc3cf
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Oct 24 22:52:59 2023 +0200

    [wasm][turboshaft] Add well-known import StringToLowerCase() to
    Turboshaft
    
    Bug: v8:14108
    Change-Id: I13cba08c895369cd7ed7fd636429d98d1582bf02
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4969393
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90577}

commit 7335a7cb8c83afbb1aecb8d0db69e5d7d8fcfed4
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Oct 23 12:07:46 2023 +0200

    [wasm][turbofan] Load stack limit from the root register
    
    This CL also removes the stack limit address from the wasm instance.
    
    R=clemensb@chromium.org
    
    Bug: v8:14393
    Change-Id: I4349c86af1433bd0e32361b7a210ada6ccb59b27
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4965421
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90576}

commit d8ef1c5b22b188c5afa4b82ff549f69cd46c1fc6
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Oct 25 08:51:25 2023 +0200

    [turboshaft] Protect turboshaft instruction selection with x64 check
    
    Bug: v8:12783
    Change-Id: If3ad71f5fb1b8a4c06e35e3a6a9e58d1ed309d42
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4976155
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90575}

commit 87437c41113c2b41aaf5bcbc7fee996df0ab1711
Author: Liviu Rau <liviurau@chromium.org>
Date:   Tue Oct 24 22:04:54 2023 +0200

    [test262] Add set method tests to staging
    
    This CL adds three tests from test methods tests to staging
    directory with correct format.
    
    Bug: v8:13556
    Change-Id: Id6fe4a443bc871964450a44334126ba3633bb62d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4913993
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90574}

commit d31023552f116ade6662bd82ecb45f7c2cf3cf77
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Oct 24 21:06:43 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/7a4c0fe..6dbd938
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/4358238..27ea34f
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/11d9f3e..7686b5d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766295237334376801
    
    Change-Id: Ifb9c72a5b6b35eb88d7310f1b8ef72ad867c4094
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4974338
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90573}

commit 200f788c125d7a07b14765a6cffd1ce8e3af1ceb
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Oct 24 17:04:37 2023 +0000

    PPC/s390: [regexp] Fix stack check in native code when interrupt was requested
    
    Port 7f1aaf2a1c763c8aa1358ec8ed24f39bfa17b767
    
    Original Commit Message:
    
        When an interrupt was requested at the time we hit the stack check, the
        check to ensure we have enough space for local variables was skipped.
    
    R=pthier@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Iaec3992b60c110127b6745c1e1568330ff6abae4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4969100
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90572}

commit c83686ea73a7263988808c5ce3ad03f13cc72753
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Oct 23 14:39:32 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Check ShouldSkipOptimizationStep
    
    By calling ShouldSkipOptimizationStep() at the beginning of each
    REDUCE and REDUCE_INPUT_GRAPH it is possible to bisect potentially
    misbehaving optimizations in debug builds.
    
    Bug: v8:14108
    Change-Id: If6c727dfa1796fb562924e766482979449d2cb5b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4966081
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90571}

commit 3f78880871ea104edefaa4e18938c36c446f5ab3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Oct 24 16:04:18 2023 +0200

    [wasm][turboshaft] Trace inlined functions for turbolizer
    
    This calls the same functionality for Turboshaft that was added in
    https://crrev.com/c/4640005 for Turbofan.
    
    Bug: v8:14108
    Change-Id: I8f804bc52ce3471554c9c8429b3f2c312db1b6da
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4968343
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90570}

commit c5ba0cfd64660f079ecc86fea779cc75fe18fa56
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Oct 24 09:16:39 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/6a5969b..7a4c0fe
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/75a40ee..cd6bd50
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/58c1757..7b5e316
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766340534965028833
    
    Change-Id: Id1d8589a87fb3afbdaabb14eb6d212549a38e399
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4969938
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90569}

commit fd5f545efdead22e7f4a2717d5a89d584c387803
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Oct 24 16:26:04 2023 +0200

    [wasm] Handle singleton recursive groups separately
    
    In MVP modules there are no recursive groups bigger than size 1, so this
    CL optimizes for those "singleton groups". Storing them in a separate
    map allows for a more compact storage format and faster lookup.
    
    In a local test, this made type section decoding 27% faster.
    
    R=manoskouk@chromium.org
    
    Bug: v8:14402
    Change-Id: If65dc5503f59830866b4e0e6c107433abacd1070
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971837
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90568}

commit 49483b2676ceda3c8887d5a8cf797ee5621702c6
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Oct 24 16:02:26 2023 +0200

    [test] Use correct PID for logging memory stats on Linux
    
    On Linux we start subprocesses with shell=True, stemming from
    https://crbug.com/v8/8889 (reversing that change might be possible,
    but risky, according to the bug).
    
    The shell settings starts an extra shell wrapper that wraps the
    V8 test process. On Debian this is optimized using exec, leading to
    just one PID, while on Ubuntu (e.g. our bots) this creates a child
    PID.
    
    This change retrieves the child PID if possible, in order to use
    that one for memory probing.
    
    Bug: v8:14373
    Change-Id: Ic7fd9df93de08959477ba5c99b269771076a7968
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4968342
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90567}

commit 29c61c2041a764f70e64b4f45937c62f490512d1
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Oct 23 14:39:10 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Propagate types on loop phis
    
    This is a follow-up to https://crrev.com/c/4922910 .
    To process loop phis, the analyzer visits the loop once, then revisits
    the loop header and if its snapshot state changed in any way, i.e. the
    loop header contains at least one (Loop)Phi which resolves to a
    different type with the backedge type data being available, the whole
    loop will be revisited.
    
    For nested loops this can cause revisiting inner loops as part of the
    outer loop.
    Right now the revisitation logic will always happen when the type
    information changes. A case could be constructed where this can lead
    to many iterations until finally reaching a fixed point.
    
    Alternatively, the fixed point iteration could be aborted early when
    the new state is more specific than the previous state.
    This can result in missed optimizations, however the type
    optimizations done in this reducer haven't been very performance-
    critical, so limiting its compile time impact might be a good
    strategy.
    
    Bug: v8:14108
    Change-Id: I840d62ce325036c4884d6346cbee859ebbd13690
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958777
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90566}

commit 5c76ae610fc42a29fbcfd591d19f112cce53e834
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Thu Oct 19 15:52:59 2023 -0700

    Initialize EffectChainIterator::prev_
    
    This change was recommended by a static analysis tool. There is no
    actual bug here, since Prev() is only called after prev_ has been set,
    but the code is more obviously correct if we initialize all of the
    member variables.
    
    Change-Id: I7260dd55012c3d959a203c9333cdbf3008d4920e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4957413
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#90565}

commit db5e01e07771803d3b76ba42ebe2a8717042f459
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Oct 24 16:22:36 2023 +0200

    [wasm] Avoid temporary heap allocations in module decoding
    
    Function signatures will eventually be stored in zone memory, but the
    current implementation allocates two temporary std::vectors for
    parameters and returns.
    This CL uses a SmallVector for parameters, and allocates the final zone
    memory as soon as we decoded the return count. This avoids copying the
    return types, and avoids dynamic memory allocation and deallocation for
    the parameters in the majority of cases (up to 8 parameters).
    
    R=manoskouk@chromium.org
    
    Bug: v8:14402
    Change-Id: Ieaccf95e89f2690a5429cf505a93d0c86d95368f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971834
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90564}

commit ff677d636080ca51ec3d94aff4e645400d32235c
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Oct 24 16:02:37 2023 +0200

    [wasm][turboshaft] Add well-known import StringIndexOf() to Turboshaft
    
    Bug: v8:14108
    Change-Id: I5ab5f22fa5cf525044b0cbcb0b6acd9578b14aca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4969392
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90563}

commit 9995f5816a42e396db51df35edb7103bf15a9691
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Oct 24 15:16:18 2023 +0200

    [wasm] Avoid std::vector in type canonicalization
    
    Each std::vector takes time to allocate and deallocate. This CL avoids
    them where possible, replacing them either by a base::SmallVector (for
    temporary storage) or by a zone-allocated vector for (potentially)
    long-lived objects.
    
    R=manoskouk@chromium.org
    
    Bug: v8:14402
    Change-Id: Ia7967a696a6abcf18be40ac1508006f7d39ed7e9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971835
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90562}

commit d42febd5f3d3d78048459c38fc813cb913c4d544
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Oct 24 14:19:28 2023 +0200

    [wasm][turboshaft] Remove redundant DecodeExternalPointer
    
    Before we used the MemoryOptimizationReducer in the wasm turboshaft
    pipeline we had to lower external pointer decoding manually.
    This isn't needed any more and can be simplified.
    
    Bug: v8:14108
    Change-Id: I4a3302c6b1664f6dd9938013186c698c0a14d419
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4968339
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90561}

commit 7f1aaf2a1c763c8aa1358ec8ed24f39bfa17b767
Author: pthier <pthier@chromium.org>
Date:   Tue Oct 24 13:28:22 2023 +0200

    [regexp] Fix stack check in native code when interrupt was requested
    
    When an interrupt was requested at the time we hit the stack check, the
    check to ensure we have enough space for local variables was skipped.
    
    Bug: chromium:1488199
    Change-Id: I95d82fe737420d2ef43c1ace35560cfd5860829b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971832
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Jakob Linke <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90560}

commit 928acbea49e22917bf77e813beb940ac59c8584c
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Oct 24 13:46:35 2023 +0200

    [fast-api-calls] Fall back to slow calls for kEnforceRange on 32 bit
    
    32 bit architectures don't support the necessary machine instructions
    required to compile FastApiCall operators that deopt on out of bounds
    arguments (when kEnforceRange) is set. As a quick solution we disable
    generation of fast calls if such an argument is present on 32 bit.
    
    Bug: chromium:1492786
    Change-Id: I35f20419b34b23621f7fa26366466c2b7deaf66d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971829
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90559}

commit a1775cda6e08b8a00913ed10318a9bebbdcf6d9f
Author: Eva Herencsarova <evih@chromium.org>
Date:   Tue Oct 24 13:52:31 2023 +0200

    [wasm][turboshaft] Add well-known import ParseFloat() to Turboshaft
    
    Bug: v8:14108
    Change-Id: If2afa85495ef02775942dab612e683298a77138f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4967415
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90558}

commit e8cd5d407864a3be213c65361b0e5ceb71c4bf89
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 23 14:56:20 2023 +0200

    [wasm][async] Avoid duplicate function validation
    
    In async compilation we would currently trigger validation of all
    functions twice. Even thought the second validation returns quickly
    because all functions are already marked as validated, this still
    creates overhead.
    This CL thus introduces another parameter to the
    `PrepareAndStartCompile` phase to pass whether the functions have
    already been validated.
    There are two entry paths through streaming compilation; in both,
    validation did not happen yet:
    1) During actual streaming compilation the bodies have not been received
       yet (hence there is nothing yet to validate).
    2) At a second run which is triggered on a cache miss after a prefix
       cache hit we also did not validate (this is the only path where
       validation is actually needed in the `PrepareAndStartCompile` phase).
    
    The entry from async compilation already finished validation though, and
    we should not trigger it again.
    
    R=ahaas@chromium.org
    
    Bug: v8:14402
    Change-Id: I44a7bb779546f26f0f2e27c40f11dd9fb9f0eeff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4966480
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90557}

commit 83586b8cc691cad87b8c9bfdaef0a3d84c155190
Author: Marja Hölttä <marja@chromium.org>
Date:   Tue Oct 24 13:31:28 2023 +0200

    [test] Disable a test w/ gc stress
    
    Maglev code points to weak objects and gets deopted when GC happens.
    
    Fixed: v8:14404
    Change-Id: Id179f9139e79ec1d10cb6d459645bdc36dae8209
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971833
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90556}

commit a068201f233f2fc77b9aee69ec4c465ae3190b7a
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Oct 23 08:18:51 2023 +0200

    [wasm][turboshaft] Load stack limit from the root register
    
    With this CL, Turboshaft uses the root register to load the stack limit
    in WebAssembly. The JavaScript stack check code gets slightly adjusted
    for code sharing with WebAssembly, the resulting machine code should be
    the same. The existing code relied on pointer arithmetic in the macro
    assembler to calculate the correct offset from the root register, the
    code in this CL embeds the correct offset directly into the Turboshaft
    graph.
    
    R=nicohartmann@chromium.org
    
    Bug: v8:14393
    Change-Id: Ib7d4c65935e1b0adfbce207cea675e9cc75c97d5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4962098
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90555}

commit dd81f0986abbbee9d3f609b71c29a862f5cc6e6a
Author: Andreas Haas <ahaas@chromium.org>
Date:   Tue Oct 24 12:28:26 2023 +0200

    Reland "[wasm][turboshaft] Loop unrolling"
    
    The original CL got reverted because Phis that resulted in
    LoadRootRegisterOps reached the instruction selector. Normally a
    LoadRootRegisterOp does not have a use in the instruction selector, and
    VisitLoadRootRegister does not get called. However, in VisitPhi all
    inputs get used, and therefore also the LoadRootRegisterOp.
    
    The problem could be solved on several levels:
    1) Remove the UNREACHABLE in VisitLoadRootRegister and replace it with a
       nop;
    2) Eliminate recursive structures of Phis whose input is always either a
       Phi from the same structure or a fixed value.
    3) Never create a Phi which has a LoadRootRegister as an input.
    
    This CL implements solution 3. Solution 1 may hide errors, solution 2
    may be a bit too complex for just this single problem. Solution 2 may
    eventually be worth it, but so far it only introduced compilation
    overhead and did not result in any benefits.
    
    Original change's description:
    > [wasm][turboshaft] Loop unrolling
    >
    > This CL enables the Turboshaft loop unrolling implementation for
    > WebAssembly. For WebAssembly, slightly higher limits seem to be useful,
    > and a different stack check is used. Otherwise the loop unrolling is
    > unchanged.
    
    Bug: v8:14108
    Change-Id: I5fe9c5370e815b0c5d2f8bbcc634cb506da3971e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4966484
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90554}

commit d92606c7bfebc1b9105672d3b7aae7e1e3fe4f69
Author: Hao Xu <hao.a.xu@intel.com>
Date:   Thu Oct 19 15:23:30 2023 +0800

    [maglev][turbofan] Support megamorphic keyed store
    
    Change-Id: I769134d52587110f5d9dedf51173e76c80150340
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4944896
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Hao A Xu <hao.a.xu@intel.com>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90553}

commit 2f202af1bff58b29c6cd48fa897c6f23a7bb5540
Author: Carl Smith <cffsmith@google.com>
Date:   Tue Oct 24 10:54:10 2023 +0200

    [fuzzing] Allow SetForceSlowPath for fuzzing
    
    This is occasionally used by Fuzzilli.
    
    Change-Id: I17ee1f6e747ef3ec63bc93db7502d45902fc857f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4968333
    Commit-Queue: Carl Smith <cffsmith@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90552}

commit ea669aa1ed61c9ff74b7093e78dcb0ad487a5a1a
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 23 12:36:30 2023 +0200

    [wasm] Re-use zone for validating functions
    
    Allocating memory for the zone, and destroying it again when the zone
    goes out of scope, show up with more than 20% of total validation time.
    
    This CL hence re-uses Zones across validations, but resets them
    in-between (which keeps the last allocated block, which is enough memory
    for most validations).
    
    For exceptional cases where we do not have a Zone in the caller already
    we just create one there.
    
    R=ahaas@chromium.org
    
    Bug: v8:14402
    Change-Id: I493ad5b0097cc9d0a18b0c1fecc905f176a0c794
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958778
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90551}

commit d0d5faa91017e850a9cde1fe3e0bfea34c902cc3
Author: Takuto Ikuta <tikuta@chromium.org>
Date:   Tue Oct 24 17:49:26 2023 +0900

    mb: replace use_goma with use_remoteexec
    
    This is preparation CL for https://crrev.com/c/4970657.
    
    Bug: b/306109834
    Change-Id: I6b89ef515f542762a1426087047c1d4489526bbd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4970736
    Commit-Queue: Takuto Ikuta <tikuta@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90550}

commit edd38bcf5af0d41a76d7a586a064a6f850252d21
Author: Jakob Linke <jgruber@chromium.org>
Date:   Tue Oct 24 09:20:03 2023 +0200

    Use atomic length accessor in PrimitiveArrayBase::AllocatedSize
    
    .. to avoid a race with the release-store during right-trimming.
    
    Fixed: v8:14389
    Change-Id: Ibb4ae20922d31236a86613b3012f0ca794f973fd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971272
    Auto-Submit: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90549}

commit c9abf785d8bd2ef37c5ab098b2c715cd0aee21ce
Author: Takuto Ikuta <tikuta@chromium.org>
Date:   Tue Oct 24 17:05:58 2023 +0900

    remove tmrts@chromium.org from INFRA_OWNERS
    
    This won't populate a Xoogler in gerrit reviewer suggestion.
    
    Change-Id: Ia0ea12927b398e9e7aab4d9a28772a68b35dc17b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4970735
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Takuto Ikuta <tikuta@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Takuto Ikuta <tikuta@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90548}

commit bc5ebd949c2dea946f4493942db460ecb56e0652
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Mon Oct 23 17:48:37 2023 +0200

    [fuzzing] Allow OptimizeMaglevOnNextCall for fuzzing
    
    Without adding this to the allow-list, https://crrev.com/c/4124118 was
    likely having no effect.
    
    Bug: v8:7700
    Change-Id: Idee1e44d42aea19b3388765c7ae666c743dd88c3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4967414
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Carl Smith <cffsmith@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90547}

commit 2b57d7343944af26a1f09caebd7efd87fd5d1430
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Oct 24 09:58:56 2023 +0200

    [heap] Fix DCEHCK in Heap::PageFlagsAreConsistent
    
    Heap::PageFlagsAreConsistent is checking that the marking bit on pages
    matches the heap's incremental marking state.
    With MinorMS concurrent marking, the marking bit is not set for pages in
    shared spaces, making the check fail.
    
    Bug: chromium:1495142
    Change-Id: Ib6078b82d14a709b0758459b21ef8514c17389f7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4971273
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90546}

commit 71a0906170c1bcffc5340deb8a0a94f665d26b79
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 23 17:32:28 2023 +0200

    [wasm] Eagerly compile js-to-wasm wrappers for asm.js
    
    The generic js-to-wasm wrapper does not support asm.js yet, so eagerly
    compile all export wrappers for asm.js.
    
    R=ahaas@chromium.org
    
    Bug: chromium:1494909
    Change-Id: Ibcf189080389d0a7e41326b7e119867c76fda2b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4967412
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90545}

commit 4a23778c08502515f0eaa774d3c57b60a62d5195
Author: Liviu Rau <liviurau@chromium.org>
Date:   Mon Oct 23 22:02:22 2023 +0200

    [test262] Roll test262
    
    https://chromium.googlesource.com/external/github.com/tc39/test262/+log/6789b50cce139af4ca819feb8ce3a9c77ba4098a..6396ebde0316639292530460d1ef961fd9bbe0d4
    
    Bug: v8:7834
    Change-Id: I298781e880ddc849e58fbfb8c4db4da977c306fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4962096
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Auto-Submit: Liviu Rau <liviurau@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90544}

commit e8b86141ebb94512f1826c93602d61f52d85f12d
Author: Benedikt Meurer <bmeurer@chromium.org>
Date:   Sat Oct 21 12:55:33 2023 +0200

    [inspector] Remove bogus breakpoint test.
    
    Fixed: chromium:1466072
    Change-Id: I8dee14af3bbe8eb5974e9e84267b86904d74e180
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4962420
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Auto-Submit: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90543}

commit d86a1bddecc8486fffbc54cdd5a450f975fa5a42
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Oct 23 21:04:08 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/ee3b50d..6a5969b
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/eb43f0d..9d8a076
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/10cd8e4..4358238
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/ceb8145..86aed39
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766385832800062273
    
    Change-Id: Ia482305fef422dcd7cc2386dbfced7438fc27467
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4970952
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90542}

commit 3c3f784245b06695c27eb5addcb62de21afcdc82
Author: Choongwoo Han <choongwoo.han@microsoft.com>
Date:   Fri Oct 20 12:17:20 2023 -0700

    [turbolizer] Audit npm packages
    
    Running `npm audit fix` to fix vulnerabilities in some packages.
    
    Change-Id: I647ae15abfb898850f8b96a2d6780f0ab4571f91
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4960093
    Commit-Queue: Choongwoo Han <choongwoo.han@microsoft.com>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90541}

commit 20d9bae7122eb8cf803ff03055b5e906ac1135f6
Author: Milad Fa <mfarazma@redhat.com>
Date:   Mon Oct 23 16:41:58 2023 +0000

    skip console-profile-wasm on unsupported platforms
    
    Generic wasm-to-js wrapper must be enabled before running
    this test.
    More details are available under https://crrev.com/c/4958714.
    
    Bug: v8:14402
    Change-Id: I1480bc69154d1cc094530f4cb5c078eee0be93b1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4967613
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90540}

commit e1ac01a555fb978c8267360ec37a9093289dec23
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Oct 23 09:09:39 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/c77f325..ee3b50d
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/81ea7a1..75a40ee
    
    Rolling v8/buildtools/linux64: git_revision:5d8727f3fbf420538ff753ebc3ce96da28e12c22..git_revision:e4702d7409069c4f12d45ea7b7f0890717ca3f4b
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/30b6ccb..eb43f0d
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/e1129fa..58c1757
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766431132219296449
    
    Change-Id: Ia79b40872160f658e0236f904872b4db1c12fb06
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4967752
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90539}

commit 77dd788c7a12a6172faee19a450f5db78a43b210
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Oct 23 16:03:30 2023 +0200

    [turboshaft] Call Next::Analyze() properly in load elimination
    
    Bug: v8:12783
    Change-Id: I5041b1fa65f7bb03cf498c961a57c50fa9e3dab2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4966840
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90538}

commit 2ee5eeb3cc7c6585f47a0c3d45ee78487ea841fb
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Oct 23 17:27:37 2023 +0200

    cppgc: Fix trait and add new helper traits
    
    - Fix trait to be usable with non-decayed types. Users generally want to
      check for Member on const qualified types and references.
    - Add IsMemberOrWeakMemberTypeV: This is a commonly used trait to check
      for types that require a write barrier.
    - Add IsAnyMemberTypeV: This is a commonly used trait to check for
      whether types should be accessed like Member.
    
    Bug: chromium:1492410
    Change-Id: I358a2aa02b1bfce8ed03652a7afe5c8ef7bd35c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4967413
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90537}

commit 202e60cacc8a45e7000fe615c7df15c7e6261835
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 23 12:16:08 2023 +0200

    [wasm][stringref] Disallow stringref on multi-memory modules
    
    The future of the stringref proposal is unclear, so instead of adding
    multi-memory support
    1) just disallow using stringref on any memory that's not memory 0, or
    2) disallow stringref opcodes on modules with more than one memory if
       a memory index is not available.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14261
    Change-Id: I2f0a454215462bdd943f3815b61150b16185b001
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4965422
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90536}

commit 1fb4a43ed4c63298884ef6340cfa9fb4dfc8f697
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 23 12:22:29 2023 +0200

    [wasm] Disallow fast API with multiple memories
    
    The fast API needs to be extended to work with multiple memories.
    Until we see a need for supporting this, just check that the fast API is
    only used on modules with not more than one memory.
    
    As a slight optimization, this CL also avoids loading the memory start
    and memory size for modules without any memory, and just uses a
    zero-constant instead.
    
    R=nicohartmann@chromium.org
    
    Bug: v8:14260
    Change-Id: I5b93bbaa3efaef483b17298358138cf6aac7f3fc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4965423
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90535}

commit e5e095891db7ed7b035a8d795c0ac0a3d97b111c
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Thu Oct 19 14:34:18 2023 +0200

    [wasm][gc] Remove dead code
    
    R=manoskouk@chromium.org
    
    Change-Id: I983652dd76bea0444fde3aa36d08d0a68c61366b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4955053
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90534}

commit 867afd43a0227a14aebab31489a330ee32488f88
Author: Eva Herencsarova <evih@google.com>
Date:   Mon Oct 23 10:29:05 2023 +0200

    [wasm][turboshaft] Add doubleToString and intToString well-known imports to Turboshaft
    
    Bug: v8:14108
    Change-Id: I8990697f49597a3775cb9b21f2cb8b45db86a42d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4959353
    Commit-Queue: Eva Herencsárová <evih@google.com>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90533}

commit b769f67d3f5c73b10edbbef5f9b3c5aebf1055b9
Author: Clemens Backes <clemensb@chromium.org>
Date:   Fri Oct 20 14:53:17 2023 +0200

    [wasm] Ignore import wrappers if generic wrapper enabled
    
    Just iterating all imports and checking if the generic wrapper can be
    used creates overhead. Avoid this if the generic wrapper is generally
    enabled. This makes the fast path faster, at the expense of potentially
    skipping compilation of import wrappers during compile time - they will
    then be compiled later at instantiation time (similarly to when a module
    is imported into a new isolate and that isolate does not have the import
    wrappers yet).
    
    As the goal is to be able to use import wrappers for the vast majority
    of cases, this should be an overall win.
    
    R=ahaas@chromium.org
    
    Bug: v8:14402
    Change-Id: I37cbcbfc673fffc78d8884cb8e2e788ae550f278
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958714
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90532}

commit 34df0e07d0b5eec915e26225cdca7f6a80a98207
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Oct 23 11:47:44 2023 +0200

    Revert "Reland "[turboshaft] Basic pipeline for builtins""
    
    This reverts commit ca6879e6a1773728e4d1846cb638fdd3d5cb9918.
    
    Reason for revert: Crashes of the initial revert appeared again...
    
    Original change's description:
    > Reland "[turboshaft] Basic pipeline for builtins"
    >
    > This reverts commit 4590eccb026224eb7f5ee748f80dcc4e4fa94557.
    >
    > Bug: v8:12783
    > Change-Id: I7b25bfd6a1a962e0c251a6847204e9b0cbd3d952
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952332
    > Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90466}
    
    Bug: v8:12783
    Change-Id: I2a5fc01f6624fcf3884f8e0b47508cf0a11fa59b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4965420
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90531}

commit a665791e5122c6759079aba9895eb06c8b274430
Author: Simon Zünd <szuend@chromium.org>
Date:   Mon Oct 23 08:27:55 2023 +0000

    [inspector] Properly store/restore maxScriptsCacheSize in debugger agent
    
    R=bmeurer@chromium.org
    
    Fixed: chromium:1494157
    Change-Id: I544b7af1c74ffacf812e0bc10a8fd5d347f5bae4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4964300
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90530}

commit 6231be7c3c086c2c01c974c31364e50d4d7ad54d
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 23 10:30:58 2023 +0200

    [wasm] Avoid overhead for generic js-to-wasm wrapper
    
    Do not generate a {JSToWasmWrapperCompilationUnit} for exports which
    will use the generic wrapper. Instead, use the generic wrapper code
    directly.
    
    This in particular avoids overhead for spawning tasks to handle the
    js-to-wasm compilation units which then return immediately.
    
    R=ahaas@chromium.org
    
    Bug: chromium:1471853, v8:14402
    Change-Id: I7fd30fbe268f4b1e82924c0929a050fbff6a5e85
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4955535
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90529}

commit dd659aaee2ea9938bdf37c64aff7aca55f8254c4
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Wed Oct 18 20:48:40 2023 +0200

    [handles] Use more direct handles in the API
    
    This CL converts many handles to direct handles in src/api/api.cc.
    In fact, it converts all the easy cases with no external dependencies.
    Such changes are only visible when conservative stack scanning and
    direct handles are enabled. For production, this change has no impact.
    
    The CL also attempts to sanitize the use of handles in src/api/api.cc,
    e.g., using more "auto" when the type of the handle can be easily
    deduced (when using Open[Direct]Handle, or [Direct]Handle::cast).
    
    Bug: v8:13270
    Change-Id: I17be682d384c5c90d5b8adfdf228bbb3c72db454
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952336
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90528}

commit 1f026e2919bd4c5177a70ddda4e2c20a75f6500b
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Oct 23 14:58:22 2023 +0800

    [riscv][wasm][liftoff] Use root register for stack checks
    
    Change-Id: Ic87bf01fdda02da8128aaa2377aa087ccb63b380
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4961064
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90527}

commit 5cf4ebca7dcce5c0ce9179a712045f661fb4093b
Author: Benedikt Meurer <bmeurer@chromium.org>
Date:   Fri Oct 20 15:17:24 2023 +0200

    [inspector] Mark %GetPrivateMember as side effect free.
    
    With https://crrev.com/c/4020267 a new %GetPrivateMember intrinsic was
    introduced that is being used by debug-evaluate to access private fields
    even outside of their class scope. However this intrinsic wasn't
    properly marked as side-effect free so far, which prevents DevTools from
    generating a preview and computing autocompletion values.
    
    Bug: chromium:1494348, chromium:1381806
    Change-Id: I3a9d334df39353dc381b132e6f4073c199ed3907
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958344
    Auto-Submit: Benedikt Meurer <bmeurer@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90526}

commit 796df8d15843bad10c4eca08cd38dcd3c27075bb
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Oct 22 21:06:14 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/b49c84d..10cd8e4
    
    Rolling v8/third_party/fuchsia-sdk/sdk: version:15.20231015.1.1..version:15.20231022.3.1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766476431948962817
    
    Change-Id: I4444f2f88a668d3ea0da76ef8643895e3dc91ce5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4963401
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90525}

commit 08dbda3617ad0e78cb777267fa40b2f11368d72b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Oct 22 09:15:43 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/ff4b8d7..c77f325
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/430fa97..81ea7a1
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/79348d1..e1129fa
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766521728594579665
    
    Change-Id: I46cdd295fc34efa2bd2bdf830f3563e21f7d2630
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4963400
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90524}

commit 2465184635ae2c2237ea13afe3bb395eae7f94bd
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Oct 20 21:06:42 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/a9c462b..ff4b8d7
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/5660ea0..430fa97
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/1b8f00c..30b6ccb
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/ce4aac9..b49c84d
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/6433a1d..79348d1
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/7a1763f..5acf60c
    
    Rolling v8/third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/b0671f6..dfc48fc
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766657623095031201
    
    Change-Id: I4de74f8d71cd7a05974d61460e931901ab4d9953
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4960996
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90523}

commit 24a064af1e004b7b154eb7016511a2b449e2ab0f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Oct 20 09:16:36 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/4aeae86..a9c462b
    
    Rolling v8/buildtools/linux64: git_revision:182a6eb05d15cc76d2302f7928fdb4f645d52c53..git_revision:5d8727f3fbf420538ff753ebc3ce96da28e12c22
    
    Rolling v8/third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/fef5869..b0671f6
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766702912940026353
    
    Change-Id: Ib1f07fbcf3911f3d07f72403048e16a7f8f89bd7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958936
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90522}

commit 3509554952d382190091b85b2331da874e026a21
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Oct 20 16:32:53 2023 +0200

    [turboshaft] Make side-table graph-generation-aware
    
    It's fairly easy to accidentally mix input-graph and output-graph
    OpIndices. This CL makes GrowingSideTable and FixedSideTable
    generation-aware in order to prevent accidentally using an input
    (resp. output) graph OpIndex to look into a SideTable that should be
    accessed with output (resp. input) graph OpIndices.
    
    Bug: v8:12783
    Change-Id: I6af2e8f38c440ccb9d2969b0a22e7e7ee4681d92
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4932250
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90521}

commit 370049cea306b2b45b8bbc566d691e35ea33fbbe
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Oct 20 16:27:07 2023 +0200

    [turboshaft] Use complex addressing to decompress some loads
    
    Bug: v8:12783
    Change-Id: Id6cbc9c5ca61d583ac060ed6ced450cafd4319c1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952092
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90520}

commit 9cd63ca66e7a9d15cf8ab14860a6c612e718079c
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Oct 20 16:26:34 2023 +0200

    [turboshaft] Fix FrameState handling in graph builder
    
    Bug: v8:12783, v8:14400
    Change-Id: I771433c02e75bfb44599804b5748f0e26d7ad257
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958615
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90519}

commit 7259f112212a792275fb25fdbdc18603720acbb7
Author: Darius M <dmercadier@chromium.org>
Date:   Thu Oct 19 09:53:02 2023 +0200

    [turboshaft] Fix loop unrolling bug when we loop for falsy conditions
    
    LoopUnrollingReducer assumed so far that we are always looping if the
    loop's condition is true, except that in some cases we loop instead if
    it is false.
    
    Fixed: chromium:1493383
    Bug: v8:12783
    Change-Id: I3f27e4ab926fb197891700cf194af0d94c6ffd25
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952154
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90518}

commit f43c235a8758295385ca39be63d1319296f169be
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Oct 19 21:06:07 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/d1c8d9f..4aeae86
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/f2b9d05..5660ea0
    
    Rolling v8/buildtools/reclient: re_client_version:0.116.1.9128bc4-gomaip..re_client_version:0.117.1.21520c6-gomaip
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/f496845..1b8f00c
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/8f761f5..ce4aac9
    
    Rolling v8/third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/55ab36f..3f588d7
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/8d4b8a6..6433a1d
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/cbc5f2b..7a1763f
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/1e1a321..ceb8145
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766748215671075121
    
    Change-Id: Iedeb4601cabc1238ee59543a0f95fc59d8fa49fb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4957256
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90517}

commit fa44f3d67dcc8291ea97eb194acefa40aed73a72
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Oct 20 13:20:15 2023 +0200

    [object] Make the non-JS oddball markers into holes
    
    All the marker oddballs (uninitialized value, optimized out, etc.),
    fulfil a role closer to "hole" than to "oddball", in that they are not
    expected to escape into user code. Most places that check for oddballs
    are only really checking for the user-visible oddballs (null, undefined,
    true and false), and it's both more elegant and more secure to be
    explicit about caring about JS oddballs vs. internal markers.
    
    This requires a few typer test changes, since the uninitialized value is
    now a hole and therefore not a singleton as far as the typer is
    concerned.
    
    Change-Id: I191fc89b3a2e6407e6cb2156ac0d7c24b7947894
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952095
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Stephen Röttger <sroettger@google.com>
    Reviewed-by: Carl Smith <cffsmith@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90516}

commit a62f302dd6d236fb5dfca7aa6f495c7e2807a012
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Oct 20 12:45:31 2023 +0200

    [heap] Align use of threads between V8's GC and CppHeap
    
    The two values for whether background threads should be used could
    diverge which results in bailouts for concurrenct marking
    finalization. The end result is a CHECK failure in the marking
    destructor where we see a non-finalized marker.
    
    Drive-by:
    - Rename InitializeTracing() -> InitializeMarking() and move into
      MCC::StartMarking(), this is similar to MinorMMC::StartMarking()
    - Rename StartTracing() -> StartMarking()
    
    Change-Id: I8150611f5e3d2e406932ac6e21329871a9302bb6
    Bug: chromium:1478926
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958340
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90515}

commit 847a2551feec46b5ada43e7dc42e8682c00061cc
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Fri Oct 20 13:51:42 2023 +0200

    [ubsan] Fix memcpy in mul-fft.cc
    
    Another case of casting to void* where we intentionally use memcpy
    as a safe way to access unaligned data.
    
    Bug: chromium:1494286
    Change-Id: Ia53c91175b7d9cbb2623fe71fed3573e9a486dd1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958343
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90514}

commit b89f34647ac255c020d300a46b92e0e9670b1a8a
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Oct 20 11:07:36 2023 +0000

    [sandbox] Rename counter for trusted pointers
    
    Instead of V8.TrustedPointersCount it should be called
    V8.SandboxedTrustedPointersCount to be consistent with the other
    counters for pointers in the various pointer tables.
    
    Bug: chromium:1473677
    Change-Id: I667b98375e13791db67983b28edcd9cc9ce99a83
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958342
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90513}

commit a51a0682b826c430cb873ded16151a9f596f57e8
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Oct 20 13:01:56 2023 +0200

    [turboshaft] Fix branch hints in StructuralOptimizationReducer
    
    BranchHints were incorrectly in StructuralOptimizationReducer (see the
    comment added in the CL).
    
    Drive-by: adding missing LIKELY annotation in the lowering of StringAt
    (the graph produced during this lowering eventually gets optimized
    into a switch bt StructuralOptimizationReducer)
    
    Fixing this improves performance of base64-SP by ~5% on my laptop.
    
    Bug: v8:12783
    Change-Id: Ie421d9c5b7c47a5dd5486f7afce725d11a2c8249
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958341
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90512}

commit cf90d078a517e1c79145b1e9b1bac47f4de8c162
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Oct 20 10:52:07 2023 +0000

    [sandbox] Shrink the code pointer table reservation size
    
    According to our statistics, we never require more than 1M entries in
    the code pointer table, so shrink its reservation size to 16MB.
    
    Bug: chromium:1395058
    Change-Id: Ifc34399a6712854effef49957540246cd1a82a59
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958616
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90511}

commit f04e30beef7529060aad5d63550482aae57f405c
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Oct 20 08:33:10 2023 +0000

    [sandbox] Rename XyzMaybeIndirectPointer functions
    
    These were previously used to handle fields that either contain an
    indirect pointer (when the sandbox is enabled) or a tagged pointer
    (otherwise). However, the naming schema is somewhat confusing.
    
    Instead, we now replace them with XyzCodePointer and XyzTrustedPointer
    since code/trusted pointers are defined to be pointers to Code/Trusted
    objects that are implemented as indirect pointers (when the sandbox is
    on) or tagged pointers (otherwise).
    
    Bug: chromium:1473677
    Change-Id: I44697e47c6b3f2f57093488ea7bdd411607afe2e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4957136
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90510}

commit 8c9034a6f53a4fcce0653c107210bf4d434f1e9b
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Oct 20 08:20:11 2023 +0000

    [sandbox] Rename IndirectPointerTable to TrustedPointerTable
    
    To be consistent with the other pointer tables (ExternalPointerTable and
    CodePointerTable), the table should be called TrustedPointerTable since
    it contains pointers to trusted objects.
    
    Bug: chromium:1473677
    Change-Id: I38b53c5c2416fc7dc5b85b10d6ad2d1496d512a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952124
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90509}

commit 53915a8806afd7e769e8fe9b0188b636e36828c8
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Fri Oct 20 10:51:46 2023 +0200

    [api] Fix bug in MemoryMeasurement
    
    This CL fixes a bug in MemoryMeasurement::ReportResults that was
    introduced in https://crrev.com/c/4877014. This method was not
    working correctly when the array of contexts contained cleared
    elements.
    
    Bug: chromium:1454114
    Bug: chromium:1494164
    Change-Id: Ibeaf614ebefdd3b7e1383066ddf0a28a33daa12d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958613
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90508}

commit 8eca93b139f651303daa9407112ca26e65cb101e
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Oct 20 11:08:37 2023 +0200

    [fast-api-call] Cast memcpy argument to void* to satisfy UBSan
    
    Bug: chromium:1494286
    Change-Id: I06eb1aeb3ab10ebbcda7043cd79c8257e37d7739
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958614
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90507}

commit 4ee749c094ed596cfb787d26069ead4840029797
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 19 18:05:22 2023 +0200

    [wasm] Skip a test in predictable mode
    
    R=machenbach@chromium.org
    
    Bug: v8:14397
    Change-Id: Iadcabbdc2b21d4ef0b6d4d45dd8c1ae73a1248f5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4955533
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90506}

commit 6deba7da09740d5f495396946a5a93b0a3399652
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Oct 19 17:19:39 2023 +0200

    [turbofan] Properly detach length tracking RABs in keys()
    
    Bug: v8:11111, chromium:1464437
    Change-Id: I4e5b50c58d22c70e8c4a321a45520e9ce025302d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4955056
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90505}

commit ae8e13db745e26f29e458d511670eb6bf9601255
Author: Liu Yu <liuyu@loongson.cn>
Date:   Fri Oct 20 14:44:44 2023 +0800

    [loong64][mips64][wasm][liftoff] Use root register for stack checks
    
    Port commit 1ad00840445dbae3dab17e568597db620253a08f
    
    Bug: v8:14393
    Change-Id: Icea0b11c45d8018fa97d84af28585263858a0eef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4958436
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Auto-Submit: Liu Yu <liuyu@loongson.cn>
    Reviewed-by: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#90504}

commit ff435419de7027854f3339aead2a9165e4e9f1af
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Oct 19 19:20:57 2023 +0200

    [heap] Get flags for MainAllocator setup from AllocatorPolicy
    
    Flags can be loaded from the AllocatorPolicy instead of passing
    them manually.
    
    Bug: chromium:1480975
    Change-Id: I984fc2a56fa7d20a0b1d83b55b0b3a7fcc81c9db
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952155
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90503}

commit 1fbd008a40d8d751b58937cb821285400309cd13
Author: Milad Fa <mfarazma@redhat.com>
Date:   Thu Oct 19 13:59:11 2023 +0000

    PPC/s390: [wasm][liftoff] Use root register for stack checks
    
    Port 1ad00840445dbae3dab17e568597db620253a08f
    
    Original Commit Message:
    
        With this CL, Liftoff loads the stack limit with the root register and
        not from the WebAssembly instance. The offset of the stack limit from
        the isolate root is added to IsolateData, since Liftoff does not have
        access to the isolate to reuse the way how JavaScript calculates the
        offset.
    
    R=ahaas@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: I0ead9f76dd95f573caba133c914bc5c875132986
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4951984
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90502}

commit f7d000a7ae7b731805338338eb51a81fbcfe2628
Author: Luke Albao <lukealbao@gmail.com>
Date:   Wed Oct 18 22:49:09 2023 -0700

    [logging] Bugfix: LinuxPerfBasicLogger should log JS functions
    
    This patch fixes a typo that was introduced in commit
    c51041f45400928cd64fbc8f389c0dd0dd15f82f /
    https://chromium-review.googlesource.com/c/v8/v8/+/2336793, which reversed the behavior of the perf_basic_prof_only_functions flag.
    
    This also refactors the equivalent guard in LinuxPerfJitLogger to use the same inline CodeKind API for identifying JS Functions. This is unrelated to the bug, but it seems a fair rider to add on here.
    
    Bug: v8:14387
    Change-Id: I25766b0d45f4c65dfec5ae01e094a1ed94111054
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4954225
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90501}

commit 8dc1f58dfe39d997c8e6422fd9e156d1d7bf0b78
Author: Eva Herencsarova <evih@google.com>
Date:   Thu Oct 19 17:57:08 2023 +0200

    [wasm][turboshaft] Add remaining DataView getters and setters to Turboshaft
    
    Bug: v8:14108
    Change-Id: Ia968abd312389ad198359b243cae42562d24bd01
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4935416
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@google.com>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90500}

commit 29f56071454ba0a2f728d80cd721ccfc7ca2c511
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Oct 19 10:01:58 2023 +0200

    [heap] Remove MainAllocator pointer from SpaceWithLinearArea
    
    The allocator is only used in DCHECKs anymore. We can move the
    DCHECKs into the callers and remove the allocator_ field in
    SpaceWithLinearArea.
    
    Bug: chromium:1480975
    Change-Id: Ifc07b78eb62086c66995b55d1ffa514038cec017
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952338
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90499}

commit 1dca94340e4f573a27c9f13bb0b81a4f2ccea373
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Oct 19 09:06:50 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/third_party/fuchsia-gn-sdk: https://chromium.googlesource.com/chromium/src/third_party/fuchsia-gn-sdk/+log/d1e0ff4..55ab36f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766793518556425185
    
    Change-Id: I17577d2ad52966c8f9e7589a739d9af400e90132
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4954920
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90498}

commit c7feb2cc1656bc5ecaacf082bb1651da5959077c
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Oct 19 17:18:13 2023 +0200

    [turboshaft] Setup basic frontend (SimplifiedLoweringPhase)
    
    Bug: v8:12783
    Change-Id: I200196e1fca0e0924657dccf13ab43f67425bd39
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4948070
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90497}

commit a80b09d2b93dfe3d8521bbcc50a451b7f2a52a34
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Oct 19 15:01:17 2023 +0200

    [arm64] Fix switch table emission
    
    Prevent veneer pools from being emitted in the middle of jump tables.
    
    Fixed: chromium:1486630
    Change-Id: Iebc273e9519c0ea692b9cc064ca6636b96d2acda
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4955054
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90496}

commit 79c1593a7b48ca435b1e6df01d42fded3433096c
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Oct 19 14:42:46 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Propagate types on phi operations
    
    This CL excludes phis in loop headers as they require revisiting the
    loop body and making sure to visit blocks in the "right" order.
    (See https://crrev.com/c/4919173)
    
    Bug: v8:14108
    Change-Id: I43224527ebdbc8af68c478b88e53de4ad7530e19
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922910
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90495}

commit 1ad00840445dbae3dab17e568597db620253a08f
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Oct 19 13:48:14 2023 +0200

    [wasm][liftoff] Use root register for stack checks
    
    With this CL, Liftoff loads the stack limit with the root register and
    not from the WebAssembly instance. The offset of the stack limit from
    the isolate root is added to IsolateData, since Liftoff does not have
    access to the isolate to reuse the way how JavaScript calculates the
    offset.
    
    R=clemensb@chromium.org, jgruber@chromium.org
    
    Bug: v8:14393
    Change-Id: I89e80ba8b38f14fef685fcd68ebeee368d9c8e29
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952153
    Reviewed-by: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90494}

commit 8acc197095ca744d9fd37fc219a659a9947a0328
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 19 12:49:53 2023 +0200

    [futex] Micro-optimize wait list insertion / removal
    
    1) Optimize adding a node to the wait list:
       In the case that there is no one waiting on an address yet (which is
       the common case) we would first try to find an entry in the map, and
       then insert the entry. As insertion already checks if the entry is
       there, and returns an iterator to the existing entry if so, we can
       skip the initial lookup and just try to insert.
    
    2) Optimize removing a node from the wait list:
       The most common case is that only a single thread is waiting on a
       location; in that case we can just remove the node from the wait list
       and be done.
       On heavily contended locks we could have both a successor and a
       predecessor node; in that case we just remove our node from the
       doubly linked list without any lookup in the map.
       Only the third case (we have either a predecessor or a successor, but
       not both) needs the lookup and updates to the head or tail pointer.
    
    R=marja@chromium.org
    CC=dlehmann@chromium.org
    
    Bug: v8:14101
    Change-Id: I052aaa6966117a044bea84dace1d0fd834579fc7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952339
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90493}

commit eb3c20f18f8e8a79f19a6db0c4163839f1e932fe
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Oct 19 13:08:14 2023 +0200

    [test] Add process-memory probe and track consumption
    
    This adds a probing mechanism for tests executed on desktop platforms.
    The probe tracks memory statistics with psutil. The results are
    added to the resultsdb entry and the json test results.
    For the json test results, only the top 20 tests are tracked,
    similar to duration.
    
    When running locally or when psutil is not available, the probe will
    just stay inactive. There is no significant overhead when probing
    every 0.2 seconds. Very fast tests will show 0 results.
    
    Similar to test duration, we can use the information from the json
    to list the top memory-hungry tests, which are not yet marked
    as HEAVY in the status file.
    
    Such a listing will be implemented as a follow up on the infra side.
    
    Bug: v8:14373
    Change-Id: Ief162d5ef88bdd7792a953505feeb5a8f1e4fe94
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946490
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90492}

commit 219504cdb9737ed9b23818f9453e55ccf10e50b8
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Oct 19 12:28:58 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Optimize struct.new
    
    This applies similar optimizations to struct.new as done for array.new
    in https://crrev.com/c/4916652.
    
    Bug: v8:14108
    Change-Id: Id92911830ae9d218b53de66266b38aa41fb02e4f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952159
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90491}

commit 23434dd36c139f1db1b51df76d55725a9243af3b
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Thu Oct 19 12:48:43 2023 +0200

    [bigint] Fix type requirements for modern UBSan
    
    For context, see internal bug b/306184514.
    This patch makes the code compatible with
    https://github.com/llvm/llvm-project/commit/792674400f6f04a074a3827349ed0e2ac10067f6
    
    Change-Id: I99296d4b6ed73fcbdbbdf759b6fb25b2edea2571
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952122
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90490}

commit 25632481a5cce912cde47816c8e609837d93ad93
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 19 12:14:53 2023 +0200

    Fix missing argument on error message
    
    This fixes a first instance where an argument was passed to a template
    message, but none was expected.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14386
    Change-Id: I5dbaeaa75351e491271888f220d6851c412e6e87
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946854
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90489}

commit fb03d6b977104faf48a90c4134744d61d75813fb
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Oct 17 13:38:30 2023 +0200

    [api] Deprecate vector<v8::Local>, part 2
    
    According to V8's public API documentation, local handles (i.e.,
    objects of type v8::Local<T>) "should never be allocated on the heap".
    This disallows heap-allocated data structures containing instances of
    v8::Local, like std::vector<v8::Local<v8::String>>. It is unfortunate
    that the V8 API itself requires the usage of such data structures.
    
    This CL continues the deprecation of such data structures from V8's
    public API:
    
    1. It replaces the out parameter of type std::vector<Local<Object>> of
       Context::DeepFreezeDelegate::FreezeEmbedderObjectAndGetChildren
       with a LocalVector<Object>.
    2. It replaces the std::vector<std::pair<Local<Context>, size_t>> of
       MeasureMemoryDelegate with two MemorySpan objects.
    
    Bug: chromium:1454114
    Change-Id: Ifa7634a37849dee0a3d80d00355a2f1fbfe378ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4877014
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90488}

commit 391189d607d44f85509fedcfb1f0aaa0086360db
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Oct 19 11:45:56 2023 +0200

    [debug] Fix a broken corner case in TemporaryObjectTracker
    
    If there was no region found with a start address >= the object
    we are looking for, we ended up dereferencing the end iterator.
    
    Bug: v8:14391
    Change-Id: I362f91b0befca84af7f1be41e04dac45b9213b2b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952096
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90487}

commit 404c801c0c629d4c0ac64addce968099f9d2f4ae
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Thu Oct 19 09:22:14 2023 +0000

    Revert "[maglev] Inline Regexp.prototype.test"
    
    This reverts commit 4523897d8965ece4a44792235965489c740402a7.
    
    Reason for revert: Likely cause of crashes in https://bugs.chromium.org/p/chromium/issues/detail?id=1493967
    
    Original change's description:
    > [maglev] Inline Regexp.prototype.test
    >
    > SP2 calls Regexp.test to escape characters. Here, we inline
    > some checks in order to call immediately a faster builtin,
    > similar to TF.
    >
    > Bug: v8:7700
    > Change-Id: Ica9e7c9904cc745e50090532cb3f076f554800e1
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946032
    > Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    > Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    > Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    > Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90451}
    
    Bug: v8:7700
    Change-Id: Ie95f1bfea4201b24283d097103106e8ef20f48cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952158
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90486}

commit b5207316352f27aec5c053a62f2f8d7aa53ec389
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Thu Oct 19 10:49:24 2023 +0200

    [turboshaft][wasm] Allow multiple inlined functions per call_ref
    
    Bug: v8:14108
    Change-Id: Ifb58f24b7495a25ea64b1338d74a4f731106e584
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952331
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90485}

commit 2a7a75536e1d4229a5b47990776dd71e4332ab69
Author: Omer Katz <omerkatz@chromium.org>
Date:   Tue Oct 17 18:42:02 2023 +0200

    [heap] Fix DCHECK for pausing MinorMS concurrent marking
    
    If concurrent marking for MinorMS is paused, the pretenuring feedback
    will not be empty. I don't think we should merge and clear it on
    puasing.
    
    Bug: v8:13012
    Change-Id: I81c94b9269c37a5b32306595da0a7943e73bd80b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4948071
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90484}

commit 3414eaaec2586c4afeba7e481fed2379128a1dfd
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 19 10:52:18 2023 +0200

    Allow mismatched arguments for one more template
    
    Follow-up to https://crrev.com/c/4946850 after ClusterFuzz found one
    more (see linked bug).
    
    R=jkummerow@chromium.org
    
    Bug: v8:14386, chromium:1493718
    Change-Id: I763c68e18df76427ee291828f124d01ae484bcb1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952157
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90483}

commit 91e4b2727ea0fe1642b410d4aecc46bc60bcff78
Author: Jakob Linke <jgruber@chromium.org>
Date:   Wed Oct 18 07:20:25 2023 +0200

    [regexp] Fix invalid DCHECK in RegExpMatchInfo ctor
    
    Fixed: v8:14388
    Change-Id: I87057d1e55737327522ce620ca0729a8879f19db
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952090
    Auto-Submit: Jakob Linke <jgruber@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90482}

commit 5eb3653be03ab86b6483740a3930e6071833d8bc
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Oct 17 13:05:08 2023 +0200

    [handles] Fix LocalVector iterator
    
    The current implementation of LocalVector::iterator exhibits UB when
    the iterator is not dereferenceable. This CL fixes it, by introducing
    a class template internal::WrapperIterator, which allows the safe
    conversion between a wrapper iterator type and the underlying iterator
    type, upon dereferencing.
    
    Bug: v8:13257
    Bug: v8:13270
    Bug: chromium:1454114
    Change-Id: If253d9f4838f7286d65cd86b8ee83d6c1c6bf077
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942235
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90481}

commit 8005bd282bf1565a11cae24a9811e99f8b3fc64b
Author: Darius M <dmercadier@chromium.org>
Date:   Thu Oct 19 08:26:49 2023 +0200

    [turboshaft] Make some MachineOptimization reductions GVN-dependent
    
    Bug: v8:12783
    Change-Id: Idd791ec26bb9b22e56da3cc45d5b3da040c16953
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942596
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90480}

commit cb9bdcf313ee57338a520cceaa8901ef004fbf6b
Author: Jakob Linke <jgruber@chromium.org>
Date:   Tue Oct 17 13:44:55 2023 +0200

    Support right-trimming for all TaggedArrayBase subtypes
    
    Drive-by: Rename 'Shrink' to 'RightTrim' to clarify that this
    operation changes the current heap object (instead of returning
    a copy).
    Drive-by: Resolve the FixedArray::Shape/ShapeT naming TODO.
    Drive-by: Rename HashTable::Shape to TodoShapeT to resolve naming
    conflicts. HashTable shapes and TaggedArrayBase shapes should be
    merged.
    
    Bug: v8:14345
    Change-Id: I13c464c15272377451c4ad486f0169d98078ee7f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946030
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90479}

commit 09cad784aa220339b73b5eca876d89318067d172
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Oct 18 21:17:21 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/ea53f71..d1c8d9f
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/28e95cc..f2b9d05
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/b9ebadd..f496845
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/406be82..8f761f5
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/2f6750b..8d4b8a6
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/db9800c..cbc5f2b
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/22e1594..1e1a321
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766838819006592801
    
    Change-Id: I3ce9c6a7e4a750e831a7a08edc9c6be6fe2468ae
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4953438
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90478}

commit 5838e9ec291b3c0020d75e5da2f441e7822955c8
Author: Milad Fa <mfarazma@redhat.com>
Date:   Wed Oct 18 16:20:36 2023 +0000

    PPC: merge Simd replace_lane opcodes
    
    This CL uses LaneSizeField to marge replace_lane opcodes which
    saves 4 opcodes.
    
    Change-Id: Ib6fbe486553a919f1ec8cc3080049d205d3588d2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4953095
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90477}

commit 864a70f71d975c1d33324ecac0e21596742b3581
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Oct 17 17:02:20 2023 +0200

    [heap] Move SemiSpaceNewSpace LAB-related methods into MainAllocator
    
    Move the LAB-related methods of that space into MainAllocator, like
    we did for PagedNewSpace and PagedSpace.
    
    Bug: chromium:1480975
    Change-Id: I639b47839f34b966a1d313ed02edc309bf1f59dc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946491
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90476}

commit 765d59cb0265b1c117878c3b791a8d7f1305806f
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Oct 18 14:09:34 2023 +0200

    [heap] Remove allocator access in PagedSpaceForNewSpace::Available()
    
    Including the main thread LAB in Available() isn't required in
    almost all use cases as during GC there isn't a new space LAB
    anyways.
    
    The statistics extension was using Available() with an existing
    LAB. In that scenario we can free main thread LABs, which should
    also make the counters for the other spaces more precise.
    
    Bug: chromium:1480975
    Change-Id: I721108e21558007ba1409fc8416c357ebb73d1d2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952333
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90475}

commit bb2ac8991c64601be9852d88c22abac2d6a6c39b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Oct 18 09:06:17 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/792bdb2..ea53f71
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/2c4320e..28e95cc
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/ae615e1..a391ecb
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/c0b8fc6..b9ebadd
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/73b69b0..406be82
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/0a31206..2f6750b
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/7b1593d..11d9f3e
    
    Rolling v8/tools/luci-go: git_revision:589d8654cfa7808816a6ecb4284ed2fd72c2f6d5..git_revision:924cfd2323a9192361b765f81fffc135026c1fee
    
    Rolling v8/tools/luci-go: git_revision:589d8654cfa7808816a6ecb4284ed2fd72c2f6d5..git_revision:924cfd2323a9192361b765f81fffc135026c1fee
    
    Roll created at https://cr-buildbucket.appspot.com/build/8766884117743119489
    
    Change-Id: I2e60463598b7db843e8a0d72eaa81c6eb6b87384
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4953094
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90474}

commit 12d2793efad1038c93e79d8f72189d3103bfab7a
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Wed Oct 18 09:58:13 2023 +0200

    [turboshaft][wasm] Improve inlining heuristics
    
    Align it with Turbofan's existing heuristics.
    
    Bug: v8:14108
    Change-Id: I474cfe004f96c19a8b8f99fd848e76c61cc94d8c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952330
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90473}

commit 007e23fb1c0be97cbbb9a883da73b1730a6778e0
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Oct 18 12:56:54 2023 +0200

    Refactor argument passing for templated messages
    
    Pass a vector of arguments instead of a fixed number, where some are
    either null handles or undefined, and in the end we use "undefined" for
    missing arguments and ignore any additional ones.
    
    This will allow us to check that the number of provided arguments
    matches what the template string expects.
    
    For now, we have an allowlist of templates where we currently do not
    pass the expected number of arguments. Follow-up CLs will successively
    shrink that list until the fallback code can finally be removed.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14386
    Cq-Include-Trybots: luci.chromium.try:linux-rel
    Change-Id: I4b23c09b9c3dd28e53cce882eb5c5367bcdc81f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946850
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90472}

commit fb4ea37da62524ed3a9be8819c3465815767d138
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Oct 18 13:13:40 2023 +0200

    [heap] Fix Scavenger regression due to MinorMS field trial
    
    Add a neg-neg implication from minor_ms to separate_gc_phases so that
    disabled minor_ms via js-flags would also disable separate_gc_phases.
    
    At this point, separate_gc_phases is enabled iff minor_ms  is enabled,
    so we could drop the extra flag, but it's kept around because checking
    the minor_ms flag instead would make the code less readable (i.e.
    separate_gc_phases is better documentation).
    
    Bug: v8:12612
    Change-Id: I8189440326997a9b9622660c67f9a0c60b3aa6dc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952093
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90471}

commit 0ebc957267cbecc4c1d5b49174d414b998731c27
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Oct 10 19:57:13 2023 +0200

    [liftoff][x64] Avoid redundant movl
    
    In Liftoff, 32 bit values are always zero-extended when held in a 64-bit
    register. Thus `emit_u32_to_uintptr` can skip the `movl` if `src` and
    `dst` are the same register. Note that the same optimization already
    existed in the `kExprI64UConvertI32` case in `emit_type_conversion`,
    hence we merge the two implementations (even though it's only two
    lines).
    
    R=dlehmann@chromium.org
    
    Bug: v8:14101
    Change-Id: I00cccf7dbbdec385e69ebc86729d967bdd426759
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4927748
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90470}

commit b3f0f0259ac981c2e6cf834cccc9e62053f4ed92
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Wed Oct 18 11:54:40 2023 +0200

    [wasm-imported-strings] Throw errors when importing with bad types
    
    When attempting to import or call the string builtins with array types
    that don't meet the "one-element recgroup" requirement, we should not
    only disable the optimization but also throw an error.
    
    Bug: v8:14179
    Change-Id: I0e3086b46b6b2cc2f53eb10460cb3dc8523b3351
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946853
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90469}

commit 2beee8b59c5dd5db5242966a60a2b6b70243e584
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Oct 18 09:08:01 2023 +0000

    [sandbox] Fix missing include in external-pointer-table.h
    
    We're now using a std::vector, so we should include <vector> as well.
    
    Bug: chromium:1459413
    Change-Id: I227a8bc2507d9489ee5f8eadbb18393c18dfbeb1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952334
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90468}

commit 31db7b0dd0215784fb154ee96eda754b2ead75a6
Author: Carl Smith <cffsmith@google.com>
Date:   Tue Oct 10 13:41:25 2023 +0200

    [turbofan] Prevent creation of unexpected Hole constant nodes
    
    Prevent creation of Hole constant nodes during Turbofan graph creation
    in places where we don't expect them.
    
    Bug: chromium:1486789
    Change-Id: Iff09a22b9d32a65fc4ebcfd80b6913a822e3101e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4892848
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Carl Smith <cffsmith@google.com>
    Cr-Commit-Position: refs/heads/main@{#90467}

commit ca6879e6a1773728e4d1846cb638fdd3d5cb9918
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Oct 18 10:06:20 2023 +0200

    Reland "[turboshaft] Basic pipeline for builtins"
    
    This reverts commit 4590eccb026224eb7f5ee748f80dcc4e4fa94557.
    
    Bug: v8:12783
    Change-Id: I7b25bfd6a1a962e0c251a6847204e9b0cbd3d952
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952332
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90466}

commit d4e89107b3c2ae7c75f4361dd136c010e0d5b070
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Oct 18 10:06:03 2023 +0200

    [heap] Ignore current LAB in SemiSpaceNewSpace::Size
    
    This method is mostly used during GC where we anyways don't have
    a LAB in new space. Other use cases are in the allocation slow path
    where it shouldn't change much since the LAB is already too small
    for the current object.
    
    Drive-by: Also remove the LAB access in
    PagedSpaceForNewSpace::AllocatedSinceLastGC() and
    PagedSpaceForNewSpace::Verify(). There is never a LAB set up when
    invoking these methods.
    
    Bug: chromium:1480975
    Change-Id: I5ef0fa782fbd65ab19ee37cd1e74d5b027bc2ff4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946715
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90465}

commit 91e7e7c67b72c6e3ccaf5c88a9f66283d615de44
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Oct 18 09:29:52 2023 +0200

    [turboshaft] Improve lowering of AllocateOp
    
    Previously, for non-folded allocations, the LAB limit was loaded in a
    block and used for a comparison in the next one. This was preventing it
    from being folded in the Comparison/Branch in the next block (because
    CanCover doesn't allow covering effectful operations for different
    blocks; and fixing this would be tricky since such a covering would
    only be valid if there are no Writes in between the Load and its use)
    
    Bug: v8:12783
    Change-Id: Ibd42cfe9e3aed33ac10a9e44327a3c54fb9d71df
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952091
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90464}

commit f558df1f42e8f2fa05f45dc3ddccc433b6ef17f2
Author: Simon Zünd <szuend@chromium.org>
Date:   Wed Oct 18 06:12:01 2023 +0000

    [inspector] Replace CHECK with protocol error
    
    We shouldn't crash the inspector if a client provides a wrong value for
    'mode' for "restartFrame".
    
    R=bmeurer@chromium.org
    
    Fixed: chromium:1493510
    Change-Id: I358d6e63ae9768fb3434b6509cd5d605203784f7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4952150
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Auto-Submit: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Benedikt Meurer <bmeurer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90463}

commit 12fb48b0d2305a868ee20fa9d9f91847bee45c2e
Author: Christopher Nady <nady.christopher@gmail.com>
Date:   Fri Oct 13 23:27:53 2023 +0000

    Fix a couple of typos in comments in `v8/src/codegen/assembler.h`
    
    Change-Id: I420b2b5f33c902a36a46f409c2095263db728e91
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4939367
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Reviewed-by: Jakob Linke <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90462}

commit 5f5766047c5298e76e53944c47d4964fdff06eb0
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Oct 18 09:23:18 2023 +0800

    [riscv] Sign extend in JumpIfEqual
    
    Change-Id: I42a6677cf25c1913b5928b7db5f6991e60845b19
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4945656
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90461}

commit 3c0bc6fba1d6b1eecb537c642490434548a5633a
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Tue Oct 17 18:51:31 2023 +0000

    Revert "Reapply "heap: Optimize rwlock in the ConcurrentMarkingVisitor""
    
    This reverts commit 65d207aa5399a065c97945ff0c1406f2fb1c6b6a.
    
    Reason for revert: Several roll failures on the latest roll: https://chromium-review.googlesource.com/c/chromium/src/+/4948292?tab=checks, Example: https://ci.chromium.org/ui/p/chromium/builders/try/linux-chromeos-rel/b8766973061353565473/test-results?q=ExactID%3Aninja%3A%2F%2Fchrome%2Ftest%3Abrowser_tests%2FExtensionSidePanelBrowserTest.ToggleExtensionEntryOnUserAction+VHash%3A368ed50ce3ddf623&clean=&sortby=&groupby=
    
    Original change's description:
    > Reapply "heap: Optimize rwlock in the ConcurrentMarkingVisitor"
    >
    > The failing dcheck was fixed in
    > https://chromium-review.googlesource.com/c/v8/v8/+/4942199.
    >
    > Original change's description:
    > > heap: Optimize rwlock in the ConcurrentMarkingVisitor
    > >
    > > The visitor acquires the rwlock when visiting strings. On some workloads
    > > (e.g. Splay) the rwlocking, even uncontended, can be quite expensive.
    > > The CL optimizes it by checking in the concurrent marker whether any
    > > unsafe transition occurred and pausing+notifying the marker upon
    > > transitioning.
    > >
    > > Bug: v8:14158
    > > Change-Id: Ia8ac205822be910968ca487f47dbda9f83b4c328
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936651
    > > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90402}
    >
    > Bug: v8:14158
    > Change-Id: I4f2d086868b11e35436517df3de0a279fd5c7d0d
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4945693
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90447}
    
    Bug: v8:14158
    Change-Id: I1346d0e018f01425c16d193fedfc47a71f09bc78
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4949490
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Deepti Gandluri <gdeepti@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90460}

commit a65f33129547169cb531728a50c33c6613e91526
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Oct 17 16:00:33 2023 +0200

    [handles] Fix v8::Local::New for null direct locals
    
    In the build with direct locals enabled , creating a new local handle
    requires a check whether the handle is null.
    
    Bug: v8:13270
    Change-Id: I68978d0ca6820f0af4dfab5388fb6070ff6dda3d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946851
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90459}

commit c7a55f9b0b6e65509f62b400f24111b3db0fdbe4
Author: Jeroen Bobbeldijk <jerbob92@gmail.com>
Date:   Tue Oct 17 16:26:55 2023 +0200

    Fix ReadELFHWCaps method for ARM(64) builds on old/non glibc versions
    
    Fixed: v8:14381
    Change-Id: I7299e47a62e699a7be073006018c080008e283bc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946852
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90458}

commit 63405a66d43737599afec36381a9b0bb13dbb484
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Oct 17 11:40:49 2023 +0200

    [turboshaft][wasm] Speculative inlining
    
    For each call_ref call site, if the call site is marked as inlinable,
    introduce a speculative inlined direct call at that site. This does
    not yet introduce multiple inlined direct calls.
    Drive-by: Change the signature of `InlineWasmCall` and handle null
    `InliningTree` in `should_inline`.
    
    Bug: v8:14108
    Change-Id: I3b42f25ca2c1a297842230a3e85d3e141e1b8c45
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946031
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90457}

commit e6def48a5f2bc02e7e9339abff9c984beb1e1b44
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 16 17:05:22 2023 +0200

    [wasm][multi-memory][test] Test inspectability
    
    This adds a test for inspectability of multiple memories when paused on
    a breakpoint in Wasm.
    
    R=thibaudm@chromium.org
    
    Bug: v8:13918
    Change-Id: Ia8312e6079a4a29eaa54a167ca7036bd5bdba398
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4941918
    Reviewed-by: Thibaud Michaud <thibaudm@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90456}

commit 9a30cee3e882bc84004e6cda9d2810aba9af22c2
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Oct 17 14:27:06 2023 +0200

    [heap] Remove UpdateInlineAllocationLimit() methods
    
    Adding allocation observers may decrease the number of bytes to the
    next allocation step. This means that we need to shrink the current
    LABs in order to run the allocation observer when required. This
    logic is implemented by UpdateInlineAllocationLimit().
    
    However, if there exists no LAB this method becomes a no-op. This CL
    ensures that at any time we add an allocation observer to
    MainAllocator, there is no active LAB. With this invariant we
    can get rid of UpdateInlineAllocationLimit().
    
    In order to achieve this in production code, the CL only needs to free
    all LABs at a GC. GCs are infrequent enough that this shouldn't hurt
    performance.
    
    The other downside of this CL is, that allocation observers can't
    add allocation observers in an allocation observer step anymore.
    However, we currently don't use this and if this use case ever comes
    up, we can likely implement this logic with a single allocation
    observer and some state as well.
    
    Allocation observer can still remove themselves in an allocation
    step. This is something we actually use and removing an allocation
    observer can only increase step size. So it should be safe even
    without adjusting LAB sizes.
    
    Bug: chromium:1480975
    Change-Id: I41489ef70ed8c63808d53885ec9a458e67fd0f9f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4938832
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90455}

commit dc3bb77771866812ce20c96482f7da83ad15830b
Author: Carl Smith <cffsmith@google.com>
Date:   Tue Oct 17 13:53:40 2023 +0200

    [fuzzing] Avoid duplicate coverage initialization
    
    Previously the initialization code would be called multiple times on
    macOS, we now return early if we initialize them with the same values
    or bail out with an error if we try to initialize them with different values.
    
    Change-Id: I2b9bd9bf63f0eb709d5e58b03461f79000091080
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946470
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Carl Smith <cffsmith@google.com>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90454}

commit f43e43047c8e85669a9f6b666521363c08fe6b42
Author: Jakob Linke <jgruber@chromium.org>
Date:   Tue Oct 17 11:08:52 2023 +0200

    Reduce boilerplate needed for heap object type defs
    
    New types have to be added in a bunch of spots that are scattered
    all over the codebase. Worse, these spots are only exposed by
    repeated compile-error-edit loops and finding/fixing them all
    is painful.
    
    This CL fixes this painpoint by adding ONE spot in which
    'simple' types have to be added, namely in object-list-macros.h
    Macro-list magic then automatically appends to all relevant places
    in the codebase:
    
    - large-spaces.cc for the list of types that may be in LO spaces
    - objects-visiting.h for visitor function defs
    - map.h to define VisitorId entries
    - map.cc to associate types with visitor ids
    - objects-body-descriptors-inl.h to associate instance types
      with body descriptors
    
    Drive-by: replace the IsFunction predicate with the clearer
    IsJSFunctionOrBoundFunctionOrWrappedFunction and remove the
    artificial Function type definition.
    
    Drive-by: remove the manual forward-declarations in
    object-list-macros.h. For heap object types, we auto-generate
    forward-declarations. Other types should be forward-declared
    manually as needed.
    
    Bug: v8:14345
    Change-Id: Id52be94ee7f53414576dc8c84b82865569a2933a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4932245
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Auto-Submit: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90453}

commit 3165d84b480b1bacbe3ca30e9a5b221c90849cb3
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Oct 17 13:21:04 2023 +0200

    [debug] Fix TemporaryObjectTracker to handle allocation folding
    
    Change-Id: Iffcc19d9348e63631d8bd007f42a1c1385e2cbca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936679
    Reviewed-by: Yang Guo <yangguo@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90452}

commit 4523897d8965ece4a44792235965489c740402a7
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Tue Oct 17 12:36:18 2023 +0200

    [maglev] Inline Regexp.prototype.test
    
    SP2 calls Regexp.test to escape characters. Here, we inline
    some checks in order to call immediately a faster builtin,
    similar to TF.
    
    Bug: v8:7700
    Change-Id: Ica9e7c9904cc745e50090532cb3f076f554800e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4946032
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90451}

commit 5c40ceb7b69a29ac39355ce33d054ded2bc0a929
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Mon Oct 16 14:16:57 2023 +0200

    Remove a signature check during new WebAssembly.Function construction
    
    According to the recent change in the proposal, any JS callable passed
    to the `new WebAssembly.Function` constructor should be heandled in the
    same way. It means when `WasmExportedFunction` is rewrapped with a
    different signature it should always succeed.
    
    When such rewrapped function is called arguments converted from Wasm to JS
    values according to an outer signature and converted to Wasm values again
    by an inner wrapper.
    
    Bug: v8:7742
    Change-Id: I1030c4d93f7b1049cc79419ef2a9d5bd399c9a8e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942592
    Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90450}

commit 7412d216af83b8b7d5a8b8b2fd69c55e11bbf43c
Author: Marja Hölttä <marja@chromium.org>
Date:   Tue Oct 17 11:27:13 2023 +0200

    [baseline] Add a comment about a common cause of a DCHECK failure
    
    Change-Id: I02f105dfc1acbfa685d78559ae9bcfaac7eed720
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4945950
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90449}

commit 6b928e8e125909fc955d1ebb1a2633c29d169994
Author: Darius M <dmercadier@chromium.org>
Date:   Tue Oct 17 10:52:41 2023 +0200

    [turboshaft] Optimize Branch((a >> k1) & k2) to Branch(a & (k2 << k1))
    
    Bug: v8:12783
    Change-Id: Ibed7abfb6f8c7abb3a9669317f972ec0b34d2c4b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942234
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90448}

commit 65d207aa5399a065c97945ff0c1406f2fb1c6b6a
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Tue Oct 17 10:37:38 2023 +0200

    Reapply "heap: Optimize rwlock in the ConcurrentMarkingVisitor"
    
    The failing dcheck was fixed in
    https://chromium-review.googlesource.com/c/v8/v8/+/4942199.
    
    Original change's description:
    > heap: Optimize rwlock in the ConcurrentMarkingVisitor
    >
    > The visitor acquires the rwlock when visiting strings. On some workloads
    > (e.g. Splay) the rwlocking, even uncontended, can be quite expensive.
    > The CL optimizes it by checking in the concurrent marker whether any
    > unsafe transition occurred and pausing+notifying the marker upon
    > transitioning.
    >
    > Bug: v8:14158
    > Change-Id: Ia8ac205822be910968ca487f47dbda9f83b4c328
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936651
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90402}
    
    Bug: v8:14158
    Change-Id: I4f2d086868b11e35436517df3de0a279fd5c7d0d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4945693
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90447}

commit 0b27ba17dc3f65cd20219e807025cb8e65ddbc2a
Author: Aapo Alasuutari <aapo.alasuutari@gmail.com>
Date:   Tue Oct 17 00:27:17 2023 +0300

    Always set backing store's start pointer to ArrayBuffer on Attach
    
    Bug: v8:13488
    Change-Id: I29671a4d94de2f7f165fd1c22dcd49d711f08237
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4896678
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90446}

commit 4a7664f9cf13a69cda5fac31fcebb8fa56af814d
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Tue Oct 17 10:44:40 2023 +0200

    [turboshaft][wasm] Inlining heuristics
    
    We implement inlining heuristics based on a data structure called
    InliningTree, which represents the tree of function calls starting at
    the initial function under compilation. Calls are prioritized for
    inlining based on their score, depending on their size in wire bytes
    and their call count in the collected feedback. Only direct calls are handled for now.
    This CL improves J2Wasm benchmarks in Turboshaft by around 13%.
    
    Bug: v8:14108
    Change-Id: Ib195cd324935037114f54306a12dbe76eec72239
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4938834
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90445}

commit 809a6a7e194edffdb901420494fd3b2287c4f83e
Author: Jakob Linke <jgruber@chromium.org>
Date:   Tue Oct 17 10:13:40 2023 +0200

    Port ClassBoilerplate to use a Struct underneath
    
    .. instead of the FixedArray backing store.
    
    Bug: v8:14345
    Change-Id: Ie0594b9673b9bfc7352762129a88ac7e1d34e4fe
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4933680
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Jakob Linke <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90444}

commit a5a9d6b9f8c74c7dcdbafd0d3128fb1a535dff3c
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Tue Oct 17 09:22:07 2023 +0200

    heap: Fix dcheck in concurrent minor-ms marker
    
    The concurrent minor-ms marker can be stopped when incremental marking
    for the shared-space isolate is requested. Reinit the minor marking
    state only when new collection is requested.
    
    Bug: chromium:1492235
    Change-Id: I9b1dcbcd5b8d4952ee385dfbaa26196c6b15551c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942199
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90443}

commit 6997977ead6b6085dd1359585dbfaba1d7b433e0
Author: Hao Xu <hao.a.xu@intel.com>
Date:   Thu Oct 12 23:18:53 2023 +0800

    [builtins] Remove unnecessary parameter in StoreIC_NoFeedback's
    InterfaceDescriptor
    
    Drive-by: Fix creation of TaggedIndexConstant node.
    
    Change-Id: I7d21a3fd014a7d8482b26a77dc0ab88e88b2cd7e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4933763
    Commit-Queue: Hao A Xu <hao.a.xu@intel.com>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90442}

commit caedcef225b438dfa8a81c0f2242f64409a26aff
Author: Fanchen Kong <fanchen.kong@intel.com>
Date:   Sat Oct 14 05:30:08 2023 +0800

    [turbofan] Avoid inlining Math.[min|max].apply on holey arrays
    
    With this change Math.[min|max].apply will not be inlined when arguments_list has HOLEY_DOUBLE_ELEMENTS. This fixes the bug where the reducer ignores the prototype should be initial.
    
    Bug: chromium:1491915
    Change-Id: I8a7e5e0f6511b339387e97ed5d90b2ae72b3f138
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4937585
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Fanchen Kong <fanchen.kong@intel.com>
    Cr-Commit-Position: refs/heads/main@{#90441}

commit 59caf6f6b442e68c22dc5f629ad83127b35a4fe9
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Mon Oct 16 17:57:53 2023 +0000

    [array-from-async] Pass context instead of loading
    
    This CL passes context to a function instead of
    loading it from base.
    
    Bug: v8:13321, chromium:1492391
    Change-Id: I3e1a4d302ad5d638de26b086c802065098622e00
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4939006
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90440}

commit f39402d16756932cbf60138d758ae23986691a00
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Mon Oct 16 11:01:54 2023 +0200

    [turboshaft][wasm] Only register valid exceptions when inlining
    
    If the assembler is in a state where it generates unreachable
    operations, we should not register generated invalid exceptions into
    `return_exception_phis_`.
    
    Bug: v8:14108, chromium:1492772
    Change-Id: I583572571c354f98be67e00c1e1ffd0dd5f6a205
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4939220
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90439}

commit 75b94a35329036588f20724e6d4efa75532e9458
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Oct 16 09:06:03 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/eb1dd1f..792bdb2
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767065311270878545
    
    Change-Id: I49a8884fb5751ca070839bc9ed0c2dd7a41d3a44
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942338
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90438}

commit 8f7077abc068b07ddbc74b24a1a951a69b39fee4
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Oct 16 16:08:59 2023 +0200

    [turboshaft] Reland some of the changes reverted
    
    Bug: v8:12783
    Change-Id: I6b51dd4335c97da264866da1d0e42b44ab8a47bb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942597
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90437}

commit a9e0b4c823f273b762a2db9a5aaa368a78a792be
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Oct 13 10:03:28 2023 +0200

    [turboshaft] Eliminate more branches in BranchElimination
    
    Bug: v8:12783
    Change-Id: I7ad236b981b6e205a9d86c501b4f54e381acc98d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936650
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90436}

commit bf7d91ade4908529a6c7ebd18c650b9e8b19647b
Author: Carl Smith <cffsmith@google.com>
Date:   Thu Oct 12 17:14:06 2023 +0200

    [fuzzing] Add hole fuzzing support
    
    Introduce a new runtime flag that enables us to do Hole Fuzzing.
    Specifically we need to exit cleanly on CHECK failures and continue
    execution on DCHECK failures.
    
    Bug: chromium:1491386
    Change-Id: Iff92a92f6c74d787bc3188e9e1c7097a2ac5f810
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922344
    Commit-Queue: Carl Smith <cffsmith@google.com>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90435}

commit 74414b0abcd77f9987c48f2e5098a2f8a79bf49e
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 16 15:05:28 2023 +0200

    Reland "[wasm] Use C-call for atomic.notify"
    
    This is a reland of commit ced5c65e7ef6b1b903075799a849ab0071673935.
    
    PS2 uses the pinned set instead of passing an empty set (d'oh!).
    
    Original change's description:
    > [wasm] Use C-call for atomic.notify
    >
    > There is no need to call a runtime function via the CEntry stub. The
    > method does not allocate or otherwise trigger GC, and its only arguments
    > are the wait location and the number of workers to wake.
    >
    > Thus this CL implements this via a direct C-call.
    >
    > R=dlehmann@chromium.org, marja@chromium.org
    >
    > Bug: v8:14101
    > Change-Id: I5063dc7c5b82b6efea60811bf5155adaa498edcf
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4898689
    > Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    > Reviewed-by: Marja Hölttä <marja@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90392}
    
    Bug: v8:14101
    Change-Id: I50a29b9188447478e9008fe2e3fbb535eac76ce8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942230
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90434}

commit f7e8104e5634d4adc7642ee1f0423a03f64fa1ee
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Oct 16 14:19:27 2023 +0000

    [sandbox] Invalidate external pointer slots when objects change layout
    
    Similar to recorded slots, we also need to invalidate external pointer
    slots when a heap object is in-place converted to a different object
    type. The reason is that during external pointer table compaction, we
    record the addresses of external pointer slots that hold entries that
    should be evacuated during sweeping. However, if the object owning that
    entry turns into a different type of object between marking and
    sweeping, then we'll see an invalid external pointer handle and might
    crash when trying to dereference it.
    
    Bug: chromium:1459413
    Change-Id: I49192a019f458dca1f65747ebd0dc0114ce1d0da
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942593
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90433}

commit 7bc9d6781b0db88b60612ace8ce4773594594598
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Oct 16 16:11:55 2023 +0200

    [maglev] Fix for recursive inlining in builtin
    
    The feedback must be preserved when we recursively inline in
    TryBuildFastInstanceOf.
    
    Bug: chromium:1491656
    Change-Id: Ifce820d3602a37966b8192239aa35596c7da30d6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942233
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90432}

commit 62ab6e1c3b68b908dbf566cbeaeb606d48a2bc98
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 16 15:00:39 2023 +0200

    [liftoff] Add more (scoped) code comments
    
    This made debugging for https://crrev.com/c/4942230 a lot easier.
    
    R=ahaas@chromium.org
    
    Change-Id: I005fc69c10fd44bf84a0ff982ef92fed189caa75
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942595
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90431}

commit 678cb91620f28e8653f68f4669ed330222ca68f6
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Oct 16 15:31:56 2023 +0200

    [compiler] Add a protector for undetectable
    
    Avoid needing to dereference the map in ToBoolean checks, by installing
    a protector which guards against undetectable objects (aside from null
    and undefined) ever being created.
    
    In practice, this means checking whether document.all is ever
    initialised, which is not the case for ~70-80% of page views according
    to https://chromestatus.com/metrics/feature/timeline/popularity/83 at
    the time of writing.
    
    Change-Id: I2605c35ff5914dfc312b8326204eb361953fbbe0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936370
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90430}

commit a765ae0d4200b6bc084eefbc59ab1350a437796d
Author: Choongwoo Han <choongwoo.han@microsoft.com>
Date:   Mon Oct 9 11:12:31 2023 -0700

    [maglev] Move retained maps collections to the background thread.
    
    For maglev, collect retained maps in the background thread if
    `maglev_build_code_on_background` is enabled.
    
    Bug: chromium:1485367, chromium:1487620
    Change-Id: Ie993b11c27f95e125a96abeb7b618dc234259bde
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4908825
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Choongwoo Han <choongwoo.han@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#90429}

commit 8b22d69d575fdf2396fadfb5a7c36314c02a6e05
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 12 16:04:05 2023 +0200

    [API] Deprecate v8::TypedArray::kMaxLength
    
    Different typed arrays can have different maximum lengths (depending on
    the element size), so the field was renamed to kMaxByteLength to avoid
    confusion.
    This CL deprecates the old name.
    
    Chromium switched to the new name in https://crrev.com/c/4925373.
    
    R=leszeks@chromium.org
    
    Bug: v8:4153
    Change-Id: I1a38efd3718f0bf2ddc6281a3961d38932673c3a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4935412
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90428}

commit 96adcd58266b099367d001a15d00cb3b3c6d9147
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Mon Oct 16 13:43:27 2023 +0200

    Revert "[maps] Create map transitions for derived maps with custom proto"
    
    This reverts commit 9b5b6ee98ed2b2797b4eb42997b8c723b052bb16.
    
    Reason for revert: crbug:1492212
    
    Original change's description:
    > [maps] Create map transitions for derived maps with custom proto
    >
    > Prevents us from creating excessive maps in the case of e.g.,
    > Reflect.construct with a newTarget.
    >
    > Measured impact on top 10k websites is an average of 1% reduction in
    > map allocations.
    >
    > Bug: v8:13978
    > Change-Id: I324389f0febfa47a3a179ccdb30029723278ba5e
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4750265
    > Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    > Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    > Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#89520}
    
    Bug: v8:13978
    Change-Id: I833f6d167e6afe2fe7a6dd4019c83032644d0069
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942590
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90427}

commit 8bafba6dd9d9c99e0735fa56248704676c9221d5
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Mon Oct 16 13:51:52 2023 +0200

    [heap] Export MainAllocator::MakeLinearAllocationAreaIterable
    
    This method is used in unittests/inner-pointer-resolution-unittest/
    UnusedRegularYoungPages and needs to be exported to avoid a linker
    error.
    
    Bug: chromium:1480975
    Change-Id: Ib2b3b392d919de841706162ce3e699534fbfd97d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942232
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90426}

commit d96706ff869dd8c3868d340f83d56f0eb9f70bb1
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Mon Oct 16 13:48:21 2023 +0200

    Revert "heap: Optimize rwlock in the ConcurrentMarkingVisitor"
    
    This reverts the commit (and the other one that removes the dcheck).
    Reason for revert: failing bot
    https://ci.chromium.org/ui/p/chromium/builders/try/linux-lacros-rel/1081155/test-results?sortby=&groupby=
    
    Original change's description:
    > heap: Optimize rwlock in the ConcurrentMarkingVisitor
    >
    > The visitor acquires the rwlock when visiting strings. On some workloads
    > (e.g. Splay) the rwlocking, even uncontended, can be quite expensive.
    > The CL optimizes it by checking in the concurrent marker whether any
    > unsafe transition occurred and pausing+notifying the marker upon
    > transitioning.
    >
    > Bug: v8:14158
    > Change-Id: Ia8ac205822be910968ca487f47dbda9f83b4c328
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936651
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90402}
    
    Bug: v8:14158
    Change-Id: Ia408c324f274c53f0110384154d3aab8364b6491
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4942591
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90425}

commit de0d157c42c1d3243ca1058afed4efd697c250cd
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Fri Oct 13 14:21:46 2023 +0200

    [compiler/roots] Optimize ToBoolean/IsString with static roots
    
    Arrange the initial read-only heap layout so that it starts with the
    following objects in the following order:
    
      - Undefined value
      - Null value
      - Empty string
      - False value
      - True value
      - /String maps
        \...
      - Symbol map
      - Meta-map
      - Undefined map
      - Null map
      - Boolean map
    
    This is so that:
      1. The falsy values are the first in the space, allowing ToBoolean
         false checks to be a single less-than.
      2. The true value is immediately after the falsy values, so that we
         can use a single compare's condition flags to check both falsy and
         true.
      3. The string maps are all together, and are the first maps, allowing
         them to be checked with a single less-than if we know we have a
         map.
      4. The symbol map is with the string maps, for similarly fast Name
         checks.
    
    Additionally, extend the TurboShaft MachineLoweringReducer, Maglev, and
    the CodeStubAssembler to take advantage of this layout.
    
    Using -inl.h headers in the MachineLoweringReducer necessitates it
    moving to an -inl.h file.
    
    Change-Id: I79c7948b3faa8c67f76bf141dd05af3333ba4ed9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4935990
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90424}

commit 6c503bfef8a433570eaf7d7a8312b53317de9020
Author: pthier <pthier@chromium.org>
Date:   Mon Oct 16 10:15:39 2023 +0200

    [csa] Defer forwarding index block in TryToName
    
    Bug: chromium:1492476
    Change-Id: I0765592a9389d1d9f53714dc343a286d2d50e688
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4938841
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90423}

commit 927d4f9edf3a10206f32ab0f397e01a2c810c3bf
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Oct 13 13:51:27 2023 +0200

    [test] Use GetSpaceRemainingOnCurrentPageForTesting()
    
    Use the method provided by the space.
    
    Bug: chromium:1480975
    Change-Id: I9859bef1ba869912299525c26feb57def3eba538
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936676
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90422}

commit 29df6c824820f4586e0f5ea7dff1f76108fd2e9f
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Oct 16 09:11:56 2023 +0200

    [objects] Force heavier inlining of Tagged and IsFoo
    
    Both Tagged and the instance type checking of IsFoo rely in inlining to
    optimize away the call overhead (and, in the case of IsFoo, optimize
    away the lookup of instance types in the unique map array).
    
    Reduce the risk of getting bad optimisations from inlining heuristics
    misfiring, by forcing the inlining of trivial Tagged operations, and
    using constexpr magic for static-root-based IsFoo checks.
    
    A previous version of this patch tried to also force this inlining in
    debug mode, but this caused stack size issues, so this patch doesn't
    attempt this.
    
    Change-Id: I2b030f1e1bbd1468fa96b47f2f3699d0422575cf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936678
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90421}

commit d5250314d96574ffeada2602f3a982e9040eec3c
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Oct 13 15:10:46 2023 +0000

    [sandbox] Ensure EPT evacuation entries are always resolved during GC
    
    After crrev.com/c/4898680 we may now bail out from
    ResolveEvacuationEntryDuringSweeping if the external pointer slot has
    been deinitialized in the meantime. However, in that case we must clear
    the evacuation entry (for example by adding it to the freelist) as we
    would otherwise try to process it again during the next GC, by which
    time the address stored in the evacuation entry may no longer be valid
    as the underlying object may have been freed or moved.
    
    Bug: chromium:1492019
    Change-Id: I8b1484a6645668052c310e0dae79141b5f4ee17c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4938835
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90420}

commit 2013fa667d35d4aa46c01d9806cf2d72caad9f25
Author: Andreas Haas <ahaas@chromium.org>
Date:   Mon Oct 16 09:25:33 2023 +0200

    [wasm] Parameterize the MachineOptimizationReducer for signalling NaN
    
    This allows better code reuse for wasm.
    
    Bug: v8:14108
    Change-Id: Ic81700c4a6768b6703144e081cec2f405399718d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4938839
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90419}

commit a41530a4b39c36f8c70f7216e093d8f14c5e8942
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Oct 10 19:34:52 2023 +0200

    [wasm] Add use counter for module compilation
    
    In addition to the feature-specific use counters, this adds a use
    counter that is incremented for every compiled module. This will allow
    us to better estimate the percentage of modules that have certain
    features enabled.
    
    Since setting a single use counter has some overhead (like creating a
    HandleScope) we also change the API to allow to set multiple use
    counters at once.
    
    R=mlippautz@chromium.org, jkummerow@chromium.org
    
    Change-Id: I69afa2bbec8fe8bed1ee1037fec39ec5f773a04b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4926709
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90418}

commit 961f4b1aeadf9660979f656375e079b810baa1c9
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Oct 13 12:51:03 2023 +0200

    [heap] Handle pending allocations uniformly across all spaces
    
    There seems to be no reason why we would handle LABs in
    PublishPendingAllocations() and MarkLabStartInitialized() differently.
    
    Bug: chromium:1480975
    Change-Id: I37e56b0b93c332631c296cdd2a6b25f1b0854394
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936674
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90417}

commit e4161bafc61d0e3825ff1764073d56310e782892
Author: Liviu Rau <liviurau@chromium.org>
Date:   Mon Oct 16 10:24:41 2023 +0200

    Prepare to replace s/is_on_release_branch/v8_is_on_release_branch
    
    We only introduce the new name and use it internally in conjunction with old name: since the default value is false, an explicit set to true on any of them should look like both were set to true.
    
    Next we will update the name in Chromium configs (example: https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/tools/mb/mb_config.pyl?q=is_on_release_branch)
    
    Bug: chromium:1476977
    Change-Id: I6ce11b32ebc62aea804a053b9c153b0e42291186
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4939219
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90416}

commit 248b3bb7808e0f7f890cbac54c7c7371172ab11b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Oct 15 09:04:17 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/36ee7af..eb1dd1f
    
    Rolling v8/third_party/fuchsia-sdk/sdk: version:15.20231007.2.1..version:15.20231015.1.1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767155908345097169
    
    Change-Id: Iaeb5801ceb475e474f15ae876067cc3f42778cf1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4940877
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90415}

commit 85d05ed2bc0225f43f65aca1ddc4dab0432e45d7
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Oct 14 21:09:06 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/1fba737..2c4320e
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/418adb1..0a31206
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767201203985363217
    
    Change-Id: I4ae7ea2a0c6d763a8be9568dbf6303880d7f47de
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4940833
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90414}

commit 6af938dca05ce8357f3b541ac935a32972e164e7
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Oct 13 21:07:28 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/de602e0..36ee7af
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/d43434c..1fba737
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/a4060bf..c0b8fc6
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/a51863b..73b69b0
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/bbce3eb..418adb1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767291802667656593
    
    Change-Id: I42c47879305c990c5385fe27837c542c930ef704
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4939560
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90413}

commit c94c49b637d96f6355435afbf4482c8e5148579e
Author: Frank Tang <ftang@chromium.org>
Date:   Thu Oct 12 11:03:20 2023 -0700

    [intl] Fix the order of *.Digits in NumberFormat.resolvedOptions()
    
    Fix test262/intl402/NumberFormat/prototype/resolvedOptions/return-keys-order-default
    
    Bug: v8:14315
    Change-Id: I57394b94c6b8216041f16cab038819b79a3fd9f0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4863702
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Frank Tang <ftang@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90412}

commit 36016d198ba55a80d0d847fcb3eb7c94ee37bcb7
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Fri Oct 13 23:10:33 2023 +0200

    heap: Fix ConcurrentMarking::PauseScope
    
    The PauseScope can now be used during MinorMS's concurrent marking.
    The CL fixes the DCHECK in the dtor.
    
    Bug: v8:14158
    Change-Id: I01ae116e6461baf457dd6d7e762447ee997b3b29
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4938837
    Reviewed-by: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90411}

commit 1f087c1a894a1405cdada0627524faef2db12722
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Fri Oct 13 15:31:00 2023 +0200

    Reapply "heap: Optimize rwlock in the ConcurrentMarkingVisitor"
    
    This relands the commit and removes the DCHECK(!minor_ms) from the
    concurrent marking pause scope.
    
    Original change's description:
    > heap: Optimize rwlock in the ConcurrentMarkingVisitor
    >
    > The visitor acquires the rwlock when visiting strings. On some workloads
    > (e.g. Splay) the rwlocking, even uncontended, can be quite expensive.
    > The CL optimizes it by checking in the concurrent marker whether any
    > unsafe transition occurred and pausing+notifying the marker upon
    > transitioning.
    >
    > Bug: v8:14158
    > Change-Id: Ia8ac205822be910968ca487f47dbda9f83b4c328
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936651
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90402}
    
    Bug: v8:14158
    Change-Id: I7b8348b805d834e77c62af56fb948027b655522a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4938833
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90410}

commit 72ab23a8b07b173b6f9cfdec4c2f3c5b5d5ae0d1
Author: Liviu Rau <liviurau@chromium.org>
Date:   Fri Oct 13 12:57:44 2023 +0200

    Configure V8 exporter to map features.txt file correctly
    
    Depends on the new feature being implemented in Blinkpy https://crrev.com/c/4926528 .
    
    Bug: v8:14002
    Change-Id: Ifc666c8c0ace9ef981cf4f5fe20fdf958ded494c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936675
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90409}

commit cf7786a0bd2c034cc072f0fce3fde2bea35977f6
Author: Andreas Haas <ahaas@chromium.org>
Date:   Fri Oct 13 13:41:15 2023 +0000

    Revert "[wasm][turboshaft] Loop unrolling"
    
    This reverts commit 6a23a2621a8699bc8f76529476913d59bedb91da.
    
    Reason for revert: https://ci.chromium.org/ui/p/v8-internal/builders/ci/v8_linux64_perf/21219/overview
    
    Original change's description:
    > [wasm][turboshaft] Loop unrolling
    >
    > This CL enables the Turboshaft loop unrolling implementation for
    > WebAssembly. For WebAssembly, slightly higher limits seem to be useful,
    > and a different stack check is used. Otherwise the loop unrolling is
    > unchanged.
    >
    > Bug: v8:14108
    > Change-Id: Iaa4bec5b72bd5f3dccbba32eeec336bbb2bf6bf0
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4932246
    > Commit-Queue: Andreas Haas <ahaas@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90395}
    
    Bug: v8:14108
    Change-Id: I7487ce5b9aad5594ca2c4c949584066739097426
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936680
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90408}

commit 079e9e46adf97b46e160c58074b6f1a31deaeddf
Author: Samuel Groß <saelo@chromium.org>
Date:   Fri Oct 13 10:57:14 2023 +0000

    [sandbox] Ensure indirect pointer tag is valid during code generation
    
    We now CHECK that we have a valid indirect pointer tag at the end of the
    compilation pipeline for indirect pointer stores. Without a valid tag,
    we might not trigger the (correct) write barrier, potentially leading to
    subtle issues later on.
    
    Bug: chromium:1473677
    Change-Id: I599b6730dbefa6abcb26340b0c17578d3b850953
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4938830
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90407}

commit 6f6f5ae7d2fa08d7aa20696ba6e24c77a4dbfcf4
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Oct 13 10:16:33 2023 +0200

    Reland "[heap] Remove SpaceWithLinearArea::main_allocator() getter"
    
    This is a reland of commit 87c6142e7946c20358a6e6edbccbd0758caf594a
    
    This CL was reverted because
    SemiSpaceNewSpace::FreeLinearAllocationArea() was broken. This CL
    was rebased on another CL (https://crrev.com/c/4931696) which
    fixes and improves that method. This CL can now simply DCHECK that
    the new space LAB is invalid.
    
    Original change's description:
    > [heap] Remove SpaceWithLinearArea::main_allocator() getter
    >
    > While we cannot remove the MainAllocator* in SpaceWithLinearArea at
    > the moment, we can already remove the getter for it.
    >
    > Callers need to get to the MainAllocator instances through the
    > HeapAllocator class instead.
    >
    > Drive-by: Rename PublishPendingAllocations() to
    > PublishMainThreadPendingAllocations() to emphasize that we only
    > publish pending allocation for the main thread.
    >
    > Bug: chromium:1480975
    > Change-Id: I5d0416694db580264c474b45bd19a6188869b8f8
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4927168
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90374}
    
    Bug: chromium:1480975
    Change-Id: Ib5446d61dcad8d3731e377e34c0176e5546a88cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4934730
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90406}

commit e94b5e9979ae7cb8010d2fc0ae6ef54c5c4bea42
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Oct 13 11:04:15 2023 +0000

    Revert "heap: Optimize rwlock in the ConcurrentMarkingVisitor"
    
    This reverts commit 746a6c54f69d05b2f6dbd35f1e4612d8a5cacb27.
    
    Reason for revert: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20css%20-%20debug/4832/overview
    
    Original change's description:
    > heap: Optimize rwlock in the ConcurrentMarkingVisitor
    >
    > The visitor acquires the rwlock when visiting strings. On some workloads
    > (e.g. Splay) the rwlocking, even uncontended, can be quite expensive.
    > The CL optimizes it by checking in the concurrent marker whether any
    > unsafe transition occurred and pausing+notifying the marker upon
    > transitioning.
    >
    > Bug: v8:14158
    > Change-Id: Ia8ac205822be910968ca487f47dbda9f83b4c328
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936651
    > Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90402}
    
    Bug: v8:14158
    Change-Id: Ie699e5e711da08b307884d1c340b5b25ff10e3b0
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4938831
    Owners-Override: Nico Hartmann <nicohartmann@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90405}

commit a30358fa6a95d9d6803d67c9ba3aacb114046d2e
Author: pthier <pthier@chromium.org>
Date:   Thu Oct 12 15:33:26 2023 +0200

    Add name hash mask to quickly check for no integer/forwarding-index
    
    Add a new mask to check that a hash doesn't contain an integer index or
    a forwarding index.
    This allows for quick checks that a hash is guaranteed to not contain an
    integer index, as long as false negatives (i.e. a false value doesn't
    mean that the hash does represent an integer index) are allowed.
    
    Bug: chromium:1492013
    Change-Id: Id6bfaaa14d2403c659dd7fdaad790cf2aaffe94e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4935110
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90404}

commit b757e0a562278be043970946fccb9c2241d75a7f
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Oct 13 11:46:58 2023 +0200

    [heap] Free memory in SemiSpaceNewSpace::UpdateInlineAllocationLimit()
    
    When we shrink the LAB in new space, give back the remaining memory
    back to the space. This caused a test failure on ARM simulators.
    
    Bug: chromium:1480975, v8:14382
    Change-Id: I47424c0a86e3682dff6bcc779d2cd5f72d518032
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936673
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90403}

commit 746a6c54f69d05b2f6dbd35f1e4612d8a5cacb27
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Fri Oct 13 11:48:00 2023 +0200

    heap: Optimize rwlock in the ConcurrentMarkingVisitor
    
    The visitor acquires the rwlock when visiting strings. On some workloads
    (e.g. Splay) the rwlocking, even uncontended, can be quite expensive.
    The CL optimizes it by checking in the concurrent marker whether any
    unsafe transition occurred and pausing+notifying the marker upon
    transitioning.
    
    Bug: v8:14158
    Change-Id: Ia8ac205822be910968ca487f47dbda9f83b4c328
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936651
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90402}

commit c7b123957fb3c04ef478332a7f35426e87b99788
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Oct 12 21:54:58 2023 +0200

    [heap] Introduce allocation_top_ in SemiSpaceNewSpace
    
    So far SemiSpaceNewSpace used `allocator_->top()` as allocation
    bump pointer. However, this makes SemiSpaceNewSpace depend on
    the new space LAB but we eventually want to move the MainAllocator
    fully out of the space.
    
    This CL helps with this goal and adds a new field `allocation_top_`
    which is used as allocation bump pointer instead. With this approach
    the new space LAB becomes much more like the LABs for other spaces.
    There are a few other advantages as well:
    
    * No need to invoke `UpdateLinearAllocationArea()` anymore after
      setting up the new space LAB.
    * The new space LAB can now be "freed" just like the LABs in all
      other spaces. This means we can now set the LAB top pointer to
      null to invalidate the LAB.
    
    The new space LAB was used for size computations. This CL keeps this
    logic to avoid reverts/regressions here. A subsequent CL will try
    to remove those dependencies fully.
    
    SemiSpaceNewSpace::Size() uses the new space LAB if available but
    otherwise uses allocation_top(). While
    SemiSpaceNewSpace::AllocatedSinceLastGC() now uses allocation_top()
    but DCHECKs that no LAB in new space exists. This should mean that
    both methods return the same values as before.
    
    Bug: chromium:1480975
    Change-Id: I4b76c45a953f20f11f48bab723dd1c77e82a1e30
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931696
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90401}

commit 32404edd685fe12d23266ec4051164665bb88a9f
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Oct 12 21:03:15 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/8959371..de602e0
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/67cee5e..d43434c
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/897e3d4..a4060bf
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/0b94340..a51863b
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/e07dcc1..bbce3eb
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/9ebf30f..7b1593d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767382390907361137
    
    Change-Id: I1cc7ab2c1ae2d20bec13d23f5516939b43021398
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936300
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90400}

commit 568a80dac9819c8d7f5441fde68d83b94d848370
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Wed Oct 11 20:37:17 2023 +0800

    [riscv] Reland^2 "[liftoff] Add support for direct C calls"
    
    Port commit 846b5bfe32b98bfc7750f502d3b00dc0cb98ce25
    
    Change-Id: I871859d7af906b7d34b98ddf19ea1b69e0afdf4c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4923322
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90399}

commit 0f9ebbc672c77594feb9176cf52601116aa7c34c
Author: Chengzhong Wu <chengzhong.wcz@alibaba-inc.com>
Date:   Wed Oct 11 06:37:19 2023 +0000

    [flags] Remove --harmony-string-is-well-formed
    
    The String.prototype.isWellFormed and toWellFormed have shipped
    since M111.
    
    Bug: v8:13557
    Change-Id: I27e332d2fde0f9ea8ad649c016a84d2d3e0bf592
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931269
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Chengzhong Wu (legendecas) <legendecas@gmail.com>
    Cr-Commit-Position: refs/heads/main@{#90398}

commit 6552cb6ff97597a6a60db318636d36d520757fb7
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Oct 12 09:16:26 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/1de43c2..8959371
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/69e597f..0b94340
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767427699273414177
    
    Change-Id: I5db2fe88dca3c1bb9625ba81082f6f35f9396edd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4935232
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90397}

commit 489ade5866c4d8c1aff4d52798537d7c8230b106
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 12 16:59:41 2023 +0200

    [BS] Do not touch all bytes in debug mode
    
    The `DebugCheckZero` check (which is only enabled for Wasm anyway)
    ensures that a newly allocated backing store is correctly
    zero-initialized.
    This causes a significant and unnecessary increase in the amount of
    allocated memory in debug builds and causes infra failures.
    
    Thus skip this test completely. We have existing tests that check that
    freshly allocated or grown memory is zero-initialized.
    
    R=ahaas@chromium.org
    CC=machenbach@chromium.org
    
    Bug: v8:14373, v8:4153
    Change-Id: I9ecb39fcdeb4e94d7787962907067266f44de44f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4935418
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90396}

commit 6a23a2621a8699bc8f76529476913d59bedb91da
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Oct 12 16:34:46 2023 +0200

    [wasm][turboshaft] Loop unrolling
    
    This CL enables the Turboshaft loop unrolling implementation for
    WebAssembly. For WebAssembly, slightly higher limits seem to be useful,
    and a different stack check is used. Otherwise the loop unrolling is
    unchanged.
    
    Bug: v8:14108
    Change-Id: Iaa4bec5b72bd5f3dccbba32eeec336bbb2bf6bf0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4932246
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90395}

commit c8e1494ca468cf41d1f3909d92b0b8244e49d324
Author: Shu-yu Guo <syg@chromium.org>
Date:   Thu Oct 12 15:50:00 2023 +0000

    Revert "[wasm] Use C-call for atomic.notify"
    
    This reverts commit ced5c65e7ef6b1b903075799a849ab0071673935.
    
    Reason for revert: atomics-memory64 breakage
    https://logs.chromium.org/logs/v8/buildbucket/cr-buildbucket/8767430204363992817/+/u/Check/atomics-memory64
    
    Original change's description:
    > [wasm] Use C-call for atomic.notify
    >
    > There is no need to call a runtime function via the CEntry stub. The
    > method does not allocate or otherwise trigger GC, and its only arguments
    > are the wait location and the number of workers to wake.
    >
    > Thus this CL implements this via a direct C-call.
    >
    > R=dlehmann@chromium.org, marja@chromium.org
    >
    > Bug: v8:14101
    > Change-Id: I5063dc7c5b82b6efea60811bf5155adaa498edcf
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4898689
    > Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    > Reviewed-by: Marja Hölttä <marja@chromium.org>
    > Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90392}
    
    Bug: v8:14101
    Change-Id: I8f7b4974638ac2c1ab65e64b57739ac2ca3814a2
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4936510
    Auto-Submit: Shu-yu Guo <syg@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Owners-Override: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90394}

commit 7bc000add3df7015f451bb5d67a0ee0ba7ed40e7
Author: Darius M <dmercadier@chromium.org>
Date:   Thu Oct 12 16:18:59 2023 +0200

    [turboshaft][sandbox] Add missing indirect_pointer_tag
    
    Bug: chromium:1473677, v8:12783
    Change-Id: Id83a3bcf7baea0355ba1cb16c3b318997fad4fc0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4935414
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90393}

commit ced5c65e7ef6b1b903075799a849ab0071673935
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 12 16:08:44 2023 +0200

    [wasm] Use C-call for atomic.notify
    
    There is no need to call a runtime function via the CEntry stub. The
    method does not allocate or otherwise trigger GC, and its only arguments
    are the wait location and the number of workers to wake.
    
    Thus this CL implements this via a direct C-call.
    
    R=dlehmann@chromium.org, marja@chromium.org
    
    Bug: v8:14101
    Change-Id: I5063dc7c5b82b6efea60811bf5155adaa498edcf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4898689
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90392}

commit 032ed4b573021accb90f39ea8782e3c38a70c3fb
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Oct 12 14:41:00 2023 +0200

    Reland "[heap] Remove usages of allocator_ in space verification"
    
    This is a reland of commit d34c56714413da9f2dc5e382ee3daae02dab12c4
    
    This version of the CL fixes the crashes by using
    Page::FromAllocationAreaAddress() in ConcurrentAllocator::Verify().
    Previously this CL was getting the wrong Page when top()==limit() and
    both pointers were at the end of the page.
    
    Original change's description:
    > [heap] Remove usages of allocator_ in space verification
    >
    > PagedSpaceBase::Verify() was checking whether the LAB was allocated
    > somewhere in the space. However, this only works for main thread
    > LABs. This CL moves this DCHECK into the MainAllocator and
    > ConcurrentAllocator classes. These classes can check themselves
    > whether the LAB was allocated on a page of the right space.
    >
    > The heap verifier then simply invokes verification for all LABs.
    >
    > Bug: chromium:1480975
    > Change-Id: I09175a77f0715e878d669fb01fb2767b4c15e3ab
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922295
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90361}
    
    Bug: chromium:1480975
    Change-Id: Ie78abcc3c9138f9a36649633e9aeec065b5633a4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4932249
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90391}

commit 0971d5050df295f78cc0a1562daae7bc17f12a13
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Oct 12 14:54:33 2023 +0200

    [test] Improve test-runner error logging.
    
    This will show us the test, the system tries to create, when failing to
    start the subprocess. Now with logging, we'll also see timestamps and
    can compare them to the test schedule.
    
    Bug: chromium:1492104
    Change-Id: If60119f722528d0c2f1c2380a1bb6c70225b9aa1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4934830
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90390}

commit 077d86c5465dd53fd32802f00573e9f7572ab476
Author: Jakob Linke <jgruber@chromium.org>
Date:   Thu Oct 12 14:54:17 2023 +0200

    Port ScriptContextTable to derive from TaggedArrayBase
    
    Bug: v8:14345
    Change-Id: I41b1a3e9b9362a3320b02e212e0ba9742682ce06
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931610
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90389}

commit de71083aeffbac1a3976a364392ad821534976b8
Author: Igor Sheludko <ishell@chromium.org>
Date:   Tue Oct 10 18:08:37 2023 +0200

    [cleanup] Merge entered context and entered microtask context
    
    Migration to context-based microtask queue has been completed in 2019.
    
    Bug: v8:8124, v8:13825
    Change-Id: I3981398c7fbf832f0a899f3110fdf317e0dbfd63
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4927208
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90388}

commit 1d39633182123185cfb76a07eb73aa83fea1ea1c
Author: Andreas Haas <ahaas@chromium.org>
Date:   Thu Oct 12 14:37:16 2023 +0200

    Adjust constant folding of associative binops
    
    Let <op> be an associative operation, and let k1 and k2 be constants,
    then the transformation (a <op> k1) <op> k2 = a <op> (k1 <op> k2) can be
    used to allow additional constant folding.
    
    However, this transformation is only useful if the number of executions
    of <op> during runtime can be reduced. Otherwise, the tranformation
    extends the lifetime of `a` and can thereby increase register pressure.
    
    With this CL we check that (a <op> k1) does not have other uses before
    we do the transformation described above. This is just an heuristic,
    because there may be later uses of (a <op> k1).
    
    Bug: v8:14108
    Change-Id: I99f07bd16fdb5ae4b20bfa54e35eaa8c25eed560
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4934570
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90387}

commit 665b9429c2001c6b6f5f186b2a9db04ac064ef6d
Author: Igor Sheludko <ishell@chromium.org>
Date:   Thu Oct 12 11:06:13 2023 +0200

    [ic] KeyedStoreIC_Megamorphic: lookup handlers in the stub cache
    
    ... and miss/put new handlers into the cache.
    
    This improves manual property copying pattern where the KeyedStoreIC
    becomes megamorphic because it sees different names while the target
    object shape and a set of property names are mostly the same.
    
    The idea is that in certain cases it's still cheaper to compute a
    handler, put it into the megamorphic cache and perform lookups instead
    of always doing a runtime call. This CL uses conservative approach and
    enables such lookups only for JSApiObjects which usually have accessor
    properties backed by Api functions in the prototype chain.
    
    This CL improves Speedometer2.1/Inferno-TodoMVC by ~2-4%.
    
    Change-Id: I08538d9533bb897df1d08940535cba1a3d8205a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4906266
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90386}

commit 0170bee679a82ce9ed2485a36fc63f3897ff1ee5
Author: Jakob Linke <jgruber@chromium.org>
Date:   Wed Oct 11 12:15:05 2023 +0200

    Port ClosureFeedbackCellArray to derive from TaggedArrayBase
    
    Bug: v8:14345
    Change-Id: Ic25d8029bd5039c58da4c09238efba2fba868497
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931692
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90385}

commit 921521fedcfa3f861d1e1371bf74bcb6263f1aaf
Author: Jakob Linke <jgruber@chromium.org>
Date:   Thu Oct 12 09:53:46 2023 +0200

    Port ObjectBoilerplateDescription to derive from TaggedArrayBase
    
    This adds dedicated header fields for backing_store_size and flags.
    
    Bug: v8:14345
    Change-Id: I100b97ea9d3e702762c48d80360e80abac5e585f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4912480
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90384}

commit 75ac2867aaa550defd45ae43379da6171eefa2c1
Author: Jakob Linke <jgruber@chromium.org>
Date:   Wed Oct 11 11:00:36 2023 +0200

    Port ArrayList to derive from TaggedArrayBase
    
    This CL removes ArrayList from the FixedArray type hierarchy. It is
    now its own type, with dedicated `capacity` and `length` object fields.
    
    Bug: v8:14345
    Change-Id: I4423dc7d62a271effde0a7a0d38af46e022dfa09
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4900601
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90383}

commit 4590eccb026224eb7f5ee748f80dcc4e4fa94557
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Oct 12 12:05:47 2023 +0200

    Revert "[turboshaft] Basic pipeline for builtins"
    
    This reverts commit 54ed7c571b6712c1a4465f1056721278028d0af1.
    
    Bug: v8:12783
    Change-Id: Ic5970bb6eff91c6e8436987f181bfc611b13e5cc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4932247
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90382}

commit c8a8c6f74e648b1551ead71ef28e07c656875eb2
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Oct 12 10:57:21 2023 +0000

    Revert "[heap] Remove usages of allocator_ in space verification"
    
    This reverts commit d34c56714413da9f2dc5e382ee3daae02dab12c4.
    
    Reason for revert: Causes crashes in e.g.
    https://bugs.chromium.org/p/v8/issues/detail?id=14377.
    
    Original change's description:
    > [heap] Remove usages of allocator_ in space verification
    >
    > PagedSpaceBase::Verify() was checking whether the LAB was allocated
    > somewhere in the space. However, this only works for main thread
    > LABs. This CL moves this DCHECK into the MainAllocator and
    > ConcurrentAllocator classes. These classes can check themselves
    > whether the LAB was allocated on a page of the right space.
    >
    > The heap verifier then simply invokes verification for all LABs.
    >
    > Bug: chromium:1480975
    > Change-Id: I09175a77f0715e878d669fb01fb2767b4c15e3ab
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922295
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90361}
    
    Bug: chromium:1480975
    Change-Id: I04450b9dfaf28a85602cfc532df4c39740c4b202
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4933682
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90381}

commit c84c4fb25a1481a236209bc2b3a524659e47f637
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Oct 12 12:01:21 2023 +0200

    Reland "[test] Stream full test schedule alongside json results"
    
    This is a reland of commit 1cfed53b01c63251f915e419deb231e26ae9911c
    
    Patchset 2 fixes a bug in the perf runner on Android, which
    previously set the duration directly - now it sets start and
    end time.
    
    Original change's description:
    > [test] Stream full test schedule alongside json results
    >
    > This writes a file in a default location alongside the json test
    > results, containing all start and end timestamps of all executed
    > tests.
    >
    > Bug: v8:14373
    > Change-Id: Idb55b6cafc022814a4a6aec9590bf0cae2f111c8
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931699
    > Reviewed-by: Liviu Rau <liviurau@google.com>
    > Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90377}
    
    Bug: v8:14373
    Change-Id: I21c042a22a52351bc084bb2ec0bd83059f04740b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4933861
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90380}

commit ea4b2fd29268b421345252717c246682f6799159
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Oct 12 09:56:26 2023 +0000

    Revert "[test] Stream full test schedule alongside json results"
    
    This reverts commit 1cfed53b01c63251f915e419deb231e26ae9911c.
    
    Reason for revert:
    Breaks perf testing on Android.
    
    Original change's description:
    > [test] Stream full test schedule alongside json results
    >
    > This writes a file in a default location alongside the json test
    > results, containing all start and end timestamps of all executed
    > tests.
    >
    > Bug: v8:14373
    > Change-Id: Idb55b6cafc022814a4a6aec9590bf0cae2f111c8
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931699
    > Reviewed-by: Liviu Rau <liviurau@google.com>
    > Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90377}
    
    Bug: v8:14373
    Change-Id: Ifc5ee5c3de181127bae526c274cc063e1f998c1c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4933860
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90379}

commit 9c8ff6c1226090295d176629f20a5f14439bc19e
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Oct 12 09:41:51 2023 +0000

    Revert "[heap] Remove SpaceWithLinearArea::main_allocator() getter"
    
    This reverts commit 87c6142e7946c20358a6e6edbccbd0758caf594a.
    
    Reason for revert: Seems to cause crashes, e.g. in
    https://bugs.chromium.org/p/v8/issues/detail?id=14379.
    
    Original change's description:
    > [heap] Remove SpaceWithLinearArea::main_allocator() getter
    >
    > While we cannot remove the MainAllocator* in SpaceWithLinearArea at
    > the moment, we can already remove the getter for it.
    >
    > Callers need to get to the MainAllocator instances through the
    > HeapAllocator class instead.
    >
    > Drive-by: Rename PublishPendingAllocations() to
    > PublishMainThreadPendingAllocations() to emphasize that we only
    > publish pending allocation for the main thread.
    >
    > Bug: chromium:1480975
    > Change-Id: I5d0416694db580264c474b45bd19a6188869b8f8
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4927168
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90374}
    
    Bug: chromium:1480975
    Change-Id: I565e9cdfd3f388d90956641f2afc4aa7cdb40d49
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4933681
    Auto-Submit: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90378}

commit 1cfed53b01c63251f915e419deb231e26ae9911c
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Oct 12 09:22:40 2023 +0200

    [test] Stream full test schedule alongside json results
    
    This writes a file in a default location alongside the json test
    results, containing all start and end timestamps of all executed
    tests.
    
    Bug: v8:14373
    Change-Id: Idb55b6cafc022814a4a6aec9590bf0cae2f111c8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931699
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90377}

commit 7d76a0762ae0c9022416c8ab0fc0ebc31e00dab8
Author: Simon Zünd <szuend@chromium.org>
Date:   Thu Oct 12 06:12:35 2023 +0000

    [uma] Fix sourceMappingURL use counter
    
    A copy&paste mistake slipped through and we used the wrong scanner
    flag to log the newly introduced sourceMappingURL use counter.
    
    R=leszeks@chromium.org
    
    Bug: chromium:1474272
    Change-Id: I1345d312ecb470ec9f0bb7d5d8e339606dd7d2eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4933679
    Auto-Submit: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90376}

commit 020b17b6f6acf85d366834068b98a91102382c95
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Oct 11 21:07:11 2023 +0200

    [wasm-gc][compiler] load elimination: Fix deadness propagation
    
    This is a follow-up to crrev.com/c/4905772 .
    It replaces a node with dead() which is opcode kDead. However
    it seems that this can result in ending up with kDeadValue operations
    as a result which are not expected by the load elimination.
    
    So if we load from a value that is unreachable, we don't only replace
    it with the dead value but also treat the control flow as unreachable
    and merge the graph to the end node.
    
    Fixed: chromium:1491415
    Change-Id: Ida4018c9c6229acdfe70cffe905890c2358a3032
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931615
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90375}

commit 87c6142e7946c20358a6e6edbccbd0758caf594a
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Oct 11 13:49:15 2023 +0200

    [heap] Remove SpaceWithLinearArea::main_allocator() getter
    
    While we cannot remove the MainAllocator* in SpaceWithLinearArea at
    the moment, we can already remove the getter for it.
    
    Callers need to get to the MainAllocator instances through the
    HeapAllocator class instead.
    
    Drive-by: Rename PublishPendingAllocations() to
    PublishMainThreadPendingAllocations() to emphasize that we only
    publish pending allocation for the main thread.
    
    Bug: chromium:1480975
    Change-Id: I5d0416694db580264c474b45bd19a6188869b8f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4927168
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90374}

commit e2b3916a31a51d5d64b87243f59f117443251c27
Author: Jakob Linke <jgruber@chromium.org>
Date:   Thu Oct 12 07:21:28 2023 +0200

    Add a generic implementation for primitive array-like objects
    
    .. and port FixedDoubleArray and ByteArray.
    
    Bug: v8:14345
    Change-Id: I5515c2327b771978e100fac2344e7dd9ae27db82
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4900596
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90373}

commit e9598d8128edf697a8d6f639d32e8a17945efec4
Author: Ho Cheung <uioptt24@gmail.com>
Date:   Thu Oct 12 01:08:27 2023 +0800

    [regexp] Rename Load16Aligned to Load16AlignedUnsigned.
    
    Change-Id: I8cd756c4aaf21de6aebcb795d464fbb1be17e0a9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931614
    Reviewed-by: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90372}

commit 0bdb99058b161f53d51fc1d47128cfb6fc31da50
Author: Frank Tang <ftang@chromium.org>
Date:   Wed Oct 11 20:55:57 2023 -0700

    [intl] Implement ECMA402 PR788 for offset timezone name
    
    https://github.com/tc39/ecma402/pull/788
    
    
    Accept the following timeZone which is already in ECMA262
    
    "+00"
    "-00"
    "−00"
    "+0000"
    "-0000"
    "−0000"
    "+00:00"
    "-00:00"
    "−00:00"
    "+2359"
    "+23:59"
    "-2359"
    "-23:59"
    "−2359"
    "−23:59"
    
    Notice "-00" and "−00" are not the same, one is ASCII - one is U+2122
    
    Bug: v8:14342
    Change-Id: I7ee116aba267e5b2935c7583f4c993f4d4edd496
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4854730
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Frank Tang <ftang@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90371}

commit 02415f5f5c9b870a534ba884299107303b3acdac
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Oct 11 21:17:05 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/bb7ea33..1de43c2
    
    Rolling v8/buildtools/linux64: git_revision:991530ce394efb58fcd848195469022fa17ae126..git_revision:182a6eb05d15cc76d2302f7928fdb4f645d52c53
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/30e34f3..897e3d4
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/aabd869..69e597f
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/2ce7927..9ebf30f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767472997975976769
    
    Change-Id: I3a9df39e97f497207e525a5ceecae57a30cddff2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931331
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90370}

commit 012b1b960beb4bc40ac9ab38d55a8770a6c85821
Author: Liu Yu <liuyu@loongson.cn>
Date:   Thu Oct 12 10:44:10 2023 +0800

    [loong64][mips64][liftoff] Add support for direct C calls
    
    Port commit 846b5bfe32b98bfc7750f502d3b00dc0cb98ce25
    
    Bug: v8:14101
    Change-Id: I67d24e5d7c871c4264c24c5fbcebae783f808824
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4930359
    Auto-Submit: Liu Yu <liuyu@loongson.cn>
    Reviewed-by: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Commit-Queue: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
    Cr-Commit-Position: refs/heads/main@{#90369}

commit 30d2589deebba53db108c844804ac6c066deeb2d
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Oct 10 14:30:28 2023 +0200

    [wasm][turboshaft] Inlining: Fix return handling in unreachable paths
    
    Bug: v8:1490847
    Change-Id: I2f29b5e53e44c45956748b75726a3aeb1469556a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922341
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90368}

commit ad8fff88fdaa222b6584ad23fcc3b3194bf71aef
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Oct 11 09:17:51 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/7260bd3..bb7ea33
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/ab80d63..67cee5e
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/88f60e4..ae615e1
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/4566632..aabd869
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767518295672929505
    
    Change-Id: Ic0779b31975f9e1d3474a2c7dc9a2d578c084655
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931854
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90367}

commit ba401aa9c13aefad97074d0ad229588e07119ed6
Author: Victor Gomes <victorgomes@chromium.org>
Date:   Wed Oct 11 17:41:05 2023 +0200

    [baseline] Add v8_enable_sparkplug GN flag
    
    Sparkplug has been ported to all V8 supported architectures.
    However it is still useful to compile V8 without it.
    
    This CL introduces a GN flag and splits source and headers files
    that do not need to be compiled.
    
    This *does not* remove Sparkplug checks in the runtime code.
    
    Bug: v8:11421
    
    Change-Id: I59a9a6e44703d6f8fa7b2d60e32fefd1af8cc96b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931698
    Auto-Submit: Victor Gomes <victorgomes@chromium.org>
    Commit-Queue: Victor Gomes <victorgomes@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90366}

commit 683a5abcc9b2500d7fce07b94011399cb40749aa
Author: Eva Herencsarova <evih@google.com>
Date:   Wed Oct 11 16:11:48 2023 +0200

    [wasm][turboshaft] Add getBigInt64() to Turboshaft
    
    Bug: v8:14108
    Change-Id: Iebc3560639ca0423b48d8e61465dba00f1715f66
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922670
    Commit-Queue: Eva Herencsárová <evih@google.com>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90365}

commit 009d405a3b7ca88c201b207084e4945b26a81415
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Wed Oct 11 14:13:57 2023 +0000

    Revert "[wasm] Add wasm-specific allocation builtins"
    
    This reverts commit 8bbc90166d0dd1bb2037f89207aff00373a42584.
    
    Reason for revert: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20css%20-%20debug/4798/overview
    
    Original change's description:
    > [wasm] Add wasm-specific allocation builtins
    >
    > This fixes an issue where these builtins would not switch to the central
    > stack for the runtime call when running on a secondary stack. The
    > changes are:
    > - Decide whether we need to insert the stack-switching code depending on
    >   the caller rather than the callee, i.e. if the caller is either a wasm
    >   function, a wasm wrapper or a wasm builtin,
    > - Add wasm-specific builins for raw allocations in the young and old
    >   generation, which will therefore have the (currently missing)
    >   stack-switching code for the runtime call thanks to the first point
    > - In the memory lowering phase, use the new wasm builtins if we are
    >   currently compiling a wasm function, a wasm builtin or a wasm wrapper.
    >
    > R=jgruber@chromium.org
    > CC=irezvov@chromium.org
    >
    > Bug: v8:13983
    > Change-Id: I8480a55ed13cbce0ded2f3ffc9fa65115d26382f
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916173
    > Reviewed-by: Jakob Linke <jgruber@chromium.org>
    > Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90363}
    
    Bug: v8:13983
    Change-Id: Ide2b742c6052a4bb2af0383c17f834f1a826a913
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931612
    Auto-Submit: Nico Hartmann <nicohartmann@chromium.org>
    Owners-Override: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90364}

commit 8bbc90166d0dd1bb2037f89207aff00373a42584
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Wed Oct 11 14:16:04 2023 +0200

    [wasm] Add wasm-specific allocation builtins
    
    This fixes an issue where these builtins would not switch to the central
    stack for the runtime call when running on a secondary stack. The
    changes are:
    - Decide whether we need to insert the stack-switching code depending on
      the caller rather than the callee, i.e. if the caller is either a wasm
      function, a wasm wrapper or a wasm builtin,
    - Add wasm-specific builins for raw allocations in the young and old
      generation, which will therefore have the (currently missing)
      stack-switching code for the runtime call thanks to the first point
    - In the memory lowering phase, use the new wasm builtins if we are
      currently compiling a wasm function, a wasm builtin or a wasm wrapper.
    
    R=jgruber@chromium.org
    CC=irezvov@chromium.org
    
    Bug: v8:13983
    Change-Id: I8480a55ed13cbce0ded2f3ffc9fa65115d26382f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916173
    Reviewed-by: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90363}

commit f1e10d82f5da07939381852729de1b8397c45598
Author: Eva Herencsarova <evih@google.com>
Date:   Wed Oct 11 11:50:02 2023 +0200

    [wasm][turboshaft] Declare DataView getters and setters in Turboshaft
    
    For better readability, this change only declares the getters and setters, the following CLs will contain the implementation.
    
    Bug: v8:14108
    Change-Id: I04314020cddf0d1e1a9eaf30f0c9c4909ad8f9eb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916664
    Commit-Queue: Eva Herencsárová <evih@google.com>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90362}

commit d34c56714413da9f2dc5e382ee3daae02dab12c4
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Oct 11 14:02:07 2023 +0200

    [heap] Remove usages of allocator_ in space verification
    
    PagedSpaceBase::Verify() was checking whether the LAB was allocated
    somewhere in the space. However, this only works for main thread
    LABs. This CL moves this DCHECK into the MainAllocator and
    ConcurrentAllocator classes. These classes can check themselves
    whether the LAB was allocated on a page of the right space.
    
    The heap verifier then simply invokes verification for all LABs.
    
    Bug: chromium:1480975
    Change-Id: I09175a77f0715e878d669fb01fb2767b4c15e3ab
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922295
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90361}

commit 25902244ad1aa5ad7c7e5c85d6b0afae4e878536
Author: Joyee Cheung <joyee@igalia.com>
Date:   Tue Oct 10 06:45:54 2023 +0200

    [api] add line breaks to the output of Message::PrintCurrentStackTrace
    
    Previously this prints the stack trace without line breaks and it
    can be difficult to read. This also affects
    --abort-on-uncaught-exception. This patch adds line breaks to the
    output to improve readability.
    
    Change-Id: I4c44b529f8c829329f784b0859b1d13c9ec56838
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925009
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#90360}

commit 0f0c7e90b43275d51c934187d394cf834ad40e2c
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Wed Oct 11 13:59:15 2023 +0200

    [heap] Remove out_max_aligned_size argument from EnsureAllocation()
    
    This value can simply be recomputed after EnsureAllocation() if
    needed.
    
    Bug: chromium:1480975
    Change-Id: I7bf196e86abc475d0791f83f4473cfcb955ab0d1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4927749
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90359}

commit b4242d10729cda40cb8ea0c4a89c98c4cd37014c
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Oct 11 12:42:26 2023 +0000

    Revert "[test] Output process list after failures on Windows"
    
    This reverts commit 743641bb8f925608752d7a1e14edc12439380395.
    
    Reason for revert:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20coverage/7415/overview
    
    Original change's description:
    > [test] Output process list after failures on Windows
    >
    > This aims to identify background processes running while other
    > failures occur during testing.
    >
    > Bug: v8:14373
    > Change-Id: I0fa63bfcddf636bddb94cb6d0784f834b78658f1
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931688
    > Reviewed-by: Liviu Rau <liviurau@google.com>
    > Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90357}
    
    Bug: v8:14373
    Change-Id: I7cbd8f491c98f572c35cbbc4cc81f52a54c54124
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4930894
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90358}

commit 743641bb8f925608752d7a1e14edc12439380395
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Oct 11 13:54:51 2023 +0200

    [test] Output process list after failures on Windows
    
    This aims to identify background processes running while other
    failures occur during testing.
    
    Bug: v8:14373
    Change-Id: I0fa63bfcddf636bddb94cb6d0784f834b78658f1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931688
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90357}

commit ee07edab5dd9c0ef3436184a71d2b27dd31dec1f
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Oct 11 11:15:07 2023 +0000

    [sandbox] Make BytecodeArrays trusted objects
    
    In this CL, BytecodeArrays are converted to ExposedTrustedObjects so
    that they have an indirect pointer table (IPT) entry through which they
    can be referenced via an indirect pointer.
    
    Subsequent CLs will first change all references to BytecodeArrays to
    indirect pointers, then actually move them out of the sandbox.
    
    Bug: chromium:1472252
    Change-Id: I725f3827e4eb26b3dad4da252efd3a774425e32f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4866547
    Reviewed-by: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90356}

commit b41f8b5f5f7e2f354af89a5f24e46cf047050238
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Oct 11 11:46:51 2023 +0200

    [ic] Fix clone IC empty result with with null proto
    
    Oddballs are converted to an empty object by the spread literal. However
    the clone IC is also responsible to setup the null prototype if given
    in the object literal. Thus `{...null, __proto__: null}` cannot use the
    fast case since that one cannot set a custom proto.
    
    Bug: chromium:1491106
    Change-Id: I6c29806e8482f1bedd2e00605adfd9d15915c336
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931689
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90355}

commit e708e2b0278d12b8038eb50be73a25d5c42e5787
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Oct 11 11:40:15 2023 +0200

    [heap] Implement marking verification for unified heap
    
    The current marking verifier didn't support cpp-to-js references
    (TracedReferences).
    
    Bug: chromium:1056170
    Change-Id: Id413eab44893d62f248ba25b3328398861252dc8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916666
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90354}

commit aefb7a11b7b489bbf75e23dffc9e419e62f5480d
Author: Marja Hölttä <marja@chromium.org>
Date:   Wed Oct 11 10:37:06 2023 +0200

    [torque] Fix incorrect inheritance annotation
    
    (See "class DependentCode : public WeakArrayList".)
    
    Change-Id: If703285ed50184cb3b5605dd55d2d38fea235db9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931608
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90353}

commit 437bc90fd6a9a126bbc79e6f4b42e15000e23500
Author: pthier <pthier@chromium.org>
Date:   Wed Oct 11 10:44:48 2023 +0200

    [test] Allow already externalized strings in externalizeString()
    
    With a combination of test flags (shared strings, multiple threads,
    stressing GC) it is possible that a string gets externalized
    concurrently. Don't fail in such cases, as the requested result
    is achieved and shouldn't further influence a tests outcome.
    
    Bug: v8:14375
    Change-Id: Idd833de2b4501e91745f1c4aea8d1ac24a9c7246
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931609
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90352}

commit cf0036e756d2958773704b8f8d6f847dae686ff1
Author: Jakob Linke <jgruber@chromium.org>
Date:   Wed Oct 11 12:05:31 2023 +0200

    Fix LOSpace::Verify for RegExpMatchInfo
    
    .. which is no longer a subtype of FixedArray.
    
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Bug: v8:14345
    Change-Id: I8c0a1de28c809ec90ac947b1ad1bad603b89545f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4930892
    Auto-Submit: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90351}

commit 08745c3c7978e5e46b5681b5c8acd71bbd9261b6
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Wed Oct 11 10:51:26 2023 +0200

    [test] Align testing on ubsan trybot with CI
    
    Bug: v8:13008
    Cq-Include-Trybots: luci.v8.try:v8_linux64_ubsan_rel
    Change-Id: Iad82907c1d9db4fd8aae168422d654387c5cb194
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4931691
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90350}

commit ff6638c60f295b6d48ec27479fc58136be5661fb
Author: Jakob Linke <jgruber@chromium.org>
Date:   Wed Oct 11 09:31:49 2023 +0200

    Add a generic implementation for arraylike heap objects
    
    .. and port FixedArray and RegExpMatchInfo to it.
    
    This CL changes the way FixedArray and (in the future) all related
    objects are set up s.t. they all derive their basic functionality
    such as accessors, allocation, and helpers, from a generic base
    class. The base class:
    
    * knows the element type (accessors are automatically specialized);
    * allows definition of arbitrary header fields, i.e. subclasses
      may now easily define real fields instead of abusing special
      indices;
    * is aware of object layout and can thus generate an `Allocate`
      function (subclasses still need to define `New` for header
      and elements initialization).
    
    Due to single-inheritance restrictions, FixedArrayBase no longer
    fits into the actual inheritance chain. We thus extract it into
    an artifical union-like type, defined through explicit `is_subtype`
    specializations.
    
    This CL applies the new implementation style to FixedArray and
    RegExpMatchInfo. Note that the latter 1) defines custom header
    fields, and 2) specializes the elements type to `Smi`.
    
    Bug: v8:14345
    Change-Id: If6aad8fba586f2eea7e4e83924d4870fddd8aa0f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4892860
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90349}

commit b01473f4bad09b2c2e0ac4e0f13e829778c2ee29
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Oct 10 14:20:09 2023 +0200

    [heap] Move PagedSpace allocation code into PagedSpaceAllocatorPolicy
    
    Move allocation slow path from PagedSpaceBase into
    PagedSpaceAllocatorPolicy. This will allow us to remove the
    MainAllocator* in PagedSpaceBase.
    
    Bug: chromium:1480975
    Change-Id: I6bd225cf4cf0d41ca1102f1cce86d5d03c0f0ece
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925230
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90348}

commit 8f0b94671ddb56cc681f491d6e542b909b0d94cc
Author: Joonhyung Hwang <joonhyung.hwang@lge.com>
Date:   Sun Sep 24 11:42:17 2023 +0900

    [gcc] Add include for TurboShaft
    
    Include <limits> for std::numeric_limits.
    
    Bug: chromium:819294
    Change-Id: I26a71ed4bad1858d2f5ed5d7dcd529e9cae60f37
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4889285
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90347}

commit a15620699fe1317afd5b2c2fe726959ef5c221e9
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Oct 10 21:15:58 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/7019612..7260bd3
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/657ac24..ab80d63
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/4d6298f..4566632
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/8fc1797..e07dcc1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767563592592700625
    
    Change-Id: I7c430111d6872db345e8ccf82a48fe120f98bb45
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4930129
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90346}

commit 94b573348d8f95c38b605c4572ed4e0f9394b71c
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Tue Oct 10 22:30:18 2023 +0000

    [array-from-async] Stage Array.fromAsync
    
    This CL moves Array.fromAsync flag from in-progress to staging.
    
    Bug: v8:13321
    Change-Id: If980947822d7772255f38417c0aa3212f0d2edf0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4928609
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90345}

commit fd2787e42c0476f969b185e2ac38699b174918c1
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Oct 10 18:20:24 2023 +0000

    PPC/S390[liftoff]: Fix stack offset under LiftoffAssembler::Construct
    
    LiftoffAssembler::Construct loads values previously pushed by
    LiftoffAssembler::Spill which uses a bias. We need to apply
    the same bias to make sure the correct offset get loaded again.
    
    Note we don't need to apply this fix to I32. They originally get
    pushed with a bias but then later get loaded as a 64 bit value with
    no bias. As long as the upper 4 bytes are 0's the correct value
    gets loaded.
    
    Change-Id: I1c0ba28060b9b321997d7986ba6f6f19e8951af9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4928348
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90344}

commit 82aa1fd7592c4ddeff7aae2323f5118963d9bd6b
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Oct 10 16:12:04 2023 +0000

    PPC/s390: Reland^2 "[liftoff] Add support for direct C calls"
    
    Port 846b5bfe32b98bfc7750f502d3b00dc0cb98ce25
    
    Original Commit Message:
    
        This is a reland of commit 5fb5de9cfc6c54cf8710db01f395299d5acb435b.
    
        Release builds of ia32 are fixed by adding a `USE` statement.
        UB is fixed by restricting the shift width in the C function.
    
        Original change's description:
        > [liftoff] Add support for direct C calls
        >
        > This adds support for calling C functions and passing parameters
        > according to the C calling conventions. So far we could only call C
        > functions that expect their input in a pointer-referenced
        > stack-allocated buffer.
        >
        > For now, the four bit-rotating C functions are moved over. The same
        > infrastructure will be used for atomic notify in a follow-up, and we can
        > decide to move more functions over to generate smaller code and increase
        > performance.
        >
        > R=dlehmann@chromium.org
        >
        > Bug: v8:14101
        > Change-Id: Ifb85f57afa41f6a77d612fbd20076e37ce10bf99
        > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905288
        > Commit-Queue: Clemens Backes <clemensb@chromium.org>
        > Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
        > Cr-Commit-Position: refs/heads/main@{#90308}
    
    R=clemensb@chromium.org, joransiu@ca.ibm.com, junyan@redhat.com, midawson@redhat.com
    BUG=
    LOG=N
    
    Change-Id: Icf03f966e8ee9e9a3abeab210a8dceeeded04fba
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4926611
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Junliang Yan <junyan@redhat.com>
    Cr-Commit-Position: refs/heads/main@{#90343}

commit cd08af38713df263e446b0c0678fd099ee93cd12
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Oct 10 18:09:46 2023 +0200

    [liftoff][ia32] Rename num_args to num_lowered_args for C calls
    
    On ia32, 64-bit arguments need to be lowered to two actual arguments.
    Thus rename the variable that counts the number of C-arguments to
    "num_lowered_args" to make this distinction more clear.
    
    R=dlehmann@chromium.org
    
    Change-Id: Ia3a9369531aeae02adbc100c44ed68aec74b01dc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4926710
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90342}

commit 57cac463e1605ba66db6bd8012da3742b43d9203
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Oct 10 09:16:40 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/b1221f6..7019612
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/92d8c4e..4d6298f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767608893398609105
    
    Change-Id: I17ed12c91dc2e59b1d556f0a351180b8390983af
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925892
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90341}

commit 7b4cc3036390ec0ae1a87acbaa084d1026a205a1
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Tue Oct 10 16:11:29 2023 +0200

    Do not throw TypeError immediatly on new WebAssembly.Function rewrapping
    
    According to the recent change in the proposal, TypeError shouldn't be
    thrown immediatly during new WebAssembly.Function construction in case
    if a signature of the underlying function missmatch, but be delayed
    until the wrapper will be called.
    
    Bug: v8:7742
    Change-Id: I96f6b7681450b85922fa1189120db77393fc9899
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925351
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90340}

commit 4beb05e9333f83264b589441188124b09872d607
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Oct 10 16:27:25 2023 +0200

    [turboshaft] Revert WriteBarrierElimination changes
    
    This CL reverts a few changes made to Turboshaft's
    MemoryOptimizationReducer (https://chromium-review.googlesource.com/c/v8/v8/+/4874383) because we
    think it causes the crashes appearing here:
    https://bugs.chromium.org/p/chromium/issues/detail?id=1489500
    
    Bug: v8:12783, chromium:1489500
    Change-Id: I09ac1cb91a59deb4ee15b07935d6eda310637ad5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4926251
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90339}

commit 9367b6cbdd2b63282a75631d7448b962168102cf
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Mon Oct 2 14:45:18 2023 -0700

    Re-enable testing for v8windbg jsstack command
    
    Some test steps were disabled due to a bug in the Windows SDK. Now that
    V8 is using a newer version, these steps work again.
    
    Bug: v8:13484
    Change-Id: I5447a603a5b78c81c725ae3a8bf23c5cabffa7cb
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4908615
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#90338}

commit 3303cbe87bc5ab8cbb300cd95aa1850061dabcee
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Oct 10 16:21:19 2023 +0200

    [wasm][fuzzer] Generate test cases that do not fail on traps
    
    The fuzzer executable doesn't fail if it produces a test case that
    produces a trap as the fuzzer does not care about runtime traps.
    The --wasm-fuzzer-gen-test test cases therefore also shouldn't fail on
    trapping wasm functions (or uncaught wasm exceptions).
    
    Bug: chromium:1490847
    Change-Id: I39c5060967df20bb65cdcf841aaf5d7718579159
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4926708
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90337}

commit 98667e4610bc2c6ce2d4dbe8a53d279be649c597
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Oct 10 14:56:43 2023 +0200

    [heap] Simplify methods on LABs for shared space
    
    Methods like FreeLinearAllocationAreas() and
    MakeLinearAllocationAreasIterable() now operate on shared space
    LABs as well. Previously this was not the case as it wasn't
    strictly necessary. But since these operations are infrequent enough,
    it shouldn't hurt performance but make those methods easier to use.
    
    We only need a separate set of methods for the shared space for
    black allocation for now. However, we might get rid of black
    allocation eventually anyways.
    
    Drive-by: Use plural in method names when they potentially operate on
    multiple LABs in HeapAllocator and LocalHeap.
      * FreeLinearAllocationArea() -> FreeLinearAllocationAreas()
      * MakeLinearAllocationAreaIterable() ->
        MakeLinearAllocationAreasIterable()
      * MarkLinearAllocationAreaBlack() ->
        MarkLinearAllocationAreasBlack()
      * UnmarkLinearAllocationArea() ->
        UnmarkLinearAllocationsArea()
    
    Bug: chromium:1480975
    Change-Id: Id10b71481fe1542b24942f232d523c5a353e59d0
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925194
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90336}

commit e1649301dfbfd34a448c3a0232c8a6206b716c73
Author: Nikolaos Papaspyrou <nikolaos@chromium.org>
Date:   Tue Oct 10 12:08:06 2023 +0200

    [handles] Introduce v8::LocalVector
    
    According to V8's public API documentation, local handles (i.e.,
    objects of type v8::Local<T>) "should never be allocated on the heap".
    This disallows heap-allocated data structures containing instances of
    v8::Local, like std::vector<v8::Local<v8::String>>. It is unfortunate
    that the V8 API itself requires the usage of such data structures.
    
    This CL introduces a compile-time flag v8_enable_local_off_stack_check
    which enforces a run-time DCHECK, that all v8::Local<T> objects are
    indeed stack-allocated. The check is disabled by default. It will
    fail for all heap data structures containing local handles.
    
    The CL also introduces v8::LocalVector<T> as an intended replacement
    for std::vector<v8::Local<T>>. This class implements correctly
    heap-allocated vectors of local handles. The backing store of such
    vectors does not trigger the off-stack check. Furthermore, if direct
    locals are used, the backing store is also registered as a strong
    roots region.
    
    Additionally, the CL modifies root visitors so that, when direct
    locals are used, they bypass slots containing kTaggedNullPointer.
    In the direct local configuration, this value is used to represent
    "empty handles" and is expected to be found in the backing stores
    of v8::LocalVector<T>, for default-constructed elements.
    
    Bug: v8:13257
    Bug: v8:13270
    Bug: chromium:1454114
    Change-Id: I1fa6277eab95fa3609d840fca211e2531592e657
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905902
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Nikolaos Papaspyrou <nikolaos@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90335}

commit 39818791db61d2b0322c97692dcd90ac44d5f64c
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Oct 10 10:38:22 2023 +0200

    Reland "[heap] Remove some usages of MainAllocator in spaces"
    
    This is a reland of commit 0491be019cccac60152aea68fb3fe42224d3eb1d
    
    The reason for the test failure was that the shared LAB wasn't
    freed in Isolate::Deinit. This is fixed by also freeing the shared
    LAB inside LocalHeap::FreeLinearAllocationArea.
    
    Original change's description:
    > [heap] Remove some usages of MainAllocator in spaces
    >
    > This CL removes usages of the MainAllocator instance in new spaces
    > and the MergeCompactionSpace() method.
    >
    > Bug: chromium:1480975
    > Change-Id: Ied359c12c16d1c062a0724b5b4997d429a4c8bdf
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916175
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90321}
    
    Bug: chromium:1480975
    Change-Id: I789f2d0c3598bde2a0890c8b4c5059e5c4729cbd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925191
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90334}

commit d07707d6cfbbbee0454ec017b5a050224659dd2d
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Tue Oct 10 10:30:31 2023 +0200

    [turboshaft] Enable Turboshaft by default
    
    Bug: v8:12783
    Change-Id: I457740ddebf7f84466c177300499464061f1b885
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925350
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90333}

commit 846b5bfe32b98bfc7750f502d3b00dc0cb98ce25
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Oct 10 11:41:56 2023 +0200

    Reland^2 "[liftoff] Add support for direct C calls"
    
    This is a reland of commit 5fb5de9cfc6c54cf8710db01f395299d5acb435b.
    
    Release builds of ia32 are fixed by adding a `USE` statement.
    UB is fixed by restricting the shift width in the C function.
    
    Original change's description:
    > [liftoff] Add support for direct C calls
    >
    > This adds support for calling C functions and passing parameters
    > according to the C calling conventions. So far we could only call C
    > functions that expect their input in a pointer-referenced
    > stack-allocated buffer.
    >
    > For now, the four bit-rotating C functions are moved over. The same
    > infrastructure will be used for atomic notify in a follow-up, and we can
    > decide to move more functions over to generate smaller code and increase
    > performance.
    >
    > R=dlehmann@chromium.org
    >
    > Bug: v8:14101
    > Change-Id: Ifb85f57afa41f6a77d612fbd20076e37ce10bf99
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905288
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90308}
    
    Bug: v8:14101
    Change-Id: I96ca177ad65cf307d817172f0d25470f4b3f20a6
    Cq-Include-Trybots: luci.v8.try:v8_linux_compile_rel
    Cq-Include-Trybots: luci.v8.try:v8_linux64_ubsan_rel
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922340
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90332}

commit 468ea46410f69cbfd7a09caff212b0844094b49e
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Tue Oct 10 09:01:15 2023 +0200

    [heap] Move PagedNewSpace methods into PagedNewSpaceAllocatorPolicy
    
    Move allocation code paths in PagedSpaceForNewSpace into
    PagedNewSpaceAllocatorPolicy.
    
    Bug: chromium:1480975
    Change-Id: I022a0a0d0c6e013fcfc623d229ccf239eec6b6a1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4921774
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90331}

commit b2f334811cb563d92ff608ddb00acfe9e56b9ea3
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Oct 10 12:10:21 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Add segfault reproducer test case
    
    This is a follow-up to crrev.com/c/4925349 and contains a test case
    that doesn't only reproduce the issue but even results in a segfault
    at runtime.
    
    Bug: chromium:1490847
    Change-Id: Ib4c710d8d180494315edbebfb37c9eae7ac1be9d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925195
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90330}

commit 1c5df5a1b8ade0f484bae1d6f98158bee348dff2
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Tue Oct 10 10:29:34 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Remove misplaced MapToNewGraph
    
    Bug: chromium:1487077
    Change-Id: I482d32286b35a7b8180d3401387fc76c93953b25
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925349
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90329}

commit 08e1c0feb6dfb022ee220d347205cc2fccd36457
Author: Clemens Backes <clemensb@chromium.org>
Date:   Tue Oct 10 09:32:06 2023 +0000

    Revert "Reland "[liftoff] Add support for direct C calls""
    
    This reverts commit abb12d27903a827d3be0959dc800725e9cb6b533.
    
    Reason for revert: UBSan errors: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20UBSan/28643/overview
    
    Original change's description:
    > Reland "[liftoff] Add support for direct C calls"
    >
    > This is a reland of commit 5fb5de9cfc6c54cf8710db01f395299d5acb435b.
    >
    > Release builds of ia32 are fixed by adding a `USE` statement.
    >
    > Original change's description:
    > > [liftoff] Add support for direct C calls
    > >
    > > This adds support for calling C functions and passing parameters
    > > according to the C calling conventions. So far we could only call C
    > > functions that expect their input in a pointer-referenced
    > > stack-allocated buffer.
    > >
    > > For now, the four bit-rotating C functions are moved over. The same
    > > infrastructure will be used for atomic notify in a follow-up, and we can
    > > decide to move more functions over to generate smaller code and increase
    > > performance.
    > >
    > > R=dlehmann@chromium.org
    > >
    > > Bug: v8:14101
    > > Change-Id: Ifb85f57afa41f6a77d612fbd20076e37ce10bf99
    > > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905288
    > > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > > Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    > > Cr-Commit-Position: refs/heads/main@{#90308}
    >
    > Bug: v8:14101
    > Cq-Include-Trybots: luci.v8.try:v8_linux_compile_rel
    > Change-Id: I7084f18589893a4ae07ed2a806b234a877279ecc
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922912
    > Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90325}
    
    Bug: v8:14101
    Change-Id: Ieee8cbef8d18d0f33608996178a2d036530b53c2
    Cq-Include-Trybots: luci.v8.try:v8_linux_compile_rel
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4925193
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Clemens Backes <clemensb@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90328}

commit 96af6268278e3665b710ae0f43c21c7e8b5247de
Author: Cheng Zhao <zcbenz@gmail.com>
Date:   Tue Oct 10 08:33:03 2023 +0900

    Add VirtualAddressSpace::Contains API
    
    This API is needed to make Node.js C API napi_create_external_arraybuffer work under V8 sandbox.
    
    Bug: v8:14351
    Change-Id: I7bf3a3ad70c7cfee623ba4bf82fbf9fbf5002e6d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4904583
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Samuel Groß <saelo@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90327}

commit aac80ac322474bb526754e19205f8946faf93947
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Tue Oct 10 08:30:42 2023 +0200

    [wasm][relaxed-simd] Fix I32x4TruncF32x4U
    
    The previous fix was incorrect when src != dst. It moved src to dst as
    part of the NaN handling, but the rest of the code still uses src.
    
    R=jkummerow@chromium.org
    
    Bug: v8:14356
    Change-Id: I86a8690e5373df2574992f131b1d2df741e133df
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4923150
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90326}

commit abb12d27903a827d3be0959dc800725e9cb6b533
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 9 17:37:13 2023 +0200

    Reland "[liftoff] Add support for direct C calls"
    
    This is a reland of commit 5fb5de9cfc6c54cf8710db01f395299d5acb435b.
    
    Release builds of ia32 are fixed by adding a `USE` statement.
    
    Original change's description:
    > [liftoff] Add support for direct C calls
    >
    > This adds support for calling C functions and passing parameters
    > according to the C calling conventions. So far we could only call C
    > functions that expect their input in a pointer-referenced
    > stack-allocated buffer.
    >
    > For now, the four bit-rotating C functions are moved over. The same
    > infrastructure will be used for atomic notify in a follow-up, and we can
    > decide to move more functions over to generate smaller code and increase
    > performance.
    >
    > R=dlehmann@chromium.org
    >
    > Bug: v8:14101
    > Change-Id: Ifb85f57afa41f6a77d612fbd20076e37ce10bf99
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905288
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90308}
    
    Bug: v8:14101
    Cq-Include-Trybots: luci.v8.try:v8_linux_compile_rel
    Change-Id: I7084f18589893a4ae07ed2a806b234a877279ecc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922912
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90325}

commit 48c12dd09618c5b19617016f030ccf0320b87d5f
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Oct 10 07:58:34 2023 +0000

    Revert "[heap] Remove some usages of MainAllocator in spaces"
    
    This reverts commit 0491be019cccac60152aea68fb3fe42224d3eb1d.
    
    Reason for revert: Breaks all numfuzz bots:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20NumFuzz/25146/overview
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20NumFuzz%20-%20debug/23180/overview
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20NumFuzz%20-%20TSAN/24055/overview
    
    Original change's description:
    > [heap] Remove some usages of MainAllocator in spaces
    >
    > This CL removes usages of the MainAllocator instance in new spaces
    > and the MergeCompactionSpace() method.
    >
    > Bug: chromium:1480975
    > Change-Id: Ied359c12c16d1c062a0724b5b4997d429a4c8bdf
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916175
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90321}
    
    Bug: chromium:1480975
    Change-Id: I8f9efe19a879f3d6aee85b743b3b7c3711b30709
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922339
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90324}

commit b87ead129557b6554bb9f9f0122ecaa8d6bdf104
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Oct 10 08:37:03 2023 +0200

    [test] Switch Android testing from M->O
    
    Bug: chromium:1490715
    Cq-Include-Trybots: luci.v8.try:v8_android_arm64_n5x_rel
    Change-Id: Id5c6867229fdaa5c5111b6dd8d87191793d2afc8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4923151
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90323}

commit 51dc737a0cf838bad4032f54356809bf60d03032
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Mon Oct 9 15:33:26 2023 +0200

    Reland "cppgc: Rewire atomic sweeping"
    
    This is a reland of commit 517ab248723851bfe2a390d4ceb70c648b72b621
    
    Original change's description:
    > cppgc: Rewire atomic sweeping
    >
    > Instead of finishing atomic sweeping when sweeping starts delay the
    > actual sweeping phase till after leaving the V8 safepoint. This
    > prevents Oilpan and V8 allocations from interfering with heap layouts
    > and verifiers.
    >
    > The concrete case is that heap verification runs at the end of the
    > safepoint and assumes no LABs are present. Atomic Oilpan sweeping may
    > call back into V8 in finalizers which may create a LAB via an
    > allocation. This is undefined behavior as V8 is still in a safepoint
    > and should thus be worked around.
    >
    > Bug: chromium:1488263
    > Change-Id: Id9fc696909c42c75cf7de0001205d6870aa939ed
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905775
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90275}
    
    Bug: chromium:1488263
    Change-Id: Idf12fe0c7661dbd9454d7eb60637a345ac1db343
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4921730
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90322}

commit 0491be019cccac60152aea68fb3fe42224d3eb1d
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Oct 6 14:31:33 2023 +0200

    [heap] Remove some usages of MainAllocator in spaces
    
    This CL removes usages of the MainAllocator instance in new spaces
    and the MergeCompactionSpace() method.
    
    Bug: chromium:1480975
    Change-Id: Ied359c12c16d1c062a0724b5b4997d429a4c8bdf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916175
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90321}

commit 902341d04f4f135250b1aff3f937886d3338ee00
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Oct 9 21:11:25 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/bc93fc0..b1221f6
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/878f3f1..657ac24
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/4d83729..30e34f3
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/6aed4f5..92d8c4e
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/24bdc4f..8fc1797
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767654191148947825
    
    Change-Id: I6b94a093acdad4d5adb9152f7e812b62ff9a4856
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922000
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90320}

commit 37dee475adb5ca8baa6bb6e386fc4c94afc2156c
Author: Frank Tang <ftang@chromium.org>
Date:   Fri Sep 29 12:14:50 2023 -0700

    [intl] Sync to ECMA402 PR811
    
    Fix order of rounding* option reads and resolvedOptions() of NumberFormat and PluralRules
    
    https://github.com/tc39/ecma402/pull/811
    
    Details:
    
    Change order of rounding* option reads and resolvedOptions()
    1. Move the reading of "roundingPriority" from before reading "roundingIncrement" to after reading "roundingMode" so these three fields are read in alphabetic order. https://tc39.es/ecma402/#sec-setnfdigitoptions
    
    2. Move the output order of "roundingIncrement" from after output "roundingMode" to before that so these two fields are read in alphabetic order in the resolvedOptions of both Intl.NumberFormat and Intl.PluralRules. https://tc39.es/ecma402/#sec-intl.numberformat.prototype.resolvedoptions https://tc39.es/ecma402/#sec-intl.pluralrules.prototype.resolvedoptions
    
    3. Move the output of "roundingPriority" from after "trailingZeroDisplay" before that to sync w/ Intl.NumberFormat after PR768. https://tc39.es/ecma402/#sec-intl.pluralrules.prototype.resolvedoptions
    
    4. Move the output of "pluralCategories" from after "trailingZeroDisplay" to before "roundingIncrement" so these options will be in alphabetic order. https://tc39.es/ecma402/#sec-intl.pluralrules.prototype.resolvedoptions
    
    
    Bug: v8:14308
    Change-Id: I37168bf0a6e03c0459c723c98feb8b34d95413fa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4855044
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Frank Tang <ftang@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90319}

commit ea996ad04a684e32cd93018f0aad2f46e6b86975
Author: Nicolò Ribaudo <nribaudo@igalia.com>
Date:   Thu Sep 28 13:46:35 2023 +0900

    [import-attributes] Remove support for numeric keys
    
    During the 2023-09 TC39 meeting the proposal has been updated to remove support
    for bigint and float literals as import attribute keys, due to implementation
    difficulties in other engines and minimal added value for JS developers.
    
    GH issue: https://github.com/tc39/proposal-import-attributes/issues/145
    
    Bug: v8:13856
    Change-Id: I0ede2bb10d6ca338a4b0870a1261ccbcd088c16f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4899760
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Joyee Cheung <joyee@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#90318}

commit efba717140b45fc668b63b9542fb1a832598d0d4
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Oct 9 15:47:23 2023 +0800

    [riscv] Fix the problem of writing out of bounds memory
    
    Change-Id: I2feeedbd86d1af2179a13511d36a5d09aa424ea6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4921511
    Commit-Queue: Yahan Lu <yahan@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90317}

commit 715964d7b404e5d4edf9220d37611efc3595ad65
Author: Lu Yahan <yahan@iscas.ac.cn>
Date:   Mon Oct 9 16:47:41 2023 +0800

    [riscv][compres-ptr] Fix LoadFeedback segment fault
    
    Change-Id: Id07305855ea1bda68113903003a15aa4ca537733
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4921691
    Auto-Submit: Yahan Lu <yahan@iscas.ac.cn>
    Reviewed-by: Ji Qiu <qiuji@iscas.ac.cn>
    Commit-Queue: Ji Qiu <qiuji@iscas.ac.cn>
    Cr-Commit-Position: refs/heads/main@{#90316}

commit 372c0fdeaa9f1b93679f7bbfb0ef3b01d63bbbb7
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Mon Oct 9 21:49:41 2023 +0000

    [array-from-async] Remove unnecessary comment
    
    This CL removes an unnecessary comment about built-in
    promises as values.
    
    Bug: v8:13321
    Change-Id: I5bc60f9302295b137339b117894a5293ba004667
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4923121
    Auto-Submit: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Commit-Queue: Shu-yu Guo <syg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90315}

commit d17078c169af411c37dec18c09983e48efb2e8df
Author: Eva Herencsarova <evih@google.com>
Date:   Mon Oct 9 19:21:00 2023 +0200

    [turboshaft][wasm] Add Dataview.setInt32() to Turboshaft
    
    Bug: v8:14108
    
    Change-Id: I863a7b42b2b8f5dc847145568715cddeb40bd652
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905769
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Eva Herencsárová <evih@google.com>
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90314}

commit fd0849ba15747a674e128995120ddb90422329d6
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Oct 9 09:05:07 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/7c58dc7..bc93fc0
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/bf36a1f..88f60e4
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767699490450373969
    
    Change-Id: I20ffd67e51590ba4aa66efa6311f5cfe813ced01
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4921995
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90313}

commit e89590eb184e0486c90a329266f5855ee5b8be61
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Oct 6 13:54:38 2023 +0200

    [heap] Remove AllocateRaw method on Space
    
    This CL removes the AllocateRaw method on spaces. Callers now need
    to allocate on a space through the HeapAllocator or
    EvacuationAllocator classes.
    
    Bug: chromium:1480975
    Change-Id: I73c214fb155e6ff435e341962a98a5c31a841751
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915803
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90312}

commit 42ca308469236e6355a504e5faf87d31404268f5
Author: Marja Hölttä <marja@chromium.org>
Date:   Mon Oct 9 17:08:25 2023 +0200

    [todoc]: Add TODOC for PropertyCell
    
    Change-Id: I16c71336c44bb5b7d72f7f3c9222ef4f4feec446
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922909
    Auto-Submit: Marja Hölttä <marja@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Marja Hölttä <marja@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90311}

commit 731b1f56f054f947d0cbfbb9f5759797d4e00c4a
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 9 15:25:39 2023 +0200

    [liftoff] Refactor loading of integer constants
    
    Avoid using `WasmValue` which is way more general than needed here. All
    constants we will encounter at runtime will be 32-bit values, hence pass
    the `kind` separately and pass the constant as `int32_t`.
    
    R=dlehmann@chromium.org
    
    Change-Id: Ic20fa359d53ff5f97b18353da353d431679ad783
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915648
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90310}

commit 3fde8501726c98f5e1bbe753fdd8874ba6262f46
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 9 15:29:28 2023 +0000

    Revert "[liftoff] Add support for direct C calls"
    
    This reverts commit 5fb5de9cfc6c54cf8710db01f395299d5acb435b.
    
    Reason for revert: Compile error due to unused variable: https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20-%20builder/70435/overview
    
    Original change's description:
    > [liftoff] Add support for direct C calls
    >
    > This adds support for calling C functions and passing parameters
    > according to the C calling conventions. So far we could only call C
    > functions that expect their input in a pointer-referenced
    > stack-allocated buffer.
    >
    > For now, the four bit-rotating C functions are moved over. The same
    > infrastructure will be used for atomic notify in a follow-up, and we can
    > decide to move more functions over to generate smaller code and increase
    > performance.
    >
    > R=dlehmann@chromium.org
    >
    > Bug: v8:14101
    > Change-Id: Ifb85f57afa41f6a77d612fbd20076e37ce10bf99
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905288
    > Commit-Queue: Clemens Backes <clemensb@chromium.org>
    > Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90308}
    
    Bug: v8:14101
    Change-Id: I39f7b284473543bb2f616aa4ba30e45108f2a08c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4922911
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Auto-Submit: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90309}

commit 5fb5de9cfc6c54cf8710db01f395299d5acb435b
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 9 16:12:16 2023 +0200

    [liftoff] Add support for direct C calls
    
    This adds support for calling C functions and passing parameters
    according to the C calling conventions. So far we could only call C
    functions that expect their input in a pointer-referenced
    stack-allocated buffer.
    
    For now, the four bit-rotating C functions are moved over. The same
    infrastructure will be used for atomic notify in a follow-up, and we can
    decide to move more functions over to generate smaller code and increase
    performance.
    
    R=dlehmann@chromium.org
    
    Bug: v8:14101
    Change-Id: Ifb85f57afa41f6a77d612fbd20076e37ce10bf99
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905288
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90308}

commit 1929747bf46bfda7b4825d871559094a4321554c
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Oct 9 15:35:48 2023 +0200

    [maglev] Optimize Float64 hole check
    
    Change JumpIfHole to first check for NaN, and only then check for the
    hole bits, matching TurboFan's behaviour. Additionally, only check the
    hole's top 32 bits, since these can be encoded in an immediate (also
    matching TurboFan).
    
    Bug: v8:7700
    Bug: v8:8264
    Change-Id: I0cb319c41585858aea726a7f3d737cc9376be968
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4906278
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90307}

commit 43e538e45a6a3ad237e594e93fea116a7b9e0551
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 5 11:40:32 2023 +0200

    [test] Move skipped test to the right section
    
    The wasm/grow-shared-memory test shares ABs between workers and grows
    them there, hence it's inherently unpredictable.
    
    Add it to the existing section and mark the open issue as fixed.
    
    R=manoskouk@chromium.org
    
    Fixed: v8:12605
    Change-Id: I9f4336de046cbdb92b7227ff9b552e5e78abf7a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4913734
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90306}

commit 712faa09415a54f60fac2304406fbec990905c53
Author: Clemens Backes <clemensb@chromium.org>
Date:   Thu Oct 5 11:38:37 2023 +0200

    [test] Skip test in predictable mode
    
    The new (since https://crrev.com/c/4872536) test shared ABs between
    Workers and is hence unpredictable. Add it to the existing list in
    mjsunit.status.
    
    R=ahaas@chromium.org
    
    Fixed: v8:14361
    Change-Id: I25fb4e8b4ca8216932b4f90386451867baceda64
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915214
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90305}

commit 0b00ae64fe8e29951256cbd726976b3e3f84acb8
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Oct 6 13:02:21 2023 +0200

    Reland "[heap] Move virtual method calls into MainAllocator"
    
    This is a reland of commit ae51af14fd73dcffdc96a5bae8bb62687ec864f6
    
    This CL was rebased on https://crrev.com/c/4915802 in order to
    fix the reason for revert. This version therefore doesn't need the
    AllocatorPolicyKind workaround but instead uses a virtual method
    CreateAllocatorPolicy() on SpaceWithLinearArea instead.
    
    Original change's description:
    > [heap] Move virtual method calls into MainAllocator
    >
    > So far allocation slow paths are defined as virtual methods on
    > SpaceWithLinearArea. This is necessary because the slow path is
    > space-specific and differs between paged space, semi space new space
    > and paged new space.
    >
    > This CL moves the virtual call into subclasses of the AllocationPolicy
    > class in main-allocator.cc. Each subclass then performs a direct call
    > to the space specific implementation for now but this code will
    > eventually be moved into main-allocator.cc as well.
    >
    > Bug: chromium:1480975
    > Change-Id: Ie765b7603e5ffe26faea0b87d7a2829dfe9296c7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4903823
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90270}
    
    Bug: chromium:1480975
    Change-Id: I15ce77b2d02d8416bdfba1218563a9d1e99076e1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915799
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90304}

commit d7718dd86e1b6758b7fe81559b1bb1ee585b42d8
Author: Clemens Backes <clemensb@chromium.org>
Date:   Mon Oct 9 14:43:11 2023 +0200

    [liftoff] Rename StackTransferRecipe to ParallelMove
    
    The StackTransferRecipe is used for multiple things now, not only to
    transfer one value stack to another one (in MergeStackWith and friends;
    this is where the original name came from).
    
    It's also 340 lines of implementation by now, so move it to a separate
    header file.
    
    This creates the situation that we now have headers (parallel-move.h and
    liftoff-assembler-<arch>.h) that want to include either other.
    We thus apply V8's default solution and split off an "inl header" for
    the two where we define some of the inlined functions that are declared
    in the actual header.
    To that end, we also rename the existing liftoff-assembler-<arch>.h
    header to liftoff-assembler-<arch>-inl.h, because those headers also
    just define functions that have been declared in the actual header. This
    also make us obey the rule that non-inl-headers cannot include
    inl-headers.
    
    R=dlehmann@chromium.org
    
    Bug: v8:14101
    Change-Id: Ie5f6d3a21f4986143855a83826d00d706faa4b7e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905773
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Reviewed-by: Daniel Lehmann <dlehmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90303}

commit 8449af375a7282a4347b197146fc838ccc1bc719
Author: Eric Leese <leese@chromium.org>
Date:   Thu Oct 5 12:00:05 2023 +0200

    Promise.finally() should not be predicted to catch
    
    This changes the catch prediction code to look for calls to the
    finally builtin and not consider them a catch. Also, for the
    callback for the then handler (for ignore listing purposes) we
    get the wrapped callback.
    
    Bug: chromium:1489312
    Change-Id: Iece7d92076f4ab0bec6a7d7cd422ec16a0e3260a
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915215
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90302}

commit b851bcaf94e932f68d83d51b5f58216dd767bdc9
Author: Samuel Groß <saelo@chromium.org>
Date:   Mon Oct 9 08:37:49 2023 +0000

    [sandbox] Prepare for allocating objects in trusted space
    
    The trusted spaces are now located outside of the sandbox, and therefore
    outside of the main pointer compression cage, but no objects are
    allocated in them yet. This CL changes a couple of places in V8 to
    prepare for this. In particular, it
    - prevents (compressed pointer) comparisons between objects inside the
      sandbox and objects in trusted space
    - adds checks to the heap object verification code to ensure that only
      trusted objects are allocated in trusted space.
    - generalizes the snapshot serializer to deal with trusted objects other
      than Code
    - adds routines for initializing and writing indirect pointer fields
    
    Bug: chromium:1473677
    Change-Id: If35540610e95f9b32182c8edde7e86e58bc461aa
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4859167
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Reviewed-by: Jakob Linke <jgruber@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90301}

commit b6fd304bec8363c1cef2c28d8ad0816df16584f5
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Oct 9 10:43:57 2023 +0200

    [maglev] Use IsObjectType for kEqual CompareObjectType
    
    This will make these comparisons use a static root comparison where
    possible. This should fix a regression after merging CompareObjectType
    and Jump, which lost this optimisation.
    
    Bug: v8:7700
    Bug: chromium:1490957
    Change-Id: Ic3466d95bf3406cdcf5556fc467fa43c8d79ee34
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916489
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90300}

commit 06caff224a290898cc013a35a02c756a992306f6
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Oct 9 11:38:25 2023 +0200

    [compiler] Improve branch fusion when operations are skipped
    
    This change is motivated by the following graph:
    
      471: Int32SubWithOverflow(464, 6)
      472: Projection[0](471)
      473: Projection[1](471)
      474: DeoptimizeIf[Overflow, FeedbackSource(INVALID)](473, 470)
      475: Int32LessThanOrEqual(43, 472)
      476: Branch[Unspecified, None](475) -> B54, B61
    
    During ISEL, 475 is fused with 476, which means that is thus never
    marked as Defined. As a result, when trying to cover fuse 471 in 474,
    we decide not to, because 472 has a use in the current block that is
    not yet Defined.
    
    With this change, we'll realize that the use of 472 will in fact never
    be Defined, so we can ignore it, and we can then indeed fuse 471 with
    474.
    
    Bug: v8:12783
    Change-Id: I76a70e99a3884963f2c8129aa59773240a01ebca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4921729
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90299}

commit 28bedca3d693e9cf27d86d361ca68ac12a4bd1d1
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Mon Oct 9 11:33:01 2023 +0200

    [turboshaft] Handle AtomicWord32Pair operations in GraphBuilder
    
    Drive-by: Some cleanup and improvements in AtomicWord32PairOp
    
    Bug: v8:12783
    Change-Id: I898ac8f7d75cccfca49687450337c2304ce6a351
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916651
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90298}

commit efb1d76c3f037f206f87ca0d68077bdd7d7cefd9
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Oct 9 11:57:23 2023 +0200

    [wasm][turboshaft] Separate lowering phase + late escape analysis
    
    Move the wasm lowering to a separate phase, so allocations can be
    properly analyzed in the following phase.
    Also add the late escape analysis reducer to get rid of non-escaping
    allocations.
    
    Bug: v8:14108
    Change-Id: I57b255d4db8c9f4bb135f4f53ac1e534a822e4df
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916174
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90297}

commit c95e0ee556e685b9ba5d520cb777e932422ca9d9
Author: pthier <pthier@chromium.org>
Date:   Mon Oct 9 09:28:54 2023 +0200

    Reland "[csa] Fix hash lookup for shared strings marked for externalization"
    
    This is a reland of commit 9858209aae49859fbfa9d57f937d630f615b8e21
    
    Changes since revert:
    Move regression test to shared-memory/ to skip it with incompatible
    build configs.
    
    Original change's description:
    > [csa] Fix hash lookup for shared strings marked for externalization
    >
    > The case that a shared string marked for externalization could have
    > a hash representing an integer index in the forwarding table was
    > missing.
    >
    > Drive-by: Add %ShareObject intrinsic for easier testing wihout
    > spinning up a worker.
    >
    > Bug: chromium:1487973
    > Change-Id: I1fe3d0b7bf113abdf5f92e403b95132e2b50228c
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4912943
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Patrick Thier <pthier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90278}
    
    Bug: chromium:1487973
    Change-Id: Ibfa933a604bd33e9e59d82ddde79827fc0dfe1d7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915647
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90296}

commit 94d44af3f774cb57f7f04b43bef3a644c9878644
Author: Eric Leese <leese@chromium.org>
Date:   Thu Oct 5 16:49:11 2023 +0200

    Ignore listing for exceptions considers functions exception will hit
    
    We want the ignore listing logic for pause on caught/uncaught
    exception to consider those functions an exception/rejection is
    predicted to hit, whether synchronous or asynchronous. Tests
    illustrate changed behavior on stopping on exceptions in
    ignore listed code, particularly caught exceptions, where we
    previously would not stop if the top frame is ignored but will now
    stop if any frame it is expected to pass through is not ignored,
    and also asynchronous rejections, where we previously only
    considered the synchronous stack frames.
    
    Fixed: chromium:1291064
    Change-Id: I985808a1a338012c9733d60b5ec7667288948b97
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915213
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90295}

commit 4aed9cb78234048f42cb4f04d225b12cf8dea28d
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Oct 6 12:37:19 2023 +0200

    Reland "[heap] Move LAB storage out of Space"
    
    This is a reland of commit b812c219534ac0306bdf925f3440a59bf21c5a7e
    
    This reland is unchanged from the original CL. It appears that it
    didn't cause the failures it was reverted for.
    
    Original change's description:
    > [heap] Move LAB storage out of Space
    >
    > So far the MainAllocator instances generally lived in the
    > SpaceWithLinearArea class. This CL moves that storage out of
    > SpaceWithLinearArea into the HeapAllocator and EvacuationAllocator
    > classes. However, SpaceWithLinearArea still has a pointer to the
    > MainAllocator instance even with this CL. Subsequent CLs will try to
    > remove this field as well.
    >
    > Bug: chromium:1480975
    > Change-Id: Ifc88637c3ddc1e5a94f46875f04ad5ac625917b9
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915802
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90279}
    
    Bug: chromium:1480975
    Change-Id: I7a6063d86f25aae07b6d0b6ad3166e95157cf813
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915646
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90294}

commit bd824ee8e917a8976dbb0116001f37bf227d2628
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Oct 6 12:36:28 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Optimize array.new variants
    
    This CL adds optimizations for the various array.new instructions:
    - array.new
    - array.new_default
    - array.new_fixed
    
    To do this, a new turboshaft operation WasmAllocateArrayOp is
    introcduced and a corresponding lowering in the WasmLoweringReducer.
    
    (array.new_data and array.new_segment are implemented via builtin
    calls and therefore not changed.)
    
    Bug: v8:14108
    Change-Id: I9ea20e2479c372a4e37b53f65f6f80860540dc63
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916652
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90293}

commit ad4de008bd2e691d798ff6ca48465079cda60add
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Oct 9 10:08:16 2023 +0200

    [turboshaft] Add iterator for SnapshotTable-friendly graph iteration
    
    The order of visit of each blocks can be important for analyzers that
    use the SnapshotTable, in order to avoid moving too much in between
    Snapshots.
    
    Bug: v8:14337, v8:12783
    Change-Id: Ic0231634eb1c793fb3786582e5a46e5cd086e013
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4919173
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90292}

commit 9106241d38192c2f20e85e6dbe022dc64de2045b
Author: Ho Cheung <uioptt24@gmail.com>
Date:   Sun Oct 8 00:25:45 2023 +0800

    [object] Remove PROHIBITS_OVERWRITING API
    
    Completely remove PROHIBITS_OVERWRITING API
    
    Bug: None
    Change-Id: Ie8f423dc3d4b35966e5e11c0b51c0a5bd37f08ff
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915645
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Ho Cheung <uioptt24@gmail.com>
    Cr-Commit-Position: refs/heads/main@{#90291}

commit 08f0376b62d696ddaf168f13d659916227f059ff
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Oct 6 11:04:22 2023 +0200

    [wasm-gc] Rename extern.internalize / extern.externalize
    
    This was changed in https://github.com/WebAssembly/gc/issues/432.
    
    Bug: v8:7748
    Change-Id: I0a8ebe0050fd5f1a0dc8082214e9774fa4cca413
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916657
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90290}

commit 06fd89b2c4e444272de30aa16a7c5a119dead84a
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Mon Oct 9 07:44:13 2023 +0200

    [turboshaft][wasm] Fix traces for tail calls in inlined functions
    
    Tail call stack traces should not include the replaced frame.
    Therefore, when we generate a call out of a tail call when inlining,
    we need to set the new call's position to the inlined call's position.
    
    Bug: v8:14108, v8:12166
    Change-Id: I23e717b739bf2f5a488819f987d3b4ed032bcf6b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916172
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90289}

commit ccf916952aae99f9a2768908ce2fa146ef268c80
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sun Oct 8 09:15:49 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/0338072..7c58dc7
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767790086337101569
    
    Change-Id: Id12e1861fa796eec360f62f208c89f82e5b92c25
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4919199
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90288}

commit 9fa332c8b69c18ada9951f7187efd5fbc5a79dd3
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Oct 7 21:10:56 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/third_party/fuchsia-sdk/sdk: version:15.20230930.1.1..version:15.20231007.2.1
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767835384798602321
    
    Change-Id: I6aaf9f4050396e1f5640040d60d21f31886f02fd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4917067
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90287}

commit c79092ca6783e75314354a260449ae0a3501ef8b
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Sat Oct 7 09:04:30 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/d953546..878f3f1
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/3023d15..24bdc4f
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767880684603981985
    
    Change-Id: If18a9e7f96dddd595110ea31e74ab75d718eb86c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4919714
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90286}

commit 65dfc43ea42889e682e597118b683ae12accd669
Author: Omer Katz <omerkatz@chromium.org>
Date:   Sat Oct 7 07:54:54 2023 +0000

    Revert "cppgc: Rewire atomic sweeping"
    
    This reverts commit 517ab248723851bfe2a390d4ceb70c648b72b621.
    
    Reason for revert: Break debug chromium builds because heap verification finalizes sweeping before `FinishAtomicSweepingIfNeeded` is called, making a DCHECK that sweeping is in progress fail.
    
    Original change's description:
    > cppgc: Rewire atomic sweeping
    >
    > Instead of finishing atomic sweeping when sweeping starts delay the
    > actual sweeping phase till after leaving the V8 safepoint. This
    > prevents Oilpan and V8 allocations from interfering with heap layouts
    > and verifiers.
    >
    > The concrete case is that heap verification runs at the end of the
    > safepoint and assumes no LABs are present. Atomic Oilpan sweeping may
    > call back into V8 in finalizers which may create a LAB via an
    > allocation. This is undefined behavior as V8 is still in a safepoint
    > and should thus be worked around.
    >
    > Bug: chromium:1488263
    > Change-Id: Id9fc696909c42c75cf7de0001205d6870aa939ed
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905775
    > Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    > Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    > Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90275}
    
    Bug: chromium:1488263
    Change-Id: If9d91bf9d231a01c154cb3e225d847b74f020642
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916665
    Auto-Submit: Omer Katz <omerkatz@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90285}

commit 2c5d2ea17f8beacc5dfbf29c31326d314ea7c804
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Oct 6 21:06:31 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/4fa7184..0338072
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/df30961..6aed4f5
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/b6e1ac1..db9800c
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767925983386768049
    
    Change-Id: I3dc79289b8da5693c58baa39e2d4a802bb3ea054
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916409
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90284}

commit 268d4c7893936ce63269b360809f228cd30243c6
Author: Deepti Gandluri <gdeepti@chromium.org>
Date:   Fri Oct 6 19:39:37 2023 +0000

    Revert "[csa] Fix hash lookup for shared strings marked for externalization"
    
    This reverts commit 9858209aae49859fbfa9d57f937d630f615b8e21.
    
    Reason for revert: Regression test fails debug bot: https://logs.chromium.org/logs/v8/buildbucket/cr-buildbucket/8767965235976156465/+/u/Check/regress-crbug-1487622
    
    Original change's description:
    > [csa] Fix hash lookup for shared strings marked for externalization
    >
    > The case that a shared string marked for externalization could have
    > a hash representing an integer index in the forwarding table was
    > missing.
    >
    > Drive-by: Add %ShareObject intrinsic for easier testing wihout
    > spinning up a worker.
    >
    > Bug: chromium:1487973
    > Change-Id: I1fe3d0b7bf113abdf5f92e403b95132e2b50228c
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4912943
    > Reviewed-by: Igor Sheludko <ishell@chromium.org>
    > Commit-Queue: Patrick Thier <pthier@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90278}
    
    Bug: chromium:1487973
    Change-Id: Ibff5a187b4630cda790031af92a1955096439281
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4917095
    Auto-Submit: Deepti Gandluri <gdeepti@chromium.org>
    Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90283}

commit 750b0583f04fec6ba268cb7bcc0d4a906f5a8eca
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Fri Oct 6 09:16:33 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/d0b39db..4fa7184
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/60adf7b..df30961
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/f775f73..22e1594
    
    Roll created at https://cr-buildbucket.appspot.com/build/8767971281775164561
    
    Change-Id: I0fb8a73a05810163cd911e736e7e2dd4b5e579ca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916361
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90282}

commit 56e7eca788181efafbe28c80e3006500eedc24d7
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Fri Oct 6 15:53:37 2023 +0000

    Revert "[heap] Move LAB storage out of Space"
    
    This reverts commit b812c219534ac0306bdf925f3440a59bf21c5a7e.
    
    Reason for revert: Seems to break a regression test on stress_js_bg_compile_wasm_code_gc variant:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20debug%20-%20single%20generation/11979/overview
    
    Original change's description:
    > [heap] Move LAB storage out of Space
    >
    > So far the MainAllocator instances generally lived in the
    > SpaceWithLinearArea class. This CL moves that storage out of
    > SpaceWithLinearArea into the HeapAllocator and EvacuationAllocator
    > classes. However, SpaceWithLinearArea still has a pointer to the
    > MainAllocator instance even with this CL. Subsequent CLs will try to
    > remove this field as well.
    >
    > Bug: chromium:1480975
    > Change-Id: Ifc88637c3ddc1e5a94f46875f04ad5ac625917b9
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915802
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90279}
    
    Bug: chromium:1480975
    Change-Id: I3a63ef1cedef6b5e2bbae293fec7c8fcd16b5b35
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915644
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Owners-Override: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90281}

commit bbe4625df93a14a7dec251538a7fe6badd2636e0
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Oct 6 15:57:52 2023 +0200

    [turboshaft] Remove loops with 0 iterations during LoopUnrolling
    
    Bug: v8:12783
    Change-Id: I06076b814e79670007a1e1a5867b4066f1102e68
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905774
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90280}

commit b812c219534ac0306bdf925f3440a59bf21c5a7e
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Oct 6 12:37:19 2023 +0200

    [heap] Move LAB storage out of Space
    
    So far the MainAllocator instances generally lived in the
    SpaceWithLinearArea class. This CL moves that storage out of
    SpaceWithLinearArea into the HeapAllocator and EvacuationAllocator
    classes. However, SpaceWithLinearArea still has a pointer to the
    MainAllocator instance even with this CL. Subsequent CLs will try to
    remove this field as well.
    
    Bug: chromium:1480975
    Change-Id: Ifc88637c3ddc1e5a94f46875f04ad5ac625917b9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915802
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90279}

commit 9858209aae49859fbfa9d57f937d630f615b8e21
Author: pthier <pthier@chromium.org>
Date:   Thu Oct 5 13:16:54 2023 +0200

    [csa] Fix hash lookup for shared strings marked for externalization
    
    The case that a shared string marked for externalization could have
    a hash representing an integer index in the forwarding table was
    missing.
    
    Drive-by: Add %ShareObject intrinsic for easier testing wihout
    spinning up a worker.
    
    Bug: chromium:1487973
    Change-Id: I1fe3d0b7bf113abdf5f92e403b95132e2b50228c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4912943
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90278}

commit dbd8b4b0665d2da4ec95c4c724bcc0debc9ce4f2
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Fri Oct 6 14:26:46 2023 +0200

    [turboshaft] Introduce OptionalOpIndex
    
    Bug: v8:12783
    Change-Id: I6fdf0c7f66ec3cebd2b26ad9b9b47ea052d8057c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916659
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90277}

commit fc25ff01936b7ccdd7a2f3a64d3be026067fa4fb
Author: Darius M <dmercadier@chromium.org>
Date:   Fri Oct 6 13:43:45 2023 +0200

    [turboshaft] Extract LoopFinder into its own file
    
    LoopFinder was so far just used for LoopUnrolling, but will soon be
    used for additional things:
    
      - loop peeling
    
      - SnapshotTable-friendly forward-iteration of the graph
    
    Bug: v8:12783
    Change-Id: Ia252b1e17a066fe3dc033c941019e2fe17bff068
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915804
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90276}

commit 517ab248723851bfe2a390d4ceb70c648b72b621
Author: Michael Lippautz <mlippautz@chromium.org>
Date:   Fri Oct 6 11:45:04 2023 +0200

    cppgc: Rewire atomic sweeping
    
    Instead of finishing atomic sweeping when sweeping starts delay the
    actual sweeping phase till after leaving the V8 safepoint. This
    prevents Oilpan and V8 allocations from interfering with heap layouts
    and verifiers.
    
    The concrete case is that heap verification runs at the end of the
    safepoint and assumes no LABs are present. Atomic Oilpan sweeping may
    call back into V8 in finalizers which may create a LAB via an
    allocation. This is undefined behavior as V8 is still in a safepoint
    and should thus be worked around.
    
    Bug: chromium:1488263
    Change-Id: Id9fc696909c42c75cf7de0001205d6870aa939ed
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905775
    Reviewed-by: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90275}

commit 8f70ac300e2593e33f3f5461cd5decd40a77d6db
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Fri Oct 6 11:13:16 2023 +0200

    [heap] Move LAB creation out of space construction
    
    LABs for the main thread and GC evacuation threads were always
    created in the space constructor. However, this is problematic as
    we cannot use any virtual methods on the space while setting up the
    LAB. Our goal is anyways to move the LAB out of the space entirely,
    this CL is a step towards that goal.
    
    LABs are still stored in SpaceWithLinearArea but are now created
    using SpaceWithLinearArea::CreateMainAllocator() in the
    HeapAllocator and the EvacuationAllocator class.
    
    Bug: chromium:1480975
    Change-Id: Icdac1d9f0e2d52e18e17e322eebdb54dd14ce57e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916171
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90274}

commit 31d5ce97a38e25e76642f95bb48e725ba4e8aa31
Author: Simon Zünd <szuend@chromium.org>
Date:   Fri Oct 6 08:23:39 2023 +0000

    [debug] Fix crash when pausing while entering a 'with' scope
    
    This CL fixes a bug where we get the "paused scope" wrong. When
    "pause on exception" is enabled we can pause on the early bytecodes
    of a 'with' scope. The example here is attempting to load a undefined
    variable from the context which results in a ReferenceError.
    
    The mapped source position of the load bytecode points directly at the
    beginning of the scope, which we normally exclude. The fix is to also
    include the start scope boundary for 'with' scopes, similar to
    'class' scopes.
    
    Fixed: chromium:1482394
    Change-Id: I1b2051c2dab6533d38ca69284710ffc5d54b4496
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916656
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Reviewed-by: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90273}

commit 23fa3eb34fc6187eac986a4100786648e3be0679
Author: Manos Koukoutos <manoskouk@chromium.org>
Date:   Fri Oct 6 04:42:32 2023 +0200

    [turboshaft][wasm] Implement inlining infrastructure
    
    This CL implements inlining for turboshaft wasm. Inlining is
    implemented as part of graph generation.
    We add a `Mode` to the graph interface to signify whether a function
    is not inlined, inlined with an exception handler, or inlined without
    one. Inlined functions are passed parameters from the caller and jump
    to a special return block instead of returning. Also, thrown exceptions
    are passed to the caller, and handled there like function call
    exceptions.
    Node origins during compilations are updated to encode an inlining id
    in addition to the function offset.
    This CL does not handle:
    - proper inlining heuristics; instead the first 2 function calls are
      inlined,
    - inlining tail calls (although it does handle tail calls in the
      inlinee),
    - speculative inlining.
    
    Bug: v8:14108
    Change-Id: Ia4be29b7ff76c9b2bd08964f76d28743a38d85cd
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4907916
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90272}

commit 887135efef5ec7a1189e24a519574a6a5b974893
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Fri Oct 6 06:36:34 2023 +0000

    Revert "[heap] Move virtual method calls into MainAllocator"
    
    This reverts commit ae51af14fd73dcffdc96a5bae8bb62687ec864f6.
    
    Reason for revert:
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20-%20cfi%20-%20builder/11174/overview
    https://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux64%20UBSan%20-%20builder/11860/overview
    
    Original change's description:
    > [heap] Move virtual method calls into MainAllocator
    >
    > So far allocation slow paths are defined as virtual methods on
    > SpaceWithLinearArea. This is necessary because the slow path is
    > space-specific and differs between paged space, semi space new space
    > and paged new space.
    >
    > This CL moves the virtual call into subclasses of the AllocationPolicy
    > class in main-allocator.cc. Each subclass then performs a direct call
    > to the space specific implementation for now but this code will
    > eventually be moved into main-allocator.cc as well.
    >
    > Bug: chromium:1480975
    > Change-Id: Ie765b7603e5ffe26faea0b87d7a2829dfe9296c7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4903823
    > Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    > Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#90270}
    
    Bug: chromium:1480975
    Change-Id: I74cab5f5ac5d1b8f38bb4063567ef2a91588062c
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4915796
    Owners-Override: Michael Achenbach <machenbach@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Michael Achenbach <machenbach@chromium.org>
    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90271}

commit ae51af14fd73dcffdc96a5bae8bb62687ec864f6
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Thu Oct 5 22:27:10 2023 +0200

    [heap] Move virtual method calls into MainAllocator
    
    So far allocation slow paths are defined as virtual methods on
    SpaceWithLinearArea. This is necessary because the slow path is
    space-specific and differs between paged space, semi space new space
    and paged new space.
    
    This CL moves the virtual call into subclasses of the AllocationPolicy
    class in main-allocator.cc. Each subclass then performs a direct call
    to the space specific implementation for now but this code will
    eventually be moved into main-allocator.cc as well.
    
    Bug: chromium:1480975
    Change-Id: Ie765b7603e5ffe26faea0b87d7a2829dfe9296c7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4903823
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90270}

commit ed3fd3c5a98e9c0fbe2d4e743fe3744cca2ef9e5
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Thu Oct 5 21:06:40 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/12dbdb0..d0b39db
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/c3c2816..d953546
    
    Rolling v8/buildtools/reclient: re_client_version:0.113.0.8b45b89-gomaip..re_client_version:0.116.1.9128bc4-gomaip
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/0f519c0..bf36a1f
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/1a33dd1..4d83729
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/c2e0061..60adf7b
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/e0cb589..3023d15
    
    Rolling v8/third_party/zlib: https://chromium.googlesource.com/chromium/src/third_party/zlib/+log/3f0af7f..fef5869
    
    Roll created at https://cr-buildbucket.appspot.com/build/8768016579617497393
    
    Change-Id: I44eb42c6bac51a49a09208e713cb82dab23443e5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916917
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90269}

commit f73a63e6513b00e610d628a50aea5890c7b7354e
Author: pthier <pthier@chromium.org>
Date:   Thu Oct 5 15:02:31 2023 +0200

    [maglev] Ensure array lengths are smis when inlining builtins
    
    Array.prototpye.push/pop assumed the array length is always a smi, which
    is not guaranteed at compilation time when feedback is updated
    concurrently, and the length recorded in the known properties is from a
    non-array object.
    
    Bug: chromium:1487622
    Change-Id: Id4f498e2d28f4d7532739e9803ea997149dd697c
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4916170
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90268}

commit 91187a8c3075ac37119d971f4ac91de35bcf4990
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Oct 4 16:06:53 2023 +0200

    [wasm-gc][compiler] Propagate dead-ness on load elimination
    
    Bug: chromium:1487077
    Change-Id: Ie55e80a965c9ccd011eac1f897ad2f1708bef798
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905772
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90267}

commit c88a116e3a44e3227dfa72e007f73ac40a4bda81
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Thu Oct 5 13:00:56 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Optimize ref.func
    
    To enable optimizations for ref.func based on type information, a new
    high level WasmRefFuncOp is added.
    
    This CL also adds type refinement for global.get.
    
    Bug: v8:14108
    Change-Id: I33552175f392e713f3dcda5d9a0ab25480e37095
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4912657
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90266}

commit c2abd15a57490ee29320fd174c351eac237b2048
Author: Seth Brenith <seth.brenith@microsoft.com>
Date:   Mon Oct 2 14:26:14 2023 -0700

    [tagged-ptr] Update v8windbg to use Tagged<T>
    
    Now that V8 is consistently using Tagged<T> instead of plain T, this CL
    updates v8windbg to match. There are several parts to this change:
    
    1. In v8windbg-extension.cc, in Extension::Initialize, the extension
       previously registered a custom handler for every possible kind of
       object (every class inheriting from v8::internal::Object). With this
       change, the extension instead registers a handler for the wildcard
       type v8::internal::Tagged<*>. The implementation of
       V8CachedObject::Create, in object-inspection.cc, is updated to expect
       a value of type Tagged<T>, to match. This allows the extension to
       show the fields correctly whenever inspecting a value of type
       Tagged<T>.
    2. In object-inspection.cc, the function V8LocalValueProperty::GetValue
       defines how to get the synthetic "value" field from a Handle. This
       code used to represent the data from a Handle<T> as type T. With this
       change, the value of a Handle<T> is now represented as a Tagged<T>,
       which can in turn be inspected because the extension installed a
       handler for Tagged<*> as described above.
    3. In local-variables.cc, the extension adds the ability to inspect raw
       stack memory as an array of tagged values. This code must be updated
       to use the type Tagged<Object> instead of Object.
    4. There is now no need for debug_helper to provide a list of every
       object type, so this change cleans up unneeded code.
    
    Bug: v8:12710
    Change-Id: I3bb1b8a0b1706dd7da4b245aa8b538ca22b7b9d4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4908611
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Seth Brenith <seth.brenith@microsoft.com>
    Cr-Commit-Position: refs/heads/main@{#90265}

commit 7f11b52b7672662664404b5eef84448b39534aae
Author: Nico Hartmann <nicohartmann@chromium.org>
Date:   Thu Oct 5 14:08:53 2023 +0200

    [csa] Truncate with TruncateFloat64To... instead of ChangeFloat64To...
    
    In CodeStubAssembler::TryToInptr, we used the pattern
      x = ChangeFloat64ToIntPtr(value);
      y = RoundIntPtrToFloat64(x);
      x == y
    to decide if value is an integer. However, Change-operators assume
    that they preserve the value (that the conversion is reversible).
    Turboshaft exploits this fact and optimizes the above sequence into
      x == x
    which is clearly incorrect. This is observable with the new
    Turboshaft builtin pipeline (--turboshaft-csa).
    This is fixed by using a proper truncation operation.
    
    Change-Id: I38571bf5f06b956e2d48f9431549925ff0b89651
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4913735
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90264}

commit 0a7f6adb5b51a77fcb7d43eff3ec34687e13a7f4
Author: Omer Katz <omerkatz@chromium.org>
Date:   Wed Oct 4 14:58:19 2023 +0200

    [heap] Fix race in CheckAndUpdateOldToNewSlot
    
    Similar to crrev.com/c/4846980 that fixed a race between ephemeron
    remebered set processing and OLD_TO_OLD processing, we could also have a
    race between ephemerons and OLD_TO_NEW (HeapObjectReference::Update is
    using non-atomic reads and writes).
    Fix by aligning paths for the various remembered set such that all use
    the `UpdateSlot` method (which does use atomics).
    
    Bug: v8:14359
    Change-Id: I1106c9e5186376053924c7d8aeca77141cfa9415
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4907919
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Omer Katz <omerkatz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90263}

commit 7ffe9c8ade4829a659f883197e3d45efe6ca5fdf
Author: Ilya Rezvov <irezvov@chromium.org>
Date:   Wed Oct 4 17:16:30 2023 -0600

    Move static method WebAssembly.Function.type() to the prototype.
    
    To be compatible with the spec of JS Types wasm proposal moving `type()`
    method from to `WebAssembly.Function` instances by setting it on
    `WebAssembly.Function.prototype`.
    
    No additional tests required. Existing tests cover the change sufficiently.
    
    Bug: v8:7742
    Change-Id: I4708a8963126d5eed99c967984ae5625d8669886
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4912439
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Ilya Rezvov <irezvov@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90262}

commit 6113d74cc2efee3690ef1562cc2353a29ba5b280
Author: Jakob Linke <jgruber@chromium.org>
Date:   Thu Oct 5 13:52:16 2023 +0200

    Lazy-initialize the Temporal object
    
    .. since it adds roughly 300 JSFunction objects to the context
    snapshot. We can lazy-initialize it on first use instead and save all
    this work, under the assumption that Temporal is very rarely used.
    
    A new use counter kTemporalObject tracks this assumption.
    Chromium CL: crrev.com/c/4909544
    
    This change was initially proposed by leszeks@ at crrev.com/c/3865151.
    
    Bug: v8:13789
    Change-Id: I9be434e686c26403b7439f31cc27342676e77826
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4907918
    Commit-Queue: Jakob Linke <jgruber@chromium.org>
    Auto-Submit: Jakob Linke <jgruber@chromium.org>
    Commit-Queue: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90261}

commit dc6167a48361e6035ca021eb185e975ab1001559
Author: Samuel Groß <saelo@chromium.org>
Date:   Wed Oct 4 11:34:46 2023 +0000

    [sandbox] Allocate trusted space outside of the sandbox
    
    With this CL, we now use a special page allocator to allocate the
    backing memory for trusted space pages. This allocators allocates memory
    out of the new TrustedRange, which is a virtual address space
    initialized once per process and located outside the sandbox.
    We also introduce a IsTrustedSpaceObject predicate that can be used to
    determine whether an object lives in trusted space (and so outside of
    the main pointer compression cage).
    
    Bug: chromium:1473677
    Change-Id: Ie6468550a16dcc159ac2f729e1f4c08f7846c2ef
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4838714
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Commit-Queue: Samuel Groß <saelo@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90260}

commit 8f69e41747b826f89249eaee8b91f8ca2641f70d
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Thu Oct 5 08:34:35 2023 +0200

    Bump timeout on compile-time benchmark
    
    Times out on Android:
    http://shortn/_TfBSpt4JcA
    
    No-Try: true
    Change-Id: I1640d2eaccfd79ecc67a2204917df6e8c1d64a9f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4912479
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90259}

commit 829e8d18d73e21807c78223b0cc107c76c80da27
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Wed Oct 4 21:06:22 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/5407b3c..12dbdb0
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/c8bee3e..c3c2816
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/88124d5..1a33dd1
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/3008d7e..c2e0061
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/a094e25..e0cb589
    
    Rolling v8/third_party/libc++abi/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi/+log/e8e4eb8..b6e1ac1
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/7608093..2ce7927
    
    Roll created at https://cr-buildbucket.appspot.com/build/8768107175028040209
    
    Change-Id: Ia20c680a586337c08dd73cbd736855493221d5e2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4911532
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90258}

commit add543518af59e16d3ca8ab0b57135ab960d8072
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Wed Oct 4 22:13:58 2023 +0200

    Revert "heap: Remove black allocation"
    
    This reverts the change (and the related one with the
    unbounded registry).
    
    The change caused serious regressions, likely because
    the write-barrier doesn't bail out now for objects in
    labs.
    
    Bug: v8:14158, chromium:1489050
    Change-Id: Ib4bafe351e1bcc3c8131eaf057e6a424e3b31f29
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4913733
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Auto-Submit: Anton Bikineev <bikineev@chromium.org>
    Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90257}

commit 44702d6ea9c1bce9c95316e3aca41c14e0e8533f
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Tue Sep 26 22:13:39 2023 +0000

    Revert "[test262] Export set methods tests to staging"
    
    This reverts commit f4e862d29f6aeaa66b5e8e755dc70fe7cb2bc243.
    
    Reason for revert: Fix lint errors (missing description) so the bot can export them automatically.
    
    Original change's description:
    > [test262] Export set methods tests to staging
    >
    > This CL adds three tests from set method tests to the staging
    > directory.
    >
    > Bug: v8:13556
    > Change-Id: I80665df5c398e5f99e9e5d4e4ecc60a7232c68f7
    > Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4740296
    > Reviewed-by: Shu-yu Guo <syg@chromium.org>
    > Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    > Cr-Commit-Position: refs/heads/main@{#89327}
    
    Bug: v8:13556
    Change-Id: Idd5e3f0240b2e8f49f57ff949505c02e755ece5b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4892384
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Owners-Override: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90256}

commit f88bffbf2fac7029c189ae6662131ba0e10ce87c
Author: Milad Fa <mfarazma@redhat.com>
Date:   Tue Oct 3 15:04:20 2023 +0000

    S390: Only use 2 registers for kFpReturnRegisters
    
    The number of fp return registers is assumed to be 2 at the moment.
    This change is needed for the port of wasm-to-js wrapper.
    More details available under the comment section of
    https://crrev.com/c/4757150
    
    Change-Id: I1e65c72288ec42de0056daf94eda7c0d43373114
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4908360
    Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90255}

commit bbf7d1573b725e21e382dcaf24e7b7c6d0583f96
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Wed Oct 4 16:49:44 2023 +0200

    heap: Unbound the lab registry
    
    Avoid using the hard limit for entries. In addition, to support faster
    snapshotting, compact entries on freeing to avoid sparse iteration
    during snapshotting. This simplifies the code by removing the free-list
    and the allocated-list.
    
    The current CL doesn't shrink-to-fit the table. Supporting this would
    be trivial though.
    
    Bug: v8:14158
    Change-Id: I9a8b0a0535e5b6f0a0ed491a6db244d148596e18
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4902826
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90254}

commit 58610b97b372296d50ebbdf6967bcb29174fdef8
Author: Eric Leese <leese@chromium.org>
Date:   Mon Oct 2 12:50:48 2023 +0200

    Refactor PromiseHasUserDefinedRejectHandler into WalkPromiseTree
    
    This change updates the promise tree walking portion of the catch
    prediction code to accept a callback that can be run on every handler
    a rejection is expected to pass through. This is a prerequisite for
    updating the behavior of pause on exception in ignore listed code.
    
    Bug: chromium:1291064
    Change-Id: If9d3e83a17db641616e4a31c57ca0fa505df42a7
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4892856
    Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90253}

commit b9c06ff7679ba996664932b7c5cdb5ecdd01a923
Author: Andreas Haas <ahaas@chromium.org>
Date:   Wed Oct 4 16:06:48 2023 +0200

    [wasm] Disable profiler tests on simulators
    
    The test fails non-deterministically on arm simulator, see
    https://crbug.com/v8/14360. For now, I think it's good to disable the
    test. If it's just a simulator issue, then this is low priority.
    Otherwise the issue will eventually show up on other bots as well.
    
    R=cbruni@chromium.org
    
    Bug: v8:14360
    Change-Id: Iacf16ce29b54eb027d18525892f3abb025e7632b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4907920
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Commit-Queue: Andreas Haas <ahaas@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90252}

commit c998d1b68a79fabd6f6eadbc3b100bcab6a55770
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Oct 4 15:36:03 2023 +0200

    Add performance micro-benchmarks for compile-time
    
    Change-Id: Iaf87f59cf6dc0051fa08ff67b1c86ec6c68ced49
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905665
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Reviewed-by: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90251}

commit fb76c2c71fb3e97d532922c740e3b56b8ea57b7b
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Oct 4 14:58:46 2023 +0200

    [futex][cleanup] Replace single-use scope object
    
    The only scope that instantiated the ResetWaitingOnScopeExit class has a
    single exit only. So instead of the scope object, we can just reset the
    waiting_ field before leaving that scope.
    
    R=marja@chromium.org
    CC=dlehmann@chromium.org
    
    Bug: v8:14101
    Change-Id: I5d85d745f21ff96277b3f7fea6edb9d2711a464f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4887667
    Reviewed-by: Marja Hölttä <marja@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90250}

commit 28eca1f91276aee0bc6469dd3d5125900fdb211f
Author: Clemens Backes <clemensb@chromium.org>
Date:   Wed Oct 4 14:48:06 2023 +0200

    [wasm][memory64][test] Allow growing to fail
    
    Growing a big memory can always fail. Allow this in the test, similar to
    a few lines above in the same test.
    
    R=ahaas@chromium.org
    
    Fixed: v8:14353
    Change-Id: I9139370d3ad5bfda9c7d6f6ac3ca8f784a2d30c4
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905771
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Clemens Backes <clemensb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90249}

commit e2d81c561f15809e44be0aa0875bd8138d48599f
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Wed Oct 4 10:25:43 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Optimize more instructions
    
    - Optimize null check on array.len
    - Optimize ref.test
    - Optimize extern.internalize(extern.externalize()) pattern
    - Refine source type for checks and casts
    
    Bug: v8:14108
    Change-Id: Icb45eb9afa30e3254066f9e5cc73b996e89ef2f8
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4906280
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90248}

commit 675223100dab288fb6575c1eb7392509029a7a36
Author: Eric Leese <leese@chromium.org>
Date:   Fri Sep 29 11:29:58 2023 +0200

    Refactor PredictExceptionCatcher into PredictExceptionCatchAtFrame
    
    Allowing the catch prediction logic to be called on a single frame
    rather than the entire stack enables code sharing and is a prerequisite
    for changing ignore listed exception behavior to follow the catch
    prediction logic.
    
    Bug: chromium:1291064
    Change-Id: I8185b1ec5e507aea0fa283fab72f8dd2a422cc7f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4887043
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90247}

commit b5cae86bd677e683c292ef3541f0880a031a8370
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Oct 4 12:38:07 2023 +0200

    [turboshaft] Fix unhandled overflow in loop unrolling
    
    Computing the number of iterations of a loop was done on int64/uint64,
    even when the comparison and binary operations were using
    int32/uint32, which means that overflow didn't wrap around as one
    would expect, and negative values could become positive.
    
    Concretely, in the repro, there is a loop that does something like
    (after lowerings):
    
        for (int i = 9; i <= 1_073_741_823; i += -1) { ... }
    
    On uint32, `9 + -1` (which is the same as `9 + UINT32_MAX`) gives `8`
    as expected. However, if we convert everything to uint64, `9 + -1`
    gives `9 + UINT32_MAX`, which is `4_294_967_304`, which is still in
    range for uint64_t and happens to be larger than `1_073_741_823`,
    leading to the loop exiting after one iteration.
    
    Drive-by: fix bug in InvertComparisonOp.
    
    Fixed: chromium:1488746
    Bug: v8:12783
    Change-Id: I64bacf0c894f0bc7002df435d309f087f793eb38
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905455
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90246}

commit f20fca65f0b47637b6655843f4d848ca7a519868
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Oct 4 12:40:56 2023 +0200

    [ic] Disable Clone IC for unsupported elements kind
    
    If the elements are not simple, or change in the slow case of the
    clone IC, then the fast case must be skipped. This is more
    conservative than neccessary (since some elements kinds have compatible
    binary layout) but also less risky.
    
    Drive-By: Update out of date comment.
    
    Bug: chromium:1488365
    Change-Id: I705bd624abd8b86f8eeb2c8b1cc961229fb9122d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905770
    Reviewed-by: Camillo Bruni <cbruni@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90245}

commit 1b5ca5168c1bc4a98a83175b00a46c8db6565631
Author: Eric Leese <leese@chromium.org>
Date:   Fri Sep 29 11:19:40 2023 +0200

    Tests for catch prediction and pause on exception in ignored code
    
    A variety of test cases showing current behavior of catch prediction
    as well as stopping behavior when pausing on caught/uncaught
    exceptions/rejections originating in ignore listed code.
    
    Some of these are behaviors I plan to change in follow-up CLs. I'm
    checking in the tests first to make it clearer what behavior is
    changing and to ensure there are no unexpected behavior changes.
    
    Bug: chromium:1291064, chromium:465666
    Change-Id: I3a0f9b2dbe62a0d1551b30a530e727c815cfeb81
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4892851
    Reviewed-by: Simon Zünd <szuend@chromium.org>
    Commit-Queue: Eric Leese <leese@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90244}

commit 9c6afe3d07da7dd43b3029651d774116f29a7aef
Author: Olivier Flückiger <olivf@chromium.org>
Date:   Wed Oct 4 11:48:18 2023 +0200

    [maglev] Hard limit on inlining depth
    
    Set a hard max inlining depth that also counts for small functions.
    
    Bug: chromium:1487583
    Change-Id: I7a55a5c506370713ad02a4668fb0f0c6b2cdb9a6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4907917
    Commit-Queue: Olivier Flückiger <olivf@chromium.org>
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Auto-Submit: Olivier Flückiger <olivf@chromium.org>
    Commit-Queue: Leszek Swirski <leszeks@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90243}

commit 9399f752d79f433174a5aea7eca63fe83907e4c2
Author: Cheng Zhao <zcbenz@gmail.com>
Date:   Fri Sep 29 10:12:45 2023 +0900

    Do static_cast for double to int64_t
    
    Some compiler flags complain about this.
    
    Change-Id: I34e9bb3ea21c24e9a82b914a876f4653b479c76f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4904582
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90242}

commit 3822c39e33afc5972ac1ddfa52f3db26b4eb5bcb
Author: Simon Zünd <szuend@chromium.org>
Date:   Wed Oct 4 08:54:23 2023 +0000

    [metrics] Add use counter for @-sign in sourceMappingUrl magic comment
    
    The "//@" magic comment prefix is deprecated and we want to gauge
    it's usage before changing the spec or removing support all together.
    
    Bug: chromium:1488367
    Change-Id: Iac94a52404dffd94097ffbcae3e539354e8996e9
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905900
    Reviewed-by: Leszek Swirski <leszeks@chromium.org>
    Commit-Queue: Simon Zünd <szuend@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90241}

commit 303482ea6d29e27beabeead947fde529bbb4d7ef
Author: Darius M <dmercadier@chromium.org>
Date:   Wed Oct 4 10:46:03 2023 +0200

    [turboshaft][wasm] Load the stack check limit address only once
    
    The previous implementation of StackCheck lowering required 2 LoadOp
    per stack check: one for the limit address, and one for the limit
    itself. With this CL, the limit address is only loaded once at the
    begining.
    
    While it's "just one less load", this improves performance of some
    benchmarks by up to 5-10%.
    
    Note that the StackCheck lowering always unconditionally loads the
    stack limit once. Since this is done in the last phase, we can rely
    on OptimizationPhase to remove it if it has no uses. So,
    RecreateSchedule and InstructionSelector now also ignore Turboshaft
    operations that have no uses.
    
    Bug: v8:14108
    Change-Id: Iff994bebe1dd3579987ec883fd55178f418785c1
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4903651
    Reviewed-by: Andreas Haas <ahaas@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90240}

commit da8f97b63d29bd5de9178b73265b253f96a490fe
Author: Igor Sheludko <ishell@chromium.org>
Date:   Mon Oct 2 12:42:29 2023 +0200

    [ic] Fix feedback vector update tracing
    
    ... when IC is called from an inlined function. Previous implementation
    loaded feedback vector from an IC caller's frame's JSFunction instead
    of using an explicitly provided one.
    
    Drive-by: unify tracing output.
    
    Change-Id: Iab72162ed0f3f64f783130aac84a27fdebfebded
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4906275
    Commit-Queue: Patrick Thier <pthier@chromium.org>
    Reviewed-by: Patrick Thier <pthier@chromium.org>
    Auto-Submit: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90239}

commit 9942ca3a0c41ec826ec7c29d8599510e1a3f6393
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Oct 2 15:42:40 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Optimize struct.(get|set)
    
    Also add type information to parameters and fix special casing for
    implicit extern.internalize in WasmTypeCast.
    
    Bug: v8:14108
    Change-Id: I10eda0b5434f38e14b205f47813380672402ac5b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4906274
    Commit-Queue: Matthias Liedtke <mliedtke@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90238}

commit de98f0c4c40b596749667dfae52174409a1625f2
Author: Michael Achenbach <machenbach@chromium.org>
Date:   Tue Oct 3 21:04:36 2023 +0200

    [test] Return with exit-1 after flakes
    
    This ensures that tasks with flakes are not deduped on swarming.
    The infra-side that collects the tasks doesn't make a difference
    between exit code 0 and 1.
    
    Bug: chromium:1487876
    Change-Id: Ibd85dd154dec0056f3c1ca3b7a7459af5c00fbca
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4907913
    Auto-Submit: Michael Achenbach <machenbach@chromium.org>
    Commit-Queue: Liviu Rau <liviurau@google.com>
    Reviewed-by: Liviu Rau <liviurau@google.com>
    Cr-Commit-Position: refs/heads/main@{#90237}

commit 315b11a78016a7ea5b6a4607031c8284152650a4
Author: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
Date:   Thu Sep 28 17:53:57 2023 +0000

    [array-from-async] Add Array-like path
    
    This CL adds the array-like path to Array.fromasync implementation.
    
    Bug: v8:13321
    Change-Id: I4d3a3c0422c8a5cd9458e73e663ead6017d07cc6
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4858606
    Reviewed-by: Shu-yu Guo <syg@chromium.org>
    Reviewed-by: Adam Klein <adamk@chromium.org>
    Commit-Queue: Rezvan Mahdavi Hezaveh <rezvan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90236}

commit 5f3658c86235cbea731b8a98d5705a2f4443acca
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Tue Oct 3 09:16:48 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/e487e6d..5407b3c
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/b018f90..88124d5
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/f90b3b0..3008d7e
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/63add4d..f775f73
    
    Roll created at https://cr-buildbucket.appspot.com/build/8768243058875616241
    
    Change-Id: Ib328ce5c4f855af092cfb1dcc65ab0f60e676a70
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4908363
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90235}

commit d7678eae475aab7f4a21e9f8c6ff231962dba36b
Author: Matthias Liedtke <mliedtke@chromium.org>
Date:   Mon Oct 2 15:42:33 2023 +0200

    [wasm][turboshaft] WasmGCTypeReducer: Optimize IsNull
    
    Bug: v8:14108
    Change-Id: I37bd68ef2b4f3702887c78b95a30b159447934b2
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905134
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Auto-Submit: Matthias Liedtke <mliedtke@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90234}

commit 887dfc1308abdd182ae307d0eb40d0dc60a5d653
Author: Anton Bikineev <bikineev@chromium.org>
Date:   Mon Oct 2 21:29:06 2023 +0200

    heap: Remove black allocation
    
    Instead, store labs and pending objects (large objects being
    allocated/initialized) in a registry - LabOriginalLimits.
    The concurrent marker scans all the registered labs checking if a
    heap-objects belongs to any registered lab.
    
    This is a prerequisite for the inlined markbit.
    
    The followup will be moving spaces' labs and pending objects into
    the same registry and as such unifying all implementations.
    
    The change is neutral on Speedometer2, both on M1 and on Linux.
    
    Bug: v8:14158
    Change-Id: Ic28be020ba2a4d0ec93689a69bed46d48cd7caf5
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4876860
    Reviewed-by: Dominik Inführ <dinfuehr@chromium.org>
    Commit-Queue: Anton Bikineev <bikineev@chromium.org>
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90233}

commit 7b08203a982251da4eb8e1513e8cfac35115de1a
Author: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Oct 2 21:06:26 2023 -0700

    Update V8 DEPS (trusted)
    
    Rolling v8/build: https://chromium.googlesource.com/chromium/src/build/+log/b3ac98b..e487e6d
    
    Rolling v8/buildtools: https://chromium.googlesource.com/chromium/src/buildtools/+log/50c3489..c8bee3e
    
    Rolling v8/third_party/abseil-cpp: https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp/+log/7207ed2..0f519c0
    
    Rolling v8/third_party/catapult: https://chromium.googlesource.com/catapult/+log/4f81c1e..b018f90
    
    Rolling v8/third_party/depot_tools: https://chromium.googlesource.com/chromium/tools/depot_tools/+log/90a30a5..f90b3b0
    
    Rolling v8/third_party/libc++/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx/+log/7cf9862..a094e25
    
    Rolling v8/third_party/libunwind/src: https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind/+log/43e5a34..7608093
    
    Rolling v8/tools/clang: https://chromium.googlesource.com/chromium/src/tools/clang/+log/dc3593c..63add4d
    
    Roll created at https://cr-buildbucket.appspot.com/build/8768288370940957169
    
    Change-Id: Ib2a882da08260601145d32dbe42fda7f3add088e
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4908355
    Bot-Commit: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Commit-Queue: v8-ci-autoroll-builder <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#90232}

commit 80c88f3c6a33d20868ec7d8eebe047d34bcec2df
Author: Dominik Inführ <dinfuehr@chromium.org>
Date:   Mon Oct 2 19:50:49 2023 +0200

    [heap] Remove LAB access from ShrinkImmortalImmovablePages
    
    NotifyDeserializationComplete() can free the LABs for all spaces
    instead. The CL also moves the tracking of the high water mark to
    the MainAllocator class, where it is updated in both
    FreeLinearAllocationArea() and ResetLab().
    
    Bug: chromium:1480975
    Change-Id: I723b56ee99466de3176d698bfe71ed2bc12bec54
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4905287
    Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
    Commit-Queue: Dominik Inführ <dinfuehr@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90231}

commit 940fa37f51f6c1981b361fd6dd052fe0d628d057
Author: Thibaud Michaud <thibaudm@chromium.org>
Date:   Mon Oct 2 18:51:28 2023 +0200

    [wasm][relaxed-simd] Handle NaNs in I32x4TruncF32x4U
    
    R=jkummerow@chromium.org
    
    Bug: v8:14356
    Change-Id: I1b68b8d4cb6478cbdd9784262a6e0af52a297f28
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4906283
    Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
    Commit-Queue: Thibaud Michaud <thibaudm@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90230}

commit 8cf3c86eb02cc10d3365ed47ae5f4489d270d06e
Author: Darius M <dmercadier@chromium.org>
Date:   Mon Oct 2 15:30:41 2023 +0200

    [turboshaft] Fix computation of Operation count for loop unrolling
    
    LoopInfo's op_count didn't include so far the Operations from the loop
    header. This is now fixed.
    
    Bug: v8:12783
    Change-Id: I860786fede1108e4827445473e9cae7d72524afc
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4907908
    Auto-Submit: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Reviewed-by: Nico Hartmann <nicohartmann@chromium.org>
    Commit-Queue: Nico Hartmann <nicohartmann@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90229}

commit 1c0585e15fee4a8aa8d63bb4773d08c67c1b71f7
Author: Leszek Swirski <leszeks@chromium.org>
Date:   Mon Oct 2 15:12:32 2023 +0200

    [turbofan] Optimize Float64 NaN check
    
    Check whether a Float64Equal is comparing a value against itself, and if
    yes, emit a NaN check (parity_even) instead of a kUnorderedEqual, since
    that's the only case where a value can be not equal to itself.
    
    Change-Id: Id2ad1f4c6a17855116a765d8c4d7e9d67ea29c5d
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4906277
    Auto-Submit: Leszek Swirski <leszeks@chromium.org>
    Reviewed-by: Darius Mercadier <dmercadier@chromium.org>
    Commit-Queue: Darius Mercadier <dmercadier@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90228}

commit ef0e120e97a20c942e9b5a4a8792f3c865bcba11
Author: V8 Autoroll <v8-ci-autoroll-builder@chops-service-accounts.iam.gserviceaccount.com>
Date:   Mon Oct 2 06:01:35 2023 -0700

    Version 12.0.0
    
    Change-Id: I279229888fdfe7fe2195581da56b42754f5cca0f
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4903113
    Reviewed-by: Lutz Vahl <vahl@chromium.org>
    Commit-Queue: Lutz Vahl <vahl@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#90227}
